# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-06 14:20+0000\n"
"PO-Revision-Date: 2025-07-18 18:50+0000\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../using/android.rst:5
msgid "Using Python on Android"
msgstr ""

#: ../../using/android.rst:7
msgid ""
"Python on Android is unlike Python on desktop platforms. On a desktop "
"platform, Python is generally installed as a system resource that can be "
"used by any user of that computer. Users then interact with Python by "
"running a :program:`python` executable and entering commands at an "
"interactive prompt, or by running a Python script."
msgstr ""

#: ../../using/android.rst:13
msgid ""
"On Android, there is no concept of installing as a system resource. The only "
"unit of software distribution is an \"app\". There is also no console where "
"you could run a :program:`python` executable, or interact with a Python REPL."
msgstr ""

#: ../../using/android.rst:17
msgid ""
"As a result, the only way you can use Python on Android is in embedded mode "
"â€“ that is, by writing a native Android application, embedding a Python "
"interpreter using ``libpython``, and invoking Python code using the :ref:"
"`Python embedding API <embedding>`. The full Python interpreter, the "
"standard library, and all your Python code is then packaged into your app "
"for its own private use."
msgstr ""

#: ../../using/android.rst:23
msgid ""
"The Python standard library has some notable omissions and restrictions on "
"Android. See the :ref:`API availability guide <mobile-availability>` for "
"details."
msgstr ""

#: ../../using/android.rst:28
msgid "Adding Python to an Android app"
msgstr ""

#: ../../using/android.rst:30
msgid ""
"Most app developers should use one of the following tools, which will "
"provide a much easier experience:"
msgstr ""

#: ../../using/android.rst:33
msgid ""
"`Briefcase <https://briefcase.readthedocs.io>`__, from the BeeWare project"
msgstr ""

#: ../../using/android.rst:34
msgid "`Buildozer <https://buildozer.readthedocs.io>`__, from the Kivy project"
msgstr ""

#: ../../using/android.rst:35
msgid "`Chaquopy <https://chaquo.com/chaquopy>`__"
msgstr ""

#: ../../using/android.rst:36
msgid ""
"`pyqtdeploy <https://www.riverbankcomputing.com/static/Docs/pyqtdeploy/>`__"
msgstr ""

#: ../../using/android.rst:37
msgid "`Termux <https://termux.dev/en/>`__"
msgstr ""

#: ../../using/android.rst:39
msgid ""
"If you're sure you want to do all of this manually, read on. You can use "
"the :source:`testbed app <Android/testbed>` as a guide; each step below "
"contains a link to the relevant file."
msgstr ""

#: ../../using/android.rst:43
msgid ""
"Build Python by following the instructions in :source:`Android/README.md`. "
"This will create the directory ``cross-build/HOST/prefix``."
msgstr ""

#: ../../using/android.rst:46
msgid ""
"Add code to your :source:`build.gradle <Android/testbed/app/build.gradle."
"kts>` file to copy the following items into your project. All except your "
"own Python code can be copied from ``prefix/lib``:"
msgstr ""

#: ../../using/android.rst:50
msgid "In your JNI libraries:"
msgstr ""

#: ../../using/android.rst:52
msgid "``libpython*.*.so``"
msgstr ""

#: ../../using/android.rst:53
msgid "``lib*_python.so`` (external libraries such as OpenSSL)"
msgstr ""

#: ../../using/android.rst:55
msgid "In your assets:"
msgstr ""

#: ../../using/android.rst:57
msgid "``python*.*`` (the Python standard library)"
msgstr ""

#: ../../using/android.rst:58
msgid "``python*.*/site-packages`` (your own Python code)"
msgstr ""

#: ../../using/android.rst:60
msgid ""
"Add code to your app to :source:`extract the assets to the filesystem "
"<Android/testbed/app/src/main/java/org/python/testbed/MainActivity.kt>`."
msgstr ""

#: ../../using/android.rst:63
msgid ""
"Add code to your app to :source:`start Python in embedded mode <Android/"
"testbed/app/src/main/c/main_activity.c>`. This will need to be C code called "
"via JNI."
msgstr ""

#: ../../using/android.rst:68
msgid "Building a Python package for Android"
msgstr ""

#: ../../using/android.rst:70
msgid ""
"Python packages can be built for Android as wheels and released on PyPI. The "
"recommended tool for doing this is `cibuildwheel <https://cibuildwheel.pypa."
"io/en/stable/platforms/#android>`__, which automates all the details of "
"setting up a cross-compilation environment, building the wheel, and testing "
"it on an emulator."
msgstr ""
