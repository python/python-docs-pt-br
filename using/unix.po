# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2025-07-18 18:50+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../using/unix.rst:7
msgid "Using Python on Unix platforms"
msgstr ""

#: ../../using/unix.rst:13
msgid "Getting and installing the latest version of Python"
msgstr ""

#: ../../using/unix.rst:16
msgid "On Linux"
msgstr ""

#: ../../using/unix.rst:18
msgid ""
"Python comes preinstalled on most Linux distributions, and is available as a "
"package on all others.  However there are certain features you might want to "
"use that are not available on your distro's package.  You can compile the "
"latest version of Python from source."
msgstr ""

#: ../../using/unix.rst:23
msgid ""
"In the event that the latest version of Python doesn't come preinstalled and "
"isn't in the repositories as well, you can make packages for your own "
"distro.  Have a look at the following links:"
msgstr ""

#: ../../using/unix.rst:29
msgid "https://www.debian.org/doc/manuals/maint-guide/first.en.html"
msgstr ""

#: ../../using/unix.rst:30
msgid "for Debian users"
msgstr ""

#: ../../using/unix.rst:31
msgid "https://en.opensuse.org/Portal:Packaging"
msgstr ""

#: ../../using/unix.rst:32
msgid "for OpenSuse users"
msgstr ""

#: ../../using/unix.rst:33
msgid ""
"https://docs.fedoraproject.org/en-US/package-maintainers/"
"Packaging_Tutorial_GNU_Hello/"
msgstr ""

#: ../../using/unix.rst:34
msgid "for Fedora users"
msgstr ""

#: ../../using/unix.rst:35
msgid "https://slackbook.org/html/package-management-making-packages.html"
msgstr ""

#: ../../using/unix.rst:36
msgid "for Slackware users"
msgstr ""

#: ../../using/unix.rst:41
msgid "Installing IDLE"
msgstr ""

#: ../../using/unix.rst:43
msgid "In some cases, IDLE might not be included in your Python installation."
msgstr ""

#: ../../using/unix.rst:45
msgid "For Debian and Ubuntu users::"
msgstr ""

#: ../../using/unix.rst:47
msgid ""
"sudo apt update\n"
"sudo apt install idle"
msgstr ""

#: ../../using/unix.rst:50
msgid "For Fedora, RHEL, and CentOS users::"
msgstr ""

#: ../../using/unix.rst:52
msgid "sudo dnf install python3-idle"
msgstr ""

#: ../../using/unix.rst:54
msgid "For SUSE and OpenSUSE users::"
msgstr ""

#: ../../using/unix.rst:56
msgid "sudo zypper install python3-idle"
msgstr ""

#: ../../using/unix.rst:58
msgid "For Alpine Linux users::"
msgstr ""

#: ../../using/unix.rst:60
msgid "sudo apk add python3-idle"
msgstr ""

#: ../../using/unix.rst:65
msgid "On FreeBSD and OpenBSD"
msgstr ""

#: ../../using/unix.rst:67
msgid "FreeBSD users, to add the package use::"
msgstr ""

#: ../../using/unix.rst:69
msgid "pkg install python3"
msgstr ""

#: ../../using/unix.rst:71
msgid "OpenBSD users, to add the package use::"
msgstr ""

#: ../../using/unix.rst:73
msgid ""
"pkg_add -r python\n"
"\n"
"pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/<insert your "
"architecture here>/python-<version>.tgz"
msgstr ""

#: ../../using/unix.rst:77
msgid "For example i386 users get the 2.5.1 version of Python using::"
msgstr ""

#: ../../using/unix.rst:79
msgid ""
"pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/i386/python-2.5.1p2."
"tgz"
msgstr ""

#: ../../using/unix.rst:85
msgid "Building Python"
msgstr ""

#: ../../using/unix.rst:87
msgid ""
"If you want to compile CPython yourself, first thing you should do is get "
"the `source <https://www.python.org/downloads/source/>`_. You can download "
"either the latest release's source or just grab a fresh `clone <https://"
"devguide.python.org/setup/#get-the-source-code>`_.  (If you want to "
"contribute patches, you will need a clone.)"
msgstr ""

#: ../../using/unix.rst:93
msgid "The build process consists of the usual commands::"
msgstr ""

#: ../../using/unix.rst:95
msgid ""
"./configure\n"
"make\n"
"make install"
msgstr ""

#: ../../using/unix.rst:99
msgid ""
":ref:`Configuration options <configure-options>` and caveats for specific "
"Unix platforms are extensively documented in the :source:`README.rst` file "
"in the root of the Python source tree."
msgstr ""

#: ../../using/unix.rst:105
msgid ""
"``make install`` can overwrite or masquerade the :file:`python3` binary. "
"``make altinstall`` is therefore recommended instead of ``make install`` "
"since it only installs :file:`{exec_prefix}/bin/python{version}`."
msgstr ""

#: ../../using/unix.rst:111
msgid "Python-related paths and files"
msgstr ""

#: ../../using/unix.rst:113
msgid ""
"These are subject to difference depending on local installation "
"conventions; :option:`prefix <--prefix>` and :option:`exec_prefix <--exec-"
"prefix>` are installation-dependent and should be interpreted as for GNU "
"software; they may be the same."
msgstr ""

#: ../../using/unix.rst:118
msgid ""
"For example, on most Linux systems, the default for both is :file:`/usr`."
msgstr ""

#: ../../using/unix.rst:121
msgid "File/directory"
msgstr ""

#: ../../using/unix.rst:121
msgid "Meaning"
msgstr "Significado"

#: ../../using/unix.rst:123
msgid ":file:`{exec_prefix}/bin/python3`"
msgstr ""

#: ../../using/unix.rst:123
msgid "Recommended location of the interpreter."
msgstr ""

#: ../../using/unix.rst:125
msgid ""
":file:`{prefix}/lib/python{version}`, :file:`{exec_prefix}/lib/"
"python{version}`"
msgstr ""

#: ../../using/unix.rst:125
msgid ""
"Recommended locations of the directories containing the standard modules."
msgstr ""

#: ../../using/unix.rst:128
msgid ""
":file:`{prefix}/include/python{version}`, :file:`{exec_prefix}/include/"
"python{version}`"
msgstr ""

#: ../../using/unix.rst:128
msgid ""
"Recommended locations of the directories containing the include files needed "
"for developing Python extensions and embedding the interpreter."
msgstr ""

#: ../../using/unix.rst:136
msgid "Miscellaneous"
msgstr ""

#: ../../using/unix.rst:138
msgid ""
"To easily use Python scripts on Unix, you need to make them executable, e.g. "
"with"
msgstr ""

#: ../../using/unix.rst:141
msgid "$ chmod +x script"
msgstr ""

#: ../../using/unix.rst:145
msgid ""
"and put an appropriate Shebang line at the top of the script.  A good choice "
"is usually ::"
msgstr ""

#: ../../using/unix.rst:148
msgid "#!/usr/bin/env python3"
msgstr ""

#: ../../using/unix.rst:150
msgid ""
"which searches for the Python interpreter in the whole :envvar:`PATH`.  "
"However, some Unices may not have the :program:`env` command, so you may "
"need to hardcode ``/usr/bin/python3`` as the interpreter path."
msgstr ""

#: ../../using/unix.rst:154
msgid ""
"To use shell commands in your Python scripts, look at the :mod:`subprocess` "
"module."
msgstr ""

#: ../../using/unix.rst:159
msgid "Custom OpenSSL"
msgstr ""

#: ../../using/unix.rst:161
msgid ""
"To use your vendor's OpenSSL configuration and system trust store, locate "
"the directory with ``openssl.cnf`` file or symlink in ``/etc``. On most "
"distribution the file is either in ``/etc/ssl`` or ``/etc/pki/tls``. The "
"directory should also contain a ``cert.pem`` file and/or a ``certs`` "
"directory."
msgstr ""

#: ../../using/unix.rst:167
msgid ""
"$ find /etc/ -name openssl.cnf -printf \"%h\\n\"\n"
"/etc/ssl"
msgstr ""

#: ../../using/unix.rst:172
msgid ""
"Download, build, and install OpenSSL. Make sure you use ``install_sw`` and "
"not ``install``. The ``install_sw`` target does not override ``openssl.cnf``."
msgstr ""

#: ../../using/unix.rst:176
msgid ""
"$ curl -O https://www.openssl.org/source/openssl-VERSION.tar.gz\n"
"$ tar xzf openssl-VERSION\n"
"$ pushd openssl-VERSION\n"
"$ ./config \\\n"
"    --prefix=/usr/local/custom-openssl \\\n"
"    --libdir=lib \\\n"
"    --openssldir=/etc/ssl\n"
"$ make -j1 depend\n"
"$ make -j8\n"
"$ make install_sw\n"
"$ popd"
msgstr ""

#: ../../using/unix.rst:190
msgid ""
"Build Python with custom OpenSSL (see the configure ``--with-openssl`` and "
"``--with-openssl-rpath`` options)"
msgstr ""

#: ../../using/unix.rst:193
msgid ""
"$ pushd python-3.x.x\n"
"$ ./configure -C \\\n"
"    --with-openssl=/usr/local/custom-openssl \\\n"
"    --with-openssl-rpath=auto \\\n"
"    --prefix=/usr/local/python-3.x.x\n"
"$ make -j8\n"
"$ make altinstall"
msgstr ""

#: ../../using/unix.rst:205
msgid ""
"Patch releases of OpenSSL have a backwards compatible ABI. You don't need to "
"recompile Python to update OpenSSL. It's sufficient to replace the custom "
"OpenSSL installation with a newer version."
msgstr ""
