# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-27 14:20+0000\n"
"PO-Revision-Date: 2025-07-18 18:50+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../using/cmdline.rst:9
msgid "Command line and environment"
msgstr ""

#: ../../using/cmdline.rst:11
msgid ""
"The CPython interpreter scans the command line and the environment for "
"various settings."
msgstr ""

#: ../../using/cmdline.rst:16
msgid ""
"Other implementations' command line schemes may differ.  See :ref:"
"`implementations` for further resources."
msgstr ""

#: ../../using/cmdline.rst:23
msgid "Command line"
msgstr ""

#: ../../using/cmdline.rst:25
msgid "When invoking Python, you may specify any of these options::"
msgstr ""

#: ../../using/cmdline.rst:27
msgid ""
"python [-bBdEhiIOPqRsSuvVWx?] [-c command | -m module-name | script | - ] "
"[args]"
msgstr ""

#: ../../using/cmdline.rst:29
msgid ""
"The most common use case is, of course, a simple invocation of a script::"
msgstr ""

#: ../../using/cmdline.rst:31
msgid "python myscript.py"
msgstr ""

#: ../../using/cmdline.rst:37
msgid "Interface options"
msgstr ""

#: ../../using/cmdline.rst:39
msgid ""
"The interpreter interface resembles that of the UNIX shell, but provides "
"some additional methods of invocation:"
msgstr ""

#: ../../using/cmdline.rst:42
msgid ""
"When called with standard input connected to a tty device, it prompts for "
"commands and executes them until an EOF (an end-of-file character, you can "
"produce that with :kbd:`Ctrl-D` on UNIX or :kbd:`Ctrl-Z, Enter` on Windows) "
"is read. For more on interactive mode, see :ref:`tut-interac`."
msgstr ""

#: ../../using/cmdline.rst:46
msgid ""
"When called with a file name argument or with a file as standard input, it "
"reads and executes a script from that file."
msgstr ""

#: ../../using/cmdline.rst:48
msgid ""
"When called with a directory name argument, it reads and executes an "
"appropriately named script from that directory."
msgstr ""

#: ../../using/cmdline.rst:50
msgid ""
"When called with ``-c command``, it executes the Python statement(s) given "
"as *command*.  Here *command* may contain multiple statements separated by "
"newlines. Leading whitespace is significant in Python statements!"
msgstr ""

#: ../../using/cmdline.rst:53
msgid ""
"When called with ``-m module-name``, the given module is located on the "
"Python module path and executed as a script."
msgstr ""

#: ../../using/cmdline.rst:56
msgid ""
"In non-interactive mode, the entire input is parsed before it is executed."
msgstr ""

#: ../../using/cmdline.rst:58
msgid ""
"An interface option terminates the list of options consumed by the "
"interpreter, all consecutive arguments will end up in :data:`sys.argv` -- "
"note that the first element, subscript zero (``sys.argv[0]``), is a string "
"reflecting the program's source."
msgstr ""

#: ../../using/cmdline.rst:65
msgid ""
"Execute the Python code in *command*.  *command* can be one or more "
"statements separated by newlines, with significant leading whitespace as in "
"normal module code."
msgstr ""

#: ../../using/cmdline.rst:69
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be ``\"-"
"c\"`` and the current directory will be added to the start of :data:`sys."
"path` (allowing modules in that directory to be imported as top level "
"modules)."
msgstr ""

#: ../../using/cmdline.rst:74
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_command`` with "
"argument ``command``."
msgstr ""

#: ../../using/cmdline.rst:76
msgid "*command* is automatically dedented before execution."
msgstr ""

#: ../../using/cmdline.rst:81
msgid ""
"Search :data:`sys.path` for the named module and execute its contents as "
"the :mod:`__main__` module."
msgstr ""

#: ../../using/cmdline.rst:84
msgid ""
"Since the argument is a *module* name, you must not give a file extension "
"(``.py``).  The module name should be a valid absolute Python module name, "
"but the implementation may not always enforce this (e.g. it may allow you to "
"use a name that includes a hyphen)."
msgstr ""

#: ../../using/cmdline.rst:89
msgid ""
"Package names (including namespace packages) are also permitted. When a "
"package name is supplied instead of a normal module, the interpreter will "
"execute ``<pkg>.__main__`` as the main module. This behaviour is "
"deliberately similar to the handling of directories and zipfiles that are "
"passed to the interpreter as the script argument."
msgstr ""

#: ../../using/cmdline.rst:98
msgid ""
"This option cannot be used with built-in modules and extension modules "
"written in C, since they do not have Python module files. However, it can "
"still be used for precompiled modules, even if the original source file is "
"not available."
msgstr ""

#: ../../using/cmdline.rst:103
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be the "
"full path to the module file (while the module file is being located, the "
"first element will be set to ``\"-m\"``). As with the :option:`-c` option, "
"the current directory will be added to the start of :data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:108
msgid ""
":option:`-I` option can  be used to run the script in isolated mode where :"
"data:`sys.path` contains neither the current directory nor the user's site-"
"packages directory. All ``PYTHON*`` environment variables are ignored, too."
msgstr ""

#: ../../using/cmdline.rst:113
msgid ""
"Many standard library modules contain code that is invoked on their "
"execution as a script.  An example is the :mod:`timeit` module::"
msgstr ""

#: ../../using/cmdline.rst:116
msgid ""
"python -m timeit -s \"setup here\" \"benchmarked code here\"\n"
"python -m timeit -h # for details"
msgstr ""

#: ../../using/cmdline.rst:119
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_module`` with "
"argument ``module-name``."
msgstr ""

#: ../../using/cmdline.rst:122
msgid ":func:`runpy.run_module`"
msgstr ""

#: ../../using/cmdline.rst:123 ../../using/cmdline.rst:175
msgid "Equivalent functionality directly available to Python code"
msgstr ""

#: ../../using/cmdline.rst:125
msgid ":pep:`338` -- Executing modules as scripts"
msgstr ""

#: ../../using/cmdline.rst:127
msgid "Supply the package name to run a ``__main__`` submodule."
msgstr ""

#: ../../using/cmdline.rst:130
msgid "namespace packages are also supported"
msgstr ""

#: ../../using/cmdline.rst:137
msgid ""
"Read commands from standard input (:data:`sys.stdin`).  If standard input is "
"a terminal, :option:`-i` is implied."
msgstr ""

#: ../../using/cmdline.rst:140
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be ``\"-"
"\"`` and the current directory will be added to the start of :data:`sys."
"path`."
msgstr ""

#: ../../using/cmdline.rst:144 ../../using/cmdline.rst:834
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_stdin`` with no "
"arguments."
msgstr ""

#: ../../using/cmdline.rst:150
msgid ""
"Execute the Python code contained in *script*, which must be a filesystem "
"path (absolute or relative) referring to either a Python file, a directory "
"containing a ``__main__.py`` file, or a zipfile containing a ``__main__.py`` "
"file."
msgstr ""

#: ../../using/cmdline.rst:155
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be the "
"script name as given on the command line."
msgstr ""

#: ../../using/cmdline.rst:158
msgid ""
"If the script name refers directly to a Python file, the directory "
"containing that file is added to the start of :data:`sys.path`, and the file "
"is executed as the :mod:`__main__` module."
msgstr ""

#: ../../using/cmdline.rst:162
msgid ""
"If the script name refers to a directory or zipfile, the script name is "
"added to the start of :data:`sys.path` and the ``__main__.py`` file in that "
"location is executed as the :mod:`__main__` module."
msgstr ""

#: ../../using/cmdline.rst:166
msgid ""
":option:`-I` option can  be used to run the script in isolated mode where :"
"data:`sys.path` contains neither the script's directory nor the user's site-"
"packages directory. All ``PYTHON*`` environment variables are ignored, too."
msgstr ""

#: ../../using/cmdline.rst:171
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_file`` with "
"argument ``filename``."
msgstr ""

#: ../../using/cmdline.rst:174
msgid ":func:`runpy.run_path`"
msgstr ""

#: ../../using/cmdline.rst:178
msgid ""
"If no interface option is given, :option:`-i` is implied, ``sys.argv[0]`` is "
"an empty string (``\"\"``) and the current directory will be added to the "
"start of :data:`sys.path`.  Also, tab-completion and history editing is "
"automatically enabled, if available on your platform (see :ref:`rlcompleter-"
"config`)."
msgstr ""

#: ../../using/cmdline.rst:184
msgid ":ref:`tut-invoking`"
msgstr ""

#: ../../using/cmdline.rst:186
msgid "Automatic enabling of tab-completion and history editing."
msgstr ""

#: ../../using/cmdline.rst:193
msgid "Generic options"
msgstr ""

#: ../../using/cmdline.rst:199
msgid ""
"Print a short description of all command line options and corresponding "
"environment variables and exit."
msgstr ""

#: ../../using/cmdline.rst:204
msgid ""
"Print a short description of Python-specific environment variables and exit."
msgstr ""

#: ../../using/cmdline.rst:211
msgid ""
"Print a description of implementation-specific :option:`-X` options and exit."
msgstr ""

#: ../../using/cmdline.rst:218
msgid "Print complete usage information and exit."
msgstr ""

#: ../../using/cmdline.rst:225
msgid "Print the Python version number and exit.  Example output could be:"
msgstr ""

#: ../../using/cmdline.rst:227
msgid "Python 3.8.0b2+"
msgstr ""

#: ../../using/cmdline.rst:231
msgid "When given twice, print more information about the build, like:"
msgstr ""

#: ../../using/cmdline.rst:233
msgid ""
"Python 3.8.0b2+ (3.8:0c076caaa8, Apr 20 2019, 21:55:00)\n"
"[GCC 6.2.0 20161005]"
msgstr ""

#: ../../using/cmdline.rst:238
msgid "The ``-VV`` option."
msgstr ""

#: ../../using/cmdline.rst:245
msgid "Miscellaneous options"
msgstr ""

#: ../../using/cmdline.rst:249
msgid ""
"Issue a warning when converting :class:`bytes` or :class:`bytearray` to :"
"class:`str` without specifying encoding or comparing :class:`!bytes` or :"
"class:`!bytearray` with :class:`!str` or :class:`!bytes` with :class:`int`. "
"Issue an error when the option is given twice (:option:`!-bb`)."
msgstr ""

#: ../../using/cmdline.rst:254
msgid "Affects also comparisons of :class:`bytes` with :class:`int`."
msgstr ""

#: ../../using/cmdline.rst:259
msgid ""
"If given, Python won't try to write ``.pyc`` files on the import of source "
"modules.  See also :envvar:`PYTHONDONTWRITEBYTECODE`."
msgstr ""

#: ../../using/cmdline.rst:265
msgid ""
"Control the validation behavior of hash-based ``.pyc`` files. See :ref:`pyc-"
"invalidation`. When set to ``default``, checked and unchecked hash-based "
"bytecode cache files are validated according to their default semantics. "
"When set to ``always``, all hash-based ``.pyc`` files, whether checked or "
"unchecked, are validated against their corresponding source file. When set "
"to ``never``, hash-based ``.pyc`` files are not validated against their "
"corresponding source files."
msgstr ""

#: ../../using/cmdline.rst:273
msgid ""
"The semantics of timestamp-based ``.pyc`` files are unaffected by this "
"option."
msgstr ""

#: ../../using/cmdline.rst:279
msgid ""
"Turn on parser debugging output (for expert only). See also the :envvar:"
"`PYTHONDEBUG` environment variable."
msgstr ""

#: ../../using/cmdline.rst:282
msgid ""
"This option requires a :ref:`debug build of Python <debug-build>`, otherwise "
"it's ignored."
msgstr ""

#: ../../using/cmdline.rst:288
msgid ""
"Ignore all ``PYTHON*`` environment variables, e.g. :envvar:`PYTHONPATH` and :"
"envvar:`PYTHONHOME`, that might be set."
msgstr ""

#: ../../using/cmdline.rst:291
msgid "See also the :option:`-P` and :option:`-I` (isolated) options."
msgstr ""

#: ../../using/cmdline.rst:296
msgid "Enter interactive mode after execution."
msgstr ""

#: ../../using/cmdline.rst:298
msgid ""
"Using the :option:`-i` option will enter interactive mode in any of the "
"following circumstances\\:"
msgstr ""

#: ../../using/cmdline.rst:300
msgid "When a script is passed as first argument"
msgstr ""

#: ../../using/cmdline.rst:301
msgid "When the :option:`-c` option is used"
msgstr ""

#: ../../using/cmdline.rst:302
msgid "When the :option:`-m` option is used"
msgstr ""

#: ../../using/cmdline.rst:304
msgid ""
"Interactive mode will start even when :data:`sys.stdin` does not appear to "
"be a terminal. The :envvar:`PYTHONSTARTUP` file is not read."
msgstr ""

#: ../../using/cmdline.rst:307
msgid ""
"This can be useful to inspect global variables or a stack trace when a "
"script raises an exception.  See also :envvar:`PYTHONINSPECT`."
msgstr ""

#: ../../using/cmdline.rst:313
msgid ""
"Run Python in isolated mode. This also implies :option:`-E`, :option:`-P` "
"and :option:`-s` options."
msgstr ""

#: ../../using/cmdline.rst:316
msgid ""
"In isolated mode :data:`sys.path` contains neither the script's directory "
"nor the user's site-packages directory. All ``PYTHON*`` environment "
"variables are ignored, too. Further restrictions may be imposed to prevent "
"the user from injecting malicious code."
msgstr ""

#: ../../using/cmdline.rst:326
msgid ""
"Remove assert statements and any code conditional on the value of :const:"
"`__debug__`.  Augment the filename for compiled (:term:`bytecode`) files by "
"adding ``.opt-1`` before the ``.pyc`` extension (see :pep:`488`).  See also :"
"envvar:`PYTHONOPTIMIZE`."
msgstr ""

#: ../../using/cmdline.rst:331 ../../using/cmdline.rst:341
msgid "Modify ``.pyc`` filenames according to :pep:`488`."
msgstr ""

#: ../../using/cmdline.rst:337
msgid ""
"Do :option:`-O` and also discard docstrings.  Augment the filename for "
"compiled (:term:`bytecode`) files by adding ``.opt-2`` before the ``.pyc`` "
"extension (see :pep:`488`)."
msgstr ""

#: ../../using/cmdline.rst:347
msgid "Don't prepend a potentially unsafe path to :data:`sys.path`:"
msgstr ""

#: ../../using/cmdline.rst:349
msgid ""
"``python -m module`` command line: Don't prepend the current working "
"directory."
msgstr ""

#: ../../using/cmdline.rst:351
msgid ""
"``python script.py`` command line: Don't prepend the script's directory. If "
"it's a symbolic link, resolve symbolic links."
msgstr ""

#: ../../using/cmdline.rst:353
msgid ""
"``python -c code`` and ``python`` (REPL) command lines: Don't prepend an "
"empty string, which means the current working directory."
msgstr ""

#: ../../using/cmdline.rst:356
msgid ""
"See also the :envvar:`PYTHONSAFEPATH` environment variable, and :option:`-E` "
"and :option:`-I` (isolated) options."
msgstr ""

#: ../../using/cmdline.rst:364
msgid ""
"Don't display the copyright and version messages even in interactive mode."
msgstr ""
"Não exibe as mensagens de direito autoral e de versão nem mesmo no modo "
"interativo."

#: ../../using/cmdline.rst:371
msgid ""
"Turn on hash randomization. This option only has an effect if the :envvar:"
"`PYTHONHASHSEED` environment variable is set to ``0``, since hash "
"randomization is enabled by default."
msgstr ""

#: ../../using/cmdline.rst:375
msgid ""
"On previous versions of Python, this option turns on hash randomization, so "
"that the :meth:`~object.__hash__` values of str and bytes objects are "
"\"salted\" with an unpredictable random value.  Although they remain "
"constant within an individual Python process, they are not predictable "
"between repeated invocations of Python."
msgstr ""

#: ../../using/cmdline.rst:381
msgid ""
"Hash randomization is intended to provide protection against a denial-of-"
"service caused by carefully chosen inputs that exploit the worst case "
"performance of a dict construction, *O*\\ (*n*\\ :sup:`2`) complexity.  See "
"http://ocert.org/advisories/ocert-2011-003.html for details."
msgstr ""

#: ../../using/cmdline.rst:386
msgid ""
":envvar:`PYTHONHASHSEED` allows you to set a fixed value for the hash seed "
"secret."
msgstr ""

#: ../../using/cmdline.rst:391
msgid "The option is no longer ignored."
msgstr ""

#: ../../using/cmdline.rst:397
msgid ""
"Don't add the :data:`user site-packages directory <site.USER_SITE>` to :data:"
"`sys.path`."
msgstr ""
"Não adiciona o :data:`diretório site-packages de usuário <user site-packages "
"directory>` a :data:`sys.path`."

#: ../../using/cmdline.rst:400
msgid "See also :envvar:`PYTHONNOUSERSITE`."
msgstr ""

#: ../../using/cmdline.rst:404 ../../using/cmdline.rst:931
#: ../../using/cmdline.rst:943
msgid ":pep:`370` -- Per user site-packages directory"
msgstr ""

#: ../../using/cmdline.rst:409
msgid ""
"Disable the import of the module :mod:`site` and the site-dependent "
"manipulations of :data:`sys.path` that it entails.  Also disable these "
"manipulations if :mod:`site` is explicitly imported later (call :func:`site."
"main` if you want them to be triggered)."
msgstr ""
"Desabilita a importação do módulo :mod:`site` e as manipulações dependentes "
"do site de :data:`sys.path` que isso acarreta. Também desabilita essas "
"manipulações se :mod:`site` for explicitamente importado mais tarde (chame :"
"func:`site.main` se você quiser que eles sejam acionados)."

#: ../../using/cmdline.rst:417
msgid ""
"Force the stdout and stderr streams to be unbuffered.  This option has no "
"effect on the stdin stream."
msgstr ""

#: ../../using/cmdline.rst:420
msgid "See also :envvar:`PYTHONUNBUFFERED`."
msgstr ""

#: ../../using/cmdline.rst:422
msgid "The text layer of the stdout and stderr streams now is unbuffered."
msgstr ""

#: ../../using/cmdline.rst:428
msgid ""
"Print a message each time a module is initialized, showing the place "
"(filename or built-in module) from which it is loaded.  When given twice (:"
"option:`!-vv`), print a message for each file that is checked for when "
"searching for a module.  Also provides information on module cleanup at exit."
msgstr ""

#: ../../using/cmdline.rst:433
msgid ""
"The :mod:`site` module reports the site-specific paths and :file:`.pth` "
"files being processed."
msgstr ""

#: ../../using/cmdline.rst:437
msgid "See also :envvar:`PYTHONVERBOSE`."
msgstr ""

#: ../../using/cmdline.rst:443
msgid ""
"Warning control. Python's warning machinery by default prints warning "
"messages to :data:`sys.stderr`."
msgstr ""

#: ../../using/cmdline.rst:446 ../../using/cmdline.rst:959
msgid ""
"The simplest settings apply a particular action unconditionally to all "
"warnings emitted by a process (even those that are otherwise ignored by "
"default)::"
msgstr ""

#: ../../using/cmdline.rst:450
msgid ""
"-Wdefault  # Warn once per call location\n"
"-Werror    # Convert to exceptions\n"
"-Walways   # Warn every time\n"
"-Wall      # Same as -Walways\n"
"-Wmodule   # Warn once per calling module\n"
"-Wonce     # Warn once per Python process\n"
"-Wignore   # Never warn"
msgstr ""

#: ../../using/cmdline.rst:458
msgid ""
"The action names can be abbreviated as desired and the interpreter will "
"resolve them to the appropriate action name. For example, ``-Wi`` is the "
"same as ``-Wignore``."
msgstr ""

#: ../../using/cmdline.rst:462
msgid "The full form of argument is::"
msgstr ""

#: ../../using/cmdline.rst:464
msgid "action:message:category:module:lineno"
msgstr ""

#: ../../using/cmdline.rst:466
msgid ""
"Empty fields match all values; trailing empty fields may be omitted. For "
"example ``-W ignore::DeprecationWarning`` ignores all DeprecationWarning "
"warnings."
msgstr ""

#: ../../using/cmdline.rst:470
msgid ""
"The *action* field is as explained above but only applies to warnings that "
"match the remaining fields."
msgstr ""

#: ../../using/cmdline.rst:473
msgid ""
"The *message* field must match the whole warning message; this match is case-"
"insensitive."
msgstr ""

#: ../../using/cmdline.rst:476
msgid ""
"The *category* field matches the warning category (ex: "
"``DeprecationWarning``). This must be a class name; the match test whether "
"the actual warning category of the message is a subclass of the specified "
"warning category."
msgstr ""

#: ../../using/cmdline.rst:481
msgid ""
"The *module* field matches the (fully qualified) module name; this match is "
"case-sensitive."
msgstr ""

#: ../../using/cmdline.rst:484
msgid ""
"The *lineno* field matches the line number, where zero matches all line "
"numbers and is thus equivalent to an omitted line number."
msgstr ""

#: ../../using/cmdline.rst:487
msgid ""
"Multiple :option:`-W` options can be given; when a warning matches more than "
"one option, the action for the last matching option is performed. Invalid :"
"option:`-W` options are ignored (though, a warning message is printed about "
"invalid options when the first warning is issued)."
msgstr ""

#: ../../using/cmdline.rst:492
msgid ""
"Warnings can also be controlled using the :envvar:`PYTHONWARNINGS` "
"environment variable and from within a Python program using the :mod:"
"`warnings` module. For example, the :func:`warnings.filterwarnings` function "
"can be used to use a regular expression on the warning message."
msgstr ""

#: ../../using/cmdline.rst:497 ../../using/cmdline.rst:971
msgid ""
"See :ref:`warning-filter` and :ref:`describing-warning-filters` for more "
"details."
msgstr ""

#: ../../using/cmdline.rst:503
msgid ""
"Skip the first line of the source, allowing use of non-Unix forms of ``#!"
"cmd``.  This is intended for a DOS specific hack only."
msgstr ""

#: ../../using/cmdline.rst:509
msgid ""
"Reserved for various implementation-specific options.  CPython currently "
"defines the following possible values:"
msgstr ""

#: ../../using/cmdline.rst:512
msgid ""
"``-X faulthandler`` to enable :mod:`faulthandler`. See also :envvar:"
"`PYTHONFAULTHANDLER`."
msgstr ""

#: ../../using/cmdline.rst:517
msgid ""
"``-X showrefcount`` to output the total reference count and number of used "
"memory blocks when the program finishes or after each statement in the "
"interactive interpreter. This only works on :ref:`debug builds <debug-"
"build>`."
msgstr ""

#: ../../using/cmdline.rst:524
msgid ""
"``-X tracemalloc`` to start tracing Python memory allocations using the :mod:"
"`tracemalloc` module. By default, only the most recent frame is stored in a "
"traceback of a trace. Use ``-X tracemalloc=NFRAME`` to start tracing with a "
"traceback limit of *NFRAME* frames. See :func:`tracemalloc.start` and :"
"envvar:`PYTHONTRACEMALLOC` for more information."
msgstr ""

#: ../../using/cmdline.rst:533
msgid ""
"``-X int_max_str_digits`` configures the :ref:`integer string conversion "
"length limitation <int_max_str_digits>`.  See also :envvar:"
"`PYTHONINTMAXSTRDIGITS`."
msgstr ""

#: ../../using/cmdline.rst:539
msgid ""
"``-X importtime`` to show how long each import takes. It shows module name, "
"cumulative time (including nested imports) and self time (excluding nested "
"imports).  Note that its output may be broken in multi-threaded "
"application.  Typical usage is ``python -X importtime -c 'import asyncio'``."
msgstr ""

#: ../../using/cmdline.rst:544
msgid ""
"``-X importtime=2`` enables additional output that indicates when an "
"imported module has already been loaded.  In such cases, the string "
"``cached`` will be printed in both time columns."
msgstr ""

#: ../../using/cmdline.rst:548
msgid "See also :envvar:`PYTHONPROFILEIMPORTTIME`."
msgstr ""

#: ../../using/cmdline.rst:554
msgid ""
"Added ``-X importtime=2`` to also trace imports of loaded modules, and "
"reserved values other than ``1`` and ``2`` for future use."
msgstr ""

#: ../../using/cmdline.rst:557
msgid ""
"``-X dev``: enable :ref:`Python Development Mode <devmode>`, introducing "
"additional runtime checks that are too expensive to be enabled by default.  "
"See also :envvar:`PYTHONDEVMODE`."
msgstr ""

#: ../../using/cmdline.rst:563
msgid ""
"``-X utf8`` enables the :ref:`Python UTF-8 Mode <utf8-mode>`. ``-X utf8=0`` "
"explicitly disables :ref:`Python UTF-8 Mode <utf8-mode>` (even when it would "
"otherwise activate automatically). See also :envvar:`PYTHONUTF8`."
msgstr ""

#: ../../using/cmdline.rst:570
msgid ""
"``-X pycache_prefix=PATH`` enables writing ``.pyc`` files to a parallel tree "
"rooted at the given directory instead of to the code tree. See also :envvar:"
"`PYTHONPYCACHEPREFIX`."
msgstr ""

#: ../../using/cmdline.rst:576
msgid ""
"``-X warn_default_encoding`` issues a :class:`EncodingWarning` when the "
"locale-specific default encoding is used for opening files. See also :envvar:"
"`PYTHONWARNDEFAULTENCODING`."
msgstr ""

#: ../../using/cmdline.rst:582
msgid ""
"``-X no_debug_ranges`` disables the inclusion of the tables mapping extra "
"location information (end line, start column offset and end column offset) "
"to every instruction in code objects. This is useful when smaller code "
"objects and pyc files are desired as well as suppressing the extra visual "
"location indicators when the interpreter displays tracebacks. See also :"
"envvar:`PYTHONNODEBUGRANGES`."
msgstr ""

#: ../../using/cmdline.rst:591
msgid ""
"``-X frozen_modules`` determines whether or not frozen modules are ignored "
"by the import machinery.  A value of ``on`` means they get imported and "
"``off`` means they are ignored.  The default is ``on`` if this is an "
"installed Python (the normal case).  If it's under development (running from "
"the source tree) then the default is ``off``. Note that the :mod:`!"
"importlib_bootstrap` and :mod:`!importlib_bootstrap_external` frozen modules "
"are always used, even if this flag is set to ``off``. See also :envvar:"
"`PYTHON_FROZEN_MODULES`."
msgstr ""

#: ../../using/cmdline.rst:602
msgid ""
"``-X perf`` enables support for the Linux ``perf`` profiler. When this "
"option is provided, the ``perf`` profiler will be able to report Python "
"calls. This option is only available on some platforms and will do nothing "
"if is not supported on the current system. The default value is \"off\". See "
"also :envvar:`PYTHONPERFSUPPORT` and :ref:`perf_profiling`."
msgstr ""

#: ../../using/cmdline.rst:610
msgid ""
"``-X perf_jit`` enables support for the Linux ``perf`` profiler with DWARF "
"support. When this option is provided, the ``perf`` profiler will be able to "
"report Python calls using DWARF information. This option is only available "
"on some platforms and will do nothing if is not supported on the current "
"system. The default value is \"off\". See also :envvar:"
"`PYTHON_PERF_JIT_SUPPORT` and :ref:`perf_profiling`."
msgstr ""

#: ../../using/cmdline.rst:619
msgid ""
"``-X disable_remote_debug`` disables the remote debugging support as "
"described in :pep:`768`.  This includes both the functionality to schedule "
"code for execution in another process and the functionality to receive code "
"for execution in the current process."
msgstr ""

#: ../../using/cmdline.rst:624
msgid ""
"This option is only available on some platforms and will do nothing if is "
"not supported on the current system. See also :envvar:"
"`PYTHON_DISABLE_REMOTE_DEBUG` and :pep:`768`."
msgstr ""

#: ../../using/cmdline.rst:630
msgid ""
":samp:`-X cpu_count={n}` overrides :func:`os.cpu_count`, :func:`os."
"process_cpu_count`, and :func:`multiprocessing.cpu_count`. *n* must be "
"greater than or equal to 1. This option may be useful for users who need to "
"limit CPU resources of a container system. See also :envvar:"
"`PYTHON_CPU_COUNT`. If *n* is ``default``, nothing is overridden."
msgstr ""

#: ../../using/cmdline.rst:639
msgid ""
":samp:`-X presite={package.module}` specifies a module that should be "
"imported before the :mod:`site` module is executed and before the :mod:"
"`__main__` module exists.  Therefore, the imported module isn't :mod:"
"`__main__`. This can be used to execute code early during Python "
"initialization. Python needs to be :ref:`built in debug mode <debug-build>` "
"for this option to exist.  See also :envvar:`PYTHON_PRESITE`."
msgstr ""

#: ../../using/cmdline.rst:648
msgid ""
":samp:`-X gil={0,1}` forces the GIL to be disabled or enabled, respectively. "
"Setting to ``0`` is only available in builds configured with :option:`--"
"disable-gil`. See also :envvar:`PYTHON_GIL` and :ref:`whatsnew313-free-"
"threaded-cpython`."
msgstr ""

#: ../../using/cmdline.rst:655
msgid ""
":samp:`-X thread_inherit_context={0,1}` causes :class:`~threading.Thread` "
"to, by default, use a copy of context of the caller of ``Thread.start()`` "
"when starting.  Otherwise, threads will start with an empty context.  If "
"unset, the value of this option defaults to ``1`` on free-threaded builds "
"and to ``0`` otherwise.  See also :envvar:`PYTHON_THREAD_INHERIT_CONTEXT`."
msgstr ""

#: ../../using/cmdline.rst:664
msgid ""
":samp:`-X context_aware_warnings={0,1}` causes the :class:`warnings."
"catch_warnings` context manager to use a :class:`~contextvars.ContextVar` to "
"store warnings filter state.  If unset, the value of this option defaults to "
"``1`` on free-threaded builds and to ``0`` otherwise.  See also :envvar:"
"`PYTHON_CONTEXT_AWARE_WARNINGS`."
msgstr ""

#: ../../using/cmdline.rst:672
msgid ""
":samp:`-X tlbc={0,1}` enables (1, the default) or disables (0) thread-local "
"bytecode in builds configured with :option:`--disable-gil`.  When disabled, "
"this also disables the specializing interpreter.  See also :envvar:"
"`PYTHON_TLBC`."
msgstr ""

#: ../../using/cmdline.rst:679
msgid ""
"It also allows passing arbitrary values and retrieving them through the :"
"data:`sys._xoptions` dictionary."
msgstr ""

#: ../../using/cmdline.rst:684
msgid "Removed the ``-X showalloccount`` option."
msgstr ""

#: ../../using/cmdline.rst:687
msgid "Removed the ``-X oldparser`` option."
msgstr ""

#: ../../using/cmdline.rst:692
msgid ""
":option:`!-J` is no longer reserved for use by Jython_, and now has no "
"special meaning."
msgstr ""

#: ../../using/cmdline.rst:700
msgid "Controlling color"
msgstr ""

#: ../../using/cmdline.rst:702
msgid ""
"The Python interpreter is configured by default to use colors to highlight "
"output in certain situations such as when displaying tracebacks. This "
"behavior can be controlled by setting different environment variables."
msgstr ""

#: ../../using/cmdline.rst:706
msgid ""
"Setting the environment variable ``TERM`` to ``dumb`` will disable color."
msgstr ""

#: ../../using/cmdline.rst:708
msgid ""
"If the |FORCE_COLOR|_ environment variable is set, then color will be "
"enabled regardless of the value of TERM. This is useful on CI systems which "
"aren’t terminals but can still display ANSI escape sequences."
msgstr ""

#: ../../using/cmdline.rst:712
msgid ""
"If the |NO_COLOR|_ environment variable is set, Python will disable all "
"color in the output. This takes precedence over ``FORCE_COLOR``."
msgstr ""

#: ../../using/cmdline.rst:715
msgid ""
"All these environment variables are used also by other tools to control "
"color output. To control the color output only in the Python interpreter, "
"the :envvar:`PYTHON_COLORS` environment variable can be used. This variable "
"takes precedence over ``NO_COLOR``, which in turn takes precedence over "
"``FORCE_COLOR``."
msgstr ""

#: ../../using/cmdline.rst:725
msgid "Environment variables"
msgstr ""

#: ../../using/cmdline.rst:727
msgid ""
"These environment variables influence Python's behavior, they are processed "
"before the command-line switches other than -E or -I.  It is customary that "
"command-line switches override environmental variables where there is a "
"conflict."
msgstr ""

#: ../../using/cmdline.rst:734
msgid ""
"Change the location of the standard Python libraries.  By default, the "
"libraries are searched in :file:`{prefix}/lib/python{version}` and :file:"
"`{exec_prefix}/lib/python{version}`, where :file:`{prefix}` and :file:"
"`{exec_prefix}` are installation-dependent directories, both defaulting to :"
"file:`/usr/local`."
msgstr ""

#: ../../using/cmdline.rst:740
msgid ""
"When :envvar:`PYTHONHOME` is set to a single directory, its value replaces "
"both :file:`{prefix}` and :file:`{exec_prefix}`.  To specify different "
"values for these, set :envvar:`PYTHONHOME` to :file:`{prefix}:{exec_prefix}`."
msgstr ""

#: ../../using/cmdline.rst:747
msgid ""
"Augment the default search path for module files.  The format is the same as "
"the shell's :envvar:`PATH`: one or more directory pathnames separated by :"
"data:`os.pathsep` (e.g. colons on Unix or semicolons on Windows). Non-"
"existent directories are silently ignored."
msgstr ""

#: ../../using/cmdline.rst:752
msgid ""
"In addition to normal directories, individual :envvar:`PYTHONPATH` entries "
"may refer to zipfiles containing pure Python modules (in either source or "
"compiled form). Extension modules cannot be imported from zipfiles."
msgstr ""

#: ../../using/cmdline.rst:756
msgid ""
"The default search path is installation dependent, but generally begins "
"with :file:`{prefix}/lib/python{version}` (see :envvar:`PYTHONHOME` above).  "
"It is *always* appended to :envvar:`PYTHONPATH`."
msgstr ""

#: ../../using/cmdline.rst:760
msgid ""
"An additional directory will be inserted in the search path in front of :"
"envvar:`PYTHONPATH` as described above under :ref:`using-on-interface-"
"options`. The search path can be manipulated from within a Python program as "
"the variable :data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:768
msgid ""
"If this is set to a non-empty string, don't prepend a potentially unsafe "
"path to :data:`sys.path`: see the :option:`-P` option for details."
msgstr ""

#: ../../using/cmdline.rst:776
msgid ""
"If this is set to a non-empty string, it overrides the :data:`sys."
"platlibdir` value."
msgstr ""

#: ../../using/cmdline.rst:784
msgid ""
"If this is the name of a readable file, the Python commands in that file are "
"executed before the first prompt is displayed in interactive mode.  The file "
"is executed in the same namespace where interactive commands are executed so "
"that objects defined or imported in it can be used without qualification in "
"the interactive session.  You can also change the prompts :data:`sys.ps1` "
"and :data:`sys.ps2` and the hook :data:`sys.__interactivehook__` in this "
"file."
msgstr ""

#: ../../using/cmdline.rst:791 ../../using/cmdline.rst:793
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_startup`` with the "
"filename as the argument when called on startup."
msgstr ""

#: ../../using/cmdline.rst:799
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-O` option.  If set to an integer, it is equivalent to specifying :"
"option:`-O` multiple times."
msgstr ""

#: ../../using/cmdline.rst:806
msgid ""
"If this is set, it names a callable using dotted-path notation.  The module "
"containing the callable will be imported and then the callable will be run "
"by the default implementation of :func:`sys.breakpointhook` which itself is "
"called by built-in :func:`breakpoint`.  If not set, or set to the empty "
"string, it is equivalent to the value \"pdb.set_trace\".  Setting this to "
"the string \"0\" causes the default implementation of :func:`sys."
"breakpointhook` to do nothing but return immediately."
msgstr ""

#: ../../using/cmdline.rst:818
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-d` option.  If set to an integer, it is equivalent to specifying :"
"option:`-d` multiple times."
msgstr ""

#: ../../using/cmdline.rst:822
msgid ""
"This environment variable requires a :ref:`debug build of Python <debug-"
"build>`, otherwise it's ignored."
msgstr ""

#: ../../using/cmdline.rst:828
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-i` option."
msgstr ""

#: ../../using/cmdline.rst:831
msgid ""
"This variable can also be modified by Python code using :data:`os.environ` "
"to force inspect mode on program termination."
msgstr ""

#: ../../using/cmdline.rst:836
msgid "(also 3.11.10, 3.10.15, 3.9.20, and 3.8.20) Emits audit events."
msgstr ""

#: ../../using/cmdline.rst:839
msgid ""
"Uses PyREPL if possible, in which case :envvar:`PYTHONSTARTUP` is also "
"executed. Emits audit events."
msgstr ""

#: ../../using/cmdline.rst:846
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-u` option."
msgstr ""

#: ../../using/cmdline.rst:852
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-v` option.  If set to an integer, it is equivalent to specifying :"
"option:`-v` multiple times."
msgstr ""

#: ../../using/cmdline.rst:859
msgid ""
"If this is set, Python ignores case in :keyword:`import` statements.  This "
"only works on Windows and macOS."
msgstr ""

#: ../../using/cmdline.rst:865
msgid ""
"If this is set to a non-empty string, Python won't try to write ``.pyc`` "
"files on the import of source modules.  This is equivalent to specifying "
"the :option:`-B` option."
msgstr ""

#: ../../using/cmdline.rst:872
msgid ""
"If this is set, Python will write ``.pyc`` files in a mirror directory tree "
"at this path, instead of in ``__pycache__`` directories within the source "
"tree. This is equivalent to specifying the :option:`-X` "
"``pycache_prefix=PATH`` option."
msgstr ""

#: ../../using/cmdline.rst:882
msgid ""
"If this variable is not set or set to ``random``, a random value is used to "
"seed the hashes of str and bytes objects."
msgstr ""

#: ../../using/cmdline.rst:885
msgid ""
"If :envvar:`PYTHONHASHSEED` is set to an integer value, it is used as a "
"fixed seed for generating the hash() of the types covered by the hash "
"randomization."
msgstr ""

#: ../../using/cmdline.rst:889
msgid ""
"Its purpose is to allow repeatable hashing, such as for selftests for the "
"interpreter itself, or to allow a cluster of python processes to share hash "
"values."
msgstr ""

#: ../../using/cmdline.rst:893
msgid ""
"The integer must be a decimal number in the range [0,4294967295].  "
"Specifying the value 0 will disable hash randomization."
msgstr ""

#: ../../using/cmdline.rst:900
msgid ""
"If this variable is set to an integer, it is used to configure the "
"interpreter's global :ref:`integer string conversion length limitation "
"<int_max_str_digits>`."
msgstr ""

#: ../../using/cmdline.rst:908
msgid ""
"If this is set before running the interpreter, it overrides the encoding "
"used for stdin/stdout/stderr, in the syntax ``encodingname:errorhandler``.  "
"Both the ``encodingname`` and the ``:errorhandler`` parts are optional and "
"have the same meaning as in :func:`str.encode`."
msgstr ""

#: ../../using/cmdline.rst:913
msgid ""
"For stderr, the ``:errorhandler`` part is ignored; the handler will always "
"be ``'backslashreplace'``."
msgstr ""

#: ../../using/cmdline.rst:916
msgid "The ``encodingname`` part is now optional."
msgstr ""

#: ../../using/cmdline.rst:919
msgid ""
"On Windows, the encoding specified by this variable is ignored for "
"interactive console buffers unless :envvar:`PYTHONLEGACYWINDOWSSTDIO` is "
"also specified. Files and pipes redirected through the standard streams are "
"not affected."
msgstr ""

#: ../../using/cmdline.rst:926
msgid ""
"If this is set, Python won't add the :data:`user site-packages directory "
"<site.USER_SITE>` to :data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:936
msgid ""
"Defines the :data:`user base directory <site.USER_BASE>`, which is used to "
"compute the path of the :data:`user site-packages directory <site."
"USER_SITE>` and :ref:`installation paths <sysconfig-user-scheme>` for "
"``python -m pip install --user``."
msgstr ""

#: ../../using/cmdline.rst:948
msgid ""
"If this environment variable is set, ``sys.argv[0]`` will be set to its "
"value instead of the value got through the C runtime.  Only works on macOS."
msgstr ""

#: ../../using/cmdline.rst:954
msgid ""
"This is equivalent to the :option:`-W` option. If set to a comma separated "
"string, it is equivalent to specifying :option:`-W` multiple times, with "
"filters later in the list taking precedence over those earlier in the list."
msgstr ""

#: ../../using/cmdline.rst:963
msgid ""
"PYTHONWARNINGS=default  # Warn once per call location\n"
"PYTHONWARNINGS=error    # Convert to exceptions\n"
"PYTHONWARNINGS=always   # Warn every time\n"
"PYTHONWARNINGS=all      # Same as PYTHONWARNINGS=always\n"
"PYTHONWARNINGS=module   # Warn once per calling module\n"
"PYTHONWARNINGS=once     # Warn once per Python process\n"
"PYTHONWARNINGS=ignore   # Never warn"
msgstr ""

#: ../../using/cmdline.rst:977
msgid ""
"If this environment variable is set to a non-empty string, :func:"
"`faulthandler.enable` is called at startup: install a handler for :const:"
"`~signal.SIGSEGV`, :const:`~signal.SIGFPE`, :const:`~signal.SIGABRT`, :const:"
"`~signal.SIGBUS` and :const:`~signal.SIGILL` signals to dump the Python "
"traceback. This is equivalent to :option:`-X` ``faulthandler`` option."
msgstr ""

#: ../../using/cmdline.rst:989
msgid ""
"If this environment variable is set to a non-empty string, start tracing "
"Python memory allocations using the :mod:`tracemalloc` module. The value of "
"the variable is the maximum number of frames stored in a traceback of a "
"trace. For example, ``PYTHONTRACEMALLOC=1`` stores only the most recent "
"frame. See the :func:`tracemalloc.start` function for more information. This "
"is equivalent to setting the :option:`-X` ``tracemalloc`` option."
msgstr ""

#: ../../using/cmdline.rst:1002
msgid ""
"If this environment variable is set to ``1``, Python will show how long each "
"import takes. If set to ``2``, Python will include output for imported "
"modules that have already been loaded. This is equivalent to setting the :"
"option:`-X` ``importtime`` option."
msgstr ""

#: ../../using/cmdline.rst:1011
msgid ""
"Added ``PYTHONPROFILEIMPORTTIME=2`` to also trace imports of loaded modules."
msgstr ""

#: ../../using/cmdline.rst:1016
msgid ""
"If this environment variable is set to a non-empty string, enable the :ref:"
"`debug mode <asyncio-debug-mode>` of the :mod:`asyncio` module."
msgstr ""

#: ../../using/cmdline.rst:1024
msgid "Set the Python memory allocators and/or install debug hooks."
msgstr ""

#: ../../using/cmdline.rst:1026
msgid "Set the family of memory allocators used by Python:"
msgstr ""

#: ../../using/cmdline.rst:1028
msgid ""
"``default``: use the :ref:`default memory allocators <default-memory-"
"allocators>`."
msgstr ""

#: ../../using/cmdline.rst:1030
msgid ""
"``malloc``: use the :c:func:`malloc` function of the C library for all "
"domains (:c:macro:`PYMEM_DOMAIN_RAW`, :c:macro:`PYMEM_DOMAIN_MEM`, :c:macro:"
"`PYMEM_DOMAIN_OBJ`)."
msgstr ""

#: ../../using/cmdline.rst:1033
msgid ""
"``pymalloc``: use the :ref:`pymalloc allocator <pymalloc>` for :c:macro:"
"`PYMEM_DOMAIN_MEM` and :c:macro:`PYMEM_DOMAIN_OBJ` domains and use the :c:"
"func:`malloc` function for the :c:macro:`PYMEM_DOMAIN_RAW` domain."
msgstr ""

#: ../../using/cmdline.rst:1036
msgid ""
"``mimalloc``: use the :ref:`mimalloc allocator <mimalloc>` for :c:macro:"
"`PYMEM_DOMAIN_MEM` and :c:macro:`PYMEM_DOMAIN_OBJ` domains and use the :c:"
"func:`malloc` function for the :c:macro:`PYMEM_DOMAIN_RAW` domain."
msgstr ""

#: ../../using/cmdline.rst:1040
msgid "Install :ref:`debug hooks <pymem-debug-hooks>`:"
msgstr ""

#: ../../using/cmdline.rst:1042
msgid ""
"``debug``: install debug hooks on top of the :ref:`default memory allocators "
"<default-memory-allocators>`."
msgstr ""

#: ../../using/cmdline.rst:1044
msgid "``malloc_debug``: same as ``malloc`` but also install debug hooks."
msgstr ""

#: ../../using/cmdline.rst:1045
msgid "``pymalloc_debug``: same as ``pymalloc`` but also install debug hooks."
msgstr ""

#: ../../using/cmdline.rst:1046
msgid "``mimalloc_debug``: same as ``mimalloc`` but also install debug hooks."
msgstr ""

#: ../../using/cmdline.rst:1050
msgid "Added the ``\"default\"`` allocator."
msgstr ""

#: ../../using/cmdline.rst:1056
msgid ""
"If set to a non-empty string, Python will print statistics of the :ref:"
"`pymalloc memory allocator <pymalloc>` every time a new pymalloc object "
"arena is created, and on shutdown."
msgstr ""

#: ../../using/cmdline.rst:1060
msgid ""
"This variable is ignored if the :envvar:`PYTHONMALLOC` environment variable "
"is used to force the :c:func:`malloc` allocator of the C library, or if "
"Python is configured without ``pymalloc`` support."
msgstr ""

#: ../../using/cmdline.rst:1064
msgid ""
"This variable can now also be used on Python compiled in release mode. It "
"now has no effect if set to an empty string."
msgstr ""

#: ../../using/cmdline.rst:1071
msgid ""
"If set to a non-empty string, the default :term:`filesystem encoding and "
"error handler` mode will revert to their pre-3.6 values of 'mbcs' and "
"'replace', respectively.  Otherwise, the new defaults 'utf-8' and "
"'surrogatepass' are used."
msgstr ""

#: ../../using/cmdline.rst:1076
msgid ""
"This may also be enabled at runtime with :func:`sys."
"_enablelegacywindowsfsencoding`."
msgstr ""

#: ../../using/cmdline.rst:1079 ../../using/cmdline.rst:1093
#: ../../using/cmdline.rst:1144
msgid "Availability"
msgstr "Disponibilidade"

#: ../../using/cmdline.rst:1081
msgid "See :pep:`529` for more details."
msgstr "Veja :pep:`529` para mais detalhes."

#: ../../using/cmdline.rst:1086
msgid ""
"If set to a non-empty string, does not use the new console reader and "
"writer. This means that Unicode characters will be encoded according to the "
"active console code page, rather than using utf-8."
msgstr ""

#: ../../using/cmdline.rst:1090
msgid ""
"This variable is ignored if the standard streams are redirected (to files or "
"pipes) rather than referring to console buffers."
msgstr ""

#: ../../using/cmdline.rst:1100
msgid ""
"If set to the value ``0``, causes the main Python command line application "
"to skip coercing the legacy ASCII-based C and POSIX locales to a more "
"capable UTF-8 based alternative."
msgstr ""

#: ../../using/cmdline.rst:1104
msgid ""
"If this variable is *not* set (or is set to a value other than ``0``), the "
"``LC_ALL`` locale override environment variable is also not set, and the "
"current locale reported for the ``LC_CTYPE`` category is either the default "
"``C`` locale, or else the explicitly ASCII-based ``POSIX`` locale, then the "
"Python CLI will attempt to configure the following locales for the "
"``LC_CTYPE`` category in the order listed before loading the interpreter "
"runtime:"
msgstr ""

#: ../../using/cmdline.rst:1112
msgid "``C.UTF-8``"
msgstr ""

#: ../../using/cmdline.rst:1113
msgid "``C.utf8``"
msgstr ""

#: ../../using/cmdline.rst:1114
msgid "``UTF-8``"
msgstr ""

#: ../../using/cmdline.rst:1116
msgid ""
"If setting one of these locale categories succeeds, then the ``LC_CTYPE`` "
"environment variable will also be set accordingly in the current process "
"environment before the Python runtime is initialized. This ensures that in "
"addition to being seen by both the interpreter itself and other locale-aware "
"components running in the same process (such as the GNU ``readline`` "
"library), the updated setting is also seen in subprocesses (regardless of "
"whether or not those processes are running a Python interpreter), as well as "
"in operations that query the environment rather than the current C locale "
"(such as Python's own :func:`locale.getdefaultlocale`)."
msgstr ""

#: ../../using/cmdline.rst:1126
msgid ""
"Configuring one of these locales (either explicitly or via the above "
"implicit locale coercion) automatically enables the ``surrogateescape`` :ref:"
"`error handler <error-handlers>` for :data:`sys.stdin` and :data:`sys."
"stdout` (:data:`sys.stderr` continues to use ``backslashreplace`` as it does "
"in any other locale). This stream handling behavior can be overridden using :"
"envvar:`PYTHONIOENCODING` as usual."
msgstr ""

#: ../../using/cmdline.rst:1133
msgid ""
"For debugging purposes, setting ``PYTHONCOERCECLOCALE=warn`` will cause "
"Python to emit warning messages on ``stderr`` if either the locale coercion "
"activates, or else if a locale that *would* have triggered coercion is still "
"active when the Python runtime is initialized."
msgstr ""

#: ../../using/cmdline.rst:1138
msgid ""
"Also note that even when locale coercion is disabled, or when it fails to "
"find a suitable target locale, :envvar:`PYTHONUTF8` will still activate by "
"default in legacy ASCII-based locales. Both features must be disabled in "
"order to force the interpreter to use ``ASCII`` instead of ``UTF-8`` for "
"system interfaces."
msgstr ""

#: ../../using/cmdline.rst:1146
msgid "See :pep:`538` for more details."
msgstr ""

#: ../../using/cmdline.rst:1152
msgid ""
"If this environment variable is set to a non-empty string, enable :ref:"
"`Python Development Mode <devmode>`, introducing additional runtime checks "
"that are too expensive to be enabled by default. This is equivalent to "
"setting the :option:`-X` ``dev`` option."
msgstr ""

#: ../../using/cmdline.rst:1161
msgid "If set to ``1``, enable the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr ""

#: ../../using/cmdline.rst:1163
msgid "If set to ``0``, disable the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr ""

#: ../../using/cmdline.rst:1165
msgid ""
"Setting any other non-empty string causes an error during interpreter "
"initialisation."
msgstr ""

#: ../../using/cmdline.rst:1172
msgid ""
"If this environment variable is set to a non-empty string, issue a :class:"
"`EncodingWarning` when the locale-specific default encoding is used."
msgstr ""

#: ../../using/cmdline.rst:1175
msgid "See :ref:`io-encoding-warning` for details."
msgstr ""

#: ../../using/cmdline.rst:1181
msgid ""
"If this variable is set, it disables the inclusion of the tables mapping "
"extra location information (end line, start column offset and end column "
"offset) to every instruction in code objects. This is useful when smaller "
"code objects and pyc files are desired as well as suppressing the extra "
"visual location indicators when the interpreter displays tracebacks."
msgstr ""

#: ../../using/cmdline.rst:1191
msgid ""
"If this variable is set to a nonzero value, it enables support for the Linux "
"``perf`` profiler so Python calls can be detected by it."
msgstr ""

#: ../../using/cmdline.rst:1194 ../../using/cmdline.rst:1207
msgid "If set to ``0``, disable Linux ``perf`` profiler support."
msgstr ""

#: ../../using/cmdline.rst:1196
msgid ""
"See also the :option:`-X perf <-X>` command-line option and :ref:"
"`perf_profiling`."
msgstr ""

#: ../../using/cmdline.rst:1203
msgid ""
"If this variable is set to a nonzero value, it enables support for the Linux "
"``perf`` profiler so Python calls can be detected by it using DWARF "
"information."
msgstr ""

#: ../../using/cmdline.rst:1209
msgid ""
"See also the :option:`-X perf_jit <-X>` command-line option and :ref:"
"`perf_profiling`."
msgstr ""

#: ../../using/cmdline.rst:1216
msgid ""
"If this variable is set to a non-empty string, it disables the remote "
"debugging feature described in :pep:`768`. This includes both the "
"functionality to schedule code for execution in another process and the "
"functionality to receive code for execution in the current process."
msgstr ""

#: ../../using/cmdline.rst:1221
msgid "See also the :option:`-X disable_remote_debug` command-line option."
msgstr ""

#: ../../using/cmdline.rst:1227
msgid ""
"If this variable is set to a positive integer, it overrides the return "
"values of :func:`os.cpu_count` and :func:`os.process_cpu_count`."
msgstr ""

#: ../../using/cmdline.rst:1230
msgid "See also the :option:`-X cpu_count <-X>` command-line option."
msgstr ""

#: ../../using/cmdline.rst:1236
msgid ""
"If this variable is set to ``on`` or ``off``, it determines whether or not "
"frozen modules are ignored by the import machinery.  A value of ``on`` means "
"they get imported and ``off`` means they are ignored.  The default is ``on`` "
"for non-debug builds (the normal case) and ``off`` for debug builds. Note "
"that the :mod:`!importlib_bootstrap` and :mod:`!"
"importlib_bootstrap_external` frozen modules are always used, even if this "
"flag is set to ``off``."
msgstr ""

#: ../../using/cmdline.rst:1244
msgid "See also the :option:`-X frozen_modules <-X>` command-line option."
msgstr ""

#: ../../using/cmdline.rst:1250
msgid ""
"If this variable is set to ``1``, the interpreter will colorize various "
"kinds of output. Setting it to ``0`` deactivates this behavior. See also :"
"ref:`using-on-controlling-color`."
msgstr ""

#: ../../using/cmdline.rst:1258
msgid ""
"If this variable is set to any value, the interpreter will not attempt to "
"load the Python-based :term:`REPL` that requires :mod:`curses` and :mod:"
"`readline`, and will instead use the traditional parser-based :term:`REPL`."
msgstr ""

#: ../../using/cmdline.rst:1267
msgid ""
"This environment variable can be used to set the location of a ``."
"python_history`` file (by default, it is ``.python_history`` in the user's "
"home directory)."
msgstr ""

#: ../../using/cmdline.rst:1275
msgid ""
"If this variable is set to ``1``, the global interpreter lock (GIL) will be "
"forced on. Setting it to ``0`` forces the GIL off (needs Python configured "
"with the :option:`--disable-gil` build option)."
msgstr ""

#: ../../using/cmdline.rst:1279
msgid ""
"See also the :option:`-X gil <-X>` command-line option, which takes "
"precedence over this variable, and :ref:`whatsnew313-free-threaded-cpython`."
msgstr ""

#: ../../using/cmdline.rst:1286
msgid ""
"If this variable is set to ``1`` then :class:`~threading.Thread` will, by "
"default, use a copy of context of the caller of ``Thread.start()`` when "
"starting.  Otherwise, new threads will start with an empty context. If "
"unset, this variable defaults to ``1`` on free-threaded builds and to ``0`` "
"otherwise.  See also :option:`-X thread_inherit_context<-X>`."
msgstr ""

#: ../../using/cmdline.rst:1296
msgid ""
"If set to ``1`` then the :class:`warnings.catch_warnings` context manager "
"will use a :class:`~contextvars.ContextVar` to store warnings filter state.  "
"If unset, this variable defaults to ``1`` on free-threaded builds and to "
"``0`` otherwise.  See :option:`-X context_aware_warnings<-X>`."
msgstr ""

#: ../../using/cmdline.rst:1306
msgid ""
"On builds where experimental just-in-time compilation is available, this "
"variable can force the JIT to be disabled (``0``) or enabled (``1``) at "
"interpreter startup."
msgstr ""

#: ../../using/cmdline.rst:1314
msgid ""
"If set to ``1`` enables thread-local bytecode. If set to ``0`` thread-local "
"bytecode and the specializing interpreter are disabled.  Only applies to "
"builds configured with :option:`--disable-gil`."
msgstr ""

#: ../../using/cmdline.rst:1318
msgid "See also the :option:`-X tlbc <-X>` command-line option."
msgstr ""

#: ../../using/cmdline.rst:1323
msgid "Debug-mode variables"
msgstr ""

#: ../../using/cmdline.rst:1327
msgid ""
"If set, Python will dump objects and reference counts still alive after "
"shutting down the interpreter."
msgstr ""

#: ../../using/cmdline.rst:1330 ../../using/cmdline.rst:1338
msgid ""
"Needs Python configured with the :option:`--with-trace-refs` build option."
msgstr ""

#: ../../using/cmdline.rst:1334
msgid ""
"If set, Python will dump objects and reference counts still alive after "
"shutting down the interpreter into a file under the path given as the value "
"to this environment variable."
msgstr ""

#: ../../using/cmdline.rst:1344
msgid ""
"If this variable is set to a module, that module will be imported early in "
"the interpreter lifecycle, before the :mod:`site` module is executed, and "
"before the :mod:`__main__` module is created. Therefore, the imported module "
"is not treated as :mod:`__main__`."
msgstr ""

#: ../../using/cmdline.rst:1349
msgid "This can be used to execute code early during Python initialization."
msgstr ""

#: ../../using/cmdline.rst:1351
msgid ""
"To import a submodule, use ``package.module`` as the value, like in an "
"import statement."
msgstr ""

#: ../../using/cmdline.rst:1354
msgid ""
"See also the :option:`-X presite <-X>` command-line option, which takes "
"precedence over this variable."
msgstr ""

#: ../../using/cmdline.rst:1357
msgid "Needs Python configured with the :option:`--with-pydebug` build option."
msgstr ""
