# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# i17obot <i17obot@rougeth.com>, 2021
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-08 02:53-0300\n"
"PO-Revision-Date: 2021-06-28 01:06+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/getopt.rst:2
msgid ":mod:`!getopt` --- C-style parser for command line options"
msgstr ""
":mod:`!getopt` --- Analisador sintático no estilo C para opções de linha de "
"comando"

#: ../../library/getopt.rst:8
msgid "**Source code:** :source:`Lib/getopt.py`"
msgstr "**Código-fonte:** :source:`Lib/getopt.py`"

#: ../../library/getopt.rst:12
msgid ""
"This module is considered feature complete. A more declarative and "
"extensible alternative to this API is provided in the :mod:`optparse` "
"module. Further functional enhancements for command line parameter "
"processing are provided either as third party modules on PyPI, or else as "
"features in the :mod:`argparse` module."
msgstr ""
"Este módulo é considerado completo em recursos. Uma alternativa mais "
"declarativa e extensível para esta API é fornecida no módulo :mod:"
"`optparse`. Outros aprimoramentos funcionais para processamento de "
"parâmetros de linha de comando são fornecidos como módulos de terceiros no "
"PyPI ou como recursos no módulo :mod:`argparse`."

#: ../../library/getopt.rst:20
msgid ""
"This module helps scripts to parse the command line arguments in ``sys."
"argv``. It supports the same conventions as the Unix :c:func:`!getopt` "
"function (including the special meanings of arguments of the form '``-``' "
"and '``--``').  Long options similar to those supported by GNU software may "
"be used as well via an optional third argument."
msgstr ""
"Este módulo ajuda os scripts a analisar os argumentos da linha de comando em "
"``sys.argv``. Ele suporta as mesmas convenções da função Unix :c:func:`!"
"getopt` (incluindo os significados especiais de argumentos da forma '``-``' "
"e '``--``'). Longas opções semelhantes às suportadas pelo software GNU "
"também podem ser usadas por meio de um terceiro argumento opcional."

#: ../../library/getopt.rst:26
msgid ""
"Users who are unfamiliar with the Unix :c:func:`!getopt` function should "
"consider using the :mod:`argparse` module instead. Users who are familiar "
"with the Unix :c:func:`!getopt` function, but would like to get equivalent "
"behavior while writing less code and getting better help and error messages "
"should consider using the :mod:`optparse` module. See :ref:`choosing-an-"
"argument-parser` for additional details."
msgstr ""
"Usuários que não estão familiarizados com a função Unix :c:func:`!getopt` "
"devem considerar usar o módulo :mod:`argparse` em vez disso. Usuários que "
"estão familiarizados com a função Unix :c:func:`!getopt`, mas gostariam de "
"obter um comportamento equivalente enquanto escrevem menos código e obtêm "
"melhor ajuda e mensagens de erro devem considerar usar o módulo :mod:"
"`optparse`. Veja :ref:`choosing-an-argument-parser` para detalhes adicionais."

#: ../../library/getopt.rst:33
msgid "This module provides two functions and an exception:"
msgstr "Este módulo fornece duas funções e uma exceção:"

#: ../../library/getopt.rst:39
msgid ""
"Parses command line options and parameter list.  *args* is the argument list "
"to be parsed, without the leading reference to the running program. "
"Typically, this means ``sys.argv[1:]``. *shortopts* is the string of option "
"letters that the script wants to recognize, with options that require an "
"argument followed by a colon (``':'``) and options that accept an optional "
"argument followed by two colons (``'::'``); i.e., the same format that Unix :"
"c:func:`!getopt` uses."
msgstr ""

#: ../../library/getopt.rst:48
msgid ""
"Unlike GNU :c:func:`!getopt`, after a non-option argument, all further "
"arguments are considered also non-options. This is similar to the way non-"
"GNU Unix systems work."
msgstr ""
"Ao contrário do GNU :c:func:`!getopt`, após um argumento sem opção, todos os "
"argumentos adicionais são considerados também sem opção. Isso é semelhante à "
"maneira como os sistemas Unix não GNU funcionam."

#: ../../library/getopt.rst:52
msgid ""
"*longopts*, if specified, must be a list of strings with the names of the "
"long options which should be supported.  The leading ``'--'`` characters "
"should not be included in the option name.  Long options which require an "
"argument should be followed by an equal sign (``'='``). Long options which "
"accept an optional argument should be followed by an equal sign and question "
"mark (``'=?'``). To accept only long options, *shortopts* should be an empty "
"string.  Long options on the command line can be recognized so long as they "
"provide a prefix of the option name that matches exactly one of the accepted "
"options.  For example, if *longopts* is ``['foo', 'frob']``, the option ``--"
"fo`` will match as ``--foo``, but ``--f`` will not match uniquely, so :exc:"
"`GetoptError` will be raised."
msgstr ""

#: ../../library/getopt.rst:65
msgid ""
"The return value consists of two elements: the first is a list of ``(option, "
"value)`` pairs; the second is the list of program arguments left after the "
"option list was stripped (this is a trailing slice of *args*).  Each option-"
"and-value pair returned has the option as its first element, prefixed with a "
"hyphen for short options (e.g., ``'-x'``) or two hyphens for long options (e."
"g., ``'--long-option'``), and the option argument as its second element, or "
"an empty string if the option has no argument.  The options occur in the "
"list in the same order in which they were found, thus allowing multiple "
"occurrences.  Long and short options may be mixed."
msgstr ""
"O valor de retorno consiste em dois elementos: o primeiro é uma lista de "
"pares ``(option, value)``; a segunda é a lista de argumentos de programa "
"restantes depois que a lista de opções foi removida (esta é uma fatia ao "
"final de *args*). Cada par de opção e valor retornado tem a opção como seu "
"primeiro elemento, prefixado com um hífen para opções curtas (por exemplo, "
"``'-x'``) ou dois hifenes para opções longas (por exemplo, ``'--long-"
"option'``), e o argumento da opção como seu segundo elemento, ou uma string "
"vazia se a opção não tiver argumento. As opções ocorrem na lista na mesma "
"ordem em que foram encontradas, permitindo assim múltiplas ocorrências. "
"Opções longas e curtas podem ser misturadas."

#: ../../library/getopt.rst:75
msgid "Optional arguments are supported."
msgstr ""

#: ../../library/getopt.rst:81
msgid ""
"This function works like :func:`getopt`, except that GNU style scanning mode "
"is used by default. This means that option and non-option arguments may be "
"intermixed. The :func:`getopt` function stops processing options as soon as "
"a non-option argument is encountered."
msgstr ""
"Esta função funciona como :func:`getopt`, exceto que o modo de digitalização "
"do estilo GNU é usado por padrão. Isso significa que os argumentos de opção "
"e não opção podem ser misturados. A função :func:`getopt` interrompe o "
"processamento das opções assim que um argumento não opcional é encontrado."

#: ../../library/getopt.rst:86
msgid ""
"If the first character of the option string is ``'+'``, or if the "
"environment variable :envvar:`!POSIXLY_CORRECT` is set, then option "
"processing stops as soon as a non-option argument is encountered."
msgstr ""
"Se o primeiro caractere da string de opção for ``'+'``, ou se a variável de "
"ambiente :envvar:`!POSIXLY_CORRECT` estiver definida, então o processamento "
"da opção para assim que um argumento não opcional for encontrado."

#: ../../library/getopt.rst:90
msgid ""
"If the first character of the option string is ``'-'``, non-option arguments "
"that are followed by options are added to the list of option-and-value pairs "
"as a pair that has ``None`` as its first element and the list of non-option "
"arguments as its second element. The second element of the :func:`!"
"gnu_getopt` result is a list of program arguments after the last option."
msgstr ""

#: ../../library/getopt.rst:97
msgid ""
"Support for returning intermixed options and non-option arguments in order."
msgstr ""

#: ../../library/getopt.rst:103
msgid ""
"This is raised when an unrecognized option is found in the argument list or "
"when an option requiring an argument is given none. The argument to the "
"exception is a string indicating the cause of the error.  For long options, "
"an argument given to an option which does not require one will also cause "
"this exception to be raised.  The attributes :attr:`!msg` and :attr:`!opt` "
"give the error message and related option; if there is no specific option to "
"which the exception relates, :attr:`!opt` is an empty string."
msgstr ""
"Isso é levantado quando uma opção não reconhecida é encontrada na lista de "
"argumentos ou quando uma opção que requer um argumento não é fornecida. O "
"argumento para a exceção é uma string que indica a causa do erro. Para "
"opções longas, um argumento dado a uma opção que não requer uma também fará "
"com que essa exceção seja levantada. Os atributos :attr:`!msg` e :attr:`!"
"opt` fornecem a mensagem de erro e a opção relacionada; se não houver uma "
"opção específica à qual a exceção se relaciona, :attr:`!opt` é uma string "
"vazia."

#: ../../library/getopt.rst:114
msgid "Alias for :exc:`GetoptError`; for backward compatibility."
msgstr "Apelido para :exc:`GetoptError`; para compatibilidade reversa."

#: ../../library/getopt.rst:116
msgid "An example using only Unix style options:"
msgstr "Um exemplo usando apenas opções de estilo Unix:"

#: ../../library/getopt.rst:118
msgid ""
">>> import getopt\n"
">>> args = '-a -b -cfoo -d bar a1 a2'.split()\n"
">>> args\n"
"['-a', '-b', '-cfoo', '-d', 'bar', 'a1', 'a2']\n"
">>> optlist, args = getopt.getopt(args, 'abc:d:')\n"
">>> optlist\n"
"[('-a', ''), ('-b', ''), ('-c', 'foo'), ('-d', 'bar')]\n"
">>> args\n"
"['a1', 'a2']"
msgstr ""
">>> import getopt\n"
">>> args = '-a -b -cfoo -d bar a1 a2'.split()\n"
">>> args\n"
"['-a', '-b', '-cfoo', '-d', 'bar', 'a1', 'a2']\n"
">>> optlist, args = getopt.getopt(args, 'abc:d:')\n"
">>> optlist\n"
"[('-a', ''), ('-b', ''), ('-c', 'foo'), ('-d', 'bar')]\n"
">>> args\n"
"['a1', 'a2']"

#: ../../library/getopt.rst:130
msgid "Using long option names is equally easy:"
msgstr "Usar nomes de opções longos é igualmente fácil:"

#: ../../library/getopt.rst:132
msgid ""
">>> s = '--condition=foo --testing --output-file abc.def -x a1 a2'\n"
">>> args = s.split()\n"
">>> args\n"
"['--condition=foo', '--testing', '--output-file', 'abc.def', '-x', 'a1', "
"'a2']\n"
">>> optlist, args = getopt.getopt(args, 'x', [\n"
"...     'condition=', 'output-file=', 'testing'])\n"
">>> optlist\n"
"[('--condition', 'foo'), ('--testing', ''), ('--output-file', 'abc.def'), ('-"
"x', '')]\n"
">>> args\n"
"['a1', 'a2']"
msgstr ""
">>> s = '--condition=foo --testing --output-file abc.def -x a1 a2'\n"
">>> args = s.split()\n"
">>> args\n"
"['--condition=foo', '--testing', '--output-file', 'abc.def', '-x', 'a1', "
"'a2']\n"
">>> optlist, args = getopt.getopt(args, 'x', [\n"
"...     'condition=', 'output-file=', 'testing'])\n"
">>> optlist\n"
"[('--condition', 'foo'), ('--testing', ''), ('--output-file', 'abc.def'), ('-"
"x', '')]\n"
">>> args\n"
"['a1', 'a2']"

#: ../../library/getopt.rst:145
msgid "Optional arguments should be specified explicitly:"
msgstr ""

#: ../../library/getopt.rst:147
msgid ""
">>> s = '-Con -C --color=off --color a1 a2'\n"
">>> args = s.split()\n"
">>> args\n"
"['-Con', '-C', '--color=off', '--color', 'a1', 'a2']\n"
">>> optlist, args = getopt.getopt(args, 'C::', ['color=?'])\n"
">>> optlist\n"
"[('-C', 'on'), ('-C', ''), ('--color', 'off'), ('--color', '')]\n"
">>> args\n"
"['a1', 'a2']"
msgstr ""

#: ../../library/getopt.rst:159
msgid "The order of options and non-option arguments can be preserved:"
msgstr ""

#: ../../library/getopt.rst:161
msgid ""
">>> s = 'a1 -x a2 a3 a4 --long a5 a6'\n"
">>> args = s.split()\n"
">>> args\n"
"['a1', '-x', 'a2', 'a3', 'a4', '--long', 'a5', 'a6']\n"
">>> optlist, args = getopt.gnu_getopt(args, '-x:', ['long='])\n"
">>> optlist\n"
"[(None, ['a1']), ('-x', 'a2'), (None, ['a3', 'a4']), ('--long', 'a5')]\n"
">>> args\n"
"['a6']"
msgstr ""

#: ../../library/getopt.rst:173
msgid "In a script, typical usage is something like this:"
msgstr "Em um script, o uso típico é algo assim:"

#: ../../library/getopt.rst:175
msgid ""
"import getopt, sys\n"
"\n"
"def main():\n"
"    try:\n"
"        opts, args = getopt.getopt(sys.argv[1:], \"ho:v\", [\"help\", "
"\"output=\"])\n"
"    except getopt.GetoptError as err:\n"
"        # print help information and exit:\n"
"        print(err)  # will print something like \"option -a not "
"recognized\"\n"
"        usage()\n"
"        sys.exit(2)\n"
"    output = None\n"
"    verbose = False\n"
"    for o, a in opts:\n"
"        if o == \"-v\":\n"
"            verbose = True\n"
"        elif o in (\"-h\", \"--help\"):\n"
"            usage()\n"
"            sys.exit()\n"
"        elif o in (\"-o\", \"--output\"):\n"
"            output = a\n"
"        else:\n"
"            assert False, \"unhandled option\"\n"
"    process(args, output=output, verbose=verbose)\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()"
msgstr ""
"import getopt, sys\n"
"\n"
"def main():\n"
"    try:\n"
"        opts, args = getopt.getopt(sys.argv[1:], \"ho:v\", [\"help\", "
"\"output=\"])\n"
"    except getopt.GetoptError as err:\n"
"        # print help information and exit:\n"
"        print(err)  # will print something like \"option -a not "
"recognized\"\n"
"        usage()\n"
"        sys.exit(2)\n"
"    output = None\n"
"    verbose = False\n"
"    for o, a in opts:\n"
"        if o == \"-v\":\n"
"            verbose = True\n"
"        elif o in (\"-h\", \"--help\"):\n"
"            usage()\n"
"            sys.exit()\n"
"        elif o in (\"-o\", \"--output\"):\n"
"            output = a\n"
"        else:\n"
"            assert False, \"unhandled option\"\n"
"    process(args, output=output, verbose=verbose)\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()"

#: ../../library/getopt.rst:204
msgid ""
"Note that an equivalent command line interface could be produced with less "
"code and more informative help and error messages by using the :mod:"
"`optparse` module:"
msgstr ""
"Observe que uma interface de linha de comando equivalente pode ser produzida "
"com menos código e mais mensagens de erro de ajuda e erro informativas "
"usando o módulo :mod:`optparse`:"

#: ../../library/getopt.rst:207
msgid ""
"import optparse\n"
"\n"
"if __name__ == '__main__':\n"
"    parser = optparse.OptionParser()\n"
"    parser.add_option('-o', '--output')\n"
"    parser.add_option('-v', dest='verbose', action='store_true')\n"
"    opts, args = parser.parse_args()\n"
"    process(args, output=opts.output, verbose=opts.verbose)"
msgstr ""
"import optparse\n"
"\n"
"if __name__ == '__main__':\n"
"    parser = optparse.OptionParser()\n"
"    parser.add_option('-o', '--output')\n"
"    parser.add_option('-v', dest='verbose', action='store_true')\n"
"    opts, args = parser.parse_args()\n"
"    process(args, output=opts.output, verbose=opts.verbose)"

#: ../../library/getopt.rst:218
msgid ""
"A roughly equivalent command line interface for this case can also be "
"produced by using the :mod:`argparse` module:"
msgstr ""
"Uma interface de linha de comando aproximadamente equivalente para este caso "
"também pode ser produzida usando o módulo :mod:`argparse`:"

#: ../../library/getopt.rst:221
msgid ""
"import argparse\n"
"\n"
"if __name__ == '__main__':\n"
"    parser = argparse.ArgumentParser()\n"
"    parser.add_argument('-o', '--output')\n"
"    parser.add_argument('-v', dest='verbose', action='store_true')\n"
"    parser.add_argument('rest', nargs='*')\n"
"    args = parser.parse_args()\n"
"    process(args.rest, output=args.output, verbose=args.verbose)"
msgstr ""
"import argparse\n"
"\n"
"if __name__ == '__main__':\n"
"    parser = argparse.ArgumentParser()\n"
"    parser.add_argument('-o', '--output')\n"
"    parser.add_argument('-v', dest='verbose', action='store_true')\n"
"    parser.add_argument('rest', nargs='*')\n"
"    args = parser.parse_args()\n"
"    process(args.rest, output=args.output, verbose=args.verbose)"

#: ../../library/getopt.rst:233
msgid ""
"See :ref:`choosing-an-argument-parser` for details on how the ``argparse`` "
"version of this code differs in behaviour from the ``optparse`` (and "
"``getopt``) version."
msgstr ""
"Veja :ref:`choosing-an-argument-parser` para detalhes sobre como a versão "
"``argparse`` deste código difere em comportamento da versão ``optparse`` (e "
"``getopt``)."

#: ../../library/getopt.rst:239
msgid "Module :mod:`optparse`"
msgstr "Módulo :mod:`optparse`"

#: ../../library/getopt.rst:240
msgid "Declarative command line option parsing."
msgstr "Análise de opções de linha de comando declarativa."

#: ../../library/getopt.rst:242
msgid "Module :mod:`argparse`"
msgstr "Módulo :mod:`argparse`"

#: ../../library/getopt.rst:243
msgid "More opinionated command line option and argument parsing library."
msgstr ""
"Opção de linha de comando e biblioteca de análise de argumentos mais "
"opinativa."
