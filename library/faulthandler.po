# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-11 15:45+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/faulthandler.rst:2
msgid ":mod:`!faulthandler` --- Dump the Python traceback"
msgstr ":mod:`!faulthandler` --- Дамп обратной трассировки Python"

#: ../../library/faulthandler.rst:11
msgid ""
"This module contains functions to dump Python tracebacks explicitly, on a "
"fault, after a timeout, or on a user signal. Call :func:`faulthandler."
"enable` to install fault handlers for the :const:`~signal.SIGSEGV`, :const:"
"`~signal.SIGFPE`, :const:`~signal.SIGABRT`, :const:`~signal.SIGBUS`, and :"
"const:`~signal.SIGILL` signals. You can also enable them at startup by "
"setting the :envvar:`PYTHONFAULTHANDLER` environment variable or by using "
"the :option:`-X` ``faulthandler`` command line option."
msgstr ""
"Этот модуль содержит функции для явного сброса обратных трассировок Python, "
"при ошибке, после тайм-аута или по сигналу пользователя. Вызовите :func:"
"`faulthandler.enable`, чтобы установить обработчики ошибок для :const:"
"`~signal.SIGSEGV`, :const:`~signal.SIGFPE`, :const:`~signal.SIGABRT`, :const:"
"`~ signal.SIGBUS` и сигналы :const:`~signal.SIGILL`. Вы также можете "
"включить их при запуске, установив переменную среды :envvar:"
"`PYTHONFAULTHANDLER` или используя параметр командной строки :option:`-X` "
"``faulthandler``."

#: ../../library/faulthandler.rst:19
msgid ""
"The fault handler is compatible with system fault handlers like Apport or "
"the Windows fault handler. The module uses an alternative stack for signal "
"handlers if the :c:func:`!sigaltstack` function is available. This allows it "
"to dump the traceback even on a stack overflow."
msgstr ""
"Обработчик ошибок совместим с обработчиками системных ошибок, такими как "
"Apport или обработчик ошибок Windows. Модуль использует альтернативный стек "
"для обработчиков сигналов, если доступна функция :c:func:`!sigaltstack`. Это "
"позволяет ему сбрасывать обратную трассировку даже при переполнении стека."

#: ../../library/faulthandler.rst:24
msgid ""
"The fault handler is called on catastrophic cases and therefore can only use "
"signal-safe functions (e.g. it cannot allocate memory on the heap). Because "
"of this limitation traceback dumping is minimal compared to normal Python "
"tracebacks:"
msgstr ""
"Обробник помилок викликається в катастрофічних випадках і тому може "
"використовувати лише безпечні для сигналу функції (наприклад, він не може "
"виділяти пам’ять у купі). Через це обмеження дамп зворотного відстеження "
"мінімальний порівняно зі звичайним відстеженням Python:"

#: ../../library/faulthandler.rst:29
msgid ""
"Only ASCII is supported. The ``backslashreplace`` error handler is used on "
"encoding."
msgstr ""
"Підтримується лише ASCII. Під час кодування використовується обробник "
"помилок ``backslashreplace``."

#: ../../library/faulthandler.rst:31
msgid "Each string is limited to 500 characters."
msgstr "Довжина кожного рядка обмежена 500 символами."

#: ../../library/faulthandler.rst:32
msgid ""
"Only the filename, the function name and the line number are displayed. (no "
"source code)"
msgstr ""
"Відображаються лише назва файлу, назва функції та номер рядка. (без "
"вихідного коду)"

#: ../../library/faulthandler.rst:34
msgid "It is limited to 100 frames and 100 threads."
msgstr "Він обмежений 100 кадрами та 100 потоками."

#: ../../library/faulthandler.rst:35
msgid "The order is reversed: the most recent call is shown first."
msgstr "Порядок зворотний: останній виклик відображається першим."

#: ../../library/faulthandler.rst:37
msgid ""
"By default, the Python traceback is written to :data:`sys.stderr`. To see "
"tracebacks, applications must be run in the terminal. A log file can "
"alternatively be passed to :func:`faulthandler.enable`."
msgstr ""
"За замовчуванням відстеження Python записується в :data:`sys.stderr`. Щоб "
"побачити відстеження, програми мають бути запущені в терміналі. Файл журналу "
"також можна передати до :func:`faulthandler.enable`."

#: ../../library/faulthandler.rst:41
msgid ""
"The module is implemented in C, so tracebacks can be dumped on a crash or "
"when Python is deadlocked."
msgstr ""
"Модуль реалізовано на C, тому трасування можна скинути під час збою або коли "
"Python заблоковано."

#: ../../library/faulthandler.rst:44
msgid ""
"The :ref:`Python Development Mode <devmode>` calls :func:`faulthandler."
"enable` at Python startup."
msgstr ""
":ref:`Режим розробки Python <devmode>` викликає :func:`faulthandler.enable` "
"під час запуску Python."

#: ../../library/faulthandler.rst:49
msgid "Module :mod:`pdb`"
msgstr "Модуль :mod:`pdb`"

#: ../../library/faulthandler.rst:50
msgid "Interactive source code debugger for Python programs."
msgstr "Интерактивный отладчик исходного кода программ Python."

#: ../../library/faulthandler.rst:52
msgid "Module :mod:`traceback`"
msgstr "Módulo :mod:`traceback`"

#: ../../library/faulthandler.rst:53
msgid ""
"Standard interface to extract, format and print stack traces of Python "
"programs."
msgstr ""
"Interface padrão para extrair, formatar e imprimir rastreamentos de pilha de "
"programas Python."

#: ../../library/faulthandler.rst:56
msgid "Dumping the traceback"
msgstr "Викидання трасування"

#: ../../library/faulthandler.rst:60
msgid ""
"Dump the tracebacks of all threads into *file*. If *all_threads* is "
"``False``, dump only the current thread."
msgstr ""
"Дамп трасування всіх потоків у *файл*. Якщо *all_threads* має значення "
"``False``, створювати дамп лише поточного потоку."

#: ../../library/faulthandler.rst:63
msgid ""
":func:`traceback.print_tb`, which can be used to print a traceback object."
msgstr ""
":func:`traceback.print_tb`, который можно использовать для печати объекта "
"трассировки."

#: ../../library/faulthandler.rst:65 ../../library/faulthandler.rst:84
#: ../../library/faulthandler.rst:123 ../../library/faulthandler.rst:148
msgid "Added support for passing file descriptor to this function."
msgstr "Додано підтримку для передачі дескриптора файлу в цю функцію."

#: ../../library/faulthandler.rst:70
msgid "Fault handler state"
msgstr "Стан обробника помилок"

#: ../../library/faulthandler.rst:74
msgid ""
"Enable the fault handler: install handlers for the :const:`~signal."
"SIGSEGV`, :const:`~signal.SIGFPE`, :const:`~signal.SIGABRT`, :const:`~signal."
"SIGBUS` and :const:`~signal.SIGILL` signals to dump the Python traceback. If "
"*all_threads* is ``True``, produce tracebacks for every running thread. "
"Otherwise, dump only the current thread."
msgstr ""
"Включите обработчик ошибок: установите обработчики для :const:`~signal."
"SIGSEGV`, :const:`~signal.SIGFPE`, :const:`~signal.SIGABRT`, :const:`~signal."
"SIGBUS` и : const:`~signal.SIGILL` сигнализирует о сбросе трассировки "
"Python. Если *all_threads* имеет значение True, создается обратная "
"трассировка для каждого работающего потока. В противном случае выгрузите "
"только текущий поток."

#: ../../library/faulthandler.rst:81
msgid ""
"The *file* must be kept open until the fault handler is disabled: see :ref:"
"`issue with file descriptors <faulthandler-fd>`."
msgstr ""
"*Файл* має бути відкритим, доки обробник помилок не буде вимкнено: див. :ref:"
"`проблему з дескрипторами файлів <faulthandler-fd>`."

#: ../../library/faulthandler.rst:87
msgid "On Windows, a handler for Windows exception is also installed."
msgstr "У Windows також встановлено обробник винятків Windows."

#: ../../library/faulthandler.rst:90
msgid ""
"The dump now mentions if a garbage collector collection is running if "
"*all_threads* is true."
msgstr ""
"Дамп тепер згадує, чи запущено збирач сміття, якщо *all_threads* має "
"значення true."

#: ../../library/faulthandler.rst:96
msgid ""
"Disable the fault handler: uninstall the signal handlers installed by :func:"
"`enable`."
msgstr ""
"Вимкніть обробник помилок: видаліть обробники сигналів, встановлені :func:"
"`enable`."

#: ../../library/faulthandler.rst:101
msgid "Check if the fault handler is enabled."
msgstr "Перевірте, чи ввімкнено обробник помилок."

#: ../../library/faulthandler.rst:105
msgid "Dumping the tracebacks after a timeout"
msgstr "Викидання трасування після тайм-ауту"

#: ../../library/faulthandler.rst:109
msgid ""
"Dump the tracebacks of all threads, after a timeout of *timeout* seconds, or "
"every *timeout* seconds if *repeat* is ``True``.  If *exit* is ``True``, "
"call :c:func:`!_exit` with status=1 after dumping the tracebacks.  (Note :c:"
"func:`!_exit` exits the process immediately, which means it doesn't do any "
"cleanup like flushing file buffers.) If the function is called twice, the "
"new call replaces previous parameters and resets the timeout. The timer has "
"a sub-second resolution."
msgstr ""
"Дамп обратных трассировок всех потоков после тайм-аута *timeout* секунд или "
"каждые *timeout* секунд, если *repeat* имеет значение ``True``. Если *exit* "
"имеет значение ``True``, вызовите :c:func:`!_exit` со статусом=1 после "
"сброса обратных трассировок. (Примечание: :c:func:`!_exit` немедленно "
"завершает процесс, что означает, что он не выполняет никакой очистки, такой "
"как очистка файловых буферов.) Если функция вызывается дважды, новый вызов "
"заменяет предыдущие параметры и сбрасывает время ожидания. Таймер имеет "
"разрешение менее секунды."

#: ../../library/faulthandler.rst:117
msgid ""
"The *file* must be kept open until the traceback is dumped or :func:"
"`cancel_dump_traceback_later` is called: see :ref:`issue with file "
"descriptors <faulthandler-fd>`."
msgstr ""
"*Файл* має залишатися відкритим, доки не буде створено дамп трасування або :"
"func:`cancel_dump_traceback_later`: див. :ref:`проблему з дескрипторами "
"файлів <faulthandler-fd>`."

#: ../../library/faulthandler.rst:121
msgid "This function is implemented using a watchdog thread."
msgstr "Ця функція реалізована за допомогою сторожового потоку."

#: ../../library/faulthandler.rst:126
msgid "This function is now always available."
msgstr "Тепер ця функція доступна завжди."

#: ../../library/faulthandler.rst:131
msgid "Cancel the last call to :func:`dump_traceback_later`."
msgstr "Скасувати останній виклик :func:`dump_traceback_later`."

#: ../../library/faulthandler.rst:135
msgid "Dumping the traceback on a user signal"
msgstr "Скидання зворотного відстеження за сигналом користувача"

#: ../../library/faulthandler.rst:139
msgid ""
"Register a user signal: install a handler for the *signum* signal to dump "
"the traceback of all threads, or of the current thread if *all_threads* is "
"``False``, into *file*. Call the previous handler if chain is ``True``."
msgstr ""
"Зареєструйте сигнал користувача: встановіть обробник для сигналу *signum*, "
"щоб скинути зворотне трасування всіх потоків або поточного потоку, якщо "
"*all_threads* має значення ``False``, у *файл*. Викликати попередній "
"обробник, якщо ланцюжок має значення ``True``."

#: ../../library/faulthandler.rst:143
msgid ""
"The *file* must be kept open until the signal is unregistered by :func:"
"`unregister`: see :ref:`issue with file descriptors <faulthandler-fd>`."
msgstr ""
"*Файл* має залишатися відкритим, доки сигнал не буде скасовано :func:"
"`unregister`: див. :ref:`проблему з дескрипторами файлів <faulthandler-fd>`."

#: ../../library/faulthandler.rst:146 ../../library/faulthandler.rst:157
msgid "Not available on Windows."
msgstr "Não disponível no Windows."

#: ../../library/faulthandler.rst:153
msgid ""
"Unregister a user signal: uninstall the handler of the *signum* signal "
"installed by :func:`register`. Return ``True`` if the signal was registered, "
"``False`` otherwise."
msgstr ""
"Скасувати реєстрацію сигналу користувача: видалити обробник сигналу "
"*signum*, встановлений :func:`register`. Повертає ``True``, якщо сигнал був "
"зареєстрований, ``False`` інакше."

#: ../../library/faulthandler.rst:163
msgid "Issue with file descriptors"
msgstr "Проблема з дескрипторами файлів"

#: ../../library/faulthandler.rst:165
msgid ""
":func:`enable`, :func:`dump_traceback_later` and :func:`register` keep the "
"file descriptor of their *file* argument. If the file is closed and its file "
"descriptor is reused by a new file, or if :func:`os.dup2` is used to replace "
"the file descriptor, the traceback will be written into a different file. "
"Call these functions again each time that the file is replaced."
msgstr ""
":func:`enable`, :func:`dump_traceback_later` і :func:`register` зберігають "
"файловий дескриптор свого аргументу *file*. Якщо файл закрито і його "
"файловий дескриптор повторно використовується в новому файлі, або якщо :func:"
"`os.dup2` використовується для заміни файлового дескриптора, трасування буде "
"записане в інший файл. Викликайте ці функції знову щоразу, коли файл "
"замінюється."

#: ../../library/faulthandler.rst:173
msgid "Example"
msgstr "Exemplo"

#: ../../library/faulthandler.rst:175
msgid ""
"Example of a segmentation fault on Linux with and without enabling the fault "
"handler:"
msgstr ""
"Приклад помилки сегментації в Linux із увімкненням і без увімкнення "
"обробника помилок:"

#: ../../library/faulthandler.rst:178
msgid ""
"$ python -c \"import ctypes; ctypes.string_at(0)\"\n"
"Segmentation fault\n"
"\n"
"$ python -q -X faulthandler\n"
">>> import ctypes\n"
">>> ctypes.string_at(0)\n"
"Fatal Python error: Segmentation fault\n"
"\n"
"Current thread 0x00007fb899f39700 (most recent call first):\n"
"  File \"/home/python/cpython/Lib/ctypes/__init__.py\", line 486 in "
"string_at\n"
"  File \"<stdin>\", line 1 in <module>\n"
"Segmentation fault"
msgstr ""
"$ python -c \"import ctypes; ctypes.string_at(0)\"\n"
"Segmentation fault\n"
"\n"
"$ python -q -X faulthandler\n"
">>> import ctypes\n"
">>> ctypes.string_at(0)\n"
"Fatal Python error: Segmentation fault\n"
"\n"
"Current thread 0x00007fb899f39700 (most recent call first):\n"
"  File \"/home/python/cpython/Lib/ctypes/__init__.py\", line 486 in "
"string_at\n"
"  File \"<stdin>\", line 1 in <module>\n"
"Segmentation fault"
