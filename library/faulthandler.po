# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# And Past <andrepgs@gmail.com>, 2021
# i17obot <i17obot@rougeth.com>, 2021
# Rafael Fontenelle <rffontenelle@gmail.com>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-08 02:53-0300\n"
"PO-Revision-Date: 2021-06-28 01:05+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2023\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/faulthandler.rst:2
msgid ":mod:`!faulthandler` --- Dump the Python traceback"
msgstr ""

#: ../../library/faulthandler.rst:11
msgid ""
"This module contains functions to dump Python tracebacks explicitly, on a "
"fault, after a timeout, or on a user signal. Call :func:`faulthandler."
"enable` to install fault handlers for the :const:`~signal.SIGSEGV`, :const:"
"`~signal.SIGFPE`, :const:`~signal.SIGABRT`, :const:`~signal.SIGBUS`, and :"
"const:`~signal.SIGILL` signals. You can also enable them at startup by "
"setting the :envvar:`PYTHONFAULTHANDLER` environment variable or by using "
"the :option:`-X` ``faulthandler`` command line option."
msgstr ""

#: ../../library/faulthandler.rst:19
msgid ""
"The fault handler is compatible with system fault handlers like Apport or "
"the Windows fault handler. The module uses an alternative stack for signal "
"handlers if the :c:func:`!sigaltstack` function is available. This allows it "
"to dump the traceback even on a stack overflow."
msgstr ""

#: ../../library/faulthandler.rst:24
msgid ""
"The fault handler is called on catastrophic cases and therefore can only use "
"signal-safe functions (e.g. it cannot allocate memory on the heap). Because "
"of this limitation traceback dumping is minimal compared to normal Python "
"tracebacks:"
msgstr ""

#: ../../library/faulthandler.rst:29
msgid ""
"Only ASCII is supported. The ``backslashreplace`` error handler is used on "
"encoding."
msgstr ""

#: ../../library/faulthandler.rst:31
msgid "Each string is limited to 500 characters."
msgstr ""

#: ../../library/faulthandler.rst:32
msgid ""
"Only the filename, the function name and the line number are displayed. (no "
"source code)"
msgstr ""

#: ../../library/faulthandler.rst:34
msgid "It is limited to 100 frames and 100 threads."
msgstr ""

#: ../../library/faulthandler.rst:35
msgid "The order is reversed: the most recent call is shown first."
msgstr ""

#: ../../library/faulthandler.rst:37
msgid ""
"By default, the Python traceback is written to :data:`sys.stderr`. To see "
"tracebacks, applications must be run in the terminal. A log file can "
"alternatively be passed to :func:`faulthandler.enable`."
msgstr ""

#: ../../library/faulthandler.rst:41
msgid ""
"The module is implemented in C, so tracebacks can be dumped on a crash or "
"when Python is deadlocked."
msgstr ""

#: ../../library/faulthandler.rst:44
msgid ""
"The :ref:`Python Development Mode <devmode>` calls :func:`faulthandler."
"enable` at Python startup."
msgstr ""

#: ../../library/faulthandler.rst:49
msgid "Module :mod:`pdb`"
msgstr ""

#: ../../library/faulthandler.rst:50
msgid "Interactive source code debugger for Python programs."
msgstr ""

#: ../../library/faulthandler.rst:52
msgid "Module :mod:`traceback`"
msgstr "Módulo :mod:`traceback`"

#: ../../library/faulthandler.rst:53
msgid ""
"Standard interface to extract, format and print stack traces of Python "
"programs."
msgstr ""
"Interface padrão para extrair, formatar e imprimir rastreamentos de pilha de "
"programas Python."

#: ../../library/faulthandler.rst:56
msgid "Dumping the traceback"
msgstr ""

#: ../../library/faulthandler.rst:60
msgid ""
"Dump the tracebacks of all threads into *file*. If *all_threads* is "
"``False``, dump only the current thread."
msgstr ""

#: ../../library/faulthandler.rst:63
msgid ""
":func:`traceback.print_tb`, which can be used to print a traceback object."
msgstr ""

#: ../../library/faulthandler.rst:65 ../../library/faulthandler.rst:119
#: ../../library/faulthandler.rst:165 ../../library/faulthandler.rst:190
msgid "Added support for passing file descriptor to this function."
msgstr ""

#: ../../library/faulthandler.rst:70
msgid "Dumping the C stack"
msgstr ""

#: ../../library/faulthandler.rst:76
msgid "Dump the C stack trace of the current thread into *file*."
msgstr ""

#: ../../library/faulthandler.rst:78
msgid ""
"If the Python build does not support it or the operating system does not "
"provide a stack trace, then this prints an error in place of a dumped C "
"stack."
msgstr ""

#: ../../library/faulthandler.rst:85
msgid "C Stack Compatibility"
msgstr ""

#: ../../library/faulthandler.rst:87
msgid ""
"If the system does not support the C-level :manpage:`backtrace(3)` or :"
"manpage:`dladdr1(3)`, then C stack dumps will not work. An error will be "
"printed instead of the stack."
msgstr ""

#: ../../library/faulthandler.rst:91
msgid ""
"Additionally, some compilers do not support :term:`CPython's <CPython>` "
"implementation of C stack dumps. As a result, a different error may be "
"printed instead of the stack, even if the the operating system supports "
"dumping stacks."
msgstr ""

#: ../../library/faulthandler.rst:97
msgid ""
"Dumping C stacks can be arbitrarily slow, depending on the DWARF level of "
"the binaries in the call stack."
msgstr ""

#: ../../library/faulthandler.rst:101
msgid "Fault handler state"
msgstr ""

#: ../../library/faulthandler.rst:105
msgid ""
"Enable the fault handler: install handlers for the :const:`~signal."
"SIGSEGV`, :const:`~signal.SIGFPE`, :const:`~signal.SIGABRT`, :const:`~signal."
"SIGBUS` and :const:`~signal.SIGILL` signals to dump the Python traceback. If "
"*all_threads* is ``True``, produce tracebacks for every running thread. "
"Otherwise, dump only the current thread."
msgstr ""

#: ../../library/faulthandler.rst:112
msgid ""
"The *file* must be kept open until the fault handler is disabled: see :ref:"
"`issue with file descriptors <faulthandler-fd>`."
msgstr ""

#: ../../library/faulthandler.rst:115
msgid ""
"If *c_stack* is ``True``, then the C stack trace is printed after the Python "
"traceback, unless the system does not support it. See :func:`dump_c_stack` "
"for more information on compatibility."
msgstr ""

#: ../../library/faulthandler.rst:122
msgid "On Windows, a handler for Windows exception is also installed."
msgstr ""

#: ../../library/faulthandler.rst:125
msgid ""
"The dump now mentions if a garbage collector collection is running if "
"*all_threads* is true."
msgstr ""

#: ../../library/faulthandler.rst:129
msgid ""
"Only the current thread is dumped if the :term:`GIL` is disabled to prevent "
"the risk of data races."
msgstr ""

#: ../../library/faulthandler.rst:133
msgid "The dump now displays the C stack trace if *c_stack* is true."
msgstr ""

#: ../../library/faulthandler.rst:138
msgid ""
"Disable the fault handler: uninstall the signal handlers installed by :func:"
"`enable`."
msgstr ""

#: ../../library/faulthandler.rst:143
msgid "Check if the fault handler is enabled."
msgstr ""

#: ../../library/faulthandler.rst:147
msgid "Dumping the tracebacks after a timeout"
msgstr ""

#: ../../library/faulthandler.rst:151
msgid ""
"Dump the tracebacks of all threads, after a timeout of *timeout* seconds, or "
"every *timeout* seconds if *repeat* is ``True``.  If *exit* is ``True``, "
"call :c:func:`!_exit` with status=1 after dumping the tracebacks.  (Note :c:"
"func:`!_exit` exits the process immediately, which means it doesn't do any "
"cleanup like flushing file buffers.) If the function is called twice, the "
"new call replaces previous parameters and resets the timeout. The timer has "
"a sub-second resolution."
msgstr ""

#: ../../library/faulthandler.rst:159
msgid ""
"The *file* must be kept open until the traceback is dumped or :func:"
"`cancel_dump_traceback_later` is called: see :ref:`issue with file "
"descriptors <faulthandler-fd>`."
msgstr ""

#: ../../library/faulthandler.rst:163
msgid "This function is implemented using a watchdog thread."
msgstr ""

#: ../../library/faulthandler.rst:168
msgid "This function is now always available."
msgstr ""

#: ../../library/faulthandler.rst:173
msgid "Cancel the last call to :func:`dump_traceback_later`."
msgstr ""

#: ../../library/faulthandler.rst:177
msgid "Dumping the traceback on a user signal"
msgstr ""

#: ../../library/faulthandler.rst:181
msgid ""
"Register a user signal: install a handler for the *signum* signal to dump "
"the traceback of all threads, or of the current thread if *all_threads* is "
"``False``, into *file*. Call the previous handler if chain is ``True``."
msgstr ""

#: ../../library/faulthandler.rst:185
msgid ""
"The *file* must be kept open until the signal is unregistered by :func:"
"`unregister`: see :ref:`issue with file descriptors <faulthandler-fd>`."
msgstr ""

#: ../../library/faulthandler.rst:188 ../../library/faulthandler.rst:199
msgid "Not available on Windows."
msgstr "Não disponível no Windows."

#: ../../library/faulthandler.rst:195
msgid ""
"Unregister a user signal: uninstall the handler of the *signum* signal "
"installed by :func:`register`. Return ``True`` if the signal was registered, "
"``False`` otherwise."
msgstr ""

#: ../../library/faulthandler.rst:205
msgid "Issue with file descriptors"
msgstr ""

#: ../../library/faulthandler.rst:207
msgid ""
":func:`enable`, :func:`dump_traceback_later` and :func:`register` keep the "
"file descriptor of their *file* argument. If the file is closed and its file "
"descriptor is reused by a new file, or if :func:`os.dup2` is used to replace "
"the file descriptor, the traceback will be written into a different file. "
"Call these functions again each time that the file is replaced."
msgstr ""

#: ../../library/faulthandler.rst:215
msgid "Example"
msgstr "Exemplo"

#: ../../library/faulthandler.rst:217
msgid ""
"Example of a segmentation fault on Linux with and without enabling the fault "
"handler:"
msgstr ""

#: ../../library/faulthandler.rst:220
msgid ""
"$ python -c \"import ctypes; ctypes.string_at(0)\"\n"
"Segmentation fault\n"
"\n"
"$ python -q -X faulthandler\n"
">>> import ctypes\n"
">>> ctypes.string_at(0)\n"
"Fatal Python error: Segmentation fault\n"
"\n"
"Current thread 0x00007fb899f39700 (most recent call first):\n"
"  File \"/home/python/cpython/Lib/ctypes/__init__.py\", line 486 in "
"string_at\n"
"  File \"<stdin>\", line 1 in <module>\n"
"Segmentation fault"
msgstr ""
