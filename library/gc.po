# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: Adorilson Bezerra <adorilson@gmail.com>\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/"
"python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../library/gc.rst:3
msgid ":mod:`gc` --- Garbage Collector interface"
msgstr ":mod:`gc` --- Interface para o coletor de lixo"

#: ../../library/gc.rst:11
msgid ""
"This module provides an interface to the optional garbage collector.  It "
"provides the ability to disable the collector, tune the collection "
"frequency, and set debugging options.  It also provides access to "
"unreachable objects that the collector found but cannot free.  Since the "
"collector supplements the reference counting already used in Python, you can "
"disable the collector if you are sure your program does not create reference "
"cycles.  Automatic collection can be disabled by calling ``gc.disable()``.  "
"To debug a leaking program call ``gc.set_debug(gc.DEBUG_LEAK)``. Notice that "
"this includes ``gc.DEBUG_SAVEALL``, causing garbage-collected objects to be "
"saved in gc.garbage for inspection."
msgstr ""
"Este módulo fornece uma interface para o opcional garbage collector. Ele "
"disponibiliza a habilidade de desabilitar o collector, ajustar a frequência "
"da coleção, e configurar as opções de depuração. Ele também fornece acesso "
"para objetos inacessíveis que o collector encontra mas não pode \"limpar\". "
"Como o collector complementa a contagem de referência já usada em Python, "
"você pode desabilitar o collector se você tem certeza que o seu programa não "
"cria ciclos de referências. A coleta automática pode ser desabilitada pela "
"chamada ``gc.disable()``. Para depurar um programa vazando, chame ``gc."
"set_debug(gc.DEBUG_LEAK)``. Perceba que isto inclui ``gc.DEBUG_SAVEALL``, "
"fazendo com que objetos coletados pelo garbage-collector sejam salvos para "
"inspeção em gc.garbage."

#: ../../library/gc.rst:22
msgid "The :mod:`gc` module provides the following functions:"
msgstr "O módulo :mod:`gc` fornece as seguintes funções:"

#: ../../library/gc.rst:27
msgid "Enable automatic garbage collection."
msgstr "Habilita a coleta de lixo automática."

#: ../../library/gc.rst:32
msgid "Disable automatic garbage collection."
msgstr "Desative a coleta de lixo automática."

#: ../../library/gc.rst:37
msgid "Returns true if automatic collection is enabled."
msgstr ""

#: ../../library/gc.rst:42
msgid ""
"With no arguments, run a full collection.  The optional argument "
"*generation* may be an integer specifying which generation to collect (from "
"0 to 2).  A :exc:`ValueError` is raised if the generation number  is "
"invalid. The number of unreachable objects found is returned."
msgstr ""

#: ../../library/gc.rst:47
msgid "The optional *generation* argument was added."
msgstr ""

#: ../../library/gc.rst:50
msgid ""
"The free lists maintained for a number of built-in types are cleared "
"whenever a full collection or collection of the highest generation (2) is "
"run.  Not all items in some free lists may be freed due to the particular "
"implementation, in particular :class:`int` and :class:`float`."
msgstr ""

#: ../../library/gc.rst:59
msgid ""
"Set the garbage collection debugging flags. Debugging information will be "
"written to ``sys.stderr``.  See below for a list of debugging flags which "
"can be combined using bit operations to control debugging."
msgstr ""
"Define os sinalizadores de depuração da coleta de lixo. As informações de "
"depuração serão gravadas em ``sys.stderr``. Veja abaixo uma lista de "
"sinalizadores de depuração que podem ser combinados usando operações de bit "
"para controlar a depuração."

#: ../../library/gc.rst:66
msgid "Return the debugging flags currently set."
msgstr "Retorne os sinalizadores de depuração atualmente definidos."

#: ../../library/gc.rst:71
msgid ""
"Returns a list of all objects tracked by the collector, excluding the list "
"returned."
msgstr ""

#: ../../library/gc.rst:79
msgid ""
"Set the garbage collection thresholds (the collection frequency). Setting "
"*threshold0* to zero disables collection."
msgstr ""
"Define os limites de coleta de lixo (a frequência de coleta). Definir "
"*threshold0* como zero desativa a coleta."

#: ../../library/gc.rst:82
msgid ""
"The GC classifies objects into three generations depending on how many "
"collection sweeps they have survived.  New objects are placed in the "
"youngest generation (generation ``0``).  If an object survives a collection "
"it is moved into the next older generation.  Since generation ``2`` is the "
"oldest generation, objects in that generation remain there after a "
"collection.  In order to decide when to run, the collector keeps track of "
"the number object allocations and deallocations since the last collection.  "
"When the number of allocations minus the number of deallocations exceeds "
"*threshold0*, collection starts.  Initially only generation ``0`` is "
"examined.  If generation ``0`` has been examined more than *threshold1* "
"times since generation ``1`` has been examined, then generation ``1`` is "
"examined as well.  Similarly, *threshold2* controls the number of "
"collections of generation ``1`` before collecting generation ``2``."
msgstr ""

#: ../../library/gc.rst:99
msgid ""
"Return the current collection  counts as a tuple of ``(count0, count1, "
"count2)``."
msgstr ""
"Retorna as contagens da coleta atual como uma tupla de ``(count0, count1, "
"count2)``."

#: ../../library/gc.rst:107
msgid ""
"Return the current collection thresholds as a tuple of ``(threshold0, "
"threshold1, threshold2)``."
msgstr ""
"Retorne os limites da coleção atual como uma tupla de ``(threshold0, "
"threshold1, threshold2)``."

#: ../../library/gc.rst:113
msgid ""
"Return the list of objects that directly refer to any of objs. This function "
"will only locate those containers which support garbage collection; "
"extension types which do refer to other objects but do not support garbage "
"collection will not be found."
msgstr ""
"Retorna a lista de objetos que se referem diretamente a qualquer um dos "
"objs. Esta função localizará apenas os contêineres que suportam coleta de "
"lixo; tipos de extensão que se referem a outros objetos, mas não suportam "
"coleta de lixo, não serão encontrados."

#: ../../library/gc.rst:118
msgid ""
"Note that objects which have already been dereferenced, but which live in "
"cycles and have not yet been collected by the garbage collector can be "
"listed among the resulting referrers.  To get only currently live objects, "
"call :func:`collect` before calling :func:`get_referrers`."
msgstr ""
"Observe que os objetos que já foram desreferenciados, mas que vivem em "
"ciclos e ainda não foram coletados pelo coletor de lixo podem ser listados "
"entre os referenciadores resultantes. Para obter apenas os objetos "
"atualmente ativos, chame :func:`collect` antes de chamar :func:"
"`get_referrers`."

#: ../../library/gc.rst:123
msgid ""
"Care must be taken when using objects returned by :func:`get_referrers` "
"because some of them could still be under construction and hence in a "
"temporarily invalid state. Avoid using :func:`get_referrers` for any purpose "
"other than debugging."
msgstr ""
"Deve-se tomar cuidado ao usar objetos retornados por :func:`get_referrers` "
"porque alguns deles ainda podem estar em construção e, portanto, em um "
"estado temporariamente inválido. Evite usar :func:`get_referrers` para "
"qualquer finalidade que não seja depuração."

#: ../../library/gc.rst:133
msgid ""
"Return a list of objects directly referred to by any of the arguments. The "
"referents returned are those objects visited by the arguments' C-level :c:"
"member:`~PyTypeObject.tp_traverse` methods (if any), and may not be all "
"objects actually directly reachable.  :c:member:`~PyTypeObject.tp_traverse` "
"methods are supported only by objects that support garbage collection, and "
"are only required to visit objects that may be involved in a cycle.  So, for "
"example, if an integer is directly reachable from an argument, that integer "
"object may or may not appear in the result list."
msgstr ""
"Retorna uma lista de objetos diretamente referenciados por qualquer um dos "
"argumentos. Os referentes retornados são aqueles objetos visitados pelos "
"métodos a nível do C :c:member:`~PyTypeObject.tp_traverse` dos argumentos "
"(se houver), e podem não ser todos os objetos diretamente alcançáveis. Os "
"métodos :c:member:`~PyTypeObject.tp_traverse` são suportados apenas por "
"objetos que suportam coleta de lixo e são necessários apenas para visitar "
"objetos que possam estar envolvidos em um ciclo. Assim, por exemplo, se um "
"número inteiro pode ser acessado diretamente de um argumento, esse objeto "
"inteiro pode ou não aparecer na lista de resultados."

#: ../../library/gc.rst:145
msgid ""
"Returns ``True`` if the object is currently tracked by the garbage "
"collector, ``False`` otherwise.  As a general rule, instances of atomic "
"types aren't tracked and instances of non-atomic types (containers, user-"
"defined objects...) are.  However, some type-specific optimizations can be "
"present in order to suppress the garbage collector footprint of simple "
"instances (e.g. dicts containing only atomic keys and values)::"
msgstr ""
"Retorna ``True`` se o objeto está atualmente rastreado pelo coletor de lixo, "
"``False`` caso contrário. Como regra geral, as instâncias de tipos atômicos "
"não são rastreadas e as instâncias de tipos não atômicos (contêineres, "
"objetos definidos pelo usuário...) são. No entanto, algumas otimizações "
"específicas do tipo podem estar presentes para suprimir a pegada do coletor "
"de lixo de instâncias simples (por exemplo, dicts contendo apenas chaves e "
"valores atômicos)::"

#: ../../library/gc.rst:168
msgid ""
"The following variable is provided for read-only access (you can mutate its "
"value but should not rebind it):"
msgstr ""

#: ../../library/gc.rst:174
msgid ""
"A list of objects which the collector found to be unreachable but could not "
"be freed (uncollectable objects).  By default, this list contains only "
"objects with :meth:`__del__` methods. [#]_ Objects that have :meth:`__del__` "
"methods and are part of a reference cycle cause the entire reference cycle "
"to be uncollectable, including objects not necessarily in the cycle but "
"reachable only from it. Python doesn't collect such cycles automatically "
"because, in general, it isn't possible for Python to guess a safe order in "
"which to run the :meth:`__del__` methods.  If you know a safe order, you can "
"force the issue by examining the *garbage* list, and explicitly breaking "
"cycles due to your objects within the list.  Note that these objects are "
"kept alive even so by virtue of being in the *garbage* list, so they should "
"be removed from *garbage* too.  For example, after breaking cycles, do ``del "
"gc.garbage[:]`` to empty the list.  It's generally better to avoid the issue "
"by not creating cycles containing objects with :meth:`__del__` methods, and "
"*garbage* can be examined in that case to verify that no such cycles are "
"being created."
msgstr ""

#: ../../library/gc.rst:190
msgid ""
"If :const:`DEBUG_SAVEALL` is set, then all unreachable objects will be added "
"to this list rather than freed."
msgstr ""
"Se :const:`DEBUG_SAVEALL` for definido, todos os objetos inacessíveis serão "
"adicionados a esta lista ao invés de liberados."

#: ../../library/gc.rst:193
msgid "The following constants are provided for use with :func:`set_debug`:"
msgstr "As seguintes constantes são fornecidas para uso com :func:`set_debug`:"

#: ../../library/gc.rst:198
msgid ""
"Print statistics during collection.  This information can be useful when "
"tuning the collection frequency."
msgstr ""
"Imprimir estatísticas durante a coleta. Esta informação pode ser útil ao "
"sintonizar a frequência de coleta."

#: ../../library/gc.rst:204
msgid "Print information on collectable objects found."
msgstr "Imprimir informações sobre objetos colecionáveis encontrados."

#: ../../library/gc.rst:209
msgid ""
"Print information of uncollectable objects found (objects which are not "
"reachable but cannot be freed by the collector).  These objects will be "
"added to the ``garbage`` list."
msgstr ""
"Imprime informações de objetos não colecionáveis encontrados (objetos que "
"não são alcançáveis, mas não podem ser liberados pelo coletor). Esses "
"objetos serão adicionados à lista ``garbage``."

#: ../../library/gc.rst:216
msgid ""
"When :const:`DEBUG_COLLECTABLE` or :const:`DEBUG_UNCOLLECTABLE` is set, "
"print information about instance objects found."
msgstr ""

#: ../../library/gc.rst:222
msgid ""
"When :const:`DEBUG_COLLECTABLE` or :const:`DEBUG_UNCOLLECTABLE` is set, "
"print information about objects other than instance objects found."
msgstr ""

#: ../../library/gc.rst:228
msgid ""
"When set, all unreachable objects found will be appended to *garbage* rather "
"than being freed.  This can be useful for debugging a leaking program."
msgstr ""
"Quando definido, todos os objetos inacessíveis encontrados serão anexados ao "
"*lixo* em vez de serem liberados. Isso pode ser útil para depurar um "
"programa com vazamento."

#: ../../library/gc.rst:234
msgid ""
"The debugging flags necessary for the collector to print information about a "
"leaking program (equal to ``DEBUG_COLLECTABLE | DEBUG_UNCOLLECTABLE | "
"DEBUG_INSTANCES | DEBUG_OBJECTS | DEBUG_SAVEALL``)."
msgstr ""

#: ../../library/gc.rst:239
msgid "Footnotes"
msgstr "Notas de Rodapé"

#: ../../library/gc.rst:240
msgid ""
"Prior to Python 2.2, the list contained all instance objects in unreachable "
"cycles,  not only those with :meth:`__del__` methods."
msgstr ""
