# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-18 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/gc.rst:2
msgid ":mod:`!gc` --- Garbage Collector interface"
msgstr ":mod:`!gc` --- Interface para o coletor de lixo"

#: ../../library/gc.rst:12
msgid ""
"This module provides an interface to the optional garbage collector.  It "
"provides the ability to disable the collector, tune the collection "
"frequency, and set debugging options.  It also provides access to "
"unreachable objects that the collector found but cannot free.  Since the "
"collector supplements the reference counting already used in Python, you can "
"disable the collector if you are sure your program does not create reference "
"cycles.  Automatic collection can be disabled by calling ``gc.disable()``.  "
"To debug a leaking program call ``gc.set_debug(gc.DEBUG_LEAK)``. Notice that "
"this includes ``gc.DEBUG_SAVEALL``, causing garbage-collected objects to be "
"saved in gc.garbage for inspection."
msgstr ""
"Este módulo fornece uma interface para o coletor de lixo opcional. Ele "
"disponibiliza a habilidade de desabilitar o coletor, ajustar a frequência da "
"coleção, e configurar as opções de depuração. Ele também fornece acesso para "
"objetos inacessíveis que o coletor encontra mas não pode \"limpar\". Como o "
"coletor complementa a contagem de referência já usada em Python, você pode "
"desabilitar o coletor se você tem certeza que o seu programa não cria ciclos "
"de referência. A coleta automática pode ser desabilitada pela chamada ``gc."
"disable()``. Para depurar um programa vazando, chame ``gc.set_debug(gc."
"DEBUG_LEAK)``. Perceba que isto inclui ``gc.DEBUG_SAVEALL``, fazendo com que "
"objetos coletados pelo coletor de lixo sejam salvos para inspeção em gc."
"garbage."

#: ../../library/gc.rst:23
msgid "The :mod:`gc` module provides the following functions:"
msgstr "O módulo :mod:`gc` fornece as seguintes funções:"

#: ../../library/gc.rst:28
msgid "Enable automatic garbage collection."
msgstr "Habilita a coleta de lixo automática."

#: ../../library/gc.rst:33
msgid "Disable automatic garbage collection."
msgstr "Desabilita a coleta de lixo automática."

#: ../../library/gc.rst:38
msgid "Return ``True`` if automatic collection is enabled."
msgstr "Retorna ``True`` se a coleta automática estiver habilitada."

#: ../../library/gc.rst:43
msgid ""
"With no arguments, run a full collection.  The optional argument "
"*generation* may be an integer specifying which generation to collect (from "
"0 to 2).  A :exc:`ValueError` is raised if the generation number  is "
"invalid. The number of unreachable objects found is returned."
msgstr ""
"Sem argumentos, execute uma coleta completa. O argumento opcional "
"*generation* pode ser um inteiro especificando qual geração coletar (de 0 a "
"2). Uma exceção :exc:`ValueError` é levantada se o número de geração for "
"inválido. O número de objetos inacessíveis encontrados é retornado."

#: ../../library/gc.rst:48
msgid ""
"The free lists maintained for a number of built-in types are cleared "
"whenever a full collection or collection of the highest generation (2) is "
"run.  Not all items in some free lists may be freed due to the particular "
"implementation, in particular :class:`float`."
msgstr ""
"As listas livres mantidas para vários tipos embutidos são limpas sempre que "
"uma coleta completa ou coleta da geração mais alta (2) é executada. Nem "
"todos os itens em algumas listas livres podem ser liberados devido à "
"implementação particular, em particular :class:`float`."

#: ../../library/gc.rst:53
msgid ""
"The effect of calling ``gc.collect()`` while the interpreter is already "
"performing a collection is undefined."
msgstr ""
"O efeito de chamar ``gc.collect()`` enquanto o interpretador já está "
"realizando uma coleta é indefinido."

#: ../../library/gc.rst:59
msgid ""
"Set the garbage collection debugging flags. Debugging information will be "
"written to ``sys.stderr``.  See below for a list of debugging flags which "
"can be combined using bit operations to control debugging."
msgstr ""
"Define os sinalizadores de depuração da coleta de lixo. As informações de "
"depuração serão gravadas em ``sys.stderr``. Veja abaixo uma lista de "
"sinalizadores de depuração que podem ser combinados usando operações de bit "
"para controlar a depuração."

#: ../../library/gc.rst:66
msgid "Return the debugging flags currently set."
msgstr "Retorna os sinalizadores de depuração atualmente definidos."

#: ../../library/gc.rst:71
msgid ""
"Returns a list of all objects tracked by the collector, excluding the list "
"returned. If *generation* is not ``None``, return only the objects tracked "
"by the collector that are in that generation."
msgstr ""
"Retorna uma lista de todos os objetos rastreados pelo coletor, excluindo a "
"lista retornada. Se *generation* não for ``None``, retorna apenas os objetos "
"rastreados pelo coletor que estão nessa geração."

#: ../../library/gc.rst:75
msgid "New *generation* parameter."
msgstr "Novo parâmetro *generation*."

#: ../../library/gc.rst:78
msgid ""
"Raises an :ref:`auditing event <auditing>` ``gc.get_objects`` with argument "
"``generation``."
msgstr ""
"Levanta um :ref:`evento de auditoria <auditing>` ``gc.get_objects`` com o "
"argumento ``generation``."

#: ../../library/gc.rst:82
msgid ""
"Return a list of three per-generation dictionaries containing collection "
"statistics since interpreter start.  The number of keys may change in the "
"future, but currently each dictionary will contain the following items:"
msgstr ""
"Retorna uma lista de três dicionários por geração contendo estatísticas de "
"coleta desde o início do interpretador. O número de chaves pode mudar no "
"futuro, mas atualmente cada dicionário conterá os seguintes itens:"

#: ../../library/gc.rst:87
msgid "``collections`` is the number of times this generation was collected;"
msgstr "``collections`` é o número de vezes que esta geração foi coletada;"

#: ../../library/gc.rst:89
msgid ""
"``collected`` is the total number of objects collected inside this "
"generation;"
msgstr "``collected`` é o número total de objetos coletados nesta geração;"

#: ../../library/gc.rst:92
msgid ""
"``uncollectable`` is the total number of objects which were found to be "
"uncollectable (and were therefore moved to the :data:`garbage` list) inside "
"this generation."
msgstr ""
"``uncollectable`` é o número total de objetos que foram considerados "
"incobráveis (e, portanto, movidos para a lista :data:`garbage`) dentro desta "
"geração."

#: ../../library/gc.rst:101
msgid ""
"Set the garbage collection thresholds (the collection frequency). Setting "
"*threshold0* to zero disables collection."
msgstr ""
"Define os limites de coleta de lixo (a frequência de coleta). Definir "
"*threshold0* como zero desativa a coleta."

#: ../../library/gc.rst:104
msgid ""
"The GC classifies objects into three generations depending on how many "
"collection sweeps they have survived.  New objects are placed in the "
"youngest generation (generation ``0``).  If an object survives a collection "
"it is moved into the next older generation.  Since generation ``2`` is the "
"oldest generation, objects in that generation remain there after a "
"collection.  In order to decide when to run, the collector keeps track of "
"the number object allocations and deallocations since the last collection.  "
"When the number of allocations minus the number of deallocations exceeds "
"*threshold0*, collection starts.  Initially only generation ``0`` is "
"examined.  If generation ``0`` has been examined more than *threshold1* "
"times since generation ``1`` has been examined, then generation ``1`` is "
"examined as well. With the third generation, things are a bit more "
"complicated, see `Collecting the oldest generation <https://devguide.python."
"org/garbage_collector/#collecting-the-oldest-generation>`_ for more "
"information."
msgstr ""
"O GC classifica os objetos em três gerações, dependendo de quantas "
"varreduras de coleta eles sobreviveram. Novos objetos são colocados na "
"geração mais nova (geração ``0``). Se um objeto sobreviver a uma coleção, "
"ele será movido para a próxima geração mais antiga. Como a geração ``2`` é a "
"geração mais antiga, os objetos dessa geração permanecem lá após uma coleta. "
"Para decidir quando executar, o coletor acompanha o número de alocações e "
"desalocações de objetos desde a última coleta. Quando o número de alocações "
"menos o número de desalocações exceder *threshold0*, a coleta será iniciada. "
"Inicialmente, apenas a geração ``0`` é examinada. Se a geração ``0`` foi "
"examinada mais de *threshold1* vezes desde que a geração ``1`` foi "
"examinada, então a geração ``1`` também é examinada. Com a terceira geração, "
"as coisas são um pouco mais complicadas, veja `Coletando a geração mais "
"antiga <https://devguide.python.org/garbage_collector/#collecting-the-oldest-"
"generation>`_ para mais informações."

#: ../../library/gc.rst:121
msgid ""
"Return the current collection  counts as a tuple of ``(count0, count1, "
"count2)``."
msgstr ""
"Retorna as contagens da coleta atual como uma tupla de ``(count0, count1, "
"count2)``."

#: ../../library/gc.rst:127
msgid ""
"Return the current collection thresholds as a tuple of ``(threshold0, "
"threshold1, threshold2)``."
msgstr ""
"Retorna os limites da coleta atual como uma tupla de ``(threshold0, "
"threshold1, threshold2)``."

#: ../../library/gc.rst:133
msgid ""
"Return the list of objects that directly refer to any of objs. This function "
"will only locate those containers which support garbage collection; "
"extension types which do refer to other objects but do not support garbage "
"collection will not be found."
msgstr ""
"Retorna a lista de objetos que se referem diretamente a qualquer um dos "
"objs. Esta função localizará apenas os contêineres que suportam coleta de "
"lixo; tipos de extensão que se referem a outros objetos, mas não suportam "
"coleta de lixo, não serão encontrados."

#: ../../library/gc.rst:138
msgid ""
"Note that objects which have already been dereferenced, but which live in "
"cycles and have not yet been collected by the garbage collector can be "
"listed among the resulting referrers.  To get only currently live objects, "
"call :func:`collect` before calling :func:`get_referrers`."
msgstr ""
"Observe que os objetos que já foram desreferenciados, mas que vivem em "
"ciclos e ainda não foram coletados pelo coletor de lixo podem ser listados "
"entre os referenciadores resultantes. Para obter apenas os objetos "
"atualmente ativos, chame :func:`collect` antes de chamar :func:"
"`get_referrers`."

#: ../../library/gc.rst:144
msgid ""
"Care must be taken when using objects returned by :func:`get_referrers` "
"because some of them could still be under construction and hence in a "
"temporarily invalid state. Avoid using :func:`get_referrers` for any purpose "
"other than debugging."
msgstr ""
"Deve-se tomar cuidado ao usar objetos retornados por :func:`get_referrers` "
"porque alguns deles ainda podem estar em construção e, portanto, em um "
"estado temporariamente inválido. Evite usar :func:`get_referrers` para "
"qualquer finalidade que não seja depuração."

#: ../../library/gc.rst:149
msgid ""
"Raises an :ref:`auditing event <auditing>` ``gc.get_referrers`` with "
"argument ``objs``."
msgstr ""
"Levanta um :ref:`evento de auditoria <auditing>` ``gc.get_referrers`` com o "
"argumento ``objs``."

#: ../../library/gc.rst:154
msgid ""
"Return a list of objects directly referred to by any of the arguments. The "
"referents returned are those objects visited by the arguments' C-level :c:"
"member:`~PyTypeObject.tp_traverse` methods (if any), and may not be all "
"objects actually directly reachable.  :c:member:`~PyTypeObject.tp_traverse` "
"methods are supported only by objects that support garbage collection, and "
"are only required to visit objects that may be involved in a cycle.  So, for "
"example, if an integer is directly reachable from an argument, that integer "
"object may or may not appear in the result list."
msgstr ""
"Retorna uma lista de objetos diretamente referenciados por qualquer um dos "
"argumentos. Os referentes retornados são aqueles objetos visitados pelos "
"métodos a nível do C :c:member:`~PyTypeObject.tp_traverse` dos argumentos "
"(se houver), e podem não ser todos os objetos diretamente alcançáveis. Os "
"métodos :c:member:`~PyTypeObject.tp_traverse` são suportados apenas por "
"objetos que suportam coleta de lixo e são necessários apenas para visitar "
"objetos que possam estar envolvidos em um ciclo. Assim, por exemplo, se um "
"número inteiro pode ser acessado diretamente de um argumento, esse objeto "
"inteiro pode ou não aparecer na lista de resultados."

#: ../../library/gc.rst:162
msgid ""
"Raises an :ref:`auditing event <auditing>` ``gc.get_referents`` with "
"argument ``objs``."
msgstr ""
"Levanta um :ref:`evento de auditoria <auditing>` ``gc.get_referents`` com o "
"argumento ``objs``."

#: ../../library/gc.rst:166
msgid ""
"Returns ``True`` if the object is currently tracked by the garbage "
"collector, ``False`` otherwise.  As a general rule, instances of atomic "
"types aren't tracked and instances of non-atomic types (containers, user-"
"defined objects...) are.  However, some type-specific optimizations can be "
"present in order to suppress the garbage collector footprint of simple "
"instances (e.g. dicts containing only atomic keys and values)::"
msgstr ""
"Retorna ``True`` se o objeto está atualmente rastreado pelo coletor de lixo, "
"``False`` caso contrário. Como regra geral, as instâncias de tipos atômicos "
"não são rastreadas e as instâncias de tipos não atômicos (contêineres, "
"objetos definidos pelo usuário...) são. No entanto, algumas otimizações "
"específicas do tipo podem estar presentes para suprimir a pegada do coletor "
"de lixo de instâncias simples (por exemplo, dicts contendo apenas chaves e "
"valores atômicos)::"

#: ../../library/gc.rst:173
msgid ""
">>> gc.is_tracked(0)\n"
"False\n"
">>> gc.is_tracked(\"a\")\n"
"False\n"
">>> gc.is_tracked([])\n"
"True\n"
">>> gc.is_tracked({})\n"
"False\n"
">>> gc.is_tracked({\"a\": 1})\n"
"False\n"
">>> gc.is_tracked({\"a\": []})\n"
"True"
msgstr ""
">>> gc.is_tracked(0)\n"
"False\n"
">>> gc.is_tracked(\"a\")\n"
"False\n"
">>> gc.is_tracked([])\n"
"True\n"
">>> gc.is_tracked({})\n"
"False\n"
">>> gc.is_tracked({\"a\": 1})\n"
"False\n"
">>> gc.is_tracked({\"a\": []})\n"
"True"

#: ../../library/gc.rst:191
msgid ""
"Returns ``True`` if the given object has been finalized by the garbage "
"collector, ``False`` otherwise. ::"
msgstr ""
"Retorna ``True`` se o objeto fornecido foi finalizado pelo coletor de lixo, "
"``False`` caso contrário. ::"

#: ../../library/gc.rst:194
msgid ""
">>> x = None\n"
">>> class Lazarus:\n"
"...     def __del__(self):\n"
"...         global x\n"
"...         x = self\n"
"...\n"
">>> lazarus = Lazarus()\n"
">>> gc.is_finalized(lazarus)\n"
"False\n"
">>> del lazarus\n"
">>> gc.is_finalized(x)\n"
"True"
msgstr ""
">>> x = None\n"
">>> class Lazarus:\n"
"...     def __del__(self):\n"
"...         global x\n"
"...         x = self\n"
"...\n"
">>> lazarus = Lazarus()\n"
">>> gc.is_finalized(lazarus)\n"
"False\n"
">>> del lazarus\n"
">>> gc.is_finalized(x)\n"
"True"

#: ../../library/gc.rst:212
msgid ""
"Freeze all the objects tracked by the garbage collector; move them to a "
"permanent generation and ignore them in all the future collections."
msgstr ""
"Congela todos os objetos rastreados pelo coletor de lixo; move-os para uma "
"geração permanente e ignora-os em todas as coleções futuras."

#: ../../library/gc.rst:215
msgid ""
"If a process will ``fork()`` without ``exec()``, avoiding unnecessary copy-"
"on-write in child processes will maximize memory sharing and reduce overall "
"memory usage. This requires both avoiding creation of freed \"holes\" in "
"memory pages in the parent process and ensuring that GC collections in child "
"processes won't touch the ``gc_refs`` counter of long-lived objects "
"originating in the parent process. To accomplish both, call ``gc.disable()`` "
"early in the parent process, ``gc.freeze()`` right before ``fork()``, and "
"``gc.enable()`` early in child processes."
msgstr ""
"Se um processo for ``fork()`` sem ``exec()``, evitar cópia em gravação (copy-"
"on-write) desnecessário em processos filho maximizará o compartilhamento de "
"memória e reduzirá o uso geral de memória. Isso requer evitar a criação de "
"\"buracos\" liberados nas páginas de memória no processo pai e garantir que "
"as coleções GC nos processos filho não toquem no contador ``gc_refs`` de "
"objetos de vida longa originados no processo pai. Para realizar ambos, chame "
"``gc.disable()`` no início do processo pai, ``gc.freeze()`` logo antes de "
"``fork()`` e ``gc.enable()`` no início em processos filhos."

#: ../../library/gc.rst:229
msgid ""
"Unfreeze the objects in the permanent generation, put them back into the "
"oldest generation."
msgstr ""
"Descongela os objetos na geração permanente, coloca-os de volta na geração "
"mais antiga."

#: ../../library/gc.rst:237
msgid "Return the number of objects in the permanent generation."
msgstr "Retorna o número de objetos na geração permanente."

#: ../../library/gc.rst:242
msgid ""
"The following variables are provided for read-only access (you can mutate "
"the values but should not rebind them):"
msgstr ""
"As seguintes variáveis são fornecidas para acesso somente leitura (você pode "
"alterar os valores, mas não deve revinculá-los):"

#: ../../library/gc.rst:247
msgid ""
"A list of objects which the collector found to be unreachable but could not "
"be freed (uncollectable objects).  Starting with Python 3.4, this list "
"should be empty most of the time, except when using instances of C extension "
"types with a non-``NULL`` ``tp_del`` slot."
msgstr ""
"Uma lista de objetos que o coletor considerou inacessíveis, mas não puderam "
"ser liberados (objetos não coletáveis). A partir do Python 3.4, esta lista "
"deve estar vazia na maioria das vezes, exceto ao usar instâncias de tipos de "
"extensão C com um slot ``tp_del`` não-``NULL``."

#: ../../library/gc.rst:252
msgid ""
"If :const:`DEBUG_SAVEALL` is set, then all unreachable objects will be added "
"to this list rather than freed."
msgstr ""
"Se :const:`DEBUG_SAVEALL` for definido, todos os objetos inacessíveis serão "
"adicionados a esta lista ao invés de liberados."

#: ../../library/gc.rst:255
msgid ""
"If this list is non-empty at :term:`interpreter shutdown`, a :exc:"
"`ResourceWarning` is emitted, which is silent by default.  If :const:"
"`DEBUG_UNCOLLECTABLE` is set, in addition all uncollectable objects are "
"printed."
msgstr ""
"Se esta lista não estiver vazia no :term:`desligamento do interpretador`, "
"um :exc:`ResourceWarning` é emitido, que é silencioso por padrão. Se :const:"
"`DEBUG_UNCOLLECTABLE` for definido, além disso, todos os objetos não "
"coletáveis serão impressos."

#: ../../library/gc.rst:261
msgid ""
"Following :pep:`442`, objects with a :meth:`~object.__del__` method don't "
"end up in :data:`gc.garbage` anymore."
msgstr ""
"Seguindo a :pep:`442`, objetos com um método :meth:`~object.__del__` não vão "
"mais para :data:`gc.garbage`."

#: ../../library/gc.rst:267
msgid ""
"A list of callbacks that will be invoked by the garbage collector before and "
"after collection.  The callbacks will be called with two arguments, *phase* "
"and *info*."
msgstr ""
"Uma lista de retornos de chamada que serão invocados pelo coletor de lixo "
"antes e depois da coleta. As funções de retorno serão chamadas com dois "
"argumentos, *phase* e *info*."

#: ../../library/gc.rst:271
msgid "*phase* can be one of two values:"
msgstr "*phase* pode ser um dos dois valores:"

#: ../../library/gc.rst:273
msgid "\"start\": The garbage collection is about to start."
msgstr "\"start\": A coleta de lixo está prestes a começar."

#: ../../library/gc.rst:275
msgid "\"stop\": The garbage collection has finished."
msgstr "\"stop\": A coleta de lixo terminou."

#: ../../library/gc.rst:277
msgid ""
"*info* is a dict providing more information for the callback.  The following "
"keys are currently defined:"
msgstr ""
"*info* é um ditado que fornece mais informações para a função de retorno. As "
"seguintes chaves estão atualmente definidas:"

#: ../../library/gc.rst:280
msgid "\"generation\": The oldest generation being collected."
msgstr "\"generation\": A geração mais antiga sendo coletada."

#: ../../library/gc.rst:282
msgid ""
"\"collected\": When *phase* is \"stop\", the number of objects successfully "
"collected."
msgstr ""
"\"collected\": Quando *phase* é \"stop\", o número de objetos coletados com "
"sucesso."

#: ../../library/gc.rst:285
msgid ""
"\"uncollectable\": When *phase* is \"stop\", the number of objects that "
"could not be collected and were put in :data:`garbage`."
msgstr ""
"\"uncollectable\": Quando *phase* é \"stop\", o número de objetos que não "
"puderam ser coletados e foram colocados em :data:`garbage`."

#: ../../library/gc.rst:288
msgid ""
"Applications can add their own callbacks to this list.  The primary use "
"cases are:"
msgstr ""
"As aplicações podem adicionar suas próprias funções de retorno a essa lista. "
"Os principais casos de uso são:"

#: ../../library/gc.rst:291
msgid ""
"Gathering statistics about garbage collection, such as how often various "
"generations are collected, and how long the collection takes."
msgstr ""
"Reunir estatísticas sobre coleta de lixo, como com que frequência várias "
"gerações são coletadas e quanto tempo leva a coleta."

#: ../../library/gc.rst:295
msgid ""
"Allowing applications to identify and clear their own uncollectable types "
"when they appear in :data:`garbage`."
msgstr ""
"Permitindo que os aplicativos identifiquem e limpem seus próprios tipos não "
"colecionáveis quando eles aparecem em :data:`garbage`."

#: ../../library/gc.rst:301
msgid "The following constants are provided for use with :func:`set_debug`:"
msgstr "As seguintes constantes são fornecidas para uso com :func:`set_debug`:"

#: ../../library/gc.rst:306
msgid ""
"Print statistics during collection.  This information can be useful when "
"tuning the collection frequency."
msgstr ""
"Imprimir estatísticas durante a coleta. Esta informação pode ser útil ao "
"sintonizar a frequência de coleta."

#: ../../library/gc.rst:312
msgid "Print information on collectable objects found."
msgstr "Imprimir informações sobre objetos colecionáveis encontrados."

#: ../../library/gc.rst:317
msgid ""
"Print information of uncollectable objects found (objects which are not "
"reachable but cannot be freed by the collector).  These objects will be "
"added to the ``garbage`` list."
msgstr ""
"Imprime informações de objetos não colecionáveis encontrados (objetos que "
"não são alcançáveis, mas não podem ser liberados pelo coletor). Esses "
"objetos serão adicionados à lista ``garbage``."

#: ../../library/gc.rst:321
msgid ""
"Also print the contents of the :data:`garbage` list at :term:`interpreter "
"shutdown`, if it isn't empty."
msgstr ""
"Imprime também o conteúdo da lista :data:`garbage` em :term:`desligamento do "
"interpretador`, se não estiver vazia."

#: ../../library/gc.rst:327
msgid ""
"When set, all unreachable objects found will be appended to *garbage* rather "
"than being freed.  This can be useful for debugging a leaking program."
msgstr ""
"Quando definido, todos os objetos inacessíveis encontrados serão anexados ao "
"*lixo* em vez de serem liberados. Isso pode ser útil para depurar um "
"programa com vazamento."

#: ../../library/gc.rst:333
msgid ""
"The debugging flags necessary for the collector to print information about a "
"leaking program (equal to ``DEBUG_COLLECTABLE | DEBUG_UNCOLLECTABLE | "
"DEBUG_SAVEALL``)."
msgstr ""
"Os sinalizadores de depuração necessários para o coletor imprimir "
"informações sobre um programa com vazamento (igual a ``DEBUG_COLLECTABLE | "
"DEBUG_UNCOLLECTABLE | DEBUG_SAVEALL``)."
