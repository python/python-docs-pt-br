# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-11 16:41+0000\n"
"PO-Revision-Date: 2023-05-24 02:15+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/enum.rst:2
msgid ":mod:`enum` --- Support for enumerations"
msgstr ":mod:`enum` --- Suporte a enumerações"

#: ../../library/enum.rst:14
msgid "**Source code:** :source:`Lib/enum.py`"
msgstr "**Código-fonte:** :source:`Lib/enum.py`"

#: ../../library/enum.rst:18
msgid ""
"This page contains the API reference information. For tutorial information "
"and discussion of more advanced topics, see"
msgstr ""
"Esta página contêm informação de referência da API. Para tutorial e "
"discussão de tópicos mais avançados, consulte"

#: ../../library/enum.rst:21
msgid ":ref:`Basic Tutorial <enum-basic-tutorial>`"
msgstr ":ref:`Tutorial básico <enum-basic-tutorial>`"

#: ../../library/enum.rst:22
msgid ":ref:`Advanced Tutorial <enum-advanced-tutorial>`"
msgstr ":ref:`Tutorial avançado <enum-advanced-tutorial>`"

#: ../../library/enum.rst:23
msgid ":ref:`Enum Cookbook <enum-cookbook>`"
msgstr ":ref:`Livro de receitas de enum <enum-cookbook>`"

#: ../../library/enum.rst:27
msgid "An enumeration:"
msgstr "Uma enumeração:"

#: ../../library/enum.rst:29
msgid "is a set of symbolic names (members) bound to unique values"
msgstr ""
"é um conjunto de nomes simbólicos (membros) vinculados a valores únicos"

#: ../../library/enum.rst:30
msgid ""
"can be iterated over to return its canonical (i.e. non-alias) members in "
"definition order"
msgstr ""
"pode ser iterado para retornar seus membros canônicos (ou seja, não "
"incluindo apelidos) na ordem de definição"

#: ../../library/enum.rst:32
msgid "uses *call* syntax to return members by value"
msgstr "usa a sintaxe *call* para retornar membros por valor"

#: ../../library/enum.rst:33
msgid "uses *index* syntax to return members by name"
msgstr "usa a sintaxe *index* para retornar membros por nome"

#: ../../library/enum.rst:35
msgid ""
"Enumerations are created either by using :keyword:`class` syntax, or by "
"using function-call syntax::"
msgstr ""
"As enumerações são criadas usando a sintaxe de :keyword:`class` ou usando a "
"sintaxe de chamada de função::"

#: ../../library/enum.rst:49
msgid ""
"Even though we can use :keyword:`class` syntax to create Enums, Enums are "
"not normal Python classes.  See :ref:`How are Enums different? <enum-class-"
"differences>` for more details."
msgstr ""
"Embora possamos usar a sintaxe :keyword:`class` para criar Enums, Enums não "
"são classes Python normais. Veja :ref:`Como Enums são diferentes? <enum-"
"class-differences>` para mais detalhes."

#: ../../library/enum.rst:53
msgid "Nomenclature"
msgstr "Nomenclatura"

#: ../../library/enum.rst:55
msgid "The class :class:`!Color` is an *enumeration* (or *enum*)"
msgstr "A classe :class:`!Color` é uma *enumeração* (ou *enum*)"

#: ../../library/enum.rst:56
msgid ""
"The attributes :attr:`!Color.RED`, :attr:`!Color.GREEN`, etc., are "
"*enumeration members* (or *members*) and are functionally constants."
msgstr ""
"Os atributos :attr:`!Color.RED`, :attr:`!Color.GREEN`, etc., são *membros de "
"enumeração* (ou *membros*) e são constantes funcionalmente."

#: ../../library/enum.rst:58
msgid ""
"The enum members have *names* and *values* (the name of :attr:`!Color.RED` "
"is ``RED``, the value of :attr:`!Color.BLUE` is ``3``, etc.)"
msgstr ""
"Os membros enum têm *nomes* e *valores* (o nome de :attr:`!Color.RED` é "
"``RED``, o valor de :attr:`!Color.BLUE` é ``3``, etc.)"

#: ../../library/enum.rst:65
msgid "Module Contents"
msgstr "Conteúdo do módulo"

#: ../../library/enum.rst:67
msgid ":class:`EnumType`"
msgstr ":class:`EnumType`"

#: ../../library/enum.rst:69
msgid "The ``type`` for Enum and its subclasses."
msgstr "O ``type`` para Enum e suas subclasses."

#: ../../library/enum.rst:71
msgid ":class:`Enum`"
msgstr ":class:`Enum`"

#: ../../library/enum.rst:73
msgid "Base class for creating enumerated constants."
msgstr "Classe base para criação de constantes enumeradas."

#: ../../library/enum.rst:75
msgid ":class:`IntEnum`"
msgstr ":class:`IntEnum`"

#: ../../library/enum.rst:77
msgid ""
"Base class for creating enumerated constants that are also subclasses of :"
"class:`int`. (`Notes`_)"
msgstr ""
"Classe base para criar constantes enumeradas que também são subclasses de :"
"class:`int`. (`Notas`_)"

#: ../../library/enum.rst:80
msgid ":class:`StrEnum`"
msgstr ":class:`StrEnum`"

#: ../../library/enum.rst:82
msgid ""
"Base class for creating enumerated constants that are also subclasses of :"
"class:`str`. (`Notes`_)"
msgstr ""
"Classe base para criar constantes enumeradas que também são subclasses de :"
"class:`str`. (`Notas`_)"

#: ../../library/enum.rst:85
msgid ":class:`Flag`"
msgstr ":class:`Flag`"

#: ../../library/enum.rst:87
msgid ""
"Base class for creating enumerated constants that can be combined using the "
"bitwise operations without losing their :class:`Flag` membership."
msgstr ""
"Classe base para criar constantes enumeradas que podem ser combinadas usando "
"operações bit a bit sem perder sua associação :class:`Flag`."

#: ../../library/enum.rst:90
msgid ":class:`IntFlag`"
msgstr ":class:`IntFlag`"

#: ../../library/enum.rst:92
msgid ""
"Base class for creating enumerated constants that can be combined using the "
"bitwise operators without losing their :class:`IntFlag` membership. :class:"
"`IntFlag` members are also subclasses of :class:`int`. (`Notes`_)"
msgstr ""
"Classe base para criar constantes enumeradas que podem ser combinadas usando "
"operadores bit a bit sem perder sua associação :class:`IntFlag`. Membros de :"
"class:`IntFlag` também são subclasses de :class:`int`. (`Notas`_)"

#: ../../library/enum.rst:96
msgid ":class:`ReprEnum`"
msgstr ":class:`ReprEnum`"

#: ../../library/enum.rst:98
msgid ""
"Used by :class:`IntEnum`, :class:`StrEnum`, and :class:`IntFlag` to keep "
"the :class:`str() <str>` of the mixed-in type."
msgstr ""
"Usado por :class:`IntEnum`, :class:`StrEnum` e :class:`IntFlag` para manter "
"o :class:`str() <str>` do tipo misto."

#: ../../library/enum.rst:101
msgid ":class:`EnumCheck`"
msgstr ":class:`EnumCheck`"

#: ../../library/enum.rst:103
msgid ""
"An enumeration with the values ``CONTINUOUS``, ``NAMED_FLAGS``, and "
"``UNIQUE``, for use with :func:`verify` to ensure various constraints are "
"met by a given enumeration."
msgstr ""
"Uma enumeração com os valores ``CONTINUOUS``, ``NAMED_FLAGS`` e ``UNIQUE``, "
"para uso com :func:`verify` para garantir que várias restrições sejam "
"atendidas por uma determinada enumeração."

#: ../../library/enum.rst:107
msgid ":class:`FlagBoundary`"
msgstr ":class:`FlagBoundary`"

#: ../../library/enum.rst:109
msgid ""
"An enumeration with the values ``STRICT``, ``CONFORM``, ``EJECT``, and "
"``KEEP`` which allows for more fine-grained control over how invalid values "
"are dealt with in an enumeration."
msgstr ""
"Uma enumeração com os valores ``STRICT``, ``CONFORM``, ``EJECT`` e ``KEEP`` "
"que permite um controle mais refinado sobre como valores inválidos são "
"tratados em uma enumeração."

#: ../../library/enum.rst:113
msgid ":class:`auto`"
msgstr ":class:`auto`"

#: ../../library/enum.rst:115
msgid ""
"Instances are replaced with an appropriate value for Enum members. :class:"
"`StrEnum` defaults to the lower-cased version of the member name, while "
"other Enums default to 1 and increase from there."
msgstr ""
"As instâncias são substituídas por um valor apropriado para membros Enum. :"
"class:`StrEnum` assume como padrão a versão em minúsculas do nome do membro, "
"enquanto outros Enums assumem como padrão 1 e aumentam a partir daí."

#: ../../library/enum.rst:119
msgid ":func:`~enum.property`"
msgstr ":func:`~enum.property`"

#: ../../library/enum.rst:121
msgid ""
"Allows :class:`Enum` members to have attributes without conflicting with "
"member names."
msgstr ""

#: ../../library/enum.rst:124
msgid ":func:`unique`"
msgstr ":func:`unique`"

#: ../../library/enum.rst:126
msgid ""
"Enum class decorator that ensures only one name is bound to any one value."
msgstr ""
"Decorador de classe Enum que garante que apenas um nome seja vinculado a "
"cada valor."

#: ../../library/enum.rst:128
msgid ":func:`verify`"
msgstr ":func:`verify`"

#: ../../library/enum.rst:130
msgid ""
"Enum class decorator that checks user-selectable constraints on an "
"enumeration."
msgstr ""
"Decorador de classe Enum que verifica restrições selecionáveis pelo usuário "
"em uma enumeração."

#: ../../library/enum.rst:133
msgid ":func:`member`"
msgstr ":func:`member`"

#: ../../library/enum.rst:135
msgid "Make ``obj`` a member.  Can be used as a decorator."
msgstr "Torna ``obj`` um membro. Pode ser usado como um decorador."

#: ../../library/enum.rst:137
msgid ":func:`nonmember`"
msgstr ":func:`nonmember`"

#: ../../library/enum.rst:139
msgid "Do not make ``obj`` a member.  Can be used as a decorator."
msgstr "Não torna ``obj`` um membro. Pode ser usado como um decorador."

#: ../../library/enum.rst:141
msgid ":func:`global_enum`"
msgstr ":func:`global_enum`"

#: ../../library/enum.rst:143
msgid ""
"Modify the :class:`str() <str>` and :func:`repr` of an enum to show its "
"members as belonging to the module instead of its class, and export the enum "
"members to the global namespace."
msgstr ""
"Modifica :class:`str() <str>` e :func:`repr` de uma enumeração para mostrar "
"seus membros como pertencentes ao módulo em vez de sua classe, e exporta os "
"membros da enumeração para o espaço de nomes global."

#: ../../library/enum.rst:147
msgid ":func:`show_flag_values`"
msgstr ":func:`show_flag_values`"

#: ../../library/enum.rst:149
msgid "Return a list of all power-of-two integers contained in a flag."
msgstr ""
"Retorna uma lista de todos os inteiros de potência de dois contidos em um "
"sinalizador."

#: ../../library/enum.rst:152
msgid "``Flag``, ``IntFlag``, ``auto``"
msgstr "``Flag``, ``IntFlag``, ``auto``"

#: ../../library/enum.rst:153
msgid ""
"``StrEnum``, ``EnumCheck``, ``ReprEnum``, ``FlagBoundary``, ``property``, "
"``member``, ``nonmember``, ``global_enum``, ``show_flag_values``"
msgstr ""
"``StrEnum``, ``EnumCheck``, ``ReprEnum``, ``FlagBoundary``, ``property``, "
"``member``, ``nonmember``, ``global_enum``, ``show_flag_values``"

#: ../../library/enum.rst:158
msgid "Data Types"
msgstr "Tipos de Dados"

#: ../../library/enum.rst:163
msgid ""
"*EnumType* is the :term:`metaclass` for *enum* enumerations.  It is possible "
"to subclass *EnumType* -- see :ref:`Subclassing EnumType <enumtype-"
"examples>` for details."
msgstr ""
"*EnumType* é a :term:`metaclasse` para enumerações *enum*. É possível criar "
"subclasse de *EnumType* -- veja :ref:`Criando subclasses de EnumType "
"<enumtype-examples>` para detalhes."

#: ../../library/enum.rst:167
msgid ""
"*EnumType* is responsible for setting the correct :meth:`!__repr__`, :meth:`!"
"__str__`, :meth:`!__format__`, and :meth:`!__reduce__` methods on the final "
"*enum*, as well as creating the enum members, properly handling duplicates, "
"providing iteration over the enum class, etc."
msgstr ""
"*EnumType* отвечает за установку правильных методов :meth:`!__repr__`, :meth:"
"`!__str__`, :meth:`!__format__` и :meth:`!__repr__` для конечного *enum*, "
"как а также создание членов перечисления, правильная обработка дубликатов, "
"обеспечение итерации по классу перечисления и т. д."

#: ../../library/enum.rst:174
msgid "This method is called in two different ways:"
msgstr "Этот метод вызывается двумя разными способами:"

#: ../../library/enum.rst:176
msgid "to look up an existing member:"
msgstr "чтобы найти существующего участника:"

#: ../../library/enum.rst:0
msgid "cls"
msgstr "cls"

#: ../../library/enum.rst:178 ../../library/enum.rst:184
msgid "The enum class being called."
msgstr "Вызываемый класс перечисления."

#: ../../library/enum.rst:0
msgid "value"
msgstr "valor"

#: ../../library/enum.rst:179
msgid "The value to lookup."
msgstr "Значение для поиска."

#: ../../library/enum.rst:181
msgid ""
"to use the ``cls`` enum to create a new enum (only if the existing enum does "
"not have any members):"
msgstr ""
"чтобы использовать перечисление cls для создания нового перечисления (только "
"если существующее перечисление не имеет членов):"

#: ../../library/enum.rst:185
msgid "The name of the new Enum to create."
msgstr "Имя нового создаваемого Enum."

#: ../../library/enum.rst:0
msgid "names"
msgstr "nomes"

#: ../../library/enum.rst:186
msgid "The names/values of the members for the new Enum."
msgstr "Имена/значения членов нового Enum."

#: ../../library/enum.rst:0
msgid "module"
msgstr "módulo"

#: ../../library/enum.rst:187
msgid "The name of the module the new Enum is created in."
msgstr "Имя модуля, в котором создается новый Enum."

#: ../../library/enum.rst:0
msgid "qualname"
msgstr "qualname"

#: ../../library/enum.rst:188
msgid "The actual location in the module where this Enum can be found."
msgstr "Фактическое местоположение в модуле, где можно найти этот Enum."

#: ../../library/enum.rst:0
msgid "type"
msgstr "tipo"

#: ../../library/enum.rst:189
msgid "A mix-in type for the new Enum."
msgstr "Тип примеси для нового Enum."

#: ../../library/enum.rst:0
msgid "start"
msgstr "start"

#: ../../library/enum.rst:190
msgid "The first integer value for the Enum (used by :class:`auto`)."
msgstr "Первое целочисленное значение Enum (используется :class:`auto`)."

#: ../../library/enum.rst:0
msgid "boundary"
msgstr "граница"

#: ../../library/enum.rst:191
msgid ""
"How to handle out-of-range values from bit operations (:class:`Flag` only)."
msgstr ""
"Как обрабатывать значения, выходящие за пределы диапазона, в результате "
"битовых операций (только:class:`Flag`)."

#: ../../library/enum.rst:195
msgid "Returns ``True`` if member belongs to the ``cls``::"
msgstr "Возвращает ``True``, если член принадлежит ``cls``::"

#: ../../library/enum.rst:203
msgid ""
"In Python 3.12 it will be possible to check for member values and not just "
"members; until then, a ``TypeError`` will be raised if a non-Enum-member is "
"used in a containment check."
msgstr ""

#: ../../library/enum.rst:209
msgid ""
"Returns ``['__class__', '__doc__', '__members__', '__module__']`` and the "
"names of the members in *cls*::"
msgstr ""
"Возвращает ``['__class__', '__doc__', '__members__', '__module__']`` и имена "
"членов в *cls*::"

#: ../../library/enum.rst:217
msgid ""
"Returns the Enum member in *cls* matching *name*, or raises an :exc:"
"`AttributeError`::"
msgstr ""

#: ../../library/enum.rst:224
msgid ""
"Returns the Enum member in *cls* matching *name*, or raises a :exc:"
"`KeyError`::"
msgstr ""
"Возвращает член Enum в *cls*, соответствующий *name*, или вызывает :exc:"
"`KeyError`::"

#: ../../library/enum.rst:231
msgid "Returns each member in *cls* in definition order::"
msgstr "Возвращает каждого члена в *cls* в порядке определения::"

#: ../../library/enum.rst:238
msgid "Returns the number of member in *cls*::"
msgstr "Возвращает количество членов в *cls*::"

#: ../../library/enum.rst:245
msgid "Returns each member in *cls* in reverse definition order::"
msgstr "Возвращает каждого члена в *cls* в обратном порядке определения::"

#: ../../library/enum.rst:252
msgid "Before 3.11 ``enum`` used ``EnumMeta`` type, which is kept as an alias."
msgstr ""
"До версии 3.11 enum использовал тип EnumMeta, который сохранялся как "
"псевдоним."

#: ../../library/enum.rst:257
msgid "*Enum* is the base class for all *enum* enumerations."
msgstr "*Enum* — это базовый класс для всех перечислений *enum*."

#: ../../library/enum.rst:261
msgid "The name used to define the ``Enum`` member::"
msgstr "Имя, используемое для определения члена ``Enum``::"

#: ../../library/enum.rst:268
msgid "The value given to the ``Enum`` member::"
msgstr "Значение, присвоенное члену ``Enum``::"

#: ../../library/enum.rst:273 ../../library/enum.rst:293
msgid "Value of the member, can be set in :meth:`~object.__new__`."
msgstr ""

#: ../../library/enum.rst:275
msgid "Enum member values"
msgstr "Значення члена Enum"

#: ../../library/enum.rst:277
msgid ""
"Member values can be anything: :class:`int`, :class:`str`, etc.  If the "
"exact value is unimportant you may use :class:`auto` instances and an "
"appropriate value will be chosen for you.  See :class:`auto` for the details."
msgstr ""
"Значения членов могут быть любыми: :class:`int`, :class:`str` и т. д. Если "
"точное значение не имеет значения, вы можете использовать экземпляры :class:"
"`auto`, и подходящее значение будет выбрано за вас. Подробности смотрите в :"
"class:`auto`."

#: ../../library/enum.rst:282
msgid ""
"While mutable/unhashable values, such as :class:`dict`, :class:`list` or a "
"mutable :class:`~dataclasses.dataclass`, can be used, they will have a "
"quadratic performance impact during creation relative to the total number of "
"mutable/unhashable values in the enum."
msgstr ""
"Хотя можно использовать изменяемые/нехэшируемые значения, такие как :class:"
"`dict`, :class:`list` или изменяемый :class:`~dataclasses.dataclass`, они "
"будут иметь квадратичное влияние на производительность во время создания "
"относительно общее количество изменяемых/нехэшируемых значений в "
"перечислении."

#: ../../library/enum.rst:289
msgid "Name of the member."
msgstr "Имя участника."

#: ../../library/enum.rst:297
msgid ""
"No longer used, kept for backward compatibility. (class attribute, removed "
"during class creation)."
msgstr ""
"Больше не используется, сохранено для обратной совместимости. (атрибут "
"класса, удаленный при создании класса)."

#: ../../library/enum.rst:302
msgid ""
"``_ignore_`` is only used during creation and is removed from the "
"enumeration once creation is complete."
msgstr ""
"``_ignore_`` используется только во время создания и удаляется из "
"перечисления после завершения создания."

#: ../../library/enum.rst:305
msgid ""
"``_ignore_`` is a list of names that will not become members, and whose "
"names will also be removed from the completed enumeration.  See :ref:"
"`TimePeriod <enum-time-period>` for an example."
msgstr ""
"``_ignore_`` — это список имен, которые не станут членами и чьи имена также "
"будут удалены из завершенного перечисления. Пример см. в :ref:`TimePeriod "
"<enum-time- period>`."

#: ../../library/enum.rst:311
msgid ""
"Returns ``['__class__', '__doc__', '__module__', 'name', 'value']`` and any "
"public methods defined on *self.__class__*::"
msgstr ""
"Возвращает ``['__class__', '__doc__', '__module__', 'name', 'value']`` и "
"любые общедоступные методы, определенные в *self.__class__*::"

#: ../../library/enum.rst:0
msgid "name"
msgstr "nome"

#: ../../library/enum.rst:331
msgid "The name of the member being defined (e.g. 'RED')."
msgstr "Имя определяемого члена (например, «RED»)."

#: ../../library/enum.rst:332
msgid "The start value for the Enum; the default is 1."
msgstr "Начальное значение Enum; значение по умолчанию — 1."

#: ../../library/enum.rst:0
msgid "count"
msgstr "count"

#: ../../library/enum.rst:333
msgid "The number of members currently defined, not including this one."
msgstr "Количество членов, определенное на данный момент, не считая этого."

#: ../../library/enum.rst:0
msgid "last_values"
msgstr "last_values"

#: ../../library/enum.rst:334
msgid "A list of the previous values."
msgstr "Список предыдущих значений."

#: ../../library/enum.rst:336
msgid ""
"A *staticmethod* that is used to determine the next value returned by :class:"
"`auto`::"
msgstr ""
"*статический метод*, который используется для определения следующего "
"значения, возвращаемого :class:`auto`::"

#: ../../library/enum.rst:351
msgid ""
"A *classmethod* that is used to further configure subsequent subclasses. By "
"default, does nothing."
msgstr ""
"*метод класса*, который используется для дальнейшей настройки последующих "
"подклассов. По умолчанию ничего не делает."

#: ../../library/enum.rst:356
msgid ""
"A *classmethod* for looking up values not found in *cls*.  By default it "
"does nothing, but can be overridden to implement custom search behavior::"
msgstr ""
"*метод класса* для поиска значений, не найденных в *cls*. По умолчанию он "
"ничего не делает, но его можно переопределить для реализации "
"пользовательского поведения поиска::"

#: ../../library/enum.rst:377
msgid ""
"Returns the string used for *repr()* calls.  By default, returns the *Enum* "
"name, member name, and value, but can be overridden::"
msgstr ""
"Возвращает строку, используемую для вызовов *repr()*. По умолчанию "
"возвращает имя *Enum*, имя элемента и значение, но их можно переопределить::"

#: ../../library/enum.rst:392
msgid ""
"Returns the string used for *str()* calls.  By default, returns the *Enum* "
"name and member name, but can be overridden::"
msgstr ""
"Возвращает строку, используемую для вызовов *str()*. По умолчанию возвращает "
"имя *Enum* и имя члена, но их можно переопределить::"

#: ../../library/enum.rst:406
msgid ""
"Returns the string used for *format()* and *f-string* calls.  By default, "
"returns :meth:`__str__` return value, but can be overridden::"
msgstr ""
"Возвращает строку, используемую для вызовов *format()* и *f-string*. По "
"умолчанию возвращает возвращаемое значение :meth:`__str__`, но его можно "
"переопределить::"

#: ../../library/enum.rst:420
msgid ""
"Using :class:`auto` with :class:`Enum` results in integers of increasing "
"value, starting with ``1``."
msgstr ""
"Использование :class:`auto` с :class:`Enum` приводит к увеличению целых "
"чисел, начиная с ``1``."

#: ../../library/enum.rst:426
msgid ""
"*IntEnum* is the same as *Enum*, but its members are also integers and can "
"be used anywhere that an integer can be used.  If any integer operation is "
"performed with an *IntEnum* member, the resulting value loses its "
"enumeration status."
msgstr ""
"*IntEnum* аналогичен *Enum*, но его члены также являются целыми числами и "
"могут использоваться везде, где можно использовать целое число. Если с "
"элементом *IntEnum* выполняется какая-либо целочисленная операция, "
"результирующее значение теряет свой статус перечисления."

#: ../../library/enum.rst:447
msgid ""
"Using :class:`auto` with :class:`IntEnum` results in integers of increasing "
"value, starting with ``1``."
msgstr ""
"Использование :class:`auto` с :class:`IntEnum` приводит к увеличению целых "
"чисел, начиная с ``1``."

#: ../../library/enum.rst:450
msgid ""
":meth:`~object.__str__` is now :meth:`!int.__str__` to better support the "
"*replacement of existing constants* use-case. :meth:`~object.__format__` was "
"already :meth:`!int.__format__` for that same reason."
msgstr ""
":meth:`~object.__str__` теперь называется :meth:`!int.__str__` для лучшей "
"поддержки варианта использования *замены существующих констант*. :meth:"
"`~object.__format__` уже был :meth:`!int.__format__` по той же причине."

#: ../../library/enum.rst:457
msgid ""
"*StrEnum* is the same as *Enum*, but its members are also strings and can be "
"used in most of the same places that a string can be used.  The result of "
"any string operation performed on or with a *StrEnum* member is not part of "
"the enumeration."
msgstr ""
"*StrEnum* — то же самое, что *Enum*, но его члены также являются строками и "
"могут использоваться в большинстве тех же мест, где можно использовать "
"строку. Результат любой строковой операции, выполняемой с элементом "
"*StrEnum*, не является частью перечисления."

#: ../../library/enum.rst:463
msgid ""
"There are places in the stdlib that check for an exact :class:`str` instead "
"of a :class:`str` subclass (i.e. ``type(unknown) == str`` instead of "
"``isinstance(unknown, str)``), and in those locations you will need to use "
"``str(StrEnum.member)``."
msgstr ""
"В stdlib есть места, которые проверяют точный :class:`str` вместо подкласса :"
"class:`str` (т.е. ``type(unknown) == str`` вместо ``isinstance(unknown, str) "
"``), и в этих местах вам нужно будет использовать ``str(StrEnum.member)``."

#: ../../library/enum.rst:470
msgid ""
"Using :class:`auto` with :class:`StrEnum` results in the lower-cased member "
"name as the value."
msgstr ""
"Использование :class:`auto` с :class:`StrEnum` приводит к тому, что имя "
"элемента в нижнем регистре становится значением."

#: ../../library/enum.rst:475
msgid ""
":meth:`~object.__str__` is :meth:`!str.__str__` to better support the "
"*replacement of existing constants* use-case.  :meth:`~object.__format__` is "
"likewise :meth:`!str.__format__` for that same reason."
msgstr ""
":meth:`~object.__str__` — это :meth:`!str.__str__` для лучшей поддержки "
"варианта использования *замены существующих констант*. :meth:`~object."
"__format__` аналогично :meth:`!str.__format__` по той же причине."

#: ../../library/enum.rst:483
msgid ""
"*Flag* members support the bitwise operators ``&`` (*AND*), ``|`` (*OR*), "
"``^`` (*XOR*), and ``~`` (*INVERT*); the results of those operators are "
"members of the enumeration."
msgstr ""

#: ../../library/enum.rst:489
msgid "Returns *True* if value is in self::"
msgstr "Возвращает *True*, если значение находится в self::"

#: ../../library/enum.rst:509
msgid "Returns all contained non-alias members::"
msgstr "Возвращает все содержащиеся члены без псевдонимов::"

#: ../../library/enum.rst:520
msgid "Returns number of members in flag::"
msgstr "Возвращает количество членов в флаге::"

#: ../../library/enum.rst:529
msgid "Returns *True* if any members in flag, *False* otherwise::"
msgstr ""
"Возвращает *True*, если есть элементы в флаге, *False* в противном случае::"

#: ../../library/enum.rst:541
msgid "Returns current flag binary or'ed with other::"
msgstr "Возвращает текущий флаг в двоичном виде или с другим::"

#: ../../library/enum.rst:548
msgid "Returns current flag binary and'ed with other::"
msgstr "Возвращает текущий двоичный флаг и объединяет его с другим::"

#: ../../library/enum.rst:557
msgid "Returns current flag binary xor'ed with other::"
msgstr "Возвращает текущий флаг, подвергнутый xor с другим::"

#: ../../library/enum.rst:566
msgid "Returns all the flags in *type(self)* that are not in self::"
msgstr "Возвращает все флаги в *type(self)*, которых нет в self::"

#: ../../library/enum.rst:577
msgid ""
"Function used to format any remaining unnamed numeric values.  Default is "
"the value's repr; common choices are :func:`hex` and :func:`oct`."
msgstr ""
"Функция, используемая для форматирования любых оставшихся безымянных "
"числовых значений. По умолчанию — это представление значения; "
"распространенный выбор: :func:`hex` и :func:`oct`."

#: ../../library/enum.rst:582
msgid ""
"Using :class:`auto` with :class:`Flag` results in integers that are powers "
"of two, starting with ``1``."
msgstr ""
"Использование :class:`auto` с :class:`Flag` приводит к получению целых "
"чисел, которые являются степенями двойки, начиная с ``1``."

#: ../../library/enum.rst:585
msgid "The *repr()* of zero-valued flags has changed.  It is now::"
msgstr "Функция *repr()* флагов с нулевым значением изменилась. Это сейчас::"

#: ../../library/enum.rst:593
msgid ""
"*IntFlag* is the same as *Flag*, but its members are also integers and can "
"be used anywhere that an integer can be used."
msgstr ""
"*IntFlag* аналогичен *Flag*, но его члены также являются целыми числами и "
"могут использоваться везде, где можно использовать целое число."

#: ../../library/enum.rst:606
msgid ""
"If any integer operation is performed with an *IntFlag* member, the result "
"is not an *IntFlag*::"
msgstr ""
"Если с элементом *IntFlag* выполняется какая-либо целочисленная операция, "
"результатом не будет *IntFlag*::"

#: ../../library/enum.rst:612
msgid "If a *Flag* operation is performed with an *IntFlag* member and:"
msgstr "Если операция *Flag* выполняется с элементом *IntFlag* и:"

#: ../../library/enum.rst:614
msgid "the result is a valid *IntFlag*: an *IntFlag* is returned"
msgstr "результатом является действительный *IntFlag*: возвращается *IntFlag*"

#: ../../library/enum.rst:615
msgid ""
"the result is not a valid *IntFlag*: the result depends on the "
"*FlagBoundary* setting"
msgstr ""
"результат не является допустимым *IntFlag*: результат зависит от настройки "
"*FlagBoundary*"

#: ../../library/enum.rst:617
msgid "The *repr()* of unnamed zero-valued flags has changed.  It is now:"
msgstr ""
"Функция *repr()* безымянных флагов с нулевым значением изменилась. Это "
"сейчас:"

#: ../../library/enum.rst:624
msgid ""
"Using :class:`auto` with :class:`IntFlag` results in integers that are "
"powers of two, starting with ``1``."
msgstr ""
"Использование :class:`auto` с :class:`IntFlag` приводит к получению целых "
"чисел, которые являются степенями двойки, начиная с ``1``."

#: ../../library/enum.rst:629
msgid ""
":meth:`~object.__str__` is now :meth:`!int.__str__` to better support the "
"*replacement of existing constants* use-case.  :meth:`~object.__format__` "
"was already :meth:`!int.__format__` for that same reason."
msgstr ""
":meth:`~object.__str__` теперь называется :meth:`!int.__str__` для лучшей "
"поддержки варианта использования *замены существующих констант*. :meth:"
"`~object.__format__` уже был :meth:`!int.__format__` по той же причине."

#: ../../library/enum.rst:633
msgid ""
"Inversion of an :class:`!IntFlag` now returns a positive value that is the "
"union of all flags not in the given flag, rather than a negative value. This "
"matches the existing :class:`Flag` behavior."
msgstr ""
"Инверсия :class:`!IntFlag` теперь возвращает положительное значение, которое "
"представляет собой объединение всех флагов, не входящих в данный флаг, а не "
"отрицательное значение. Это соответствует существующему поведению :class:"
"`Flag`."

#: ../../library/enum.rst:639
msgid ""
":class:`!ReprEnum` uses the :meth:`repr() <Enum.__repr__>` of :class:`Enum`, "
"but the :class:`str() <str>` of the mixed-in data type:"
msgstr ""
":class:`!ReprEnum` использует :meth:`repr() <Enum.__repr__>` из :class:"
"`Enum`, но :class:`str() <str>` смешанного типа данных :"

#: ../../library/enum.rst:642
msgid ":meth:`!int.__str__` for :class:`IntEnum` and :class:`IntFlag`"
msgstr ":meth:`!int.__str__` для :class:`IntEnum` и :class:`IntFlag`"

#: ../../library/enum.rst:643
msgid ":meth:`!str.__str__` for :class:`StrEnum`"
msgstr ":meth:`!str.__str__` для :class:`StrEnum`"

#: ../../library/enum.rst:645
msgid ""
"Inherit from :class:`!ReprEnum` to keep the :class:`str() <str>` / :func:"
"`format` of the mixed-in data type instead of using the :class:`Enum`-"
"default :meth:`str() <Enum.__str__>`."
msgstr ""
"Наследуйте от :class:`!ReprEnum`, чтобы сохранить :class:`str() <str>` / :"
"func:`format` смешанного типа данных вместо использования :class:`Enum`-"
"default: meth:`str() <Enum.__str__>`."

#: ../../library/enum.rst:654
msgid ""
"*EnumCheck* contains the options used by the :func:`verify` decorator to "
"ensure various constraints; failed constraints result in a :exc:`ValueError`."
msgstr ""
"*EnumCheck* содержит параметры, используемые декоратором :func:`verify` для "
"обеспечения различных ограничений; неудачные ограничения приводят к ошибке :"
"exc:`ValueError`."

#: ../../library/enum.rst:659
msgid "Ensure that each value has only one name::"
msgstr "Убедитесь, что каждое значение имеет только одно имя::"

#: ../../library/enum.rst:675
msgid ""
"Ensure that there are no missing values between the lowest-valued member and "
"the highest-valued member::"
msgstr ""
"Убедитесь, что между элементом с наименьшим значением и элементом с самым "
"высоким значением нет пропущенных значений::"

#: ../../library/enum.rst:690
msgid ""
"Ensure that any flag groups/masks contain only named flags -- useful when "
"values are specified instead of being generated by :func:`auto`::"
msgstr ""
"Убедитесь, что все группы/маски флагов содержат только именованные флаги — "
"полезно, когда значения указаны, а не генерируются :func:`auto`::"

#: ../../library/enum.rst:707
msgid ""
"CONTINUOUS and NAMED_FLAGS are designed to work with integer-valued members."
msgstr ""
"CONTINUOUS и NAMED_FLAGS предназначены для работы с членами с целочисленными "
"значениями."

#: ../../library/enum.rst:713
msgid ""
"*FlagBoundary* controls how out-of-range values are handled in *Flag* and "
"its subclasses."
msgstr ""
"*FlagBoundary* управляет тем, как обрабатываются значения, выходящие за "
"пределы диапазона, в *Flag* и его подклассах."

#: ../../library/enum.rst:718
msgid ""
"Out-of-range values cause a :exc:`ValueError` to be raised. This is the "
"default for :class:`Flag`::"
msgstr ""
"Значения, выходящие за пределы диапазона, приводят к возникновению ошибки :"
"exc:`ValueError`. Это значение по умолчанию для :class:`Flag`::"

#: ../../library/enum.rst:735
msgid ""
"Out-of-range values have invalid values removed, leaving a valid *Flag* "
"value::"
msgstr ""
"При значениях, выходящих за пределы диапазона, недопустимые значения "
"удаляются, оставляя допустимое значение *Flag*::"

#: ../../library/enum.rst:748
msgid ""
"Out-of-range values lose their *Flag* membership and revert to :class:`int`."
msgstr ""
"Значения, выходящие за пределы диапазона, теряют свое членство *Flag* и "
"возвращаются к :class:`int`."

#: ../../library/enum.rst:760
msgid ""
"Out-of-range values are kept, and the *Flag* membership is kept. This is the "
"default for :class:`IntFlag`::"
msgstr ""
"Значения, выходящие за пределы диапазона, сохраняются, а членство *Flag* "
"сохраняется. Это значение по умолчанию для :class:`IntFlag`::"

#: ../../library/enum.rst:776
msgid "Supported ``__dunder__`` names"
msgstr "Nomes ``__dunder__`` suportados"

#: ../../library/enum.rst:778
msgid ""
":attr:`~EnumType.__members__` is a read-only ordered mapping of "
"``member_name``:``member`` items.  It is only available on the class."
msgstr ""
":attr:`~EnumType.__members__` — это упорядоченное сопоставление элементов "
"``member_name``:``member``, доступное только для чтения. Это доступно только "
"в классе."

#: ../../library/enum.rst:781
msgid ""
":meth:`~object.__new__`, if specified, must create and return the enum "
"members; it is also a very good idea to set the member's :attr:`!_value_` "
"appropriately.  Once all the members are created it is no longer used."
msgstr ""

#: ../../library/enum.rst:787
msgid "Supported ``_sunder_`` names"
msgstr "Nomes ``_sunder_`` suportados"

#: ../../library/enum.rst:789
msgid ":attr:`~Enum._name_` -- name of the member"
msgstr ":attr:`~Enum._name_` -- имя члена"

#: ../../library/enum.rst:790
msgid ":attr:`~Enum._value_` -- value of the member; can be set in ``__new__``"
msgstr ""
":attr:`~Enum._value_` -- значение члена; можно установить в ``__new__``"

#: ../../library/enum.rst:791
msgid ""
":meth:`~Enum._missing_` -- a lookup function used when a value is not found; "
"may be overridden"
msgstr ""
":meth:`~Enum._missing_` -- функция поиска, используемая, когда значение не "
"найдено; может быть переопределено"

#: ../../library/enum.rst:793
msgid ""
":attr:`~Enum._ignore_` -- a list of names, either as a :class:`list` or a :"
"class:`str`, that will not be transformed into members, and will be removed "
"from the final class"
msgstr ""
":attr:`~Enum._ignore_` -- список имен в виде :class:`list` или :class:`str`, "
"который не будет преобразован в члены и будет удален из конечного класса."

#: ../../library/enum.rst:796
msgid ""
":attr:`~Enum._order_` -- no longer used, kept for backward compatibility "
"(class attribute, removed during class creation)"
msgstr ""
":attr:`~Enum._order_` -- больше не используется, сохранено для обратной "
"совместимости (атрибут класса удален во время создания класса)"

#: ../../library/enum.rst:798
msgid ""
":meth:`~Enum._generate_next_value_` -- used to get an appropriate value for "
"an enum member; may be overridden"
msgstr ""
":meth:`~Enum._generate_next_value_` -- используется для получения "
"соответствующего значения для члена перечисления; может быть переопределено"

#: ../../library/enum.rst:803
msgid ""
"For standard :class:`Enum` classes the next value chosen is the last value "
"seen incremented by one."
msgstr ""
"Para classes :class:`Enum` padrão, o próximo valor escolhido é o último "
"valor visto incrementado em um."

#: ../../library/enum.rst:806
msgid ""
"For :class:`Flag` classes the next value chosen will be the next highest "
"power-of-two, regardless of the last value seen."
msgstr ""
"Para as classes :class:`Flag` o próximo valor escolhido será a próxima "
"potência de dois mais alta, independentemente do último valor visto."

#: ../../library/enum.rst:809
msgid "``_missing_``, ``_order_``, ``_generate_next_value_``"
msgstr "``_missing_``, ``_order_``, ``_generate_next_value_``"

#: ../../library/enum.rst:810
msgid "``_ignore_``"
msgstr "``_ignore_``"

#: ../../library/enum.rst:815
msgid "Utilities and Decorators"
msgstr "Утилиты и декораторы"

#: ../../library/enum.rst:819
msgid ""
"*auto* can be used in place of a value.  If used, the *Enum* machinery will "
"call an *Enum*'s :meth:`~Enum._generate_next_value_` to get an appropriate "
"value. For *Enum* and *IntEnum* that appropriate value will be the last "
"value plus one; for *Flag* and *IntFlag* it will be the first power-of-two "
"greater than the highest value; for *StrEnum* it will be the lower-cased "
"version of the member's name.  Care must be taken if mixing *auto()* with "
"manually specified values."
msgstr ""
"Вместо значения можно использовать *auto*. Если используется, механизм "
"*Enum* вызовет :meth:`~Enum._generate_next_value_` *Enum*, чтобы получить "
"подходящее значение. Для *Enum* и *IntEnum* соответствующим значением будет "
"последнее значение плюс один; для *Flag* и *IntFlag* это будет первая "
"степень двойки, превышающая наибольшее значение; для *StrEnum* это будет "
"версия имени участника, написанная строчными буквами. Необходимо соблюдать "
"осторожность при смешивании *auto()* со значениями, заданными вручную."

#: ../../library/enum.rst:827
msgid ""
"*auto* instances are only resolved when at the top level of an assignment:"
msgstr "Экземпляры *auto* разрешаются только на верхнем уровне задания:"

#: ../../library/enum.rst:829
msgid "``FIRST = auto()`` will work (auto() is replaced with ``1``);"
msgstr "``FIRST = auto()`` будет работать (auto() заменяется на ``1``);"

#: ../../library/enum.rst:830
msgid ""
"``SECOND = auto(), -2`` will work (auto is replaced with ``2``, so ``2, -2`` "
"is used to create the ``SECOND`` enum member;"
msgstr ""
"``SECOND = auto(), -2`` будет работать (auto заменяется на ``2``, поэтому "
"``2, -2`` используется для создания члена перечисления ``SECOND``;"

#: ../../library/enum.rst:832
msgid ""
"``THREE = [auto(), -3]`` will *not* work (``<auto instance>, -3`` is used to "
"create the ``THREE`` enum member)"
msgstr ""
"``THREE = [auto(), -3]`` *не* будет работать (``<auto экземпляр>, -3`` "
"используется для создания члена перечисления ``THREE``)"

#: ../../library/enum.rst:837
msgid ""
"In prior versions, ``auto()`` had to be the only thing on the assignment "
"line to work properly."
msgstr ""
"В предыдущих версиях ``auto()`` должен был быть единственным элементом в "
"строке назначения, чтобы работать правильно."

#: ../../library/enum.rst:840
msgid ""
"``_generate_next_value_`` can be overridden to customize the values used by "
"*auto*."
msgstr ""
"``_generate_next_value_`` можно переопределить, чтобы настроить значения, "
"используемые *auto*."

#: ../../library/enum.rst:843
msgid ""
"in 3.13 the default ``_generate_next_value_`` will always return the highest "
"member value incremented by 1, and will fail if any member is an "
"incompatible type."
msgstr ""
"в версии 3.13 ``_generate_next_value_`` по умолчанию всегда будет возвращать "
"наибольшее значение члена, увеличенное на 1, и завершится ошибкой, если "
"какой-либо член имеет несовместимый тип."

#: ../../library/enum.rst:849
msgid ""
"A decorator similar to the built-in *property*, but specifically for "
"enumerations.  It allows member attributes to have the same names as members "
"themselves."
msgstr ""
"Декоратор, аналогичный встроенному *свойству*, но специально для "
"перечислений. Это позволяет атрибутам членов иметь те же имена, что и сами "
"члены."

#: ../../library/enum.rst:853
msgid ""
"the *property* and the member must be defined in separate classes; for "
"example, the *value* and *name* attributes are defined in the *Enum* class, "
"and *Enum* subclasses can define members with the names ``value`` and "
"``name``."
msgstr ""
"*свойство* и член должны быть определены в отдельных классах; например, "
"атрибуты *value* и *name* определены в классе *Enum*, а подклассы *Enum* "
"могут определять элементы с именами ``value`` и ``name``."

#: ../../library/enum.rst:862
msgid ""
"A :keyword:`class` decorator specifically for enumerations.  It searches an "
"enumeration's :attr:`~EnumType.__members__`, gathering any aliases it finds; "
"if any are found :exc:`ValueError` is raised with the details::"
msgstr ""
"Декоратор :keyword:`class` специально для перечислений. Он ищет :attr:"
"`~EnumType.__members__` перечисления, собирая все найденные псевдонимы; если "
"таковые имеются, выдается :exc:`ValueError` с подробной информацией::"

#: ../../library/enum.rst:880
msgid ""
"A :keyword:`class` decorator specifically for enumerations.  Members from :"
"class:`EnumCheck` are used to specify which constraints should be checked on "
"the decorated enumeration."
msgstr ""
"Декоратор :keyword:`class` специально для перечислений. Члены :class:"
"`EnumCheck` используются для указания того, какие ограничения следует "
"проверять в декорированном перечислении."

#: ../../library/enum.rst:888
msgid "A decorator for use in enums: its target will become a member."
msgstr "Декоратор для использования в перечислениях: его целью станет член."

#: ../../library/enum.rst:894
msgid "A decorator for use in enums: its target will not become a member."
msgstr ""
"Декоратор для использования в перечислениях: его цель не станет членом."

#: ../../library/enum.rst:900
msgid ""
"A decorator to change the :class:`str() <str>` and :func:`repr` of an enum "
"to show its members as belonging to the module instead of its class. Should "
"only be used when the enum members are exported to the module global "
"namespace (see :class:`re.RegexFlag` for an example)."
msgstr ""
"Декоратор для изменения :class:`str() <str>` и :func:`repr` перечисления, "
"чтобы показать его члены как принадлежащие модулю, а не его классу. Следует "
"использовать только тогда, когда члены перечисления экспортируются в "
"глобальное пространство имен модуля (пример см. в :class:`re.RegexFlag`)."

#: ../../library/enum.rst:910
msgid "Return a list of all power-of-two integers contained in a flag *value*."
msgstr ""
"Возвращает список всех целых чисел степени двойки, содержащихся в флаге "
"*value*."

#: ../../library/enum.rst:917
msgid "Notes"
msgstr "Notas"

#: ../../library/enum.rst:919
msgid ":class:`IntEnum`, :class:`StrEnum`, and :class:`IntFlag`"
msgstr ":class:`IntEnum`, :class:`StrEnum` и :class:`IntFlag`"

#: ../../library/enum.rst:921
msgid ""
"These three enum types are designed to be drop-in replacements for existing "
"integer- and string-based values; as such, they have extra limitations:"
msgstr ""
"Эти три типа перечислений предназначены для замены существующих "
"целочисленных и строковых значений; как таковые, они имеют дополнительные "
"ограничения:"

#: ../../library/enum.rst:924
msgid "``__str__`` uses the value and not the name of the enum member"
msgstr "``__str__`` использует значение, а не имя члена перечисления."

#: ../../library/enum.rst:926
msgid ""
"``__format__``, because it uses ``__str__``, will also use the value of the "
"enum member instead of its name"
msgstr ""
"``__format__``, поскольку он использует ``__str__``, также будет "
"использовать значение члена перечисления вместо его имени."

#: ../../library/enum.rst:929
msgid ""
"If you do not need/want those limitations, you can either create your own "
"base class by mixing in the ``int`` or ``str`` type yourself::"
msgstr ""
"Если вам не нужны/не нужны эти ограничения, вы можете создать свой "
"собственный базовый класс, смешав тип ``int`` или ``str`` самостоятельно::"

#: ../../library/enum.rst:936
msgid "or you can reassign the appropriate :meth:`str`, etc., in your enum::"
msgstr ""
"или вы можете переназначить соответствующий :meth:`str` и т. д. в вашем "
"перечислении::"
