# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Marco Rougeth <marco@rougeth.com>, 2021
# Hildeberto Abreu Magalhães <hildeberto@gmail.com>, 2022
# Raphael Mendonça, 2022
# Misael borges <misael@planosassessoria.com.br>, 2022
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-08 02:53-0300\n"
"PO-Revision-Date: 2021-06-28 01:05+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/enum.rst:2
msgid ":mod:`!enum` --- Support for enumerations"
msgstr ":mod:`!enum` --- Suporte a enumerações"

#: ../../library/enum.rst:14
msgid "**Source code:** :source:`Lib/enum.py`"
msgstr "**Código-fonte:** :source:`Lib/enum.py`"

#: ../../library/enum.rst:18
msgid ""
"This page contains the API reference information. For tutorial information "
"and discussion of more advanced topics, see"
msgstr ""
"Esta página contêm informação de referência da API. Para informação tutorial "
"e discussão de tópicos mais avançados, consulte"

#: ../../library/enum.rst:21
msgid ":ref:`Basic Tutorial <enum-basic-tutorial>`"
msgstr ":ref:`Tutorial básico <enum-basic-tutorial>`"

#: ../../library/enum.rst:22
msgid ":ref:`Advanced Tutorial <enum-advanced-tutorial>`"
msgstr ":ref:`Tutorial avançado <enum-advanced-tutorial>`"

#: ../../library/enum.rst:23
msgid ":ref:`Enum Cookbook <enum-cookbook>`"
msgstr ":ref:`Livro de receitas de enum <enum-cookbook>`"

#: ../../library/enum.rst:27
msgid "An enumeration:"
msgstr "Uma enumeração:"

#: ../../library/enum.rst:29
msgid "is a set of symbolic names (members) bound to unique values"
msgstr ""
"é um conjunto de nomes simbólicos (membros) vinculados a valores únicos"

#: ../../library/enum.rst:30
msgid ""
"can be iterated over to return its canonical (i.e. non-alias) members in "
"definition order"
msgstr ""
"pode ser iterado para retornar seus membros canônicos (ou seja, não "
"incluindo apelidos) na ordem de definição"

#: ../../library/enum.rst:32
msgid "uses *call* syntax to return members by value"
msgstr "usa a sintaxe *call* para retornar membros por valor"

#: ../../library/enum.rst:33
msgid "uses *index* syntax to return members by name"
msgstr "usa a sintaxe *index* para retornar membros por nome"

#: ../../library/enum.rst:35
msgid ""
"Enumerations are created either by using :keyword:`class` syntax, or by "
"using function-call syntax::"
msgstr ""
"As enumerações são criadas usando a sintaxe de :keyword:`class` ou usando a "
"sintaxe de chamada de função::"

#: ../../library/enum.rst:38
msgid ""
">>> from enum import Enum\n"
"\n"
">>> # class syntax\n"
">>> class Color(Enum):\n"
"...     RED = 1\n"
"...     GREEN = 2\n"
"...     BLUE = 3\n"
"\n"
">>> # functional syntax\n"
">>> Color = Enum('Color', [('RED', 1), ('GREEN', 2), ('BLUE', 3)])"
msgstr ""
">>> from enum import Enum\n"
"\n"
">>> # sintaxe de classe\n"
">>> class Color(Enum):\n"
"...     RED = 1\n"
"...     GREEN = 2\n"
"...     BLUE = 3\n"
"\n"
">>> # sintaxe funcional\n"
">>> Color = Enum('Color', [('RED', 1), ('GREEN', 2), ('BLUE', 3)])"

#: ../../library/enum.rst:49
msgid ""
"Even though we can use :keyword:`class` syntax to create Enums, Enums are "
"not normal Python classes.  See :ref:`How are Enums different? <enum-class-"
"differences>` for more details."
msgstr ""
"Embora possamos usar a sintaxe :keyword:`class` para criar Enums, Enums não "
"são classes Python normais. Veja :ref:`Como Enums são diferentes? <enum-"
"class-differences>` para mais detalhes."

#: ../../library/enum.rst:53
msgid "Nomenclature"
msgstr "Nomenclatura"

#: ../../library/enum.rst:55
msgid "The class :class:`!Color` is an *enumeration* (or *enum*)"
msgstr "A classe :class:`!Color` é uma *enumeração* (ou *enum*)"

#: ../../library/enum.rst:56
msgid ""
"The attributes :attr:`!Color.RED`, :attr:`!Color.GREEN`, etc., are "
"*enumeration members* (or *members*) and are functionally constants."
msgstr ""
"Os atributos :attr:`!Color.RED`, :attr:`!Color.GREEN`, etc., são *membros de "
"enumeração* (ou *membros*) e são constantes funcionalmente."

#: ../../library/enum.rst:58
msgid ""
"The enum members have *names* and *values* (the name of :attr:`!Color.RED` "
"is ``RED``, the value of :attr:`!Color.BLUE` is ``3``, etc.)"
msgstr ""
"Os membros enum têm *nomes* e *valores* (o nome de :attr:`!Color.RED` é "
"``RED``, o valor de :attr:`!Color.BLUE` é ``3``, etc.)"

#: ../../library/enum.rst:65
msgid "Module Contents"
msgstr "Conteúdo do módulo"

#: ../../library/enum.rst:67
msgid ":class:`EnumType`"
msgstr ":class:`EnumType`"

#: ../../library/enum.rst:69
msgid "The ``type`` for Enum and its subclasses."
msgstr "O ``type`` para Enum e suas subclasses."

#: ../../library/enum.rst:71
msgid ":class:`Enum`"
msgstr ":class:`Enum`"

#: ../../library/enum.rst:73
msgid "Base class for creating enumerated constants."
msgstr "Classe base para criação de constantes enumeradas."

#: ../../library/enum.rst:75
msgid ":class:`IntEnum`"
msgstr ":class:`IntEnum`"

#: ../../library/enum.rst:77
msgid ""
"Base class for creating enumerated constants that are also subclasses of :"
"class:`int`. (`Notes`_)"
msgstr ""
"Classe base para criar constantes enumeradas que também são subclasses de :"
"class:`int`. (`Notas`_)"

#: ../../library/enum.rst:80
msgid ":class:`StrEnum`"
msgstr ":class:`StrEnum`"

#: ../../library/enum.rst:82
msgid ""
"Base class for creating enumerated constants that are also subclasses of :"
"class:`str`. (`Notes`_)"
msgstr ""
"Classe base para criar constantes enumeradas que também são subclasses de :"
"class:`str`. (`Notas`_)"

#: ../../library/enum.rst:85
msgid ":class:`Flag`"
msgstr ":class:`Flag`"

#: ../../library/enum.rst:87
msgid ""
"Base class for creating enumerated constants that can be combined using the "
"bitwise operations without losing their :class:`Flag` membership."
msgstr ""
"Classe base para criar constantes enumeradas que podem ser combinadas usando "
"operações bit a bit sem perder sua associação :class:`Flag`."

#: ../../library/enum.rst:90
msgid ":class:`IntFlag`"
msgstr ":class:`IntFlag`"

#: ../../library/enum.rst:92
msgid ""
"Base class for creating enumerated constants that can be combined using the "
"bitwise operators without losing their :class:`IntFlag` membership. :class:"
"`IntFlag` members are also subclasses of :class:`int`. (`Notes`_)"
msgstr ""
"Classe base para criar constantes enumeradas que podem ser combinadas usando "
"operadores bit a bit sem perder sua associação :class:`IntFlag`. Membros de :"
"class:`IntFlag` também são subclasses de :class:`int`. (`Notas`_)"

#: ../../library/enum.rst:96
msgid ":class:`ReprEnum`"
msgstr ":class:`ReprEnum`"

#: ../../library/enum.rst:98
msgid ""
"Used by :class:`IntEnum`, :class:`StrEnum`, and :class:`IntFlag` to keep "
"the :class:`str() <str>` of the mixed-in type."
msgstr ""
"Usado por :class:`IntEnum`, :class:`StrEnum` e :class:`IntFlag` para manter "
"o :class:`str() <str>` do tipo misto."

#: ../../library/enum.rst:101
msgid ":class:`EnumCheck`"
msgstr ":class:`EnumCheck`"

#: ../../library/enum.rst:103
msgid ""
"An enumeration with the values ``CONTINUOUS``, ``NAMED_FLAGS``, and "
"``UNIQUE``, for use with :func:`verify` to ensure various constraints are "
"met by a given enumeration."
msgstr ""
"Uma enumeração com os valores ``CONTINUOUS``, ``NAMED_FLAGS`` e ``UNIQUE``, "
"para uso com :func:`verify` para garantir que várias restrições sejam "
"atendidas por uma determinada enumeração."

#: ../../library/enum.rst:107
msgid ":class:`FlagBoundary`"
msgstr ":class:`FlagBoundary`"

#: ../../library/enum.rst:109
msgid ""
"An enumeration with the values ``STRICT``, ``CONFORM``, ``EJECT``, and "
"``KEEP`` which allows for more fine-grained control over how invalid values "
"are dealt with in an enumeration."
msgstr ""
"Uma enumeração com os valores ``STRICT``, ``CONFORM``, ``EJECT`` e ``KEEP`` "
"que permite um controle mais refinado sobre como valores inválidos são "
"tratados em uma enumeração."

#: ../../library/enum.rst:113
msgid ":class:`EnumDict`"
msgstr ":class:`EnumDict`"

#: ../../library/enum.rst:115
msgid "A subclass of :class:`dict` for use when subclassing :class:`EnumType`."
msgstr ""
"Uma subclasse de :class:`dict` para uso ao criar subclasse de :class:"
"`EnumType`."

#: ../../library/enum.rst:117
msgid ":class:`auto`"
msgstr ":class:`auto`"

#: ../../library/enum.rst:119
msgid ""
"Instances are replaced with an appropriate value for Enum members. :class:"
"`StrEnum` defaults to the lower-cased version of the member name, while "
"other Enums default to 1 and increase from there."
msgstr ""
"As instâncias são substituídas por um valor apropriado para membros Enum. :"
"class:`StrEnum` assume como padrão a versão em minúsculas do nome do membro, "
"enquanto outros Enums assumem como padrão 1 e aumentam a partir daí."

#: ../../library/enum.rst:123
msgid ":func:`~enum.property`"
msgstr ":func:`~enum.property`"

#: ../../library/enum.rst:125
msgid ""
"Allows :class:`Enum` members to have attributes without conflicting with "
"member names.  The ``value`` and ``name`` attributes are implemented this "
"way."
msgstr ""
"Permite que membros :class:`Enum` tenham atributos sem conflitar com nomes "
"de membros. Os atributos ``value`` e ``name`` são implementados dessa forma."

#: ../../library/enum.rst:129
msgid ":func:`unique`"
msgstr ":func:`unique`"

#: ../../library/enum.rst:131
msgid ""
"Enum class decorator that ensures only one name is bound to any one value."
msgstr ""
"Decorador de classe Enum que garante que apenas um nome seja vinculado a "
"cada valor."

#: ../../library/enum.rst:133
msgid ":func:`verify`"
msgstr ":func:`verify`"

#: ../../library/enum.rst:135
msgid ""
"Enum class decorator that checks user-selectable constraints on an "
"enumeration."
msgstr ""
"Decorador de classe Enum que verifica restrições selecionáveis pelo usuário "
"em uma enumeração."

#: ../../library/enum.rst:138
msgid ":func:`member`"
msgstr ":func:`member`"

#: ../../library/enum.rst:140
msgid "Make ``obj`` a member.  Can be used as a decorator."
msgstr "Torna ``obj`` um membro. Pode ser usado como um decorador."

#: ../../library/enum.rst:142
msgid ":func:`nonmember`"
msgstr ":func:`nonmember`"

#: ../../library/enum.rst:144
msgid "Do not make ``obj`` a member.  Can be used as a decorator."
msgstr "Não torna ``obj`` um membro. Pode ser usado como um decorador."

#: ../../library/enum.rst:146
msgid ":func:`global_enum`"
msgstr ":func:`global_enum`"

#: ../../library/enum.rst:148
msgid ""
"Modify the :class:`str() <str>` and :func:`repr` of an enum to show its "
"members as belonging to the module instead of its class, and export the enum "
"members to the global namespace."
msgstr ""
"Modifica :class:`str() <str>` e :func:`repr` de uma enumeração para mostrar "
"seus membros como pertencentes ao módulo em vez de sua classe, e exporta os "
"membros da enumeração para o espaço de nomes global."

#: ../../library/enum.rst:152
msgid ":func:`show_flag_values`"
msgstr ":func:`show_flag_values`"

#: ../../library/enum.rst:154
msgid "Return a list of all power-of-two integers contained in a flag."
msgstr ""
"Retorna uma lista de todos os inteiros de potência de dois contidos em um "
"sinalizador."

#: ../../library/enum.rst:157
msgid "``Flag``, ``IntFlag``, ``auto``"
msgstr "``Flag``, ``IntFlag``, ``auto``"

#: ../../library/enum.rst:158
msgid ""
"``StrEnum``, ``EnumCheck``, ``ReprEnum``, ``FlagBoundary``, ``property``, "
"``member``, ``nonmember``, ``global_enum``, ``show_flag_values``"
msgstr ""
"``StrEnum``, ``EnumCheck``, ``ReprEnum``, ``FlagBoundary``, ``property``, "
"``member``, ``nonmember``, ``global_enum``, ``show_flag_values``"

#: ../../library/enum.rst:159
msgid "``EnumDict``"
msgstr "``EnumDict``"

#: ../../library/enum.rst:164
msgid "Data Types"
msgstr "Tipos de Dados"

#: ../../library/enum.rst:169
msgid ""
"*EnumType* is the :term:`metaclass` for *enum* enumerations.  It is possible "
"to subclass *EnumType* -- see :ref:`Subclassing EnumType <enumtype-"
"examples>` for details."
msgstr ""
"*EnumType* é a :term:`metaclasse` para enumerações *enum*. É possível criar "
"subclasse de *EnumType* -- veja :ref:`Criando subclasses de EnumType "
"<enumtype-examples>` para detalhes."

#: ../../library/enum.rst:173
msgid ""
"``EnumType`` is responsible for setting the correct :meth:`!__repr__`, :meth:"
"`!__str__`, :meth:`!__format__`, and :meth:`!__reduce__` methods on the "
"final *enum*, as well as creating the enum members, properly handling "
"duplicates, providing iteration over the enum class, etc."
msgstr ""
"``EnumType`` é responsável por definir os métodos :meth:`!__repr__`, :meth:`!"
"__str__`, :meth:`!__format__` e :meth:`!__reduce__` corretos no *enum* "
"final, bem como criar os membros do enum, manipular adequadamente as "
"duplicatas, fornecer iteração sobre a classe do enum, etc."

#: ../../library/enum.rst:180
msgid "This method is called in two different ways:"
msgstr ""

#: ../../library/enum.rst:182
msgid "to look up an existing member:"
msgstr ""

#: ../../library/enum.rst:0
msgid "cls"
msgstr ""

#: ../../library/enum.rst:184 ../../library/enum.rst:190
msgid "The enum class being called."
msgstr ""

#: ../../library/enum.rst:0
msgid "value"
msgstr "value"

#: ../../library/enum.rst:185
msgid "The value to lookup."
msgstr ""

#: ../../library/enum.rst:187
msgid ""
"to use the ``cls`` enum to create a new enum (only if the existing enum does "
"not have any members):"
msgstr ""

#: ../../library/enum.rst:191
msgid "The name of the new Enum to create."
msgstr ""

#: ../../library/enum.rst:0
msgid "names"
msgstr "nomes"

#: ../../library/enum.rst:192
msgid "The names/values of the members for the new Enum."
msgstr ""

#: ../../library/enum.rst:0
msgid "module"
msgstr "módulo"

#: ../../library/enum.rst:193
msgid "The name of the module the new Enum is created in."
msgstr ""

#: ../../library/enum.rst:0
msgid "qualname"
msgstr "qualname"

#: ../../library/enum.rst:194
msgid "The actual location in the module where this Enum can be found."
msgstr ""

#: ../../library/enum.rst:0
msgid "type"
msgstr "tipo"

#: ../../library/enum.rst:195
msgid "A mix-in type for the new Enum."
msgstr ""

#: ../../library/enum.rst:0
msgid "start"
msgstr "start"

#: ../../library/enum.rst:196
msgid "The first integer value for the Enum (used by :class:`auto`)."
msgstr ""

#: ../../library/enum.rst:0
msgid "boundary"
msgstr ""

#: ../../library/enum.rst:197
msgid ""
"How to handle out-of-range values from bit operations (:class:`Flag` only)."
msgstr ""

#: ../../library/enum.rst:201
msgid "Returns ``True`` if member belongs to the ``cls``::"
msgstr ""

#: ../../library/enum.rst:203
msgid ""
">>> some_var = Color.RED\n"
">>> some_var in Color\n"
"True\n"
">>> Color.RED.value in Color\n"
"True"
msgstr ""

#: ../../library/enum.rst:211
msgid ""
"Before Python 3.12, a ``TypeError`` is raised if a non-Enum-member is used "
"in a containment check."
msgstr ""

#: ../../library/enum.rst:216
msgid ""
"Returns ``['__class__', '__doc__', '__members__', '__module__']`` and the "
"names of the members in *cls*::"
msgstr ""

#: ../../library/enum.rst:219
msgid ""
">>> dir(Color)\n"
"['BLUE', 'GREEN', 'RED', '__class__', '__contains__', '__doc__', "
"'__getitem__', '__init_subclass__', '__iter__', '__len__', '__members__', "
"'__module__', '__name__', '__qualname__']"
msgstr ""

#: ../../library/enum.rst:224
msgid ""
"Returns the Enum member in *cls* matching *name*, or raises a :exc:"
"`KeyError`::"
msgstr ""

#: ../../library/enum.rst:226
msgid ""
">>> Color['BLUE']\n"
"<Color.BLUE: 3>"
msgstr ""

#: ../../library/enum.rst:231
msgid "Returns each member in *cls* in definition order::"
msgstr ""

#: ../../library/enum.rst:233
msgid ""
">>> list(Color)\n"
"[<Color.RED: 1>, <Color.GREEN: 2>, <Color.BLUE: 3>]"
msgstr ""

#: ../../library/enum.rst:238
msgid "Returns the number of member in *cls*::"
msgstr ""

#: ../../library/enum.rst:240
msgid ""
">>> len(Color)\n"
"3"
msgstr ""

#: ../../library/enum.rst:245
msgid "Returns a mapping of every enum name to its member, including aliases"
msgstr ""

#: ../../library/enum.rst:249
msgid "Returns each member in *cls* in reverse definition order::"
msgstr ""

#: ../../library/enum.rst:251
msgid ""
">>> list(reversed(Color))\n"
"[<Color.BLUE: 3>, <Color.GREEN: 2>, <Color.RED: 1>]"
msgstr ""

#: ../../library/enum.rst:256
msgid ""
"Adds a new name as an alias to an existing member.  Raises a :exc:"
"`NameError` if the name is already assigned to a different member."
msgstr ""

#: ../../library/enum.rst:261
msgid ""
"Adds a new value as an alias to an existing member.  Raises a :exc:"
"`ValueError` if the value is already linked with a different member."
msgstr ""

#: ../../library/enum.rst:266
msgid ""
"Before 3.11 ``EnumType`` was called ``EnumMeta``, which is still available "
"as an alias."
msgstr ""

#: ../../library/enum.rst:271
msgid "*Enum* is the base class for all *enum* enumerations."
msgstr ""

#: ../../library/enum.rst:275
msgid "The name used to define the ``Enum`` member::"
msgstr ""

#: ../../library/enum.rst:277
msgid ""
">>> Color.BLUE.name\n"
"'BLUE'"
msgstr ""

#: ../../library/enum.rst:282
msgid "The value given to the ``Enum`` member::"
msgstr ""

#: ../../library/enum.rst:284
msgid ""
">>> Color.RED.value\n"
"1"
msgstr ""

#: ../../library/enum.rst:287 ../../library/enum.rst:307
msgid "Value of the member, can be set in :meth:`~Enum.__new__`."
msgstr ""

#: ../../library/enum.rst:289
msgid "Enum member values"
msgstr ""

#: ../../library/enum.rst:291
msgid ""
"Member values can be anything: :class:`int`, :class:`str`, etc.  If the "
"exact value is unimportant you may use :class:`auto` instances and an "
"appropriate value will be chosen for you.  See :class:`auto` for the details."
msgstr ""

#: ../../library/enum.rst:296
msgid ""
"While mutable/unhashable values, such as :class:`dict`, :class:`list` or a "
"mutable :class:`~dataclasses.dataclass`, can be used, they will have a "
"quadratic performance impact during creation relative to the total number of "
"mutable/unhashable values in the enum."
msgstr ""

#: ../../library/enum.rst:303
msgid "Name of the member."
msgstr ""

#: ../../library/enum.rst:311
msgid ""
"No longer used, kept for backward compatibility. (class attribute, removed "
"during class creation)."
msgstr ""

#: ../../library/enum.rst:316
msgid ""
"``_ignore_`` is only used during creation and is removed from the "
"enumeration once creation is complete."
msgstr ""

#: ../../library/enum.rst:319
msgid ""
"``_ignore_`` is a list of names that will not become members, and whose "
"names will also be removed from the completed enumeration.  See :ref:"
"`TimePeriod <enum-time-period>` for an example."
msgstr ""

#: ../../library/enum.rst:325
msgid ""
"Returns ``['__class__', '__doc__', '__module__', 'name', 'value']`` and any "
"public methods defined on *self.__class__*::"
msgstr ""

#: ../../library/enum.rst:328
msgid ""
">>> from datetime import date\n"
">>> class Weekday(Enum):\n"
"...     MONDAY = 1\n"
"...     TUESDAY = 2\n"
"...     WEDNESDAY = 3\n"
"...     THURSDAY = 4\n"
"...     FRIDAY = 5\n"
"...     SATURDAY = 6\n"
"...     SUNDAY = 7\n"
"...     @classmethod\n"
"...     def today(cls):\n"
"...         print('today is %s' % cls(date.today().isoweekday()).name)\n"
"...\n"
">>> dir(Weekday.SATURDAY)\n"
"['__class__', '__doc__', '__eq__', '__hash__', '__module__', 'name', "
"'today', 'value']"
msgstr ""

#: ../../library/enum.rst:0
msgid "name"
msgstr "nome"

#: ../../library/enum.rst:346
msgid "The name of the member being defined (e.g. 'RED')."
msgstr ""

#: ../../library/enum.rst:347
msgid "The start value for the Enum; the default is 1."
msgstr ""

#: ../../library/enum.rst:0
msgid "count"
msgstr ""

#: ../../library/enum.rst:348
msgid "The number of members currently defined, not including this one."
msgstr ""

#: ../../library/enum.rst:0
msgid "last_values"
msgstr ""

#: ../../library/enum.rst:349
msgid "A list of the previous values."
msgstr ""

#: ../../library/enum.rst:351
msgid ""
"A *staticmethod* that is used to determine the next value returned by :class:"
"`auto`::"
msgstr ""

#: ../../library/enum.rst:354
msgid ""
">>> from enum import auto\n"
">>> class PowersOfThree(Enum):\n"
"...     @staticmethod\n"
"...     def _generate_next_value_(name, start, count, last_values):\n"
"...         return 3 ** (count + 1)\n"
"...     FIRST = auto()\n"
"...     SECOND = auto()\n"
"...\n"
">>> PowersOfThree.SECOND.value\n"
"9"
msgstr ""

#: ../../library/enum.rst:367
msgid ""
"By default, does nothing.  If multiple values are given in the member "
"assignment, those values become separate arguments to ``__init__``; e.g."
msgstr ""

#: ../../library/enum.rst:374
msgid ""
"``Weekday.__init__()`` would be called as ``Weekday.__init__(self, 1, "
"'Mon')``"
msgstr ""

#: ../../library/enum.rst:378
msgid ""
"A *classmethod* that is used to further configure subsequent subclasses. By "
"default, does nothing."
msgstr ""

#: ../../library/enum.rst:383
msgid ""
"A *classmethod* for looking up values not found in *cls*.  By default it "
"does nothing, but can be overridden to implement custom search behavior::"
msgstr ""

#: ../../library/enum.rst:386
msgid ""
">>> from enum import StrEnum\n"
">>> class Build(StrEnum):\n"
"...     DEBUG = auto()\n"
"...     OPTIMIZED = auto()\n"
"...     @classmethod\n"
"...     def _missing_(cls, value):\n"
"...         value = value.lower()\n"
"...         for member in cls:\n"
"...             if member.value == value:\n"
"...                 return member\n"
"...         return None\n"
"...\n"
">>> Build.DEBUG.value\n"
"'debug'\n"
">>> Build('deBUG')\n"
"<Build.DEBUG: 'debug'>"
msgstr ""

#: ../../library/enum.rst:405
msgid ""
"By default, doesn't exist.  If specified, either in the enum class "
"definition or in a mixin class (such as ``int``), all values given in the "
"member assignment will be passed; e.g."
msgstr ""

#: ../../library/enum.rst:413
msgid ""
"results in the call ``int('1a', 16)`` and a value of ``26`` for the member."
msgstr ""

#: ../../library/enum.rst:417
msgid ""
"When writing a custom ``__new__``, do not use ``super().__new__`` -- call "
"the appropriate ``__new__`` instead."
msgstr ""

#: ../../library/enum.rst:422
msgid ""
"Returns the string used for *repr()* calls.  By default, returns the *Enum* "
"name, member name, and value, but can be overridden::"
msgstr ""

#: ../../library/enum.rst:425
msgid ""
">>> class OtherStyle(Enum):\n"
"...     ALTERNATE = auto()\n"
"...     OTHER = auto()\n"
"...     SOMETHING_ELSE = auto()\n"
"...     def __repr__(self):\n"
"...         cls_name = self.__class__.__name__\n"
"...         return f'{cls_name}.{self.name}'\n"
"...\n"
">>> OtherStyle.ALTERNATE, str(OtherStyle.ALTERNATE), f\"{OtherStyle."
"ALTERNATE}\"\n"
"(OtherStyle.ALTERNATE, 'OtherStyle.ALTERNATE', 'OtherStyle.ALTERNATE')"
msgstr ""

#: ../../library/enum.rst:438
msgid ""
"Returns the string used for *str()* calls.  By default, returns the *Enum* "
"name and member name, but can be overridden::"
msgstr ""

#: ../../library/enum.rst:441
msgid ""
">>> class OtherStyle(Enum):\n"
"...     ALTERNATE = auto()\n"
"...     OTHER = auto()\n"
"...     SOMETHING_ELSE = auto()\n"
"...     def __str__(self):\n"
"...         return f'{self.name}'\n"
"...\n"
">>> OtherStyle.ALTERNATE, str(OtherStyle.ALTERNATE), f\"{OtherStyle."
"ALTERNATE}\"\n"
"(<OtherStyle.ALTERNATE: 1>, 'ALTERNATE', 'ALTERNATE')"
msgstr ""

#: ../../library/enum.rst:453
msgid ""
"Returns the string used for *format()* and *f-string* calls.  By default, "
"returns :meth:`__str__` return value, but can be overridden::"
msgstr ""

#: ../../library/enum.rst:456
msgid ""
">>> class OtherStyle(Enum):\n"
"...     ALTERNATE = auto()\n"
"...     OTHER = auto()\n"
"...     SOMETHING_ELSE = auto()\n"
"...     def __format__(self, spec):\n"
"...         return f'{self.name}'\n"
"...\n"
">>> OtherStyle.ALTERNATE, str(OtherStyle.ALTERNATE), f\"{OtherStyle."
"ALTERNATE}\"\n"
"(<OtherStyle.ALTERNATE: 1>, 'OtherStyle.ALTERNATE', 'ALTERNATE')"
msgstr ""

#: ../../library/enum.rst:468
msgid ""
"Using :class:`auto` with :class:`Enum` results in integers of increasing "
"value, starting with ``1``."
msgstr ""

#: ../../library/enum.rst:471
msgid "Added :ref:`enum-dataclass-support`"
msgstr ""

#: ../../library/enum.rst:476
msgid ""
"*IntEnum* is the same as :class:`Enum`, but its members are also integers "
"and can be used anywhere that an integer can be used.  If any integer "
"operation is performed with an *IntEnum* member, the resulting value loses "
"its enumeration status."
msgstr ""

#: ../../library/enum.rst:497
msgid ""
"Using :class:`auto` with :class:`IntEnum` results in integers of increasing "
"value, starting with ``1``."
msgstr ""

#: ../../library/enum.rst:500
msgid ""
":meth:`~object.__str__` is now :meth:`!int.__str__` to better support the "
"*replacement of existing constants* use-case. :meth:`~object.__format__` was "
"already :meth:`!int.__format__` for that same reason."
msgstr ""

#: ../../library/enum.rst:507
msgid ""
"``StrEnum`` is the same as :class:`Enum`, but its members are also strings "
"and can be used in most of the same places that a string can be used.  The "
"result of any string operation performed on or with a *StrEnum* member is "
"not part of the enumeration."
msgstr ""

#: ../../library/enum.rst:513
msgid ""
"There are places in the stdlib that check for an exact :class:`str` instead "
"of a :class:`str` subclass (i.e. ``type(unknown) == str`` instead of "
"``isinstance(unknown, str)``), and in those locations you will need to use "
"``str(StrEnum.member)``."
msgstr ""

#: ../../library/enum.rst:520
msgid ""
"Using :class:`auto` with :class:`StrEnum` results in the lower-cased member "
"name as the value."
msgstr ""

#: ../../library/enum.rst:525
msgid ""
":meth:`~object.__str__` is :meth:`!str.__str__` to better support the "
"*replacement of existing constants* use-case.  :meth:`~object.__format__` is "
"likewise :meth:`!str.__format__` for that same reason."
msgstr ""

#: ../../library/enum.rst:533
msgid ""
"``Flag`` is the same as :class:`Enum`, but its members support the bitwise "
"operators ``&`` (*AND*), ``|`` (*OR*), ``^`` (*XOR*), and ``~`` (*INVERT*); "
"the results of those operations are (aliases of) members of the enumeration."
msgstr ""

#: ../../library/enum.rst:539
msgid "Returns *True* if value is in self::"
msgstr ""

#: ../../library/enum.rst:541
msgid ""
">>> from enum import Flag, auto\n"
">>> class Color(Flag):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLUE = auto()\n"
"...\n"
">>> purple = Color.RED | Color.BLUE\n"
">>> white = Color.RED | Color.GREEN | Color.BLUE\n"
">>> Color.GREEN in purple\n"
"False\n"
">>> Color.GREEN in white\n"
"True\n"
">>> purple in white\n"
"True\n"
">>> white in purple\n"
"False"
msgstr ""

#: ../../library/enum.rst:560
msgid "Returns all contained non-alias members::"
msgstr ""

#: ../../library/enum.rst:562
msgid ""
">>> list(Color.RED)\n"
"[<Color.RED: 1>]\n"
">>> list(purple)\n"
"[<Color.RED: 1>, <Color.BLUE: 4>]"
msgstr ""

#: ../../library/enum.rst:571
msgid "Returns number of members in flag::"
msgstr ""

#: ../../library/enum.rst:573
msgid ""
">>> len(Color.GREEN)\n"
"1\n"
">>> len(white)\n"
"3"
msgstr ""

#: ../../library/enum.rst:582
msgid "Returns *True* if any members in flag, *False* otherwise::"
msgstr ""

#: ../../library/enum.rst:584
msgid ""
">>> bool(Color.GREEN)\n"
"True\n"
">>> bool(white)\n"
"True\n"
">>> black = Color(0)\n"
">>> bool(black)\n"
"False"
msgstr ""

#: ../../library/enum.rst:594
msgid "Returns current flag binary or'ed with other::"
msgstr ""

#: ../../library/enum.rst:596
msgid ""
">>> Color.RED | Color.GREEN\n"
"<Color.RED|GREEN: 3>"
msgstr ""

#: ../../library/enum.rst:601
msgid "Returns current flag binary and'ed with other::"
msgstr ""

#: ../../library/enum.rst:603
msgid ""
">>> purple & white\n"
"<Color.RED|BLUE: 5>\n"
">>> purple & Color.GREEN\n"
"<Color: 0>"
msgstr ""

#: ../../library/enum.rst:610
msgid "Returns current flag binary xor'ed with other::"
msgstr ""

#: ../../library/enum.rst:612
msgid ""
">>> purple ^ white\n"
"<Color.GREEN: 2>\n"
">>> purple ^ Color.GREEN\n"
"<Color.RED|GREEN|BLUE: 7>"
msgstr ""

#: ../../library/enum.rst:619
msgid "Returns all the flags in *type(self)* that are not in *self*::"
msgstr ""

#: ../../library/enum.rst:621
msgid ""
">>> ~white\n"
"<Color: 0>\n"
">>> ~purple\n"
"<Color.GREEN: 2>\n"
">>> ~Color.RED\n"
"<Color.GREEN|BLUE: 6>"
msgstr ""

#: ../../library/enum.rst:630
msgid ""
"Function used to format any remaining unnamed numeric values.  Default is "
"the value's repr; common choices are :func:`hex` and :func:`oct`."
msgstr ""

#: ../../library/enum.rst:635
msgid ""
"Using :class:`auto` with :class:`Flag` results in integers that are powers "
"of two, starting with ``1``."
msgstr ""

#: ../../library/enum.rst:638
msgid "The *repr()* of zero-valued flags has changed.  It is now:"
msgstr ""

#: ../../library/enum.rst:646
msgid ""
"``IntFlag`` is the same as :class:`Flag`, but its members are also integers "
"and can be used anywhere that an integer can be used."
msgstr ""

#: ../../library/enum.rst:660
msgid ""
"If any integer operation is performed with an *IntFlag* member, the result "
"is not an *IntFlag*::"
msgstr ""

#: ../../library/enum.rst:663
msgid ""
">>> Color.RED + 2\n"
"3"
msgstr ""

#: ../../library/enum.rst:666
msgid "If a :class:`Flag` operation is performed with an *IntFlag* member and:"
msgstr ""

#: ../../library/enum.rst:668
msgid "the result is a valid *IntFlag*: an *IntFlag* is returned"
msgstr ""

#: ../../library/enum.rst:669
msgid ""
"the result is not a valid *IntFlag*: the result depends on the :class:"
"`FlagBoundary` setting"
msgstr ""

#: ../../library/enum.rst:671
msgid "The :func:`repr` of unnamed zero-valued flags has changed.  It is now::"
msgstr ""

#: ../../library/enum.rst:673
msgid ""
">>> Color(0)\n"
"<Color: 0>"
msgstr ""

#: ../../library/enum.rst:678
msgid ""
"Using :class:`auto` with :class:`IntFlag` results in integers that are "
"powers of two, starting with ``1``."
msgstr ""

#: ../../library/enum.rst:683
msgid ""
":meth:`~object.__str__` is now :meth:`!int.__str__` to better support the "
"*replacement of existing constants* use-case.  :meth:`~object.__format__` "
"was already :meth:`!int.__format__` for that same reason."
msgstr ""

#: ../../library/enum.rst:687
msgid ""
"Inversion of an :class:`!IntFlag` now returns a positive value that is the "
"union of all flags not in the given flag, rather than a negative value. This "
"matches the existing :class:`Flag` behavior."
msgstr ""

#: ../../library/enum.rst:693
msgid ""
":class:`!ReprEnum` uses the :meth:`repr() <Enum.__repr__>` of :class:`Enum`, "
"but the :class:`str() <str>` of the mixed-in data type:"
msgstr ""

#: ../../library/enum.rst:696
msgid ":meth:`!int.__str__` for :class:`IntEnum` and :class:`IntFlag`"
msgstr ""

#: ../../library/enum.rst:697
msgid ":meth:`!str.__str__` for :class:`StrEnum`"
msgstr ""

#: ../../library/enum.rst:699
msgid ""
"Inherit from :class:`!ReprEnum` to keep the :class:`str() <str>` / :func:"
"`format` of the mixed-in data type instead of using the :class:`Enum`-"
"default :meth:`str() <Enum.__str__>`."
msgstr ""

#: ../../library/enum.rst:708
msgid ""
"*EnumCheck* contains the options used by the :func:`verify` decorator to "
"ensure various constraints; failed constraints result in a :exc:`ValueError`."
msgstr ""

#: ../../library/enum.rst:713
msgid "Ensure that each value has only one name::"
msgstr ""

#: ../../library/enum.rst:715
msgid ""
">>> from enum import Enum, verify, UNIQUE\n"
">>> @verify(UNIQUE)\n"
"... class Color(Enum):\n"
"...     RED = 1\n"
"...     GREEN = 2\n"
"...     BLUE = 3\n"
"...     CRIMSON = 1\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: aliases found in <enum 'Color'>: CRIMSON -> RED"
msgstr ""

#: ../../library/enum.rst:729
msgid ""
"Ensure that there are no missing values between the lowest-valued member and "
"the highest-valued member::"
msgstr ""

#: ../../library/enum.rst:732
msgid ""
">>> from enum import Enum, verify, CONTINUOUS\n"
">>> @verify(CONTINUOUS)\n"
"... class Color(Enum):\n"
"...     RED = 1\n"
"...     GREEN = 2\n"
"...     BLUE = 5\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: invalid enum 'Color': missing values 3, 4"
msgstr ""

#: ../../library/enum.rst:744
msgid ""
"Ensure that any flag groups/masks contain only named flags -- useful when "
"values are specified instead of being generated by :func:`auto`::"
msgstr ""

#: ../../library/enum.rst:747
msgid ""
">>> from enum import Flag, verify, NAMED_FLAGS\n"
">>> @verify(NAMED_FLAGS)\n"
"... class Color(Flag):\n"
"...     RED = 1\n"
"...     GREEN = 2\n"
"...     BLUE = 4\n"
"...     WHITE = 15\n"
"...     NEON = 31\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: invalid Flag 'Color': aliases WHITE and NEON are missing "
"combined values of 0x18 [use enum.show_flag_values(value) for details]"
msgstr ""

#: ../../library/enum.rst:761
msgid ""
"CONTINUOUS and NAMED_FLAGS are designed to work with integer-valued members."
msgstr ""

#: ../../library/enum.rst:767
msgid ""
"``FlagBoundary`` controls how out-of-range values are handled in :class:"
"`Flag` and its subclasses."
msgstr ""

#: ../../library/enum.rst:772
msgid ""
"Out-of-range values cause a :exc:`ValueError` to be raised. This is the "
"default for :class:`Flag`::"
msgstr ""

#: ../../library/enum.rst:775
msgid ""
">>> from enum import Flag, STRICT, auto\n"
">>> class StrictFlag(Flag, boundary=STRICT):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLUE = auto()\n"
"...\n"
">>> StrictFlag(2**2 + 2**4)\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: <flag 'StrictFlag'> invalid value 20\n"
"    given 0b0 10100\n"
"  allowed 0b0 00111"
msgstr ""

#: ../../library/enum.rst:790
msgid ""
"Out-of-range values have invalid values removed, leaving a valid :class:"
"`Flag` value::"
msgstr ""

#: ../../library/enum.rst:793
msgid ""
">>> from enum import Flag, CONFORM, auto\n"
">>> class ConformFlag(Flag, boundary=CONFORM):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLUE = auto()\n"
"...\n"
">>> ConformFlag(2**2 + 2**4)\n"
"<ConformFlag.BLUE: 4>"
msgstr ""

#: ../../library/enum.rst:804
msgid ""
"Out-of-range values lose their :class:`Flag` membership and revert to :class:"
"`int`."
msgstr ""

#: ../../library/enum.rst:817
msgid ""
"Out-of-range values are kept, and the :class:`Flag` membership is kept. This "
"is the default for :class:`IntFlag`::"
msgstr ""

#: ../../library/enum.rst:820
msgid ""
">>> from enum import Flag, KEEP, auto\n"
">>> class KeepFlag(Flag, boundary=KEEP):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLUE = auto()\n"
"...\n"
">>> KeepFlag(2**2 + 2**4)\n"
"<KeepFlag.BLUE|16: 20>"
msgstr ""

#: ../../library/enum.rst:833
msgid ""
"*EnumDict* is a subclass of :class:`dict` that is used as the namespace for "
"defining enum classes (see :ref:`prepare`). It is exposed to allow "
"subclasses of :class:`EnumType` with advanced behavior like having multiple "
"values per member. It should be called with the name of the enum class being "
"created, otherwise private names and internal classes will not be handled "
"correctly."
msgstr ""

#: ../../library/enum.rst:840
msgid ""
"Note that only the :class:`~collections.abc.MutableMapping` interface (:meth:"
"`~object.__setitem__` and :meth:`~dict.update`) is overridden. It may be "
"possible to bypass the checks using other :class:`!dict` operations like :"
"meth:`|= <object.__ior__>`."
msgstr ""

#: ../../library/enum.rst:847
msgid "A list of member names."
msgstr ""

#: ../../library/enum.rst:854
msgid "Supported ``__dunder__`` names"
msgstr "Nomes ``__dunder__`` suportados"

#: ../../library/enum.rst:856
msgid ""
":attr:`~EnumType.__members__` is a read-only ordered mapping of "
"``member_name``:``member`` items.  It is only available on the class."
msgstr ""

#: ../../library/enum.rst:859
msgid ""
":meth:`~Enum.__new__`, if specified, must create and return the enum "
"members; it is also a very good idea to set the member's :attr:`!_value_` "
"appropriately. Once all the members are created it is no longer used."
msgstr ""

#: ../../library/enum.rst:865
msgid "Supported ``_sunder_`` names"
msgstr "Nomes ``_sunder_`` suportados"

#: ../../library/enum.rst:867
msgid ""
":meth:`~EnumType._add_alias_` -- adds a new name as an alias to an existing "
"member."
msgstr ""

#: ../../library/enum.rst:869
msgid ""
":meth:`~EnumType._add_value_alias_` -- adds a new value as an alias to an "
"existing member."
msgstr ""

#: ../../library/enum.rst:871
msgid ":attr:`~Enum._name_` -- name of the member"
msgstr ""

#: ../../library/enum.rst:872
msgid ":attr:`~Enum._value_` -- value of the member; can be set in ``__new__``"
msgstr ""

#: ../../library/enum.rst:873
msgid ""
":meth:`~Enum._missing_` -- a lookup function used when a value is not found; "
"may be overridden"
msgstr ""

#: ../../library/enum.rst:875
msgid ""
":attr:`~Enum._ignore_` -- a list of names, either as a :class:`list` or a :"
"class:`str`, that will not be transformed into members, and will be removed "
"from the final class"
msgstr ""

#: ../../library/enum.rst:878
msgid ""
":attr:`~Enum._order_` -- no longer used, kept for backward compatibility "
"(class attribute, removed during class creation)"
msgstr ""

#: ../../library/enum.rst:880
msgid ""
":meth:`~Enum._generate_next_value_` -- used to get an appropriate value for "
"an enum member; may be overridden"
msgstr ""

#: ../../library/enum.rst:885
msgid ""
"For standard :class:`Enum` classes the next value chosen is the highest "
"value seen incremented by one."
msgstr ""

#: ../../library/enum.rst:888
msgid ""
"For :class:`Flag` classes the next value chosen will be the next highest "
"power-of-two."
msgstr ""

#: ../../library/enum.rst:891
msgid ""
"While ``_sunder_`` names are generally reserved for the further development "
"of the :class:`Enum` class and can not be used, some are explicitly allowed:"
msgstr ""

#: ../../library/enum.rst:894
msgid ""
"``_repr_*`` (e.g. ``_repr_html_``), as used in `IPython's rich display`_"
msgstr ""

#: ../../library/enum.rst:896
msgid "``_missing_``, ``_order_``, ``_generate_next_value_``"
msgstr "``_missing_``, ``_order_``, ``_generate_next_value_``"

#: ../../library/enum.rst:897
msgid "``_ignore_``"
msgstr "``_ignore_``"

#: ../../library/enum.rst:898
msgid "``_add_alias_``, ``_add_value_alias_``, ``_repr_*``"
msgstr ""

#: ../../library/enum.rst:904
msgid "Utilities and Decorators"
msgstr ""

#: ../../library/enum.rst:908
msgid ""
"*auto* can be used in place of a value.  If used, the *Enum* machinery will "
"call an :class:`Enum`'s :meth:`~Enum._generate_next_value_` to get an "
"appropriate value. For :class:`Enum` and :class:`IntEnum` that appropriate "
"value will be the last value plus one; for :class:`Flag` and :class:"
"`IntFlag` it will be the first power-of-two greater than the highest value; "
"for :class:`StrEnum` it will be the lower-cased version of the member's "
"name.  Care must be taken if mixing *auto()* with manually specified values."
msgstr ""

#: ../../library/enum.rst:916
msgid ""
"*auto* instances are only resolved when at the top level of an assignment:"
msgstr ""

#: ../../library/enum.rst:918
msgid "``FIRST = auto()`` will work (auto() is replaced with ``1``);"
msgstr ""

#: ../../library/enum.rst:919
msgid ""
"``SECOND = auto(), -2`` will work (auto is replaced with ``2``, so ``2, -2`` "
"is used to create the ``SECOND`` enum member;"
msgstr ""

#: ../../library/enum.rst:921
msgid ""
"``THREE = [auto(), -3]`` will *not* work (``<auto instance>, -3`` is used to "
"create the ``THREE`` enum member)"
msgstr ""

#: ../../library/enum.rst:926
msgid ""
"In prior versions, ``auto()`` had to be the only thing on the assignment "
"line to work properly."
msgstr ""

#: ../../library/enum.rst:929
msgid ""
"``_generate_next_value_`` can be overridden to customize the values used by "
"*auto*."
msgstr ""

#: ../../library/enum.rst:932
msgid ""
"in 3.13 the default ``_generate_next_value_`` will always return the highest "
"member value incremented by 1, and will fail if any member is an "
"incompatible type."
msgstr ""

#: ../../library/enum.rst:938
msgid ""
"A decorator similar to the built-in *property*, but specifically for "
"enumerations.  It allows member attributes to have the same names as members "
"themselves."
msgstr ""

#: ../../library/enum.rst:942
msgid ""
"the *property* and the member must be defined in separate classes; for "
"example, the *value* and *name* attributes are defined in the *Enum* class, "
"and *Enum* subclasses can define members with the names ``value`` and "
"``name``."
msgstr ""

#: ../../library/enum.rst:951
msgid ""
"A :keyword:`class` decorator specifically for enumerations.  It searches an "
"enumeration's :attr:`~EnumType.__members__`, gathering any aliases it finds; "
"if any are found :exc:`ValueError` is raised with the details::"
msgstr ""

#: ../../library/enum.rst:955
msgid ""
">>> from enum import Enum, unique\n"
">>> @unique\n"
"... class Mistake(Enum):\n"
"...     ONE = 1\n"
"...     TWO = 2\n"
"...     THREE = 3\n"
"...     FOUR = 3\n"
"...\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: duplicate values found in <enum 'Mistake'>: FOUR -> THREE"
msgstr ""

#: ../../library/enum.rst:969
msgid ""
"A :keyword:`class` decorator specifically for enumerations.  Members from :"
"class:`EnumCheck` are used to specify which constraints should be checked on "
"the decorated enumeration."
msgstr ""

#: ../../library/enum.rst:977
msgid "A decorator for use in enums: its target will become a member."
msgstr ""

#: ../../library/enum.rst:983
msgid "A decorator for use in enums: its target will not become a member."
msgstr ""

#: ../../library/enum.rst:989
msgid ""
"A decorator to change the :class:`str() <str>` and :func:`repr` of an enum "
"to show its members as belonging to the module instead of its class. Should "
"only be used when the enum members are exported to the module global "
"namespace (see :class:`re.RegexFlag` for an example)."
msgstr ""

#: ../../library/enum.rst:999
msgid "Return a list of all power-of-two integers contained in a flag *value*."
msgstr ""

#: ../../library/enum.rst:1006
msgid "Notes"
msgstr "Notas"

#: ../../library/enum.rst:1008
msgid ":class:`IntEnum`, :class:`StrEnum`, and :class:`IntFlag`"
msgstr ""

#: ../../library/enum.rst:1010
msgid ""
"These three enum types are designed to be drop-in replacements for existing "
"integer- and string-based values; as such, they have extra limitations:"
msgstr ""

#: ../../library/enum.rst:1013
msgid "``__str__`` uses the value and not the name of the enum member"
msgstr ""

#: ../../library/enum.rst:1015
msgid ""
"``__format__``, because it uses ``__str__``, will also use the value of the "
"enum member instead of its name"
msgstr ""

#: ../../library/enum.rst:1018
msgid ""
"If you do not need/want those limitations, you can either create your own "
"base class by mixing in the ``int`` or ``str`` type yourself::"
msgstr ""

#: ../../library/enum.rst:1021
msgid ""
">>> from enum import Enum\n"
">>> class MyIntEnum(int, Enum):\n"
"...     pass"
msgstr ""

#: ../../library/enum.rst:1025
msgid "or you can reassign the appropriate :meth:`str`, etc., in your enum::"
msgstr ""

#: ../../library/enum.rst:1027
msgid ""
">>> from enum import Enum, IntEnum\n"
">>> class MyIntEnum(IntEnum):\n"
"...     __str__ = Enum.__str__"
msgstr ""
