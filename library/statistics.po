# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2025-07-18 18:49+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/statistics.rst:2
msgid ":mod:`!statistics` --- Mathematical statistics functions"
msgstr ""

#: ../../library/statistics.rst:12
msgid "**Source code:** :source:`Lib/statistics.py`"
msgstr ""

#: ../../library/statistics.rst:22
msgid ""
"This module provides functions for calculating mathematical statistics of "
"numeric (:class:`~numbers.Real`-valued) data."
msgstr ""

#: ../../library/statistics.rst:25
msgid ""
"The module is not intended to be a competitor to third-party libraries such "
"as `NumPy <https://numpy.org>`_, `SciPy <https://scipy.org/>`_, or "
"proprietary full-featured statistics packages aimed at professional "
"statisticians such as Minitab, SAS and Matlab. It is aimed at the level of "
"graphing and scientific calculators."
msgstr ""

#: ../../library/statistics.rst:31
msgid ""
"Unless explicitly noted, these functions support :class:`int`, :class:"
"`float`, :class:`~decimal.Decimal` and :class:`~fractions.Fraction`. "
"Behaviour with other types (whether in the numeric tower or not) is "
"currently unsupported.  Collections with a mix of types are also undefined "
"and implementation-dependent.  If your input data consists of mixed types, "
"you may be able to use :func:`map` to ensure a consistent result, for "
"example: ``map(float, input_data)``."
msgstr ""

#: ../../library/statistics.rst:39
msgid ""
"Some datasets use ``NaN`` (not a number) values to represent missing data. "
"Since NaNs have unusual comparison semantics, they cause surprising or "
"undefined behaviors in the statistics functions that sort data or that count "
"occurrences.  The functions affected are ``median()``, ``median_low()``, "
"``median_high()``, ``median_grouped()``, ``mode()``, ``multimode()``, and "
"``quantiles()``.  The ``NaN`` values should be stripped before calling these "
"functions::"
msgstr ""

#: ../../library/statistics.rst:47
msgid ""
">>> from statistics import median\n"
">>> from math import isnan\n"
">>> from itertools import filterfalse\n"
"\n"
">>> data = [20.7, float('NaN'),19.2, 18.3, float('NaN'), 14.4]\n"
">>> sorted(data)  # This has surprising behavior\n"
"[20.7, nan, 14.4, 18.3, 19.2, nan]\n"
">>> median(data)  # This result is unexpected\n"
"16.35\n"
"\n"
">>> sum(map(isnan, data))    # Number of missing values\n"
"2\n"
">>> clean = list(filterfalse(isnan, data))  # Strip NaN values\n"
">>> clean\n"
"[20.7, 19.2, 18.3, 14.4]\n"
">>> sorted(clean)  # Sorting now works as expected\n"
"[14.4, 18.3, 19.2, 20.7]\n"
">>> median(clean)       # This result is now well defined\n"
"18.75"
msgstr ""

#: ../../library/statistics.rst:69
msgid "Averages and measures of central location"
msgstr ""

#: ../../library/statistics.rst:71
msgid ""
"These functions calculate an average or typical value from a population or "
"sample."
msgstr ""

#: ../../library/statistics.rst:75
msgid ":func:`mean`"
msgstr ""

#: ../../library/statistics.rst:75
msgid "Arithmetic mean (\"average\") of data."
msgstr ""

#: ../../library/statistics.rst:76
msgid ":func:`fmean`"
msgstr ""

#: ../../library/statistics.rst:76
msgid "Fast, floating-point arithmetic mean, with optional weighting."
msgstr ""

#: ../../library/statistics.rst:77
msgid ":func:`geometric_mean`"
msgstr ""

#: ../../library/statistics.rst:77
msgid "Geometric mean of data."
msgstr ""

#: ../../library/statistics.rst:78
msgid ":func:`harmonic_mean`"
msgstr ""

#: ../../library/statistics.rst:78
msgid "Harmonic mean of data."
msgstr ""

#: ../../library/statistics.rst:79
msgid ":func:`kde`"
msgstr ""

#: ../../library/statistics.rst:79
msgid "Estimate the probability density distribution of the data."
msgstr ""

#: ../../library/statistics.rst:80
msgid ":func:`kde_random`"
msgstr ""

#: ../../library/statistics.rst:80
msgid "Random sampling from the PDF generated by kde()."
msgstr ""

#: ../../library/statistics.rst:81
msgid ":func:`median`"
msgstr ""

#: ../../library/statistics.rst:81
msgid "Median (middle value) of data."
msgstr ""

#: ../../library/statistics.rst:82
msgid ":func:`median_low`"
msgstr ""

#: ../../library/statistics.rst:82
msgid "Low median of data."
msgstr ""

#: ../../library/statistics.rst:83
msgid ":func:`median_high`"
msgstr ""

#: ../../library/statistics.rst:83
msgid "High median of data."
msgstr ""

#: ../../library/statistics.rst:84
msgid ":func:`median_grouped`"
msgstr ""

#: ../../library/statistics.rst:84
msgid "Median (50th percentile) of grouped data."
msgstr ""

#: ../../library/statistics.rst:85
msgid ":func:`mode`"
msgstr ""

#: ../../library/statistics.rst:85
msgid "Single mode (most common value) of discrete or nominal data."
msgstr ""

#: ../../library/statistics.rst:86
msgid ":func:`multimode`"
msgstr ""

#: ../../library/statistics.rst:86
msgid "List of modes (most common values) of discrete or nominal data."
msgstr ""

#: ../../library/statistics.rst:87
msgid ":func:`quantiles`"
msgstr ""

#: ../../library/statistics.rst:87
msgid "Divide data into intervals with equal probability."
msgstr ""

#: ../../library/statistics.rst:91
msgid "Measures of spread"
msgstr ""

#: ../../library/statistics.rst:93
msgid ""
"These functions calculate a measure of how much the population or sample "
"tends to deviate from the typical or average values."
msgstr ""

#: ../../library/statistics.rst:97
msgid ":func:`pstdev`"
msgstr ""

#: ../../library/statistics.rst:97
msgid "Population standard deviation of data."
msgstr ""

#: ../../library/statistics.rst:98
msgid ":func:`pvariance`"
msgstr ""

#: ../../library/statistics.rst:98
msgid "Population variance of data."
msgstr ""

#: ../../library/statistics.rst:99
msgid ":func:`stdev`"
msgstr ""

#: ../../library/statistics.rst:99
msgid "Sample standard deviation of data."
msgstr ""

#: ../../library/statistics.rst:100
msgid ":func:`variance`"
msgstr ""

#: ../../library/statistics.rst:100
msgid "Sample variance of data."
msgstr ""

#: ../../library/statistics.rst:104
msgid "Statistics for relations between two inputs"
msgstr ""

#: ../../library/statistics.rst:106
msgid ""
"These functions calculate statistics regarding relations between two inputs."
msgstr ""

#: ../../library/statistics.rst:109
msgid ":func:`covariance`"
msgstr ""

#: ../../library/statistics.rst:109
msgid "Sample covariance for two variables."
msgstr ""

#: ../../library/statistics.rst:110
msgid ":func:`correlation`"
msgstr ""

#: ../../library/statistics.rst:110
msgid "Pearson and Spearman's correlation coefficients."
msgstr ""

#: ../../library/statistics.rst:111
msgid ":func:`linear_regression`"
msgstr ""

#: ../../library/statistics.rst:111
msgid "Slope and intercept for simple linear regression."
msgstr ""

#: ../../library/statistics.rst:116
msgid "Function details"
msgstr ""

#: ../../library/statistics.rst:118
msgid ""
"Note: The functions do not require the data given to them to be sorted. "
"However, for reading convenience, most of the examples show sorted sequences."
msgstr ""

#: ../../library/statistics.rst:123
msgid ""
"Return the sample arithmetic mean of *data* which can be a sequence or "
"iterable."
msgstr ""

#: ../../library/statistics.rst:125
msgid ""
"The arithmetic mean is the sum of the data divided by the number of data "
"points.  It is commonly called \"the average\", although it is only one of "
"many different mathematical averages.  It is a measure of the central "
"location of the data."
msgstr ""

#: ../../library/statistics.rst:130
msgid "If *data* is empty, :exc:`StatisticsError` will be raised."
msgstr ""

#: ../../library/statistics.rst:132
msgid "Some examples of use:"
msgstr ""

#: ../../library/statistics.rst:134
msgid ""
">>> mean([1, 2, 3, 4, 4])\n"
"2.8\n"
">>> mean([-1.0, 2.5, 3.25, 5.75])\n"
"2.625\n"
"\n"
">>> from fractions import Fraction as F\n"
">>> mean([F(3, 7), F(1, 21), F(5, 3), F(1, 3)])\n"
"Fraction(13, 21)\n"
"\n"
">>> from decimal import Decimal as D\n"
">>> mean([D(\"0.5\"), D(\"0.75\"), D(\"0.625\"), D(\"0.375\")])\n"
"Decimal('0.5625')"
msgstr ""

#: ../../library/statistics.rst:151
msgid ""
"The mean is strongly affected by `outliers <https://en.wikipedia.org/wiki/"
"Outlier>`_ and is not necessarily a typical example of the data points. For "
"a more robust, although less efficient, measure of `central tendency "
"<https://en.wikipedia.org/wiki/Central_tendency>`_, see :func:`median`."
msgstr ""

#: ../../library/statistics.rst:157
msgid ""
"The sample mean gives an unbiased estimate of the true population mean, so "
"that when taken on average over all the possible samples, ``mean(sample)`` "
"converges on the true mean of the entire population.  If *data* represents "
"the entire population rather than a sample, then ``mean(data)`` is "
"equivalent to calculating the true population mean Î¼."
msgstr ""

#: ../../library/statistics.rst:166
msgid "Convert *data* to floats and compute the arithmetic mean."
msgstr ""

#: ../../library/statistics.rst:168
msgid ""
"This runs faster than the :func:`mean` function and it always returns a :"
"class:`float`.  The *data* may be a sequence or iterable.  If the input "
"dataset is empty, raises a :exc:`StatisticsError`."
msgstr ""

#: ../../library/statistics.rst:172
msgid ""
">>> fmean([3.5, 4.0, 5.25])\n"
"4.25"
msgstr ""

#: ../../library/statistics.rst:177
msgid ""
"Optional weighting is supported.  For example, a professor assigns a grade "
"for a course by weighting quizzes at 20%, homework at 20%, a midterm exam at "
"30%, and a final exam at 30%:"
msgstr ""

#: ../../library/statistics.rst:181
msgid ""
">>> grades = [85, 92, 83, 91]\n"
">>> weights = [0.20, 0.20, 0.30, 0.30]\n"
">>> fmean(grades, weights)\n"
"87.6"
msgstr ""

#: ../../library/statistics.rst:188
msgid ""
"If *weights* is supplied, it must be the same length as the *data* or a :exc:"
"`ValueError` will be raised."
msgstr ""

#: ../../library/statistics.rst:193 ../../library/statistics.rst:261
msgid "Added support for *weights*."
msgstr ""

#: ../../library/statistics.rst:199
msgid "Convert *data* to floats and compute the geometric mean."
msgstr ""

#: ../../library/statistics.rst:201
msgid ""
"The geometric mean indicates the central tendency or typical value of the "
"*data* using the product of the values (as opposed to the arithmetic mean "
"which uses their sum)."
msgstr ""

#: ../../library/statistics.rst:205
msgid ""
"Raises a :exc:`StatisticsError` if the input dataset is empty, if it "
"contains a zero, or if it contains a negative value. The *data* may be a "
"sequence or iterable."
msgstr ""

#: ../../library/statistics.rst:209
msgid ""
"No special efforts are made to achieve exact results. (However, this may "
"change in the future.)"
msgstr ""

#: ../../library/statistics.rst:212
msgid ""
">>> round(geometric_mean([54, 24, 36]), 1)\n"
"36.0"
msgstr ""

#: ../../library/statistics.rst:222
msgid ""
"Return the harmonic mean of *data*, a sequence or iterable of real-valued "
"numbers.  If *weights* is omitted or ``None``, then equal weighting is "
"assumed."
msgstr ""

#: ../../library/statistics.rst:226
msgid ""
"The harmonic mean is the reciprocal of the arithmetic :func:`mean` of the "
"reciprocals of the data. For example, the harmonic mean of three values *a*, "
"*b* and *c* will be equivalent to ``3/(1/a + 1/b + 1/c)``.  If one of the "
"values is zero, the result will be zero."
msgstr ""

#: ../../library/statistics.rst:231
msgid ""
"The harmonic mean is a type of average, a measure of the central location of "
"the data.  It is often appropriate when averaging ratios or rates, for "
"example speeds."
msgstr ""

#: ../../library/statistics.rst:235
msgid ""
"Suppose a car travels 10 km at 40 km/hr, then another 10 km at 60 km/hr. "
"What is the average speed?"
msgstr ""

#: ../../library/statistics.rst:238
msgid ""
">>> harmonic_mean([40, 60])\n"
"48.0"
msgstr ""

#: ../../library/statistics.rst:243
msgid ""
"Suppose a car travels 40 km/hr for 5 km, and when traffic clears, speeds-up "
"to 60 km/hr for the remaining 30 km of the journey. What is the average "
"speed?"
msgstr ""

#: ../../library/statistics.rst:247
msgid ""
">>> harmonic_mean([40, 60], weights=[5, 30])\n"
"56.0"
msgstr ""

#: ../../library/statistics.rst:252
msgid ""
":exc:`StatisticsError` is raised if *data* is empty, any element is less "
"than zero, or if the weighted sum isn't positive."
msgstr ""

#: ../../library/statistics.rst:255
msgid ""
"The current algorithm has an early-out when it encounters a zero in the "
"input.  This means that the subsequent inputs are not tested for validity.  "
"(This behavior may change in the future.)"
msgstr ""

#: ../../library/statistics.rst:267
msgid ""
"`Kernel Density Estimation (KDE) <https://www.itm-conferences.org/articles/"
"itmconf/pdf/2018/08/itmconf_sam2018_00037.pdf>`_: Create a continuous "
"probability density function or cumulative distribution function from "
"discrete samples."
msgstr ""

#: ../../library/statistics.rst:272
msgid ""
"The basic idea is to smooth the data using `a kernel function <https://en."
"wikipedia.org/wiki/Kernel_(statistics)>`_. to help draw inferences about a "
"population from a sample."
msgstr ""

#: ../../library/statistics.rst:276
msgid ""
"The degree of smoothing is controlled by the scaling parameter *h* which is "
"called the bandwidth.  Smaller values emphasize local features while larger "
"values give smoother results."
msgstr ""

#: ../../library/statistics.rst:280
msgid ""
"The *kernel* determines the relative weights of the sample data points.  "
"Generally, the choice of kernel shape does not matter as much as the more "
"influential bandwidth smoothing parameter."
msgstr ""

#: ../../library/statistics.rst:284
msgid ""
"Kernels that give some weight to every sample point include *normal* "
"(*gauss*), *logistic*, and *sigmoid*."
msgstr ""

#: ../../library/statistics.rst:287
msgid ""
"Kernels that only give weight to sample points within the bandwidth include "
"*rectangular* (*uniform*), *triangular*, *parabolic* (*epanechnikov*), "
"*quartic* (*biweight*), *triweight*, and *cosine*."
msgstr ""

#: ../../library/statistics.rst:291
msgid ""
"If *cumulative* is true, will return a cumulative distribution function."
msgstr ""

#: ../../library/statistics.rst:293 ../../library/statistics.rst:324
msgid ""
"A :exc:`StatisticsError` will be raised if the *data* sequence is empty."
msgstr ""

#: ../../library/statistics.rst:295
msgid ""
"`Wikipedia has an example <https://en.wikipedia.org/wiki/"
"Kernel_density_estimation#Example>`_ where we can use :func:`kde` to "
"generate and plot a probability density function estimated from a small "
"sample:"
msgstr ""

#: ../../library/statistics.rst:300
msgid ""
">>> sample = [-2.1, -1.3, -0.4, 1.9, 5.1, 6.2]\n"
">>> f_hat = kde(sample, h=1.5)\n"
">>> xarr = [i/100 for i in range(-750, 1100)]\n"
">>> yarr = [f_hat(x) for x in xarr]"
msgstr ""

#: ../../library/statistics.rst:307
msgid "The points in ``xarr`` and ``yarr`` can be used to make a PDF plot:"
msgstr ""

#: ../../library/statistics.rst:309
msgid "Scatter plot of the estimated probability density function."
msgstr ""

#: ../../library/statistics.rst:317
msgid ""
"Return a function that makes a random selection from the estimated "
"probability density function produced by ``kde(data, h, kernel)``."
msgstr ""

#: ../../library/statistics.rst:320
msgid ""
"Providing a *seed* allows reproducible selections. In the future, the values "
"may change slightly as more accurate kernel inverse CDF estimates are "
"implemented.  The seed may be an integer, float, str, or bytes."
msgstr ""

#: ../../library/statistics.rst:326
msgid ""
"Continuing the example for :func:`kde`, we can use :func:`kde_random` to "
"generate new random selections from an estimated probability density "
"function:"
msgstr ""

#: ../../library/statistics.rst:341
msgid ""
"Return the median (middle value) of numeric data, using the common \"mean of "
"middle two\" method.  If *data* is empty, :exc:`StatisticsError` is raised. "
"*data* can be a sequence or iterable."
msgstr ""

#: ../../library/statistics.rst:345
msgid ""
"The median is a robust measure of central location and is less affected by "
"the presence of outliers.  When the number of data points is odd, the middle "
"data point is returned:"
msgstr ""

#: ../../library/statistics.rst:349
msgid ""
">>> median([1, 3, 5])\n"
"3"
msgstr ""

#: ../../library/statistics.rst:354
msgid ""
"When the number of data points is even, the median is interpolated by taking "
"the average of the two middle values:"
msgstr ""

#: ../../library/statistics.rst:357
msgid ""
">>> median([1, 3, 5, 7])\n"
"4.0"
msgstr ""

#: ../../library/statistics.rst:362
msgid ""
"This is suited for when your data is discrete, and you don't mind that the "
"median may not be an actual data point."
msgstr ""

#: ../../library/statistics.rst:365
msgid ""
"If the data is ordinal (supports order operations) but not numeric (doesn't "
"support addition), consider using :func:`median_low` or :func:`median_high` "
"instead."
msgstr ""

#: ../../library/statistics.rst:371
msgid ""
"Return the low median of numeric data.  If *data* is empty, :exc:"
"`StatisticsError` is raised.  *data* can be a sequence or iterable."
msgstr ""

#: ../../library/statistics.rst:374
msgid ""
"The low median is always a member of the data set.  When the number of data "
"points is odd, the middle value is returned.  When it is even, the smaller "
"of the two middle values is returned."
msgstr ""

#: ../../library/statistics.rst:378
msgid ""
">>> median_low([1, 3, 5])\n"
"3\n"
">>> median_low([1, 3, 5, 7])\n"
"3"
msgstr ""

#: ../../library/statistics.rst:385
msgid ""
"Use the low median when your data are discrete and you prefer the median to "
"be an actual data point rather than interpolated."
msgstr ""

#: ../../library/statistics.rst:391
msgid ""
"Return the high median of data.  If *data* is empty, :exc:`StatisticsError` "
"is raised.  *data* can be a sequence or iterable."
msgstr ""

#: ../../library/statistics.rst:394
msgid ""
"The high median is always a member of the data set.  When the number of data "
"points is odd, the middle value is returned.  When it is even, the larger of "
"the two middle values is returned."
msgstr ""

#: ../../library/statistics.rst:398
msgid ""
">>> median_high([1, 3, 5])\n"
"3\n"
">>> median_high([1, 3, 5, 7])\n"
"5"
msgstr ""

#: ../../library/statistics.rst:405
msgid ""
"Use the high median when your data are discrete and you prefer the median to "
"be an actual data point rather than interpolated."
msgstr ""

#: ../../library/statistics.rst:411
msgid ""
"Estimates the median for numeric data that has been `grouped or binned "
"<https://en.wikipedia.org/wiki/Data_binning>`_ around the midpoints of "
"consecutive, fixed-width intervals."
msgstr ""

#: ../../library/statistics.rst:415
msgid ""
"The *data* can be any iterable of numeric data with each value being exactly "
"the midpoint of a bin.  At least one value must be present."
msgstr ""

#: ../../library/statistics.rst:418
msgid "The *interval* is the width of each bin."
msgstr ""

#: ../../library/statistics.rst:420
msgid ""
"For example, demographic information may have been summarized into "
"consecutive ten-year age groups with each group being represented by the 5-"
"year midpoints of the intervals:"
msgstr ""

#: ../../library/statistics.rst:424
msgid ""
">>> from collections import Counter\n"
">>> demographics = Counter({\n"
"...    25: 172,   # 20 to 30 years old\n"
"...    35: 484,   # 30 to 40 years old\n"
"...    45: 387,   # 40 to 50 years old\n"
"...    55:  22,   # 50 to 60 years old\n"
"...    65:   6,   # 60 to 70 years old\n"
"... })\n"
"..."
msgstr ""

#: ../../library/statistics.rst:436
msgid ""
"The 50th percentile (median) is the 536th person out of the 1071 member "
"cohort.  That person is in the 30 to 40 year old age group."
msgstr ""

#: ../../library/statistics.rst:439
msgid ""
"The regular :func:`median` function would assume that everyone in the "
"tricenarian age group was exactly 35 years old.  A more tenable assumption "
"is that the 484 members of that age group are evenly distributed between 30 "
"and 40.  For that, we use :func:`median_grouped`:"
msgstr ""

#: ../../library/statistics.rst:445
msgid ""
">>> data = list(demographics.elements())\n"
">>> median(data)\n"
"35\n"
">>> round(median_grouped(data, interval=10), 1)\n"
"37.5"
msgstr ""

#: ../../library/statistics.rst:453
msgid ""
"The caller is responsible for making sure the data points are separated by "
"exact multiples of *interval*.  This is essential for getting a correct "
"result.  The function does not check this precondition."
msgstr ""

#: ../../library/statistics.rst:457
msgid ""
"Inputs may be any numeric type that can be coerced to a float during the "
"interpolation step."
msgstr ""

#: ../../library/statistics.rst:463
msgid ""
"Return the single most common data point from discrete or nominal *data*. "
"The mode (when it exists) is the most typical value and serves as a measure "
"of central location."
msgstr ""

#: ../../library/statistics.rst:467
msgid ""
"If there are multiple modes with the same frequency, returns the first one "
"encountered in the *data*.  If the smallest or largest of those is desired "
"instead, use ``min(multimode(data))`` or ``max(multimode(data))``. If the "
"input *data* is empty, :exc:`StatisticsError` is raised."
msgstr ""

#: ../../library/statistics.rst:472
msgid ""
"``mode`` assumes discrete data and returns a single value. This is the "
"standard treatment of the mode as commonly taught in schools:"
msgstr ""

#: ../../library/statistics.rst:475
msgid ""
">>> mode([1, 1, 2, 3, 3, 3, 3, 4])\n"
"3"
msgstr ""

#: ../../library/statistics.rst:480
msgid ""
"The mode is unique in that it is the only statistic in this package that "
"also applies to nominal (non-numeric) data:"
msgstr ""

#: ../../library/statistics.rst:483
msgid ""
">>> mode([\"red\", \"blue\", \"blue\", \"red\", \"green\", \"red\", "
"\"red\"])\n"
"'red'"
msgstr ""

#: ../../library/statistics.rst:488
msgid ""
"Only hashable inputs are supported.  To handle type :class:`set`, consider "
"casting to :class:`frozenset`.  To handle type :class:`list`, consider "
"casting to :class:`tuple`.  For mixed or nested inputs, consider using this "
"slower quadratic algorithm that only depends on equality tests: ``max(data, "
"key=data.count)``."
msgstr ""

#: ../../library/statistics.rst:494
msgid ""
"Now handles multimodal datasets by returning the first mode encountered. "
"Formerly, it raised :exc:`StatisticsError` when more than one mode was found."
msgstr ""

#: ../../library/statistics.rst:502
msgid ""
"Return a list of the most frequently occurring values in the order they were "
"first encountered in the *data*.  Will return more than one result if there "
"are multiple modes or an empty list if the *data* is empty:"
msgstr ""

#: ../../library/statistics.rst:506
msgid ""
">>> multimode('aabbbbccddddeeffffgg')\n"
"['b', 'd', 'f']\n"
">>> multimode('')\n"
"[]"
msgstr ""

#: ../../library/statistics.rst:518
msgid ""
"Return the population standard deviation (the square root of the population "
"variance).  See :func:`pvariance` for arguments and other details."
msgstr ""

#: ../../library/statistics.rst:521
msgid ""
">>> pstdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])\n"
"0.986893273527251"
msgstr ""

#: ../../library/statistics.rst:529
msgid ""
"Return the population variance of *data*, a non-empty sequence or iterable "
"of real-valued numbers.  Variance, or second moment about the mean, is a "
"measure of the variability (spread or dispersion) of data.  A large variance "
"indicates that the data is spread out; a small variance indicates it is "
"clustered closely around the mean."
msgstr ""

#: ../../library/statistics.rst:535
msgid ""
"If the optional second argument *mu* is given, it should be the *population* "
"mean of the *data*.  It can also be used to compute the second moment around "
"a point that is not the mean.  If it is missing or ``None`` (the default), "
"the arithmetic mean is automatically calculated."
msgstr ""

#: ../../library/statistics.rst:540
msgid ""
"Use this function to calculate the variance from the entire population.  To "
"estimate the variance from a sample, the :func:`variance` function is "
"usually a better choice."
msgstr ""

#: ../../library/statistics.rst:544
msgid "Raises :exc:`StatisticsError` if *data* is empty."
msgstr ""

#: ../../library/statistics.rst:546 ../../library/statistics.rst:616
#: ../../library/statistics.rst:725
msgid "Examples:"
msgstr ""

#: ../../library/statistics.rst:548
msgid ""
">>> data = [0.0, 0.25, 0.25, 1.25, 1.5, 1.75, 2.75, 3.25]\n"
">>> pvariance(data)\n"
"1.25"
msgstr ""

#: ../../library/statistics.rst:554
msgid ""
"If you have already calculated the mean of your data, you can pass it as the "
"optional second argument *mu* to avoid recalculation:"
msgstr ""

#: ../../library/statistics.rst:557
msgid ""
">>> mu = mean(data)\n"
">>> pvariance(data, mu)\n"
"1.25"
msgstr ""

#: ../../library/statistics.rst:563
msgid "Decimals and Fractions are supported:"
msgstr ""

#: ../../library/statistics.rst:565
msgid ""
">>> from decimal import Decimal as D\n"
">>> pvariance([D(\"27.5\"), D(\"30.25\"), D(\"30.25\"), D(\"34.5\"), "
"D(\"41.75\")])\n"
"Decimal('24.815')\n"
"\n"
">>> from fractions import Fraction as F\n"
">>> pvariance([F(1, 4), F(5, 4), F(1, 2)])\n"
"Fraction(13, 72)"
msgstr ""

#: ../../library/statistics.rst:577
msgid ""
"When called with the entire population, this gives the population variance "
"ÏÂ².  When called on a sample instead, this is the biased sample variance sÂ², "
"also known as variance with N degrees of freedom."
msgstr ""

#: ../../library/statistics.rst:581
msgid ""
"If you somehow know the true population mean Î¼, you may use this function to "
"calculate the variance of a sample, giving the known population mean as the "
"second argument.  Provided the data points are a random sample of the "
"population, the result will be an unbiased estimate of the population "
"variance."
msgstr ""

#: ../../library/statistics.rst:590
msgid ""
"Return the sample standard deviation (the square root of the sample "
"variance).  See :func:`variance` for arguments and other details."
msgstr ""

#: ../../library/statistics.rst:593
msgid ""
">>> stdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])\n"
"1.0810874155219827"
msgstr ""

#: ../../library/statistics.rst:601
msgid ""
"Return the sample variance of *data*, an iterable of at least two real-"
"valued numbers.  Variance, or second moment about the mean, is a measure of "
"the variability (spread or dispersion) of data.  A large variance indicates "
"that the data is spread out; a small variance indicates it is clustered "
"closely around the mean."
msgstr ""

#: ../../library/statistics.rst:607
msgid ""
"If the optional second argument *xbar* is given, it should be the *sample* "
"mean of *data*.  If it is missing or ``None`` (the default), the mean is "
"automatically calculated."
msgstr ""

#: ../../library/statistics.rst:611
msgid ""
"Use this function when your data is a sample from a population. To calculate "
"the variance from the entire population, see :func:`pvariance`."
msgstr ""

#: ../../library/statistics.rst:614
msgid "Raises :exc:`StatisticsError` if *data* has fewer than two values."
msgstr ""

#: ../../library/statistics.rst:618
msgid ""
">>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]\n"
">>> variance(data)\n"
"1.3720238095238095"
msgstr ""

#: ../../library/statistics.rst:624
msgid ""
"If you have already calculated the sample mean of your data, you can pass it "
"as the optional second argument *xbar* to avoid recalculation:"
msgstr ""

#: ../../library/statistics.rst:627
msgid ""
">>> m = mean(data)\n"
">>> variance(data, m)\n"
"1.3720238095238095"
msgstr ""

#: ../../library/statistics.rst:633
msgid ""
"This function does not attempt to verify that you have passed the actual "
"mean as *xbar*.  Using arbitrary values for *xbar* can lead to invalid or "
"impossible results."
msgstr ""

#: ../../library/statistics.rst:637
msgid "Decimal and Fraction values are supported:"
msgstr ""

#: ../../library/statistics.rst:639
msgid ""
">>> from decimal import Decimal as D\n"
">>> variance([D(\"27.5\"), D(\"30.25\"), D(\"30.25\"), D(\"34.5\"), "
"D(\"41.75\")])\n"
"Decimal('31.01875')\n"
"\n"
">>> from fractions import Fraction as F\n"
">>> variance([F(1, 6), F(1, 2), F(5, 3)])\n"
"Fraction(67, 108)"
msgstr ""

#: ../../library/statistics.rst:651
msgid ""
"This is the sample variance sÂ² with Bessel's correction, also known as "
"variance with N-1 degrees of freedom.  Provided that the data points are "
"representative (e.g. independent and identically distributed), the result "
"should be an unbiased estimate of the true population variance."
msgstr ""

#: ../../library/statistics.rst:656
msgid ""
"If you somehow know the actual population mean Î¼ you should pass it to the :"
"func:`pvariance` function as the *mu* parameter to get the variance of a "
"sample."
msgstr ""

#: ../../library/statistics.rst:662
msgid ""
"Divide *data* into *n* continuous intervals with equal probability. Returns "
"a list of ``n - 1`` cut points separating the intervals."
msgstr ""

#: ../../library/statistics.rst:665
msgid ""
"Set *n* to 4 for quartiles (the default).  Set *n* to 10 for deciles.  Set "
"*n* to 100 for percentiles which gives the 99 cuts points that separate "
"*data* into 100 equal sized groups.  Raises :exc:`StatisticsError` if *n* is "
"not least 1."
msgstr ""

#: ../../library/statistics.rst:670
msgid ""
"The *data* can be any iterable containing sample data.  For meaningful "
"results, the number of data points in *data* should be larger than *n*. "
"Raises :exc:`StatisticsError` if there is not at least one data point."
msgstr ""

#: ../../library/statistics.rst:674
msgid ""
"The cut points are linearly interpolated from the two nearest data points.  "
"For example, if a cut point falls one-third of the distance between two "
"sample values, ``100`` and ``112``, the cut-point will evaluate to ``104``."
msgstr ""

#: ../../library/statistics.rst:679
msgid ""
"The *method* for computing quantiles can be varied depending on whether the "
"*data* includes or excludes the lowest and highest possible values from the "
"population."
msgstr ""

#: ../../library/statistics.rst:683
msgid ""
"The default *method* is \"exclusive\" and is used for data sampled from a "
"population that can have more extreme values than found in the samples.  The "
"portion of the population falling below the *i-th* of *m* sorted data points "
"is computed as ``i / (m + 1)``.  Given nine sample values, the method sorts "
"them and assigns the following percentiles: 10%, 20%, 30%, 40%, 50%, 60%, "
"70%, 80%, 90%."
msgstr ""

#: ../../library/statistics.rst:690
msgid ""
"Setting the *method* to \"inclusive\" is used for describing population data "
"or for samples that are known to include the most extreme values from the "
"population.  The minimum value in *data* is treated as the 0th percentile "
"and the maximum value is treated as the 100th percentile. The portion of the "
"population falling below the *i-th* of *m* sorted data points is computed as "
"``(i - 1) / (m - 1)``.  Given 11 sample values, the method sorts them and "
"assigns the following percentiles: 0%, 10%, 20%, 30%, 40%, 50%, 60%, 70%, "
"80%, 90%, 100%."
msgstr ""

#: ../../library/statistics.rst:699
msgid ""
"# Decile cut points for empirically sampled data\n"
">>> data = [105, 129, 87, 86, 111, 111, 89, 81, 108, 92, 110,\n"
"...         100, 75, 105, 103, 109, 76, 119, 99, 91, 103, 129,\n"
"...         106, 101, 84, 111, 74, 87, 86, 103, 103, 106, 86,\n"
"...         111, 75, 87, 102, 121, 111, 88, 89, 101, 106, 95,\n"
"...         103, 107, 101, 81, 109, 104]\n"
">>> [round(q, 1) for q in quantiles(data, n=10)]\n"
"[81.0, 86.2, 89.0, 99.4, 102.5, 103.6, 106.0, 109.8, 111.0]"
msgstr ""

#: ../../library/statistics.rst:712
msgid ""
"No longer raises an exception for an input with only a single data point. "
"This allows quantile estimates to be built up one sample point at a time "
"becoming gradually more refined with each new data point."
msgstr ""

#: ../../library/statistics.rst:719
msgid ""
"Return the sample covariance of two inputs *x* and *y*. Covariance is a "
"measure of the joint variability of two inputs."
msgstr ""

#: ../../library/statistics.rst:722
msgid ""
"Both inputs must be of the same length (no less than two), otherwise :exc:"
"`StatisticsError` is raised."
msgstr ""

#: ../../library/statistics.rst:727
msgid ""
">>> x = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
">>> y = [1, 2, 3, 1, 2, 3, 1, 2, 3]\n"
">>> covariance(x, y)\n"
"0.75\n"
">>> z = [9, 8, 7, 6, 5, 4, 3, 2, 1]\n"
">>> covariance(x, z)\n"
"-7.5\n"
">>> covariance(z, x)\n"
"-7.5"
msgstr ""

#: ../../library/statistics.rst:743
msgid ""
"Return the `Pearson's correlation coefficient <https://en.wikipedia.org/wiki/"
"Pearson_correlation_coefficient>`_ for two inputs. Pearson's correlation "
"coefficient *r* takes values between -1 and +1. It measures the strength and "
"direction of a linear relationship."
msgstr ""

#: ../../library/statistics.rst:749
msgid ""
"If *method* is \"ranked\", computes `Spearman's rank correlation coefficient "
"<https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient>`_ "
"for two inputs. The data is replaced by ranks.  Ties are averaged so that "
"equal values receive the same rank.  The resulting coefficient measures the "
"strength of a monotonic relationship."
msgstr ""

#: ../../library/statistics.rst:755
msgid ""
"Spearman's correlation coefficient is appropriate for ordinal data or for "
"continuous data that doesn't meet the linear proportion requirement for "
"Pearson's correlation coefficient."
msgstr ""

#: ../../library/statistics.rst:759
msgid ""
"Both inputs must be of the same length (no less than two), and need not to "
"be constant, otherwise :exc:`StatisticsError` is raised."
msgstr ""

#: ../../library/statistics.rst:762
msgid ""
"Example with `Kepler's laws of planetary motion <https://en.wikipedia.org/"
"wiki/Kepler's_laws_of_planetary_motion>`_:"
msgstr ""

#: ../../library/statistics.rst:765
msgid ""
">>> # Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, and  Neptune\n"
">>> orbital_period = [88, 225, 365, 687, 4331, 10_756, 30_687, 60_190]    # "
"days\n"
">>> dist_from_sun = [58, 108, 150, 228, 778, 1_400, 2_900, 4_500] # million "
"km\n"
"\n"
">>> # Show that a perfect monotonic relationship exists\n"
">>> correlation(orbital_period, dist_from_sun, method='ranked')\n"
"1.0\n"
"\n"
">>> # Observe that a linear relationship is imperfect\n"
">>> round(correlation(orbital_period, dist_from_sun), 4)\n"
"0.9882\n"
"\n"
">>> # Demonstrate Kepler's third law: There is a linear correlation\n"
">>> # between the square of the orbital period and the cube of the\n"
">>> # distance from the sun.\n"
">>> period_squared = [p * p for p in orbital_period]\n"
">>> dist_cubed = [d * d * d for d in dist_from_sun]\n"
">>> round(correlation(period_squared, dist_cubed), 4)\n"
"1.0"
msgstr ""

#: ../../library/statistics.rst:789
msgid "Added support for Spearman's rank correlation coefficient."
msgstr ""

#: ../../library/statistics.rst:794
msgid ""
"Return the slope and intercept of `simple linear regression <https://en."
"wikipedia.org/wiki/Simple_linear_regression>`_ parameters estimated using "
"ordinary least squares. Simple linear regression describes the relationship "
"between an independent variable *x* and a dependent variable *y* in terms of "
"this linear function:"
msgstr ""

#: ../../library/statistics.rst:800
msgid "*y = slope \\* x + intercept + noise*"
msgstr ""

#: ../../library/statistics.rst:802
msgid ""
"where ``slope`` and ``intercept`` are the regression parameters that are "
"estimated, and ``noise`` represents the variability of the data that was not "
"explained by the linear regression (it is equal to the difference between "
"predicted and actual values of the dependent variable)."
msgstr ""

#: ../../library/statistics.rst:808
msgid ""
"Both inputs must be of the same length (no less than two), and the "
"independent variable *x* cannot be constant; otherwise a :exc:"
"`StatisticsError` is raised."
msgstr ""

#: ../../library/statistics.rst:812
msgid ""
"For example, we can use the `release dates of the Monty Python films "
"<https://en.wikipedia.org/wiki/Monty_Python#Films>`_ to predict the "
"cumulative number of Monty Python films that would have been produced by "
"2019 assuming that they had kept the pace."
msgstr ""

#: ../../library/statistics.rst:818
msgid ""
">>> year = [1971, 1975, 1979, 1982, 1983]\n"
">>> films_total = [1, 2, 3, 4, 5]\n"
">>> slope, intercept = linear_regression(year, films_total)\n"
">>> round(slope * 2019 + intercept)\n"
"16"
msgstr ""

#: ../../library/statistics.rst:826
msgid ""
"If *proportional* is true, the independent variable *x* and the dependent "
"variable *y* are assumed to be directly proportional. The data is fit to a "
"line passing through the origin. Since the *intercept* will always be 0.0, "
"the underlying linear function simplifies to:"
msgstr ""

#: ../../library/statistics.rst:832
msgid "*y = slope \\* x + noise*"
msgstr ""

#: ../../library/statistics.rst:834
msgid ""
"Continuing the example from :func:`correlation`, we look to see how well a "
"model based on major planets can predict the orbital distances for dwarf "
"planets:"
msgstr ""

#: ../../library/statistics.rst:838
msgid ""
">>> model = linear_regression(period_squared, dist_cubed, "
"proportional=True)\n"
">>> slope = model.slope\n"
"\n"
">>> # Dwarf planets:   Pluto,  Eris,    Makemake, Haumea, Ceres\n"
">>> orbital_periods = [90_560, 204_199, 111_845, 103_410, 1_680]  # days\n"
">>> predicted_dist = [math.cbrt(slope * (p * p)) for p in orbital_periods]\n"
">>> list(map(round, predicted_dist))\n"
"[5912, 10166, 6806, 6459, 414]\n"
"\n"
">>> [5_906, 10_152, 6_796, 6_450, 414]  # actual distance in million km\n"
"[5906, 10152, 6796, 6450, 414]"
msgstr ""

#: ../../library/statistics.rst:854
msgid "Added support for *proportional*."
msgstr ""

#: ../../library/statistics.rst:858
msgid "Exceptions"
msgstr "ExceÃ§Ãµes"

#: ../../library/statistics.rst:860
msgid "A single exception is defined:"
msgstr ""

#: ../../library/statistics.rst:864
msgid "Subclass of :exc:`ValueError` for statistics-related exceptions."
msgstr ""

#: ../../library/statistics.rst:868
msgid ":class:`NormalDist` objects"
msgstr ""

#: ../../library/statistics.rst:870
msgid ""
":class:`NormalDist` is a tool for creating and manipulating normal "
"distributions of a `random variable <http://www.stat.yale.edu/"
"Courses/1997-98/101/ranvar.htm>`_.  It is a class that treats the mean and "
"standard deviation of data measurements as a single entity."
msgstr ""

#: ../../library/statistics.rst:876
msgid ""
"Normal distributions arise from the `Central Limit Theorem <https://en."
"wikipedia.org/wiki/Central_limit_theorem>`_ and have a wide range of "
"applications in statistics."
msgstr ""

#: ../../library/statistics.rst:882
msgid ""
"Returns a new *NormalDist* object where *mu* represents the `arithmetic mean "
"<https://en.wikipedia.org/wiki/Arithmetic_mean>`_ and *sigma* represents the "
"`standard deviation <https://en.wikipedia.org/wiki/Standard_deviation>`_."
msgstr ""

#: ../../library/statistics.rst:887
msgid "If *sigma* is negative, raises :exc:`StatisticsError`."
msgstr ""

#: ../../library/statistics.rst:891
msgid ""
"A read-only property for the `arithmetic mean <https://en.wikipedia.org/wiki/"
"Arithmetic_mean>`_ of a normal distribution."
msgstr ""

#: ../../library/statistics.rst:897
msgid ""
"A read-only property for the `median <https://en.wikipedia.org/wiki/"
"Median>`_ of a normal distribution."
msgstr ""

#: ../../library/statistics.rst:903
msgid ""
"A read-only property for the `mode <https://en.wikipedia.org/wiki/"
"Mode_(statistics)>`_ of a normal distribution."
msgstr ""

#: ../../library/statistics.rst:909
msgid ""
"A read-only property for the `standard deviation <https://en.wikipedia.org/"
"wiki/Standard_deviation>`_ of a normal distribution."
msgstr ""

#: ../../library/statistics.rst:915
msgid ""
"A read-only property for the `variance <https://en.wikipedia.org/wiki/"
"Variance>`_ of a normal distribution. Equal to the square of the standard "
"deviation."
msgstr ""

#: ../../library/statistics.rst:921
msgid ""
"Makes a normal distribution instance with *mu* and *sigma* parameters "
"estimated from the *data* using :func:`fmean` and :func:`stdev`."
msgstr ""

#: ../../library/statistics.rst:924
msgid ""
"The *data* can be any :term:`iterable` and should consist of values that can "
"be converted to type :class:`float`.  If *data* does not contain at least "
"two elements, raises :exc:`StatisticsError` because it takes at least one "
"point to estimate a central value and at least two points to estimate "
"dispersion."
msgstr ""

#: ../../library/statistics.rst:932
msgid ""
"Generates *n* random samples for a given mean and standard deviation. "
"Returns a :class:`list` of :class:`float` values."
msgstr ""

#: ../../library/statistics.rst:935
msgid ""
"If *seed* is given, creates a new instance of the underlying random number "
"generator.  This is useful for creating reproducible results, even in a "
"multi-threading context."
msgstr ""

#: ../../library/statistics.rst:941
msgid ""
"Switched to a faster algorithm.  To reproduce samples from previous "
"versions, use :func:`random.seed` and :func:`random.gauss`."
msgstr ""

#: ../../library/statistics.rst:946
msgid ""
"Using a `probability density function (pdf) <https://en.wikipedia.org/wiki/"
"Probability_density_function>`_, compute the relative likelihood that a "
"random variable *X* will be near the given value *x*.  Mathematically, it is "
"the limit of the ratio ``P(x <= X < x+dx) / dx`` as *dx* approaches zero."
msgstr ""

#: ../../library/statistics.rst:952
msgid ""
"The relative likelihood is computed as the probability of a sample occurring "
"in a narrow range divided by the width of the range (hence the word "
"\"density\").  Since the likelihood is relative to other points, its value "
"can be greater than ``1.0``."
msgstr ""

#: ../../library/statistics.rst:959
msgid ""
"Using a `cumulative distribution function (cdf) <https://en.wikipedia.org/"
"wiki/Cumulative_distribution_function>`_, compute the probability that a "
"random variable *X* will be less than or equal to *x*.  Mathematically, it "
"is written ``P(X <= x)``."
msgstr ""

#: ../../library/statistics.rst:966
msgid ""
"Compute the inverse cumulative distribution function, also known as the "
"`quantile function <https://en.wikipedia.org/wiki/Quantile_function>`_ or "
"the `percent-point <https://web.archive.org/web/20190203145224/https://www."
"statisticshowto.datasciencecentral.com/inverse-distribution-function/>`_ "
"function.  Mathematically, it is written ``x : P(X <= x) = p``."
msgstr ""

#: ../../library/statistics.rst:972
msgid ""
"Finds the value *x* of the random variable *X* such that the probability of "
"the variable being less than or equal to that value equals the given "
"probability *p*."
msgstr ""

#: ../../library/statistics.rst:978
msgid ""
"Measures the agreement between two normal probability distributions. Returns "
"a value between 0.0 and 1.0 giving `the overlapping area for the two "
"probability density functions <https://www.rasch.org/rmt/rmt101r.htm>`_."
msgstr ""

#: ../../library/statistics.rst:985
msgid ""
"Divide the normal distribution into *n* continuous intervals with equal "
"probability.  Returns a list of (n - 1) cut points separating the intervals."
msgstr ""

#: ../../library/statistics.rst:989
msgid ""
"Set *n* to 4 for quartiles (the default).  Set *n* to 10 for deciles. Set "
"*n* to 100 for percentiles which gives the 99 cuts points that separate the "
"normal distribution into 100 equal sized groups."
msgstr ""

#: ../../library/statistics.rst:995
msgid ""
"Compute the `Standard Score <https://www.statisticshowto.com/probability-and-"
"statistics/z-score/>`_ describing *x* in terms of the number of standard "
"deviations above or below the mean of the normal distribution: ``(x - "
"mean) / stdev``."
msgstr ""

#: ../../library/statistics.rst:1003
msgid ""
"Instances of :class:`NormalDist` support addition, subtraction, "
"multiplication and division by a constant.  These operations are used for "
"translation and scaling.  For example:"
msgstr ""

#: ../../library/statistics.rst:1007
msgid ""
">>> temperature_february = NormalDist(5, 2.5)             # Celsius\n"
">>> temperature_february * (9/5) + 32                     # Fahrenheit\n"
"NormalDist(mu=41.0, sigma=4.5)"
msgstr ""

#: ../../library/statistics.rst:1013
msgid ""
"Dividing a constant by an instance of :class:`NormalDist` is not supported "
"because the result wouldn't be normally distributed."
msgstr ""

#: ../../library/statistics.rst:1016
msgid ""
"Since normal distributions arise from additive effects of independent "
"variables, it is possible to `add and subtract two independent normally "
"distributed random variables <https://en.wikipedia.org/wiki/"
"Sum_of_normally_distributed_random_variables>`_ represented as instances of :"
"class:`NormalDist`.  For example:"
msgstr ""

#: ../../library/statistics.rst:1022
msgid ""
">>> birth_weights = NormalDist.from_samples([2.5, 3.1, 2.1, 2.4, 2.7, 3.5])\n"
">>> drug_effects = NormalDist(0.4, 0.15)\n"
">>> combined = birth_weights + drug_effects\n"
">>> round(combined.mean, 1)\n"
"3.1\n"
">>> round(combined.stdev, 1)\n"
"0.5"
msgstr ""

#: ../../library/statistics.rst:1036
msgid "Examples and Recipes"
msgstr ""

#: ../../library/statistics.rst:1040
msgid "Classic probability problems"
msgstr ""

#: ../../library/statistics.rst:1042
msgid ":class:`NormalDist` readily solves classic probability problems."
msgstr ""

#: ../../library/statistics.rst:1044
msgid ""
"For example, given `historical data for SAT exams <https://nces.ed.gov/"
"programs/digest/d17/tables/dt17_226.40.asp>`_ showing that scores are "
"normally distributed with a mean of 1060 and a standard deviation of 195, "
"determine the percentage of students with test scores between 1100 and 1200, "
"after rounding to the nearest whole number:"
msgstr ""

#: ../../library/statistics.rst:1050
msgid ""
">>> sat = NormalDist(1060, 195)\n"
">>> fraction = sat.cdf(1200 + 0.5) - sat.cdf(1100 - 0.5)\n"
">>> round(fraction * 100.0, 1)\n"
"18.4"
msgstr ""

#: ../../library/statistics.rst:1057
msgid ""
"Find the `quartiles <https://en.wikipedia.org/wiki/Quartile>`_ and `deciles "
"<https://en.wikipedia.org/wiki/Decile>`_ for the SAT scores:"
msgstr ""

#: ../../library/statistics.rst:1060
msgid ""
">>> list(map(round, sat.quantiles()))\n"
"[928, 1060, 1192]\n"
">>> list(map(round, sat.quantiles(n=10)))\n"
"[810, 896, 958, 1011, 1060, 1109, 1162, 1224, 1310]"
msgstr ""

#: ../../library/statistics.rst:1069
msgid "Monte Carlo inputs for simulations"
msgstr ""

#: ../../library/statistics.rst:1071
msgid ""
"To estimate the distribution for a model that isn't easy to solve "
"analytically, :class:`NormalDist` can generate input samples for a `Monte "
"Carlo simulation <https://en.wikipedia.org/wiki/Monte_Carlo_method>`_:"
msgstr ""

#: ../../library/statistics.rst:1075
msgid ""
">>> def model(x, y, z):\n"
"...     return (3*x + 7*x*y - 5*y) / (11 * z)\n"
"...\n"
">>> n = 100_000\n"
">>> X = NormalDist(10, 2.5).samples(n, seed=3652260728)\n"
">>> Y = NormalDist(15, 1.75).samples(n, seed=4582495471)\n"
">>> Z = NormalDist(50, 1.25).samples(n, seed=6582483453)\n"
">>> quantiles(map(model, X, Y, Z))\n"
"[1.4591308524824727, 1.8035946855390597, 2.175091447274739]"
msgstr ""

#: ../../library/statistics.rst:1088
msgid "Approximating binomial distributions"
msgstr ""

#: ../../library/statistics.rst:1090
msgid ""
"Normal distributions can be used to approximate `Binomial distributions "
"<https://mathworld.wolfram.com/BinomialDistribution.html>`_ when the sample "
"size is large and when the probability of a successful trial is near 50%."
msgstr ""

#: ../../library/statistics.rst:1095
msgid ""
"For example, an open source conference has 750 attendees and two rooms with "
"a 500 person capacity.  There is a talk about Python and another about Ruby. "
"In previous conferences, 65% of the attendees preferred to listen to Python "
"talks.  Assuming the population preferences haven't changed, what is the "
"probability that the Python room will stay within its capacity limits?"
msgstr ""

#: ../../library/statistics.rst:1101
msgid ""
">>> n = 750             # Sample size\n"
">>> p = 0.65            # Preference for Python\n"
">>> q = 1.0 - p         # Preference for Ruby\n"
">>> k = 500             # Room capacity\n"
"\n"
">>> # Approximation using the cumulative normal distribution\n"
">>> from math import sqrt\n"
">>> round(NormalDist(mu=n*p, sigma=sqrt(n*p*q)).cdf(k + 0.5), 4)\n"
"0.8402\n"
"\n"
">>> # Exact solution using the cumulative binomial distribution\n"
">>> from math import comb, fsum\n"
">>> round(fsum(comb(n, r) * p**r * q**(n-r) for r in range(k+1)), 4)\n"
"0.8402\n"
"\n"
">>> # Approximation using a simulation\n"
">>> from random import seed, binomialvariate\n"
">>> seed(8675309)\n"
">>> mean(binomialvariate(n, p) <= k for i in range(10_000))\n"
"0.8406"
msgstr ""

#: ../../library/statistics.rst:1126
msgid "Naive bayesian classifier"
msgstr ""

#: ../../library/statistics.rst:1128
msgid "Normal distributions commonly arise in machine learning problems."
msgstr ""

#: ../../library/statistics.rst:1130
msgid ""
"Wikipedia has a `nice example of a Naive Bayesian Classifier <https://en."
"wikipedia.org/wiki/Naive_Bayes_classifier#Person_classification>`_. The "
"challenge is to predict a person's gender from measurements of normally "
"distributed features including height, weight, and foot size."
msgstr ""

#: ../../library/statistics.rst:1135
msgid ""
"We're given a training dataset with measurements for eight people.  The "
"measurements are assumed to be normally distributed, so we summarize the "
"data with :class:`NormalDist`:"
msgstr ""

#: ../../library/statistics.rst:1139
msgid ""
">>> height_male = NormalDist.from_samples([6, 5.92, 5.58, 5.92])\n"
">>> height_female = NormalDist.from_samples([5, 5.5, 5.42, 5.75])\n"
">>> weight_male = NormalDist.from_samples([180, 190, 170, 165])\n"
">>> weight_female = NormalDist.from_samples([100, 150, 130, 150])\n"
">>> foot_size_male = NormalDist.from_samples([12, 11, 12, 10])\n"
">>> foot_size_female = NormalDist.from_samples([6, 8, 7, 9])"
msgstr ""

#: ../../library/statistics.rst:1148
msgid ""
"Next, we encounter a new person whose feature measurements are known but "
"whose gender is unknown:"
msgstr ""

#: ../../library/statistics.rst:1151
msgid ""
">>> ht = 6.0        # height\n"
">>> wt = 130        # weight\n"
">>> fs = 8          # foot size"
msgstr ""

#: ../../library/statistics.rst:1157
msgid ""
"Starting with a 50% `prior probability <https://en.wikipedia.org/wiki/"
"Prior_probability>`_ of being male or female, we compute the posterior as "
"the prior times the product of likelihoods for the feature measurements "
"given the gender:"
msgstr ""

#: ../../library/statistics.rst:1162
msgid ""
">>> prior_male = 0.5\n"
">>> prior_female = 0.5\n"
">>> posterior_male = (prior_male * height_male.pdf(ht) *\n"
"...                   weight_male.pdf(wt) * foot_size_male.pdf(fs))\n"
"\n"
">>> posterior_female = (prior_female * height_female.pdf(ht) *\n"
"...                     weight_female.pdf(wt) * foot_size_female.pdf(fs))"
msgstr ""

#: ../../library/statistics.rst:1172
msgid ""
"The final prediction goes to the largest posterior. This is known as the "
"`maximum a posteriori <https://en.wikipedia.org/wiki/"
"Maximum_a_posteriori_estimation>`_ or MAP:"
msgstr ""

#: ../../library/statistics.rst:1176
msgid ""
">>> 'male' if posterior_male > posterior_female else 'female'\n"
"'female'"
msgstr ""
