# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-24 14:16+0000\n"
"PO-Revision-Date: 2021-06-28 01:05+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/email.mime.rst:2
msgid ":mod:`!email.mime`: Creating email and MIME objects from scratch"
msgstr ""
":mod:`!email.mime`:mod:`email.mime`: Criando e-mail e objetos MIME do zero"

#: ../../library/email.mime.rst:7
msgid "**Source code:** :source:`Lib/email/mime/`"
msgstr "**Código-fonte:** :source:`Lib/email/mime/`"

#: ../../library/email.mime.rst:11
msgid ""
"This module is part of the legacy (``Compat32``) email API.  Its "
"functionality is partially replaced by the :mod:`~email.contentmanager` in "
"the new API, but in certain applications these classes may still be useful, "
"even in non-legacy code."
msgstr ""
"Este módulo faz parte da API de e-mail legada (``Compat32``). Sua "
"funcionalidade é parcialmente substituída por :mod:`~email.contentmanager` "
"na nova API, mas em certos aplicativos essas classes ainda podem ser úteis, "
"mesmo em código não legado."

#: ../../library/email.mime.rst:16
msgid ""
"Ordinarily, you get a message object structure by passing a file or some "
"text to a parser, which parses the text and returns the root message "
"object.  However you can also build a complete message structure from "
"scratch, or even individual :class:`~email.message.Message` objects by "
"hand.  In fact, you can also take an existing structure and add new :class:"
"`~email.message.Message` objects, move them around, etc.  This makes a very "
"convenient interface for slicing-and-dicing MIME messages."
msgstr ""
"Normalmente, você obtém uma estrutura de objeto de mensagem passando um "
"arquivo ou algum texto para um analisador sintático, que analisa o texto e "
"retorna o objeto de mensagem raiz. No entanto, você também pode criar uma "
"estrutura de mensagem completa do zero, ou até objetos individuais de :class:"
"`~email.message.Message` manualmente. De fato, você também pode pegar uma "
"estrutura existente e adicionar novos objetos :class:`~email.message."
"Message`, movê-los, etc. Isso cria uma interface muito conveniente para "
"fatiar e cortar dados de mensagens MIME."

#: ../../library/email.mime.rst:24
msgid ""
"You can create a new object structure by creating :class:`~email.message."
"Message` instances, adding attachments and all the appropriate headers "
"manually.  For MIME messages though, the :mod:`email` package provides some "
"convenient subclasses to make things easier."
msgstr ""
"Você pode criar uma nova estrutura de objeto criando instâncias de :class:"
"`~email.message.Message`, adicionando anexos e todos os cabeçalhos "
"apropriados manualmente. Porém, para mensagens MIME, o pacote :mod:`email` "
"fornece algumas subclasses convenientes para facilitar as coisas."

#: ../../library/email.mime.rst:29
msgid "Here are the classes:"
msgstr "Arquivo estão as classes:"

#: ../../library/email.mime.rst:35
msgid "Module: :mod:`email.mime.base`"
msgstr "Módulo: :mod:`email.mime.base`"

#: ../../library/email.mime.rst:37
msgid ""
"This is the base class for all the MIME-specific subclasses of :class:"
"`~email.message.Message`.  Ordinarily you won't create instances "
"specifically of :class:`MIMEBase`, although you could.  :class:`MIMEBase` is "
"provided primarily as a convenient base class for more specific MIME-aware "
"subclasses."
msgstr ""
"Esta é a classe base para todas as subclasses específicas de MIME de :class:"
"`~email.message.Message`. Normalmente você não criará instâncias "
"especificamente de :class:`MIMEBase`, embora possa. A :class:`MIMEBase` é "
"fornecida principalmente como uma classe base conveniente para subclasses "
"mais específicas para MIME."

#: ../../library/email.mime.rst:43
msgid ""
"*_maintype* is the :mailheader:`Content-Type` major type (e.g. :mimetype:"
"`text` or :mimetype:`image`), and *_subtype* is the :mailheader:`Content-"
"Type` minor type  (e.g. :mimetype:`plain` or :mimetype:`gif`).  *_params* is "
"a parameter key/value dictionary and is passed directly to :meth:`Message."
"add_header <email.message.Message.add_header>`."
msgstr ""
"*_maintype* é o tipo principal de :mailheader:`Content-Type` (ex., :mimetype:"
"`text` ou :mimetype:`image`) e *_subtype* é o tipo principal de :mailheader:"
"`Content-Type` (ex., :mimetype:`plain` ou :mimetype:`gif`). *_params* é um "
"dicionário de parâmetros chave/valor e é passado diretamente para :meth:"
"`Message.add_header <email.message.Message.add_header>`."

#: ../../library/email.mime.rst:49
msgid ""
"If *policy* is specified, (defaults to the :class:`compat32 <email.policy."
"Compat32>` policy) it will be passed to :class:`~email.message.Message`."
msgstr ""
"Se *policy* for especificado, (o padrão é a política :class:`compat32 <email."
"policy.Compat32>`) será passado para :class:`~email.message.Message`."

#: ../../library/email.mime.rst:53
msgid ""
"The :class:`MIMEBase` class always adds a :mailheader:`Content-Type` header "
"(based on *_maintype*, *_subtype*, and *_params*), and a :mailheader:`MIME-"
"Version` header (always set to ``1.0``)."
msgstr ""
"A classe :class:`MIMEBase` sempre adiciona um cabeçalho :mailheader:`Content-"
"Type` (com base em *_maintype*, *_subtype* e *_params*) e um cabeçalho :"
"mailheader:`MIME-Version` (sempre definido como ``1.0``)."

#: ../../library/email.mime.rst:57 ../../library/email.mime.rst:104
#: ../../library/email.mime.rst:135 ../../library/email.mime.rst:169
#: ../../library/email.mime.rst:205 ../../library/email.mime.rst:225
#: ../../library/email.mime.rst:259
msgid "Added *policy* keyword-only parameter."
msgstr "Adicionado o parâmetro somente-nomeado *policy*."

#: ../../library/email.mime.rst:65
msgid "Module: :mod:`email.mime.nonmultipart`"
msgstr "Módulo: :mod:`email.mime.nonmultipart`"

#: ../../library/email.mime.rst:67
msgid ""
"A subclass of :class:`~email.mime.base.MIMEBase`, this is an intermediate "
"base class for MIME messages that are not :mimetype:`multipart`.  The "
"primary purpose of this class is to prevent the use of the :meth:`~email."
"message.Message.attach` method, which only makes sense for :mimetype:"
"`multipart` messages.  If :meth:`~email.message.Message.attach` is called, "
"a :exc:`~email.errors.MultipartConversionError` exception is raised."
msgstr ""
"Uma subclasse de :class:`~email.mime.base.MIMEBase`, esta é uma classe base "
"intermediária para mensagens MIME que não são :mimetype:`multipart`. O "
"principal objetivo desta classe é impedir o uso do método :meth:`~email."
"message.Message.attach`, que só faz sentido para mensagens :mimetype:"
"`multipart`. Se :meth:`~email.message.Message.attach` for chamado, uma "
"exceção :exc:`~email.errors.MultipartConversionError` será levantada."

#: ../../library/email.mime.rst:80
msgid "Module: :mod:`email.mime.multipart`"
msgstr "Módulo: :mod:`email.mime.multipart`"

#: ../../library/email.mime.rst:82
msgid ""
"A subclass of :class:`~email.mime.base.MIMEBase`, this is an intermediate "
"base class for MIME messages that are :mimetype:`multipart`.  Optional "
"*_subtype* defaults to :mimetype:`mixed`, but can be used to specify the "
"subtype of the message.  A :mailheader:`Content-Type` header of :mimetype:"
"`multipart/_subtype` will be added to the message object.  A :mailheader:"
"`MIME-Version` header will also be added."
msgstr ""
"Uma subclasse de :class:`~email.mime.base.MIMEBase`, esta é uma classe base "
"intermediária para mensagens MIME que são :mimetype:`multipart`. O "
"*_subtype* opcional é padronizado como :mimetype:`mixed`, mas pode ser usado "
"para especificar o subtipo da mensagem. Um cabeçalho :mailheader:`Content-"
"Type` de :mimetype:`multipart/_subtype` será adicionado ao objeto da "
"mensagem. Um cabeçalho :mailheader:`MIME-Version` também será adicionado."

#: ../../library/email.mime.rst:89
msgid ""
"Optional *boundary* is the multipart boundary string.  When ``None`` (the "
"default), the boundary is calculated when needed (for example, when the "
"message is serialized)."
msgstr ""
"O *boundary* opcional é a string de limites de várias partes. Quando "
"``None`` (o padrão), o limite é calculado quando necessário (por exemplo, "
"quando a mensagem é serializada)."

#: ../../library/email.mime.rst:93
msgid ""
"*_subparts* is a sequence of initial subparts for the payload.  It must be "
"possible to convert this sequence to a list.  You can always attach new "
"subparts to the message by using the :meth:`Message.attach <email.message."
"Message.attach>` method."
msgstr ""
"*_subparts* é uma sequência de subpartes iniciais para a carga. Deve ser "
"possível converter essa sequência em uma lista. Você sempre pode anexar "
"novas subpartes à mensagem usando o método :meth:`Message.attach <email."
"message.Message.attach>`."

#: ../../library/email.mime.rst:98 ../../library/email.mime.rst:131
#: ../../library/email.mime.rst:165 ../../library/email.mime.rst:200
#: ../../library/email.mime.rst:223 ../../library/email.mime.rst:254
msgid ""
"Optional *policy* argument defaults to :class:`compat32 <email.policy."
"Compat32>`."
msgstr ""
"O argumento opcional *policy* tem como padrão :class:`compat32 <email.policy."
"Compat32>`."

#: ../../library/email.mime.rst:100
msgid ""
"Additional parameters for the :mailheader:`Content-Type` header are taken "
"from the keyword arguments, or passed into the *_params* argument, which is "
"a keyword dictionary."
msgstr ""
"Parâmetros adicionais para o cabeçalho :mailheader:`Content-Type` são "
"retirados dos argumentos nomeados ou passados ​​para o argumento *_params*, "
"que é um dicionário."

#: ../../library/email.mime.rst:113
msgid "Module: :mod:`email.mime.application`"
msgstr "Módulo: :mod:`email.mime.application`"

#: ../../library/email.mime.rst:115
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEApplication` class is used to represent MIME message objects of major "
"type :mimetype:`application`.  *_data* contains the bytes for the raw "
"application data.  Optional *_subtype* specifies the MIME subtype and "
"defaults to :mimetype:`octet-stream`."
msgstr ""
"Uma subclasse de :class:`~email.mime.nonmultipart.MIMENonMultipart`, a "
"classe :class:`MIMEApplication` é usada para representar objetos de mensagem "
"MIME do tipo principal :mimetype:`application`. *_data* contém os bytes para "
"os dados brutos da aplicação. O *_subtype* opcional especifica o subtipo "
"MIME e o padrão é :mimetype:`octet-stream`."

#: ../../library/email.mime.rst:121
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the data for transport.  This callable takes one "
"argument, which is the :class:`MIMEApplication` instance. It should use :"
"meth:`~email.message.Message.get_payload` and :meth:`~email.message.Message."
"set_payload` to change the payload to encoded form.  It should also add any :"
"mailheader:`Content-Transfer-Encoding` or other headers to the message "
"object as necessary.  The default encoding is base64.  See the :mod:`email."
"encoders` module for a list of the built-in encoders."
msgstr ""
"O *_encoder* opcional é um chamável (isto é, função) que executará a "
"codificação real dos dados para transporte. Esse chamável requer um "
"argumento, que é a instância :class:`MIMEApplication`. Ele deve usar :meth:"
"`~email.message.Message.get_payload` e :meth:`~email.message.Message."
"set_payload` para alterar a carga útil para o formulário codificado. Também "
"deve adicionar :mailheader:`Content-Transfer-Encoding` ou outros cabeçalhos "
"ao objeto de mensagem, conforme necessário. A codificação padrão é base64. "
"Veja o módulo :mod:`email.encoders` para obter uma lista dos codificadores "
"embutidos."

#: ../../library/email.mime.rst:133 ../../library/email.mime.rst:167
msgid "*_params* are passed straight through to the base class constructor."
msgstr "*_params* são passados diretamente para o construtor da classe base."

#: ../../library/email.mime.rst:144
msgid "Module: :mod:`email.mime.audio`"
msgstr "Módulo: :mod:`email.mime.audio`"

#: ../../library/email.mime.rst:146
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEAudio` class is used to create MIME message objects of major type :"
"mimetype:`audio`. *_audiodata* contains the bytes for the raw audio data.  "
"If this data can be decoded as au, wav, aiff, or aifc, then the subtype will "
"be automatically included in the :mailheader:`Content-Type` header. "
"Otherwise you can explicitly specify the audio subtype via the *_subtype* "
"argument.  If the minor type could not be guessed and *_subtype* was not "
"given, then :exc:`TypeError` is raised."
msgstr ""
"Uma subclasse de :class:`~email.mime.nonmultipart.MIMENonMultipart`, a "
"classe :class:`MIMEAudio` é usada para criar objetos de mensagem MIME do "
"tipo principal :mimetype:`audio`. *_audiodata* contpem os bytes para os "
"dados brutos de áudio. Se esses dados puderem ser decodificados como au, "
"wav, aiff ou aifc, então o subtipo será automaticamente incluído no "
"cabeçalho :mailheader:`Content-Type`. Caso contrário, você pode especificar "
"explicitamente o subtipo de áudio por meio do argumento *_subtype*. Se o "
"tipo menor não pôde ser adivinhado e *_subtype* não foi fornecido, então um "
"exceção :exc:`TypeError` é levantada."

#: ../../library/email.mime.rst:155
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the audio data for transport.  This callable takes one "
"argument, which is the :class:`MIMEAudio` instance. It should use :meth:"
"`~email.message.Message.get_payload` and :meth:`~email.message.Message."
"set_payload` to change the payload to encoded form.  It should also add any :"
"mailheader:`Content-Transfer-Encoding` or other headers to the message "
"object as necessary.  The default encoding is base64.  See the :mod:`email."
"encoders` module for a list of the built-in encoders."
msgstr ""
"O *_encoder* opcional é um chamável (ou seja, função) que executará a "
"codificação real dos dados de áudio para transporte. Esse chamável requer um "
"argumento, que é a instância :class:`MIMEAudio`. Ele deve usar :meth:`~email."
"message.Message.get_payload` e :meth:`~email.message.Message.set_payload` "
"para alterar a carga útil para a forma codificada. Também deve adicionar :"
"mailheader:`Content-Transfer-Encoding` ou outros cabeçalhos ao objeto de "
"mensagem, conforme necessário. A codificação padrão é base64. Veja o módulo :"
"mod:`email.encoders` para obter uma lista dos codificadores embutidos."

#: ../../library/email.mime.rst:178
msgid "Module: :mod:`email.mime.image`"
msgstr "Módulo: :mod:`email.mime.image`"

#: ../../library/email.mime.rst:180
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEImage` class is used to create MIME message objects of major type :"
"mimetype:`image`. *_imagedata* contains the bytes for the raw image data.  "
"If this data type can be detected (jpeg, png, gif, tiff, rgb, pbm, pgm, ppm, "
"rast, xbm, bmp, webp, and exr attempted), then the subtype will be "
"automatically included in the :mailheader:`Content-Type` header. Otherwise "
"you can explicitly specify the image subtype via the *_subtype* argument. If "
"the minor type could not be guessed and *_subtype* was not given, then :exc:"
"`TypeError` is raised."
msgstr ""

#: ../../library/email.mime.rst:190
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the image data for transport.  This callable takes one "
"argument, which is the :class:`MIMEImage` instance. It should use :meth:"
"`~email.message.Message.get_payload` and :meth:`~email.message.Message."
"set_payload` to change the payload to encoded form.  It should also add any :"
"mailheader:`Content-Transfer-Encoding` or other headers to the message "
"object as necessary.  The default encoding is base64.  See the :mod:`email."
"encoders` module for a list of the built-in encoders."
msgstr ""

#: ../../library/email.mime.rst:202
msgid ""
"*_params* are passed straight through to the :class:`~email.mime.base."
"MIMEBase` constructor."
msgstr ""

#: ../../library/email.mime.rst:212
msgid "Module: :mod:`email.mime.message`"
msgstr ""

#: ../../library/email.mime.rst:214
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEMessage` class is used to create MIME objects of main type :mimetype:"
"`message`. *_msg* is used as the payload, and must be an instance of class :"
"class:`~email.message.Message` (or a subclass thereof), otherwise a :exc:"
"`TypeError` is raised."
msgstr ""

#: ../../library/email.mime.rst:220
msgid ""
"Optional *_subtype* sets the subtype of the message; it defaults to :"
"mimetype:`rfc822`."
msgstr ""

#: ../../library/email.mime.rst:232
msgid "Module: :mod:`email.mime.text`"
msgstr "Módulo: :mod:`email.mime.text`"

#: ../../library/email.mime.rst:234
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEText` class is used to create MIME objects of major type :mimetype:"
"`text`. *_text* is the string for the payload.  *_subtype* is the minor type "
"and defaults to :mimetype:`plain`.  *_charset* is the character set of the "
"text and is passed as an argument to the :class:`~email.mime.nonmultipart."
"MIMENonMultipart` constructor; it defaults to ``us-ascii`` if the string "
"contains only ``ascii`` code points, and ``utf-8`` otherwise.  The "
"*_charset* parameter accepts either a string or a :class:`~email.charset."
"Charset` instance."
msgstr ""

#: ../../library/email.mime.rst:244
msgid ""
"Unless the *_charset* argument is explicitly set to ``None``, the MIMEText "
"object created will have both a :mailheader:`Content-Type` header with a "
"``charset`` parameter, and a :mailheader:`Content-Transfer-Encoding` "
"header.  This means that a subsequent ``set_payload`` call will not result "
"in an encoded payload, even if a charset is passed in the ``set_payload`` "
"command.  You can \"reset\" this behavior by deleting the ``Content-Transfer-"
"Encoding`` header, after which a ``set_payload`` call will automatically "
"encode the new payload (and add a new :mailheader:`Content-Transfer-"
"Encoding` header)."
msgstr ""

#: ../../library/email.mime.rst:256
msgid "*_charset* also accepts :class:`~email.charset.Charset` instances."
msgstr ""
