# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2021
# Humberto Rocha <humrochagf@gmail.com>, 2021
# Raphael Mendonça, 2021
# Italo Penaforte <italo.penaforte@gmail.com>, 2021
# i17obot <i17obot@rougeth.com>, 2021
# Vinicius Gubiani Ferreira <vini.g.fer@gmail.com>, 2021
# Adorilson Bezerra <adorilson@gmail.com>, 2022
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-22 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:54+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/asyncio-eventloop.rst:8
msgid "Event Loop"
msgstr "Laço de Eventos"

#: ../../library/asyncio-eventloop.rst:10
msgid ""
"**Source code:** :source:`Lib/asyncio/events.py`, :source:`Lib/asyncio/"
"base_events.py`"
msgstr ""
"**Código-fonte:** :source:`Lib/asyncio/events.py`, :source:`Lib/asyncio/"
"base_events.py`"

#: ../../library/asyncio-eventloop.rst:16
msgid "Preface"
msgstr "Prefácio"

#: ../../library/asyncio-eventloop.rst:17
msgid ""
"The event loop is the core of every asyncio application. Event loops run "
"asynchronous tasks and callbacks, perform network IO operations, and run "
"subprocesses."
msgstr ""
"O laço de eventos é o núcleo de toda aplicação asyncio. Laços de eventos "
"executam tarefas e funções de retorno assíncronas, realizam operações de "
"entrada e saída e executam subprocessos."

#: ../../library/asyncio-eventloop.rst:21
msgid ""
"Application developers should typically use the high-level asyncio "
"functions, such as :func:`asyncio.run`, and should rarely need to reference "
"the loop object or call its methods.  This section is intended mostly for "
"authors of lower-level code, libraries, and frameworks, who need finer "
"control over the event loop behavior."
msgstr ""
"Os desenvolvedores de aplicação normalmente devem usar as funções asyncio de "
"alto nível, como :func:`asyncio.run`, e devem raramente precisar fazer "
"referência ao objeto de loop ou chamar seus métodos. Esta seção destina-se "
"principalmente a autores de código de baixo nível, bibliotecas e frameworks, "
"que precisam de um controle mais preciso sobre o comportamento do laço de "
"evento."

#: ../../library/asyncio-eventloop.rst:28
msgid "Obtaining the Event Loop"
msgstr "Obtendo o laço de eventos"

#: ../../library/asyncio-eventloop.rst:29
msgid ""
"The following low-level functions can be used to get, set, or create an "
"event loop:"
msgstr ""
"As seguintes funções baixo nível podem ser usadas para obter, definir, ou "
"criar um laço de eventos:"

#: ../../library/asyncio-eventloop.rst:34
msgid "Return the running event loop in the current OS thread."
msgstr ""
"Retorna o laço de eventos em execução na thread atual do sistema operacional."

#: ../../library/asyncio-eventloop.rst:36
msgid "Raise a :exc:`RuntimeError` if there is no running event loop."
msgstr ""
"Levanta uma :exc:`RuntimeError` se não houver nenhum laço de eventos em "
"execução."

#: ../../library/asyncio-eventloop.rst:38
msgid "This function can only be called from a coroutine or a callback."
msgstr ""
"Esta função só pode ser chamada a partir de uma corrotina ou de um retorno "
"de chamada."

#: ../../library/asyncio-eventloop.rst:44
msgid "Get the current event loop."
msgstr "Obtém o laço de eventos atual."

#: ../../library/asyncio-eventloop.rst:46
msgid ""
"When called from a coroutine or a callback (e.g. scheduled with call_soon or "
"similar API), this function will always return the running event loop."
msgstr ""
"Quando chamada de uma corrotina ou função de retorno (por exemplo, agendada "
"com call_soon ou API semelhante), esta função sempre retornará o laço de "
"eventos em execução."

#: ../../library/asyncio-eventloop.rst:50
msgid ""
"If there is no running event loop set, the function will return the result "
"of the ``get_event_loop_policy().get_event_loop()`` call."
msgstr ""
"Se não houver nenhum laço de eventos em execução definido, a função "
"retornará o resultado da chamada ``get_event_loop_policy()."
"get_event_loop()``."

#: ../../library/asyncio-eventloop.rst:53
msgid ""
"Because this function has rather complex behavior (especially when custom "
"event loop policies are in use), using the :func:`get_running_loop` function "
"is preferred to :func:`get_event_loop` in coroutines and callbacks."
msgstr ""
"Devido ao fato desta função ter um comportamento particularmente complexo "
"(especialmente quando políticas de laço de eventos customizadas estão sendo "
"usadas), usar a função :func:`get_running_loop` é preferido ao invés de :"
"func:`get_event_loop` em corrotinas e funções de retorno."

#: ../../library/asyncio-eventloop.rst:58
msgid ""
"As noted above, consider using the higher-level :func:`asyncio.run` "
"function, instead of using these lower level functions to manually create "
"and close an event loop."
msgstr ""
"Como observado acima, considere usar também a função de alto nível :func:"
"`asyncio.run` ao invés de usar funções de baixo nível para manualmente criar "
"e fechar um laço de eventos."

#: ../../library/asyncio-eventloop.rst:62
msgid ""
"Deprecation warning is emitted if there is no current event loop. In some "
"future Python release this will become an error."
msgstr ""
"Um aviso de descontinuação é emitido se não houver nenhum laço de eventos "
"atual. Em alguma versão futura do Python, isso se tornará um erro."

#: ../../library/asyncio-eventloop.rst:68
msgid "Set *loop* as the current event loop for the current OS thread."
msgstr ""
"Define *loop* como o laço de eventos atual para a thread atual do sistema "
"operacional."

#: ../../library/asyncio-eventloop.rst:72
msgid "Create and return a new event loop object."
msgstr "Cria e retorna um novo objeto de laço de eventos."

#: ../../library/asyncio-eventloop.rst:74
msgid ""
"Note that the behaviour of :func:`get_event_loop`, :func:`set_event_loop`, "
"and :func:`new_event_loop` functions can be altered by :ref:`setting a "
"custom event loop policy <asyncio-policies>`."
msgstr ""
"Perceba que o comportamento das funções :func:`get_event_loop`, :func:"
"`set_event_loop`, e :func:`new_event_loop` podem ser alteradas :ref:"
"`definindo uma política de laço de eventos customizada <asyncio-policies>`."

#: ../../library/asyncio-eventloop.rst:80
msgid "Contents"
msgstr "Conteúdo"

#: ../../library/asyncio-eventloop.rst:81
msgid "This documentation page contains the following sections:"
msgstr "Esta página de documentação contém as seguintes seções:"

#: ../../library/asyncio-eventloop.rst:83
msgid ""
"The `Event Loop Methods`_ section is the reference documentation of the "
"event loop APIs;"
msgstr ""
"A seção `Métodos do laço de eventos`_ é a documentação de referência das "
"APIs de laço de eventos;"

#: ../../library/asyncio-eventloop.rst:86
msgid ""
"The `Callback Handles`_ section documents the :class:`Handle` and :class:"
"`TimerHandle` instances which are returned from scheduling methods such as :"
"meth:`loop.call_soon` and :meth:`loop.call_later`;"
msgstr ""
"A seção `Tratadores de função de retorno`_ documenta as instâncias das "
"classes :class:`Handle` e :class:`TimerHandle`, que são retornadas por "
"métodos de agendamento tais como :meth:`loop.call_soon` e :meth:`loop."
"call_later`;"

#: ../../library/asyncio-eventloop.rst:90
msgid ""
"The `Server Objects`_ section documents types returned from event loop "
"methods like :meth:`loop.create_server`;"
msgstr ""
"A seção `Objetos Server`_ documenta tipos retornados a partir de métodos de "
"laço de eventos, como :meth:`loop.create_server`;"

#: ../../library/asyncio-eventloop.rst:93
msgid ""
"The `Event Loop Implementations`_ section documents the :class:"
"`SelectorEventLoop` and :class:`ProactorEventLoop` classes;"
msgstr ""
"A seção `Implementações do Laço de Eventos`_ documenta as classes :class:"
"`SelectorEventLoop` e :class:`ProactorEventLoop`;"

#: ../../library/asyncio-eventloop.rst:96
msgid ""
"The `Examples`_ section showcases how to work with some event loop APIs."
msgstr ""
"A seção `Exemplos`_ demonstra como trabalhar com algumas APIs do laço de "
"eventos APIs."

#: ../../library/asyncio-eventloop.rst:103
msgid "Event Loop Methods"
msgstr "Métodos do laço de eventos"

#: ../../library/asyncio-eventloop.rst:105
msgid "Event loops have **low-level** APIs for the following:"
msgstr ""
"Laços de eventos possuem APIs de **baixo nível** para as seguintes situações:"

#: ../../library/asyncio-eventloop.rst:113
msgid "Running and stopping the loop"
msgstr "Executar e interromper o laço"

#: ../../library/asyncio-eventloop.rst:117
msgid "Run until the *future* (an instance of :class:`Future`) has completed."
msgstr ""
"Executar até que o *future* (uma instância da classe :class:`Future`) seja "
"completada."

#: ../../library/asyncio-eventloop.rst:120
msgid ""
"If the argument is a :ref:`coroutine object <coroutine>` it is implicitly "
"scheduled to run as a :class:`asyncio.Task`."
msgstr ""
"Se o argumento é um :ref:`objeto corrotina <coroutine>`, ele é "
"implicitamente agendado para executar como uma :class:`asyncio.Task`."

#: ../../library/asyncio-eventloop.rst:123
msgid "Return the Future's result or raise its exception."
msgstr "Retorna o resultado do Future ou levanta sua exceção."

#: ../../library/asyncio-eventloop.rst:127
msgid "Run the event loop until :meth:`stop` is called."
msgstr "Executa o laço de eventos até que :meth:`stop` seja chamado."

#: ../../library/asyncio-eventloop.rst:129
msgid ""
"If :meth:`stop` is called before :meth:`run_forever` is called, the loop "
"will poll the I/O selector once with a timeout of zero, run all callbacks "
"scheduled in response to I/O events (and those that were already scheduled), "
"and then exit."
msgstr ""

#: ../../library/asyncio-eventloop.rst:134
msgid ""
"If :meth:`stop` is called while :meth:`run_forever` is running, the loop "
"will run the current batch of callbacks and then exit. Note that new "
"callbacks scheduled by callbacks will not run in this case; instead, they "
"will run the next time :meth:`run_forever` or :meth:`run_until_complete` is "
"called."
msgstr ""
"Se :meth:`stop` for chamado enquanto :meth:`run_forever` estiver executando, "
"o laço irá executar o lote atual de funções de retorno e então sair. Perceba "
"que novas funções de retorno agendadas por funções de retorno não serão "
"executadas neste caso; ao invés disso, elas serão executadas na próxima vez "
"que :meth:`run_forever` ou :meth:`run_until_complete` forem chamadas."

#: ../../library/asyncio-eventloop.rst:142
msgid "Stop the event loop."
msgstr "Para o laço de eventos."

#: ../../library/asyncio-eventloop.rst:146
msgid "Return ``True`` if the event loop is currently running."
msgstr "Retorna ``True`` se o laço de eventos estiver em execução."

#: ../../library/asyncio-eventloop.rst:150
msgid "Return ``True`` if the event loop was closed."
msgstr "Retorna ``True`` se o laço de eventos foi fechado."

#: ../../library/asyncio-eventloop.rst:154
msgid "Close the event loop."
msgstr "Fecha o laço de eventos."

#: ../../library/asyncio-eventloop.rst:156
msgid ""
"The loop must not be running when this function is called. Any pending "
"callbacks will be discarded."
msgstr ""
"O laço não deve estar em execução quando esta função for chamada. Qualquer "
"função de retorno pendente será descartada."

#: ../../library/asyncio-eventloop.rst:159
msgid ""
"This method clears all queues and shuts down the executor, but does not wait "
"for the executor to finish."
msgstr ""
"Este método limpa todas as filas e desliga o executor, mas não aguarda pelo "
"encerramento do executor."

#: ../../library/asyncio-eventloop.rst:162
msgid ""
"This method is idempotent and irreversible.  No other methods should be "
"called after the event loop is closed."
msgstr ""
"Este método é idempotente e irreversível. Nenhum outro método deve ser "
"chamado depois que o laço de eventos esteja fechado."

#: ../../library/asyncio-eventloop.rst:167
msgid ""
"Schedule all currently open :term:`asynchronous generator` objects to close "
"with an :meth:`~agen.aclose` call.  After calling this method, the event "
"loop will issue a warning if a new asynchronous generator is iterated. This "
"should be used to reliably finalize all scheduled asynchronous generators."
msgstr ""

#: ../../library/asyncio-eventloop.rst:173
msgid ""
"Note that there is no need to call this function when :func:`asyncio.run` is "
"used."
msgstr ""
"Perceba que não é necessário chamar esta função quando :func:`asyncio.run` "
"for usado."

#: ../../library/asyncio-eventloop.rst:176
#: ../../library/asyncio-eventloop.rst:1269
#: ../../library/asyncio-eventloop.rst:1712
msgid "Example::"
msgstr "Exemplo::"

#: ../../library/asyncio-eventloop.rst:178
msgid ""
"try:\n"
"    loop.run_forever()\n"
"finally:\n"
"    loop.run_until_complete(loop.shutdown_asyncgens())\n"
"    loop.close()"
msgstr ""

#: ../../library/asyncio-eventloop.rst:188
msgid ""
"Schedule the closure of the default executor and wait for it to join all of "
"the threads in the :class:`~concurrent.futures.ThreadPoolExecutor`. Once "
"this method has been called, using the default executor with :meth:`loop."
"run_in_executor` will raise a :exc:`RuntimeError`."
msgstr ""
"Agenda o encerramento do executor padrão e aguarda ele se juntar a todas as "
"threads no :class:`~concurrent.futures.ThreadPoolExecutor`. Uma vez que este "
"método tenha sido chamado, usar o executor padrão com :meth:`loop."
"run_in_executor` levantará um :exc:`RuntimeError`."

#: ../../library/asyncio-eventloop.rst:194
msgid ""
"The *timeout* parameter specifies the amount of time (in :class:`float` "
"seconds) the executor will be given to finish joining. With the default, "
"``None``, the executor is allowed an unlimited amount of time."
msgstr ""
"O parâmetro *timeout* especifica a quantidade de tempo (em :class:`float` "
"segundos) que o executor terá para terminar a junção. Com o padrão ``None``, "
"o executor tem permissão para um período de tempo ilimitado."

#: ../../library/asyncio-eventloop.rst:199
msgid ""
"If the *timeout* is reached, a :exc:`RuntimeWarning` is emitted and the "
"default executor is terminated without waiting for its threads to finish "
"joining."
msgstr ""
"Se o *timeout* for atingido, uma exceção :exc:`RuntimeWarning` será emitida "
"e o executor padrão será finalizado sem esperar que suas threads terminem a "
"junção."

#: ../../library/asyncio-eventloop.rst:205
msgid ""
"Do not call this method when using :func:`asyncio.run`, as the latter "
"handles default executor shutdown automatically."
msgstr ""

#: ../../library/asyncio-eventloop.rst:210
msgid "Added the *timeout* parameter."
msgstr ""

#: ../../library/asyncio-eventloop.rst:214
msgid "Scheduling callbacks"
msgstr "Agendando funções de retorno"

#: ../../library/asyncio-eventloop.rst:218
msgid ""
"Schedule the *callback* :term:`callback` to be called with *args* arguments "
"at the next iteration of the event loop."
msgstr ""
"Agenda a *função de retorno* :term:`callback` para ser chamada com "
"argumentos *args* na próxima iteração do laço de eventos."

#: ../../library/asyncio-eventloop.rst:221
msgid ""
"Return an instance of :class:`asyncio.Handle`, which can be used later to "
"cancel the callback."
msgstr ""

#: ../../library/asyncio-eventloop.rst:224
msgid ""
"Callbacks are called in the order in which they are registered. Each "
"callback will be called exactly once."
msgstr ""
"Funções de retorno são chamadas na ordem em que elas foram registradas. Cada "
"função de retorno será chamada exatamente uma vez."

#: ../../library/asyncio-eventloop.rst:227
msgid ""
"The optional keyword-only *context* argument specifies a custom :class:"
"`contextvars.Context` for the *callback* to run in. Callbacks use the "
"current context when no *context* is provided."
msgstr ""

#: ../../library/asyncio-eventloop.rst:231
msgid "Unlike :meth:`call_soon_threadsafe`, this method is not thread-safe."
msgstr ""

#: ../../library/asyncio-eventloop.rst:235
msgid ""
"A thread-safe variant of :meth:`call_soon`. When scheduling callbacks from "
"another thread, this function *must* be used, since :meth:`call_soon` is not "
"thread-safe."
msgstr ""

#: ../../library/asyncio-eventloop.rst:239
msgid ""
"Raises :exc:`RuntimeError` if called on a loop that's been closed. This can "
"happen on a secondary thread when the main application is shutting down."
msgstr ""
"Levanta :exc:`RuntimeError` se chamado em um laço que já foi fechado. Isto "
"pode acontecer em uma thread secundária quando a aplicação principal estiver "
"desligando."

#: ../../library/asyncio-eventloop.rst:243
msgid ""
"See the :ref:`concurrency and multithreading <asyncio-multithreading>` "
"section of the documentation."
msgstr ""
"Veja a seção :ref:`concorrência e multithreading <asyncio-multithreading>` "
"da documentação."

#: ../../library/asyncio-eventloop.rst:246
#: ../../library/asyncio-eventloop.rst:296
#: ../../library/asyncio-eventloop.rst:316
msgid ""
"The *context* keyword-only parameter was added. See :pep:`567` for more "
"details."
msgstr ""
"O parâmetro somente-nomeado *context* foi adicionado. Veja :pep:`567` para "
"mais detalhes."

#: ../../library/asyncio-eventloop.rst:254
msgid ""
"Most :mod:`asyncio` scheduling functions don't allow passing keyword "
"arguments.  To do that, use :func:`functools.partial`::"
msgstr ""
"Maior parte das funções de agendamento :mod:`asyncio` não permite passar "
"argumentos nomeados. Para fazer isso, use :func:`functools.partial`::"

#: ../../library/asyncio-eventloop.rst:257
msgid ""
"# will schedule \"print(\"Hello\", flush=True)\"\n"
"loop.call_soon(\n"
"    functools.partial(print, \"Hello\", flush=True))"
msgstr ""

#: ../../library/asyncio-eventloop.rst:261
msgid ""
"Using partial objects is usually more convenient than using lambdas, as "
"asyncio can render partial objects better in debug and error messages."
msgstr ""
"Usar objetos parciais é usualmente mais conveniente que usar lambdas, pois "
"asyncio pode renderizar objetos parciais melhor durante debug e mensagens de "
"erro."

#: ../../library/asyncio-eventloop.rst:269
msgid "Scheduling delayed callbacks"
msgstr "Agendando funções de retorno atrasadas"

#: ../../library/asyncio-eventloop.rst:271
msgid ""
"Event loop provides mechanisms to schedule callback functions to be called "
"at some point in the future.  Event loop uses monotonic clocks to track time."
msgstr ""
"Laço de eventos fornece mecanismos para agendar funções de retorno para "
"serem chamadas em algum ponto no futuro. Laço de eventos usa relógios "
"monotônico para acompanhar o tempo."

#: ../../library/asyncio-eventloop.rst:278
msgid ""
"Schedule *callback* to be called after the given *delay* number of seconds "
"(can be either an int or a float)."
msgstr ""
"Agenda *callback* para ser chamada após o *delay* número de segundos "
"fornecido (pode ser um inteiro ou um ponto flutuante)."

#: ../../library/asyncio-eventloop.rst:281
#: ../../library/asyncio-eventloop.rst:313
msgid ""
"An instance of :class:`asyncio.TimerHandle` is returned which can be used to "
"cancel the callback."
msgstr ""
"Uma instância de :class:`asyncio.TimerHandle` é retornada, a qual pode ser "
"usada para cancelar a função de retorno."

#: ../../library/asyncio-eventloop.rst:284
msgid ""
"*callback* will be called exactly once.  If two callbacks are scheduled for "
"exactly the same time, the order in which they are called is undefined."
msgstr ""
"*callback* será chamada exatamente uma vez. Se duas funções de retorno são "
"agendadas para exatamente o mesmo tempo, a ordem na qual elas são chamadas é "
"indefinida."

#: ../../library/asyncio-eventloop.rst:288
msgid ""
"The optional positional *args* will be passed to the callback when it is "
"called. If you want the callback to be called with keyword arguments use :"
"func:`functools.partial`."
msgstr ""
"O *args* posicional opcional será passado para a função de retorno quando "
"ela for chamada. Se você quiser que a função de retorno seja chamada com "
"argumentos nomeados, use :func:`functools.partial`."

#: ../../library/asyncio-eventloop.rst:292
msgid ""
"An optional keyword-only *context* argument allows specifying a custom :"
"class:`contextvars.Context` for the *callback* to run in. The current "
"context is used when no *context* is provided."
msgstr ""
"Um argumento opcional somente-nomeado *context* permite especificar um :"
"class:`contextvars.Context` customizado para executar na *função de "
"retorno*. O contexto atual é usado quando nenhum *context* é fornecido."

#: ../../library/asyncio-eventloop.rst:300
msgid ""
"In Python 3.7 and earlier with the default event loop implementation, the "
"*delay* could not exceed one day. This has been fixed in Python 3.8."
msgstr ""
"No Python 3.7 e anterior, com a implementação padrão do laço de eventos, o "
"*delay* não poderia exceder um dia. Isto foi ajustado no Python 3.8."

#: ../../library/asyncio-eventloop.rst:307
msgid ""
"Schedule *callback* to be called at the given absolute timestamp *when* (an "
"int or a float), using the same time reference as :meth:`loop.time`."
msgstr ""
"Agenda *callback* para ser chamada no timestamp absoluto fornecido *when* "
"(um inteiro ou um ponto flutuante), usando o mesmo horário de referência "
"que :meth:`loop.time`."

#: ../../library/asyncio-eventloop.rst:311
msgid "This method's behavior is the same as :meth:`call_later`."
msgstr "O comportamento deste método é o mesmo que :meth:`call_later`."

#: ../../library/asyncio-eventloop.rst:320
msgid ""
"In Python 3.7 and earlier with the default event loop implementation, the "
"difference between *when* and the current time could not exceed one day.  "
"This has been fixed in Python 3.8."
msgstr ""
"No Python 3.7 e anterior, com a implementação padrão do laço de eventos, a "
"diferença entre *when* e o horário atual não poderia exceder um dia. Isto "
"foi ajustado no Python 3.8."

#: ../../library/asyncio-eventloop.rst:327
msgid ""
"Return the current time, as a :class:`float` value, according to the event "
"loop's internal monotonic clock."
msgstr ""
"Retorna o horário atual, como um valor :class:`float`, de acordo com o "
"relógio monotônico interno do laço de eventos."

#: ../../library/asyncio-eventloop.rst:331
msgid ""
"In Python 3.7 and earlier timeouts (relative *delay* or absolute *when*) "
"should not exceed one day.  This has been fixed in Python 3.8."
msgstr ""
"No Python 3.7 e anterior, tempos limites (*delay* relativo ou *when* "
"absoluto) não poderiam exceder um dia. Isto foi ajustado no Python 3.8."

#: ../../library/asyncio-eventloop.rst:337
msgid "The :func:`asyncio.sleep` function."
msgstr "A função :func:`asyncio.sleep`."

#: ../../library/asyncio-eventloop.rst:341
msgid "Creating Futures and Tasks"
msgstr "Criando Futures e Tasks"

#: ../../library/asyncio-eventloop.rst:345
msgid "Create an :class:`asyncio.Future` object attached to the event loop."
msgstr "Cria um objeto :class:`asyncio.Future` atachado ao laço de eventos."

#: ../../library/asyncio-eventloop.rst:347
msgid ""
"This is the preferred way to create Futures in asyncio. This lets third-"
"party event loops provide alternative implementations of the Future object "
"(with better performance or instrumentation)."
msgstr ""
"Este é o modo preferido para criar Futures em asyncio. Isto permite que "
"laços de eventos de terceiros forneçam implementações alternativas do objeto "
"Future (com melhor desempenho ou instrumentação)."

#: ../../library/asyncio-eventloop.rst:355
msgid ""
"Schedule the execution of :ref:`coroutine <coroutine>` *coro*. Return a :"
"class:`Task` object."
msgstr ""

#: ../../library/asyncio-eventloop.rst:358
msgid ""
"Third-party event loops can use their own subclass of :class:`Task` for "
"interoperability. In this case, the result type is a subclass of :class:"
"`Task`."
msgstr ""
"Laços de eventos de terceiros podem usar suas próprias subclasses de :class:"
"`Task` para interoperabilidade. Neste caso, o tipo do resultado é uma "
"subclasse de :class:`Task`."

#: ../../library/asyncio-eventloop.rst:362
msgid ""
"If the *name* argument is provided and not ``None``, it is set as the name "
"of the task using :meth:`Task.set_name`."
msgstr ""
"Se o argumento *name* for fornecido e não é ``None``, ele é definido como o "
"nome da tarefa, usando :meth:`Task.set_name`."

#: ../../library/asyncio-eventloop.rst:365
msgid ""
"An optional keyword-only *context* argument allows specifying a custom :"
"class:`contextvars.Context` for the *coro* to run in. The current context "
"copy is created when no *context* is provided."
msgstr ""

#: ../../library/asyncio-eventloop.rst:369
msgid "Added the *name* parameter."
msgstr "Adicionado o parâmetro *name*."

#: ../../library/asyncio-eventloop.rst:372
msgid "Added the *context* parameter."
msgstr "Adicionado o parâmetro *context*."

#: ../../library/asyncio-eventloop.rst:377
msgid "Set a task factory that will be used by :meth:`loop.create_task`."
msgstr ""
"Define a factory da tarefa que será usada por :meth:`loop.create_task`."

#: ../../library/asyncio-eventloop.rst:380
msgid ""
"If *factory* is ``None`` the default task factory will be set. Otherwise, "
"*factory* must be a *callable* with the signature matching ``(loop, coro, "
"context=None)``, where *loop* is a reference to the active event loop, and "
"*coro* is a coroutine object.  The callable must return a :class:`asyncio."
"Future`-compatible object."
msgstr ""

#: ../../library/asyncio-eventloop.rst:388
msgid "Return a task factory or ``None`` if the default one is in use."
msgstr ""
"Retorna uma factory de tarefa ou ``None`` se a factory padrão estiver em uso."

#: ../../library/asyncio-eventloop.rst:392
msgid "Opening network connections"
msgstr "Abrindo conexões de rede"

#: ../../library/asyncio-eventloop.rst:403
msgid ""
"Open a streaming transport connection to a given address specified by *host* "
"and *port*."
msgstr ""
"Abre uma conexão de transporte para streaming, para um endereço fornecido, "
"especificado por *host* e *port*."

#: ../../library/asyncio-eventloop.rst:406
msgid ""
"The socket family can be either :py:const:`~socket.AF_INET` or :py:const:"
"`~socket.AF_INET6` depending on *host* (or the *family* argument, if "
"provided)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:410
msgid "The socket type will be :py:const:`~socket.SOCK_STREAM`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:412
#: ../../library/asyncio-eventloop.rst:1180
#: ../../library/asyncio-eventloop.rst:1196
msgid ""
"*protocol_factory* must be a callable returning an :ref:`asyncio protocol "
"<asyncio-protocol>` implementation."
msgstr ""
"*protocol_factory* deve ser um chamável que retorne uma implementação do :"
"ref:`protocolo asyncio <asyncio-protocol>`."

#: ../../library/asyncio-eventloop.rst:415
msgid ""
"This method will try to establish the connection in the background. When "
"successful, it returns a ``(transport, protocol)`` pair."
msgstr ""
"Este método tentará estabelecer a conexão em segundo plano. Quando tiver "
"sucesso, ele retorna um par ``(transport, protocol)``."

#: ../../library/asyncio-eventloop.rst:418
msgid "The chronological synopsis of the underlying operation is as follows:"
msgstr "A sinopse cronológica da operação subjacente é conforme abaixo:"

#: ../../library/asyncio-eventloop.rst:420
msgid ""
"The connection is established and a :ref:`transport <asyncio-transport>` is "
"created for it."
msgstr ""
"A conexão é estabelecida e um :ref:`transporte <asyncio-transport>` é criado "
"para ela."

#: ../../library/asyncio-eventloop.rst:423
msgid ""
"*protocol_factory* is called without arguments and is expected to return a :"
"ref:`protocol <asyncio-protocol>` instance."
msgstr ""
"*protocol_factory* é chamada sem argumentos e é esperada que retorne uma "
"instância de :ref:`protocolo <asyncio-protocol>`."

#: ../../library/asyncio-eventloop.rst:426
msgid ""
"The protocol instance is coupled with the transport by calling its :meth:"
"`~BaseProtocol.connection_made` method."
msgstr ""
"A instância de protocolo é acoplada com o transporte, através da chamada do "
"seu método :meth:`~BaseProtocol.connection_made`."

#: ../../library/asyncio-eventloop.rst:429
msgid "A ``(transport, protocol)`` tuple is returned on success."
msgstr "Uma tupla ``(transport, protocol)`` é retornada ao ter sucesso."

#: ../../library/asyncio-eventloop.rst:431
msgid ""
"The created transport is an implementation-dependent bidirectional stream."
msgstr ""
"O transporte criado é um stream bi-direcional dependente de implementação."

#: ../../library/asyncio-eventloop.rst:434
#: ../../library/asyncio-eventloop.rst:566
msgid "Other arguments:"
msgstr "Outros argumentos:"

#: ../../library/asyncio-eventloop.rst:436
msgid ""
"*ssl*: if given and not false, a SSL/TLS transport is created (by default a "
"plain TCP transport is created).  If *ssl* is a :class:`ssl.SSLContext` "
"object, this context is used to create the transport; if *ssl* is :const:"
"`True`, a default context returned from :func:`ssl.create_default_context` "
"is used."
msgstr ""
"*ssl*: se fornecido e não for falso, um transporte SSL/TLS é criado (por "
"padrão um transporte TCP simples é criado). Se *ssl* for um objeto :class:"
"`ssl.SSLContext`, este contexto é usado para criar o transporte; se *ssl* "
"for :const:`True`, um contexto padrão retornado de :func:`ssl."
"create_default_context` é usado."

#: ../../library/asyncio-eventloop.rst:442
msgid ":ref:`SSL/TLS security considerations <ssl-security>`"
msgstr ":ref:`Considerações de segurança sobre SSL/TLS <ssl-security>`"

#: ../../library/asyncio-eventloop.rst:444
msgid ""
"*server_hostname* sets or overrides the hostname that the target server's "
"certificate will be matched against.  Should only be passed if *ssl* is not "
"``None``.  By default the value of the *host* argument is used.  If *host* "
"is empty, there is no default and you must pass a value for "
"*server_hostname*.  If *server_hostname* is an empty string, hostname "
"matching is disabled (which is a serious security risk, allowing for "
"potential man-in-the-middle attacks)."
msgstr ""
"*server_hostname* define ou substitui o hostname que o certificado do "
"servidor de destino será pareado contra. Deve ser passado apenas se *ssl* "
"não for ``None``. Por padrão o valor do argumento *host* é usado. Se *host* "
"for vazio, não existe valor padrão e você deve passar um valor para "
"*server_hostname*. Se *server_hostname* for uma string vazia, o pareamento "
"de hostname é desabilitado (o que é um risco de segurança sério, permitindo "
"ataques potenciais man-in-the-middle)."

#: ../../library/asyncio-eventloop.rst:452
msgid ""
"*family*, *proto*, *flags* are the optional address family, protocol and "
"flags to be passed through to getaddrinfo() for *host* resolution. If given, "
"these should all be integers from the corresponding :mod:`socket` module "
"constants."
msgstr ""
"*family*, *proto*, *flags* são os endereços familiares, protocolos e "
"sinalizadores opcionais a serem passados por getaddrinfo() para resolução do "
"*host*. Se fornecidos, eles devem ser todos inteiros e constantes "
"correspondentes do módulo :mod:`socket`."

#: ../../library/asyncio-eventloop.rst:457
msgid ""
"*happy_eyeballs_delay*, if given, enables Happy Eyeballs for this "
"connection. It should be a floating-point number representing the amount of "
"time in seconds to wait for a connection attempt to complete, before "
"starting the next attempt in parallel. This is the \"Connection Attempt "
"Delay\" as defined in :rfc:`8305`. A sensible default value recommended by "
"the RFC is ``0.25`` (250 milliseconds)."
msgstr ""
"*happy_eyeballs_delay*, se fornecido, habilita Happy Eyeballs para esta "
"conexão. Ele deve ser um número de ponto flutuante representando o tempo em "
"segundos para aguardar uma tentativa de conexão encerrar, antes de começar a "
"próxima tentativa em paralelo. Este é o \"Atraso na tentativa de conexão\" "
"conforme definido na :rfc:`8305`. Um valor padrão sensível recomendado pela "
"RFC é ``0.25`` (250 millisegundos)."

#: ../../library/asyncio-eventloop.rst:465
msgid ""
"*interleave* controls address reordering when a host name resolves to "
"multiple IP addresses. If ``0`` or unspecified, no reordering is done, and "
"addresses are tried in the order returned by :meth:`getaddrinfo`. If a "
"positive integer is specified, the addresses are interleaved by address "
"family, and the given integer is interpreted as \"First Address Family "
"Count\" as defined in :rfc:`8305`. The default is ``0`` if "
"*happy_eyeballs_delay* is not specified, and ``1`` if it is."
msgstr ""
"*interleave* controla o reordenamento de endereços quando um nome de "
"servidor resolve para múltiplos endereços IP. Se ``0`` ou não especificado, "
"nenhum reordenamento é feito, e endereços são tentados na ordem retornada "
"por :meth:`getaddrinfo`. Se um inteiro positivo for especificado, os "
"endereços são intercalados por um endereço familiar, e o inteiro fornecido é "
"interpretado como \"Contagem da família do primeiro endereço\" conforme "
"definido na :rfc:`8305`. O padrão é ``0`` se *happy_eyeballs_delay* não for "
"especificado, e ``1`` se ele for."

#: ../../library/asyncio-eventloop.rst:474
msgid ""
"*sock*, if given, should be an existing, already connected :class:`socket."
"socket` object to be used by the transport. If *sock* is given, none of "
"*host*, *port*, *family*, *proto*, *flags*, *happy_eyeballs_delay*, "
"*interleave* and *local_addr* should be specified."
msgstr ""
"*sock*, se fornecido, deve ser um objeto :class:`socket.socket` já "
"existente, já conectado, para ser usado por transporte. Se *sock* é "
"fornecido, *host*, *port*, *family*, *proto*, *flags*, "
"*happy_eyeballs_delay*, *interleave* e *local_addr* não devem ser "
"especificados."

#: ../../library/asyncio-eventloop.rst:482
#: ../../library/asyncio-eventloop.rst:597
#: ../../library/asyncio-eventloop.rst:841
msgid ""
"The *sock* argument transfers ownership of the socket to the transport "
"created. To close the socket, call the transport's :meth:`~asyncio."
"BaseTransport.close` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:486
msgid ""
"*local_addr*, if given, is a ``(local_host, local_port)`` tuple used to bind "
"the socket locally.  The *local_host* and *local_port* are looked up using "
"``getaddrinfo()``, similarly to *host* and *port*."
msgstr ""
"*local_addr*, se fornecido, é uma tupla de ``(local_host, local_port)`` "
"usada para se ligar ao soquete localmente. O *local_host* e a *local_port* "
"são procurados usando ``getaddrinfo()``, de forma similar para *host* e "
"*port*."

#: ../../library/asyncio-eventloop.rst:490
#: ../../library/asyncio-eventloop.rst:935
msgid ""
"*ssl_handshake_timeout* is (for a TLS connection) the time in seconds to "
"wait for the TLS handshake to complete before aborting the connection. "
"``60.0`` seconds if ``None`` (default)."
msgstr ""
"*ssl_handshake_timeout* é (para uma conexão TLS) o tempo em segundos para "
"aguardar pelo encerramento do aperto de mão TLS, antes de abortar a conexão. "
"``60.0`` segundos se for ``None`` (valor padrão)."

#: ../../library/asyncio-eventloop.rst:494
#: ../../library/asyncio-eventloop.rst:750
#: ../../library/asyncio-eventloop.rst:852
#: ../../library/asyncio-eventloop.rst:939
msgid ""
"*ssl_shutdown_timeout* is the time in seconds to wait for the SSL shutdown "
"to complete before aborting the connection. ``30.0`` seconds if ``None`` "
"(default)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:498
msgid ""
"*all_errors* determines what exceptions are raised when a connection cannot "
"be created. By default, only a single ``Exception`` is raised: the first "
"exception if there is only one or all errors have same message, or a single "
"``OSError`` with the error messages combined. When ``all_errors`` is "
"``True``, an ``ExceptionGroup`` will be raised containing all exceptions "
"(even if there is only one)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:508
#: ../../library/asyncio-eventloop.rst:762
msgid "Added support for SSL/TLS in :class:`ProactorEventLoop`."
msgstr "Adicionado suporte para SSL/TLS na :class:`ProactorEventLoop`."

#: ../../library/asyncio-eventloop.rst:512
msgid ""
"The socket option :ref:`socket.TCP_NODELAY <socket-unix-constants>` is set "
"by default for all TCP connections."
msgstr ""

#: ../../library/asyncio-eventloop.rst:517
#: ../../library/asyncio-eventloop.rst:862
msgid "Added the *ssl_handshake_timeout* parameter."
msgstr "Adicionado o parâmetro *ssl_handshake_timeout*."

#: ../../library/asyncio-eventloop.rst:521
msgid "Added the *happy_eyeballs_delay* and *interleave* parameters."
msgstr "Adicionados os parâmetros *happy_eyeballs_delay* e *interleave*."

#: ../../library/asyncio-eventloop.rst:523
msgid ""
"Happy Eyeballs Algorithm: Success with Dual-Stack Hosts. When a server's "
"IPv4 path and protocol are working, but the server's IPv6 path and protocol "
"are not working, a dual-stack client application experiences significant "
"connection delay compared to an IPv4-only client.  This is undesirable "
"because it causes the dual-stack client to have a worse user experience.  "
"This document specifies requirements for algorithms that reduce this user-"
"visible delay and provides an algorithm."
msgstr ""

#: ../../library/asyncio-eventloop.rst:532
msgid "For more information: https://datatracker.ietf.org/doc/html/rfc6555"
msgstr ""

#: ../../library/asyncio-eventloop.rst:536
#: ../../library/asyncio-eventloop.rst:660
#: ../../library/asyncio-eventloop.rst:776
#: ../../library/asyncio-eventloop.rst:815
#: ../../library/asyncio-eventloop.rst:866
#: ../../library/asyncio-eventloop.rst:947
msgid "Added the *ssl_shutdown_timeout* parameter."
msgstr ""

#: ../../library/asyncio-eventloop.rst:538
msgid "*all_errors* was added."
msgstr ""

#: ../../library/asyncio-eventloop.rst:543
msgid ""
"The :func:`open_connection` function is a high-level alternative API.  It "
"returns a pair of (:class:`StreamReader`, :class:`StreamWriter`) that can be "
"used directly in async/await code."
msgstr ""
"A função :func:`open_connection` é uma API alternativa de alto nível. Ela "
"retorna um par de (:class:`StreamReader`, :class:`StreamWriter`) que pode "
"ser usado diretamente em código async/await."

#: ../../library/asyncio-eventloop.rst:553
msgid "Create a datagram connection."
msgstr "Cria uma conexão de datagrama."

#: ../../library/asyncio-eventloop.rst:555
msgid ""
"The socket family can be either :py:const:`~socket.AF_INET`, :py:const:"
"`~socket.AF_INET6`, or :py:const:`~socket.AF_UNIX`, depending on *host* (or "
"the *family* argument, if provided)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:559
msgid "The socket type will be :py:const:`~socket.SOCK_DGRAM`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:561
#: ../../library/asyncio-eventloop.rst:686
#: ../../library/asyncio-eventloop.rst:833
msgid ""
"*protocol_factory* must be a callable returning a :ref:`protocol <asyncio-"
"protocol>` implementation."
msgstr ""
"*protocol_factory* deve ser algo chamável, retornando uma implementação de :"
"ref:`protocolo <asyncio-protocol>`."

#: ../../library/asyncio-eventloop.rst:564
#: ../../library/asyncio-eventloop.rst:642
msgid "A tuple of ``(transport, protocol)`` is returned on success."
msgstr "Uma tupla de ``(transport, protocol)`` é retornada em caso de sucesso."

#: ../../library/asyncio-eventloop.rst:568
msgid ""
"*local_addr*, if given, is a ``(local_host, local_port)`` tuple used to bind "
"the socket locally.  The *local_host* and *local_port* are looked up using :"
"meth:`getaddrinfo`."
msgstr ""
"*local_addr*, se fornecido, é uma tupla de ``(local_host, local_port)`` "
"usada para ligar o soquete localmente. O *local_host* e a *local_port* são "
"procurados usando :meth:`getaddrinfo`."

#: ../../library/asyncio-eventloop.rst:572
msgid ""
"*remote_addr*, if given, is a ``(remote_host, remote_port)`` tuple used to "
"connect the socket to a remote address.  The *remote_host* and *remote_port* "
"are looked up using :meth:`getaddrinfo`."
msgstr ""
"*remote_addr*, se fornecido, é uma tupla de ``(remote_host, remote_port)`` "
"usada para conectar o soquete a um endereço remoto. O *remote_host* e a "
"*remote_port* são procurados usando :meth:`getaddrinfo`."

#: ../../library/asyncio-eventloop.rst:576
msgid ""
"*family*, *proto*, *flags* are the optional address family, protocol and "
"flags to be passed through to :meth:`getaddrinfo` for *host* resolution. If "
"given, these should all be integers from the corresponding :mod:`socket` "
"module constants."
msgstr ""
"*family*, *proto*, *flags* são os endereços familiares, protocolo e flags "
"opcionais a serem passados para :meth:`getaddrinfo` para resolução do "
"*host*. Se fornecido, esses devem ser todos inteiros do módulo de "
"constantes :mod:`socket` correspondente."

#: ../../library/asyncio-eventloop.rst:581
msgid ""
"*reuse_port* tells the kernel to allow this endpoint to be bound to the same "
"port as other existing endpoints are bound to, so long as they all set this "
"flag when being created. This option is not supported on Windows and some "
"Unixes. If the :ref:`socket.SO_REUSEPORT <socket-unix-constants>` constant "
"is not defined then this capability is unsupported."
msgstr ""

#: ../../library/asyncio-eventloop.rst:587
msgid ""
"*allow_broadcast* tells the kernel to allow this endpoint to send messages "
"to the broadcast address."
msgstr ""
"*allow_broadcast* avisa o kernel para permitir que este endpoint envie "
"mensagens para o endereço de broadcast."

#: ../../library/asyncio-eventloop.rst:590
msgid ""
"*sock* can optionally be specified in order to use a preexisting, already "
"connected, :class:`socket.socket` object to be used by the transport. If "
"specified, *local_addr* and *remote_addr* should be omitted (must be :const:"
"`None`)."
msgstr ""
"*sock* pode opcionalmente ser especificado em ordem para usar um objeto :"
"class:`socket.socket` pre-existente, já conectado, para ser usado pelo "
"transporte. Se especificado, *local_addr* e *remote_addr* devem ser omitidos "
"(devem ser :const:`None`)."

#: ../../library/asyncio-eventloop.rst:601
msgid ""
"See :ref:`UDP echo client protocol <asyncio-udp-echo-client-protocol>` and :"
"ref:`UDP echo server protocol <asyncio-udp-echo-server-protocol>` examples."
msgstr ""
"Veja :ref:`protocolo UDP eco cliente <asyncio-udp-echo-client-protocol>` e :"
"ref:`protocolo UDP eco servidor <asyncio-udp-echo-server-protocol>` para "
"exemplos."

#: ../../library/asyncio-eventloop.rst:604
msgid ""
"The *family*, *proto*, *flags*, *reuse_address*, *reuse_port*, "
"*allow_broadcast*, and *sock* parameters were added."
msgstr ""

#: ../../library/asyncio-eventloop.rst:608
msgid "Added support for Windows."
msgstr "Adicionado suporte para Windows."

#: ../../library/asyncio-eventloop.rst:611
msgid ""
"The *reuse_address* parameter is no longer supported, as using :ref:`socket."
"SO_REUSEADDR <socket-unix-constants>` poses a significant security concern "
"for UDP. Explicitly passing ``reuse_address=True`` will raise an exception."
msgstr ""

#: ../../library/asyncio-eventloop.rst:617
msgid ""
"When multiple processes with differing UIDs assign sockets to an identical "
"UDP socket address with ``SO_REUSEADDR``, incoming packets can become "
"randomly distributed among the sockets."
msgstr ""
"Quando múltiplos processos com diferentes UIDs atribuem soquetes para um "
"endereço de soquete UDP idêntico com ``SO_REUSEADDR``, pacotes recebidos "
"podem ser distribuídos aleatoriamente entre os soquetes."

#: ../../library/asyncio-eventloop.rst:621
msgid ""
"For supported platforms, *reuse_port* can be used as a replacement for "
"similar functionality. With *reuse_port*, :ref:`socket.SO_REUSEPORT <socket-"
"unix-constants>` is used instead, which specifically prevents processes with "
"differing UIDs from assigning sockets to the same socket address."
msgstr ""

#: ../../library/asyncio-eventloop.rst:628
msgid ""
"The *reuse_address* parameter, disabled since Python 3.8.1, 3.7.6 and "
"3.6.10, has been entirely removed."
msgstr ""

#: ../../library/asyncio-eventloop.rst:637
msgid "Create a Unix connection."
msgstr "Cria uma conexão Unix."

#: ../../library/asyncio-eventloop.rst:639
msgid ""
"The socket family will be :py:const:`~socket.AF_UNIX`; socket type will be :"
"py:const:`~socket.SOCK_STREAM`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:644
msgid ""
"*path* is the name of a Unix domain socket and is required, unless a *sock* "
"parameter is specified.  Abstract Unix sockets, :class:`str`, :class:"
"`bytes`, and :class:`~pathlib.Path` paths are supported."
msgstr ""
"*path* é o nome de um soquete de domínio Unix e é obrigatório, a não ser que "
"um parâmetro *sock* seja esecificado. Soquetes Unix abstratos, :class:"
"`str`, :class:`bytes`, e caminhos :class:`~pathlib.Path` são suportados."

#: ../../library/asyncio-eventloop.rst:649
msgid ""
"See the documentation of the :meth:`loop.create_connection` method for "
"information about arguments to this method."
msgstr ""
"Veja a documentação do método :meth:`loop.create_connection` para "
"informações a respeito de argumentos para este método."

#: ../../library/asyncio-eventloop.rst:652
#: ../../library/asyncio-eventloop.rst:806
#: ../../library/asyncio-eventloop.rst:1249
#: ../../library/asyncio-eventloop.rst:1782
#: ../../library/asyncio-eventloop.rst:1789
msgid "Availability"
msgstr "Availability"

#: ../../library/asyncio-eventloop.rst:654
msgid ""
"Added the *ssl_handshake_timeout* parameter. The *path* parameter can now be "
"a :term:`path-like object`."
msgstr ""
"Adicionado o parâmetro *ssl_handshake_timeout*. O parâmetro *path* agora "
"pode ser um :term:`path-like object`."

#: ../../library/asyncio-eventloop.rst:664
msgid "Creating network servers"
msgstr "Criando servidores de rede"

#: ../../library/asyncio-eventloop.rst:679
msgid ""
"Create a TCP server (socket type :const:`~socket.SOCK_STREAM`) listening on "
"*port* of the *host* address."
msgstr ""

#: ../../library/asyncio-eventloop.rst:682
msgid "Returns a :class:`Server` object."
msgstr "Retorna um objeto :class:`Server`."

#: ../../library/asyncio-eventloop.rst:684
msgid "Arguments:"
msgstr "Argumentos:"

#: ../../library/asyncio-eventloop.rst:689
msgid ""
"The *host* parameter can be set to several types which determine where the "
"server would be listening:"
msgstr ""
"O parâmetro *host* pode ser definido para diversos tipos, o qual determina "
"onde o servidor deve escutar:"

#: ../../library/asyncio-eventloop.rst:692
msgid ""
"If *host* is a string, the TCP server is bound to a single network interface "
"specified by *host*."
msgstr ""
"Se *host* for uma string, o servidor TCP está vinculado a apenas uma "
"interface de rede, especificada por *host*."

#: ../../library/asyncio-eventloop.rst:695
msgid ""
"If *host* is a sequence of strings, the TCP server is bound to all network "
"interfaces specified by the sequence."
msgstr ""
"Se *host* é uma sequência de strings, o servidor TCP está vinculado a todas "
"as interfaces de rede especificadas pela sequência."

#: ../../library/asyncio-eventloop.rst:698
msgid ""
"If *host* is an empty string or ``None``, all interfaces are assumed and a "
"list of multiple sockets will be returned (most likely one for IPv4 and "
"another one for IPv6)."
msgstr ""
"Se *host* é uma string vazia ou ``None``, todas as interfaces são presumidas "
"e uma lista de múltiplos soquetes será retornada (muito provavelmente um "
"para IPv4 e outro para IPv6)."

#: ../../library/asyncio-eventloop.rst:702
msgid ""
"The *port* parameter can be set to specify which port the server should "
"listen on. If ``0`` or ``None`` (the default), a random unused port will be "
"selected (note that if *host* resolves to multiple network interfaces, a "
"different random port will be selected for each interface)."
msgstr ""
"O parâmetro *port* pode ser definido para especificar qual porta o servidor "
"deve escutar. Se ``0`` ou ``None`` (o padrão), uma porta aleatória "
"disponível será selecionada (note que se *host* resolve para múltiplas "
"interfaces de rede, uma porta aleatória diferente será selecionada para cada "
"interface)."

#: ../../library/asyncio-eventloop.rst:707
msgid ""
"*family* can be set to either :const:`socket.AF_INET` or :const:`~socket."
"AF_INET6` to force the socket to use IPv4 or IPv6. If not set, the *family* "
"will be determined from host name (defaults to :const:`~socket.AF_UNSPEC`)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:712
msgid "*flags* is a bitmask for :meth:`getaddrinfo`."
msgstr "*flags* é uma máscara de bits para :meth:`getaddrinfo`."

#: ../../library/asyncio-eventloop.rst:714
msgid ""
"*sock* can optionally be specified in order to use a preexisting socket "
"object. If specified, *host* and *port* must not be specified."
msgstr ""
"*sock* pode opcionalmente ser especificado para usar um objeto soquete pré-"
"existente. Se especificado, *host* e *port* não devem ser especificados."

#: ../../library/asyncio-eventloop.rst:719
msgid ""
"The *sock* argument transfers ownership of the socket to the server created. "
"To close the socket, call the server's :meth:`~asyncio.Server.close` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:723
msgid ""
"*backlog* is the maximum number of queued connections passed to :meth:"
"`~socket.socket.listen` (defaults to 100)."
msgstr ""
"*backlog* é o número máximo de conexões enfileiradas pasadas para :meth:"
"`~socket.socket.listen` (padrão é 100)."

#: ../../library/asyncio-eventloop.rst:726
msgid ""
"*ssl* can be set to an :class:`~ssl.SSLContext` instance to enable TLS over "
"the accepted connections."
msgstr ""
"*ssl* pode ser definido para uma instância de :class:`~ssl.SSLContext` para "
"habilitar TLS sobre as conexões aceitas."

#: ../../library/asyncio-eventloop.rst:729
msgid ""
"*reuse_address* tells the kernel to reuse a local socket in ``TIME_WAIT`` "
"state, without waiting for its natural timeout to expire. If not specified "
"will automatically be set to ``True`` on Unix."
msgstr ""
"*reuse_address* diz ao kernel para reusar um soquete local em estado "
"``TIME_WAIT``, serm aguardar pela expiração natural do seu tempo limite. Se "
"não especificado, será automaticamente definida como ``True`` no Unix."

#: ../../library/asyncio-eventloop.rst:734
msgid ""
"*reuse_port* tells the kernel to allow this endpoint to be bound to the same "
"port as other existing endpoints are bound to, so long as they all set this "
"flag when being created. This option is not supported on Windows."
msgstr ""
"*reuse_port* diz ao kernel para permitir que este endpoint seja vinculado a "
"mesma porta que outros endpoints existentes estão vinculados, contanto que "
"todos eles definam este sinalizador quando forem criados. Esta opção não é "
"suportada no Windows."

#: ../../library/asyncio-eventloop.rst:739
msgid ""
"*keep_alive* set to ``True`` keeps connections active by enabling the "
"periodic transmission of messages."
msgstr ""

#: ../../library/asyncio-eventloop.rst:744
msgid "Added the *keep_alive* parameter."
msgstr ""

#: ../../library/asyncio-eventloop.rst:746
msgid ""
"*ssl_handshake_timeout* is (for a TLS server) the time in seconds to wait "
"for the TLS handshake to complete before aborting the connection. ``60.0`` "
"seconds if ``None`` (default)."
msgstr ""
"*ssl_handshake_timeout* é (para um servidor TLS) o tempo em segundos para "
"aguardar pelo aperto de mão TLS ser concluído, antes de abortar a conexão. "
"``60.0`` segundos se ``None`` (valor padrão)."

#: ../../library/asyncio-eventloop.rst:754
msgid ""
"*start_serving* set to ``True`` (the default) causes the created server to "
"start accepting connections immediately.  When set to ``False``, the user "
"should await on :meth:`Server.start_serving` or :meth:`Server.serve_forever` "
"to make the server to start accepting connections."
msgstr ""
"Definir *start_serving* para ``True`` (o valor padrão) faz o servidor criado "
"começar a aceitar conexões imediatamente. Quando definido para ``False``, o "
"usuário deve aguardar com :meth:`Server.start_serving` ou :meth:`Server."
"serve_forever` para fazer o servidor começar a aceitar conexões."

#: ../../library/asyncio-eventloop.rst:766
msgid "The *host* parameter can be a sequence of strings."
msgstr "O parâmetro *host* pode ser uma sequência de strings."

#: ../../library/asyncio-eventloop.rst:770
msgid ""
"Added *ssl_handshake_timeout* and *start_serving* parameters. The socket "
"option :ref:`socket.TCP_NODELAY <socket-unix-constants>` is set by default "
"for all TCP connections."
msgstr ""

#: ../../library/asyncio-eventloop.rst:780
msgid ""
"The :func:`start_server` function is a higher-level alternative API that "
"returns a pair of :class:`StreamReader` and :class:`StreamWriter` that can "
"be used in an async/await code."
msgstr ""
"A função :func:`start_server` é uma API alternativa de alto nível que "
"retorna um par de :class:`StreamReader` e :class:`StreamWriter` que pode ser "
"usado em um código async/await."

#: ../../library/asyncio-eventloop.rst:791
msgid ""
"Similar to :meth:`loop.create_server` but works with the :py:const:`~socket."
"AF_UNIX` socket family."
msgstr ""

#: ../../library/asyncio-eventloop.rst:794
msgid ""
"*path* is the name of a Unix domain socket, and is required, unless a *sock* "
"argument is provided.  Abstract Unix sockets, :class:`str`, :class:`bytes`, "
"and :class:`~pathlib.Path` paths are supported."
msgstr ""
"*path* é o nome de um soquete de domínio Unix, e é obrigatório, a não ser "
"que um argumento *sock* seja fornecido. Soquetes Unix abstratos, :class:"
"`str`, :class:`bytes`, e caminhos :class:`~pathlib.Path` são suportados."

#: ../../library/asyncio-eventloop.rst:799
msgid ""
"If *cleanup_socket* is true then the Unix socket will automatically be "
"removed from the filesystem when the server is closed, unless the socket has "
"been replaced after the server has been created."
msgstr ""

#: ../../library/asyncio-eventloop.rst:803
msgid ""
"See the documentation of the :meth:`loop.create_server` method for "
"information about arguments to this method."
msgstr ""
"Veja a documentação do método :meth:`loop.create_server` para informações "
"sobre argumentos para este método."

#: ../../library/asyncio-eventloop.rst:810
msgid ""
"Added the *ssl_handshake_timeout* and *start_serving* parameters. The *path* "
"parameter can now be a :class:`~pathlib.Path` object."
msgstr ""
"Adicionados os parâmetros *ssl_handshake_timeout* estart_serving*. O "
"parâmetros *path* agora pode ser um objeto da classe :class:`~pathlib.Path`."

#: ../../library/asyncio-eventloop.rst:819
msgid "Added the *cleanup_socket* parameter."
msgstr ""

#: ../../library/asyncio-eventloop.rst:826
msgid "Wrap an already accepted connection into a transport/protocol pair."
msgstr "Envolve uma conexão já aceita em um par transporte/protocolo."

#: ../../library/asyncio-eventloop.rst:828
msgid ""
"This method can be used by servers that accept connections outside of "
"asyncio but that use asyncio to handle them."
msgstr ""
"Este método pode ser usado por servidores que aceitam conexões fora do "
"asyncio, mas que usam asyncio para manipulá-las."

#: ../../library/asyncio-eventloop.rst:831
#: ../../library/asyncio-eventloop.rst:921
msgid "Parameters:"
msgstr "Parâmetros:"

#: ../../library/asyncio-eventloop.rst:836
msgid ""
"*sock* is a preexisting socket object returned from :meth:`socket.accept "
"<socket.socket.accept>`."
msgstr ""
"*sock* é um objeto soquete pré-existente retornado a partir de :meth:`socket."
"accept <socket.socket.accept>`."

#: ../../library/asyncio-eventloop.rst:845
msgid ""
"*ssl* can be set to an :class:`~ssl.SSLContext` to enable SSL over the "
"accepted connections."
msgstr ""
"*ssl* pode ser definido para um :class:`~ssl.SSLContext` para habilitar SSL "
"sobre as conexões aceitas."

#: ../../library/asyncio-eventloop.rst:848
msgid ""
"*ssl_handshake_timeout* is (for an SSL connection) the time in seconds to "
"wait for the SSL handshake to complete before aborting the connection. "
"``60.0`` seconds if ``None`` (default)."
msgstr ""
"*ssl_handshake_timeout* é (para uma conexão SSL) o tempo em segundos para "
"aguardar pelo aperto de mão SSL ser concluído, antes de abortar a conexão. "
"``60.0`` segundos se ``None`` (valor padrão)."

#: ../../library/asyncio-eventloop.rst:856
msgid "Returns a ``(transport, protocol)`` pair."
msgstr "Retorna um par ``(transport, protocol)``."

#: ../../library/asyncio-eventloop.rst:870
msgid "Transferring files"
msgstr "Transferindo arquivos"

#: ../../library/asyncio-eventloop.rst:875
msgid ""
"Send a *file* over a *transport*.  Return the total number of bytes sent."
msgstr ""
"Envia um *file* sobre um *transport*. Retorna o número total de bytes "
"enviados."

#: ../../library/asyncio-eventloop.rst:878
msgid "The method uses high-performance :meth:`os.sendfile` if available."
msgstr "O método usa :meth:`os.sendfile` de alto desempenho, se disponível."

#: ../../library/asyncio-eventloop.rst:880
msgid "*file* must be a regular file object opened in binary mode."
msgstr "*file* deve ser um objeto arquivo regular aberto em modo binário."

#: ../../library/asyncio-eventloop.rst:882
#: ../../library/asyncio-eventloop.rst:1127
msgid ""
"*offset* tells from where to start reading the file. If specified, *count* "
"is the total number of bytes to transmit as opposed to sending the file "
"until EOF is reached. File position is always updated, even when this method "
"raises an error, and :meth:`file.tell() <io.IOBase.tell>` can be used to "
"obtain the actual number of bytes sent."
msgstr ""
"*offset* indica a partir de onde deve iniciar a leitura do arquivo. Se "
"especificado, *count* é o número total de bytes para transmitir, ao "
"contrário de transmitir o arquivo até que EOF seja atingido. A posição do "
"arquivo é sempre atualizada, mesmo quando este método levanta um erro, e :"
"meth:`file.tell() <io.IOBase.tell>` pode ser usado para obter o número atual "
"de bytes enviados."

#: ../../library/asyncio-eventloop.rst:889
msgid ""
"*fallback* set to ``True`` makes asyncio to manually read and send the file "
"when the platform does not support the sendfile system call (e.g. Windows or "
"SSL socket on Unix)."
msgstr ""
"*fallback* definido para ``True`` faz o asyncio manualmente ler e enviar o "
"arquivo quando a plataforma não suporta a chamada de sistema sendfile (por "
"exemplo Windows ou soquete SSL no Unix)."

#: ../../library/asyncio-eventloop.rst:893
msgid ""
"Raise :exc:`SendfileNotAvailableError` if the system does not support the "
"*sendfile* syscall and *fallback* is ``False``."
msgstr ""
"Levanta :exc:`SendfileNotAvailableError` se o sistema não suporta a chamada "
"de sistema *sendfile* e *fallback* é ``False``."

#: ../../library/asyncio-eventloop.rst:900
msgid "TLS Upgrade"
msgstr "Atualizando TLS"

#: ../../library/asyncio-eventloop.rst:907
msgid "Upgrade an existing transport-based connection to TLS."
msgstr "Atualiza um conexão baseada em transporte existente para TLS."

#: ../../library/asyncio-eventloop.rst:909
msgid ""
"Create a TLS coder/decoder instance and insert it between the *transport* "
"and the *protocol*. The coder/decoder implements both *transport*-facing "
"protocol and *protocol*-facing transport."
msgstr ""

#: ../../library/asyncio-eventloop.rst:913
msgid ""
"Return the created two-interface instance. After *await*, the *protocol* "
"must stop using the original *transport* and communicate with the returned "
"object only because the coder caches *protocol*-side data and sporadically "
"exchanges extra TLS session packets with *transport*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:918
msgid ""
"In some situations (e.g. when the passed transport is already closing) this "
"may return ``None``."
msgstr ""

#: ../../library/asyncio-eventloop.rst:923
msgid ""
"*transport* and *protocol* instances that methods like :meth:`~loop."
"create_server` and :meth:`~loop.create_connection` return."
msgstr ""
"instâncias de *transport* e *protocol*, que métodos como :meth:`~loop."
"create_server` e :meth:`~loop.create_connection` retornam."

#: ../../library/asyncio-eventloop.rst:927
msgid "*sslcontext*: a configured instance of :class:`~ssl.SSLContext`."
msgstr "*sslcontext*: uma instância configurada de :class:`~ssl.SSLContext`."

#: ../../library/asyncio-eventloop.rst:929
msgid ""
"*server_side* pass ``True`` when a server-side connection is being upgraded "
"(like the one created by :meth:`~loop.create_server`)."
msgstr ""
"*server_side* informe ``True`` quando uma conexão no lado do servidor "
"estiver sendo atualizada (como a que é criada por :meth:`~loop."
"create_server`)."

#: ../../library/asyncio-eventloop.rst:932
msgid ""
"*server_hostname*: sets or overrides the host name that the target server's "
"certificate will be matched against."
msgstr ""
"*server_hostname*: define ou substitui o nome do host no qual o servidor "
"alvo do certificado será comparado."

#: ../../library/asyncio-eventloop.rst:952
msgid "Watching file descriptors"
msgstr "Observando descritores de arquivo"

#: ../../library/asyncio-eventloop.rst:956
msgid ""
"Start monitoring the *fd* file descriptor for read availability and invoke "
"*callback* with the specified arguments once *fd* is available for reading."
msgstr ""
"Começa a monitorar o descritor de arquivo *fd* para disponibilidade de "
"leitura e invoca a *callback* com os argumentos especificados assim que *fd* "
"esteja disponível para leitura."

#: ../../library/asyncio-eventloop.rst:962
msgid ""
"Stop monitoring the *fd* file descriptor for read availability. Returns "
"``True`` if *fd* was previously being monitored for reads."
msgstr ""

#: ../../library/asyncio-eventloop.rst:967
msgid ""
"Start monitoring the *fd* file descriptor for write availability and invoke "
"*callback* with the specified arguments once *fd* is available for writing."
msgstr ""
"Começa a monitorar o descritor de arquivo *fd* para disponibilidade de "
"escrita e invoca a *callback* com os argumentos especificados assim que *fd* "
"esteja disponível para escrita."

#: ../../library/asyncio-eventloop.rst:971
#: ../../library/asyncio-eventloop.rst:1236
msgid ""
"Use :func:`functools.partial` :ref:`to pass keyword arguments <asyncio-pass-"
"keywords>` to *callback*."
msgstr ""
"Use :func:`functools.partial` :ref:`para passar argumentos nomeados <asyncio-"
"pass-keywords>` para a *callback*."

#: ../../library/asyncio-eventloop.rst:976
msgid ""
"Stop monitoring the *fd* file descriptor for write availability. Returns "
"``True`` if *fd* was previously being monitored for writes."
msgstr ""

#: ../../library/asyncio-eventloop.rst:979
msgid ""
"See also :ref:`Platform Support <asyncio-platform-support>` section for some "
"limitations of these methods."
msgstr ""
"Veja também a seção de :ref:`Suporte a Plataformas <asyncio-platform-"
"support>` para algumas limitações desses métodos."

#: ../../library/asyncio-eventloop.rst:984
msgid "Working with socket objects directly"
msgstr "Trabalhando com objetos soquete diretamente"

#: ../../library/asyncio-eventloop.rst:986
msgid ""
"In general, protocol implementations that use transport-based APIs such as :"
"meth:`loop.create_connection` and :meth:`loop.create_server` are faster than "
"implementations that work with sockets directly. However, there are some use "
"cases when performance is not critical, and working with :class:`~socket."
"socket` objects directly is more convenient."
msgstr ""
"Em geral, implementações de protocolo que usam APIs baseadas em transporte, "
"tais como :meth:`loop.create_connection` e :meth:`loop.create_server` são "
"mais rápidas que implementações que trabalham com soquetes diretamente. "
"Entretanto, existem alguns casos de uso quando o desempenho não é crítica, e "
"trabalhar com objetos :class:`~socket.socket` diretamente é mais conveniente."

#: ../../library/asyncio-eventloop.rst:995
msgid ""
"Receive up to *nbytes* from *sock*.  Asynchronous version of :meth:`socket."
"recv() <socket.socket.recv>`."
msgstr ""
"Recebe até *nbytes* do *sock*. Versão assíncrona de :meth:`socket.recv() "
"<socket.socket.recv>`."

#: ../../library/asyncio-eventloop.rst:998
msgid "Return the received data as a bytes object."
msgstr "Retorna os dados recebidos como um objeto de bytes."

#: ../../library/asyncio-eventloop.rst:1000
#: ../../library/asyncio-eventloop.rst:1014
#: ../../library/asyncio-eventloop.rst:1025
#: ../../library/asyncio-eventloop.rst:1037
#: ../../library/asyncio-eventloop.rst:1052
#: ../../library/asyncio-eventloop.rst:1067
#: ../../library/asyncio-eventloop.rst:1077
#: ../../library/asyncio-eventloop.rst:1103
#: ../../library/asyncio-eventloop.rst:1141
msgid "*sock* must be a non-blocking socket."
msgstr "*sock* deve ser um soquete não bloqueante."

#: ../../library/asyncio-eventloop.rst:1002
msgid ""
"Even though this method was always documented as a coroutine method, "
"releases before Python 3.7 returned a :class:`Future`. Since Python 3.7 this "
"is an ``async def`` method."
msgstr ""
"Apesar deste método sempre ter sido documentado como um método de corrotina, "
"versões anteriores ao Python 3.7 retornavam um :class:`Future`. Desde o "
"Python 3.7 este é um método ``async def``."

#: ../../library/asyncio-eventloop.rst:1009
msgid ""
"Receive data from *sock* into the *buf* buffer.  Modeled after the blocking :"
"meth:`socket.recv_into() <socket.socket.recv_into>` method."
msgstr ""
"Dados recebidos do *sock* no buffer *buf*. Modelado baseado no método "
"bloqueante :meth:`socket.recv_into() <socket.socket.recv_into>`."

#: ../../library/asyncio-eventloop.rst:1012
msgid "Return the number of bytes written to the buffer."
msgstr "Retorna o número de bytes escritos no buffer."

#: ../../library/asyncio-eventloop.rst:1020
msgid ""
"Receive a datagram of up to *bufsize* from *sock*.  Asynchronous version of :"
"meth:`socket.recvfrom() <socket.socket.recvfrom>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1023
msgid "Return a tuple of (received data, remote address)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1031
msgid ""
"Receive a datagram of up to *nbytes* from *sock* into *buf*. Asynchronous "
"version of :meth:`socket.recvfrom_into() <socket.socket.recvfrom_into>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1035
msgid "Return a tuple of (number of bytes received, remote address)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1043
msgid ""
"Send *data* to the *sock* socket. Asynchronous version of :meth:`socket."
"sendall() <socket.socket.sendall>`."
msgstr ""
"Envia *data* para o soquete *sock*. Versão assíncrona de :meth:`socket."
"sendall() <socket.socket.sendall>`."

#: ../../library/asyncio-eventloop.rst:1046
msgid ""
"This method continues to send to the socket until either all data in *data* "
"has been sent or an error occurs.  ``None`` is returned on success.  On "
"error, an exception is raised. Additionally, there is no way to determine "
"how much data, if any, was successfully processed by the receiving end of "
"the connection."
msgstr ""
"Este método continua a enviar para o soquete até que todos os dados em "
"*data* tenham sido enviados ou um erro ocorra. ``None`` é retornado em caso "
"de sucesso. Ao ocorrer um erro, uma exceção é levantada. Adicionalmente, não "
"existe nenhuma forma de determinar quantos dados, se algum, foram "
"processados com sucesso pelo destinatário na conexão."

#: ../../library/asyncio-eventloop.rst:1054
#: ../../library/asyncio-eventloop.rst:1105
msgid ""
"Even though the method was always documented as a coroutine method, before "
"Python 3.7 it returned a :class:`Future`. Since Python 3.7, this is an "
"``async def`` method."
msgstr ""
"Apesar deste método sempre ter sido documentado como um método de corrotina, "
"antes do Python 3.7 ele retornava um :class:`Future`. Desde o Python 3.7, "
"este é um método ``async def``."

#: ../../library/asyncio-eventloop.rst:1061
msgid ""
"Send a datagram from *sock* to *address*. Asynchronous version of :meth:"
"`socket.sendto() <socket.socket.sendto>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1065
msgid "Return the number of bytes sent."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1073
msgid "Connect *sock* to a remote socket at *address*."
msgstr "Conecta o *sock* em um endereço *address* remoto."

#: ../../library/asyncio-eventloop.rst:1075
msgid ""
"Asynchronous version of :meth:`socket.connect() <socket.socket.connect>`."
msgstr "Versão assíncrona de :meth:`socket.connect() <socket.socket.connect>`."

#: ../../library/asyncio-eventloop.rst:1079
msgid ""
"``address`` no longer needs to be resolved.  ``sock_connect`` will try to "
"check if the *address* is already resolved by calling :func:`socket."
"inet_pton`.  If not, :meth:`loop.getaddrinfo` will be used to resolve the "
"*address*."
msgstr ""
"``address`` não precisa mais ser resolvido. ``sock_connect`` irá tentar "
"verificar se *address* já está resolvido chamando :func:`socket.inet_pton`. "
"Se não estiver, :meth:`loop.getaddrinfo` será usado para resolver *address*."

#: ../../library/asyncio-eventloop.rst:1088
msgid ""
":meth:`loop.create_connection` and  :func:`asyncio.open_connection() "
"<open_connection>`."
msgstr ""
":meth:`loop.create_connection` e  :func:`asyncio.open_connection() "
"<open_connection>`."

#: ../../library/asyncio-eventloop.rst:1094
msgid ""
"Accept a connection.  Modeled after the blocking :meth:`socket.accept() "
"<socket.socket.accept>` method."
msgstr ""
"Aceita uma conexão. Modelado baseado no método bloqueante :meth:`socket."
"accept() <socket.socket.accept>`."

#: ../../library/asyncio-eventloop.rst:1097
msgid ""
"The socket must be bound to an address and listening for connections. The "
"return value is a pair ``(conn, address)`` where *conn* is a *new* socket "
"object usable to send and receive data on the connection, and *address* is "
"the address bound to the socket on the other end of the connection."
msgstr ""
"O soquete deve estar vinculado a um endereço e escutando por conexões. O "
"valor de retorno é um par ``(conn, address)`` onde *conn* é um *novo* objeto "
"de soquete usável para enviar e receber dados na conexão, e *address* é o "
"endereço vinculado ao soquete no outro extremo da conexão."

#: ../../library/asyncio-eventloop.rst:1112
msgid ":meth:`loop.create_server` and :func:`start_server`."
msgstr ":meth:`loop.create_server` e :func:`start_server`."

#: ../../library/asyncio-eventloop.rst:1117
msgid ""
"Send a file using high-performance :mod:`os.sendfile` if possible. Return "
"the total number of bytes sent."
msgstr ""
"Envia um arquivo usando :mod:`os.sendfile` de alto desempenho se possível. "
"Retorna o número total de bytes enviados."

#: ../../library/asyncio-eventloop.rst:1120
msgid ""
"Asynchronous version of :meth:`socket.sendfile() <socket.socket.sendfile>`."
msgstr ""
"Versão assíncrona de :meth:`socket.sendfile() <socket.socket.sendfile>`."

#: ../../library/asyncio-eventloop.rst:1122
msgid ""
"*sock* must be a non-blocking :const:`socket.SOCK_STREAM` :class:`~socket."
"socket`."
msgstr ""
"*sock* deve ser um :class:`~socket.socket` :const:`socket.SOCK_STREAM` não "
"bloqueante."

#: ../../library/asyncio-eventloop.rst:1125
msgid "*file* must be a regular file object open in binary mode."
msgstr "*file* deve ser um objeto arquivo regular aberto em modo binário."

#: ../../library/asyncio-eventloop.rst:1134
msgid ""
"*fallback*, when set to ``True``, makes asyncio manually read and send the "
"file when the platform does not support the sendfile syscall (e.g. Windows "
"or SSL socket on Unix)."
msgstr ""
"*fallback*, quando definido para ``True``, faz asyncio ler e enviar "
"manualmente o arquivo, quando a plataforma não suporta a chamada de sistema "
"sendfile (por exemplo Windows ou soquete SSL no Unix)."

#: ../../library/asyncio-eventloop.rst:1138
msgid ""
"Raise :exc:`SendfileNotAvailableError` if the system does not support "
"*sendfile* syscall and *fallback* is ``False``."
msgstr ""
"Levanta :exc:`SendfileNotAvailableError` se o sistema não suporta chamadas "
"de sistema *sendfile* e *fallback* é ``False``."

#: ../../library/asyncio-eventloop.rst:1147
msgid "DNS"
msgstr "DNS"

#: ../../library/asyncio-eventloop.rst:1152
msgid "Asynchronous version of :meth:`socket.getaddrinfo`."
msgstr "Versão assíncrona de :meth:`socket.getaddrinfo`."

#: ../../library/asyncio-eventloop.rst:1156
msgid "Asynchronous version of :meth:`socket.getnameinfo`."
msgstr "Versão assíncrona de :meth:`socket.getnameinfo`."

#: ../../library/asyncio-eventloop.rst:1159
msgid ""
"Both *getaddrinfo* and *getnameinfo* internally utilize their synchronous "
"versions through the loop's default thread pool executor. When this executor "
"is saturated, these methods may experience delays, which higher-level "
"networking libraries may report as increased timeouts. To mitigate this, "
"consider using a custom executor for other user tasks, or setting a default "
"executor with a larger number of workers."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1166
msgid ""
"Both *getaddrinfo* and *getnameinfo* methods were always documented to "
"return a coroutine, but prior to Python 3.7 they were, in fact, returning :"
"class:`asyncio.Future` objects.  Starting with Python 3.7 both methods are "
"coroutines."
msgstr ""
"Ambos os métodos *getaddrinfo* e *getnameinfo* sempre foram documentados "
"para retornar uma corrotina, mas antes do Python 3.7 eles estavam, na "
"verdade, retornando objetos :class:`asyncio.Future`. A partir do Python 3.7, "
"ambos os métodos são corrotinas."

#: ../../library/asyncio-eventloop.rst:1174
msgid "Working with pipes"
msgstr "Trabalhando com encadeamentos"

#: ../../library/asyncio-eventloop.rst:1178
msgid "Register the read end of *pipe* in the event loop."
msgstr "Registra o extremo da leitura de um *pipe* no laço de eventos."

#: ../../library/asyncio-eventloop.rst:1183
msgid "*pipe* is a :term:`file-like object <file object>`."
msgstr "*pipe* é um :term:`objeto arquivo ou similar <file object>`."

#: ../../library/asyncio-eventloop.rst:1185
msgid ""
"Return pair ``(transport, protocol)``, where *transport* supports the :class:"
"`ReadTransport` interface and *protocol* is an object instantiated by the "
"*protocol_factory*."
msgstr ""
"Retorna um par ``(transport, protocol)``, onde *transport* suporta a "
"interface :class:`ReadTransport` e *protocol* é um objeto instanciado pelo "
"*protocol_factory*."

#: ../../library/asyncio-eventloop.rst:1189
#: ../../library/asyncio-eventloop.rst:1205
msgid ""
"With :class:`SelectorEventLoop` event loop, the *pipe* is set to non-"
"blocking mode."
msgstr ""
"Com o :class:`SelectorEventLoop` do laço de eventos, o *pipe* é definido "
"para modo não bloqueante."

#: ../../library/asyncio-eventloop.rst:1194
msgid "Register the write end of *pipe* in the event loop."
msgstr "Registra o extremo de escrita do *pipe* no laço de eventos."

#: ../../library/asyncio-eventloop.rst:1199
msgid "*pipe* is :term:`file-like object <file object>`."
msgstr "*pipe* é um :term:`objeto arquivo ou similar <file object>`."

#: ../../library/asyncio-eventloop.rst:1201
msgid ""
"Return pair ``(transport, protocol)``, where *transport* supports :class:"
"`WriteTransport` interface and *protocol* is an object instantiated by the "
"*protocol_factory*."
msgstr ""
"Retorna um part ``(transport, protocol)``, onde *transport* suporta a "
"interface :class:`WriteTransport` e *protocol* é um objeto instanciado pelo "
"*protocol_factory*."

#: ../../library/asyncio-eventloop.rst:1210
msgid ""
":class:`SelectorEventLoop` does not support the above methods on Windows.  "
"Use :class:`ProactorEventLoop` instead for Windows."
msgstr ""
":class:`SelectorEventLoop` não suporta os métodos acima no Windows. Use :"
"class:`ProactorEventLoop` ao invés para Windows."

#: ../../library/asyncio-eventloop.rst:1215
msgid ""
"The :meth:`loop.subprocess_exec` and :meth:`loop.subprocess_shell` methods."
msgstr ""
"Os métodos :meth:`loop.subprocess_exec` e :meth:`loop.subprocess_shell`."

#: ../../library/asyncio-eventloop.rst:1220
msgid "Unix signals"
msgstr "Sinais Unix"

#: ../../library/asyncio-eventloop.rst:1226
msgid "Set *callback* as the handler for the *signum* signal."
msgstr "Define *callback* como o tratador para o sinal *signum*."

#: ../../library/asyncio-eventloop.rst:1228
msgid ""
"The callback will be invoked by *loop*, along with other queued callbacks "
"and runnable coroutines of that event loop. Unlike signal handlers "
"registered using :func:`signal.signal`, a callback registered with this "
"function is allowed to interact with the event loop."
msgstr ""
"A função de retorno será invocada pelo *loop*, juntamente com outras funções "
"de retorno enfileiradas e corrotinas executáveis daquele laço de eventos. Ao "
"contrário de tratadores de sinal registrados usando :func:`signal.signal`, "
"uma função de retorno registrada com esta função tem autorização para "
"interagir com o laço de eventos."

#: ../../library/asyncio-eventloop.rst:1233
msgid ""
"Raise :exc:`ValueError` if the signal number is invalid or uncatchable. "
"Raise :exc:`RuntimeError` if there is a problem setting up the handler."
msgstr ""
"Levanta :exc:`ValueError` se o número do sinal é inválido ou impossível de "
"capturar. Levanta :exc:`RuntimeError` se existe um problema definindo o "
"tratador."

#: ../../library/asyncio-eventloop.rst:1239
msgid ""
"Like :func:`signal.signal`, this function must be invoked in the main thread."
msgstr ""
"Assim como :func:`signal.signal`, esta função deve ser invocada na thread "
"principal."

#: ../../library/asyncio-eventloop.rst:1244
msgid "Remove the handler for the *sig* signal."
msgstr "Remove o tratador para o sinal *sig*."

#: ../../library/asyncio-eventloop.rst:1246
msgid ""
"Return ``True`` if the signal handler was removed, or ``False`` if no "
"handler was set for the given signal."
msgstr ""
"Retorna ``True`` se o tratador de sinal foi removido, ou ``False`` se nenhum "
"tratador foi definido para o sinal fornecido."

#: ../../library/asyncio-eventloop.rst:1253
msgid "The :mod:`signal` module."
msgstr "O módulo :mod:`signal`."

#: ../../library/asyncio-eventloop.rst:1257
msgid "Executing code in thread or process pools"
msgstr "Executando código em conjuntos de threads ou processos"

#: ../../library/asyncio-eventloop.rst:1261
msgid "Arrange for *func* to be called in the specified executor."
msgstr "Providencia para a *func* ser chamada no executor especificado."

#: ../../library/asyncio-eventloop.rst:1263
msgid ""
"The *executor* argument should be an :class:`concurrent.futures.Executor` "
"instance. The default executor is used if *executor* is ``None``. The "
"default executor can be set by :meth:`loop.set_default_executor`, otherwise, "
"a :class:`concurrent.futures.ThreadPoolExecutor` will be lazy-initialized "
"and used by :func:`run_in_executor` if needed."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1271
msgid ""
"import asyncio\n"
"import concurrent.futures\n"
"\n"
"def blocking_io():\n"
"    # File operations (such as logging) can block the\n"
"    # event loop: run them in a thread pool.\n"
"    with open('/dev/urandom', 'rb') as f:\n"
"        return f.read(100)\n"
"\n"
"def cpu_bound():\n"
"    # CPU-bound operations will block the event loop:\n"
"    # in general it is preferable to run them in a\n"
"    # process pool.\n"
"    return sum(i * i for i in range(10 ** 7))\n"
"\n"
"async def main():\n"
"    loop = asyncio.get_running_loop()\n"
"\n"
"    ## Options:\n"
"\n"
"    # 1. Run in the default loop's executor:\n"
"    result = await loop.run_in_executor(\n"
"        None, blocking_io)\n"
"    print('default thread pool', result)\n"
"\n"
"    # 2. Run in a custom thread pool:\n"
"    with concurrent.futures.ThreadPoolExecutor() as pool:\n"
"        result = await loop.run_in_executor(\n"
"            pool, blocking_io)\n"
"        print('custom thread pool', result)\n"
"\n"
"    # 3. Run in a custom process pool:\n"
"    with concurrent.futures.ProcessPoolExecutor() as pool:\n"
"        result = await loop.run_in_executor(\n"
"            pool, cpu_bound)\n"
"        print('custom process pool', result)\n"
"\n"
"if __name__ == '__main__':\n"
"    asyncio.run(main())"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1311
msgid ""
"Note that the entry point guard (``if __name__ == '__main__'``) is required "
"for option 3 due to the peculiarities of :mod:`multiprocessing`, which is "
"used by :class:`~concurrent.futures.ProcessPoolExecutor`. See :ref:`Safe "
"importing of main module <multiprocessing-safe-main-import>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1316
msgid "This method returns a :class:`asyncio.Future` object."
msgstr "Este método retorna um objeto :class:`asyncio.Future`."

#: ../../library/asyncio-eventloop.rst:1318
msgid ""
"Use :func:`functools.partial` :ref:`to pass keyword arguments <asyncio-pass-"
"keywords>` to *func*."
msgstr ""
"Use :func:`functools.partial` :ref:`para passar argumentos nomeados <asyncio-"
"pass-keywords>` para *func*."

#: ../../library/asyncio-eventloop.rst:1321
msgid ""
":meth:`loop.run_in_executor` no longer configures the ``max_workers`` of the "
"thread pool executor it creates, instead leaving it up to the thread pool "
"executor (:class:`~concurrent.futures.ThreadPoolExecutor`) to set the "
"default."
msgstr ""
":meth:`loop.run_in_executor` não configura mais o atributo ``max_workers`` "
"do executor do conjunto de thread que ele cria, ao invés disso ele deixa "
"para o executor do conjunto de thread (:class:`~concurrent.futures."
"ThreadPoolExecutor`) para setar o valor padrão."

#: ../../library/asyncio-eventloop.rst:1330
msgid ""
"Set *executor* as the default executor used by :meth:`run_in_executor`. "
"*executor* must be an instance of :class:`~concurrent.futures."
"ThreadPoolExecutor`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1334
msgid ""
"*executor* must be an instance of :class:`~concurrent.futures."
"ThreadPoolExecutor`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1340
msgid "Error Handling API"
msgstr "Tratando erros da API"

#: ../../library/asyncio-eventloop.rst:1342
msgid "Allows customizing how exceptions are handled in the event loop."
msgstr "Permite customizar como exceções são tratadas no laço de eventos."

#: ../../library/asyncio-eventloop.rst:1346
msgid "Set *handler* as the new event loop exception handler."
msgstr "Define *handler* como o novo tratador de exceções do laço de eventos."

#: ../../library/asyncio-eventloop.rst:1348
msgid ""
"If *handler* is ``None``, the default exception handler will be set.  "
"Otherwise, *handler* must be a callable with the signature matching ``(loop, "
"context)``, where ``loop`` is a reference to the active event loop, and "
"``context`` is a ``dict`` object containing the details of the exception "
"(see :meth:`call_exception_handler` documentation for details about context)."
msgstr ""
"Se *handler* for ``None``, o tratador de exceções padrão será definido. Caso "
"contrário, *handler* deve ser um chamável com a assinatura combinando "
"``(loop, context)``, onde ``loop`` é a referência para o laço de eventos "
"ativo, e ``context`` é um objeto ``dict`` contendo os detalhes da exceção "
"(veja a documentação :meth:`call_exception_handler` para detalhes a respeito "
"do contexto)."

#: ../../library/asyncio-eventloop.rst:1356
msgid ""
"If the handler is called on behalf of a :class:`~asyncio.Task` or :class:"
"`~asyncio.Handle`, it is run in the :class:`contextvars.Context` of that "
"task or callback handle."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1362
msgid ""
"The handler may be called in the :class:`~contextvars.Context` of the task "
"or handle where the exception originated."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1367
msgid ""
"Return the current exception handler, or ``None`` if no custom exception "
"handler was set."
msgstr ""
"Retorna o tratador de exceção atual, ou ``None`` se nenhum tratador de "
"exceção customizado foi definido."

#: ../../library/asyncio-eventloop.rst:1374
msgid "Default exception handler."
msgstr "Tratador de exceção padrão."

#: ../../library/asyncio-eventloop.rst:1376
msgid ""
"This is called when an exception occurs and no exception handler is set. "
"This can be called by a custom exception handler that wants to defer to the "
"default handler behavior."
msgstr ""
"Isso é chamado quando uma exceção ocorre e nenhum tratador de exceção foi "
"definido. Isso pode ser chamado por um tratador de exceção customizado que "
"quer passar adiante para o comportamento do tratador padrão."

#: ../../library/asyncio-eventloop.rst:1380
msgid ""
"*context* parameter has the same meaning as in :meth:"
"`call_exception_handler`."
msgstr ""
"parâmetro *context* tem o mesmo significado que em :meth:"
"`call_exception_handler`."

#: ../../library/asyncio-eventloop.rst:1385
msgid "Call the current event loop exception handler."
msgstr "Chama o tratador de exceção do laço de eventos atual."

#: ../../library/asyncio-eventloop.rst:1387
msgid ""
"*context* is a ``dict`` object containing the following keys (new keys may "
"be introduced in future Python versions):"
msgstr ""
"*context* é um objeto ``dict`` contendo as seguintes chaves (novas chaves "
"podem ser introduzidas em versões futuras do Python):"

#: ../../library/asyncio-eventloop.rst:1390
msgid "'message': Error message;"
msgstr "'message': Mensagem de erro;"

#: ../../library/asyncio-eventloop.rst:1391
msgid "'exception' (optional): Exception object;"
msgstr "'exception' (opcional): Objeto Exception;"

#: ../../library/asyncio-eventloop.rst:1392
msgid "'future' (optional): :class:`asyncio.Future` instance;"
msgstr "'future' (opcional): instância de :class:`asyncio.Future`;"

#: ../../library/asyncio-eventloop.rst:1393
msgid "'task' (optional): :class:`asyncio.Task` instance;"
msgstr "'task' (opcional): instância de :class:`asyncio.Task`;"

#: ../../library/asyncio-eventloop.rst:1394
msgid "'handle' (optional): :class:`asyncio.Handle` instance;"
msgstr "'handle' (opcional): instância de :class:`asyncio.Handle`;"

#: ../../library/asyncio-eventloop.rst:1395
msgid "'protocol' (optional): :ref:`Protocol <asyncio-protocol>` instance;"
msgstr ""
"'protocol' (opcional): instância de :ref:`Protocol <asyncio-protocol>`;"

#: ../../library/asyncio-eventloop.rst:1396
msgid "'transport' (optional): :ref:`Transport <asyncio-transport>` instance;"
msgstr ""
"'transport' (opcional): instância de :ref:`Transport <asyncio-transport>`;"

#: ../../library/asyncio-eventloop.rst:1397
msgid "'socket' (optional): :class:`socket.socket` instance;"
msgstr "'socket' (opcional): instância de :class:`socket.socket`;"

#: ../../library/asyncio-eventloop.rst:1398
msgid "'asyncgen' (optional): Asynchronous generator that caused"
msgstr "'asyncgen' (opcional): Gerador assíncrono que causou"

#: ../../library/asyncio-eventloop.rst:1399
msgid "the exception."
msgstr "a exceção."

#: ../../library/asyncio-eventloop.rst:1403
msgid ""
"This method should not be overloaded in subclassed event loops.  For custom "
"exception handling, use the :meth:`set_exception_handler` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1408
msgid "Enabling debug mode"
msgstr "Habilitando o modo de debug"

#: ../../library/asyncio-eventloop.rst:1412
msgid "Get the debug mode (:class:`bool`) of the event loop."
msgstr "Obtém o modo de debug (:class:`bool`) do laço de eventos."

#: ../../library/asyncio-eventloop.rst:1414
msgid ""
"The default value is ``True`` if the environment variable :envvar:"
"`PYTHONASYNCIODEBUG` is set to a non-empty string, ``False`` otherwise."
msgstr ""
"O valor padrão é ``True`` se a variável de ambiente :envvar:"
"`PYTHONASYNCIODEBUG` estiver definida para uma string não vazia, ``False`` "
"caso contrário."

#: ../../library/asyncio-eventloop.rst:1420
msgid "Set the debug mode of the event loop."
msgstr "Define o modo de debug do laço de eventos."

#: ../../library/asyncio-eventloop.rst:1424
msgid ""
"The new :ref:`Python Development Mode <devmode>` can now also be used to "
"enable the debug mode."
msgstr ""
"O novo :ref:`Modo de Desenvolvimento do Python <devmode>` agora também pode "
"ser usado para habilitar o modo de debug."

#: ../../library/asyncio-eventloop.rst:1429
msgid ""
"This attribute can be used to set the minimum execution duration in seconds "
"that is considered \"slow\". When debug mode is enabled, \"slow\" callbacks "
"are logged."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1433
msgid "Default value is 100 milliseconds."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1437
msgid "The :ref:`debug mode of asyncio <asyncio-debug-mode>`."
msgstr "O :ref:`modo de debug de asyncio <asyncio-debug-mode>`."

#: ../../library/asyncio-eventloop.rst:1441
msgid "Running Subprocesses"
msgstr "Executando Subprocessos"

#: ../../library/asyncio-eventloop.rst:1443
msgid ""
"Methods described in this subsections are low-level.  In regular async/await "
"code consider using the high-level :func:`asyncio.create_subprocess_shell` "
"and :func:`asyncio.create_subprocess_exec` convenience functions instead."
msgstr ""
"Métodos descritos nestas sub-seções são de baixo nível. Em código async/"
"await regular, considere usar as funções convenientes de alto nível :func:"
"`asyncio.create_subprocess_shell` e :func:`asyncio.create_subprocess_exec` "
"ao invés."

#: ../../library/asyncio-eventloop.rst:1450
msgid ""
"On Windows, the default event loop :class:`ProactorEventLoop` supports "
"subprocesses, whereas :class:`SelectorEventLoop` does not. See :ref:"
"`Subprocess Support on Windows <asyncio-windows-subprocess>` for details."
msgstr ""
"No Windows, o laço de eventos padrão :class:`ProactorEventLoop` oferece "
"suporte pra subprocessos, enquanto :class:`SelectorEventLoop`, não. Veja :"
"ref:`Suporte para subprocessos no Windows <asyncio-windows-subprocess>` para "
"detalhes."

#: ../../library/asyncio-eventloop.rst:1461
msgid ""
"Create a subprocess from one or more string arguments specified by *args*."
msgstr ""
"Cria um subprocesso a partir de um ou mais argumentos de string "
"especificados por *args*."

#: ../../library/asyncio-eventloop.rst:1464
msgid "*args* must be a list of strings represented by:"
msgstr "*args* deve ser uma lista de strings representada por:"

#: ../../library/asyncio-eventloop.rst:1466
msgid ":class:`str`;"
msgstr ":class:`str`;"

#: ../../library/asyncio-eventloop.rst:1467
msgid ""
"or :class:`bytes`, encoded to the :ref:`filesystem encoding <filesystem-"
"encoding>`."
msgstr ""
"ou :class:`bytes`, encodados na :ref:`codificação do sistema de arquivos "
"<filesystem-encoding>`."

#: ../../library/asyncio-eventloop.rst:1470
msgid ""
"The first string specifies the program executable, and the remaining strings "
"specify the arguments.  Together, string arguments form the ``argv`` of the "
"program."
msgstr ""
"A primeira string especifica o programa executável, e as strings "
"remanescentes especificam os argumentos. Juntas, argumentos em string formam "
"o ``argv`` do programa."

#: ../../library/asyncio-eventloop.rst:1474
msgid ""
"This is similar to the standard library :class:`subprocess.Popen` class "
"called with ``shell=False`` and the list of strings passed as the first "
"argument; however, where :class:`~subprocess.Popen` takes a single argument "
"which is list of strings, *subprocess_exec* takes multiple string arguments."
msgstr ""
"Isto é similar a classe :class:`subprocess.Popen` da biblioteca padrão ser "
"chamada com ``shell=False`` e a lista de strings ser passada como o primeiro "
"argumento; entretanto, onde :class:`~subprocess.Popen` recebe apenas um "
"argumento no qual é uma lista de strings, *subprocess_exec* recebe múltiplos "
"argumentos string."

#: ../../library/asyncio-eventloop.rst:1480
msgid ""
"The *protocol_factory* must be a callable returning a subclass of the :class:"
"`asyncio.SubprocessProtocol` class."
msgstr ""
"O *protocol_factory* deve ser um chamável que retorne uma subclasse da "
"classe :class:`asyncio.SubprocessProtocol`."

#: ../../library/asyncio-eventloop.rst:1483
msgid "Other parameters:"
msgstr "Outros parâmetros:"

#: ../../library/asyncio-eventloop.rst:1485
msgid "*stdin* can be any of these:"
msgstr "*stdin* pode ser qualquer um destes:"

#: ../../library/asyncio-eventloop.rst:1487
#: ../../library/asyncio-eventloop.rst:1498
#: ../../library/asyncio-eventloop.rst:1508
msgid "a file-like object"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1488
msgid ""
"an existing file descriptor (a positive integer), for example those created "
"with :meth:`os.pipe`"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1489
#: ../../library/asyncio-eventloop.rst:1499
#: ../../library/asyncio-eventloop.rst:1509
msgid ""
"the :const:`subprocess.PIPE` constant (default) which will create a new pipe "
"and connect it,"
msgstr ""
"a constante :const:`subprocess.PIPE` (padrão), a qual criará um novo "
"encadeamento e conectar a ele,"

#: ../../library/asyncio-eventloop.rst:1491
#: ../../library/asyncio-eventloop.rst:1501
#: ../../library/asyncio-eventloop.rst:1511
msgid ""
"the value ``None`` which will make the subprocess inherit the file "
"descriptor from this process"
msgstr ""
"o valor ``None``, o qual fará o subprocesso herdar o descritor de arquivo "
"deste processo"

#: ../../library/asyncio-eventloop.rst:1493
#: ../../library/asyncio-eventloop.rst:1503
#: ../../library/asyncio-eventloop.rst:1513
msgid ""
"the :const:`subprocess.DEVNULL` constant which indicates that the special :"
"data:`os.devnull` file will be used"
msgstr ""
"a constante :const:`subprocess.DEVNULL`, a qual indica que o arquivo "
"especial :data:`os.devnull` será usado"

#: ../../library/asyncio-eventloop.rst:1496
msgid "*stdout* can be any of these:"
msgstr "*stdout* pode ser qualquer um destes:"

#: ../../library/asyncio-eventloop.rst:1506
msgid "*stderr* can be any of these:"
msgstr "*stderr* pode ser qualquer um destes:"

#: ../../library/asyncio-eventloop.rst:1515
msgid ""
"the :const:`subprocess.STDOUT` constant which will connect the standard "
"error stream to the process' standard output stream"
msgstr ""
"a constante :const:`subprocess.STDOUT`, a qual irá conectar o stream de erro "
"padrão ao stream de saída padrão do processo"

#: ../../library/asyncio-eventloop.rst:1518
msgid ""
"All other keyword arguments are passed to :class:`subprocess.Popen` without "
"interpretation, except for *bufsize*, *universal_newlines*, *shell*, *text*, "
"*encoding* and *errors*, which should not be specified at all."
msgstr ""
"Todos os outros argumentos nomeados são passados para :class:`subprocess."
"Popen` sem interpretação, exceto *bufsize*, *universal_newlines*, *shell*, "
"*text*, *encoding* e *errors*, os quais não devem ser especificados de forma "
"alguma."

#: ../../library/asyncio-eventloop.rst:1523
msgid ""
"The ``asyncio`` subprocess API does not support decoding the streams as "
"text. :func:`bytes.decode` can be used to convert the bytes returned from "
"the stream to text."
msgstr ""
"A API de subprocesso ``asyncio`` não suporta decodificar os streams como "
"texto. :func:`bytes.decode` pode ser usado para converter os bytes "
"retornados do stream para texto."

#: ../../library/asyncio-eventloop.rst:1527
msgid ""
"If a file-like object passed as *stdin*, *stdout* or *stderr* represents a "
"pipe, then the other side of this pipe should be registered with :meth:"
"`~loop.connect_write_pipe` or :meth:`~loop.connect_read_pipe` for use with "
"the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1532
msgid ""
"See the constructor of the :class:`subprocess.Popen` class for documentation "
"on other arguments."
msgstr ""
"Veja o construtor da classe :class:`subprocess.Popen` para documentação "
"sobre outros argumentos."

#: ../../library/asyncio-eventloop.rst:1535
msgid ""
"Returns a pair of ``(transport, protocol)``, where *transport* conforms to "
"the :class:`asyncio.SubprocessTransport` base class and *protocol* is an "
"object instantiated by the *protocol_factory*."
msgstr ""
"Retorna um par ``(transport, protocol)``, onde *transport* conforma com a "
"classe base :class:`asyncio.SubprocessTransport` e *protocol* é um objeto "
"instanciado pelo *protocol_factory*."

#: ../../library/asyncio-eventloop.rst:1543
msgid ""
"Create a subprocess from *cmd*, which can be a :class:`str` or a :class:"
"`bytes` string encoded to the :ref:`filesystem encoding <filesystem-"
"encoding>`, using the platform's \"shell\" syntax."
msgstr ""
"Cria um subprocesso a partir do *cmd*, o qual pode ser um :class:`str` ou "
"uma string de :class:`bytes` codificada na :ref:`codificação do sistema de "
"arquivos <filesystem-encoding>`, usando a sintaxe \"shell\" da plataforma."

#: ../../library/asyncio-eventloop.rst:1548
msgid ""
"This is similar to the standard library :class:`subprocess.Popen` class "
"called with ``shell=True``."
msgstr ""
"Isto é similar a classe :class:`subprocess.Popen` da biblioteca padrão sendo "
"chanada com ``shell=True``."

#: ../../library/asyncio-eventloop.rst:1551
msgid ""
"The *protocol_factory* must be a callable returning a subclass of the :class:"
"`SubprocessProtocol` class."
msgstr ""
"O argumento *protocol_factory* deve ser um chamável que retorna uma "
"subclasse da classe :class:`SubprocessProtocol`."

#: ../../library/asyncio-eventloop.rst:1554
msgid ""
"See :meth:`~loop.subprocess_exec` for more details about the remaining "
"arguments."
msgstr ""
"Veja :meth:`~loop.subprocess_exec` para mais detalhes sobre os argumentos "
"remanescentes."

#: ../../library/asyncio-eventloop.rst:1557
msgid ""
"Returns a pair of ``(transport, protocol)``, where *transport* conforms to "
"the :class:`SubprocessTransport` base class and *protocol* is an object "
"instantiated by the *protocol_factory*."
msgstr ""
"Retorna um par ``(transport, protocol)``, onde *transport* conforma com a "
"classe base :class:`SubprocessTransport` e *protocol* é um objeto "
"instanciado pelo *protocol_factory*."

#: ../../library/asyncio-eventloop.rst:1562
msgid ""
"It is the application's responsibility to ensure that all whitespace and "
"special characters are quoted appropriately to avoid `shell injection "
"<https://en.wikipedia.org/wiki/Shell_injection#Shell_injection>`_ "
"vulnerabilities. The :func:`shlex.quote` function can be used to properly "
"escape whitespace and special characters in strings that are going to be "
"used to construct shell commands."
msgstr ""
"É responsabilidade da aplicação garantir que todos os espaços em branco e "
"caracteres especiais sejam tratados apropriadamente para evitar "
"vulnerabilidades de `injeção shell <https://en.wikipedia.org/wiki/"
"Shell_injection#Shell_injection>`_ . A função :func:`shlex.quote` pode ser "
"usada para escapar espaços em branco e caracteres especiais apropriadamente "
"em strings que serão usadas para construir comandos shell."

#: ../../library/asyncio-eventloop.rst:1571
msgid "Callback Handles"
msgstr "Tratadores de função de retorno"

#: ../../library/asyncio-eventloop.rst:1575
msgid ""
"A callback wrapper object returned by :meth:`loop.call_soon`, :meth:`loop."
"call_soon_threadsafe`."
msgstr ""
"Um objeto invólucro de função de retorno retornado por :meth:`loop."
"call_soon`, :meth:`loop.call_soon_threadsafe`."

#: ../../library/asyncio-eventloop.rst:1580
msgid ""
"Return the :class:`contextvars.Context` object associated with the handle."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1587
msgid ""
"Cancel the callback.  If the callback has already been canceled or executed, "
"this method has no effect."
msgstr ""
"Cancela a função de retorno. Se a função de retorno já tiver sido cancelada "
"ou executada, este método não tem efeito."

#: ../../library/asyncio-eventloop.rst:1592
msgid "Return ``True`` if the callback was cancelled."
msgstr "Retorna ``True`` se a função de retorno foi cancelada."

#: ../../library/asyncio-eventloop.rst:1598
msgid ""
"A callback wrapper object returned by :meth:`loop.call_later`, and :meth:"
"`loop.call_at`."
msgstr ""
"Um objeto invólucro de função de retorno retornado por :meth:`loop."
"call_later`, e :meth:`loop.call_at`."

#: ../../library/asyncio-eventloop.rst:1601
msgid "This class is a subclass of :class:`Handle`."
msgstr "Esta classe é uma subclasse de :class:`Handle`."

#: ../../library/asyncio-eventloop.rst:1605
msgid "Return a scheduled callback time as :class:`float` seconds."
msgstr ""
"Retorna o tempo de uma função de retorno agendada como :class:`float` "
"segundos."

#: ../../library/asyncio-eventloop.rst:1607
msgid ""
"The time is an absolute timestamp, using the same time reference as :meth:"
"`loop.time`."
msgstr ""
"O tempo é um timestamp absoluto, usando a mesma referência de tempo que :"
"meth:`loop.time`."

#: ../../library/asyncio-eventloop.rst:1614
msgid "Server Objects"
msgstr "Objetos Server"

#: ../../library/asyncio-eventloop.rst:1616
msgid ""
"Server objects are created by :meth:`loop.create_server`, :meth:`loop."
"create_unix_server`, :func:`start_server`, and :func:`start_unix_server` "
"functions."
msgstr ""
"Objetos Server são criados pelas funções :meth:`loop.create_server`, :meth:"
"`loop.create_unix_server`, :func:`start_server`, e :func:`start_unix_server`."

#: ../../library/asyncio-eventloop.rst:1620
msgid "Do not instantiate the :class:`Server` class directly."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1624
msgid ""
"*Server* objects are asynchronous context managers.  When used in an ``async "
"with`` statement, it's guaranteed that the Server object is closed and not "
"accepting new connections when the ``async with`` statement is completed::"
msgstr ""
"Objetos *Server* são gerenciadores de contexto assíncronos. Quando usados em "
"uma instrução ``async with``, é garantido que o objeto Server está fechado e "
"não está aceitando novas conexões quando a instrução ``async with`` estiver "
"completa::"

#: ../../library/asyncio-eventloop.rst:1629
msgid ""
"srv = await loop.create_server(...)\n"
"\n"
"async with srv:\n"
"    # some code\n"
"\n"
"# At this point, srv is closed and no longer accepts new connections."
msgstr ""
"srv = await loop.create_server(...)\n"
"\n"
"async with srv:\n"
"    # algum código\n"
"\n"
"# Neste ponto, srv é fechado e não mais aceita novas conexões."

#: ../../library/asyncio-eventloop.rst:1637
msgid "Server object is an asynchronous context manager since Python 3.7."
msgstr ""
"Objeto Server é um gerenciador de contexto assíncrono desde o Python 3.7."

#: ../../library/asyncio-eventloop.rst:1640
msgid ""
"This class was exposed publicly as ``asyncio.Server`` in Python 3.9.11, "
"3.10.3 and 3.11."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1645
msgid ""
"Stop serving: close listening sockets and set the :attr:`sockets` attribute "
"to ``None``."
msgstr ""
"Para de servir: fecha soquetes que estavam ouvindo e define o atributo :attr:"
"`sockets` para ``None``."

#: ../../library/asyncio-eventloop.rst:1648
msgid ""
"The sockets that represent existing incoming client connections are left "
"open."
msgstr ""
"Os soquetes que representam conexões de clientes existentes que estão "
"chegando são deixados em aberto."

#: ../../library/asyncio-eventloop.rst:1651
msgid ""
"The server is closed asynchronously; use the :meth:`wait_closed` coroutine "
"to wait until the server is closed (and no more connections are active)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1657
msgid "Close all existing incoming client connections."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1659
msgid ""
"Calls :meth:`~asyncio.BaseTransport.close` on all associated transports."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1662
msgid ""
":meth:`close` should be called before :meth:`close_clients` when closing the "
"server to avoid races with new clients connecting."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1669
msgid ""
"Close all existing incoming client connections immediately, without waiting "
"for pending operations to complete."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1672
msgid ""
"Calls :meth:`~asyncio.WriteTransport.abort` on all associated transports."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1675
msgid ""
":meth:`close` should be called before :meth:`abort_clients` when closing the "
"server to avoid races with new clients connecting."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1682
msgid "Return the event loop associated with the server object."
msgstr "Retorna o laço de eventos associado com o objeto server."

#: ../../library/asyncio-eventloop.rst:1688
msgid "Start accepting connections."
msgstr "Começa a aceitar conexões."

#: ../../library/asyncio-eventloop.rst:1690
msgid ""
"This method is idempotent, so it can be called when the server is already "
"serving."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1693
msgid ""
"The *start_serving* keyword-only parameter to :meth:`loop.create_server` "
"and :meth:`asyncio.start_server` allows creating a Server object that is not "
"accepting connections initially.  In this case ``Server.start_serving()``, "
"or :meth:`Server.serve_forever` can be used to make the Server start "
"accepting connections."
msgstr ""
"O parâmetro somente-nomeado *start_serving* para :meth:`loop.create_server` "
"e :meth:`asyncio.start_server` permite criar um objeto Server que não está "
"aceitando conexões inicialmente. Neste caso ``Server.start_serving()``, ou :"
"meth:`Server.serve_forever` podem ser usados para fazer o Server começar a "
"aceitar conexões."

#: ../../library/asyncio-eventloop.rst:1704
msgid ""
"Start accepting connections until the coroutine is cancelled. Cancellation "
"of ``serve_forever`` task causes the server to be closed."
msgstr ""
"Começa a aceitar conexões até que a corrotina seja cancelada. Cancelamento "
"da task ``serve_forever`` causa o fechamento do servidor."

#: ../../library/asyncio-eventloop.rst:1708
msgid ""
"This method can be called if the server is already accepting connections.  "
"Only one ``serve_forever`` task can exist per one *Server* object."
msgstr ""
"Este método pode ser chamado se o servidor já estiver aceitando conexões. "
"Apenas uma task ``serve_forever`` pode existir para cada objeto *Server*."

#: ../../library/asyncio-eventloop.rst:1714
msgid ""
"async def client_connected(reader, writer):\n"
"    # Communicate with the client with\n"
"    # reader/writer streams.  For example:\n"
"    await reader.readline()\n"
"\n"
"async def main(host, port):\n"
"    srv = await asyncio.start_server(\n"
"        client_connected, host, port)\n"
"    await srv.serve_forever()\n"
"\n"
"asyncio.run(main('127.0.0.1', 0))"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1730
msgid "Return ``True`` if the server is accepting new connections."
msgstr "Retorna ``True`` se o servidor estiver aceitando novas conexões."

#: ../../library/asyncio-eventloop.rst:1736
msgid ""
"Wait until the :meth:`close` method completes and all active connections "
"have finished."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1741
msgid ""
"List of socket-like objects, ``asyncio.trsock.TransportSocket``, which the "
"server is listening on."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1744
msgid ""
"Prior to Python 3.7 ``Server.sockets`` used to return an internal list of "
"server sockets directly.  In 3.7 a copy of that list is returned."
msgstr ""
"Antes do Python 3.7 ``Server.sockets`` era usado para retornar uma lista "
"interna de soquetes do server diretamente. No uma cópia dessa lista é "
"retornada."

#: ../../library/asyncio-eventloop.rst:1754
msgid "Event Loop Implementations"
msgstr "Implementações do Laço de Eventos"

#: ../../library/asyncio-eventloop.rst:1756
msgid ""
"asyncio ships with two different event loop implementations: :class:"
"`SelectorEventLoop` and :class:`ProactorEventLoop`."
msgstr ""
"asyncio vem com duas implementações de laço de eventos diferente: :class:"
"`SelectorEventLoop` e :class:`ProactorEventLoop`."

#: ../../library/asyncio-eventloop.rst:1759
msgid "By default asyncio is configured to use :class:`EventLoop`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1764
msgid ""
"A subclass of :class:`AbstractEventLoop` based on the :mod:`selectors` "
"module."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1767
msgid ""
"Uses the most efficient *selector* available for the given platform.  It is "
"also possible to manually configure the exact selector implementation to be "
"used::"
msgstr ""
"Usa o *seletor* mais eficiente disponível para a plataforma fornecida. "
"Também é possível configurar manualmente a implementação exata do seletor a "
"ser utilizada::"

#: ../../library/asyncio-eventloop.rst:1771
msgid ""
"import asyncio\n"
"import selectors\n"
"\n"
"class MyPolicy(asyncio.DefaultEventLoopPolicy):\n"
"   def new_event_loop(self):\n"
"      selector = selectors.SelectSelector()\n"
"      return asyncio.SelectorEventLoop(selector)\n"
"\n"
"asyncio.set_event_loop_policy(MyPolicy())"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1787
msgid ""
"A subclass of :class:`AbstractEventLoop` for Windows that uses \"I/O "
"Completion Ports\" (IOCP)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1793
msgid ""
"`MSDN documentation on I/O Completion Ports <https://learn.microsoft.com/"
"windows/win32/fileio/i-o-completion-ports>`_."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1798
msgid ""
"An alias to the most efficient available subclass of :class:"
"`AbstractEventLoop` for the given platform."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1801
msgid ""
"It is an alias to :class:`SelectorEventLoop` on Unix and :class:"
"`ProactorEventLoop` on Windows."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1807
msgid "Abstract base class for asyncio-compliant event loops."
msgstr "Classe base abstrata para laços de eventos compatíveis com asyncio."

#: ../../library/asyncio-eventloop.rst:1809
msgid ""
"The :ref:`asyncio-event-loop-methods` section lists all methods that an "
"alternative implementation of ``AbstractEventLoop`` should have defined."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1815
msgid "Examples"
msgstr "Exemplos"

#: ../../library/asyncio-eventloop.rst:1817
msgid ""
"Note that all examples in this section **purposefully** show how to use the "
"low-level event loop APIs, such as :meth:`loop.run_forever` and :meth:`loop."
"call_soon`.  Modern asyncio applications rarely need to be written this way; "
"consider using the high-level functions like :func:`asyncio.run`."
msgstr ""
"Perceba que todos os exemplos nesta seção **propositalmente** mostram como "
"usar as APIs de baixo nível do laço de eventos, tais como :meth:`loop."
"run_forever` e :meth:`loop.call_soon`. Aplicações asyncio modernas raramente "
"precisam ser escritas desta forma; considere usar as funções de alto nível "
"como :func:`asyncio.run`."

#: ../../library/asyncio-eventloop.rst:1827
msgid "Hello World with call_soon()"
msgstr "Hello World com call_soon()"

#: ../../library/asyncio-eventloop.rst:1829
msgid ""
"An example using the :meth:`loop.call_soon` method to schedule a callback. "
"The callback displays ``\"Hello World\"`` and then stops the event loop::"
msgstr ""
"Um exemplo usando o método :meth:`loop.call_soon` para agendar uma função de "
"retorno. A função de retorno exibe ``\"Hello World\"`` e então para o laço "
"de eventos::"

#: ../../library/asyncio-eventloop.rst:1833
msgid ""
"import asyncio\n"
"\n"
"def hello_world(loop):\n"
"    \"\"\"A callback to print 'Hello World' and stop the event loop\"\"\"\n"
"    print('Hello World')\n"
"    loop.stop()\n"
"\n"
"loop = asyncio.new_event_loop()\n"
"\n"
"# Schedule a call to hello_world()\n"
"loop.call_soon(hello_world, loop)\n"
"\n"
"# Blocking call interrupted by loop.stop()\n"
"try:\n"
"    loop.run_forever()\n"
"finally:\n"
"    loop.close()"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1853
msgid ""
"A similar :ref:`Hello World <coroutine>` example created with a coroutine "
"and the :func:`run` function."
msgstr ""
"Um exemplo similar a :ref:`Hello World <coroutine>` criado com uma corrotina "
"e a função :func:`run`."

#: ../../library/asyncio-eventloop.rst:1860
msgid "Display the current date with call_later()"
msgstr "Exibe a data atual com call_later()"

#: ../../library/asyncio-eventloop.rst:1862
msgid ""
"An example of a callback displaying the current date every second. The "
"callback uses the :meth:`loop.call_later` method to reschedule itself after "
"5 seconds, and then stops the event loop::"
msgstr ""
"Um exemplo de uma função de retorno mostrando a data atual a cada segundo. A "
"função de retorno usa o método :meth:`loop.call_later` para reagendar a si "
"mesma depois de 5 segundos, e então para o laço de eventos::"

#: ../../library/asyncio-eventloop.rst:1866
msgid ""
"import asyncio\n"
"import datetime\n"
"\n"
"def display_date(end_time, loop):\n"
"    print(datetime.datetime.now())\n"
"    if (loop.time() + 1.0) < end_time:\n"
"        loop.call_later(1, display_date, end_time, loop)\n"
"    else:\n"
"        loop.stop()\n"
"\n"
"loop = asyncio.new_event_loop()\n"
"\n"
"# Schedule the first call to display_date()\n"
"end_time = loop.time() + 5.0\n"
"loop.call_soon(display_date, end_time, loop)\n"
"\n"
"# Blocking call interrupted by loop.stop()\n"
"try:\n"
"    loop.run_forever()\n"
"finally:\n"
"    loop.close()"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1890
msgid ""
"A similar :ref:`current date <asyncio_example_sleep>` example created with a "
"coroutine and the :func:`run` function."
msgstr ""
"Um exemplo similar a :ref:`data atual <asyncio_example_sleep>` criado com "
"uma corrotina e a função :func:`run`."

#: ../../library/asyncio-eventloop.rst:1897
msgid "Watch a file descriptor for read events"
msgstr "Observa um descritor de arquivo por eventos de leitura"

#: ../../library/asyncio-eventloop.rst:1899
msgid ""
"Wait until a file descriptor received some data using the :meth:`loop."
"add_reader` method and then close the event loop::"
msgstr ""
"Aguarda até que um descritor de arquivo tenha recebido alguns dados usando o "
"método :meth:`loop.add_reader` e então fecha o laço de eventos::"

#: ../../library/asyncio-eventloop.rst:1902
msgid ""
"import asyncio\n"
"from socket import socketpair\n"
"\n"
"# Create a pair of connected file descriptors\n"
"rsock, wsock = socketpair()\n"
"\n"
"loop = asyncio.new_event_loop()\n"
"\n"
"def reader():\n"
"    data = rsock.recv(100)\n"
"    print(\"Received:\", data.decode())\n"
"\n"
"    # We are done: unregister the file descriptor\n"
"    loop.remove_reader(rsock)\n"
"\n"
"    # Stop the event loop\n"
"    loop.stop()\n"
"\n"
"# Register the file descriptor for read event\n"
"loop.add_reader(rsock, reader)\n"
"\n"
"# Simulate the reception of data from the network\n"
"loop.call_soon(wsock.send, 'abc'.encode())\n"
"\n"
"try:\n"
"    # Run the event loop\n"
"    loop.run_forever()\n"
"finally:\n"
"    # We are done. Close sockets and the event loop.\n"
"    rsock.close()\n"
"    wsock.close()\n"
"    loop.close()"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1937
msgid ""
"A similar :ref:`example <asyncio_example_create_connection>` using "
"transports, protocols, and the :meth:`loop.create_connection` method."
msgstr ""
"Um :ref:`exemplo <asyncio_example_create_connection>` similar usando "
"transportes, protocolos, e o método :meth:`loop.create_connection`."

#: ../../library/asyncio-eventloop.rst:1941
msgid ""
"Another similar :ref:`example <asyncio_example_create_connection-streams>` "
"using the high-level :func:`asyncio.open_connection` function and streams."
msgstr ""
"Outro :ref:`exemplo <asyncio_example_create_connection-streams>` similar "
"usando a função de alto nível :func:`asyncio.open_connection` e streams."

#: ../../library/asyncio-eventloop.rst:1949
msgid "Set signal handlers for SIGINT and SIGTERM"
msgstr "Define tratadores de sinais para SIGINT e SIGTERM"

#: ../../library/asyncio-eventloop.rst:1951
msgid "(This ``signals`` example only works on Unix.)"
msgstr "(Este exemplo de ``signals`` apenas funciona no Unix.)"

#: ../../library/asyncio-eventloop.rst:1953
msgid ""
"Register handlers for signals :const:`~signal.SIGINT` and :const:`~signal."
"SIGTERM` using the :meth:`loop.add_signal_handler` method::"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1956
msgid ""
"import asyncio\n"
"import functools\n"
"import os\n"
"import signal\n"
"\n"
"def ask_exit(signame, loop):\n"
"    print(\"got signal %s: exit\" % signame)\n"
"    loop.stop()\n"
"\n"
"async def main():\n"
"    loop = asyncio.get_running_loop()\n"
"\n"
"    for signame in {'SIGINT', 'SIGTERM'}:\n"
"        loop.add_signal_handler(\n"
"            getattr(signal, signame),\n"
"            functools.partial(ask_exit, signame, loop))\n"
"\n"
"    await asyncio.sleep(3600)\n"
"\n"
"print(\"Event loop running for 1 hour, press Ctrl+C to interrupt.\")\n"
"print(f\"pid {os.getpid()}: send SIGINT or SIGTERM to exit.\")\n"
"\n"
"asyncio.run(main())"
msgstr ""
