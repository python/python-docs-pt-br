# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Bonifacio de Oliveira <bonifacio.segundo@gmail.com>, 2021
# Lilian Corrêa <lilianflavia.cor@hotmail.com>, 2021
# Alexsandro Felix <felix@ffelix.eti.br>, 2021
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-07 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:54+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/abc.rst:2
msgid ":mod:`!abc` --- Abstract Base Classes"
msgstr ":mod:`!abc` --- Classes base abstratas"

#: ../../library/abc.rst:11
msgid "**Source code:** :source:`Lib/abc.py`"
msgstr "**Código-fonte:** :source:`Lib/abc.py`"

#: ../../library/abc.rst:15
msgid ""
"This module provides the infrastructure for defining :term:`abstract base "
"classes <abstract base class>` (ABCs) in Python, as outlined in :pep:`3119`; "
"see the PEP for why this was added to Python. (See also :pep:`3141` and the :"
"mod:`numbers` module regarding a type hierarchy for numbers based on ABCs.)"
msgstr ""
"Este módulo fornece a infraestrutura para definir :term:`classes base "
"abstratas <abstract base class>` (ABCs, do inglês *abstract base class*) em "
"Python, como delineado em :pep:`3119`; veja o PEP para entender o porquê "
"isto foi adicionado ao Python. (Veja também :pep:`3141` e o módulo :mod:"
"`numbers` sobre uma hierarquia de tipo para números baseado nas ABCs.)"

#: ../../library/abc.rst:20
msgid ""
"The :mod:`collections` module has some concrete classes that derive from "
"ABCs; these can, of course, be further derived. In addition, the :mod:"
"`collections.abc` submodule has some ABCs that can be used to test whether a "
"class or instance provides a particular interface, for example, if it is :"
"term:`hashable` or if it is a :term:`mapping`."
msgstr ""
"O módulo :mod:`collections` tem algumas classes concretas que derivam de "
"ABCs; essas podem, evidentemente, ser ainda mais derivadas. Além disso, o "
"submódulo :mod:`collections.abc` tem algumas ABCs que podem ser usadas para "
"testar se uma classe ou instância oferece uma interface particular, por "
"exemplo, se é :term:`hasheável` ou se é um :term:`mapeamento`."

#: ../../library/abc.rst:27
msgid ""
"This module provides the metaclass :class:`ABCMeta` for defining ABCs and a "
"helper class :class:`ABC` to alternatively define ABCs through inheritance:"
msgstr ""
"Este módulo fornece a metaclasse :class:`ABCMeta` para definir ABCs e uma "
"classe auxiliar :class:`ABC` para alternativamente definir ABCs através de "
"herança:"

#: ../../library/abc.rst:32
msgid ""
"A helper class that has :class:`ABCMeta` as its metaclass.  With this class, "
"an abstract base class can be created by simply deriving from :class:`!ABC` "
"avoiding sometimes confusing metaclass usage, for example::"
msgstr ""
"Uma classe auxiliar que tem :class:`ABCMeta` como sua metaclasse. Com essa "
"classe, uma classe base abstrata pode ser criada simplesmente derivando da :"
"class:`!ABC` evitando às vezes confundir o uso da metaclasse, por exemplo::"

#: ../../library/abc.rst:36
msgid ""
"from abc import ABC\n"
"\n"
"class MyABC(ABC):\n"
"    pass"
msgstr ""
"from abc import ABC\n"
"\n"
"class MyABC(ABC):\n"
"    pass"

#: ../../library/abc.rst:41
msgid ""
"Note that the type of :class:`!ABC` is still :class:`ABCMeta`, therefore "
"inheriting from :class:`!ABC` requires the usual precautions regarding "
"metaclass usage, as multiple inheritance may lead to metaclass conflicts. "
"One may also define an abstract base class by passing the metaclass keyword "
"and using :class:`!ABCMeta` directly, for example::"
msgstr ""
"Note que o tipo da classe :class:`!ABC` ainda é :class:`ABCMeta`, portanto "
"herdar da :class:`!ABC` requer as precauções usuais a respeito do uso da "
"metaclasse, pois herança múltipla pode levar a conflitos de metaclasse. Pode-"
"se também definir uma classe base abstrata ao passar a palavra reservada "
"metaclasse e usar :class:`!ABCMeta` diretamente, por exemplo::"

#: ../../library/abc.rst:47
msgid ""
"from abc import ABCMeta\n"
"\n"
"class MyABC(metaclass=ABCMeta):\n"
"    pass"
msgstr ""
"from abc import ABCMeta\n"
"\n"
"class MyABC(metaclass=ABCMeta):\n"
"    pass"

#: ../../library/abc.rst:57
msgid "Metaclass for defining Abstract Base Classes (ABCs)."
msgstr "Metaclasse para definir Classe Base Abstrata (ABCs)."

#: ../../library/abc.rst:59
msgid ""
"Use this metaclass to create an ABC.  An ABC can be subclassed directly, and "
"then acts as a mix-in class.  You can also register unrelated concrete "
"classes (even built-in classes) and unrelated ABCs as \"virtual subclasses\" "
"-- these and their descendants will be considered subclasses of the "
"registering ABC by the built-in :func:`issubclass` function, but the "
"registering ABC won't show up in their MRO (Method Resolution Order) nor "
"will method implementations defined by the registering ABC be callable (not "
"even via :func:`super`). [#]_"
msgstr ""
"Use esta metaclasse para criar uma ABC. Uma ABC pode ser diretamente "
"estendida, e então agir como uma classe misturada. Você também pode "
"registrar classes concretas não relacionadas (até mesmo classes embutidas) e "
"ABCs não relacionadas como \"subclasses virtuais\" -- estas e suas "
"descendentes serão consideradas subclasses da ABC de registro pela função "
"embutida :func:`issubclass`, mas a ABC de registro não irá aparecer na MRO "
"(Ordem de Resolução do Método) e nem as implementações do método definidas "
"pela ABC de registro será chamável (nem mesmo via :func:`super`). [#]_"

#: ../../library/abc.rst:68
msgid ""
"Classes created with a metaclass of :class:`!ABCMeta` have the following "
"method:"
msgstr ""
"Classes criadas com a metaclasse de :class:`!ABCMeta` tem o seguinte método:"

#: ../../library/abc.rst:72
msgid ""
"Register *subclass* as a \"virtual subclass\" of this ABC. For example::"
msgstr ""
"Registra *subclass* como uma \"subclasse virtual\" desta ABC. Por exemplo::"

#: ../../library/abc.rst:75
msgid ""
"from abc import ABC\n"
"\n"
"class MyABC(ABC):\n"
"    pass\n"
"\n"
"MyABC.register(tuple)\n"
"\n"
"assert issubclass(tuple, MyABC)\n"
"assert isinstance((), MyABC)"
msgstr ""
"from abc import ABC\n"
"\n"
"class MyABC(ABC):\n"
"    pass\n"
"\n"
"MyABC.register(tuple)\n"
"\n"
"assert issubclass(tuple, MyABC)\n"
"assert isinstance((), MyABC)"

#: ../../library/abc.rst:85
msgid "Returns the registered subclass, to allow usage as a class decorator."
msgstr ""
"Retorna a subclasse registrada, para permitir o uso como um decorador de "
"classe."

#: ../../library/abc.rst:88
msgid ""
"To detect calls to :meth:`!register`, you can use the :func:"
"`get_cache_token` function."
msgstr ""
"Para detectar chamadas para :meth:`!register`, você pode usar a função :func:"
"`get_cache_token`."

#: ../../library/abc.rst:92
msgid "You can also override this method in an abstract base class:"
msgstr "Você também pode sobrepor este método em uma classe base abstrata:"

#: ../../library/abc.rst:96
msgid "(Must be defined as a class method.)"
msgstr "(Deve obrigatoriamente ser definido como um método de classe.)"

#: ../../library/abc.rst:98
msgid ""
"Check whether *subclass* is considered a subclass of this ABC.  This means "
"that you can customize the behavior of :func:`issubclass` further without "
"the need to call :meth:`register` on every class you want to consider a "
"subclass of the ABC.  (This class method is called from the :meth:`~type."
"__subclasscheck__` method of the ABC.)"
msgstr ""
"Verifica se *subclass* é considerada uma subclasse desta ABC. Isto significa "
"que você pode personalizar ainda mais o comportamento de :func:`issubclass` "
"sem a necessidade de chamar :meth:`register` em toda classe que você queira "
"considerar uma subclasse da ABC. (Este método de classe é chamado do método :"
"meth:`~type.__subclasscheck__` da ABC.)"

#: ../../library/abc.rst:104
msgid ""
"This method should return ``True``, ``False`` or :data:`NotImplemented`.  If "
"it returns ``True``, the *subclass* is considered a subclass of this ABC. If "
"it returns ``False``, the *subclass* is not considered a subclass of this "
"ABC, even if it would normally be one.  If it returns :data:`!"
"NotImplemented`, the subclass check is continued with the usual mechanism."
msgstr ""
"Este método deve retornar ``True``, ``False`` ou :data:`NotImplemented`. Se "
"retornar ``True``, *subclass* é considerada uma subclasse desta ABC. Se "
"retornar ``False``, *subclass* não é considerada uma subclasse desta ABC, "
"mesmo que normalmente seria uma. Se retornar :data:`!NotImplemented`, a "
"verificação da subclasse é continuada com o mecanismo usual."

#: ../../library/abc.rst:114
msgid ""
"For a demonstration of these concepts, look at this example ABC definition::"
msgstr ""
"Para uma demonstração destes conceitos, veja este exemplo de definição ABC::"

#: ../../library/abc.rst:116
msgid ""
"class Foo:\n"
"    def __getitem__(self, index):\n"
"        ...\n"
"    def __len__(self):\n"
"        ...\n"
"    def get_iterator(self):\n"
"        return iter(self)\n"
"\n"
"class MyIterable(ABC):\n"
"\n"
"    @abstractmethod\n"
"    def __iter__(self):\n"
"        while False:\n"
"            yield None\n"
"\n"
"    def get_iterator(self):\n"
"        return self.__iter__()\n"
"\n"
"    @classmethod\n"
"    def __subclasshook__(cls, C):\n"
"        if cls is MyIterable:\n"
"            if any(\"__iter__\" in B.__dict__ for B in C.__mro__):\n"
"                return True\n"
"        return NotImplemented\n"
"\n"
"MyIterable.register(Foo)"
msgstr ""
"class Foo:\n"
"    def __getitem__(self, index):\n"
"        ...\n"
"    def __len__(self):\n"
"        ...\n"
"    def get_iterator(self):\n"
"        return iter(self)\n"
"\n"
"class MyIterable(ABC):\n"
"\n"
"    @abstractmethod\n"
"    def __iter__(self):\n"
"        while False:\n"
"            yield None\n"
"\n"
"    def get_iterator(self):\n"
"        return self.__iter__()\n"
"\n"
"    @classmethod\n"
"    def __subclasshook__(cls, C):\n"
"        if cls is MyIterable:\n"
"            if any(\"__iter__\" in B.__dict__ for B in C.__mro__):\n"
"                return True\n"
"        return NotImplemented\n"
"\n"
"MyIterable.register(Foo)"

#: ../../library/abc.rst:143
msgid ""
"The ABC ``MyIterable`` defines the standard iterable method, :meth:"
"`~iterator.__iter__`, as an abstract method.  The implementation given here "
"can still be called from subclasses.  The :meth:`!get_iterator` method is "
"also part of the ``MyIterable`` abstract base class, but it does not have to "
"be overridden in non-abstract derived classes."
msgstr ""
"A ``MyIterable`` da ABC define o método iterável padrão, :meth:`~iterator."
"__iter__`, como um método abstrato. A implementação dada aqui pode ainda ser "
"chamada da subclasse. O método :meth:`!get_iterator` é também parte da "
"classe base abstrata ``MyIterable`` , mas não precisa ser substituído nas "
"classes derivadas não abstratas."

#: ../../library/abc.rst:149
msgid ""
"The :meth:`__subclasshook__` class method defined here says that any class "
"that has an :meth:`~iterator.__iter__` method in its :attr:`~object."
"__dict__` (or in that of one of its base classes, accessed via the :attr:"
"`~type.__mro__` list) is considered a ``MyIterable`` too."
msgstr ""
"O método de classe :meth:`__subclasshook__` definido aqui diz que qualquer "
"classe que tenha um método :meth:`~iterator.__iter__` em seu :attr:`~object."
"__dict__` (ou no de uma de suas classes base, acessados via lista :attr:"
"`~type.__mro__`) é considerada uma ``MyIterable`` também."

#: ../../library/abc.rst:154
msgid ""
"Finally, the last line makes ``Foo`` a virtual subclass of ``MyIterable``, "
"even though it does not define an :meth:`~iterator.__iter__` method (it uses "
"the old-style iterable protocol, defined in terms of :meth:`~object.__len__` "
"and :meth:`~object.__getitem__`).  Note that this will not make "
"``get_iterator`` available as a method of ``Foo``, so it is provided "
"separately."
msgstr ""
"Finalmente, a última linha faz de ``Foo`` uma subclasse virtual da "
"``MyIterable``, apesar de não definir um método :meth:`~iterator.__iter__` "
"(ela usa o protocolo iterável antigo, definido em termos de :meth:`~object."
"__len__` e :meth:`~object.__getitem__`). Note que isto não fará o "
"``get_iterator`` disponível como um método de ``Foo``, então ele é fornecido "
"separadamente."

#: ../../library/abc.rst:163
msgid "The :mod:`!abc` module also provides the following decorator:"
msgstr "O módulo :mod:`!abc` também fornece o seguinte decorador:"

#: ../../library/abc.rst:167
msgid "A decorator indicating abstract methods."
msgstr "Um decorador indicando métodos abstratos."

#: ../../library/abc.rst:169
msgid ""
"Using this decorator requires that the class's metaclass is :class:`ABCMeta` "
"or is derived from it.  A class that has a metaclass derived from :class:`!"
"ABCMeta` cannot be instantiated unless all of its abstract methods and "
"properties are overridden.  The abstract methods can be called using any of "
"the normal 'super' call mechanisms.  :func:`!abstractmethod` may be used to "
"declare abstract methods for properties and descriptors."
msgstr ""
"Usar este decorador requer que a metaclasse da classe seja :class:`ABCMeta` "
"ou seja derivada desta. Uma classe que tem uma metaclasse derivada de :class:"
"`!ABCMeta` não pode ser instanciada, a menos que todos os seus métodos "
"abstratos e propriedades estejam substituídos. Os métodos abstratos podem "
"ser chamados usando qualquer um dos mecanismos normais de chamadas a "
"'super'. :func:`!abstractmethod` pode ser usado para declarar métodos "
"abstratos para propriedades e descritores."

#: ../../library/abc.rst:176
msgid ""
"Dynamically adding abstract methods to a class, or attempting to modify the "
"abstraction status of a method or class once it is created, are only "
"supported using the :func:`update_abstractmethods` function.  The :func:`!"
"abstractmethod` only affects subclasses derived using regular inheritance; "
"\"virtual subclasses\" registered with the ABC's :meth:`~ABCMeta.register` "
"method are not affected."
msgstr ""
"Adicionar dinamicamente métodos abstratos a uma classe, ou tentar modificar "
"o status de abstração de um método ou classe uma vez que estejam criados, só "
"é suportado usando a função :func:`update_abstractmethods`. A :func:`!"
"abstractmethod` afeta apenas subclasses derivadas usando herança regular; "
"\"subclasses virtuais\" registradas com o método :meth:`~ABCMeta.register` "
"da ABC não são afetadas."

#: ../../library/abc.rst:183
msgid ""
"When :func:`!abstractmethod` is applied in combination with other method "
"descriptors, it should be applied as the innermost decorator, as shown in "
"the following usage examples::"
msgstr ""
"Quando :func:`!abstractmethod` é aplicado em combinação com outros "
"descritores de método, ele deve ser aplicado como o decorador mais interno, "
"como mostrado nos seguintes exemplos de uso::"

#: ../../library/abc.rst:187
msgid ""
"class C(ABC):\n"
"    @abstractmethod\n"
"    def my_abstract_method(self, arg1):\n"
"        ...\n"
"    @classmethod\n"
"    @abstractmethod\n"
"    def my_abstract_classmethod(cls, arg2):\n"
"        ...\n"
"    @staticmethod\n"
"    @abstractmethod\n"
"    def my_abstract_staticmethod(arg3):\n"
"        ...\n"
"\n"
"    @property\n"
"    @abstractmethod\n"
"    def my_abstract_property(self):\n"
"        ...\n"
"    @my_abstract_property.setter\n"
"    @abstractmethod\n"
"    def my_abstract_property(self, val):\n"
"        ...\n"
"\n"
"    @abstractmethod\n"
"    def _get_x(self):\n"
"        ...\n"
"    @abstractmethod\n"
"    def _set_x(self, val):\n"
"        ...\n"
"    x = property(_get_x, _set_x)"
msgstr ""
"class C(ABC):\n"
"    @abstractmethod\n"
"    def my_abstract_method(self, arg1):\n"
"        ...\n"
"    @classmethod\n"
"    @abstractmethod\n"
"    def my_abstract_classmethod(cls, arg2):\n"
"        ...\n"
"    @staticmethod\n"
"    @abstractmethod\n"
"    def my_abstract_staticmethod(arg3):\n"
"        ...\n"
"\n"
"    @property\n"
"    @abstractmethod\n"
"    def my_abstract_property(self):\n"
"        ...\n"
"    @my_abstract_property.setter\n"
"    @abstractmethod\n"
"    def my_abstract_property(self, val):\n"
"        ...\n"
"\n"
"    @abstractmethod\n"
"    def _get_x(self):\n"
"        ...\n"
"    @abstractmethod\n"
"    def _set_x(self, val):\n"
"        ...\n"
"    x = property(_get_x, _set_x)"

#: ../../library/abc.rst:217
msgid ""
"In order to correctly interoperate with the abstract base class machinery, "
"the descriptor must identify itself as abstract using :attr:`!"
"__isabstractmethod__`. In general, this attribute should be ``True`` if any "
"of the methods used to compose the descriptor are abstract. For example, "
"Python's built-in :class:`property` does the equivalent of::"
msgstr ""
"Para que interopere corretamente com o maquinário da classe base abstrata, o "
"descritor precisa identificar-se como abstrato usando :attr:`!"
"__isabstractmethod__`. No geral, este atributo deve ser ``True`` se algum "
"dos métodos usados para compor o descritor for abstrato. Por exemplo, a :"
"class:`property` embutida do Python faz o equivalente a::"

#: ../../library/abc.rst:223
msgid ""
"class Descriptor:\n"
"    ...\n"
"    @property\n"
"    def __isabstractmethod__(self):\n"
"        return any(getattr(f, '__isabstractmethod__', False) for\n"
"                   f in (self._fget, self._fset, self._fdel))"
msgstr ""
"class Descriptor:\n"
"    ...\n"
"    @property\n"
"    def __isabstractmethod__(self):\n"
"        return any(getattr(f, '__isabstractmethod__', False) for\n"
"                   f in (self._fget, self._fset, self._fdel))"

#: ../../library/abc.rst:232
msgid ""
"Unlike Java abstract methods, these abstract methods may have an "
"implementation. This implementation can be called via the :func:`super` "
"mechanism from the class that overrides it.  This could be useful as an end-"
"point for a super-call in a framework that uses cooperative multiple-"
"inheritance."
msgstr ""
"Diferente de métodos abstratos Java, esses métodos abstratos podem ter uma "
"implementação. Esta implementação pode ser chamada via mecanismo da :func:"
"`super` da classe que a substitui. Isto pode ser útil como um ponto final "
"para uma super chamada em um framework que usa herança múltipla cooperativa."

#: ../../library/abc.rst:239
msgid "The :mod:`!abc` module also supports the following legacy decorators:"
msgstr "O módulo :mod:`!abc` também suporta os seguintes decoradores herdados:"

#: ../../library/abc.rst:244
msgid ""
"It is now possible to use :class:`classmethod` with :func:`abstractmethod`, "
"making this decorator redundant."
msgstr ""
"Agora é possível usar :class:`classmethod` com :func:`abstractmethod`, "
"tornando redundante este decorador."

#: ../../library/abc.rst:248
msgid ""
"A subclass of the built-in :func:`classmethod`, indicating an abstract "
"classmethod. Otherwise it is similar to :func:`abstractmethod`."
msgstr ""
"Uma subclasse da :func:`classmethod` embutida, indicando um método de classe "
"abstrato. Caso contrário, é similar à :func:`abstractmethod`."

#: ../../library/abc.rst:251
msgid ""
"This special case is deprecated, as the :func:`classmethod` decorator is now "
"correctly identified as abstract when applied to an abstract method::"
msgstr ""
"Este caso especial está descontinuado, pois o decorador da :func:"
"`classmethod` está agora corretamente identificado como abstrato quando "
"aplicado a um método abstrato::"

#: ../../library/abc.rst:255
msgid ""
"class C(ABC):\n"
"    @classmethod\n"
"    @abstractmethod\n"
"    def my_abstract_classmethod(cls, arg):\n"
"        ..."
msgstr ""
"class C(ABC):\n"
"    @classmethod\n"
"    @abstractmethod\n"
"    def my_abstract_classmethod(cls, arg):\n"
"        ..."

#: ../../library/abc.rst:265
msgid ""
"It is now possible to use :class:`staticmethod` with :func:`abstractmethod`, "
"making this decorator redundant."
msgstr ""
"Agora é possível usar :class:`staticmethod` com :func:`abstractmethod`, "
"tornando redundante este decorador."

#: ../../library/abc.rst:269
msgid ""
"A subclass of the built-in :func:`staticmethod`, indicating an abstract "
"staticmethod. Otherwise it is similar to :func:`abstractmethod`."
msgstr ""
"Uma subclasse da :func:`staticmethod` embutida, indicando um método estático "
"abstrato. Caso contrário, ela é similar à :func:`abstractmethod`."

#: ../../library/abc.rst:272
msgid ""
"This special case is deprecated, as the :func:`staticmethod` decorator is "
"now correctly identified as abstract when applied to an abstract method::"
msgstr ""
"Este caso especial está descontinuado, pois o decorador da :func:"
"`staticmethod` está agora corretamente identificado como abstrato quando "
"aplicado a um método abstrato::"

#: ../../library/abc.rst:276
msgid ""
"class C(ABC):\n"
"    @staticmethod\n"
"    @abstractmethod\n"
"    def my_abstract_staticmethod(arg):\n"
"        ..."
msgstr ""
"class C(ABC):\n"
"    @staticmethod\n"
"    @abstractmethod\n"
"    def my_abstract_staticmethod(arg):\n"
"        ..."

#: ../../library/abc.rst:285
msgid ""
"It is now possible to use :class:`property`, :meth:`property.getter`, :meth:"
"`property.setter` and :meth:`property.deleter` with :func:`abstractmethod`, "
"making this decorator redundant."
msgstr ""
"Agora é possível usar :class:`property`, :meth:`property.getter`, :meth:"
"`property.setter` e :meth:`property.deleter` com :func:`abstractmethod`, "
"tornando redundante este decorador."

#: ../../library/abc.rst:290
msgid ""
"A subclass of the built-in :func:`property`, indicating an abstract property."
msgstr ""
"Uma subclasse da :func:`property` embutida, indicando uma propriedade "
"abstrata."

#: ../../library/abc.rst:293
msgid ""
"This special case is deprecated, as the :func:`property` decorator is now "
"correctly identified as abstract when applied to an abstract method::"
msgstr ""
"Este caso especial está descontinuado, pois o decorador da :func:`property` "
"está agora corretamente identificado como abstrato quando aplicado a um "
"método abstrato::"

#: ../../library/abc.rst:297
msgid ""
"class C(ABC):\n"
"    @property\n"
"    @abstractmethod\n"
"    def my_abstract_property(self):\n"
"        ..."
msgstr ""
"class C(ABC):\n"
"    @property\n"
"    @abstractmethod\n"
"    def my_abstract_property(self):\n"
"        ..."

#: ../../library/abc.rst:303
msgid ""
"The above example defines a read-only property; you can also define a read-"
"write abstract property by appropriately marking one or more of the "
"underlying methods as abstract::"
msgstr ""
"O exemplo acima define uma propriedade somente leitura; você também pode "
"definir uma propriedade abstrata de leitura e escrita marcando "
"apropriadamente um ou mais dos métodos subjacentes como abstratos::"

#: ../../library/abc.rst:307
msgid ""
"class C(ABC):\n"
"    @property\n"
"    def x(self):\n"
"        ...\n"
"\n"
"    @x.setter\n"
"    @abstractmethod\n"
"    def x(self, val):\n"
"        ..."
msgstr ""
"class C(ABC):\n"
"    @property\n"
"    def x(self):\n"
"        ...\n"
"\n"
"    @x.setter\n"
"    @abstractmethod\n"
"    def x(self, val):\n"
"        ..."

#: ../../library/abc.rst:317
msgid ""
"If only some components are abstract, only those components need to be "
"updated to create a concrete property in a subclass::"
msgstr ""
"Se apenas alguns componentes são abstratos, apenas estes componentes "
"precisam ser atualizados para criar uma propriedade concreta em uma "
"subclasse::"

#: ../../library/abc.rst:320
msgid ""
"class D(C):\n"
"    @C.x.setter\n"
"    def x(self, val):\n"
"        ..."
msgstr ""
"class D(C):\n"
"    @C.x.setter\n"
"    def x(self, val):\n"
"        ..."

#: ../../library/abc.rst:326
msgid "The :mod:`!abc` module also provides the following functions:"
msgstr "O módulo :mod:`!abc` também fornece as seguintes funções:"

#: ../../library/abc.rst:330
msgid "Returns the current abstract base class cache token."
msgstr "Retorna o token de cache da classe base abstrata atual."

#: ../../library/abc.rst:332
msgid ""
"The token is an opaque object (that supports equality testing) identifying "
"the current version of the abstract base class cache for virtual subclasses. "
"The token changes with every call to :meth:`ABCMeta.register` on any ABC."
msgstr ""
"O token é um objeto opaco (que suporta teste de igualdade) identificando a "
"versão atual do cache da classe base abstrata para subclasses virtuais. O "
"token muda a cada chamada ao :meth:`ABCMeta.register` em qualquer CBA."

#: ../../library/abc.rst:340
msgid ""
"A function to recalculate an abstract class's abstraction status. This "
"function should be called if a class's abstract methods have been "
"implemented or changed after it was created. Usually, this function should "
"be called from within a class decorator."
msgstr ""
"Uma função para recalcular o status de abstração de uma classe abstrata. "
"Esta função deve ser chamada se os métodos abstratos de uma classe foram "
"implementados ou alterados após sua criação. Normalmente, essa função deve "
"ser chamada de dentro de um decorador de classe."

#: ../../library/abc.rst:345
msgid "Returns *cls*, to allow usage as a class decorator."
msgstr "Retorna *cls*, para permitir o uso como decorador de classe."

#: ../../library/abc.rst:347
msgid "If *cls* is not an instance of :class:`ABCMeta`, does nothing."
msgstr "Se *cls* não for uma instância de :class:`ABCMeta`, não faz nada."

#: ../../library/abc.rst:351
msgid ""
"This function assumes that *cls*'s superclasses are already updated. It does "
"not update any subclasses."
msgstr ""
"Esta função presume que as superclasses de *cls* já estão atualizadas. Ele "
"não atualiza nenhuma subclasse."

#: ../../library/abc.rst:357
msgid "Footnotes"
msgstr "Notas de rodapé"

#: ../../library/abc.rst:358
msgid ""
"C++ programmers should note that Python's virtual base class concept is not "
"the same as C++'s."
msgstr ""
"Programadores C++ devem notar que o conceito da classe base virtual do "
"Python não é o mesmo que o de C++."
