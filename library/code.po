# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-30 15:36+0000\n"
"PO-Revision-Date: 2023-05-24 02:13+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/code.rst:2
msgid ":mod:`code` --- Interpreter base classes"
msgstr ":mod:`code` --- Classes Bases do Interpretador"

#: ../../library/code.rst:7
msgid "**Source code:** :source:`Lib/code.py`"
msgstr "**Código-fonte:** :source:`Lib/code.py`"

#: ../../library/code.rst:11
msgid ""
"The ``code`` module provides facilities to implement read-eval-print loops "
"in Python.  Two classes and convenience functions are included which can be "
"used to build applications which provide an interactive interpreter prompt."
msgstr ""
"O módulo ``code`` fornece facilidades para implementar laços de leitura-"
"execução-escrita no código Python. São incluídas duas classes e funções de "
"conveniência que podem ser usadas para criar aplicações que fornecem um "
"prompt de interpretador interativo."

#: ../../library/code.rst:18
msgid ""
"This class deals with parsing and interpreter state (the user's namespace); "
"it does not deal with input buffering or prompting or input file naming (the "
"filename is always passed in explicitly). The optional *locals* argument "
"specifies the dictionary in which code will be executed; it defaults to a "
"newly created dictionary with key ``'__name__'`` set to ``'__console__'`` "
"and key ``'__doc__'`` set to ``None``."
msgstr ""
"Esta classe trata de analisar e interpretar o estado (espaço de nome do "
"usuário); o mesmo não lida com buffer de entrada ou solicitação ou nomeação "
"de arquivo de entrada (o nome do arquivo é sempre passado explicitamente). O "
"argumento opcional *local* especifica o dicionário no qual o código será "
"executado; ele é padrão para um dicionário recém-criado com a chave "
"``'__name__'`` set to ``'__console__'`` and key ``'__doc__'`` definido com "
"``None``."

#: ../../library/code.rst:28
msgid ""
"Closely emulate the behavior of the interactive Python interpreter. This "
"class builds on :class:`InteractiveInterpreter` and adds prompting using the "
"familiar ``sys.ps1`` and ``sys.ps2``, and input buffering."
msgstr ""
"Emula de forma bem similiar o comportamento do interpretador Python "
"interativo. Esta classe se baseia em :class:`InteractiveInterpreter` e "
"adiciona prompting usando os familiares ``sys.ps1`` e ``sys.ps2``, e "
"buffering de entrada."

#: ../../library/code.rst:35
msgid ""
"Convenience function to run a read-eval-print loop.  This creates a new "
"instance of :class:`InteractiveConsole` and sets *readfunc* to be used as "
"the :meth:`InteractiveConsole.raw_input` method, if provided.  If *local* is "
"provided, it is passed to the :class:`InteractiveConsole` constructor for "
"use as the default namespace for the interpreter loop.  The :meth:`interact` "
"method of the instance is then run with *banner* and *exitmsg* passed as the "
"banner and exit message to use, if provided.  The console object is "
"discarded after use."
msgstr ""

#: ../../library/code.rst:44
msgid "Added *exitmsg* parameter."
msgstr "Parâmetro adicionado *exitmsg*."

#: ../../library/code.rst:50
msgid ""
"This function is useful for programs that want to emulate Python's "
"interpreter main loop (a.k.a. the read-eval-print loop).  The tricky part is "
"to determine when the user has entered an incomplete command that can be "
"completed by entering more text (as opposed to a complete command or a "
"syntax error).  This function *almost* always makes the same decision as the "
"real interpreter main loop."
msgstr ""
"Esta função é útil para programas que desejam emular o laço principal do "
"interpretador Python (também conhecido como laço de leitura-execução-"
"impressão). A parte complicada é determinar quando o usuário digitou um "
"comando incompleto que pode ser concluído inserindo mais texto (em vez de um "
"comando completo ou um erro de sintaxe). Esta função *quase* sempre toma a "
"mesma decisão que o laço principal do interpretador real."

#: ../../library/code.rst:57
msgid ""
"*source* is the source string; *filename* is the optional filename from "
"which source was read, defaulting to ``'<input>'``; and *symbol* is the "
"optional grammar start symbol, which should be ``'single'`` (the default), "
"``'eval'`` or ``'exec'``."
msgstr ""
"*source* é a string fonte; *filename* é o nome do arquivo opcional do qual a "
"fonte foi lida, sendo o padrão ``'<input>'``; e *symbol* é o símbolo "
"opcional de início da gramática, que deve ser ``'single'`` (o padrão), "
"``'eval'`` ou ``'exec'``."

#: ../../library/code.rst:62
msgid ""
"Returns a code object (the same as ``compile(source, filename, symbol)``) if "
"the command is complete and valid; ``None`` if the command is incomplete; "
"raises :exc:`SyntaxError` if the command is complete and contains a syntax "
"error, or raises :exc:`OverflowError` or :exc:`ValueError` if the command "
"contains an invalid literal."
msgstr ""
"Retorna um objeto código (o mesmo que ``compile(source, filename, symbol)``) "
"se o comando for completo e válido; ``None`` se o comando estiver "
"incompleto; levanta :exc:`SyntaxError` se o comando estiver completo e "
"contém um erro de sintaxe, ou levanta :exc:`OverflowError` ou :exc:"
"`ValueError` se o comando contiver um literal inválido."

#: ../../library/code.rst:72
msgid "Interactive Interpreter Objects"
msgstr "Objetos de interpretador interativo"

#: ../../library/code.rst:77
msgid ""
"Compile and run some source in the interpreter. Arguments are the same as "
"for :func:`compile_command`; the default for *filename* is ``'<input>'``, "
"and for *symbol* is ``'single'``.  One of several things can happen:"
msgstr ""
"Compila e executa alguma fonte no interpretador. Os argumentos são os mesmos "
"de :func:`compile_command`; o padrão para *filename* é ``'<input>'``, e para "
"*symbol* é ``'single'``. Uma de várias coisas pode acontecer:"

#: ../../library/code.rst:81
msgid ""
"The input is incorrect; :func:`compile_command` raised an exception (:exc:"
"`SyntaxError` or :exc:`OverflowError`).  A syntax traceback will be printed "
"by calling the :meth:`showsyntaxerror` method.  :meth:`runsource` returns "
"``False``."
msgstr ""
"A entrada está incorreta; :func:`compile_command` levantou uma exceção (:exc:"
"`SyntaxError` ou :exc:`OverflowError`). Um traceback da sintaxe será "
"impresso chamando o método :meth:`showsyntaxerror`. :meth:`runsource` "
"retorna ``False``."

#: ../../library/code.rst:86
msgid ""
"The input is incomplete, and more input is required; :func:`compile_command` "
"returned ``None``. :meth:`runsource` returns ``True``."
msgstr ""
"A entrada está incompleta e são necessárias mais entradas; :func:"
"`compile_command` retornou ``None``. :meth:`runsource` retorna ``True``."

#: ../../library/code.rst:89
msgid ""
"The input is complete; :func:`compile_command` returned a code object.  The "
"code is executed by calling the :meth:`runcode` (which also handles run-time "
"exceptions, except for :exc:`SystemExit`). :meth:`runsource` returns "
"``False``."
msgstr ""
"A entrada está completa; :func:`compile_command` retornou um objeto código. "
"O código é executado chamando :meth:`runcode` (que também lida com exceções "
"de tempo de execução, exceto :exc:`SystemExit`). :meth:`runsource` retorna "
"``False``."

#: ../../library/code.rst:93
msgid ""
"The return value can be used to decide whether to use ``sys.ps1`` or ``sys."
"ps2`` to prompt the next line."
msgstr ""
"O valor de retorno pode ser usado para decidir se usar ``sys.ps1`` ou ``sys."
"ps2`` para solicitar a próxima linha."

#: ../../library/code.rst:99
msgid ""
"Execute a code object. When an exception occurs, :meth:`showtraceback` is "
"called to display a traceback.  All exceptions are caught except :exc:"
"`SystemExit`, which is allowed to propagate."
msgstr ""
"Executa um objeto código. Quando ocorre uma exceção, :meth:`showtraceback` é "
"chamado para exibir um traceback. Todas as exceções são capturadas, exceto :"
"exc:`SystemExit`, que pode ser propagada."

#: ../../library/code.rst:103
msgid ""
"A note about :exc:`KeyboardInterrupt`: this exception may occur elsewhere in "
"this code, and may not always be caught.  The caller should be prepared to "
"deal with it."
msgstr ""
"Uma observação sobre :exc:`KeyboardInterrupt`: esta exceção pode ocorrer em "
"outro lugar neste código e nem sempre pode ser detectada. O chamador deve "
"estar preparado para lidar com isso."

#: ../../library/code.rst:110
msgid ""
"Display the syntax error that just occurred.  This does not display a stack "
"trace because there isn't one for syntax errors. If *filename* is given, it "
"is stuffed into the exception instead of the default filename provided by "
"Python's parser, because it always uses ``'<string>'`` when reading from a "
"string. The output is written by the :meth:`write` method."
msgstr ""
"Exibe o erro de sintaxe que acabou de ocorrer. Isso não exibe um stack trace "
"(situação da pilha de execução) porque não há um para erros de sintaxe. Se "
"*filename* for fornecido, ele será inserido na exceção em vez do nome de "
"arquivo padrão fornecido pelo analisador sintático do Python, porque ele "
"sempre usa ``'<string>'`` ao ler uma string. A saída é escrita pelo método :"
"meth:`write`."

#: ../../library/code.rst:119
msgid ""
"Display the exception that just occurred.  We remove the first stack item "
"because it is within the interpreter object implementation. The output is "
"written by the :meth:`write` method."
msgstr ""
"Exibe a exceção que acabou de ocorrer. Removemos o primeiro item da pilha "
"porque ele está dentro da implementação do objeto interpretador. A saída é "
"escrita pelo método :meth:`write`."

#: ../../library/code.rst:123
msgid ""
"The full chained traceback is displayed instead of just the primary "
"traceback."
msgstr ""
"O traceback encadeado completo é exibido em vez de apenas o traceback "
"primário."

#: ../../library/code.rst:129
msgid ""
"Write a string to the standard error stream (``sys.stderr``). Derived "
"classes should override this to provide the appropriate output handling as "
"needed."
msgstr ""
"Escreve uma string no fluxo de erro padrão (``sys.stderr``). As classes "
"derivadas devem substituir isso para fornecer o tratamento de saída "
"apropriado conforme necessário."

#: ../../library/code.rst:136
msgid "Interactive Console Objects"
msgstr "Objetos de console Interativo"

#: ../../library/code.rst:138
msgid ""
"The :class:`InteractiveConsole` class is a subclass of :class:"
"`InteractiveInterpreter`, and so offers all the methods of the interpreter "
"objects as well as the following additions."
msgstr ""
"A classe :class:`InteractiveConsole` é uma subclasse de :class:"
"`InteractiveInterpreter` e, portanto, oferece todos os métodos dos objetos "
"interpretadores, bem como as seguintes adições."

#: ../../library/code.rst:145
msgid ""
"Closely emulate the interactive Python console. The optional *banner* "
"argument specify the banner to print before the first interaction; by "
"default it prints a banner similar to the one printed by the standard Python "
"interpreter, followed by the class name of the console object in parentheses "
"(so as not to confuse this with the real interpreter -- since it's so "
"close!)."
msgstr ""
"Emula de forma muito semelhante o console interativo do Python. O argumento "
"opcional *banner* especifica o banner a ser impresso antes da primeira "
"interação; por padrão ele imprime um banner semelhante ao impresso pelo "
"interpretador Python padrão, seguido pelo nome da classe do objeto console "
"entre parênteses (para não confundir isso com o interpretador real -- já que "
"está tão próximo!)."

#: ../../library/code.rst:151
msgid ""
"The optional *exitmsg* argument specifies an exit message printed when "
"exiting. Pass the empty string to suppress the exit message. If *exitmsg* is "
"not given or ``None``, a default message is printed."
msgstr ""
"O argumento opcional *exitmsg* especifica uma mensagem de saída impressa ao "
"sair. Passe a string vazia para suprimir a mensagem de saída. Se *exitmsg* "
"não for fornecido ou ``None``, uma mensagem padrão será impressa."

#: ../../library/code.rst:155
msgid "To suppress printing any banner, pass an empty string."
msgstr "Para suprimir a impressão de qualquer banner, passe uma string vazia."

#: ../../library/code.rst:158
msgid "Print an exit message when exiting."
msgstr "Imprime uma mensagem de saída ao sair."

#: ../../library/code.rst:164
msgid ""
"Push a line of source text to the interpreter. The line should not have a "
"trailing newline; it may have internal newlines.  The line is appended to a "
"buffer and the interpreter's :meth:`~InteractiveInterpreter.runsource` "
"method is called with the concatenated contents of the buffer as source.  If "
"this indicates that the command was executed or invalid, the buffer is "
"reset; otherwise, the command is incomplete, and the buffer is left as it "
"was after the line was appended.  The return value is ``True`` if more input "
"is required, ``False`` if the line was dealt with in some way (this is the "
"same as :meth:`!runsource`)."
msgstr ""
"Envia uma linha do texto fonte para o interpretador. A linha não deve ter "
"uma nova linha à direita; pode ter novas linhas internas. A linha é anexada "
"a um buffer e o método :meth:`~InteractiveInterpreter.runsource` do "
"interpretador é chamado com o conteúdo concatenado do buffer como fonte. Se "
"isso indicar que o comando foi executado ou é inválido, o buffer será "
"redefinido; caso contrário, o comando estará incompleto e o buffer "
"permanecerá como estava após a linha ser anexada. O valor de retorno é "
"``True`` se mais entrada for necessária, ``False`` se a linha foi tratada de "
"alguma forma (isto é o mesmo que :meth:`!runsource`)."

#: ../../library/code.rst:176
msgid "Remove any unhandled source text from the input buffer."
msgstr "Remove qualquer texto fonte não tratado do buffer de entrada."

#: ../../library/code.rst:181
msgid ""
"Write a prompt and read a line.  The returned line does not include the "
"trailing newline.  When the user enters the EOF key sequence, :exc:"
"`EOFError` is raised. The base implementation reads from ``sys.stdin``; a "
"subclass may replace this with a different implementation."
msgstr ""
"Escreve um prompt e leia uma linha. A linha retornada não inclui a nova "
"linha final. Quando o usuário insere a sequência de teclas de fim de linha, "
"uma exceção :exc:`EOFError` é levantada. A implementação base lê ``sys."
"stdin``; uma subclasse pode substituir isso por uma implementação diferente."
