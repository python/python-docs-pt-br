# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2025-07-18 18:49+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/string.rst:2
msgid ":mod:`!string` --- Common string operations"
msgstr ""

#: ../../library/string.rst:7
msgid "**Source code:** :source:`Lib/string.py`"
msgstr ""

#: ../../library/string.rst:14
msgid ":ref:`textseq`"
msgstr ""

#: ../../library/string.rst:16
msgid ":ref:`string-methods`"
msgstr ""

#: ../../library/string.rst:19
msgid "String constants"
msgstr ""

#: ../../library/string.rst:21
msgid "The constants defined in this module are:"
msgstr ""

#: ../../library/string.rst:26
msgid ""
"The concatenation of the :const:`ascii_lowercase` and :const:"
"`ascii_uppercase` constants described below.  This value is not locale-"
"dependent."
msgstr ""

#: ../../library/string.rst:32
msgid ""
"The lowercase letters ``'abcdefghijklmnopqrstuvwxyz'``.  This value is not "
"locale-dependent and will not change."
msgstr ""

#: ../../library/string.rst:38
msgid ""
"The uppercase letters ``'ABCDEFGHIJKLMNOPQRSTUVWXYZ'``.  This value is not "
"locale-dependent and will not change."
msgstr ""

#: ../../library/string.rst:44
msgid "The string ``'0123456789'``."
msgstr ""

#: ../../library/string.rst:49
msgid "The string ``'0123456789abcdefABCDEF'``."
msgstr ""

#: ../../library/string.rst:54
msgid "The string ``'01234567'``."
msgstr ""

#: ../../library/string.rst:59
msgid ""
"String of ASCII characters which are considered punctuation characters in "
"the ``C`` locale: ``!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~``."
msgstr ""

#: ../../library/string.rst:65
msgid ""
"String of ASCII characters which are considered printable by Python. This is "
"a combination of :const:`digits`, :const:`ascii_letters`, :const:"
"`punctuation`, and :const:`whitespace`."
msgstr ""

#: ../../library/string.rst:71
msgid ""
"By design, :meth:`string.printable.isprintable() <str.isprintable>` returns :"
"const:`False`. In particular, ``string.printable`` is not printable in the "
"POSIX sense (see :manpage:`LC_CTYPE <locale(5)>`)."
msgstr ""

#: ../../library/string.rst:78
msgid ""
"A string containing all ASCII characters that are considered whitespace. "
"This includes the characters space, tab, linefeed, return, formfeed, and "
"vertical tab."
msgstr ""

#: ../../library/string.rst:86
msgid "Custom String Formatting"
msgstr ""

#: ../../library/string.rst:88
msgid ""
"The built-in string class provides the ability to do complex variable "
"substitutions and value formatting via the :meth:`~str.format` method "
"described in :pep:`3101`.  The :class:`Formatter` class in the :mod:`string` "
"module allows you to create and customize your own string formatting "
"behaviors using the same implementation as the built-in :meth:`~str.format` "
"method."
msgstr ""

#: ../../library/string.rst:97
msgid "The :class:`Formatter` class has the following public methods:"
msgstr ""

#: ../../library/string.rst:101
msgid ""
"The primary API method.  It takes a format string and an arbitrary set of "
"positional and keyword arguments. It is just a wrapper that calls :meth:"
"`vformat`."
msgstr ""

#: ../../library/string.rst:105
msgid ""
"A format string argument is now :ref:`positional-only <positional-"
"only_parameter>`."
msgstr ""

#: ../../library/string.rst:111
msgid ""
"This function does the actual work of formatting.  It is exposed as a "
"separate function for cases where you want to pass in a predefined "
"dictionary of arguments, rather than unpacking and repacking the dictionary "
"as individual arguments using the ``*args`` and ``**kwargs`` syntax.  :meth:"
"`vformat` does the work of breaking up the format string into character data "
"and replacement fields.  It calls the various methods described below."
msgstr ""

#: ../../library/string.rst:119
msgid ""
"In addition, the :class:`Formatter` defines a number of methods that are "
"intended to be replaced by subclasses:"
msgstr ""

#: ../../library/string.rst:124
msgid ""
"Loop over the format_string and return an iterable of tuples "
"(*literal_text*, *field_name*, *format_spec*, *conversion*).  This is used "
"by :meth:`vformat` to break the string into either literal text, or "
"replacement fields."
msgstr ""

#: ../../library/string.rst:129
msgid ""
"The values in the tuple conceptually represent a span of literal text "
"followed by a single replacement field.  If there is no literal text (which "
"can happen if two replacement fields occur consecutively), then "
"*literal_text* will be a zero-length string.  If there is no replacement "
"field, then the values of *field_name*, *format_spec* and *conversion* will "
"be ``None``. The value of *field_name* is unmodified and auto-numbering of "
"non-numbered positional fields is done by :meth:`vformat`."
msgstr ""

#: ../../library/string.rst:139
msgid ""
"Given *field_name*, convert it to an object to be formatted. Auto-numbering "
"of *field_name* returned from :meth:`parse` is done by :meth:`vformat` "
"before calling this method.  Returns a tuple (obj, used_key). The default "
"version takes strings of the form defined in :pep:`3101`, such as "
"\"0[name]\" or \"label.title\". *args* and *kwargs* are as passed in to :"
"meth:`vformat`. The return value *used_key* has the same meaning as the "
"*key* parameter to :meth:`get_value`."
msgstr ""

#: ../../library/string.rst:149
msgid ""
"Retrieve a given field value.  The *key* argument will be either an integer "
"or a string.  If it is an integer, it represents the index of the positional "
"argument in *args*; if it is a string, then it represents a named argument "
"in *kwargs*."
msgstr ""

#: ../../library/string.rst:154
msgid ""
"The *args* parameter is set to the list of positional arguments to :meth:"
"`vformat`, and the *kwargs* parameter is set to the dictionary of keyword "
"arguments."
msgstr ""

#: ../../library/string.rst:158
msgid ""
"For compound field names, these functions are only called for the first "
"component of the field name; subsequent components are handled through "
"normal attribute and indexing operations."
msgstr ""

#: ../../library/string.rst:162
msgid ""
"So for example, the field expression '0.name' would cause :meth:`get_value` "
"to be called with a *key* argument of 0.  The ``name`` attribute will be "
"looked up after :meth:`get_value` returns by calling the built-in :func:"
"`getattr` function."
msgstr ""

#: ../../library/string.rst:167
msgid ""
"If the index or keyword refers to an item that does not exist, then an :exc:"
"`IndexError` or :exc:`KeyError` should be raised."
msgstr ""

#: ../../library/string.rst:172
msgid ""
"Implement checking for unused arguments if desired.  The arguments to this "
"function is the set of all argument keys that were actually referred to in "
"the format string (integers for positional arguments, and strings for named "
"arguments), and a reference to the *args* and *kwargs* that was passed to "
"vformat.  The set of unused args can be calculated from these parameters.  :"
"meth:`check_unused_args` is assumed to raise an exception if the check fails."
msgstr ""

#: ../../library/string.rst:182
msgid ""
":meth:`format_field` simply calls the global :func:`format` built-in.  The "
"method is provided so that subclasses can override it."
msgstr ""

#: ../../library/string.rst:187
msgid ""
"Converts the value (returned by :meth:`get_field`) given a conversion type "
"(as in the tuple returned by the :meth:`parse` method).  The default version "
"understands 's' (str), 'r' (repr) and 'a' (ascii) conversion types."
msgstr ""

#: ../../library/string.rst:196
msgid "Format String Syntax"
msgstr ""

#: ../../library/string.rst:198
msgid ""
"The :meth:`str.format` method and the :class:`Formatter` class share the "
"same syntax for format strings (although in the case of :class:`Formatter`, "
"subclasses can define their own format string syntax).  The syntax is "
"related to that of :ref:`formatted string literals <f-strings>`, but it is "
"less sophisticated and, in particular, does not support arbitrary "
"expressions."
msgstr ""

#: ../../library/string.rst:211
msgid ""
"Format strings contain \"replacement fields\" surrounded by curly braces ``{}"
"``. Anything that is not contained in braces is considered literal text, "
"which is copied unchanged to the output.  If you need to include a brace "
"character in the literal text, it can be escaped by doubling: ``{{`` and ``}}"
"``."
msgstr ""

#: ../../library/string.rst:216
msgid "The grammar for a replacement field is as follows:"
msgstr ""

#: ../../library/string.rst:228
msgid ""
"In less formal terms, the replacement field can start with a *field_name* "
"that specifies the object whose value is to be formatted and inserted into "
"the output instead of the replacement field. The *field_name* is optionally "
"followed by a  *conversion* field, which is preceded by an exclamation point "
"``'!'``, and a *format_spec*, which is preceded by a colon ``':'``.  These "
"specify a non-default format for the replacement value."
msgstr ""

#: ../../library/string.rst:235
msgid "See also the :ref:`formatspec` section."
msgstr ""

#: ../../library/string.rst:237
msgid ""
"The *field_name* itself begins with an *arg_name* that is either a number or "
"a keyword.  If it's a number, it refers to a positional argument, and if "
"it's a keyword, it refers to a named keyword argument. An *arg_name* is "
"treated as a number if a call to :meth:`str.isdecimal` on the string would "
"return true. If the numerical arg_names in a format string are 0, 1, 2, ... "
"in sequence, they can all be omitted (not just some) and the numbers 0, 1, "
"2, ... will be automatically inserted in that order. Because *arg_name* is "
"not quote-delimited, it is not possible to specify arbitrary dictionary keys "
"(e.g., the strings ``'10'`` or ``':-]'``) within a format string. The "
"*arg_name* can be followed by any number of index or attribute expressions. "
"An expression of the form ``'.name'`` selects the named attribute using :"
"func:`getattr`, while an expression of the form ``'[index]'`` does an index "
"lookup using :meth:`~object.__getitem__`."
msgstr ""

#: ../../library/string.rst:251
msgid ""
"The positional argument specifiers can be omitted for :meth:`str.format`, so "
"``'{} {}'.format(a, b)`` is equivalent to ``'{0} {1}'.format(a, b)``."
msgstr ""

#: ../../library/string.rst:255
msgid ""
"The positional argument specifiers can be omitted for :class:`Formatter`."
msgstr ""

#: ../../library/string.rst:258
msgid "Some simple format string examples::"
msgstr ""

#: ../../library/string.rst:260
msgid ""
"\"First, thou shalt count to {0}\"  # References first positional argument\n"
"\"Bring me a {}\"                   # Implicitly references the first "
"positional argument\n"
"\"From {} to {}\"                   # Same as \"From {0} to {1}\"\n"
"\"My quest is {name}\"              # References keyword argument 'name'\n"
"\"Weight in tons {0.weight}\"       # 'weight' attribute of first positional "
"arg\n"
"\"Units destroyed: {players[0]}\"   # First element of keyword argument "
"'players'."
msgstr ""

#: ../../library/string.rst:267
msgid ""
"The *conversion* field causes a type coercion before formatting.  Normally, "
"the job of formatting a value is done by the :meth:`~object.__format__` "
"method of the value itself.  However, in some cases it is desirable to force "
"a type to be formatted as a string, overriding its own definition of "
"formatting.  By converting the value to a string before calling :meth:"
"`~object.__format__`, the normal formatting logic is bypassed."
msgstr ""

#: ../../library/string.rst:274
msgid ""
"Three conversion flags are currently supported: ``'!s'`` which calls :func:"
"`str` on the value, ``'!r'`` which calls :func:`repr` and ``'!a'`` which "
"calls :func:`ascii`."
msgstr ""

#: ../../library/string.rst:278
msgid "Some examples::"
msgstr ""

#: ../../library/string.rst:280
msgid ""
"\"Harold's a clever {0!s}\"        # Calls str() on the argument first\n"
"\"Bring out the holy {name!r}\"    # Calls repr() on the argument first\n"
"\"More {!a}\"                      # Calls ascii() on the argument first"
msgstr ""

#: ../../library/string.rst:284
msgid ""
"The *format_spec* field contains a specification of how the value should be "
"presented, including such details as field width, alignment, padding, "
"decimal precision and so on.  Each value type can define its own "
"\"formatting mini-language\" or interpretation of the *format_spec*."
msgstr ""

#: ../../library/string.rst:289
msgid ""
"Most built-in types support a common formatting mini-language, which is "
"described in the next section."
msgstr ""

#: ../../library/string.rst:292
msgid ""
"A *format_spec* field can also include nested replacement fields within it. "
"These nested replacement fields may contain a field name, conversion flag "
"and format specification, but deeper nesting is not allowed.  The "
"replacement fields within the format_spec are substituted before the "
"*format_spec* string is interpreted. This allows the formatting of a value "
"to be dynamically specified."
msgstr ""

#: ../../library/string.rst:299
msgid "See the :ref:`formatexamples` section for some examples."
msgstr ""

#: ../../library/string.rst:305
msgid "Format Specification Mini-Language"
msgstr ""

#: ../../library/string.rst:307
msgid ""
"\"Format specifications\" are used within replacement fields contained "
"within a format string to define how individual values are presented (see :"
"ref:`formatstrings` and :ref:`f-strings`). They can also be passed directly "
"to the built-in :func:`format` function.  Each formattable type may define "
"how the format specification is to be interpreted."
msgstr ""

#: ../../library/string.rst:314
msgid ""
"Most built-in types implement the following options for format "
"specifications, although some of the formatting options are only supported "
"by the numeric types."
msgstr ""

#: ../../library/string.rst:317
msgid ""
"A general convention is that an empty format specification produces the same "
"result as if you had called :func:`str` on the value. A non-empty format "
"specification typically modifies the result."
msgstr ""

#: ../../library/string.rst:321
msgid "The general form of a *standard format specifier* is:"
msgstr ""

#: ../../library/string.rst:338
msgid ""
"If a valid *align* value is specified, it can be preceded by a *fill* "
"character that can be any character and defaults to a space if omitted. It "
"is not possible to use a literal curly brace (\"``{``\" or \"``}``\") as the "
"*fill* character in a :ref:`formatted string literal <f-strings>` or when "
"using the :meth:`str.format` method.  However, it is possible to insert a "
"curly brace with a nested replacement field.  This limitation doesn't affect "
"the :func:`format` function."
msgstr ""

#: ../../library/string.rst:347
msgid "The meaning of the various alignment options is as follows:"
msgstr ""

#: ../../library/string.rst:356 ../../library/string.rst:388
#: ../../library/string.rst:454
msgid "Option"
msgstr "Opção"

#: ../../library/string.rst:356 ../../library/string.rst:388
#: ../../library/string.rst:454 ../../library/string.rst:488
#: ../../library/string.rst:499 ../../library/string.rst:534
msgid "Meaning"
msgstr "Significado"

#: ../../library/string.rst:358
msgid "``'<'``"
msgstr ""

#: ../../library/string.rst:358
msgid ""
"Forces the field to be left-aligned within the available space (this is the "
"default for most objects)."
msgstr ""

#: ../../library/string.rst:361
msgid "``'>'``"
msgstr ""

#: ../../library/string.rst:361
msgid ""
"Forces the field to be right-aligned within the available space (this is the "
"default for numbers)."
msgstr ""

#: ../../library/string.rst:364
msgid "``'='``"
msgstr ""

#: ../../library/string.rst:364
msgid ""
"Forces the padding to be placed after the sign (if any) but before the "
"digits.  This is used for printing fields in the form '+000000120'. This "
"alignment option is only valid for numeric types, excluding :class:"
"`complex`. It becomes the default for numbers when '0' immediately precedes "
"the field width."
msgstr ""

#: ../../library/string.rst:371
msgid "``'^'``"
msgstr ""

#: ../../library/string.rst:371
msgid "Forces the field to be centered within the available space."
msgstr ""

#: ../../library/string.rst:375
msgid ""
"Note that unless a minimum field width is defined, the field width will "
"always be the same size as the data to fill it, so that the alignment option "
"has no meaning in this case."
msgstr ""

#: ../../library/string.rst:379
msgid ""
"The *sign* option is only valid for number types, and can be one of the "
"following:"
msgstr ""

#: ../../library/string.rst:390
msgid "``'+'``"
msgstr ""

#: ../../library/string.rst:390
msgid ""
"Indicates that a sign should be used for both positive as well as negative "
"numbers."
msgstr ""

#: ../../library/string.rst:393
msgid "``'-'``"
msgstr ""

#: ../../library/string.rst:393
msgid ""
"Indicates that a sign should be used only for negative numbers (this is the "
"default behavior)."
msgstr ""

#: ../../library/string.rst:382 ../../library/string.rst:396
msgid "space"
msgstr ""

#: ../../library/string.rst:396
msgid ""
"Indicates that a leading space should be used on positive numbers, and a "
"minus sign on negative numbers."
msgstr ""

#: ../../library/string.rst:403
msgid ""
"The ``'z'`` option coerces negative zero floating-point values to positive "
"zero after rounding to the format precision.  This option is only valid for "
"floating-point presentation types."
msgstr ""

#: ../../library/string.rst:407
msgid "Added the ``'z'`` option (see also :pep:`682`)."
msgstr ""

#: ../../library/string.rst:412
msgid ""
"The ``'#'`` option causes the \"alternate form\" to be used for the "
"conversion.  The alternate form is defined differently for different types.  "
"This option is only valid for integer, float and complex types. For "
"integers, when binary, octal, or hexadecimal output is used, this option "
"adds the respective prefix ``'0b'``, ``'0o'``, ``'0x'``, or ``'0X'`` to the "
"output value. For float and complex the alternate form causes the result of "
"the conversion to always contain a decimal-point character, even if no "
"digits follow it. Normally, a decimal-point character appears in the result "
"of these conversions only if a digit follows it. In addition, for ``'g'`` "
"and ``'G'`` conversions, trailing zeros are not removed from the result."
msgstr ""

#: ../../library/string.rst:424
msgid ""
"The *width* is a decimal integer defining the minimum total field width, "
"including any prefixes, separators, and other formatting characters. If not "
"specified, then the field width will be determined by the content."
msgstr ""

#: ../../library/string.rst:428
msgid ""
"When no explicit alignment is given, preceding the *width* field by a zero "
"(``'0'``) character enables sign-aware zero-padding for numeric types, "
"excluding :class:`complex`.  This is equivalent to a *fill* character of "
"``'0'`` with an *alignment* type of ``'='``."
msgstr ""

#: ../../library/string.rst:433
msgid ""
"Preceding the *width* field by ``'0'`` no longer affects the default "
"alignment for strings."
msgstr ""

#: ../../library/string.rst:437
msgid ""
"The *precision* is a decimal integer indicating how many digits should be "
"displayed after the decimal point for presentation types ``'f'`` and "
"``'F'``, or before and after the decimal point for presentation types "
"``'g'`` or ``'G'``.  For string presentation types the field indicates the "
"maximum field size - in other words, how many characters will be used from "
"the field content.  The *precision* is not allowed for integer presentation "
"types."
msgstr ""

#: ../../library/string.rst:445
msgid ""
"The *grouping* option after *width* and *precision* fields specifies a digit "
"group separator for the integral and fractional parts of a number "
"respectively. It can be one of the following:"
msgstr ""

#: ../../library/string.rst:456
msgid "``','``"
msgstr ""

#: ../../library/string.rst:456
msgid ""
"Inserts a comma every 3 digits for integer presentation type ``'d'`` and "
"floating-point presentation types, excluding ``'n'``. For other presentation "
"types, this option is not supported."
msgstr ""

#: ../../library/string.rst:462
msgid "``'_'``"
msgstr ""

#: ../../library/string.rst:462
msgid ""
"Inserts an underscore every 3 digits for integer presentation type ``'d'`` "
"and floating-point presentation types, excluding ``'n'``. For integer "
"presentation types ``'b'``, ``'o'``, ``'x'``, and ``'X'``, underscores are "
"inserted every 4 digits. For other presentation types, this option is not "
"supported."
msgstr ""

#: ../../library/string.rst:472
msgid ""
"For a locale aware separator, use the ``'n'`` presentation type instead."
msgstr ""

#: ../../library/string.rst:474
msgid "Added the ``','`` option (see also :pep:`378`)."
msgstr ""

#: ../../library/string.rst:477
msgid "Added the ``'_'`` option (see also :pep:`515`)."
msgstr ""

#: ../../library/string.rst:480
msgid "Support the *grouping* option for the fractional part."
msgstr ""

#: ../../library/string.rst:483
msgid "Finally, the *type* determines how the data should be presented."
msgstr ""

#: ../../library/string.rst:485
msgid "The available string presentation types are:"
msgstr ""

#: ../../library/string.rst:488 ../../library/string.rst:499
#: ../../library/string.rst:534
msgid "Type"
msgstr "Tipo"

#: ../../library/string.rst:490
msgid "``'s'``"
msgstr ""

#: ../../library/string.rst:490
msgid "String format. This is the default type for strings and may be omitted."
msgstr ""

#: ../../library/string.rst:493 ../../library/string.rst:522
#: ../../library/string.rst:608
msgid "None"
msgstr ""

#: ../../library/string.rst:493
msgid "The same as ``'s'``."
msgstr ""

#: ../../library/string.rst:496
msgid "The available integer presentation types are:"
msgstr ""

#: ../../library/string.rst:501
msgid "``'b'``"
msgstr ""

#: ../../library/string.rst:501
msgid "Binary format. Outputs the number in base 2."
msgstr ""

#: ../../library/string.rst:503
msgid "``'c'``"
msgstr ""

#: ../../library/string.rst:503
msgid ""
"Character. Converts the integer to the corresponding unicode character "
"before printing."
msgstr ""

#: ../../library/string.rst:506
msgid "``'d'``"
msgstr ""

#: ../../library/string.rst:506
msgid "Decimal Integer. Outputs the number in base 10."
msgstr ""

#: ../../library/string.rst:508
msgid "``'o'``"
msgstr ""

#: ../../library/string.rst:508
msgid "Octal format. Outputs the number in base 8."
msgstr ""

#: ../../library/string.rst:510
msgid "``'x'``"
msgstr ""

#: ../../library/string.rst:510
msgid ""
"Hex format. Outputs the number in base 16, using lower-case letters for the "
"digits above 9."
msgstr ""

#: ../../library/string.rst:513
msgid "``'X'``"
msgstr ""

#: ../../library/string.rst:513
msgid ""
"Hex format. Outputs the number in base 16, using upper-case letters for the "
"digits above 9. In case ``'#'`` is specified, the prefix ``'0x'`` will be "
"upper-cased to ``'0X'`` as well."
msgstr ""

#: ../../library/string.rst:518 ../../library/string.rst:600
msgid "``'n'``"
msgstr ""

#: ../../library/string.rst:518
msgid ""
"Number. This is the same as ``'d'``, except that it uses the current locale "
"setting to insert the appropriate digit group separators."
msgstr ""

#: ../../library/string.rst:522
msgid "The same as ``'d'``."
msgstr ""

#: ../../library/string.rst:525
msgid ""
"In addition to the above presentation types, integers can be formatted with "
"the floating-point presentation types listed below (except ``'n'`` and "
"``None``). When doing so, :func:`float` is used to convert the integer to a "
"floating-point number before formatting."
msgstr ""

#: ../../library/string.rst:530
msgid ""
"The available presentation types for :class:`float` and :class:`~decimal."
"Decimal` values are:"
msgstr ""

#: ../../library/string.rst:536
msgid "``'e'``"
msgstr ""

#: ../../library/string.rst:536
msgid ""
"Scientific notation. For a given precision ``p``, formats the number in "
"scientific notation with the letter 'e' separating the coefficient from the "
"exponent. The coefficient has one digit before and ``p`` digits after the "
"decimal point, for a total of ``p + 1`` significant digits. With no "
"precision given, uses a precision of ``6`` digits after the decimal point "
"for :class:`float`, and shows all coefficient digits for :class:`~decimal."
"Decimal`.  If ``p=0``, the decimal point is omitted unless the ``#`` option "
"is used."
msgstr ""

#: ../../library/string.rst:547
msgid "``'E'``"
msgstr ""

#: ../../library/string.rst:547
msgid ""
"Scientific notation. Same as ``'e'`` except it uses an upper case 'E' as the "
"separator character."
msgstr ""

#: ../../library/string.rst:550
msgid "``'f'``"
msgstr ""

#: ../../library/string.rst:550
msgid ""
"Fixed-point notation. For a given precision ``p``, formats the number as a "
"decimal number with exactly ``p`` digits following the decimal point. With "
"no precision given, uses a precision of ``6`` digits after the decimal point "
"for :class:`float`, and uses a precision large enough to show all "
"coefficient digits for :class:`~decimal.Decimal`.  If ``p=0``, the decimal "
"point is omitted unless the ``#`` option is used."
msgstr ""

#: ../../library/string.rst:559
msgid "``'F'``"
msgstr ""

#: ../../library/string.rst:559
msgid ""
"Fixed-point notation. Same as ``'f'``, but converts ``nan`` to  ``NAN`` and "
"``inf`` to ``INF``."
msgstr ""

#: ../../library/string.rst:562
msgid "``'g'``"
msgstr ""

#: ../../library/string.rst:562
msgid ""
"General format.  For a given precision ``p >= 1``, this rounds the number to "
"``p`` significant digits and then formats the result in either fixed-point "
"format or in scientific notation, depending on its magnitude. A precision of "
"``0`` is treated as equivalent to a precision of ``1``."
msgstr ""

#: ../../library/string.rst:569
msgid ""
"The precise rules are as follows: suppose that the result formatted with "
"presentation type ``'e'`` and precision ``p-1`` would have exponent "
"``exp``.  Then, if ``m <= exp < p``, where ``m`` is -4 for floats and -6 "
"for :class:`Decimals <decimal.Decimal>`, the number is formatted with "
"presentation type ``'f'`` and precision ``p-1-exp``.  Otherwise, the number "
"is formatted with presentation type ``'e'`` and precision ``p-1``. In both "
"cases insignificant trailing zeros are removed from the significand, and the "
"decimal point is also removed if there are no remaining digits following it, "
"unless the ``'#'`` option is used."
msgstr ""

#: ../../library/string.rst:582
msgid ""
"With no precision given, uses a precision of ``6`` significant digits for :"
"class:`float`. For :class:`~decimal.Decimal`, the coefficient of the result "
"is formed from the coefficient digits of the value; scientific notation is "
"used for values smaller than ``1e-6`` in absolute value and values where the "
"place value of the least significant digit is larger than 1, and fixed-point "
"notation is used otherwise."
msgstr ""

#: ../../library/string.rst:591
msgid ""
"Positive and negative infinity, positive and negative zero, and nans, are "
"formatted as ``inf``, ``-inf``, ``0``, ``-0`` and ``nan`` respectively, "
"regardless of the precision."
msgstr ""

#: ../../library/string.rst:596
msgid "``'G'``"
msgstr ""

#: ../../library/string.rst:596
msgid ""
"General format. Same as ``'g'`` except switches to ``'E'`` if the number "
"gets too large. The representations of infinity and NaN are uppercased, too."
msgstr ""

#: ../../library/string.rst:600
msgid ""
"Number. This is the same as ``'g'``, except that it uses the current locale "
"setting to insert the appropriate digit group separators for the integral "
"part of a number."
msgstr ""

#: ../../library/string.rst:605
msgid "``'%'``"
msgstr ""

#: ../../library/string.rst:605
msgid ""
"Percentage. Multiplies the number by 100 and displays in fixed (``'f'``) "
"format, followed by a percent sign."
msgstr ""

#: ../../library/string.rst:608
msgid ""
"For :class:`float` this is like the ``'g'`` type, except that when fixed-"
"point notation is used to format the result, it always includes at least one "
"digit past the decimal point, and switches to the scientific notation when "
"``exp >= p - 1``.  When the precision is not specified, the latter will be "
"as large as needed to represent the given value faithfully."
msgstr ""

#: ../../library/string.rst:616
msgid ""
"For :class:`~decimal.Decimal`, this is the same as either ``'g'`` or ``'G'`` "
"depending on the value of ``context.capitals`` for the current decimal "
"context."
msgstr ""

#: ../../library/string.rst:620
msgid ""
"The overall effect is to match the output of :func:`str` as altered by the "
"other format modifiers."
msgstr ""

#: ../../library/string.rst:624
msgid ""
"The result should be correctly rounded to a given precision ``p`` of digits "
"after the decimal point.  The rounding mode for :class:`float` matches that "
"of the :func:`round` builtin.  For :class:`~decimal.Decimal`, the rounding "
"mode of the current :ref:`context <decimal-context>` will be used."
msgstr ""

#: ../../library/string.rst:629
msgid ""
"The available presentation types for :class:`complex` are the same as those "
"for :class:`float` (``'%'`` is not allowed).  Both the real and imaginary "
"components of a complex number are formatted as floating-point numbers, "
"according to the specified presentation type.  They are separated by the "
"mandatory sign of the imaginary part, the latter being terminated by a ``j`` "
"suffix.  If the presentation type is missing, the result will match the "
"output of :func:`str` (complex numbers with a non-zero real part are also "
"surrounded by parentheses), possibly altered by other format modifiers."
msgstr ""

#: ../../library/string.rst:642
msgid "Format examples"
msgstr ""

#: ../../library/string.rst:644
msgid ""
"This section contains examples of the :meth:`str.format` syntax and "
"comparison with the old ``%``-formatting."
msgstr ""

#: ../../library/string.rst:647
msgid ""
"In most of the cases the syntax is similar to the old ``%``-formatting, with "
"the addition of the ``{}`` and with ``:`` used instead of ``%``. For "
"example, ``'%03.2f'`` can be translated to ``'{:03.2f}'``."
msgstr ""

#: ../../library/string.rst:651
msgid ""
"The new format syntax also supports new and different options, shown in the "
"following examples."
msgstr ""

#: ../../library/string.rst:654
msgid "Accessing arguments by position::"
msgstr ""

#: ../../library/string.rst:656
msgid ""
">>> '{0}, {1}, {2}'.format('a', 'b', 'c')\n"
"'a, b, c'\n"
">>> '{}, {}, {}'.format('a', 'b', 'c')  # 3.1+ only\n"
"'a, b, c'\n"
">>> '{2}, {1}, {0}'.format('a', 'b', 'c')\n"
"'c, b, a'\n"
">>> '{2}, {1}, {0}'.format(*'abc')      # unpacking argument sequence\n"
"'c, b, a'\n"
">>> '{0}{1}{0}'.format('abra', 'cad')   # arguments' indices can be "
"repeated\n"
"'abracadabra'"
msgstr ""

#: ../../library/string.rst:667
msgid "Accessing arguments by name::"
msgstr ""

#: ../../library/string.rst:669
msgid ""
">>> 'Coordinates: {latitude}, {longitude}'.format(latitude='37.24N', "
"longitude='-115.81W')\n"
"'Coordinates: 37.24N, -115.81W'\n"
">>> coord = {'latitude': '37.24N', 'longitude': '-115.81W'}\n"
">>> 'Coordinates: {latitude}, {longitude}'.format(**coord)\n"
"'Coordinates: 37.24N, -115.81W'"
msgstr ""

#: ../../library/string.rst:675
msgid "Accessing arguments' attributes::"
msgstr ""

#: ../../library/string.rst:677
msgid ""
">>> c = 3-5j\n"
">>> ('The complex number {0} is formed from the real part {0.real} '\n"
"...  'and the imaginary part {0.imag}.').format(c)\n"
"'The complex number (3-5j) is formed from the real part 3.0 and the "
"imaginary part -5.0.'\n"
">>> class Point:\n"
"...     def __init__(self, x, y):\n"
"...         self.x, self.y = x, y\n"
"...     def __str__(self):\n"
"...         return 'Point({self.x}, {self.y})'.format(self=self)\n"
"...\n"
">>> str(Point(4, 2))\n"
"'Point(4, 2)'"
msgstr ""

#: ../../library/string.rst:690
msgid "Accessing arguments' items::"
msgstr ""

#: ../../library/string.rst:692
msgid ""
">>> coord = (3, 5)\n"
">>> 'X: {0[0]};  Y: {0[1]}'.format(coord)\n"
"'X: 3;  Y: 5'"
msgstr ""

#: ../../library/string.rst:696
msgid "Replacing ``%s`` and ``%r``::"
msgstr ""

#: ../../library/string.rst:698
msgid ""
">>> \"repr() shows quotes: {!r}; str() doesn't: {!s}\".format('test1', "
"'test2')\n"
"\"repr() shows quotes: 'test1'; str() doesn't: test2\""
msgstr ""

#: ../../library/string.rst:701
msgid "Aligning the text and specifying a width::"
msgstr ""

#: ../../library/string.rst:703
msgid ""
">>> '{:<30}'.format('left aligned')\n"
"'left aligned                  '\n"
">>> '{:>30}'.format('right aligned')\n"
"'                 right aligned'\n"
">>> '{:^30}'.format('centered')\n"
"'           centered           '\n"
">>> '{:*^30}'.format('centered')  # use '*' as a fill char\n"
"'***********centered***********'"
msgstr ""

#: ../../library/string.rst:712
msgid "Replacing ``%+f``, ``%-f``, and ``% f`` and specifying a sign::"
msgstr ""

#: ../../library/string.rst:714
msgid ""
">>> '{:+f}; {:+f}'.format(3.14, -3.14)  # show it always\n"
"'+3.140000; -3.140000'\n"
">>> '{: f}; {: f}'.format(3.14, -3.14)  # show a space for positive numbers\n"
"' 3.140000; -3.140000'\n"
">>> '{:-f}; {:-f}'.format(3.14, -3.14)  # show only the minus -- same as '{:"
"f}; {:f}'\n"
"'3.140000; -3.140000'"
msgstr ""

#: ../../library/string.rst:721
msgid ""
"Replacing ``%x`` and ``%o`` and converting the value to different bases::"
msgstr ""

#: ../../library/string.rst:723
msgid ""
">>> # format also supports binary numbers\n"
">>> \"int: {0:d};  hex: {0:x};  oct: {0:o};  bin: {0:b}\".format(42)\n"
"'int: 42;  hex: 2a;  oct: 52;  bin: 101010'\n"
">>> # with 0x, 0o, or 0b as prefix:\n"
">>> \"int: {0:d};  hex: {0:#x};  oct: {0:#o};  bin: {0:#b}\".format(42)\n"
"'int: 42;  hex: 0x2a;  oct: 0o52;  bin: 0b101010'"
msgstr ""

#: ../../library/string.rst:730
msgid "Using the comma or the underscore as a digit group separator::"
msgstr ""

#: ../../library/string.rst:732
msgid ""
">>> '{:,}'.format(1234567890)\n"
"'1,234,567,890'\n"
">>> '{:_}'.format(1234567890)\n"
"'1_234_567_890'\n"
">>> '{:_b}'.format(1234567890)\n"
"'100_1001_1001_0110_0000_0010_1101_0010'\n"
">>> '{:_x}'.format(1234567890)\n"
"'4996_02d2'\n"
">>> '{:_}'.format(123456789.123456789)\n"
"'123_456_789.12345679'\n"
">>> '{:.,}'.format(123456789.123456789)\n"
"'123456789.123,456,79'\n"
">>> '{:,._}'.format(123456789.123456789)\n"
"'123,456,789.123_456_79'"
msgstr ""

#: ../../library/string.rst:747
msgid "Expressing a percentage::"
msgstr ""

#: ../../library/string.rst:749
msgid ""
">>> points = 19\n"
">>> total = 22\n"
">>> 'Correct answers: {:.2%}'.format(points/total)\n"
"'Correct answers: 86.36%'"
msgstr ""

#: ../../library/string.rst:754
msgid "Using type-specific formatting::"
msgstr ""

#: ../../library/string.rst:756
msgid ""
">>> import datetime\n"
">>> d = datetime.datetime(2010, 7, 4, 12, 15, 58)\n"
">>> '{:%Y-%m-%d %H:%M:%S}'.format(d)\n"
"'2010-07-04 12:15:58'"
msgstr ""

#: ../../library/string.rst:761
msgid "Nesting arguments and more complex examples::"
msgstr ""

#: ../../library/string.rst:763
msgid ""
">>> for align, text in zip('<^>', ['left', 'center', 'right']):\n"
"...     '{0:{fill}{align}16}'.format(text, fill=align, align=align)\n"
"...\n"
"'left<<<<<<<<<<<<'\n"
"'^^^^^center^^^^^'\n"
"'>>>>>>>>>>>right'\n"
">>>\n"
">>> octets = [192, 168, 0, 1]\n"
">>> '{:02X}{:02X}{:02X}{:02X}'.format(*octets)\n"
"'C0A80001'\n"
">>> int(_, 16)\n"
"3232235521\n"
">>>\n"
">>> width = 5\n"
">>> for num in range(5,12):\n"
"...     for base in 'dXob':\n"
"...         print('{0:{width}{base}}'.format(num, base=base, width=width), "
"end=' ')\n"
"...     print()\n"
"...\n"
"    5     5     5   101\n"
"    6     6     6   110\n"
"    7     7     7   111\n"
"    8     8    10  1000\n"
"    9     9    11  1001\n"
"   10     A    12  1010\n"
"   11     B    13  1011"
msgstr ""

#: ../../library/string.rst:795
msgid "Template strings"
msgstr ""

#: ../../library/string.rst:797
msgid ""
"Template strings provide simpler string substitutions as described in :pep:"
"`292`.  A primary use case for template strings is for internationalization "
"(i18n) since in that context, the simpler syntax and functionality makes it "
"easier to translate than other built-in string formatting facilities in "
"Python.  As an example of a library built on template strings for i18n, see "
"the `flufl.i18n <https://flufli18n.readthedocs.io/en/latest/>`_ package."
msgstr ""

#: ../../library/string.rst:807
msgid ""
"Template strings support ``$``-based substitutions, using the following "
"rules:"
msgstr ""

#: ../../library/string.rst:809
msgid "``$$`` is an escape; it is replaced with a single ``$``."
msgstr ""

#: ../../library/string.rst:811
msgid ""
"``$identifier`` names a substitution placeholder matching a mapping key of "
"``\"identifier\"``.  By default, ``\"identifier\"`` is restricted to any "
"case-insensitive ASCII alphanumeric string (including underscores) that "
"starts with an underscore or ASCII letter.  The first non-identifier "
"character after the ``$`` character terminates this placeholder "
"specification."
msgstr ""

#: ../../library/string.rst:818
msgid ""
"``${identifier}`` is equivalent to ``$identifier``.  It is required when "
"valid identifier characters follow the placeholder but are not part of the "
"placeholder, such as ``\"${noun}ification\"``."
msgstr ""

#: ../../library/string.rst:822
msgid ""
"Any other appearance of ``$`` in the string will result in a :exc:"
"`ValueError` being raised."
msgstr ""

#: ../../library/string.rst:825
msgid ""
"The :mod:`string` module provides a :class:`Template` class that implements "
"these rules.  The methods of :class:`Template` are:"
msgstr ""

#: ../../library/string.rst:831
msgid "The constructor takes a single argument which is the template string."
msgstr ""

#: ../../library/string.rst:836
msgid ""
"Performs the template substitution, returning a new string.  *mapping* is "
"any dictionary-like object with keys that match the placeholders in the "
"template.  Alternatively, you can provide keyword arguments, where the "
"keywords are the placeholders.  When both *mapping* and *kwds* are given and "
"there are duplicates, the placeholders from *kwds* take precedence."
msgstr ""

#: ../../library/string.rst:845
msgid ""
"Like :meth:`substitute`, except that if placeholders are missing from "
"*mapping* and *kwds*, instead of raising a :exc:`KeyError` exception, the "
"original placeholder will appear in the resulting string intact.  Also, "
"unlike with :meth:`substitute`, any other appearances of the ``$`` will "
"simply return ``$`` instead of raising :exc:`ValueError`."
msgstr ""

#: ../../library/string.rst:851
msgid ""
"While other exceptions may still occur, this method is called \"safe\" "
"because it always tries to return a usable string instead of raising an "
"exception.  In another sense, :meth:`safe_substitute` may be anything other "
"than safe, since it will silently ignore malformed templates containing "
"dangling delimiters, unmatched braces, or placeholders that are not valid "
"Python identifiers."
msgstr ""

#: ../../library/string.rst:861
msgid ""
"Returns ``False`` if the template has invalid placeholders that will cause :"
"meth:`substitute` to raise :exc:`ValueError`."
msgstr ""

#: ../../library/string.rst:869
msgid ""
"Returns a list of the valid identifiers in the template, in the order they "
"first appear, ignoring any invalid identifiers."
msgstr ""

#: ../../library/string.rst:874
msgid ":class:`Template` instances also provide one public data attribute:"
msgstr ""

#: ../../library/string.rst:878
msgid ""
"This is the object passed to the constructor's *template* argument.  In "
"general, you shouldn't change it, but read-only access is not enforced."
msgstr ""

#: ../../library/string.rst:881
msgid "Here is an example of how to use a Template::"
msgstr ""

#: ../../library/string.rst:883
msgid ""
">>> from string import Template\n"
">>> s = Template('$who likes $what')\n"
">>> s.substitute(who='tim', what='kung pao')\n"
"'tim likes kung pao'\n"
">>> d = dict(who='tim')\n"
">>> Template('Give $who $100').substitute(d)\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: Invalid placeholder in string: line 1, col 11\n"
">>> Template('$who likes $what').substitute(d)\n"
"Traceback (most recent call last):\n"
"...\n"
"KeyError: 'what'\n"
">>> Template('$who likes $what').safe_substitute(d)\n"
"'tim likes $what'"
msgstr ""

#: ../../library/string.rst:899
msgid ""
"Advanced usage: you can derive subclasses of :class:`Template` to customize "
"the placeholder syntax, delimiter character, or the entire regular "
"expression used to parse template strings.  To do this, you can override "
"these class attributes:"
msgstr ""

#: ../../library/string.rst:904
msgid ""
"*delimiter* -- This is the literal string describing a placeholder "
"introducing delimiter.  The default value is ``$``.  Note that this should "
"*not* be a regular expression, as the implementation will call :meth:`re."
"escape` on this string as needed.  Note further that you cannot change the "
"delimiter after class creation (i.e. a different delimiter must be set in "
"the subclass's class namespace)."
msgstr ""

#: ../../library/string.rst:911
msgid ""
"*idpattern* -- This is the regular expression describing the pattern for non-"
"braced placeholders.  The default value is the regular expression ``(?a:[_a-"
"z][_a-z0-9]*)``.  If this is given and *braceidpattern* is ``None`` this "
"pattern will also apply to braced placeholders."
msgstr ""

#: ../../library/string.rst:918
msgid ""
"Since default *flags* is ``re.IGNORECASE``, pattern ``[a-z]`` can match with "
"some non-ASCII characters. That's why we use the local ``a`` flag here."
msgstr ""

#: ../../library/string.rst:922
msgid ""
"*braceidpattern* can be used to define separate patterns used inside and "
"outside the braces."
msgstr ""

#: ../../library/string.rst:926
msgid ""
"*braceidpattern* -- This is like *idpattern* but describes the pattern for "
"braced placeholders.  Defaults to ``None`` which means to fall back to "
"*idpattern* (i.e. the same pattern is used both inside and outside braces). "
"If given, this allows you to define different patterns for braced and "
"unbraced placeholders."
msgstr ""

#: ../../library/string.rst:934
msgid ""
"*flags* -- The regular expression flags that will be applied when compiling "
"the regular expression used for recognizing substitutions.  The default "
"value is ``re.IGNORECASE``.  Note that ``re.VERBOSE`` will always be added "
"to the flags, so custom *idpattern*\\ s must follow conventions for verbose "
"regular expressions."
msgstr ""

#: ../../library/string.rst:942
msgid ""
"Alternatively, you can provide the entire regular expression pattern by "
"overriding the class attribute *pattern*.  If you do this, the value must be "
"a regular expression object with four named capturing groups.  The capturing "
"groups correspond to the rules given above, along with the invalid "
"placeholder rule:"
msgstr ""

#: ../../library/string.rst:948
msgid ""
"*escaped* -- This group matches the escape sequence, e.g. ``$$``, in the "
"default pattern."
msgstr ""

#: ../../library/string.rst:951
msgid ""
"*named* -- This group matches the unbraced placeholder name; it should not "
"include the delimiter in capturing group."
msgstr ""

#: ../../library/string.rst:954
msgid ""
"*braced* -- This group matches the brace enclosed placeholder name; it "
"should not include either the delimiter or braces in the capturing group."
msgstr ""

#: ../../library/string.rst:957
msgid ""
"*invalid* -- This group matches any other delimiter pattern (usually a "
"single delimiter), and it should appear last in the regular expression."
msgstr ""

#: ../../library/string.rst:960
msgid ""
"The methods on this class will raise :exc:`ValueError` if the pattern "
"matches the template without one of these named groups matching."
msgstr ""

#: ../../library/string.rst:965
msgid "Helper functions"
msgstr ""

#: ../../library/string.rst:969
msgid ""
"Split the argument into words using :meth:`str.split`, capitalize each word "
"using :meth:`str.capitalize`, and join the capitalized words using :meth:"
"`str.join`.  If the optional second argument *sep* is absent or ``None``, "
"runs of whitespace characters are replaced by a single space and leading and "
"trailing whitespace are removed, otherwise *sep* is used to split and join "
"the words."
msgstr ""

#: ../../library/string.rst:204
msgid "{} (curly brackets)"
msgstr ""

#: ../../library/string.rst:204 ../../library/string.rst:349
#: ../../library/string.rst:382 ../../library/string.rst:401
#: ../../library/string.rst:410 ../../library/string.rst:449
msgid "in string formatting"
msgstr ""

#: ../../library/string.rst:204
msgid ". (dot)"
msgstr ""

#: ../../library/string.rst:204
msgid "[] (square brackets)"
msgstr ""

#: ../../library/string.rst:204
msgid "! (exclamation)"
msgstr ""

#: ../../library/string.rst:204
msgid ": (colon)"
msgstr ""

#: ../../library/string.rst:349
msgid "< (less)"
msgstr ""

#: ../../library/string.rst:349
msgid "> (greater)"
msgstr ""

#: ../../library/string.rst:349
msgid "= (equals)"
msgstr ""

#: ../../library/string.rst:349
msgid "^ (caret)"
msgstr ""

#: ../../library/string.rst:382
msgid "+ (plus)"
msgstr ""

#: ../../library/string.rst:382
msgid "- (minus)"
msgstr ""

#: ../../library/string.rst:401
msgid "z"
msgstr ""

#: ../../library/string.rst:410
msgid "# (hash)"
msgstr ""

#: ../../library/string.rst:449
msgid ", (comma)"
msgstr ""

#: ../../library/string.rst:449
msgid "_ (underscore)"
msgstr ""

#: ../../library/string.rst:805
msgid "$ (dollar)"
msgstr ""

#: ../../library/string.rst:805
msgid "in template strings"
msgstr ""
