# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Marco Rougeth <marco@rougeth.com>, 2024
# i17obot <i17obot@rougeth.com>, 2024
# Raphael Mendonça, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-31 10:59+0000\n"
"PO-Revision-Date: 2021-06-28 01:14+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/tempfile.rst:2
msgid ":mod:`!tempfile` --- Generate temporary files and directories"
msgstr ""

#: ../../library/tempfile.rst:9
msgid "**Source code:** :source:`Lib/tempfile.py`"
msgstr "**Código-fonte:** :source:`Lib/tempfile.py`"

#: ../../library/tempfile.rst:17
msgid ""
"This module creates temporary files and directories.  It works on all "
"supported platforms. :class:`TemporaryFile`, :class:`NamedTemporaryFile`, :"
"class:`TemporaryDirectory`, and :class:`SpooledTemporaryFile` are high-level "
"interfaces which provide automatic cleanup and can be used as :term:`context "
"managers <context manager>`. :func:`mkstemp` and :func:`mkdtemp` are lower-"
"level functions which require manual cleanup."
msgstr ""

#: ../../library/tempfile.rst:24
msgid ""
"All the user-callable functions and constructors take additional arguments "
"which allow direct control over the location and name of temporary files and "
"directories. Files names used by this module include a string of random "
"characters which allows those files to be securely created in shared "
"temporary directories. To maintain backward compatibility, the argument "
"order is somewhat odd; it is recommended to use keyword arguments for "
"clarity."
msgstr ""

#: ../../library/tempfile.rst:32
msgid "The module defines the following user-callable items:"
msgstr ""

#: ../../library/tempfile.rst:36
msgid ""
"Return a :term:`file-like object` that can be used as a temporary storage "
"area. The file is created securely, using the same rules as :func:`mkstemp`. "
"It will be destroyed as soon as it is closed (including an implicit close "
"when the object is garbage collected).  Under Unix, the directory entry for "
"the file is either not created at all or is removed immediately after the "
"file is created.  Other platforms do not support this; your code should not "
"rely on a temporary file created using this function having or not having a "
"visible name in the file system."
msgstr ""

#: ../../library/tempfile.rst:44
msgid ""
"The resulting object can be used as a :term:`context manager` (see :ref:"
"`tempfile-examples`).  On completion of the context or destruction of the "
"file object the temporary file will be removed from the filesystem."
msgstr ""

#: ../../library/tempfile.rst:49
msgid ""
"The *mode* parameter defaults to ``'w+b'`` so that the file created can be "
"read and written without being closed.  Binary mode is used so that it "
"behaves consistently on all platforms without regard for the data that is "
"stored.  *buffering*, *encoding*, *errors* and *newline* are interpreted as "
"for :func:`open`."
msgstr ""

#: ../../library/tempfile.rst:55
msgid ""
"The *dir*, *prefix* and *suffix* parameters have the same meaning and "
"defaults as with :func:`mkstemp`."
msgstr ""

#: ../../library/tempfile.rst:58
msgid ""
"The returned object is a true file object on POSIX platforms.  On other "
"platforms, it is a file-like object whose :attr:`!file` attribute is the "
"underlying true file object."
msgstr ""

#: ../../library/tempfile.rst:62
msgid ""
"The :py:const:`os.O_TMPFILE` flag is used if it is available and works "
"(Linux-specific, requires Linux kernel 3.11 or later)."
msgstr ""

#: ../../library/tempfile.rst:65
msgid ""
"On platforms that are neither Posix nor Cygwin, TemporaryFile is an alias "
"for NamedTemporaryFile."
msgstr ""

#: ../../library/tempfile.rst:68 ../../library/tempfile.rst:137
#: ../../library/tempfile.rst:264
msgid ""
"Raises an :ref:`auditing event <auditing>` ``tempfile.mkstemp`` with "
"argument ``fullpath``."
msgstr ""
"Levanta um :ref:`evento de auditoria <auditing>` ``tempfile.mkstemp`` com o "
"argumento ``fullpath``."

#: ../../library/tempfile.rst:72
msgid "The :py:const:`os.O_TMPFILE` flag is now used if available."
msgstr ""

#: ../../library/tempfile.rst:74 ../../library/tempfile.rst:139
#: ../../library/tempfile.rst:169
msgid "Added *errors* parameter."
msgstr "Parâmetro *errors* foi adicionado."

#: ../../library/tempfile.rst:80
msgid ""
"This function operates exactly as :func:`TemporaryFile` does, except the "
"following differences:"
msgstr ""

#: ../../library/tempfile.rst:83
msgid ""
"This function returns a file that is guaranteed to have a visible name in "
"the file system."
msgstr ""

#: ../../library/tempfile.rst:85
msgid ""
"To manage the named file, it extends the parameters of :func:`TemporaryFile` "
"with *delete* and *delete_on_close* parameters that determine whether and "
"how the named file should be automatically deleted."
msgstr ""

#: ../../library/tempfile.rst:89
msgid ""
"The returned object is always a :term:`file-like object` whose :attr:`!file` "
"attribute is the underlying true file object. This file-like object can be "
"used in a :keyword:`with` statement, just like a normal file.  The name of "
"the temporary file can be retrieved from the :attr:`!name` attribute of the "
"returned file-like object. On Unix, unlike with the :func:`TemporaryFile`, "
"the directory entry does not get unlinked immediately after the file "
"creation."
msgstr ""

#: ../../library/tempfile.rst:97
msgid ""
"If *delete* is true (the default) and *delete_on_close* is true (the "
"default), the file is deleted as soon as it is closed. If *delete* is true "
"and *delete_on_close* is false, the file is deleted on context manager exit "
"only, or else when the :term:`file-like object` is finalized. Deletion is "
"not always guaranteed in this case (see :meth:`object.__del__`). If *delete* "
"is false, the value of *delete_on_close* is ignored."
msgstr ""

#: ../../library/tempfile.rst:104
msgid ""
"Therefore to use the name of the temporary file to reopen the file after "
"closing it, either make sure not to delete the file upon closure (set the "
"*delete* parameter to be false) or, in case the temporary file is created in "
"a :keyword:`with` statement, set the *delete_on_close* parameter to be "
"false. The latter approach is recommended as it provides assistance in "
"automatic cleaning of the temporary file upon the context manager exit."
msgstr ""

#: ../../library/tempfile.rst:111
msgid ""
"Opening the temporary file again by its name while it is still open works as "
"follows:"
msgstr ""

#: ../../library/tempfile.rst:114
msgid "On POSIX the file can always be opened again."
msgstr ""

#: ../../library/tempfile.rst:115
msgid ""
"On Windows, make sure that at least one of the following conditions are "
"fulfilled:"
msgstr ""

#: ../../library/tempfile.rst:118
msgid "*delete* is false"
msgstr ""

#: ../../library/tempfile.rst:119
msgid ""
"additional open shares delete access (e.g. by calling :func:`os.open` with "
"the flag ``O_TEMPORARY``)"
msgstr ""

#: ../../library/tempfile.rst:121
msgid ""
"*delete* is true but *delete_on_close* is false. Note, that in this case the "
"additional opens that do not share delete access (e.g. created via builtin :"
"func:`open`) must be closed before exiting the context manager, else the :"
"func:`os.unlink` call on context manager exit will fail with a :exc:"
"`PermissionError`."
msgstr ""

#: ../../library/tempfile.rst:127
msgid ""
"On Windows, if *delete_on_close* is false, and the file is created in a "
"directory for which the user lacks delete access, then the :func:`os.unlink` "
"call on exit of the context manager will fail with a :exc:`PermissionError`. "
"This cannot happen when *delete_on_close* is true because delete access is "
"requested by the open, which fails immediately if the requested access is "
"not granted."
msgstr ""

#: ../../library/tempfile.rst:134
msgid ""
"On POSIX (only), a process that is terminated abruptly with SIGKILL cannot "
"automatically delete any NamedTemporaryFiles it created."
msgstr ""

#: ../../library/tempfile.rst:142
msgid "Added *delete_on_close* parameter."
msgstr ""

#: ../../library/tempfile.rst:148
msgid ""
"This class operates exactly as :func:`TemporaryFile` does, except that data "
"is spooled in memory until the file size exceeds *max_size*, or until the "
"file's :func:`~io.IOBase.fileno` method is called, at which point the "
"contents are written to disk and operation proceeds as with :func:"
"`TemporaryFile`."
msgstr ""

#: ../../library/tempfile.rst:156
msgid ""
"The resulting file has one additional method, :meth:`!rollover`, which "
"causes the file to roll over to an on-disk file regardless of its size."
msgstr ""

#: ../../library/tempfile.rst:159
msgid ""
"The returned object is a file-like object whose :attr:`!_file` attribute is "
"either an :class:`io.BytesIO` or :class:`io.TextIOWrapper` object (depending "
"on whether binary or text *mode* was specified) or a true file object, "
"depending on whether :meth:`rollover` has been called.  This file-like "
"object can be used in a :keyword:`with` statement, just like a normal file."
msgstr ""

#: ../../library/tempfile.rst:166
msgid "the truncate method now accepts a *size* argument."
msgstr ""

#: ../../library/tempfile.rst:172
msgid ""
"Fully implements the :class:`io.BufferedIOBase` and :class:`io.TextIOBase` "
"abstract base classes (depending on whether binary or text *mode* was "
"specified)."
msgstr ""

#: ../../library/tempfile.rst:180
msgid ""
"This class securely creates a temporary directory using the same rules as :"
"func:`mkdtemp`. The resulting object can be used as a :term:`context "
"manager` (see :ref:`tempfile-examples`).  On completion of the context or "
"destruction of the temporary directory object, the newly created temporary "
"directory and all its contents are removed from the filesystem."
msgstr ""

#: ../../library/tempfile.rst:188
msgid ""
"The directory name can be retrieved from the :attr:`!name` attribute of the "
"returned object.  When the returned object is used as a :term:`context "
"manager`, the :attr:`!name` will be assigned to the target of the :keyword:`!"
"as` clause in the :keyword:`with` statement, if there is one."
msgstr ""

#: ../../library/tempfile.rst:195
msgid ""
"The directory can be explicitly cleaned up by calling the :meth:`!cleanup` "
"method. If *ignore_cleanup_errors* is true, any unhandled exceptions during "
"explicit or implicit cleanup (such as a :exc:`PermissionError` removing open "
"files on Windows) will be ignored, and the remaining removable items deleted "
"on a \"best-effort\" basis. Otherwise, errors will be raised in whatever "
"context cleanup occurs (the :meth:`!cleanup` call, exiting the context "
"manager, when the object is garbage-collected or during interpreter "
"shutdown)."
msgstr ""

#: ../../library/tempfile.rst:204
msgid ""
"The *delete* parameter can be used to disable cleanup of the directory tree "
"upon exiting the context.  While it may seem unusual for a context manager "
"to disable the action taken when exiting the context, it can be useful "
"during debugging or when you need your cleanup behavior to be conditional "
"based on other logic."
msgstr ""

#: ../../library/tempfile.rst:210 ../../library/tempfile.rst:290
msgid ""
"Raises an :ref:`auditing event <auditing>` ``tempfile.mkdtemp`` with "
"argument ``fullpath``."
msgstr ""
"Levanta um :ref:`evento de auditoria <auditing>` ``tempfile.mkdtemp`` com o "
"argumento ``fullpath``."

#: ../../library/tempfile.rst:214
msgid "Added *ignore_cleanup_errors* parameter."
msgstr ""

#: ../../library/tempfile.rst:217
msgid "Added the *delete* parameter."
msgstr ""

#: ../../library/tempfile.rst:223
msgid ""
"Creates a temporary file in the most secure manner possible.  There are no "
"race conditions in the file's creation, assuming that the platform properly "
"implements the :const:`os.O_EXCL` flag for :func:`os.open`.  The file is "
"readable and writable only by the creating user ID.  If the platform uses "
"permission bits to indicate whether a file is executable, the file is "
"executable by no one.  The file descriptor is not inherited by child "
"processes."
msgstr ""

#: ../../library/tempfile.rst:231
msgid ""
"Unlike :func:`TemporaryFile`, the user of :func:`mkstemp` is responsible for "
"deleting the temporary file when done with it."
msgstr ""

#: ../../library/tempfile.rst:234
msgid ""
"If *suffix* is not ``None``, the file name will end with that suffix, "
"otherwise there will be no suffix.  :func:`mkstemp` does not put a dot "
"between the file name and the suffix; if you need one, put it at the "
"beginning of *suffix*."
msgstr ""

#: ../../library/tempfile.rst:239
msgid ""
"If *prefix* is not ``None``, the file name will begin with that prefix; "
"otherwise, a default prefix is used.  The default is the return value of :"
"func:`gettempprefix` or :func:`gettempprefixb`, as appropriate."
msgstr ""

#: ../../library/tempfile.rst:243
msgid ""
"If *dir* is not ``None``, the file will be created in that directory; "
"otherwise, a default directory is used.  The default directory is chosen "
"from a platform-dependent list, but the user of the application can control "
"the directory location by setting the *TMPDIR*, *TEMP* or *TMP* environment "
"variables.  There is thus no guarantee that the generated filename will have "
"any nice properties, such as not requiring quoting when passed to external "
"commands via ``os.popen()``."
msgstr ""

#: ../../library/tempfile.rst:251
msgid ""
"If any of *suffix*, *prefix*, and *dir* are not ``None``, they must be the "
"same type. If they are bytes, the returned name will be bytes instead of "
"str. If you want to force a bytes return value with otherwise default "
"behavior, pass ``suffix=b''``."
msgstr ""

#: ../../library/tempfile.rst:257
msgid ""
"If *text* is specified and true, the file is opened in text mode. Otherwise, "
"(the default) the file is opened in binary mode."
msgstr ""

#: ../../library/tempfile.rst:260
msgid ""
":func:`mkstemp` returns a tuple containing an OS-level handle to an open "
"file (as would be returned by :func:`os.open`) and the absolute pathname of "
"that file, in that order."
msgstr ""

#: ../../library/tempfile.rst:266 ../../library/tempfile.rst:292
msgid ""
"*suffix*, *prefix*, and *dir* may now be supplied in bytes in order to "
"obtain a bytes return value.  Prior to this, only str was allowed. *suffix* "
"and *prefix* now accept and default to ``None`` to cause an appropriate "
"default value to be used."
msgstr ""

#: ../../library/tempfile.rst:272 ../../library/tempfile.rst:298
msgid "The *dir* parameter now accepts a :term:`path-like object`."
msgstr ""

#: ../../library/tempfile.rst:278
msgid ""
"Creates a temporary directory in the most secure manner possible. There are "
"no race conditions in the directory's creation.  The directory is readable, "
"writable, and searchable only by the creating user ID."
msgstr ""

#: ../../library/tempfile.rst:282
msgid ""
"The user of :func:`mkdtemp` is responsible for deleting the temporary "
"directory and its contents when done with it."
msgstr ""

#: ../../library/tempfile.rst:285
msgid ""
"The *prefix*, *suffix*, and *dir* arguments are the same as for :func:"
"`mkstemp`."
msgstr ""

#: ../../library/tempfile.rst:288
msgid ":func:`mkdtemp` returns the absolute pathname of the new directory."
msgstr ""

#: ../../library/tempfile.rst:301
msgid ""
":func:`mkdtemp` now always returns an absolute path, even if *dir* is "
"relative."
msgstr ""

#: ../../library/tempfile.rst:307
msgid ""
"Return the name of the directory used for temporary files. This defines the "
"default value for the *dir* argument to all functions in this module."
msgstr ""

#: ../../library/tempfile.rst:311
msgid ""
"Python searches a standard list of directories to find one which the calling "
"user can create files in.  The list is:"
msgstr ""

#: ../../library/tempfile.rst:314
msgid "The directory named by the :envvar:`TMPDIR` environment variable."
msgstr ""

#: ../../library/tempfile.rst:316
msgid "The directory named by the :envvar:`TEMP` environment variable."
msgstr ""

#: ../../library/tempfile.rst:318
msgid "The directory named by the :envvar:`TMP` environment variable."
msgstr ""

#: ../../library/tempfile.rst:320
msgid "A platform-specific location:"
msgstr "Uma localização específica por plataforma:"

#: ../../library/tempfile.rst:322
msgid ""
"On Windows, the directories :file:`C:\\\\TEMP`, :file:`C:\\\\TMP`, :file:`\\"
"\\TEMP`, and :file:`\\\\TMP`, in that order."
msgstr ""

#: ../../library/tempfile.rst:325
msgid ""
"On all other platforms, the directories :file:`/tmp`, :file:`/var/tmp`, and :"
"file:`/usr/tmp`, in that order."
msgstr ""

#: ../../library/tempfile.rst:328
msgid "As a last resort, the current working directory."
msgstr ""

#: ../../library/tempfile.rst:330
msgid ""
"The result of this search is cached, see the description of :data:`tempdir` "
"below."
msgstr ""

#: ../../library/tempfile.rst:335
msgid ""
"Always returns a str.  Previously it would return any :data:`tempdir` value "
"regardless of type so long as it was not ``None``."
msgstr ""

#: ../../library/tempfile.rst:340
msgid "Same as :func:`gettempdir` but the return value is in bytes."
msgstr ""

#: ../../library/tempfile.rst:346
msgid ""
"Return the filename prefix used to create temporary files.  This does not "
"contain the directory component."
msgstr ""

#: ../../library/tempfile.rst:351
msgid "Same as :func:`gettempprefix` but the return value is in bytes."
msgstr ""

#: ../../library/tempfile.rst:355
msgid ""
"The module uses a global variable to store the name of the directory used "
"for temporary files returned by :func:`gettempdir`.  It can be set directly "
"to override the selection process, but this is discouraged. All functions in "
"this module take a *dir* argument which can be used to specify the "
"directory. This is the recommended approach that does not surprise other "
"unsuspecting code by changing global API behavior."
msgstr ""

#: ../../library/tempfile.rst:364
msgid ""
"When set to a value other than ``None``, this variable defines the default "
"value for the *dir* argument to the functions defined in this module, "
"including its type, bytes or str.  It cannot be a :term:`path-like object`."
msgstr ""

#: ../../library/tempfile.rst:369
msgid ""
"If ``tempdir`` is ``None`` (the default) at any call to any of the above "
"functions except :func:`gettempprefix` it is initialized following the "
"algorithm described in :func:`gettempdir`."
msgstr ""

#: ../../library/tempfile.rst:375
msgid ""
"Beware that if you set ``tempdir`` to a bytes value, there is a nasty side "
"effect: The global default return type of :func:`mkstemp` and :func:"
"`mkdtemp` changes to bytes when no explicit ``prefix``, ``suffix``, or "
"``dir`` arguments of type str are supplied. Please do not write code "
"expecting or depending on this. This awkward behavior is maintained for "
"compatibility with the historical implementation."
msgstr ""

#: ../../library/tempfile.rst:386
msgid "Examples"
msgstr "Exemplos"

#: ../../library/tempfile.rst:388
msgid "Here are some examples of typical usage of the :mod:`tempfile` module::"
msgstr ""

#: ../../library/tempfile.rst:390
msgid ""
">>> import tempfile\n"
"\n"
"# create a temporary file and write some data to it\n"
">>> fp = tempfile.TemporaryFile()\n"
">>> fp.write(b'Hello world!')\n"
"# read data from file\n"
">>> fp.seek(0)\n"
">>> fp.read()\n"
"b'Hello world!'\n"
"# close the file, it will be removed\n"
">>> fp.close()\n"
"\n"
"# create a temporary file using a context manager\n"
">>> with tempfile.TemporaryFile() as fp:\n"
"...     fp.write(b'Hello world!')\n"
"...     fp.seek(0)\n"
"...     fp.read()\n"
"b'Hello world!'\n"
">>>\n"
"# file is now closed and removed\n"
"\n"
"# create a temporary file using a context manager\n"
"# close the file, use the name to open the file again\n"
">>> with tempfile.NamedTemporaryFile(delete_on_close=False) as fp:\n"
"...     fp.write(b'Hello world!')\n"
"...     fp.close()\n"
"... # the file is closed, but not removed\n"
"... # open the file again by using its name\n"
"...     with open(fp.name, mode='rb') as f:\n"
"...         f.read()\n"
"b'Hello world!'\n"
">>>\n"
"# file is now removed\n"
"\n"
"# create a temporary directory using the context manager\n"
">>> with tempfile.TemporaryDirectory() as tmpdirname:\n"
"...     print('created temporary directory', tmpdirname)\n"
">>>\n"
"# directory and contents have been removed"
msgstr ""

#: ../../library/tempfile.rst:433
msgid "Deprecated functions and variables"
msgstr ""

#: ../../library/tempfile.rst:435
msgid ""
"A historical way to create temporary files was to first generate a file name "
"with the :func:`mktemp` function and then create a file using this name. "
"Unfortunately this is not secure, because a different process may create a "
"file with this name in the time between the call to :func:`mktemp` and the "
"subsequent attempt to create the file by the first process. The solution is "
"to combine the two steps and create the file immediately. This approach is "
"used by :func:`mkstemp` and the other functions described above."
msgstr ""

#: ../../library/tempfile.rst:446
msgid "Use :func:`mkstemp` instead."
msgstr "Use :func:`mkstemp`."

#: ../../library/tempfile.rst:449
msgid ""
"Return an absolute pathname of a file that did not exist at the time the "
"call is made.  The *prefix*, *suffix*, and *dir* arguments are similar to "
"those of :func:`mkstemp`, except that bytes file names, ``suffix=None`` and "
"``prefix=None`` are not supported."
msgstr ""

#: ../../library/tempfile.rst:456
msgid ""
"Use of this function may introduce a security hole in your program.  By the "
"time you get around to doing anything with the file name it returns, someone "
"else may have beaten you to the punch.  :func:`mktemp` usage can be replaced "
"easily with :func:`NamedTemporaryFile`, passing it the ``delete=False`` "
"parameter::"
msgstr ""

#: ../../library/tempfile.rst:462
msgid ""
">>> f = NamedTemporaryFile(delete=False)\n"
">>> f.name\n"
"'/tmp/tmptjujjt'\n"
">>> f.write(b\"Hello World!\\n\")\n"
"13\n"
">>> f.close()\n"
">>> os.unlink(f.name)\n"
">>> os.path.exists(f.name)\n"
"False"
msgstr ""

#: ../../library/tempfile.rst:11
msgid "temporary"
msgstr ""

#: ../../library/tempfile.rst:11
msgid "file name"
msgstr ""

#: ../../library/tempfile.rst:11
msgid "file"
msgstr "arquivo"
