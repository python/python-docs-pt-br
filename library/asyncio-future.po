# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-11 17:17+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/asyncio-future.rst:8
msgid "Futures"
msgstr "Futuros"

#: ../../library/asyncio-future.rst:10
msgid ""
"**Source code:** :source:`Lib/asyncio/futures.py`, :source:`Lib/asyncio/"
"base_futures.py`"
msgstr ""
"**Kod źródłowy:** :source:`Lib/asyncio/futures.py`, :source:`Lib/asyncio/"
"base_futures.py`"

#: ../../library/asyncio-future.rst:15
msgid ""
"*Future* objects are used to bridge **low-level callback-based code** with "
"high-level async/await code."
msgstr ""
"Об’єкти *Future* використовуються для з’єднання **низькорівневого коду на "
"основі зворотного виклику** з високорівневим асинхронним кодом/кодом "
"очікування."

#: ../../library/asyncio-future.rst:20
msgid "Future Functions"
msgstr "Майбутні функції"

#: ../../library/asyncio-future.rst:24
msgid "Return ``True`` if *obj* is either of:"
msgstr "Повертає ``True``, якщо *obj* є одним із:"

#: ../../library/asyncio-future.rst:26
msgid "an instance of :class:`asyncio.Future`,"
msgstr "екземпляр :class:`asyncio.Future`,"

#: ../../library/asyncio-future.rst:27
msgid "an instance of :class:`asyncio.Task`,"
msgstr "екземпляр :class:`asyncio.Task`,"

#: ../../library/asyncio-future.rst:28
msgid "a Future-like object with a ``_asyncio_future_blocking`` attribute."
msgstr "Future-подібний об’єкт з атрибутом ``_asyncio_future_blocking``."

#: ../../library/asyncio-future.rst:36
msgid "Return:"
msgstr "Retorna:"

#: ../../library/asyncio-future.rst:38
msgid ""
"*obj* argument as is, if *obj* is a :class:`Future`, a :class:`Task`, or a "
"Future-like object (:func:`isfuture` is used for the test.)"
msgstr ""
"Аргумент *obj* як є, якщо *obj* є :class:`Future`, :class:`Task` або Future-"
"подібним об’єктом (:func:`isfuture` використовується для перевірки.)"

#: ../../library/asyncio-future.rst:42
msgid ""
"a :class:`Task` object wrapping *obj*, if *obj* is a coroutine (:func:"
"`iscoroutine` is used for the test); in this case the coroutine will be "
"scheduled by ``ensure_future()``."
msgstr ""
"об’єкт :class:`Task`, що обгортає *obj*, якщо *obj* є співпрограмою (для "
"тесту використовується :func:`iscoroutine`); у цьому випадку співпрограма "
"буде запланована ``ensure_future()``."

#: ../../library/asyncio-future.rst:47
msgid ""
"a :class:`Task` object that would await on *obj*, if *obj* is an awaitable (:"
"func:`inspect.isawaitable` is used for the test.)"
msgstr ""
"об’єкт :class:`Task`, який очікуватиме на *obj*, якщо *obj* є очікуваним (:"
"func:`inspect.isawaitable` використовується для тесту.)"

#: ../../library/asyncio-future.rst:50
msgid "If *obj* is neither of the above a :exc:`TypeError` is raised."
msgstr "Якщо *obj* не є жодним із наведених вище, виникає :exc:`TypeError`."

#: ../../library/asyncio-future.rst:54
msgid ""
"See also the :func:`create_task` function which is the preferred way for "
"creating new Tasks."
msgstr ""
"Дивіться також функцію :func:`create_task`, яка є кращим способом створення "
"нових завдань."

#: ../../library/asyncio-future.rst:57
msgid ""
"Save a reference to the result of this function, to avoid a task "
"disappearing mid-execution."
msgstr ""
"Сохраните ссылку на результат этой функции, чтобы избежать исчезновения "
"задачи в середине выполнения."

#: ../../library/asyncio-future.rst:60
msgid "The function accepts any :term:`awaitable` object."
msgstr "Функція приймає будь-який об’єкт :term:`awaitable`."

#: ../../library/asyncio-future.rst:63
msgid ""
"Deprecation warning is emitted if *obj* is not a Future-like object and "
"*loop* is not specified and there is no running event loop."
msgstr ""
"Якщо *obj* не є Future-подібним об’єктом і *loop* не вказано, і цикл подій "
"не виконується, видається попередження про застаріле."

#: ../../library/asyncio-future.rst:70
msgid ""
"Wrap a :class:`concurrent.futures.Future` object in a :class:`asyncio."
"Future` object."
msgstr ""
"Загорніть об’єкт :class:`concurrent.futures.Future` в об’єкт :class:`asyncio."
"Future`."

#: ../../library/asyncio-future.rst:73
msgid ""
"Deprecation warning is emitted if *future* is not a Future-like object and "
"*loop* is not specified and there is no running event loop."
msgstr ""
"Якщо *future* не є об’єктом, схожим на Future, і *loop* не вказано, і немає "
"запущеного циклу подій, видається попередження про застаріння."

#: ../../library/asyncio-future.rst:79
msgid "Future Object"
msgstr "Майбутній об'єкт"

#: ../../library/asyncio-future.rst:83
msgid ""
"A Future represents an eventual result of an asynchronous operation.  Not "
"thread-safe."
msgstr ""
"Future представляє кінцевий результат асинхронної операції. Небезпечно для "
"потоків."

#: ../../library/asyncio-future.rst:86
msgid ""
"Future is an :term:`awaitable` object.  Coroutines can await on Future "
"objects until they either have a result or an exception set, or until they "
"are cancelled. A Future can be awaited multiple times and the result is same."
msgstr ""
"Future — это :term:`awaitable` объект. Сопрограммы могут ожидать объектов "
"Future до тех пор, пока для них не будет установлен результат или "
"исключение, или пока они не будут отменены. Future можно ожидать несколько "
"раз, и результат будет одинаковым."

#: ../../library/asyncio-future.rst:91
msgid ""
"Typically Futures are used to enable low-level callback-based code (e.g. in "
"protocols implemented using asyncio :ref:`transports <asyncio-transports-"
"protocols>`) to interoperate with high-level async/await code."
msgstr ""
"Зазвичай ф’ючерси використовуються, щоб увімкнути низькорівневий код на "
"основі зворотного виклику (наприклад, у протоколах, реалізованих за "
"допомогою asyncio :ref:`transports <asyncio-transports-protocols>`) для "
"взаємодії з високорівневим асинхронним кодом/кодом очікування."

#: ../../library/asyncio-future.rst:96
msgid ""
"The rule of thumb is to never expose Future objects in user-facing APIs, and "
"the recommended way to create a Future object is to call :meth:`loop."
"create_future`.  This way alternative event loop implementations can inject "
"their own optimized implementations of a Future object."
msgstr ""
"Емпіричне правило полягає в тому, щоб ніколи не показувати об’єкти Future в "
"призначених для користувача API, а рекомендований спосіб створити об’єкт "
"Future – це викликати :meth:`loop.create_future`. Таким чином альтернативні "
"реалізації циклу подій можуть вводити власні оптимізовані реалізації об’єкта "
"Future."

#: ../../library/asyncio-future.rst:102
msgid "Added support for the :mod:`contextvars` module."
msgstr "Adicionado suporte para o módulo :mod:`contextvars`."

#: ../../library/asyncio-future.rst:105
msgid ""
"Deprecation warning is emitted if *loop* is not specified and there is no "
"running event loop."
msgstr ""
"Aviso de descontinuidade é emitido se *loop* não é especificado, e não "
"existe nenhum laço de eventos em execução."

#: ../../library/asyncio-future.rst:111
msgid "Return the result of the Future."
msgstr "Повернути результат Future."

#: ../../library/asyncio-future.rst:113
msgid ""
"If the Future is *done* and has a result set by the :meth:`set_result` "
"method, the result value is returned."
msgstr ""
"Якщо Future *done* і має результат, встановлений методом :meth:`set_result`, "
"повертається значення результату."

#: ../../library/asyncio-future.rst:116
msgid ""
"If the Future is *done* and has an exception set by the :meth:"
"`set_exception` method, this method raises the exception."
msgstr ""
"Якщо Future *done* і має виняток, встановлений методом :meth:"
"`set_exception`, цей метод викликає виняток."

#: ../../library/asyncio-future.rst:119 ../../library/asyncio-future.rst:207
msgid ""
"If the Future has been *cancelled*, this method raises a :exc:"
"`CancelledError` exception."
msgstr ""
"Se o futuro foi *cancelled*, este método levanta uma exceção :exc:"
"`CancelledError`."

#: ../../library/asyncio-future.rst:122
msgid ""
"If the Future's result isn't yet available, this method raises a :exc:"
"`InvalidStateError` exception."
msgstr ""
"Якщо результат Future ще недоступний, цей метод викликає виняток :exc:"
"`InvalidStateError`."

#: ../../library/asyncio-future.rst:127
msgid "Mark the Future as *done* and set its result."
msgstr "Позначте майбутнє як *виконане* та встановіть його результат."

#: ../../library/asyncio-future.rst:129 ../../library/asyncio-future.rst:136
msgid ""
"Raises a :exc:`InvalidStateError` error if the Future is already *done*."
msgstr "Викликає помилку :exc:`InvalidStateError`, якщо Future вже *виконано*."

#: ../../library/asyncio-future.rst:134
msgid "Mark the Future as *done* and set an exception."
msgstr "Позначте майбутнє як *готове* та встановіть виняток."

#: ../../library/asyncio-future.rst:141
msgid "Return ``True`` if the Future is *done*."
msgstr "Повертає ``True``, якщо Future *done*."

#: ../../library/asyncio-future.rst:143
msgid ""
"A Future is *done* if it was *cancelled* or if it has a result or an "
"exception set with :meth:`set_result` or :meth:`set_exception` calls."
msgstr ""
"Майбутнє вважається *виконаним*, якщо його було *скасовано* або якщо він має "
"результат чи виняток, встановлений за допомогою викликів :meth:`set_result` "
"або :meth:`set_exception`."

#: ../../library/asyncio-future.rst:149
msgid "Return ``True`` if the Future was *cancelled*."
msgstr "Повертає ``True``, якщо Future було *скасовано*."

#: ../../library/asyncio-future.rst:151
msgid ""
"The method is usually used to check if a Future is not *cancelled* before "
"setting a result or an exception for it::"
msgstr ""
"Метод зазвичай використовується, щоб перевірити, чи Future не *скасовано* "
"перед встановленням результату або винятку для нього::"

#: ../../library/asyncio-future.rst:159
msgid "Add a callback to be run when the Future is *done*."
msgstr ""
"Додайте зворотний виклик, який буде запущено, коли Майбутнє *зроблено*."

#: ../../library/asyncio-future.rst:161
msgid "The *callback* is called with the Future object as its only argument."
msgstr ""
"*Зворотний виклик* викликається з об’єктом Future як єдиним аргументом."

#: ../../library/asyncio-future.rst:164
msgid ""
"If the Future is already *done* when this method is called, the callback is "
"scheduled with :meth:`loop.call_soon`."
msgstr ""
"Якщо Future вже *done* під час виклику цього методу, зворотний виклик "
"планується за допомогою :meth:`loop.call_soon`."

#: ../../library/asyncio-future.rst:167
msgid ""
"An optional keyword-only *context* argument allows specifying a custom :"
"class:`contextvars.Context` for the *callback* to run in. The current "
"context is used when no *context* is provided."
msgstr ""
"Um argumento opcional somente-nomeado *context* permite especificar um :"
"class:`contextvars.Context` customizado para executar na *função de "
"retorno*. O contexto atual é usado quando nenhum *context* é fornecido."

#: ../../library/asyncio-future.rst:171
msgid ""
":func:`functools.partial` can be used to pass parameters to the callback, e."
"g.::"
msgstr ""
":func:`functools.partial` можна використовувати для передачі параметрів "
"зворотному виклику, наприклад::"

#: ../../library/asyncio-future.rst:178
msgid ""
"The *context* keyword-only parameter was added. See :pep:`567` for more "
"details."
msgstr ""
"O parâmetro somente-nomeado *context* foi adicionado. Veja :pep:`567` para "
"mais detalhes."

#: ../../library/asyncio-future.rst:184
msgid "Remove *callback* from the callbacks list."
msgstr "Remove *callback* da lista de funções de retorno."

#: ../../library/asyncio-future.rst:186
msgid ""
"Returns the number of callbacks removed, which is typically 1, unless a "
"callback was added more than once."
msgstr ""
"Повертає кількість видалених зворотних викликів, яка зазвичай дорівнює 1, "
"якщо зворотний виклик не було додано кілька разів."

#: ../../library/asyncio-future.rst:191
msgid "Cancel the Future and schedule callbacks."
msgstr "Скасувати майбутнє та запланувати зворотні виклики."

#: ../../library/asyncio-future.rst:193
msgid ""
"If the Future is already *done* or *cancelled*, return ``False``. Otherwise, "
"change the Future's state to *cancelled*, schedule the callbacks, and return "
"``True``."
msgstr ""
"Якщо Future вже *виконано* або *скасовано*, поверніть ``False``. В іншому "
"випадку змініть стан Future на *cancelled*, заплануйте зворотні виклики та "
"поверніть ``True``."

#: ../../library/asyncio-future.rst:197
msgid "Added the *msg* parameter."
msgstr "Adicionado o  parâmetro *msg*."

#: ../../library/asyncio-future.rst:202
msgid "Return the exception that was set on this Future."
msgstr "Повертає виняток, встановлений для цього Future."

#: ../../library/asyncio-future.rst:204
msgid ""
"The exception (or ``None`` if no exception was set) is returned only if the "
"Future is *done*."
msgstr ""
"Виняток (або ``None``, якщо виключення не було встановлено) повертається, "
"лише якщо Future *done*."

#: ../../library/asyncio-future.rst:210
msgid ""
"If the Future isn't *done* yet, this method raises an :exc:"
"`InvalidStateError` exception."
msgstr ""
"Якщо Future ще не *зроблено*, цей метод викликає виняток :exc:"
"`InvalidStateError`."

#: ../../library/asyncio-future.rst:215
msgid "Return the event loop the Future object is bound to."
msgstr "Повертає цикл подій, до якого прив’язаний об’єкт Future."

#: ../../library/asyncio-future.rst:222
msgid ""
"This example creates a Future object, creates and schedules an asynchronous "
"Task to set result for the Future, and waits until the Future has a result::"
msgstr ""
"У цьому прикладі створюється об’єкт Future, створюється та планується "
"асинхронне завдання для встановлення результату для Future та очікується, "
"доки Future не отримає результат::"

#: ../../library/asyncio-future.rst:257
msgid ""
"The Future object was designed to mimic :class:`concurrent.futures.Future`.  "
"Key differences include:"
msgstr ""
"Об’єкт Future був розроблений для імітації :class:`concurrent.futures."
"Future`. Основні відмінності:"

#: ../../library/asyncio-future.rst:260
msgid ""
"unlike asyncio Futures, :class:`concurrent.futures.Future` instances cannot "
"be awaited."
msgstr ""
"на відміну від asyncio Futures, екземпляри :class:`concurrent.futures."
"Future` не можна чекати."

#: ../../library/asyncio-future.rst:263
msgid ""
":meth:`asyncio.Future.result` and :meth:`asyncio.Future.exception` do not "
"accept the *timeout* argument."
msgstr ""
":meth:`asyncio.Future.result` і :meth:`asyncio.Future.exception` не "
"приймають аргумент *timeout*."

#: ../../library/asyncio-future.rst:266
msgid ""
":meth:`asyncio.Future.result` and :meth:`asyncio.Future.exception` raise an :"
"exc:`InvalidStateError` exception when the Future is not *done*."
msgstr ""
":meth:`asyncio.Future.result` і :meth:`asyncio.Future.exception` викликають "
"виняток :exc:`InvalidStateError`, коли Future не *виконано*."

#: ../../library/asyncio-future.rst:270
msgid ""
"Callbacks registered with :meth:`asyncio.Future.add_done_callback` are not "
"called immediately.  They are scheduled with :meth:`loop.call_soon` instead."
msgstr ""
"Зворотні виклики, зареєстровані за допомогою :meth:`asyncio.Future."
"add_done_callback`, не викликаються негайно. Натомість вони плануються за "
"допомогою :meth:`loop.call_soon`."

#: ../../library/asyncio-future.rst:274
msgid ""
"asyncio Future is not compatible with the :func:`concurrent.futures.wait` "
"and :func:`concurrent.futures.as_completed` functions."
msgstr ""
"asyncio Future несумісний із функціями :func:`concurrent.futures.wait` і :"
"func:`concurrent.futures.as_completed`."

#: ../../library/asyncio-future.rst:278
msgid ""
":meth:`asyncio.Future.cancel` accepts an optional ``msg`` argument, but :"
"func:`concurrent.futures.cancel` does not."
msgstr ""
