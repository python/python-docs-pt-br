# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Raphael Mendonça, 2021
# Cássio Nomura <cassionomura@gmail.com>, 2021
# i17obot <i17obot@rougeth.com>, 2021
# Adorilson Bezerra <adorilson@gmail.com>, 2022
# Vinicius Gubiani Ferreira <vini.g.fer@gmail.com>, 2022
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-11 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:55+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/asyncio-stream.rst:7
msgid "Streams"
msgstr "Streams"

#: ../../library/asyncio-stream.rst:9
msgid "**Source code:** :source:`Lib/asyncio/streams.py`"
msgstr "**Código-fonte:** :source:`Lib/asyncio/streams.py`"

#: ../../library/asyncio-stream.rst:13
msgid ""
"Streams are high-level async/await-ready primitives to work with network "
"connections.  Streams allow sending and receiving data without using "
"callbacks or low-level protocols and transports."
msgstr ""
"Streams são conexões de rede de alto-nível assincronias/espera-pronta. "
"Streams permitem envios e recebimentos de dados sem usar retornos de "
"chamadas ou protocolos de baixo nível."

#: ../../library/asyncio-stream.rst:19
msgid "Here is an example of a TCP echo client written using asyncio streams::"
msgstr ""
"Aqui está um exemplo de um cliente TCP realizando eco, escrito usando "
"streams asyncio::"

#: ../../library/asyncio-stream.rst:22 ../../library/asyncio-stream.rst:415
msgid ""
"import asyncio\n"
"\n"
"async def tcp_echo_client(message):\n"
"    reader, writer = await asyncio.open_connection(\n"
"        '127.0.0.1', 8888)\n"
"\n"
"    print(f'Send: {message!r}')\n"
"    writer.write(message.encode())\n"
"    await writer.drain()\n"
"\n"
"    data = await reader.read(100)\n"
"    print(f'Received: {data.decode()!r}')\n"
"\n"
"    print('Close the connection')\n"
"    writer.close()\n"
"    await writer.wait_closed()\n"
"\n"
"asyncio.run(tcp_echo_client('Hello World!'))"
msgstr ""

#: ../../library/asyncio-stream.rst:42
msgid "See also the `Examples`_ section below."
msgstr "Veja também a seção `Exemplos`_ abaixo."

#: ../../library/asyncio-stream.rst:46
msgid "Stream Functions"
msgstr "Funções Stream"

#: ../../library/asyncio-stream.rst:47
msgid ""
"The following top-level asyncio functions can be used to create and work "
"with streams:"
msgstr ""
"As seguintes funções asyncio de alto nível podem ser usadas para criar e "
"trabalhar com streams:"

#: ../../library/asyncio-stream.rst:58
msgid ""
"Establish a network connection and return a pair of ``(reader, writer)`` "
"objects."
msgstr ""
"Estabelece uma conexão de rede e retorna um par de objetos ``(reader, "
"writer)``."

#: ../../library/asyncio-stream.rst:61
msgid ""
"The returned *reader* and *writer* objects are instances of :class:"
"`StreamReader` and :class:`StreamWriter` classes."
msgstr ""
"Os objetos *reader* e *writer* retornados são instâncias das classes :class:"
"`StreamReader` e :class:`StreamWriter`."

#: ../../library/asyncio-stream.rst:64 ../../library/asyncio-stream.rst:109
msgid ""
"*limit* determines the buffer size limit used by the returned :class:"
"`StreamReader` instance.  By default the *limit* is set to 64 KiB."
msgstr ""
"*limit* determina o tamanho limite do buffer usado pela instância :class:"
"`StreamReader` retornada. Por padrão, *limit* é definido em 64 KiB."

#: ../../library/asyncio-stream.rst:68
msgid ""
"The rest of the arguments are passed directly to :meth:`loop."
"create_connection`."
msgstr ""
"O resto dos argumentos é passado diretamente para :meth:`loop."
"create_connection`."

#: ../../library/asyncio-stream.rst:73 ../../library/asyncio-stream.rst:147
msgid ""
"The *sock* argument transfers ownership of the socket to the :class:"
"`StreamWriter` created. To close the socket, call its :meth:`~asyncio."
"StreamWriter.close` method."
msgstr ""

#: ../../library/asyncio-stream.rst:77
msgid "Added the *ssl_handshake_timeout* parameter."
msgstr "Adicionado o parâmetro *ssl_handshake_timeout*."

#: ../../library/asyncio-stream.rst:80
msgid "Added the *happy_eyeballs_delay* and *interleave* parameters."
msgstr "Adicionados os parâmetros *happy_eyeballs_delay* e *interleave*."

#: ../../library/asyncio-stream.rst:83 ../../library/asyncio-stream.rst:125
#: ../../library/asyncio-stream.rst:157 ../../library/asyncio-stream.rst:187
msgid "Removed the *loop* parameter."
msgstr "Removido o parâmetro *loop*."

#: ../../library/asyncio-stream.rst:86 ../../library/asyncio-stream.rst:128
#: ../../library/asyncio-stream.rst:160 ../../library/asyncio-stream.rst:190
#: ../../library/asyncio-stream.rst:383
msgid "Added the *ssl_shutdown_timeout* parameter."
msgstr ""

#: ../../library/asyncio-stream.rst:98
msgid "Start a socket server."
msgstr "Inicia um soquete no servidor."

#: ../../library/asyncio-stream.rst:100
msgid ""
"The *client_connected_cb* callback is called whenever a new client "
"connection is established.  It receives a ``(reader, writer)`` pair as two "
"arguments, instances of the :class:`StreamReader` and :class:`StreamWriter` "
"classes."
msgstr ""
"A função de retorno *client_connected_cb* é chamada sempre que uma nova "
"conexão de um cliente é estabelecida. Ela recebe um par ``(reader, writer)`` "
"como dois argumentos, instâncias das classes :class:`StreamReader` e :class:"
"`StreamWriter`."

#: ../../library/asyncio-stream.rst:105
msgid ""
"*client_connected_cb* can be a plain callable or a :ref:`coroutine function "
"<coroutine>`; if it is a coroutine function, it will be automatically "
"scheduled as a :class:`Task`."
msgstr ""
"*client_connected_cb* pode ser simplesmente algo chamável ou uma :ref:"
"`função de corrotina<coroutine>`; se ele for uma função de corrotina, ele "
"será automaticamente agendado como uma :class:`Task`."

#: ../../library/asyncio-stream.rst:113
msgid ""
"The rest of the arguments are passed directly to :meth:`loop.create_server`."
msgstr ""
"O resto dos argumentos são passados diretamente para :meth:`loop."
"create_server`."

#: ../../library/asyncio-stream.rst:118 ../../library/asyncio-stream.rst:177
msgid ""
"The *sock* argument transfers ownership of the socket to the server created. "
"To close the socket, call the server's :meth:`~asyncio.Server.close` method."
msgstr ""

#: ../../library/asyncio-stream.rst:122
msgid "Added the *ssl_handshake_timeout* and *start_serving* parameters."
msgstr ""

#: ../../library/asyncio-stream.rst:133
msgid "Unix Sockets"
msgstr "Soquetes Unix"

#: ../../library/asyncio-stream.rst:138
msgid ""
"Establish a Unix socket connection and return a pair of ``(reader, writer)``."
msgstr ""
"Estabelece uma conexão de soquete Unix e retorna um par com ``(reader, "
"writer)``."

#: ../../library/asyncio-stream.rst:141
msgid "Similar to :func:`open_connection` but operates on Unix sockets."
msgstr "Similar a :func:`open_connection`, mas opera em soquetes Unix."

#: ../../library/asyncio-stream.rst:143
msgid "See also the documentation of :meth:`loop.create_unix_connection`."
msgstr ""
"Veja também a documentação do método :meth:`loop.create_unix_connection`."

#: ../../library/asyncio-stream.rst:151 ../../library/asyncio-stream.rst:181
msgid "Availability"
msgstr "Disponibilidade"

#: ../../library/asyncio-stream.rst:153
msgid ""
"Added the *ssl_handshake_timeout* parameter. The *path* parameter can now be "
"a :term:`path-like object`"
msgstr ""

#: ../../library/asyncio-stream.rst:169
msgid "Start a Unix socket server."
msgstr "Inicia um servidor com soquete Unix."

#: ../../library/asyncio-stream.rst:171
msgid "Similar to :func:`start_server` but works with Unix sockets."
msgstr "Similar a :func:`start_server`, mas funciona com soquetes Unix."

#: ../../library/asyncio-stream.rst:173
msgid "See also the documentation of :meth:`loop.create_unix_server`."
msgstr "Veja também a documentação do método :meth:`loop.create_unix_server`."

#: ../../library/asyncio-stream.rst:183
msgid ""
"Added the *ssl_handshake_timeout* and *start_serving* parameters. The *path* "
"parameter can now be a :term:`path-like object`."
msgstr ""

#: ../../library/asyncio-stream.rst:195
msgid "StreamReader"
msgstr "StreamReader"

#: ../../library/asyncio-stream.rst:199
msgid ""
"Represents a reader object that provides APIs to read data from the IO "
"stream. As an :term:`asynchronous iterable`, the object supports the :"
"keyword:`async for` statement."
msgstr ""

#: ../../library/asyncio-stream.rst:203
msgid ""
"It is not recommended to instantiate *StreamReader* objects directly; use :"
"func:`open_connection` and :func:`start_server` instead."
msgstr ""
"Não é recomendado instanciar objetos *StreamReader* diretamente; use :func:"
"`open_connection` e :func:`start_server` ao invés disso."

#: ../../library/asyncio-stream.rst:209
msgid "Acknowledge the EOF."
msgstr ""

#: ../../library/asyncio-stream.rst:213
msgid "Read up to *n* bytes from the stream."
msgstr ""

#: ../../library/asyncio-stream.rst:215
msgid ""
"If *n* is not provided or set to ``-1``, read until EOF, then return all "
"read :class:`bytes`. If EOF was received and the internal buffer is empty, "
"return an empty ``bytes`` object."
msgstr ""

#: ../../library/asyncio-stream.rst:220
msgid "If *n* is ``0``, return an empty ``bytes`` object immediately."
msgstr ""

#: ../../library/asyncio-stream.rst:222
msgid ""
"If *n* is positive, return at most *n* available ``bytes`` as soon as at "
"least 1 byte is available in the internal buffer. If EOF is received before "
"any byte is read, return an empty ``bytes`` object."
msgstr ""

#: ../../library/asyncio-stream.rst:229
msgid ""
"Read one line, where \"line\" is a sequence of bytes ending with ``\\n``."
msgstr ""
"Lê uma linha, onde \"line\" é uma sequência de bytes encerrando com ``\\n``."

#: ../../library/asyncio-stream.rst:232
msgid ""
"If EOF is received and ``\\n`` was not found, the method returns partially "
"read data."
msgstr ""
"Se EOF é recebido e ``\\n`` não foi encontrado, o método retorna os dados "
"parcialmente lidos."

#: ../../library/asyncio-stream.rst:235
msgid ""
"If EOF is received and the internal buffer is empty, return an empty "
"``bytes`` object."
msgstr ""
"Se EOF for recebido e o buffer interno estiver vazio, retorna um objeto "
"``bytes`` vazio."

#: ../../library/asyncio-stream.rst:240
msgid "Read exactly *n* bytes."
msgstr "Lê exatamente *n* bytes."

#: ../../library/asyncio-stream.rst:242
msgid ""
"Raise an :exc:`IncompleteReadError` if EOF is reached before *n* can be "
"read.  Use the :attr:`IncompleteReadError.partial` attribute to get the "
"partially read data."
msgstr ""
"Levanta um :exc:`IncompleteReadError` se EOF é atingido antes que *n* sejam "
"lidos. Use o atributo :attr:`IncompleteReadError.partial` para obter os "
"dados parcialmente lidos."

#: ../../library/asyncio-stream.rst:248
msgid "Read data from the stream until *separator* is found."
msgstr "Lê dados a partir do stream até que *separator* seja encontrado."

#: ../../library/asyncio-stream.rst:250
msgid ""
"On success, the data and separator will be removed from the internal buffer "
"(consumed). Returned data will include the separator at the end."
msgstr ""
"Ao ter sucesso, os dados e o separador serão removidos do buffer interno "
"(consumido). Dados retornados irão incluir o separador no final."

#: ../../library/asyncio-stream.rst:254
msgid ""
"If the amount of data read exceeds the configured stream limit, a :exc:"
"`LimitOverrunError` exception is raised, and the data is left in the "
"internal buffer and can be read again."
msgstr ""
"Se a quantidade de dados lidos excede o limite configurado para o stream, "
"uma exceção :exc:`LimitOverrunError` é levantada, e os dados são deixados no "
"buffer interno e podem ser lidos novamente."

#: ../../library/asyncio-stream.rst:258
msgid ""
"If EOF is reached before the complete separator is found, an :exc:"
"`IncompleteReadError` exception is raised, and the internal buffer is "
"reset.  The :attr:`IncompleteReadError.partial` attribute may contain a "
"portion of the separator."
msgstr ""
"Se EOF for atingido antes que o separador completo seja encontrado, uma "
"exceção :exc:`IncompleteReadError` é levantada, e o buffer interno é "
"resetado. O atributo :attr:`IncompleteReadError.partial` pode conter uma "
"parte do separador."

#: ../../library/asyncio-stream.rst:263
msgid ""
"The *separator* may also be a tuple of separators. In this case the return "
"value will be the shortest possible that has any separator as the suffix. "
"For the purposes of :exc:`LimitOverrunError`, the shortest possible "
"separator is considered to be the one that matched."
msgstr ""

#: ../../library/asyncio-stream.rst:273
msgid "The *separator* parameter may now be a :class:`tuple` of separators."
msgstr ""

#: ../../library/asyncio-stream.rst:278
msgid "Return ``True`` if the buffer is empty and :meth:`feed_eof` was called."
msgstr ""
"Retorna ``True`` se o buffer estiver vazio e :meth:`feed_eof` foi chamado."

#: ../../library/asyncio-stream.rst:283
msgid "StreamWriter"
msgstr "StreamWriter"

#: ../../library/asyncio-stream.rst:287
msgid ""
"Represents a writer object that provides APIs to write data to the IO stream."
msgstr ""
"Representa um objeto de escrita que fornece APIs para escrever dados para o "
"stream de IO."

#: ../../library/asyncio-stream.rst:290
msgid ""
"It is not recommended to instantiate *StreamWriter* objects directly; use :"
"func:`open_connection` and :func:`start_server` instead."
msgstr ""
"Não é recomendado instanciar objetos *StreamWriter* diretamente; use :func:"
"`open_connection` e :func:`start_server` ao invés."

#: ../../library/asyncio-stream.rst:296
msgid ""
"The method attempts to write the *data* to the underlying socket "
"immediately. If that fails, the data is queued in an internal write buffer "
"until it can be sent."
msgstr ""
"O método tenta escrever *data* para o soquete subjacente imediatamente. Se "
"isso falhar, data é enfileirado em um buffer interno de escrita, até que "
"possa ser enviado."

#: ../../library/asyncio-stream.rst:300 ../../library/asyncio-stream.rst:312
msgid "The method should be used along with the ``drain()`` method::"
msgstr "O método deve ser usado juntamente com o método ``drain()``::"

#: ../../library/asyncio-stream.rst:302
msgid ""
"stream.write(data)\n"
"await stream.drain()"
msgstr ""

#: ../../library/asyncio-stream.rst:307
msgid ""
"The method writes a list (or any iterable) of bytes to the underlying socket "
"immediately. If that fails, the data is queued in an internal write buffer "
"until it can be sent."
msgstr ""
"O método escreve imediatamente a lista (ou qualquer iterável) de bytes para "
"o soquete subjacente. Se isso falhar, os dados são enfileirados em um buffer "
"de escrita interno até que possam ser enviados."

#: ../../library/asyncio-stream.rst:314
msgid ""
"stream.writelines(lines)\n"
"await stream.drain()"
msgstr ""

#: ../../library/asyncio-stream.rst:319
msgid "The method closes the stream and the underlying socket."
msgstr "O método fecha o stream e o soquete subjacente."

#: ../../library/asyncio-stream.rst:321
msgid ""
"The method should be used, though not mandatory, along with the "
"``wait_closed()`` method::"
msgstr ""

#: ../../library/asyncio-stream.rst:324
msgid ""
"stream.close()\n"
"await stream.wait_closed()"
msgstr ""

#: ../../library/asyncio-stream.rst:329
msgid ""
"Return ``True`` if the underlying transport supports the :meth:`write_eof` "
"method, ``False`` otherwise."
msgstr ""
"Retorna ``True`` se o transporte subjacente suporta o método :meth:"
"`write_eof`, ``False`` caso contrário."

#: ../../library/asyncio-stream.rst:334
msgid ""
"Close the write end of the stream after the buffered write data is flushed."
msgstr ""
"Fecha o extremo de escrita do stream após os dados no buffer de escrita "
"terem sido descarregados."

#: ../../library/asyncio-stream.rst:339
msgid "Return the underlying asyncio transport."
msgstr "Retorna o transporte asyncio subjacente."

#: ../../library/asyncio-stream.rst:343
msgid ""
"Access optional transport information; see :meth:`BaseTransport."
"get_extra_info` for details."
msgstr ""
"Acessa informações de transporte opcionais; veja :meth:`BaseTransport."
"get_extra_info` para detalhes."

#: ../../library/asyncio-stream.rst:348
msgid "Wait until it is appropriate to resume writing to the stream. Example::"
msgstr ""
"Aguarda até que seja apropriado continuar escrevendo no stream. Exemplo::"

#: ../../library/asyncio-stream.rst:351
msgid ""
"writer.write(data)\n"
"await writer.drain()"
msgstr ""

#: ../../library/asyncio-stream.rst:354
msgid ""
"This is a flow control method that interacts with the underlying IO write "
"buffer.  When the size of the buffer reaches the high watermark, *drain()* "
"blocks until the size of the buffer is drained down to the low watermark and "
"writing can be resumed.  When there is nothing to wait for, the :meth:"
"`drain` returns immediately."
msgstr ""
"Este é um método de controle de fluxo que interage com o buffer de entrada e "
"saída de escrita subjacente. Quando o tamanho do buffer atinge a marca "
"d'agua alta, *drain()* bloqueia até que o tamanho do buffer seja drenado "
"para a marca d'água baixa, e a escrita possa continuar. Quando não existe "
"nada que cause uma espera, o método :meth:`drain` retorna imediatamente."

#: ../../library/asyncio-stream.rst:364
msgid "Upgrade an existing stream-based connection to TLS."
msgstr ""

#: ../../library/asyncio-stream.rst:366
msgid "Parameters:"
msgstr "Parâmetros:"

#: ../../library/asyncio-stream.rst:368
msgid "*sslcontext*: a configured instance of :class:`~ssl.SSLContext`."
msgstr "*sslcontext*: uma instância configurada de :class:`~ssl.SSLContext`."

#: ../../library/asyncio-stream.rst:370
msgid ""
"*server_hostname*: sets or overrides the host name that the target server's "
"certificate will be matched against."
msgstr ""
"*server_hostname*: define ou substitui o nome do host no qual o servidor "
"alvo do certificado será comparado."

#: ../../library/asyncio-stream.rst:373
msgid ""
"*ssl_handshake_timeout* is the time in seconds to wait for the TLS handshake "
"to complete before aborting the connection.  ``60.0`` seconds if ``None`` "
"(default)."
msgstr ""

#: ../../library/asyncio-stream.rst:377
msgid ""
"*ssl_shutdown_timeout* is the time in seconds to wait for the SSL shutdown "
"to complete before aborting the connection. ``30.0`` seconds if ``None`` "
"(default)."
msgstr ""

#: ../../library/asyncio-stream.rst:389
msgid ""
"Return ``True`` if the stream is closed or in the process of being closed."
msgstr ""
"Retorna ``True`` se o stream estiver fechado ou em processo de ser fechado."

#: ../../library/asyncio-stream.rst:396
msgid "Wait until the stream is closed."
msgstr "Aguarda até que o stream seja fechado."

#: ../../library/asyncio-stream.rst:398
msgid ""
"Should be called after :meth:`close` to wait until the underlying connection "
"is closed, ensuring that all data has been flushed before e.g. exiting the "
"program."
msgstr ""

#: ../../library/asyncio-stream.rst:406
msgid "Examples"
msgstr "Exemplos"

#: ../../library/asyncio-stream.rst:411
msgid "TCP echo client using streams"
msgstr "Cliente para eco TCP usando streams"

#: ../../library/asyncio-stream.rst:413
msgid "TCP echo client using the :func:`asyncio.open_connection` function::"
msgstr "Cliente de eco TCP usando a função :func:`asyncio.open_connection`::"

#: ../../library/asyncio-stream.rst:437
msgid ""
"The :ref:`TCP echo client protocol "
"<asyncio_example_tcp_echo_client_protocol>` example uses the low-level :meth:"
"`loop.create_connection` method."
msgstr ""
"O exemplo de :ref:`protocolo do cliente para eco TCP "
"<asyncio_example_tcp_echo_client_protocol>` usa o método de baixo nível :"
"meth:`loop.create_connection`."

#: ../../library/asyncio-stream.rst:444
msgid "TCP echo server using streams"
msgstr "Servidor eco TCP usando streams"

#: ../../library/asyncio-stream.rst:446
msgid "TCP echo server using the :func:`asyncio.start_server` function::"
msgstr "Servidor eco TCP usando a função :func:`asyncio.start_server`::"

#: ../../library/asyncio-stream.rst:448
msgid ""
"import asyncio\n"
"\n"
"async def handle_echo(reader, writer):\n"
"    data = await reader.read(100)\n"
"    message = data.decode()\n"
"    addr = writer.get_extra_info('peername')\n"
"\n"
"    print(f\"Received {message!r} from {addr!r}\")\n"
"\n"
"    print(f\"Send: {message!r}\")\n"
"    writer.write(data)\n"
"    await writer.drain()\n"
"\n"
"    print(\"Close the connection\")\n"
"    writer.close()\n"
"    await writer.wait_closed()\n"
"\n"
"async def main():\n"
"    server = await asyncio.start_server(\n"
"        handle_echo, '127.0.0.1', 8888)\n"
"\n"
"    addrs = ', '.join(str(sock.getsockname()) for sock in server.sockets)\n"
"    print(f'Serving on {addrs}')\n"
"\n"
"    async with server:\n"
"        await server.serve_forever()\n"
"\n"
"asyncio.run(main())"
msgstr ""

#: ../../library/asyncio-stream.rst:480
msgid ""
"The :ref:`TCP echo server protocol "
"<asyncio_example_tcp_echo_server_protocol>` example uses the :meth:`loop."
"create_server` method."
msgstr ""
"O exemplo de :ref:`protocolo eco de servidor TCP "
"<asyncio_example_tcp_echo_server_protocol>` utiliza o método :meth:`loop."
"create_server`."

#: ../../library/asyncio-stream.rst:485
msgid "Get HTTP headers"
msgstr "Obtém headers HTTP"

#: ../../library/asyncio-stream.rst:487
msgid ""
"Simple example querying HTTP headers of the URL passed on the command line::"
msgstr ""
"Exemplo simples consultando cabeçalhos HTTP da URL passada na linha de "
"comando::"

#: ../../library/asyncio-stream.rst:489
msgid ""
"import asyncio\n"
"import urllib.parse\n"
"import sys\n"
"\n"
"async def print_http_headers(url):\n"
"    url = urllib.parse.urlsplit(url)\n"
"    if url.scheme == 'https':\n"
"        reader, writer = await asyncio.open_connection(\n"
"            url.hostname, 443, ssl=True)\n"
"    else:\n"
"        reader, writer = await asyncio.open_connection(\n"
"            url.hostname, 80)\n"
"\n"
"    query = (\n"
"        f\"HEAD {url.path or '/'} HTTP/1.0\\r\\n\"\n"
"        f\"Host: {url.hostname}\\r\\n\"\n"
"        f\"\\r\\n\"\n"
"    )\n"
"\n"
"    writer.write(query.encode('latin-1'))\n"
"    while True:\n"
"        line = await reader.readline()\n"
"        if not line:\n"
"            break\n"
"\n"
"        line = line.decode('latin1').rstrip()\n"
"        if line:\n"
"            print(f'HTTP header> {line}')\n"
"\n"
"    # Ignore the body, close the socket\n"
"    writer.close()\n"
"    await writer.wait_closed()\n"
"\n"
"url = sys.argv[1]\n"
"asyncio.run(print_http_headers(url))"
msgstr ""

#: ../../library/asyncio-stream.rst:526
msgid "Usage::"
msgstr "Uso::"

#: ../../library/asyncio-stream.rst:528
msgid "python example.py http://example.com/path/page.html"
msgstr ""

#: ../../library/asyncio-stream.rst:530
msgid "or with HTTPS::"
msgstr "ou com HTTPS::"

#: ../../library/asyncio-stream.rst:532
msgid "python example.py https://example.com/path/page.html"
msgstr ""

#: ../../library/asyncio-stream.rst:538
msgid "Register an open socket to wait for data using streams"
msgstr "Registra um soquete aberto para aguardar por dados usando streams"

#: ../../library/asyncio-stream.rst:540
msgid ""
"Coroutine waiting until a socket receives data using the :func:"
"`open_connection` function::"
msgstr ""
"Corrotina aguardando até que um soquete receba dados usando a função :func:"
"`open_connection`::"

#: ../../library/asyncio-stream.rst:543
msgid ""
"import asyncio\n"
"import socket\n"
"\n"
"async def wait_for_data():\n"
"    # Get a reference to the current event loop because\n"
"    # we want to access low-level APIs.\n"
"    loop = asyncio.get_running_loop()\n"
"\n"
"    # Create a pair of connected sockets.\n"
"    rsock, wsock = socket.socketpair()\n"
"\n"
"    # Register the open socket to wait for data.\n"
"    reader, writer = await asyncio.open_connection(sock=rsock)\n"
"\n"
"    # Simulate the reception of data from the network\n"
"    loop.call_soon(wsock.send, 'abc'.encode())\n"
"\n"
"    # Wait for data\n"
"    data = await reader.read(100)\n"
"\n"
"    # Got data, we are done: close the socket\n"
"    print(\"Received:\", data.decode())\n"
"    writer.close()\n"
"    await writer.wait_closed()\n"
"\n"
"    # Close the second socket\n"
"    wsock.close()\n"
"\n"
"asyncio.run(wait_for_data())"
msgstr ""

#: ../../library/asyncio-stream.rst:575
msgid ""
"The :ref:`register an open socket to wait for data using a protocol "
"<asyncio_example_create_connection>` example uses a low-level protocol and "
"the :meth:`loop.create_connection` method."
msgstr ""
"O exemplo de :ref:`registro de um soquete aberto para aguardar por dados "
"usando um protocolo <asyncio_example_create_connection>` utiliza um "
"protocolo de baixo nível e o método :meth:`loop.create_connection`."

#: ../../library/asyncio-stream.rst:579
msgid ""
"The :ref:`watch a file descriptor for read events "
"<asyncio_example_watch_fd>` example uses the low-level :meth:`loop."
"add_reader` method to watch a file descriptor."
msgstr ""
"O exemplo para :ref:`monitorar um descritor de arquivo para leitura de "
"eventos <asyncio_example_watch_fd>` utiliza o método de baixo nível :meth:"
"`loop.add_reader` para monitorar um descritor de arquivo."
