# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-31 11:30+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/importlib.metadata.rst:5
msgid ":mod:`!importlib.metadata` -- Accessing package metadata"
msgstr ":mod:`!importlib.metadata` -- Acessando metadados do pacote"

#: ../../library/importlib.metadata.rst:11
msgid "``importlib.metadata`` is no longer provisional."
msgstr "``importlib.metadata`` não é mais provisório."

#: ../../library/importlib.metadata.rst:14
msgid "**Source code:** :source:`Lib/importlib/metadata/__init__.py`"
msgstr "**Código-fonte:** :source:`Lib/importlib/metadata/__init__.py`"

#: ../../library/importlib.metadata.rst:16
msgid ""
"``importlib.metadata`` is a library that provides access to the metadata of "
"an installed `Distribution Package <https://packaging.python.org/en/latest/"
"glossary/#term-Distribution-Package>`_, such as its entry points or its top-"
"level names (`Import Package <https://packaging.python.org/en/latest/"
"glossary/#term-Import-Package>`_\\s, modules, if any). Built in part on "
"Python's import system, this library intends to replace similar "
"functionality in the `entry point API`_ and `metadata API`_ of "
"``pkg_resources``.  Along with :mod:`importlib.resources`, this package can "
"eliminate the need to use the older and less efficient ``pkg_resources`` "
"package."
msgstr ""
"``importlib.metadata`` é uma biblioteca que fornece acesso aos metadados de "
"um `Pacote de Distribuição <https://packaging.python.org/pt_BR/latest/"
"glossary/#term-Import-Package>`_ instalado, como seus pontos de entrada ou "
"seus nomes de nível superior (`Pacotes de Importação <https://packaging."
"python.org/pt_BR/latest/glossary/#term-Import-Package>`_, módulos, se "
"houver). Construída em parte no sistema de importação do Python, esta "
"biblioteca pretende substituir funcionalidades semelhantes na `API de ponto "
"de entrada`_ e `API de metadados`_ de ``pkg_resources``. Junto com :mod:"
"`importlib.resources`, este pacote pode eliminar a necessidade de usar o "
"pacote ``pkg_resources`` mais antigo e menos eficiente."

#: ../../library/importlib.metadata.rst:27
msgid ""
"``importlib.metadata`` operates on third-party *distribution packages* "
"installed into Python's ``site-packages`` directory via tools such as :pypi:"
"`pip`. Specifically, it works with distributions with discoverable ``dist-"
"info`` or ``egg-info`` directories, and metadata defined by the `Core "
"metadata specifications <https://packaging.python.org/en/latest/"
"specifications/core-metadata/#core-metadata>`_."
msgstr ""
"``importlib.metadata`` opera em *pacotes de distribuição* de terceiros "
"instalados no diretório ``site-packages`` do Python através de ferramentas "
"como :pypi:`pip`. Especificamente, ele funciona com distribuições com "
"diretórios ``dist-info`` ou ``egg-info`` detectáveis, e metadados definidos "
"pelas `Especificações de metadados principais <https://packaging.python.org/"
"pt_BR/latest/specifications/core-metadata/#core-metadata>`_."

#: ../../library/importlib.metadata.rst:36
msgid ""
"These are *not* necessarily equivalent to or correspond 1:1 with the top-"
"level *import package* names that can be imported inside Python code. One "
"*distribution package* can contain multiple *import packages* (and single "
"modules), and one top-level *import package* may map to multiple "
"*distribution packages* if it is a namespace package. You can use :ref:"
"`package_distributions() <package-distributions>` to get a mapping between "
"them."
msgstr ""
"Eles *não* são necessariamente equivalentes ou correspondem 1:1 aos nomes de "
"*pacotes de importação* de nível superior que podem ser importados dentro do "
"código Python. Um *pacote de distribuição* pode conter vários *pacotes de "
"importação* (e módulos únicos), e um *pacote de importação* de nível "
"superior pode mapear para vários *pacotes de distribuição* se for um pacote "
"de espaço de nomes. Você pode usar :ref:`package_distributions() <package-"
"distributions>` para obter um mapeamento entre eles."

#: ../../library/importlib.metadata.rst:47
msgid ""
"By default, distribution metadata can live on the file system or in zip "
"archives on :data:`sys.path`.  Through an extension mechanism, the metadata "
"can live almost anywhere."
msgstr ""
"Por padrão, os metadados de distribuição podem residir no sistema de "
"arquivos ou em arquivos zip em :data:`sys.path`. Através de um mecanismo de "
"extensão, os metadados podem residir em praticamente qualquer lugar."

#: ../../library/importlib.metadata.rst:55
msgid "https://importlib-metadata.readthedocs.io/"
msgstr "https://importlib-metadata.readthedocs.io/"

#: ../../library/importlib.metadata.rst:56
msgid ""
"The documentation for ``importlib_metadata``, which supplies a backport of "
"``importlib.metadata``. This includes an `API reference <https://importlib-"
"metadata.readthedocs.io/en/latest/api.html>`__ for this module's classes and "
"functions, as well as a `migration guide <https://importlib-metadata."
"readthedocs.io/en/latest/migration.html>`__ for existing users of "
"``pkg_resources``."
msgstr ""
"A documentação para ``importlib_metadata``, que fornece um backport de "
"``importlib.metadata``. Isso inclui uma `referência de API <https://"
"importlib-metadata.readthedocs.io/en/latest/api.html>`__ para as classes e "
"funções deste módulo, bem como um `guia de migração <https://importlib-"
"metadata.readthedocs.io/en/latest/migration.html>`__ para usuários "
"existentes de ``pkg_resources``."

#: ../../library/importlib.metadata.rst:67
msgid "Overview"
msgstr "Visão Geral"

#: ../../library/importlib.metadata.rst:69
msgid ""
"Let's say you wanted to get the version string for a `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ you've installed using ``pip``.  We start by creating a virtual "
"environment and installing something into it:"
msgstr ""
"Digamos que você queira obter a string da versão de um `Pacote de "
"Distribuição <https://packaging.python.org/pt_BR/latest/glossary/#term-"
"Distribution-Package>`_ que você instalou usando ``pip``. Começamos criando "
"um ambiente virtual e instalando algo nele:"

#: ../../library/importlib.metadata.rst:74
msgid ""
"$ python -m venv example\n"
"$ source example/bin/activate\n"
"(example) $ python -m pip install wheel"
msgstr ""

#: ../../library/importlib.metadata.rst:80
msgid "You can get the version string for ``wheel`` by running the following:"
msgstr ""
"Você pode obter a string de versão para ``wheel`` executando o seguinte:"

#: ../../library/importlib.metadata.rst:82
msgid ""
"(example) $ python\n"
">>> from importlib.metadata import version  \n"
">>> version('wheel')  \n"
"'0.32.3'"
msgstr ""

#: ../../library/importlib.metadata.rst:89
msgid ""
"You can also get a collection of entry points selectable by properties of "
"the EntryPoint (typically 'group' or 'name'), such as ``console_scripts``, "
"``distutils.commands`` and others.  Each group contains a collection of :ref:"
"`EntryPoint <entry-points>` objects."
msgstr ""
"Você também pode obter uma coleção de pontos de entrada selecionáveis pelas "
"propriedades do EntryPoint (normalmente 'group' ou 'name'), como "
"``console_scripts``, ``distutils.commands`` e outros. Cada grupo contém uma "
"coleção de objetos :ref:`EntryPoint <entry-points>`."

#: ../../library/importlib.metadata.rst:93
msgid "You can get the :ref:`metadata for a distribution <metadata>`::"
msgstr "Você pode obter os :ref:`metadados para uma distribuição <metadata>`::"

#: ../../library/importlib.metadata.rst:95
msgid ""
">>> list(metadata('wheel'))  \n"
"['Metadata-Version', 'Name', 'Version', 'Summary', 'Home-page', 'Author', "
"'Author-email', 'Maintainer', 'Maintainer-email', 'License', 'Project-URL', "
"'Project-URL', 'Project-URL', 'Keywords', 'Platform', 'Classifier', "
"'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', "
"'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', "
"'Classifier', 'Requires-Python', 'Provides-Extra', 'Requires-Dist', "
"'Requires-Dist']"
msgstr ""

#: ../../library/importlib.metadata.rst:98
msgid ""
"You can also get a :ref:`distribution's version number <version>`, list its :"
"ref:`constituent files <files>`, and get a list of the distribution's :ref:"
"`requirements`."
msgstr ""
"Você também pode obter uma :ref:`número da versão da distribuição "
"<version>`, listar seus :ref:`arquivos constituintes <files>` e obter uma "
"lista dos :ref:`requirements` da distribuição."

#: ../../library/importlib.metadata.rst:104
msgid "Functional API"
msgstr "API funcional"

#: ../../library/importlib.metadata.rst:106
msgid "This package provides the following functionality via its public API."
msgstr ""
"Este pacote fornece a seguinte funcionalidade por meio de sua API pública."

#: ../../library/importlib.metadata.rst:112
msgid "Entry points"
msgstr "Pontos de entrada"

#: ../../library/importlib.metadata.rst:114
msgid ""
"The ``entry_points()`` function returns a collection of entry points. Entry "
"points are represented by ``EntryPoint`` instances; each ``EntryPoint`` has "
"a ``.name``, ``.group``, and ``.value`` attributes and a ``.load()`` method "
"to resolve the value.  There are also ``.module``, ``.attr``, and ``."
"extras`` attributes for getting the components of the ``.value`` attribute."
msgstr ""
"A função ``entry_points()`` retorna uma coleção de pontos de entrada. Os "
"pontos de entrada são representados por instâncias ``EntryPoint``; cada "
"``EntryPoint`` tem atributos ``.name``, ``.group`` e ``.value`` e um método "
"``.load()`` para resolver o valor. Existem também atributos ``.module``, ``."
"attr`` e ``.extras`` para obter os componentes do atributo ``.value``."

#: ../../library/importlib.metadata.rst:121
msgid "Query all entry points::"
msgstr "Consultar todos os pontos de entrada::"

#: ../../library/importlib.metadata.rst:123
msgid ">>> eps = entry_points()  "
msgstr ""

#: ../../library/importlib.metadata.rst:125
msgid ""
"The ``entry_points()`` function returns an ``EntryPoints`` object, a "
"collection of all ``EntryPoint`` objects with ``names`` and ``groups`` "
"attributes for convenience::"
msgstr ""
"A função ``entry_points()`` retorna um objeto ``EntryPoints``, uma coleção "
"de todos os objetos ``EntryPoint`` com atributos ``names`` e ``groups`` por "
"conveniência::"

#: ../../library/importlib.metadata.rst:129
msgid ""
">>> sorted(eps.groups)  \n"
"['console_scripts', 'distutils.commands', 'distutils.setup_keywords', "
"'egg_info.writers', 'setuptools.installation']"
msgstr ""

#: ../../library/importlib.metadata.rst:132
msgid ""
"``EntryPoints`` has a ``select`` method to select entry points matching "
"specific properties. Select entry points in the ``console_scripts`` group::"
msgstr ""
"``EntryPoints`` possui um método ``select`` para selecionar pontos de "
"entrada que correspondam a propriedades específicas. Selecione pontos de "
"entrada no grupo ``console_scripts``::"

#: ../../library/importlib.metadata.rst:136
msgid ">>> scripts = eps.select(group='console_scripts')  "
msgstr ""

#: ../../library/importlib.metadata.rst:138
msgid ""
"Equivalently, since ``entry_points`` passes keyword arguments through to "
"select::"
msgstr ""
"Equivalentemente, já que ``entry_points`` passa argumento nomeado para "
"seleção::"

#: ../../library/importlib.metadata.rst:141
msgid ">>> scripts = entry_points(group='console_scripts')  "
msgstr ""

#: ../../library/importlib.metadata.rst:143
msgid ""
"Pick out a specific script named \"wheel\" (found in the wheel project)::"
msgstr ""
"Escolha um script específico chamado \"wheel\" (encontrado no projeto "
"wheel)::"

#: ../../library/importlib.metadata.rst:145
msgid ""
">>> 'wheel' in scripts.names  \n"
"True\n"
">>> wheel = scripts['wheel']  "
msgstr ""

#: ../../library/importlib.metadata.rst:149
msgid "Equivalently, query for that entry point during selection::"
msgstr ""
"De forma equivalente, consulte esse ponto de entrada durante a seleção::"

#: ../../library/importlib.metadata.rst:151
msgid ""
">>> (wheel,) = entry_points(group='console_scripts', name='wheel')  \n"
">>> (wheel,) = entry_points().select(group='console_scripts', name='wheel')  "
msgstr ""

#: ../../library/importlib.metadata.rst:154
msgid "Inspect the resolved entry point::"
msgstr "Inspecione o ponto de entrada resolvido::"

#: ../../library/importlib.metadata.rst:156
msgid ""
">>> wheel  \n"
"EntryPoint(name='wheel', value='wheel.cli:main', group='console_scripts')\n"
">>> wheel.module  \n"
"'wheel.cli'\n"
">>> wheel.attr  \n"
"'main'\n"
">>> wheel.extras  \n"
"[]\n"
">>> main = wheel.load()  \n"
">>> main  \n"
"<function main at 0x103528488>"
msgstr ""

#: ../../library/importlib.metadata.rst:168
msgid ""
"The ``group`` and ``name`` are arbitrary values defined by the package "
"author and usually a client will wish to resolve all entry points for a "
"particular group.  Read `the setuptools docs <https://setuptools.pypa.io/en/"
"latest/userguide/entry_point.html>`_ for more information on entry points, "
"their definition, and usage."
msgstr ""
"O ``group`` e ``name`` são valores arbitrários definidos pelo autor do "
"pacote e normalmente um cliente desejará resolver todos os pontos de entrada "
"para um grupo específico. Leia `a documentação do setuptools <https://"
"setuptools.pypa.io/en/latest/userguide/entry_point.html>`_ para obter mais "
"informações sobre pontos de entrada, sua definição e uso."

#: ../../library/importlib.metadata.rst:174
msgid "*Compatibility Note*"
msgstr "*Notas de compatibilidade*"

#: ../../library/importlib.metadata.rst:176
msgid ""
"The \"selectable\" entry points were introduced in ``importlib_metadata`` "
"3.6 and Python 3.10. Prior to those changes, ``entry_points`` accepted no "
"parameters and always returned a dictionary of entry points, keyed by group. "
"With ``importlib_metadata`` 5.0 and Python 3.12, ``entry_points`` always "
"returns an ``EntryPoints`` object. See :pypi:`backports."
"entry_points_selectable` for compatibility options."
msgstr ""
"Os pontos de entrada \"selecionáveis\" foram introduzidos em "
"``importlib_metadata`` 3.6 e Python 3.10. Antes dessas mudanças, "
"``entry_points`` não aceitava parâmetros e sempre retornava um dicionário de "
"pontos de entrada, chaveado por grupo. Com ``importlib_metadata`` 5.0 e "
"Python 3.12, ``entry_points`` sempre retorna um objeto ``EntryPoints``. "
"Veja :pypi:`backports.entry_points_selectable` para opções de "
"compatibilidade."

#: ../../library/importlib.metadata.rst:188
msgid "Distribution metadata"
msgstr "Metadados de distribuição"

#: ../../library/importlib.metadata.rst:190
msgid ""
"Every `Distribution Package <https://packaging.python.org/en/latest/glossary/"
"#term-Distribution-Package>`_ includes some metadata, which you can extract "
"using the ``metadata()`` function::"
msgstr ""
"Cada `Pacote de Distribuição <https://packaging.python.org/pt_BR/latest/"
"glossary/#term-Distribution-Package>`_ inclui alguns metadados, que você "
"pode extrair usando a função ``metadata()``::"

#: ../../library/importlib.metadata.rst:194
msgid ">>> wheel_metadata = metadata('wheel')  "
msgstr ""

#: ../../library/importlib.metadata.rst:196
msgid ""
"The keys of the returned data structure, a ``PackageMetadata``, name the "
"metadata keywords, and the values are returned unparsed from the "
"distribution metadata::"
msgstr ""
"As chaves da estrutura de dados retornada, um ``PackageMetadata``, nomeiam "
"as palavras reservadas dos metadados, e os valores são retornados sem "
"análise dos metadados de distribuição::"

#: ../../library/importlib.metadata.rst:200
msgid ""
">>> wheel_metadata['Requires-Python']  \n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'"
msgstr ""

#: ../../library/importlib.metadata.rst:203
msgid ""
"``PackageMetadata`` also presents a ``json`` attribute that returns all the "
"metadata in a JSON-compatible form per :PEP:`566`::"
msgstr ""
"``PackageMetadata`` também apresenta um atributo ``json`` que retorna todos "
"os metadados em um formato compatível com JSON pela :PEP:`566`::"

#: ../../library/importlib.metadata.rst:206
msgid ""
">>> wheel_metadata.json['requires_python']\n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'"
msgstr ""

#: ../../library/importlib.metadata.rst:211
msgid ""
"The actual type of the object returned by ``metadata()`` is an "
"implementation detail and should be accessed only through the interface "
"described by the `PackageMetadata protocol <https://importlib-metadata."
"readthedocs.io/en/latest/api.html#importlib_metadata.PackageMetadata>`_."
msgstr ""
"O tipo real do objeto retornado por ``metadata()`` é um detalhe de "
"implementação e deve ser acessado somente através da interface descrita pelo "
"`protocolo PackageMetadata <https://importlib-metadata.readthedocs.io/en/"
"latest/api.html#importlib_metadata.PackageMetadata>`_."

#: ../../library/importlib.metadata.rst:216
msgid ""
"The ``Description`` is now included in the metadata when presented through "
"the payload. Line continuation characters have been removed."
msgstr ""
"A ``Description`` agora é incluída nos metadados quando apresentada através "
"do payload. Os caracteres de continuação de linha foram removidos."

#: ../../library/importlib.metadata.rst:220
msgid "The ``json`` attribute was added."
msgstr "O atributo ``json`` foi adicionado."

#: ../../library/importlib.metadata.rst:226
msgid "Distribution versions"
msgstr "Versões de distribuição"

#: ../../library/importlib.metadata.rst:228
msgid ""
"The ``version()`` function is the quickest way to get a `Distribution "
"Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_'s version number, as a string::"
msgstr ""
"A função ``version()`` é a maneira mais rápida de obter o número de versão "
"de um `Pacote de Distribuição <https://packaging.python.org/pt_BR/latest/"
"glossary/#term-Distribution-Package>`_, como uma string::"

#: ../../library/importlib.metadata.rst:232
msgid ""
">>> version('wheel')  \n"
"'0.32.3'"
msgstr ""

#: ../../library/importlib.metadata.rst:239
msgid "Distribution files"
msgstr "Arquivos de distribuição"

#: ../../library/importlib.metadata.rst:241
msgid ""
"You can also get the full set of files contained within a distribution.  The "
"``files()`` function takes a `Distribution Package <https://packaging.python."
"org/en/latest/glossary/#term-Distribution-Package>`_ name and returns all of "
"the files installed by this distribution.  Each file object returned is a "
"``PackagePath``, a :class:`pathlib.PurePath` derived object with additional "
"``dist``, ``size``, and ``hash`` properties as indicated by the metadata.  "
"For example::"
msgstr ""
"Você também pode obter o conjunto completo de arquivos contidos em uma "
"distribuição. A função ``files()`` pega um nome `Pacote de Distribuição "
"<https://packaging.python.org/pt_BR/latest/glossary/#term-Distribution-"
"Package>`_ e retorna todos os arquivos instalados por este distribuição. "
"Cada objeto de arquivo retornado é um ``PackagePath``, um objeto derivado "
"de :class:`pathlib.PurePath` com propriedades adicionais ``dist``, ``size`` "
"e ``hash`` conforme indicado pelos metadados. Por exemplo::"

#: ../../library/importlib.metadata.rst:248
msgid ""
">>> util = [p for p in files('wheel') if 'util.py' in str(p)][0]  \n"
">>> util  \n"
"PackagePath('wheel/util.py')\n"
">>> util.size  \n"
"859\n"
">>> util.dist  \n"
"<importlib.metadata._hooks.PathDistribution object at 0x101e0cef0>\n"
">>> util.hash  \n"
"<FileHash mode: sha256 value: bYkw5oMccfazVCoYQwKkkemoVyMAFoR34mmKBx8R1NI>"
msgstr ""

#: ../../library/importlib.metadata.rst:258
msgid "Once you have the file, you can also read its contents::"
msgstr "Uma vez que tenha o arquivo, você também pode ler seu conteúdo::"

#: ../../library/importlib.metadata.rst:260
msgid ""
">>> print(util.read_text())  \n"
"import base64\n"
"import sys\n"
"...\n"
"def as_bytes(s):\n"
"    if isinstance(s, text_type):\n"
"        return s.encode('utf-8')\n"
"    return s"
msgstr ""

#: ../../library/importlib.metadata.rst:269
msgid ""
"You can also use the ``locate`` method to get a the absolute path to the "
"file::"
msgstr ""
"Você também pode usar o método ``locate`` para obter o caminho absoluto para "
"o arquivo::"

#: ../../library/importlib.metadata.rst:272
msgid ""
">>> util.locate()  \n"
"PosixPath('/home/gustav/example/lib/site-packages/wheel/util.py')"
msgstr ""

#: ../../library/importlib.metadata.rst:275
msgid ""
"In the case where the metadata file listing files (RECORD or SOURCES.txt) is "
"missing, ``files()`` will return ``None``. The caller may wish to wrap calls "
"to ``files()`` in `always_iterable <https://more-itertools.readthedocs.io/en/"
"stable/api.html#more_itertools.always_iterable>`_ or otherwise guard against "
"this condition if the target distribution is not known to have the metadata "
"present."
msgstr ""
"No caso em que o arquivo de metadados que lista os arquivos (RECORD ou "
"SOURCES.txt) estiver faltando, ``files()`` retornará ``None``. O chamador "
"pode querer agrupar chamadas para ``files()`` em `always_iterable <https://"
"more-itertools.readthedocs.io/en/stable/api.html#more_itertools."
"always_iterable>`_ ou de outra forma se proteger contra isso condição se a "
"distribuição de destino não for conhecida por ter os metadados presentes."

#: ../../library/importlib.metadata.rst:286
msgid "Distribution requirements"
msgstr "Requisitos de distribuição"

#: ../../library/importlib.metadata.rst:288
msgid ""
"To get the full set of requirements for a `Distribution Package <https://"
"packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_, use "
"the ``requires()`` function::"
msgstr ""
"Para obter o conjunto completo de requisitos para um `Pacote de Distribuição "
"<https://packaging.python.org/pt_BR/latest/glossary/#term-Distribution-"
"Package>`_, use a função ``requires()``::"

#: ../../library/importlib.metadata.rst:292
msgid ""
">>> requires('wheel')  \n"
"[\"pytest (>=3.0.0) ; extra == 'test'\", \"pytest-cov ; extra == 'test'\"]"
msgstr ""

#: ../../library/importlib.metadata.rst:300
msgid "Mapping import to distribution packages"
msgstr "Mapeando importação pra pacotes de distribuição"

#: ../../library/importlib.metadata.rst:302
msgid ""
"A convenience method to resolve the `Distribution Package <https://packaging."
"python.org/en/latest/glossary/#term-Distribution-Package>`_ name (or names, "
"in the case of a namespace package) that provide each importable top-level "
"Python module or `Import Package <https://packaging.python.org/en/latest/"
"glossary/#term-Import-Package>`_::"
msgstr ""
"Um método conveniente para resolver o nome do `Pacote de Distribuição "
"<https://packaging.python.org/pt_BR/latest/glossary/#term-Distribution-"
"Package>`_ (ou nomes, no caso de um pacote de espaço de nomes) que fornece "
"cada módulo Python de nível superior importável ou `Pacote de Importação "
"<https://packaging.python.org/pt_BR/latest/glossary/#term-Import-Package>`_::"

#: ../../library/importlib.metadata.rst:307
msgid ""
">>> packages_distributions()\n"
"{'importlib_metadata': ['importlib-metadata'], 'yaml': ['PyYAML'], 'jaraco': "
"['jaraco.classes', 'jaraco.functools'], ...}"
msgstr ""

#: ../../library/importlib.metadata.rst:310
msgid ""
"Some editable installs, `do not supply top-level names <https://github.com/"
"pypa/packaging-problems/issues/609>`_, and thus this function is not "
"reliable with such installs."
msgstr ""
"Algumas instalações editáveis `não fornecem nomes de nível superior <https://"
"github.com/pypa/packaging-problems/issues/609>`_ e, portanto, esta função "
"não é confiável com tais instalações."

#: ../../library/importlib.metadata.rst:319
msgid "Distributions"
msgstr "Distribuições"

#: ../../library/importlib.metadata.rst:321
msgid ""
"While the above API is the most common and convenient usage, you can get all "
"of that information from the ``Distribution`` class.  A ``Distribution`` is "
"an abstract object that represents the metadata for a Python `Distribution "
"Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_.  You can get the ``Distribution`` instance::"
msgstr ""
"Embora a API acima seja o uso mais comum e conveniente, você pode obter "
"todas essas informações na classe ``Distribution``. Uma ``Distribution`` é "
"um objeto abstrato que representa os metadados de um `Pacote de Distribuição "
"<https://packaging.python.org/pt_BR/latest/glossary/#term-Distribution-"
"Package>`_ do Python. Você pode obter a instância ``Distribution``::"

#: ../../library/importlib.metadata.rst:327
msgid ""
">>> from importlib.metadata import distribution  \n"
">>> dist = distribution('wheel')  "
msgstr ""

#: ../../library/importlib.metadata.rst:330
msgid ""
"Thus, an alternative way to get the version number is through the "
"``Distribution`` instance::"
msgstr ""
"Assim, uma forma alternativa de obter o número da versão é através da "
"instância ``Distribution``::"

#: ../../library/importlib.metadata.rst:333
msgid ""
">>> dist.version  \n"
"'0.32.3'"
msgstr ""

#: ../../library/importlib.metadata.rst:336
msgid ""
"There are all kinds of additional metadata available on the ``Distribution`` "
"instance::"
msgstr ""
"Existem todos os tipos de metadados adicionais disponíveis na instância "
"``Distribution``::"

#: ../../library/importlib.metadata.rst:339
msgid ""
">>> dist.metadata['Requires-Python']  \n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'\n"
">>> dist.metadata['License']  \n"
"'MIT'"
msgstr ""

#: ../../library/importlib.metadata.rst:344
msgid ""
"The full set of available metadata is not described here. See the `Core "
"metadata specifications <https://packaging.python.org/en/latest/"
"specifications/core-metadata/#core-metadata>`_ for additional details."
msgstr ""
"O conjunto completo de metadados disponíveis não é descrito aqui. Consulte "
"as `Especificações de metadados principais <https://packaging.python.org/"
"pt_BR/latest/specifications/core-metadata/#core-metadata>`_ para obter "
"detalhes adicionais."

#: ../../library/importlib.metadata.rst:349
msgid "Distribution Discovery"
msgstr "Descoberta de distribuição"

#: ../../library/importlib.metadata.rst:351
msgid ""
"By default, this package provides built-in support for discovery of metadata "
"for file system and zip file `Distribution Package <https://packaging.python."
"org/en/latest/glossary/#term-Distribution-Package>`_\\s. This metadata "
"finder search defaults to ``sys.path``, but varies slightly in how it "
"interprets those values from how other import machinery does. In particular:"
msgstr ""
"Por padrão, este pacote fornece suporte embutido para descoberta de "
"metadados para sistema de arquivos e arquivo zip `Pacotes de Distribuição "
"<https://packaging.python.org/pt_BR/latest/glossary/#term-Distribution-"
"Package>`_. Esta pesquisa do localizador de metadados tem como padrão ``sys."
"path``, mas varia um pouco na maneira como ela interpreta esses valores em "
"relação a outras mecanismo de importação. Em particular:"

#: ../../library/importlib.metadata.rst:355
msgid ""
"``importlib.metadata`` does not honor :class:`bytes` objects on ``sys.path``."
msgstr ""
"``importlib.metadata`` não honra objetos :class:`bytes` em ``sys.path``."

#: ../../library/importlib.metadata.rst:356
msgid ""
"``importlib.metadata`` will incidentally honor :py:class:`pathlib.Path` "
"objects on ``sys.path`` even though such values will be ignored for imports."
msgstr ""
"``importlib.metadata`` irá incidentalmente honrar objetos :py:class:`pathlib."
"Path` em ``sys.path`` mesmo que tais valores sejam ignorados para "
"importações."

#: ../../library/importlib.metadata.rst:360
msgid "Extending the search algorithm"
msgstr "Estendendo o algoritmo de pesquisa"

#: ../../library/importlib.metadata.rst:362
msgid ""
"Because `Distribution Package <https://packaging.python.org/en/latest/"
"glossary/#term-Distribution-Package>`_ metadata is not available through :"
"data:`sys.path` searches, or package loaders directly, the metadata for a "
"distribution is found through import system :ref:`finders <finders-and-"
"loaders>`.  To find a distribution package's metadata, ``importlib."
"metadata`` queries the list of :term:`meta path finders <meta path finder>` "
"on :data:`sys.meta_path`."
msgstr ""
"Como os metadados de `Pacote de Distribuição <https://packaging.python.org/"
"pt_BR/latest/glossary/#term-Distribution-Package>`_ não estão disponíveis "
"por meio de pesquisas a :data:`sys.path` ou carregadores de pacotes "
"diretamente, os metadados de uma distribuição são encontrados através de :"
"ref:`localizadores <finders-and-loaders>` do sistema de importação. Para "
"encontrar os metadados de um pacote de distribuição, ``importlib.metadata`` "
"consulta a lista de :term:`localizadores de metacaminho <meta path finder>` "
"em :data:`sys.meta_path`."

#: ../../library/importlib.metadata.rst:370
msgid ""
"By default ``importlib.metadata`` installs a finder for distribution "
"packages found on the file system. This finder doesn't actually find any "
"*distributions*, but it can find their metadata."
msgstr ""
"Por padrão ``importlib.metadata`` instala um localizador para pacotes de "
"distribuição encontrados no sistema de arquivos. Na verdade, esse "
"localizador não encontra nenhuma *distribuição*, mas pode encontrar seus "
"metadados."

#: ../../library/importlib.metadata.rst:375
msgid ""
"The abstract class :py:class:`importlib.abc.MetaPathFinder` defines the "
"interface expected of finders by Python's import system. ``importlib."
"metadata`` extends this protocol by looking for an optional "
"``find_distributions`` callable on the finders from :data:`sys.meta_path` "
"and presents this extended interface as the ``DistributionFinder`` abstract "
"base class, which defines this abstract method::"
msgstr ""
"A classe abstrata :py:class:`importlib.abc.MetaPathFinder` define a "
"interface esperada dos localizadores pelo sistema de importação do Python. "
"``importlib.metadata`` estende este protocolo procurando por um chamável "
"``find_distributions`` opcional nos localizadores de :data:`sys.meta_path` e "
"apresenta esta interface estendida como a classe base abstrata "
"``DistributionFinder``, que define este método abstrato::"

#: ../../library/importlib.metadata.rst:383
msgid ""
"@abc.abstractmethod\n"
"def find_distributions(context=DistributionFinder.Context()):\n"
"    \"\"\"Return an iterable of all Distribution instances capable of\n"
"    loading the metadata for packages for the indicated ``context``.\n"
"    \"\"\""
msgstr ""

#: ../../library/importlib.metadata.rst:389
msgid ""
"The ``DistributionFinder.Context`` object provides ``.path`` and ``.name`` "
"properties indicating the path to search and name to match and may supply "
"other relevant context."
msgstr ""
"O objeto ``DistributionFinder.Context`` fornece propriedades ``.path`` e ``."
"name`` indicando o caminho para pesquisar e o nome a ser correspondido e "
"pode fornecer outro contexto relevante."

#: ../../library/importlib.metadata.rst:393
msgid ""
"What this means in practice is that to support finding distribution package "
"metadata in locations other than the file system, subclass ``Distribution`` "
"and implement the abstract methods. Then from a custom finder, return "
"instances of this derived ``Distribution`` in the ``find_distributions()`` "
"method."
msgstr ""
"O que isso significa na prática é que para prover suporte à localização de "
"metadados de pacotes de distribuição em outros locais fora do sistema de "
"arquivos, crie uma subclasse ``Distribution`` e implemente os métodos "
"abstratos. Então, a partir de um localizador personalizado, retorne "
"instâncias deste derivado de ``Distribution`` no método "
"``find_distributions()``."
