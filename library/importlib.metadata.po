# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2021
# i17obot <i17obot@rougeth.com>, 2021
# And Past <andrepgs@gmail.com>, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-08 02:53-0300\n"
"PO-Revision-Date: 2021-06-28 01:08+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/importlib.metadata.rst:5
msgid ":mod:`!importlib.metadata` -- Accessing package metadata"
msgstr ":mod:`!importlib.metadata` -- Acessando metadados do pacote"

#: ../../library/importlib.metadata.rst:11
msgid "``importlib.metadata`` is no longer provisional."
msgstr "``importlib.metadata`` não é mais provisório."

#: ../../library/importlib.metadata.rst:14
msgid "**Source code:** :source:`Lib/importlib/metadata/__init__.py`"
msgstr "**Código-fonte:** :source:`Lib/importlib/metadata/__init__.py`"

#: ../../library/importlib.metadata.rst:16
msgid ""
"``importlib.metadata`` is a library that provides access to the metadata of "
"an installed `Distribution Package <https://packaging.python.org/en/latest/"
"glossary/#term-Distribution-Package>`_, such as its entry points or its top-"
"level names (`Import Package <https://packaging.python.org/en/latest/"
"glossary/#term-Import-Package>`_\\s, modules, if any). Built in part on "
"Python's import system, this library intends to replace similar "
"functionality in the `entry point API`_ and `metadata API`_ of "
"``pkg_resources``. Along with :mod:`importlib.resources`, this package can "
"eliminate the need to use the older and less efficient ``pkg_resources`` "
"package."
msgstr ""

#: ../../library/importlib.metadata.rst:27
msgid ""
"``importlib.metadata`` operates on third-party *distribution packages* "
"installed into Python's ``site-packages`` directory via tools such as :pypi:"
"`pip`. Specifically, it works with distributions with discoverable ``dist-"
"info`` or ``egg-info`` directories, and metadata defined by the `Core "
"metadata specifications <https://packaging.python.org/en/latest/"
"specifications/core-metadata/#core-metadata>`_."
msgstr ""
"``importlib.metadata`` opera em *pacotes de distribuição* de terceiros "
"instalados no diretório ``site-packages`` do Python através de ferramentas "
"como :pypi:`pip`. Especificamente, ele funciona com distribuições com "
"diretórios ``dist-info`` ou ``egg-info`` detectáveis, e metadados definidos "
"pelas `Especificações de metadados principais <https://packaging.python.org/"
"pt_BR/latest/specifications/core-metadata/#core-metadata>`_."

#: ../../library/importlib.metadata.rst:36
msgid ""
"These are *not* necessarily equivalent to or correspond 1:1 with the top-"
"level *import package* names that can be imported inside Python code. One "
"*distribution package* can contain multiple *import packages* (and single "
"modules), and one top-level *import package* may map to multiple "
"*distribution packages* if it is a namespace package. You can use :ref:"
"`packages_distributions() <package-distributions>` to get a mapping between "
"them."
msgstr ""
"Eles *não* são necessariamente equivalentes ou correspondem 1:1 aos nomes de "
"*pacotes de importação* de nível superior que podem ser importados dentro do "
"código Python. Um *pacote de distribuição* pode conter vários *pacotes de "
"importação* (e módulos únicos), e um *pacote de importação* de nível "
"superior pode ser mapeado para vários *pacotes de distribuição* se for um "
"pacote de espaço de nomes. Você pode usar :ref:`packages_distributions() "
"<package-distributions>` para obter um mapeamento entre eles."

#: ../../library/importlib.metadata.rst:47
msgid ""
"By default, distribution metadata can live on the file system or in zip "
"archives on :data:`sys.path`. Through an extension mechanism, the metadata "
"can live almost anywhere."
msgstr ""

#: ../../library/importlib.metadata.rst:55
msgid "https://importlib-metadata.readthedocs.io/"
msgstr "https://importlib-metadata.readthedocs.io/"

#: ../../library/importlib.metadata.rst:56
msgid ""
"The documentation for ``importlib_metadata``, which supplies a backport of "
"``importlib.metadata``. This includes an `API reference <https://importlib-"
"metadata.readthedocs.io/en/latest/api.html>`__ for this module's classes and "
"functions, as well as a `migration guide <https://importlib-metadata."
"readthedocs.io/en/latest/migration.html>`__ for existing users of "
"``pkg_resources``."
msgstr ""
"A documentação para ``importlib_metadata``, que fornece um backport de "
"``importlib.metadata``. Isso inclui uma `referência de API <https://"
"importlib-metadata.readthedocs.io/en/latest/api.html>`__ para as classes e "
"funções deste módulo, bem como um `guia de migração <https://importlib-"
"metadata.readthedocs.io/en/latest/migration.html>`__ para usuários "
"existentes de ``pkg_resources``."

#: ../../library/importlib.metadata.rst:67
msgid "Overview"
msgstr "Visão Geral"

#: ../../library/importlib.metadata.rst:69
msgid ""
"Let's say you wanted to get the version string for a `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ you've installed using ``pip``. We start by creating a virtual "
"environment and installing something into it:"
msgstr ""

#: ../../library/importlib.metadata.rst:74
msgid ""
"$ python -m venv example\n"
"$ source example/bin/activate\n"
"(example) $ python -m pip install wheel"
msgstr ""
"$ python -m venv exemplo\n"
"$ source exemplo/bin/activate\n"
"(exemplo) $ python -m pip install wheel"

#: ../../library/importlib.metadata.rst:80
msgid "You can get the version string for ``wheel`` by running the following:"
msgstr ""
"Você pode obter a string de versão para ``wheel`` executando o seguinte:"

#: ../../library/importlib.metadata.rst:82
msgid ""
"(example) $ python\n"
">>> from importlib.metadata import version\n"
">>> version('wheel')\n"
"'0.32.3'"
msgstr ""
"(example) $ python\n"
">>> from importlib.metadata import version\n"
">>> version('wheel')\n"
"'0.32.3'"

#: ../../library/importlib.metadata.rst:89
msgid ""
"You can also get a collection of entry points selectable by properties of "
"the EntryPoint (typically 'group' or 'name'), such as ``console_scripts``, "
"``distutils.commands`` and others. Each group contains a collection of :ref:"
"`EntryPoint <entry-points>` objects."
msgstr ""

#: ../../library/importlib.metadata.rst:93
msgid "You can get the :ref:`metadata for a distribution <metadata>`::"
msgstr "Você pode obter os :ref:`metadados para uma distribuição <metadata>`::"

#: ../../library/importlib.metadata.rst:95
msgid ""
">>> list(metadata('wheel'))\n"
"['Metadata-Version', 'Name', 'Version', 'Summary', 'Home-page', 'Author', "
"'Author-email', 'Maintainer', 'Maintainer-email', 'License', 'Project-URL', "
"'Project-URL', 'Project-URL', 'Keywords', 'Platform', 'Classifier', "
"'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', "
"'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', "
"'Classifier', 'Requires-Python', 'Provides-Extra', 'Requires-Dist', "
"'Requires-Dist']"
msgstr ""
">>> list(metadata('wheel'))\n"
"['Metadata-Version', 'Name', 'Version', 'Summary', 'Home-page', 'Author', "
"'Author-email', 'Maintainer', 'Maintainer-email', 'License', 'Project-URL', "
"'Project-URL', 'Project-URL', 'Keywords', 'Platform', 'Classifier', "
"'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', "
"'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', "
"'Classifier', 'Requires-Python', 'Provides-Extra', 'Requires-Dist', "
"'Requires-Dist']"

#: ../../library/importlib.metadata.rst:98
msgid ""
"You can also get a :ref:`distribution's version number <version>`, list its :"
"ref:`constituent files <files>`, and get a list of the distribution's :ref:"
"`requirements`."
msgstr ""
"Você também pode obter uma :ref:`número da versão da distribuição "
"<version>`, listar seus :ref:`arquivos constituintes <files>` e obter uma "
"lista dos :ref:`requirements` da distribuição."

#: ../../library/importlib.metadata.rst:105
msgid ""
"Subclass of :class:`ModuleNotFoundError` raised by several functions in this "
"module when queried for a distribution package which is not installed in the "
"current Python environment."
msgstr ""
"Subclasse de :class:`ModuleNotFoundError` levantada por diversas funções "
"neste módulo quando consultada sobre um pacote de distribuição que não está "
"instalado no ambiente Python atual."

#: ../../library/importlib.metadata.rst:111
msgid "Functional API"
msgstr "API funcional"

#: ../../library/importlib.metadata.rst:113
msgid "This package provides the following functionality via its public API."
msgstr ""
"Este pacote fornece a seguinte funcionalidade por meio de sua API pública."

#: ../../library/importlib.metadata.rst:119
msgid "Entry points"
msgstr "Pontos de entrada"

#: ../../library/importlib.metadata.rst:123
msgid ""
"Returns a :class:`EntryPoints` instance describing entry points for the "
"current environment. Any given keyword parameters are passed to the :meth:`!"
"select` method for comparison to the attributes of the individual entry "
"point definitions."
msgstr ""
"Retorna uma instância de :class:`EntryPoints` descrevendo pontos de entrada "
"para o ambiente atual. Quaisquer parâmetros nomeados fornecidos são passados "
"para o método :meth:`!select` para comparação com os atributos das "
"definições de pontos de entrada individuais."

#: ../../library/importlib.metadata.rst:128
msgid ""
"Note: it is not currently possible to query for entry points based on their :"
"attr:`!EntryPoint.dist` attribute (as different :class:`!Distribution` "
"instances do not currently compare equal, even if they have the same "
"attributes)"
msgstr ""
"Observação: atualmente não é possível consultar pontos de entrada com base "
"no atributo :attr:`!EntryPoint.dist` (já que instâncias diferentes de :class:"
"`!Distribution` não são comparadas como iguais, mesmo que tenham os mesmos "
"atributos)"

#: ../../library/importlib.metadata.rst:134
msgid "Details of a collection of installed entry points."
msgstr "Detalhes de uma coleção de pontos de entrada instalados."

#: ../../library/importlib.metadata.rst:136
msgid ""
"Also provides a ``.groups`` attribute that reports all identified entry "
"point groups, and a ``.names`` attribute that reports all identified entry "
"point names."
msgstr ""
"Também fornece um atributo ``.groups`` que relata todos os grupos de pontos "
"de entrada identificados e um atributo ``.names`` que relata todos os nomes "
"de pontos de entrada identificados."

#: ../../library/importlib.metadata.rst:142
msgid "Details of an installed entry point."
msgstr "Detalhes de um ponto de entrada instalado."

#: ../../library/importlib.metadata.rst:144
msgid ""
"Each :class:`!EntryPoint` instance has ``.name``, ``.group``, and ``.value`` "
"attributes and a ``.load()`` method to resolve the value. There are also ``."
"module``, ``.attr``, and ``.extras`` attributes for getting the components "
"of the ``.value`` attribute, and ``.dist`` for obtaining information "
"regarding the distribution package that provides the entry point."
msgstr ""
"Cada instância de :class:`!EntryPoint` tem os atributos ``.name``, ``."
"group`` e ``.value`` e um método ``.load()`` para resolver o valor. Há "
"também os atributos ``.module``, ``.attr`` e ``.extras`` para obter os "
"componentes do atributo ``.value`` e ``.dist`` para obter informações sobre "
"o pacote de distribuição que fornece o ponto de entrada."

#: ../../library/importlib.metadata.rst:150
msgid "Query all entry points::"
msgstr "Consultar todos os pontos de entrada::"

#: ../../library/importlib.metadata.rst:152
msgid ">>> eps = entry_points()"
msgstr ">>> eps = entry_points()"

#: ../../library/importlib.metadata.rst:154
msgid ""
"The :func:`!entry_points` function returns a :class:`!EntryPoints` object, a "
"collection of all :class:`!EntryPoint` objects with ``names`` and ``groups`` "
"attributes for convenience::"
msgstr ""
"A função :func:`!entry_points` retorna um objeto :class:`!EntryPoints`, uma "
"coleção de todos os objetos :class:`!EntryPoint` com atributos ``names`` e "
"``groups`` por conveniência::"

#: ../../library/importlib.metadata.rst:158
msgid ""
">>> sorted(eps.groups)\n"
"['console_scripts', 'distutils.commands', 'distutils.setup_keywords', "
"'egg_info.writers', 'setuptools.installation']"
msgstr ""
">>> sorted(eps.groups)\n"
"['console_scripts', 'distutils.commands', 'distutils.setup_keywords', "
"'egg_info.writers', 'setuptools.installation']"

#: ../../library/importlib.metadata.rst:161
msgid ""
":class:`!EntryPoints` has a :meth:`!select` method to select entry points "
"matching specific properties. Select entry points in the ``console_scripts`` "
"group::"
msgstr ""
":class:`!EntryPoints` possui um método :meth:`!select` para selecionar "
"pontos de entrada correspondendo a propriedades específicas. Selecione "
"pontos de entrada no grupo ``console_scripts``::"

#: ../../library/importlib.metadata.rst:165
msgid ">>> scripts = eps.select(group='console_scripts')"
msgstr ">>> scripts = eps.select(group='console_scripts')"

#: ../../library/importlib.metadata.rst:167
msgid ""
"Equivalently, since :func:`!entry_points` passes keyword arguments through "
"to select::"
msgstr ""
"Equivalentemente, já que :func:`!entry_points` passa argumentos nomeados "
"para a seleção::"

#: ../../library/importlib.metadata.rst:170
msgid ">>> scripts = entry_points(group='console_scripts')"
msgstr ">>> scripts = entry_points(group='console_scripts')"

#: ../../library/importlib.metadata.rst:172
msgid ""
"Pick out a specific script named \"wheel\" (found in the wheel project)::"
msgstr ""
"Escolha um script específico chamado \"wheel\" (encontrado no projeto "
"wheel)::"

#: ../../library/importlib.metadata.rst:174
msgid ""
">>> 'wheel' in scripts.names\n"
"True\n"
">>> wheel = scripts['wheel']"
msgstr ""
">>> 'wheel' in scripts.names\n"
"True\n"
">>> wheel = scripts['wheel']"

#: ../../library/importlib.metadata.rst:178
msgid "Equivalently, query for that entry point during selection::"
msgstr ""
"De forma equivalente, consulte esse ponto de entrada durante a seleção::"

#: ../../library/importlib.metadata.rst:180
msgid ""
">>> (wheel,) = entry_points(group='console_scripts', name='wheel')\n"
">>> (wheel,) = entry_points().select(group='console_scripts', name='wheel')"
msgstr ""
">>> (wheel,) = entry_points(group='console_scripts', name='wheel')\n"
">>> (wheel,) = entry_points().select(group='console_scripts', name='wheel')"

#: ../../library/importlib.metadata.rst:183
msgid "Inspect the resolved entry point::"
msgstr "Inspecione o ponto de entrada resolvido::"

#: ../../library/importlib.metadata.rst:185
msgid ""
">>> wheel\n"
"EntryPoint(name='wheel', value='wheel.cli:main', group='console_scripts')\n"
">>> wheel.module\n"
"'wheel.cli'\n"
">>> wheel.attr\n"
"'main'\n"
">>> wheel.extras\n"
"[]\n"
">>> main = wheel.load()\n"
">>> main\n"
"<function main at 0x103528488>"
msgstr ""
">>> wheel\n"
"EntryPoint(name='wheel', value='wheel.cli:main', group='console_scripts')\n"
">>> wheel.module\n"
"'wheel.cli'\n"
">>> wheel.attr\n"
"'main'\n"
">>> wheel.extras\n"
"[]\n"
">>> main = wheel.load()\n"
">>> main\n"
"<function main at 0x103528488>"

#: ../../library/importlib.metadata.rst:197
msgid ""
"The ``group`` and ``name`` are arbitrary values defined by the package "
"author and usually a client will wish to resolve all entry points for a "
"particular group. Read `the setuptools docs <https://setuptools.pypa.io/en/"
"latest/userguide/entry_point.html>`_ for more information on entry points, "
"their definition, and usage."
msgstr ""

#: ../../library/importlib.metadata.rst:203
msgid ""
"The \"selectable\" entry points were introduced in ``importlib_metadata`` "
"3.6 and Python 3.10. Prior to those changes, ``entry_points`` accepted no "
"parameters and always returned a dictionary of entry points, keyed by group. "
"With ``importlib_metadata`` 5.0 and Python 3.12, ``entry_points`` always "
"returns an ``EntryPoints`` object. See :pypi:`backports."
"entry_points_selectable` for compatibility options."
msgstr ""
"Os pontos de entrada \"selecionáveis\" foram introduzidos em "
"``importlib_metadata`` 3.6 e Python 3.10. Antes dessas mudanças, "
"``entry_points`` não aceitava parâmetros e sempre retornava um dicionário de "
"pontos de entrada, chaveado por grupo. Com ``importlib_metadata`` 5.0 e "
"Python 3.12, ``entry_points`` sempre retorna um objeto ``EntryPoints``. "
"Veja :pypi:`backports.entry_points_selectable` para opções de "
"compatibilidade."

#: ../../library/importlib.metadata.rst:212
msgid ""
"``EntryPoint`` objects no longer present a tuple-like interface (:meth:"
"`~object.__getitem__`)."
msgstr ""
"Objetos ``EntryPoint`` não apresentam mais uma interface tupla ou similar (:"
"meth:`~object.__getitem__`)."

#: ../../library/importlib.metadata.rst:219
msgid "Distribution metadata"
msgstr "Metadados de distribuição"

#: ../../library/importlib.metadata.rst:223
msgid ""
"Return the distribution metadata corresponding to the named distribution "
"package as a :class:`PackageMetadata` instance."
msgstr ""
"Retorna os metadados de distribuição correspondentes ao pacote de "
"distribuição nomeado como uma instância de :class:`PackageMetadata`."

#: ../../library/importlib.metadata.rst:226
#: ../../library/importlib.metadata.rst:275
#: ../../library/importlib.metadata.rst:296
#: ../../library/importlib.metadata.rst:359
#: ../../library/importlib.metadata.rst:410
msgid ""
"Raises :exc:`PackageNotFoundError` if the named distribution package is not "
"installed in the current Python environment."
msgstr ""
"Levanta :exc:`PackageNotFoundError` se o pacote de distribuição nomeado não "
"estiver instalado no ambiente Python atual."

#: ../../library/importlib.metadata.rst:231
msgid ""
"A concrete implementation of the `PackageMetadata protocol <https://"
"importlib-metadata.readthedocs.io/en/latest/api.html#importlib_metadata."
"PackageMetadata>`_."
msgstr ""
"Uma implementação concreta do `protocolo PackageMetadata <https://importlib-"
"metadata.readthedocs.io/en/latest/api.html#importlib_metadata."
"PackageMetadata>`_."

#: ../../library/importlib.metadata.rst:234
msgid ""
"In addition to providing the defined protocol methods and attributes, "
"subscripting the instance is equivalent to calling the :meth:`!get` method."
msgstr ""
"Além de fornecer os métodos e atributos de protocolo definidos, subscrever a "
"instância é equivalente a chamar o método :meth:`!get`."

#: ../../library/importlib.metadata.rst:237
msgid ""
"Every `Distribution Package <https://packaging.python.org/en/latest/glossary/"
"#term-Distribution-Package>`_ includes some metadata, which you can extract "
"using the :func:`!metadata` function::"
msgstr ""
"Cada `Pacote de Distribuição <https://packaging.python.org/pt_BR/latest/"
"glossary/#term-Distribution-Package>`_ inclui alguns metadados, que você "
"pode extrair usando a função :func:`!metadata`::"

#: ../../library/importlib.metadata.rst:240
msgid ">>> wheel_metadata = metadata('wheel')"
msgstr ">>> wheel_metadata = metadata('wheel')"

#: ../../library/importlib.metadata.rst:242
msgid ""
"The keys of the returned data structure name the metadata keywords, and the "
"values are returned unparsed from the distribution metadata::"
msgstr ""
"As chaves da estrutura de dados retornada nomeiam as palavras reservadas dos "
"metadados, e os valores são retornados sem análise dos metadados de "
"distribuição::"

#: ../../library/importlib.metadata.rst:245
msgid ""
">>> wheel_metadata['Requires-Python']\n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'"
msgstr ""
">>> wheel_metadata['Requires-Python']\n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'"

#: ../../library/importlib.metadata.rst:248
msgid ""
":class:`PackageMetadata` also presents a :attr:`!json` attribute that "
"returns all the metadata in a JSON-compatible form per :PEP:`566`::"
msgstr ""
":class:`PackageMetadata` também apresenta um atributo :attr:`!json` que "
"retorna todos os metadados em um formato compatível com JSON pela :PEP:"
"`566`::"

#: ../../library/importlib.metadata.rst:251
msgid ""
">>> wheel_metadata.json['requires_python']\n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'"
msgstr ""
">>> wheel_metadata.json['requires_python']\n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'"

#: ../../library/importlib.metadata.rst:254
#: ../../library/importlib.metadata.rst:453
msgid ""
"The full set of available metadata is not described here. See the PyPA `Core "
"metadata specification <https://packaging.python.org/en/latest/"
"specifications/core-metadata/#core-metadata>`_ for additional details."
msgstr ""
"O conjunto completo de metadados disponíveis não é descrito aqui. Consulte a "
"`especificação de metadados principais do PyPA <https://packaging.python.org/"
"pt_BR/latest/specifications/core-metadata/#core-metadata>`_ para obter "
"detalhes adicionais."

#: ../../library/importlib.metadata.rst:257
msgid ""
"The ``Description`` is now included in the metadata when presented through "
"the payload. Line continuation characters have been removed."
msgstr ""
"A ``Description`` agora é incluída nos metadados quando apresentada através "
"do payload. Os caracteres de continuação de linha foram removidos."

#: ../../library/importlib.metadata.rst:261
msgid "The ``json`` attribute was added."
msgstr "O atributo ``json`` foi adicionado."

#: ../../library/importlib.metadata.rst:267
msgid "Distribution versions"
msgstr "Versões de distribuição"

#: ../../library/importlib.metadata.rst:271
msgid ""
"Return the installed distribution package `version <https://packaging.python."
"org/en/latest/specifications/core-metadata/#version>`__ for the named "
"distribution package."
msgstr ""
"Retorna a `versão <https://packaging.python.org/pt-br/latest/specifications/"
"core-metadata/#version>`__ do pacote de distribuição instalado para o pacote "
"de distribuição nomeado."

#: ../../library/importlib.metadata.rst:278
msgid ""
"The :func:`!version` function is the quickest way to get a `Distribution "
"Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_'s version number, as a string::"
msgstr ""
"A função :func:`!version` é a maneira mais rápida de obter o número de "
"versão de um `Pacote de Distribuição <https://packaging.python.org/pt_BR/"
"latest/glossary/#term-Distribution-Package>`_, como uma string::"

#: ../../library/importlib.metadata.rst:282
msgid ""
">>> version('wheel')\n"
"'0.32.3'"
msgstr ""
">>> version('wheel')\n"
"'0.32.3'"

#: ../../library/importlib.metadata.rst:289
msgid "Distribution files"
msgstr "Arquivos de distribuição"

#: ../../library/importlib.metadata.rst:293
msgid ""
"Return the full set of files contained within the named distribution package."
msgstr ""
"Retorna o conjunto completo de arquivos contidos no pacote de distribuição "
"nomeado."

#: ../../library/importlib.metadata.rst:299
msgid ""
"Returns :const:`None` if the distribution is found but the installation "
"database records reporting the files associated with the distribution "
"package are missing."
msgstr ""

#: ../../library/importlib.metadata.rst:305
msgid ""
"A :class:`pathlib.PurePath` derived object with additional ``dist``, "
"``size``, and ``hash`` properties corresponding to the distribution "
"package's installation metadata for that file."
msgstr ""
"Um objeto derivado de :class:`pathlib.PurePath` com propriedades adicionais "
"``dist``, ``size`` e ``hash`` correspondentes aos metadados de instalação do "
"pacote de distribuição para esse arquivo."

#: ../../library/importlib.metadata.rst:309
msgid ""
"The :func:`!files` function takes a `Distribution Package <https://packaging."
"python.org/en/latest/glossary/#term-Distribution-Package>`_ name and returns "
"all of the files installed by this distribution. Each file is reported as a :"
"class:`PackagePath` instance. For example::"
msgstr ""
"A função :func:`!files` pega um nome `Pacote de Distribuição <https://"
"packaging.python.org/pt_BR/latest/glossary/#term-Distribution-Package>`_ e "
"retorna todos os arquivos instalados por este distribuição. Cada  arquivo é "
"é relatado como uma instância de :class:`PackagePath`. Por exemplo::"

#: ../../library/importlib.metadata.rst:314
msgid ""
">>> util = [p for p in files('wheel') if 'util.py' in str(p)][0]\n"
">>> util\n"
"PackagePath('wheel/util.py')\n"
">>> util.size\n"
"859\n"
">>> util.dist\n"
"<importlib.metadata._hooks.PathDistribution object at 0x101e0cef0>\n"
">>> util.hash\n"
"<FileHash mode: sha256 value: bYkw5oMccfazVCoYQwKkkemoVyMAFoR34mmKBx8R1NI>"
msgstr ""
">>> util = [p for p in files('wheel') if 'util.py' in str(p)][0]\n"
">>> util\n"
"PackagePath('wheel/util.py')\n"
">>> util.size\n"
"859\n"
">>> util.dist\n"
"<importlib.metadata._hooks.PathDistribution object at 0x101e0cef0>\n"
">>> util.hash\n"
"<FileHash mode: sha256 value: bYkw5oMccfazVCoYQwKkkemoVyMAFoR34mmKBx8R1NI>"

#: ../../library/importlib.metadata.rst:324
msgid "Once you have the file, you can also read its contents::"
msgstr "Uma vez que tenha o arquivo, você também pode ler seu conteúdo::"

#: ../../library/importlib.metadata.rst:326
msgid ""
">>> print(util.read_text())\n"
"import base64\n"
"import sys\n"
"...\n"
"def as_bytes(s):\n"
"    if isinstance(s, text_type):\n"
"        return s.encode('utf-8')\n"
"    return s"
msgstr ""
">>> print(util.read_text())\n"
"import base64\n"
"import sys\n"
"...\n"
"def as_bytes(s):\n"
"    if isinstance(s, text_type):\n"
"        return s.encode('utf-8')\n"
"    return s"

#: ../../library/importlib.metadata.rst:335
msgid ""
"You can also use the :meth:`!locate` method to get the absolute path to the "
"file::"
msgstr ""
"Você também pode usar o método :meth:`!locate` para obter o caminho absoluto "
"para o arquivo::"

#: ../../library/importlib.metadata.rst:338
msgid ""
">>> util.locate()\n"
"PosixPath('/home/gustav/example/lib/site-packages/wheel/util.py')"
msgstr ""
">>> util.locate()\n"
"PosixPath('/home/gustav/example/lib/site-packages/wheel/util.py')"

#: ../../library/importlib.metadata.rst:341
msgid ""
"In the case where the metadata file listing files (``RECORD`` or ``SOURCES."
"txt``) is missing, :func:`!files` will return :const:`None`. The caller may "
"wish to wrap calls to :func:`!files` in `always_iterable <https://more-"
"itertools.readthedocs.io/en/stable/api.html#more_itertools."
"always_iterable>`_ or otherwise guard against this condition if the target "
"distribution is not known to have the metadata present."
msgstr ""
"No caso em que o arquivo de metadados que lista os arquivos (``RECORD`` ou "
"``SOURCES.txt``) estiver faltando, :func:`!files` retornará :const:`None`. O "
"chamador pode querer agrupar chamadas para :func:`!files` em "
"`always_iterable <https://more-itertools.readthedocs.io/en/stable/api."
"html#more_itertools.always_iterable>`_ ou de outra forma se proteger contra "
"isso condição se a distribuição de destino não for conhecida por ter os "
"metadados presentes."

#: ../../library/importlib.metadata.rst:352
msgid "Distribution requirements"
msgstr "Requisitos de distribuição"

#: ../../library/importlib.metadata.rst:356
msgid ""
"Return the declared dependency specifiers for the named distribution package."
msgstr ""
"Retorna os especificadores de dependência declarados para o pacote de "
"distribuição nomeado."

#: ../../library/importlib.metadata.rst:362
msgid ""
"To get the full set of requirements for a `Distribution Package <https://"
"packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_, use "
"the :func:`!requires` function::"
msgstr ""
"Para obter o conjunto completo de requisitos para um `Pacote de Distribuição "
"<https://packaging.python.org/pt_BR/latest/glossary/#term-Distribution-"
"Package>`_, use a função :func:`!requires`::"

#: ../../library/importlib.metadata.rst:366
msgid ""
">>> requires('wheel')\n"
"[\"pytest (>=3.0.0) ; extra == 'test'\", \"pytest-cov ; extra == 'test'\"]"
msgstr ""
">>> requires('wheel')\n"
"[\"pytest (>=3.0.0) ; extra == 'test'\", \"pytest-cov ; extra == 'test'\"]"

#: ../../library/importlib.metadata.rst:374
msgid "Mapping import to distribution packages"
msgstr "Mapeando importação pra pacotes de distribuição"

#: ../../library/importlib.metadata.rst:378
msgid ""
"Return a mapping from the top level module and import package names found "
"via :data:`sys.meta_path` to the names of the distribution packages (if any) "
"that provide the corresponding files."
msgstr ""
"Retorna um mapeamento do módulo de nível superior e importa os nomes dos "
"pacotes encontrados via :data:`sys.meta_path` para os nomes dos pacotes de "
"distribuição (se houver) que fornecem os arquivos correspondentes."

#: ../../library/importlib.metadata.rst:382
msgid ""
"To allow for namespace packages (which may have members provided by multiple "
"distribution packages), each top level import name maps to a list of "
"distribution names rather than mapping directly to a single name."
msgstr ""
"Para permitir pacotes de espaço de nomes (que podem ter membros fornecidos "
"por vários pacotes de distribuição), cada nome de importação de nível "
"superior é mapeado para uma lista de nomes de distribuição em vez de mapear "
"diretamente para um único nome."

#: ../../library/importlib.metadata.rst:386
msgid ""
"A convenience method to resolve the `Distribution Package <https://packaging."
"python.org/en/latest/glossary/#term-Distribution-Package>`_ name (or names, "
"in the case of a namespace package) that provide each importable top-level "
"Python module or `Import Package <https://packaging.python.org/en/latest/"
"glossary/#term-Import-Package>`_::"
msgstr ""
"Um método conveniente para resolver o nome do `Pacote de Distribuição "
"<https://packaging.python.org/pt_BR/latest/glossary/#term-Distribution-"
"Package>`_ (ou nomes, no caso de um pacote de espaço de nomes) que fornece "
"cada módulo Python de nível superior importável ou `Pacote de Importação "
"<https://packaging.python.org/pt_BR/latest/glossary/#term-Import-Package>`_::"

#: ../../library/importlib.metadata.rst:391
msgid ""
">>> packages_distributions()\n"
"{'importlib_metadata': ['importlib-metadata'], 'yaml': ['PyYAML'], 'jaraco': "
"['jaraco.classes', 'jaraco.functools'], ...}"
msgstr ""
">>> packages_distributions()\n"
"{'importlib_metadata': ['importlib-metadata'], 'yaml': ['PyYAML'], 'jaraco': "
"['jaraco.classes', 'jaraco.functools'], ...}"

#: ../../library/importlib.metadata.rst:394
msgid ""
"Some editable installs, `do not supply top-level names <https://github.com/"
"pypa/packaging-problems/issues/609>`_, and thus this function is not "
"reliable with such installs."
msgstr ""
"Algumas instalações editáveis `não fornecem nomes de nível superior <https://"
"github.com/pypa/packaging-problems/issues/609>`_ e, portanto, esta função "
"não é confiável com tais instalações."

#: ../../library/importlib.metadata.rst:403
msgid "Distributions"
msgstr "Distribuições"

#: ../../library/importlib.metadata.rst:407
msgid ""
"Return a :class:`Distribution` instance describing the named distribution "
"package."
msgstr ""
"Retorna uma instância de :class:`Distribution` descrevendo o pacote de "
"distribuição nomeado."

#: ../../library/importlib.metadata.rst:415
msgid "Details of an installed distribution package."
msgstr "Detalhes de um pacote de distribuição instalado."

#: ../../library/importlib.metadata.rst:417
msgid ""
"Note: different :class:`!Distribution` instances do not currently compare "
"equal, even if they relate to the same installed distribution and "
"accordingly have the same attributes."
msgstr ""
"Observação: instâncias diferentes de :class:`!Distribution` não são "
"atualmente consideradas iguais em uma comparação, mesmo que estejam "
"relacionadas à mesma distribuição instalada e, portanto, tenham os mesmos "
"atributos."

#: ../../library/importlib.metadata.rst:421
msgid ""
"While the module level API described above is the most common and convenient "
"usage, you can get all of that information from the :class:`!Distribution` "
"class. :class:`!Distribution` is an abstract object that represents the "
"metadata for a Python `Distribution Package <https://packaging.python.org/en/"
"latest/glossary/#term-Distribution-Package>`_. You can get the concrete :"
"class:`!Distribution` subclass instance for an installed distribution "
"package by calling the :func:`distribution` function::"
msgstr ""
"Embora a API de nível de módulo descrita acima seja o uso mais comum e "
"conveniente, você pode obter todas essas informações da classe :class:`!"
"Distribution`. :class:`!Distribution` é um objeto abstrato que representa os "
"metadados para um `Pacote de Distribuição <https://packaging.python.org/"
"pt_BR/latest/glossary/#term-Distribution-Package>`_ Python. Você pode obter "
"a instância concreta de subclasse de :class:`!Distribution` para um pacote "
"de distribuição instalado chamando a função :func:`distribution`::"

#: ../../library/importlib.metadata.rst:428
msgid ""
">>> from importlib.metadata import distribution\n"
">>> dist = distribution('wheel')\n"
">>> type(dist)\n"
"<class 'importlib.metadata.PathDistribution'>"
msgstr ""
">>> from importlib.metadata import distribution\n"
">>> dist = distribution('wheel')\n"
">>> type(dist)\n"
"<class 'importlib.metadata.PathDistribution'>"

#: ../../library/importlib.metadata.rst:433
msgid ""
"Thus, an alternative way to get the version number is through the :class:`!"
"Distribution` instance::"
msgstr ""
"Assim, uma forma alternativa de obter o número da versão é através da "
"instância :class:`!Distribution`::"

#: ../../library/importlib.metadata.rst:436
msgid ""
">>> dist.version\n"
"'0.32.3'"
msgstr ""
">>> dist.version\n"
"'0.32.3'"

#: ../../library/importlib.metadata.rst:439
msgid ""
"There are all kinds of additional metadata available on :class:`!"
"Distribution` instances::"
msgstr ""
"Existem todos os tipos de metadados adicionais disponíveis em instâncias de :"
"class:`!Distribution`::"

#: ../../library/importlib.metadata.rst:442
msgid ""
">>> dist.metadata['Requires-Python']\n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'\n"
">>> dist.metadata['License']\n"
"'MIT'"
msgstr ""
">>> dist.metadata['Requires-Python']\n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'\n"
">>> dist.metadata['License']\n"
"'MIT'"

#: ../../library/importlib.metadata.rst:447
msgid ""
"For editable packages, an ``origin`` property may present :pep:`610` "
"metadata::"
msgstr ""
"Para pacotes editáveis, uma propriedade ``origin`` pode apresentar metadados "
"conforme a :pep:`610`::"

#: ../../library/importlib.metadata.rst:450
msgid ""
">>> dist.origin.url\n"
"'file:///path/to/wheel-0.32.3.editable-py3-none-any.whl'"
msgstr ""
">>> dist.origin.url\n"
"'file:///caminho/para/wheel-0.32.3.editable-py3-none-any.whl'"

#: ../../library/importlib.metadata.rst:456
msgid "The ``.origin`` property was added."
msgstr "A propriedade ``.origin`` foi adicionada."

#: ../../library/importlib.metadata.rst:460
msgid "Distribution Discovery"
msgstr "Descoberta de distribuição"

#: ../../library/importlib.metadata.rst:462
msgid ""
"By default, this package provides built-in support for discovery of metadata "
"for file system and zip file `Distribution Package <https://packaging.python."
"org/en/latest/glossary/#term-Distribution-Package>`_\\s. This metadata "
"finder search defaults to ``sys.path``, but varies slightly in how it "
"interprets those values from how other import machinery does. In particular:"
msgstr ""
"Por padrão, este pacote fornece suporte embutido para descoberta de "
"metadados para sistema de arquivos e arquivo zip `Pacotes de Distribuição "
"<https://packaging.python.org/pt_BR/latest/glossary/#term-Distribution-"
"Package>`_. Esta pesquisa do localizador de metadados tem como padrão ``sys."
"path``, mas varia um pouco na maneira como ela interpreta esses valores em "
"relação a outras mecanismo de importação. Em particular:"

#: ../../library/importlib.metadata.rst:466
msgid ""
"``importlib.metadata`` does not honor :class:`bytes` objects on ``sys.path``."
msgstr ""
"``importlib.metadata`` não honra objetos :class:`bytes` em ``sys.path``."

#: ../../library/importlib.metadata.rst:467
msgid ""
"``importlib.metadata`` will incidentally honor :py:class:`pathlib.Path` "
"objects on ``sys.path`` even though such values will be ignored for imports."
msgstr ""
"``importlib.metadata`` irá incidentalmente honrar objetos :py:class:`pathlib."
"Path` em ``sys.path`` mesmo que tais valores sejam ignorados para "
"importações."

#: ../../library/importlib.metadata.rst:471
msgid "Implementing Custom Providers"
msgstr ""

#: ../../library/importlib.metadata.rst:473
msgid ""
"``importlib.metadata`` address two API surfaces, one for *consumers* and "
"another for *providers*. Most users are consumers, consuming metadata "
"provided by the packages. There are other use-cases, however, where users "
"wish to expose metadata through some other mechanism, such as alongside a "
"custom importer. Such a use case calls for a *custom provider*."
msgstr ""

#: ../../library/importlib.metadata.rst:480
msgid ""
"Because `Distribution Package <https://packaging.python.org/en/latest/"
"glossary/#term-Distribution-Package>`_ metadata is not available through :"
"data:`sys.path` searches, or package loaders directly, the metadata for a "
"distribution is found through import system :ref:`finders <finders-and-"
"loaders>`. To find a distribution package's metadata, ``importlib.metadata`` "
"queries the list of :term:`meta path finders <meta path finder>` on :data:"
"`sys.meta_path`."
msgstr ""

#: ../../library/importlib.metadata.rst:488
msgid ""
"The implementation has hooks integrated into the ``PathFinder``, serving "
"metadata for distribution packages found on the file system."
msgstr ""

#: ../../library/importlib.metadata.rst:491
msgid ""
"The abstract class :py:class:`importlib.abc.MetaPathFinder` defines the "
"interface expected of finders by Python's import system. ``importlib."
"metadata`` extends this protocol by looking for an optional "
"``find_distributions`` callable on the finders from :data:`sys.meta_path` "
"and presents this extended interface as the ``DistributionFinder`` abstract "
"base class, which defines this abstract method::"
msgstr ""
"A classe abstrata :py:class:`importlib.abc.MetaPathFinder` define a "
"interface esperada dos localizadores pelo sistema de importação do Python. "
"``importlib.metadata`` estende este protocolo procurando por um chamável "
"``find_distributions`` opcional nos localizadores de :data:`sys.meta_path` e "
"apresenta esta interface estendida como a classe base abstrata "
"``DistributionFinder``, que define este método abstrato::"

#: ../../library/importlib.metadata.rst:499
msgid ""
"@abc.abstractmethod\n"
"def find_distributions(context=DistributionFinder.Context()) -> "
"Iterable[Distribution]:\n"
"    \"\"\"Return an iterable of all Distribution instances capable of\n"
"    loading the metadata for packages for the indicated ``context``.\n"
"    \"\"\""
msgstr ""

#: ../../library/importlib.metadata.rst:505
msgid ""
"The ``DistributionFinder.Context`` object provides ``.path`` and ``.name`` "
"properties indicating the path to search and name to match and may supply "
"other relevant context sought by the consumer."
msgstr ""

#: ../../library/importlib.metadata.rst:509
msgid ""
"In practice, to support finding distribution package metadata in locations "
"other than the file system, subclass ``Distribution`` and implement the "
"abstract methods. Then from a custom finder, return instances of this "
"derived ``Distribution`` in the ``find_distributions()`` method."
msgstr ""

#: ../../library/importlib.metadata.rst:516
msgid "Example"
msgstr "Exemplo"

#: ../../library/importlib.metadata.rst:518
msgid "Imagine a custom finder that loads Python modules from a database::"
msgstr ""

#: ../../library/importlib.metadata.rst:520
msgid ""
"class DatabaseImporter(importlib.abc.MetaPathFinder):\n"
"    def __init__(self, db):\n"
"        self.db = db\n"
"\n"
"    def find_spec(self, fullname, target=None) -> ModuleSpec:\n"
"        return self.db.spec_from_name(fullname)\n"
"\n"
"sys.meta_path.append(DatabaseImporter(connect_db(...)))"
msgstr ""
"class DatabaseImporter(importlib.abc.MetaPathFinder):\n"
"    def __init__(self, db):\n"
"        self.db = db\n"
"\n"
"    def find_spec(self, fullname, target=None) -> ModuleSpec:\n"
"        return self.db.spec_from_name(fullname)\n"
"\n"
"sys.meta_path.append(DatabaseImporter(connect_db(...)))"

#: ../../library/importlib.metadata.rst:529
msgid ""
"That importer now presumably provides importable modules from a database, "
"but it provides no metadata or entry points. For this custom importer to "
"provide metadata, it would also need to implement ``DistributionFinder``::"
msgstr ""
"Esse importador agora provavelmente fornece módulos importáveis de um banco "
"de dados, mas não fornece metadados ou pontos de entrada. Para que este "
"importador personalizado forneça metadados, ele também precisaria "
"implementar ``DistributionFinder``::"

#: ../../library/importlib.metadata.rst:534
msgid ""
"from importlib.metadata import DistributionFinder\n"
"\n"
"class DatabaseImporter(DistributionFinder):\n"
"    ...\n"
"\n"
"    def find_distributions(self, context=DistributionFinder.Context()):\n"
"        query = dict(name=context.name) if context.name else {}\n"
"        for dist_record in self.db.query_distributions(query):\n"
"            yield DatabaseDistribution(dist_record)"
msgstr ""
"from importlib.metadata import DistributionFinder\n"
"\n"
"class DatabaseImporter(DistributionFinder):\n"
"    ...\n"
"\n"
"    def find_distributions(self, context=DistributionFinder.Context()):\n"
"        query = dict(name=context.name) if context.name else {}\n"
"        for dist_record in self.db.query_distributions(query):\n"
"            yield DatabaseDistribution(dist_record)"

#: ../../library/importlib.metadata.rst:544
msgid ""
"In this way, ``query_distributions`` would return records for each "
"distribution served by the database matching the query. For example, if "
"``requests-1.0`` is in the database, ``find_distributions`` would yield a "
"``DatabaseDistribution`` for ``Context(name='requests')`` or "
"``Context(name=None)``."
msgstr ""
"Desta forma, ``query_distributions`` retornaria registros para cada "
"distribuição servida pelo banco de dados correspondente à consulta. Por "
"exemplo, se ``requests-1.0`` estiver no banco de dados, "
"``find_distributions`` produziria um ``DatabaseDistribution`` para "
"``Context(name='requests')`` ou ``Context(name=None)``."

#: ../../library/importlib.metadata.rst:550
msgid ""
"For the sake of simplicity, this example ignores ``context.path``\\. The "
"``path`` attribute defaults to ``sys.path`` and is the set of import paths "
"to be considered in the search. A ``DatabaseImporter`` could potentially "
"function without any concern for a search path. Assuming the importer does "
"no partitioning, the \"path\" would be irrelevant. In order to illustrate "
"the purpose of ``path``, the example would need to illustrate a more complex "
"``DatabaseImporter`` whose behavior varied depending on ``sys.path``/"
"``PYTHONPATH``. In that case, the ``find_distributions`` should honor the "
"``context.path`` and only yield ``Distribution``\\ s pertinent to that path."
msgstr ""
"Por uma questão de simplicidade, este exemplo ignora ``context.path``\\. O "
"atributo ``path`` tem como padrão ``sys.path`` e é o conjunto de caminhos de "
"importação a serem considerados na pesquisa. Um ``DatabaseImporter`` poderia "
"funcionar potencialmente sem qualquer preocupação com um caminho de "
"pesquisa. Supondo que o importador não faça particionamento, o caminho "
"“path” seria irrelevante. Para ilustrar o propósito de ``path``, o exemplo "
"precisaria ilustrar um ``DatabaseImporter`` mais complexo cujo comportamento "
"variasse dependendo de ``sys.path``/``PYTHONPATH``. Nesse caso, "
"``find_distributions`` deve respeitar o ``context.path`` e produzir apenas "
"``Distribution``\\s pertinentes a esse caminho."

#: ../../library/importlib.metadata.rst:561
msgid "``DatabaseDistribution``, then, would look something like::"
msgstr "``DatabaseDistribution``, então, se pareceria com algo como:"

#: ../../library/importlib.metadata.rst:563
msgid ""
"class DatabaseDistribution(importlib.metadata.Distribution):\n"
"    def __init__(self, record):\n"
"        self.record = record\n"
"\n"
"    def read_text(self, filename):\n"
"        \"\"\"\n"
"        Read a file like \"METADATA\" for the current distribution.\n"
"        \"\"\"\n"
"        if filename == \"METADATA\":\n"
"            return f\"\"\"Name: {self.record.name}\n"
"Version: {self.record.version}\n"
"\"\"\"\n"
"        if filename == \"entry_points.txt\":\n"
"            return \"\\n\".join(\n"
"              f\"\"\"[{ep.group}]\\n{ep.name}={ep.value}\"\"\"\n"
"              for ep in self.record.entry_points)\n"
"\n"
"    def locate_file(self, path):\n"
"        raise RuntimeError(\"This distribution has no file system\")"
msgstr ""
"class DatabaseDistribution(importlib.metadata.Distribution):\n"
"    def __init__(self, record):\n"
"        self.record = record\n"
"\n"
"    def read_text(self, filename):\n"
"        \"\"\"\n"
"        Lê um arquivo como \"METADATA\" para a atual distribuição.\n"
"        \"\"\"\n"
"        if filename == \"METADATA\":\n"
"            return f\"\"\"Name: {self.record.name}\n"
"Version: {self.record.version}\n"
"\"\"\"\n"
"        if filename == \"entry_points.txt\":\n"
"            return \"\\n\".join(\n"
"              f\"\"\"[{ep.group}]\\n{ep.name}={ep.value}\"\"\"\n"
"              for ep in self.record.entry_points)\n"
"\n"
"    def locate_file(self, path):\n"
"        raise RuntimeError(\"This distribution has no file system\")"

#: ../../library/importlib.metadata.rst:583
msgid ""
"This basic implementation should provide metadata and entry points for "
"packages served by the ``DatabaseImporter``, assuming that the ``record`` "
"supplies suitable ``.name``, ``.version``, and ``.entry_points`` attributes."
msgstr ""
"Esta implementação básica deve fornecer metadados e pontos de entrada para "
"pacotes servidos pelo ``DatabaseImporter``, presumindo que o ``record`` "
"forneça os atributos ``.name``, ``.version`` e ``.entry_points`` adequados."

#: ../../library/importlib.metadata.rst:588
msgid ""
"The ``DatabaseDistribution`` may also provide other metadata files, like "
"``RECORD`` (required for ``Distribution.files``) or override the "
"implementation of ``Distribution.files``. See the source for more "
"inspiration."
msgstr ""
"O ``DatabaseDistribution`` também pode fornecer outros arquivos de "
"metadados, como ``RECORD`` (necessário para ``Distribution.files``) ou "
"substituir a implementação de ``Distribution.files``. Veja o código-fonte "
"para mais inspiração."
