# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Adorilson Bezerra <adorilson@gmail.com>, 2019
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2019
# And Past <andrepgs@gmail.com>, 2019
# Marco Rougeth <marco@rougeth.com>, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:26+0000\n"
"Last-Translator: Marco Rougeth <marco@rougeth.com>, 2020\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../library/itertools.rst:2
msgid ":mod:`itertools` --- Functions creating iterators for efficient looping"
msgstr ""
":mod:`itertools` --- Funções que criam iteradores para laços eficientes"

#: ../../library/itertools.rst:16
msgid ""
"This module implements a number of :term:`iterator` building blocks inspired "
"by constructs from APL, Haskell, and SML.  Each has been recast in a form "
"suitable for Python."
msgstr ""
"Esse módulo implementa diversos blocos de construção de :term:`iterator` "
"building blocks inspirados por construções de  APL, Haskell, e SML.  Cada "
"uma foi reformulada de forma adequada para Python."

#: ../../library/itertools.rst:20
msgid ""
"The module standardizes a core set of fast, memory efficient tools that are "
"useful by themselves or in combination.  Together, they form an \"iterator "
"algebra\" making it possible to construct specialized tools succinctly and "
"efficiently in pure Python."
msgstr ""
"Esse módulo padroniza um conjunto central de ferramentas rápidas e de uso "
"eficiente da memória, que podem ser utilizadas sozinhas ou combinadas. "
"Juntas, eles formam uma \"álgebra de iteradores\" tornando possível "
"construir ferramentas sucintas e eficientes em Python puro."

#: ../../library/itertools.rst:25
msgid ""
"For instance, SML provides a tabulation tool: ``tabulate(f)`` which produces "
"a sequence ``f(0), f(1), ...``.  The same effect can be achieved in Python "
"by combining :func:`map` and :func:`count` to form ``map(f, count())``."
msgstr ""
"Por exemplo, SML fornece uma ferramenta para tabulação: ``tabulate(f)`` que "
"produz uma sequência ``f(0), f(1), ...``.  O mesmo efeito pode ser obtido em "
"Python combinando :func:`map` e :func:`count` para formar ``map(f, "
"count())``."

#: ../../library/itertools.rst:29
msgid ""
"These tools and their built-in counterparts also work well with the high-"
"speed functions in the :mod:`operator` module.  For example, the "
"multiplication operator can be mapped across two vectors to form an "
"efficient dot-product: ``sum(map(operator.mul, vector1, vector2))``."
msgstr ""
"Essa ferramentas e suas equivalências embutidas também trabalham bem com as "
"funções de alta velocidade do módulo :mod:`operator` module. Por exemplo, o "
"operador de multiplicação pode ser mapeado em dois vetores para criar um "
"produto escalar eficiente: ``sum(map(operator.mul, vector1, vector2))``."

#: ../../library/itertools.rst:35
msgid "**Infinite iterators:**"
msgstr "**Iteradores infinitos:**"

#: ../../library/itertools.rst:38 ../../library/itertools.rst:48
#: ../../library/itertools.rst:67
msgid "Iterator"
msgstr "Iterador"

#: ../../library/itertools.rst:38 ../../library/itertools.rst:48
#: ../../library/itertools.rst:67
msgid "Arguments"
msgstr "Argumentos"

#: ../../library/itertools.rst:38 ../../library/itertools.rst:48
#: ../../library/itertools.rst:67
msgid "Results"
msgstr "Resultado"

#: ../../library/itertools.rst:38 ../../library/itertools.rst:48
msgid "Example"
msgstr "Exemplo"

#: ../../library/itertools.rst:40
msgid ":func:`count`"
msgstr ":func:`count`"

#: ../../library/itertools.rst:40
msgid "start, [step]"
msgstr "start, [step]"

#: ../../library/itertools.rst:40
msgid "start, start+step, start+2*step, ..."
msgstr "start, start+step, start+2*step, ..."

#: ../../library/itertools.rst:40
msgid "``count(10) --> 10 11 12 13 14 ...``"
msgstr "``count(10) --> 10 11 12 13 14 ...``"

#: ../../library/itertools.rst:41
msgid ":func:`cycle`"
msgstr ":func:`cycle`"

#: ../../library/itertools.rst:41
msgid "p"
msgstr "p"

#: ../../library/itertools.rst:41
msgid "p0, p1, ... plast, p0, p1, ..."
msgstr "p0, p1, ... ultimo elemento de p, p0, p1, ..."

#: ../../library/itertools.rst:41
msgid "``cycle('ABCD') --> A B C D A B C D ...``"
msgstr "``cycle('ABCD') --> A B C D A B C D ...``"

#: ../../library/itertools.rst:42
msgid ":func:`repeat`"
msgstr ":func:`repeat`"

#: ../../library/itertools.rst:42
msgid "elem [,n]"
msgstr "elem [,n]"

#: ../../library/itertools.rst:42
msgid "elem, elem, elem, ... endlessly or up to n times"
msgstr "elem, elem, elem, ... repete infinitamente ou até n vezes"

#: ../../library/itertools.rst:42
msgid "``repeat(10, 3) --> 10 10 10``"
msgstr "``repeat(10, 3) --> 10 10 10``"

#: ../../library/itertools.rst:45
msgid "**Iterators terminating on the shortest input sequence:**"
msgstr "**Iteradores terminando na sequencia de entrada mais curta:**"

#: ../../library/itertools.rst:50
msgid ":func:`accumulate`"
msgstr ":func:`accumulate`"

#: ../../library/itertools.rst:50
msgid "p [,func]"
msgstr "p [,func]"

#: ../../library/itertools.rst:50
msgid "p0, p0+p1, p0+p1+p2, ..."
msgstr "p0, p0+p1, p0+p1+p2, ..."

#: ../../library/itertools.rst:50
msgid "``accumulate([1,2,3,4,5]) --> 1 3 6 10 15``"
msgstr "``accumulate([1,2,3,4,5]) --> 1 3 6 10 15``"

#: ../../library/itertools.rst:51
msgid ":func:`chain`"
msgstr ":func:`chain`"

#: ../../library/itertools.rst:51 ../../library/itertools.rst:61
msgid "p, q, ..."
msgstr "p, q, ..."

#: ../../library/itertools.rst:51 ../../library/itertools.rst:52
msgid "p0, p1, ... plast, q0, q1, ..."
msgstr "p0, p1, ... último elemento de p, q0, q1, ..."

#: ../../library/itertools.rst:51
msgid "``chain('ABC', 'DEF') --> A B C D E F``"
msgstr "``chain('ABC', 'DEF') --> A B C D E F``"

#: ../../library/itertools.rst:52
msgid ":func:`chain.from_iterable`"
msgstr ":func:`chain.from_iterable`"

#: ../../library/itertools.rst:52
msgid "iterable"
msgstr "iterável"

#: ../../library/itertools.rst:52
msgid "``chain.from_iterable(['ABC', 'DEF']) --> A B C D E F``"
msgstr "``chain.from_iterable(['ABC', 'DEF']) --> A B C D E F``"

#: ../../library/itertools.rst:53
msgid ":func:`compress`"
msgstr ":func:`compress`"

#: ../../library/itertools.rst:53
msgid "data, selectors"
msgstr "data, selectors"

#: ../../library/itertools.rst:53
msgid "(d[0] if s[0]), (d[1] if s[1]), ..."
msgstr "(d[0] if s[0]), (d[1] if s[1]), ..."

#: ../../library/itertools.rst:53
msgid "``compress('ABCDEF', [1,0,1,0,1,1]) --> A C E F``"
msgstr "``compress('ABCDEF', [1,0,1,0,1,1]) --> A C E F``"

#: ../../library/itertools.rst:54
msgid ":func:`dropwhile`"
msgstr ":func:`dropwhile`"

#: ../../library/itertools.rst:54 ../../library/itertools.rst:55
#: ../../library/itertools.rst:59
msgid "pred, seq"
msgstr "pred, seq"

#: ../../library/itertools.rst:54
msgid "seq[n], seq[n+1], starting when pred fails"
msgstr "seq[n], seq[n+1], iniciando quando pred for falsa"

#: ../../library/itertools.rst:54
msgid "``dropwhile(lambda x: x<5, [1,4,6,4,1]) --> 6 4 1``"
msgstr "``dropwhile(lambda x: x<5, [1,4,6,4,1]) --> 6 4 1``"

#: ../../library/itertools.rst:55
msgid ":func:`filterfalse`"
msgstr ":func:`filterfalse`"

#: ../../library/itertools.rst:55
msgid "elements of seq where pred(elem) is false"
msgstr "elementos de seq onde pred(elem) é falso"

#: ../../library/itertools.rst:55
msgid "``filterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8``"
msgstr "``filterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8``"

#: ../../library/itertools.rst:56
msgid ":func:`groupby`"
msgstr ":func:`groupby`"

#: ../../library/itertools.rst:56
msgid "iterable[, key]"
msgstr "iterable[, key]"

#: ../../library/itertools.rst:56
msgid "sub-iterators grouped by value of key(v)"
msgstr "sub-iteradores agrupados pelo valor de key(v)"

#: ../../library/itertools.rst:57
msgid ":func:`islice`"
msgstr ":func:`islice`"

#: ../../library/itertools.rst:57
msgid "seq, [start,] stop [, step]"
msgstr "seq, [start,] stop [, step]"

#: ../../library/itertools.rst:57
msgid "elements from seq[start:stop:step]"
msgstr "elementos de seq[start:stop:step]"

#: ../../library/itertools.rst:57
msgid "``islice('ABCDEFG', 2, None) --> C D E F G``"
msgstr "``islice('ABCDEFG', 2, None) --> C D E F G``"

#: ../../library/itertools.rst:58
msgid ":func:`starmap`"
msgstr ":func:`starmap`"

#: ../../library/itertools.rst:58
msgid "func, seq"
msgstr "func, seq"

#: ../../library/itertools.rst:58
msgid "func(\\*seq[0]), func(\\*seq[1]), ..."
msgstr "func(\\*seq[0]), func(\\*seq[1]), ..."

#: ../../library/itertools.rst:58
msgid "``starmap(pow, [(2,5), (3,2), (10,3)]) --> 32 9 1000``"
msgstr "``starmap(pow, [(2,5), (3,2), (10,3)]) --> 32 9 1000``"

#: ../../library/itertools.rst:59
msgid ":func:`takewhile`"
msgstr ":func:`takewhile`"

#: ../../library/itertools.rst:59
msgid "seq[0], seq[1], until pred fails"
msgstr "seq[0], seq[1], enquanto pred é falso"

#: ../../library/itertools.rst:59
msgid "``takewhile(lambda x: x<5, [1,4,6,4,1]) --> 1 4``"
msgstr "``takewhile(lambda x: x<5, [1,4,6,4,1]) --> 1 4``"

#: ../../library/itertools.rst:60
msgid ":func:`tee`"
msgstr ":func:`tee`"

#: ../../library/itertools.rst:60
msgid "it, n"
msgstr "it, n"

#: ../../library/itertools.rst:60
msgid "it1, it2, ... itn  splits one iterator into n"
msgstr "n iteradores it independentes"

#: ../../library/itertools.rst:61
msgid ":func:`zip_longest`"
msgstr ":func:`zip_longest`"

#: ../../library/itertools.rst:61
msgid "(p[0], q[0]), (p[1], q[1]), ..."
msgstr "(p[0], q[0]), (p[1], q[1]), ..."

#: ../../library/itertools.rst:61
msgid "``zip_longest('ABCD', 'xy', fillvalue='-') --> Ax By C- D-``"
msgstr "``zip_longest('ABCD', 'xy', fillvalue='-') --> Ax By C- D-``"

#: ../../library/itertools.rst:64
msgid "**Combinatoric iterators:**"
msgstr "**Iteradores combinatórios:**"

#: ../../library/itertools.rst:69
msgid ":func:`product`"
msgstr ":func:`product`"

#: ../../library/itertools.rst:69
msgid "p, q, ... [repeat=1]"
msgstr "p, q, ... [repeat=1]"

#: ../../library/itertools.rst:69
msgid "cartesian product, equivalent to a nested for-loop"
msgstr "produto cartesiano, equivalente a laços ``for`` aninhados"

#: ../../library/itertools.rst:70
msgid ":func:`permutations`"
msgstr ":func:`permutations`"

#: ../../library/itertools.rst:70
msgid "p[, r]"
msgstr "p[, r]"

#: ../../library/itertools.rst:70
msgid "r-length tuples, all possible orderings, no repeated elements"
msgstr ""
"tuplas de tamanho r, com todas ordenações possíveis, sem elementos repetidos"

#: ../../library/itertools.rst:71
msgid ":func:`combinations`"
msgstr ":func:`combinations`"

#: ../../library/itertools.rst:71 ../../library/itertools.rst:72
msgid "p, r"
msgstr "p, r"

#: ../../library/itertools.rst:71
msgid "r-length tuples, in sorted order, no repeated elements"
msgstr "tuplas de tamanho r, ordenadas, sem elementos repetidos"

#: ../../library/itertools.rst:72
msgid ":func:`combinations_with_replacement`"
msgstr ":func:`combinations_with_replacement`"

#: ../../library/itertools.rst:72
msgid "r-length tuples, in sorted order, with repeated elements"
msgstr "tuplas de tamanho r, ordenadas, com elementos repetidos"

#: ../../library/itertools.rst:73
msgid "``product('ABCD', repeat=2)``"
msgstr "``product('ABCD', repeat=2)``"

#: ../../library/itertools.rst:73
msgid "``AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD``"
msgstr "``AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD``"

#: ../../library/itertools.rst:74
msgid "``permutations('ABCD', 2)``"
msgstr "``permutations('ABCD', 2)``"

#: ../../library/itertools.rst:74
msgid "``AB AC AD BA BC BD CA CB CD DA DB DC``"
msgstr "``AB AC AD BA BC BD CA CB CD DA DB DC``"

#: ../../library/itertools.rst:75
msgid "``combinations('ABCD', 2)``"
msgstr "``combinations('ABCD', 2)``"

#: ../../library/itertools.rst:75
msgid "``AB AC AD BC BD CD``"
msgstr "``AB AC AD BC BD CD``"

#: ../../library/itertools.rst:76
msgid "``combinations_with_replacement('ABCD', 2)``"
msgstr ""

#: ../../library/itertools.rst:76
msgid "``AA AB AC AD BB BC BD CC CD DD``"
msgstr "``AA AB AC AD BB BC BD CC CD DD``"

#: ../../library/itertools.rst:83
msgid "Itertool functions"
msgstr "Funções de itertools"

#: ../../library/itertools.rst:85
msgid ""
"The following module functions all construct and return iterators. Some "
"provide streams of infinite length, so they should only be accessed by "
"functions or loops that truncate the stream."
msgstr ""
"Todas as funções a seguir constroem e retorna iteradores. Algumas fornecem "
"fluxos de tamanhos infinitos, assim elas devem ser acessados somente por "
"funções ou laços que interrompem o fluxo."

#: ../../library/itertools.rst:91
msgid ""
"Make an iterator that returns accumulated sums, or accumulated results of "
"other binary functions (specified via the optional *func* argument).  If "
"*func* is supplied, it should be a function of two arguments. Elements of "
"the input *iterable* may be any type that can be accepted as arguments to "
"*func*. (For example, with the default operation of addition, elements may "
"be any addable type including :class:`~decimal.Decimal` or :class:"
"`~fractions.Fraction`.) If the input iterable is empty, the output iterable "
"will also be empty."
msgstr ""

#: ../../library/itertools.rst:101 ../../library/itertools.rst:193
#: ../../library/itertools.rst:242 ../../library/itertools.rst:477
#: ../../library/itertools.rst:556 ../../library/itertools.rst:609
msgid "Roughly equivalent to::"
msgstr "Aproximadamente equivalente a::"

#: ../../library/itertools.rst:117
msgid ""
"There are a number of uses for the *func* argument.  It can be set to :func:"
"`min` for a running minimum, :func:`max` for a running maximum, or :func:"
"`operator.mul` for a running product.  Amortization tables can be built by "
"accumulating interest and applying payments.  First-order `recurrence "
"relations <https://en.wikipedia.org/wiki/Recurrence_relation>`_ can be "
"modeled by supplying the initial value in the iterable and using only the "
"accumulated total in *func* argument::"
msgstr ""
"Existem diversos usos para o argumento *func*.  Ele pode ser definido como a "
"função :func:`min` calcular um valor mínimo, :func:`max` para um valor "
"máximo, ou :func:`operator.mul` para calcular um produto.  Tabelas de "
"amortização podem ser construídas acumulando juros e aplicando pagamentos.  "
"`Relações de recorrência <https://pt.wikipedia.org/wiki/"
"Rela%C3%A7%C3%A3o_de_recorr%C3%AAncia>`_ de primeira ordem podem ser "
"modeladas fornecendo o valor inicial no iterável e usando somente o valor "
"total acumulado no argumento *func*::"

#: ../../library/itertools.rst:147
msgid ""
"See :func:`functools.reduce` for a similar function that returns only the "
"final accumulated value."
msgstr ""
"Veja :func:`functools.reduce` para uma função similar que devolve apenas o "
"valor acumulado final."

#: ../../library/itertools.rst:152
msgid "Added the optional *func* parameter."
msgstr "Adicionado o parâmetro opcional *func*."

#: ../../library/itertools.rst:157
msgid ""
"Make an iterator that returns elements from the first iterable until it is "
"exhausted, then proceeds to the next iterable, until all of the iterables "
"are exhausted.  Used for treating consecutive sequences as a single "
"sequence. Roughly equivalent to::"
msgstr ""
"Cria um iterador que devolve elementos do primeiro iterável até o "
"esgotamento, então continua com o próximo iterável, até que todos os "
"iteráveis sejam esgotados. Usando para tratar sequências consecutivas como "
"uma única sequencia. aproximadamente equivalente a::"

#: ../../library/itertools.rst:171
msgid ""
"Alternate constructor for :func:`chain`.  Gets chained inputs from a single "
"iterable argument that is evaluated lazily.  Roughly equivalent to::"
msgstr ""
"Construtor alternativo para :func:`chain`.  Obtém entradas encadeadas a "
"partir de um único argumento iterável que avaliado preguiçosamente.  "
"Aproximadamente equivalente a::"

#: ../../library/itertools.rst:183
msgid "Return *r* length subsequences of elements from the input *iterable*."
msgstr ""
"Devolve subsequências de elementos com comprimento *r* a partir da entrada "
"*iterável*"

#: ../../library/itertools.rst:185 ../../library/itertools.rst:234
msgid ""
"Combinations are emitted in lexicographic sort order.  So, if the input "
"*iterable* is sorted, the combination tuples will be produced in sorted "
"order."
msgstr ""

#: ../../library/itertools.rst:189
msgid ""
"Elements are treated as unique based on their position, not on their value.  "
"So if the input elements are unique, there will be no repeat values in each "
"combination."
msgstr ""
"Os elementos são tratados como únicos baseado em suas posições, não em seus "
"valores. Portanto se os elementos de entrada são únicos, não haverá "
"repetição de valores nas sucessivas combinações."

#: ../../library/itertools.rst:215
msgid ""
"The code for :func:`combinations` can be also expressed as a subsequence of :"
"func:`permutations` after filtering entries where the elements are not in "
"sorted order (according to their position in the input pool)::"
msgstr ""

#: ../../library/itertools.rst:226
msgid ""
"The number of items returned is ``n! / r! / (n-r)!`` when ``0 <= r <= n`` or "
"zero when ``r > n``."
msgstr ""

#: ../../library/itertools.rst:231
msgid ""
"Return *r* length subsequences of elements from the input *iterable* "
"allowing individual elements to be repeated more than once."
msgstr ""
"Devolve subsequências de comprimento *r* de elementos do *iterável* de "
"entrada permitindo que elementos individuais sejam repetidos mais de uma vez."

#: ../../library/itertools.rst:238
msgid ""
"Elements are treated as unique based on their position, not on their value.  "
"So if the input elements are unique, the generated combinations will also be "
"unique."
msgstr ""

#: ../../library/itertools.rst:261
msgid ""
"The code for :func:`combinations_with_replacement` can be also expressed as "
"a subsequence of :func:`product` after filtering entries where the elements "
"are not in sorted order (according to their position in the input pool)::"
msgstr ""

#: ../../library/itertools.rst:272
msgid ""
"The number of items returned is ``(n+r-1)! / r! / (n-1)!`` when ``n > 0``."
msgstr ""

#: ../../library/itertools.rst:279
msgid ""
"Make an iterator that filters elements from *data* returning only those that "
"have a corresponding element in *selectors* that evaluates to ``True``. "
"Stops when either the *data* or *selectors* iterables has been exhausted. "
"Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:293
msgid ""
"Make an iterator that returns evenly spaced values starting with number "
"*start*. Often used as an argument to :func:`map` to generate consecutive "
"data points. Also, used with :func:`zip` to add sequence numbers.  Roughly "
"equivalent to::"
msgstr ""

#: ../../library/itertools.rst:305
msgid ""
"When counting with floating point numbers, better accuracy can sometimes be "
"achieved by substituting multiplicative code such as: ``(start + step * i "
"for i in count())``."
msgstr ""

#: ../../library/itertools.rst:309
msgid "Added *step* argument and allowed non-integer arguments."
msgstr "Adicionou argumento *step* e permitiu argumentos não-inteiros."

#: ../../library/itertools.rst:314
msgid ""
"Make an iterator returning elements from the iterable and saving a copy of "
"each. When the iterable is exhausted, return elements from the saved copy.  "
"Repeats indefinitely.  Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:328
msgid ""
"Note, this member of the toolkit may require significant auxiliary storage "
"(depending on the length of the iterable)."
msgstr ""

#: ../../library/itertools.rst:334
msgid ""
"Make an iterator that drops elements from the iterable as long as the "
"predicate is true; afterwards, returns every element.  Note, the iterator "
"does not produce *any* output until the predicate first becomes false, so it "
"may have a lengthy start-up time.  Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:351
msgid ""
"Make an iterator that filters elements from iterable returning only those "
"for which the predicate is ``False``. If *predicate* is ``None``, return the "
"items that are false. Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:366
msgid ""
"Make an iterator that returns consecutive keys and groups from the "
"*iterable*. The *key* is a function computing a key value for each element.  "
"If not specified or is ``None``, *key* defaults to an identity function and "
"returns the element unchanged.  Generally, the iterable needs to already be "
"sorted on the same key function."
msgstr ""

#: ../../library/itertools.rst:372
msgid ""
"The operation of :func:`groupby` is similar to the ``uniq`` filter in Unix.  "
"It generates a break or new group every time the value of the key function "
"changes (which is why it is usually necessary to have sorted the data using "
"the same key function).  That behavior differs from SQL's GROUP BY which "
"aggregates common elements regardless of their input order."
msgstr ""

#: ../../library/itertools.rst:378
msgid ""
"The returned group is itself an iterator that shares the underlying iterable "
"with :func:`groupby`.  Because the source is shared, when the :func:"
"`groupby` object is advanced, the previous group is no longer visible.  So, "
"if that data is needed later, it should be stored as a list::"
msgstr ""

#: ../../library/itertools.rst:390
msgid ":func:`groupby` is roughly equivalent to::"
msgstr ":func:`groupby` é aproximadamente equivalente a::"

#: ../../library/itertools.rst:422
msgid ""
"Make an iterator that returns selected elements from the iterable. If "
"*start* is non-zero, then elements from the iterable are skipped until start "
"is reached. Afterward, elements are returned consecutively unless *step* is "
"set higher than one which results in items being skipped.  If *stop* is "
"``None``, then iteration continues until the iterator is exhausted, if at "
"all; otherwise, it stops at the specified position.  Unlike regular "
"slicing, :func:`islice` does not support negative values for *start*, "
"*stop*, or *step*.  Can be used to extract related fields from data where "
"the internal structure has been flattened (for example, a multi-line report "
"may list a name field on every third line).  Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:457
msgid ""
"If *start* is ``None``, then iteration starts at zero. If *step* is "
"``None``, then the step defaults to one."
msgstr ""

#: ../../library/itertools.rst:463
msgid ""
"Return successive *r* length permutations of elements in the *iterable*."
msgstr ""

#: ../../library/itertools.rst:465
msgid ""
"If *r* is not specified or is ``None``, then *r* defaults to the length of "
"the *iterable* and all possible full-length permutations are generated."
msgstr ""

#: ../../library/itertools.rst:469
msgid ""
"Permutations are emitted in lexicographic sort order.  So, if the input "
"*iterable* is sorted, the permutation tuples will be produced in sorted "
"order."
msgstr ""

#: ../../library/itertools.rst:473
msgid ""
"Elements are treated as unique based on their position, not on their value.  "
"So if the input elements are unique, there will be no repeat values in each "
"permutation."
msgstr ""

#: ../../library/itertools.rst:504
msgid ""
"The code for :func:`permutations` can be also expressed as a subsequence of :"
"func:`product`, filtered to exclude entries with repeated elements (those "
"from the same position in the input pool)::"
msgstr ""

#: ../../library/itertools.rst:516
msgid ""
"The number of items returned is ``n! / (n-r)!`` when ``0 <= r <= n`` or zero "
"when ``r > n``."
msgstr ""
"O número de itens retornado é ``n! / (n-r)!`` quando ``0 <= r <= n`` ou zero "
"quando ``r > n``."

#: ../../library/itertools.rst:521
msgid "Cartesian product of input iterables."
msgstr "Produto cartesiano de iteráveis de entrada"

#: ../../library/itertools.rst:523
msgid ""
"Roughly equivalent to nested for-loops in a generator expression. For "
"example, ``product(A, B)`` returns the same as ``((x,y) for x in A for y in "
"B)``."
msgstr ""
"Aproximadamente equivalente a laços for aninhados em uma expressão geradora. "
"Por exemplo, ``product(A, B)`` devolve o mesmo que ``((x,y) for x in A for y "
"in B)``."

#: ../../library/itertools.rst:526
msgid ""
"The nested loops cycle like an odometer with the rightmost element advancing "
"on every iteration.  This pattern creates a lexicographic ordering so that "
"if the input's iterables are sorted, the product tuples are emitted in "
"sorted order."
msgstr ""
"Os laços aninhados circulam como um hodômetro com o elemento mais à direita "
"avançando a cada iteração. Este padrão cria uma ordenação lexicográfica de "
"maneira que se os iteráveis de entrada estiverem ordenados, as tuplas "
"produzidas são emitidas de maneira ordenada."

#: ../../library/itertools.rst:531
msgid ""
"To compute the product of an iterable with itself, specify the number of "
"repetitions with the optional *repeat* keyword argument.  For example, "
"``product(A, repeat=4)`` means the same as ``product(A, A, A, A)``."
msgstr ""

#: ../../library/itertools.rst:535
msgid ""
"This function is roughly equivalent to the following code, except that the "
"actual implementation does not build up intermediate results in memory::"
msgstr ""

#: ../../library/itertools.rst:551
msgid ""
"Make an iterator that returns *object* over and over again. Runs "
"indefinitely unless the *times* argument is specified. Used as argument to :"
"func:`map` for invariant parameters to the called function.  Also used with :"
"func:`zip` to create an invariant part of a tuple record."
msgstr ""

#: ../../library/itertools.rst:567
msgid ""
"A common use for *repeat* is to supply a stream of constant values to *map* "
"or *zip*::"
msgstr ""

#: ../../library/itertools.rst:575
msgid ""
"Make an iterator that computes the function using arguments obtained from "
"the iterable.  Used instead of :func:`map` when argument parameters are "
"already grouped in tuples from a single iterable (the data has been \"pre-"
"zipped\").  The difference between :func:`map` and :func:`starmap` parallels "
"the distinction between ``function(a,b)`` and ``function(*c)``. Roughly "
"equivalent to::"
msgstr ""

#: ../../library/itertools.rst:589
msgid ""
"Make an iterator that returns elements from the iterable as long as the "
"predicate is true.  Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:603
msgid "Return *n* independent iterators from a single iterable."
msgstr ""

#: ../../library/itertools.rst:605
msgid ""
"The following Python code helps explain what *tee* does (although the actual "
"implementation is more complex and uses only a single underlying :abbr:`FIFO "
"(first-in, first-out)` queue)."
msgstr ""

#: ../../library/itertools.rst:626
msgid ""
"Once :func:`tee` has made a split, the original *iterable* should not be "
"used anywhere else; otherwise, the *iterable* could get advanced without the "
"tee objects being informed."
msgstr ""

#: ../../library/itertools.rst:630
msgid ""
"This itertool may require significant auxiliary storage (depending on how "
"much temporary data needs to be stored). In general, if one iterator uses "
"most or all of the data before another iterator starts, it is faster to use :"
"func:`list` instead of :func:`tee`."
msgstr ""

#: ../../library/itertools.rst:638
msgid ""
"Make an iterator that aggregates elements from each of the iterables. If the "
"iterables are of uneven length, missing values are filled-in with "
"*fillvalue*. Iteration continues until the longest iterable is exhausted.  "
"Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:663
msgid ""
"If one of the iterables is potentially infinite, then the :func:"
"`zip_longest` function should be wrapped with something that limits the "
"number of calls (for example :func:`islice` or :func:`takewhile`).  If not "
"specified, *fillvalue* defaults to ``None``."
msgstr ""

#: ../../library/itertools.rst:672
msgid "Itertools Recipes"
msgstr "Receitas com itertools"

#: ../../library/itertools.rst:674
msgid ""
"This section shows recipes for creating an extended toolset using the "
"existing itertools as building blocks."
msgstr ""
"Esta seção mostra receitas para criação de um ferramental ampliado usando as "
"ferramentas existentes de itertools como elementos construtivos."

#: ../../library/itertools.rst:677
msgid ""
"The extended tools offer the same high performance as the underlying "
"toolset. The superior memory performance is kept by processing elements one "
"at a time rather than bringing the whole iterable into memory all at once. "
"Code volume is kept small by linking the tools together in a functional "
"style which helps eliminate temporary variables.  High speed is retained by "
"preferring \"vectorized\" building blocks over the use of for-loops and :"
"term:`generator`\\s which incur interpreter overhead."
msgstr ""

#: ../../library/itertools.rst:899
msgid ""
"Note, many of the above recipes can be optimized by replacing global lookups "
"with local variables defined as default values.  For example, the "
"*dotproduct* recipe can be written as::"
msgstr ""
