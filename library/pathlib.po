# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-31 11:30+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/pathlib.rst:2
msgid ":mod:`!pathlib` --- Object-oriented filesystem paths"
msgstr ""
":mod:`!pathlib` --- Caminhos do sistema de arquivos orientados a objetos"

#: ../../library/pathlib.rst:9
msgid "**Source code:** :source:`Lib/pathlib.py`"
msgstr ""

#: ../../library/pathlib.rst:15
msgid ""
"This module offers classes representing filesystem paths with semantics "
"appropriate for different operating systems.  Path classes are divided "
"between :ref:`pure paths <pure-paths>`, which provide purely computational "
"operations without I/O, and :ref:`concrete paths <concrete-paths>`, which "
"inherit from pure paths but also provide I/O operations."
msgstr ""
"Este módulo oferece classes que representam caminhos de sistema de arquivos "
"com semântica apropriada para diferentes sistemas operacionais. As classes "
"de caminho são divididas entre :ref:`caminhos puros <pure-paths>`, que "
"fornecem operações puramente computacionais sem E/S, e :ref:`caminhos "
"concretos <concrete-paths>`, que herdam de caminhos puros, mas também "
"fornecem operações de E/S."

#: ../../library/pathlib.rst:21
msgid ""
"Inheritance diagram showing the classes available in pathlib. The\n"
"most basic class is PurePath, which has three direct subclasses:\n"
"PurePosixPath, PureWindowsPath, and Path. Further to these four\n"
"classes, there are two classes that use multiple inheritance:\n"
"PosixPath subclasses PurePosixPath and Path, and WindowsPath\n"
"subclasses PureWindowsPath and Path."
msgstr ""
"Diagrama de herança mostrando as classes disponíveis em pathlib. A classe "
"mais básica é PurePath, que tem três subclasses diretas: PurePosixPath, "
"PureWindowsPath e Path. Além dessas quatro classes, há duas classes que usam "
"herança múltipla: subclasses de PosixPath chamadas PurePosixPath e Path, e "
"subclasses de WindowsPath chamadas PureWindowsPath e Path."

#: ../../library/pathlib.rst:31
msgid ""
"If you've never used this module before or just aren't sure which class is "
"right for your task, :class:`Path` is most likely what you need. It "
"instantiates a :ref:`concrete path <concrete-paths>` for the platform the "
"code is running on."
msgstr ""
"Se você nunca usou este módulo antes ou apenas não tem certeza de qual "
"classe é a certa para sua tarefa, provavelmente :class:`Path` é o que você "
"precisa. Ele instancia um :ref:`caminho concreto <concrete-paths>` para a "
"plataforma em que o código está sendo executado."

#: ../../library/pathlib.rst:35
msgid "Pure paths are useful in some special cases; for example:"
msgstr "Caminhos puros são úteis em alguns casos especiais. Por exemplo:"

#: ../../library/pathlib.rst:37
msgid ""
"If you want to manipulate Windows paths on a Unix machine (or vice versa). "
"You cannot instantiate a :class:`WindowsPath` when running on Unix, but you "
"can instantiate :class:`PureWindowsPath`."
msgstr ""
"Se você deseja manipular os caminhos do Windows em uma máquina Unix (ou vice-"
"versa). Você não pode instanciar uma :class:`WindowsPath` quando executado "
"no Unix, mas você pode instanciar :class:`PureWindowsPath`."

#: ../../library/pathlib.rst:40
msgid ""
"You want to make sure that your code only manipulates paths without actually "
"accessing the OS. In this case, instantiating one of the pure classes may be "
"useful since those simply don't have any OS-accessing operations."
msgstr ""
"Você quer ter certeza de que seu código apenas manipula caminhos, sem "
"realmente acessar o sistema operacional. Nesse caso, instanciar uma das "
"classes puras pode ser útil, pois elas simplesmente não têm nenhuma operação "
"de acesso ao sistema operacional."

#: ../../library/pathlib.rst:45
msgid ":pep:`428`: The pathlib module -- object-oriented filesystem paths."
msgstr ""
":pep:`428`: O módulo pathlib -- caminhos de sistema de arquivos orientados a "
"objetos."

#: ../../library/pathlib.rst:48
msgid ""
"For low-level path manipulation on strings, you can also use the :mod:`os."
"path` module."
msgstr ""
"Para manipulação de caminho de baixo nível em strings, você também pode usar "
"o módulo :mod:`os.path`."

#: ../../library/pathlib.rst:53
msgid "Basic use"
msgstr "Uso básico"

#: ../../library/pathlib.rst:55
msgid "Importing the main class::"
msgstr "Importação da classe principal::"

#: ../../library/pathlib.rst:57
msgid ">>> from pathlib import Path"
msgstr ""

#: ../../library/pathlib.rst:59
msgid "Listing subdirectories::"
msgstr "Listando os subdiretórios::"

#: ../../library/pathlib.rst:61
msgid ""
">>> p = Path('.')\n"
">>> [x for x in p.iterdir() if x.is_dir()]\n"
"[PosixPath('.hg'), PosixPath('docs'), PosixPath('dist'),\n"
" PosixPath('__pycache__'), PosixPath('build')]"
msgstr ""

#: ../../library/pathlib.rst:66
msgid "Listing Python source files in this directory tree::"
msgstr "Listando os arquivos fontes do Python e sua árvore de diretórios::"

#: ../../library/pathlib.rst:68
msgid ""
">>> list(p.glob('**/*.py'))\n"
"[PosixPath('test_pathlib.py'), PosixPath('setup.py'),\n"
" PosixPath('pathlib.py'), PosixPath('docs/conf.py'),\n"
" PosixPath('build/lib/pathlib.py')]"
msgstr ""

#: ../../library/pathlib.rst:73
msgid "Navigating inside a directory tree::"
msgstr "Navegando dentro da árvore de diretórios::"

#: ../../library/pathlib.rst:75
msgid ""
">>> p = Path('/etc')\n"
">>> q = p / 'init.d' / 'reboot'\n"
">>> q\n"
"PosixPath('/etc/init.d/reboot')\n"
">>> q.resolve()\n"
"PosixPath('/etc/rc.d/init.d/halt')"
msgstr ""

#: ../../library/pathlib.rst:82
msgid "Querying path properties::"
msgstr "Consultando as propriedades do path::"

#: ../../library/pathlib.rst:84
msgid ""
">>> q.exists()\n"
"True\n"
">>> q.is_dir()\n"
"False"
msgstr ""

#: ../../library/pathlib.rst:89
msgid "Opening a file::"
msgstr "Abrindo um arquivo::"

#: ../../library/pathlib.rst:91
msgid ""
">>> with q.open() as f: f.readline()\n"
"...\n"
"'#!/bin/bash\\n'"
msgstr ""

#: ../../library/pathlib.rst:99
msgid "Pure paths"
msgstr "Caminhos puros"

#: ../../library/pathlib.rst:101
msgid ""
"Pure path objects provide path-handling operations which don't actually "
"access a filesystem.  There are three ways to access these classes, which we "
"also call *flavours*:"
msgstr ""
"Objetos de caminho puro fornecem operações de manipulação de caminho que, na "
"verdade, não acessam um sistema de arquivos. Existem três maneiras de "
"acessar essas classes, que também chamamos de *sabores*:"

#: ../../library/pathlib.rst:107
msgid ""
"A generic class that represents the system's path flavour (instantiating it "
"creates either a :class:`PurePosixPath` or a :class:`PureWindowsPath`)::"
msgstr ""
"Uma classe genérica que representa o tipo de caminho do sistema "
"(instanciando-a cria uma :class:`PurePosixPath` ou uma :class:"
"`PureWindowsPath`)::"

#: ../../library/pathlib.rst:110
msgid ""
">>> PurePath('setup.py')      # Running on a Unix machine\n"
"PurePosixPath('setup.py')"
msgstr ""

#: ../../library/pathlib.rst:113
msgid ""
"Each element of *pathsegments* can be either a string representing a path "
"segment, or an object implementing the :class:`os.PathLike` interface where "
"the :meth:`~os.PathLike.__fspath__` method returns a string, such as another "
"path object::"
msgstr ""
"Cada elemento de *pathsegments* pode ser uma string representando um "
"segmento de caminho, um objeto que implementa a interface  que retorna uma "
"string ou um objeto implementando a interface :class:`os.PathLike`, onde o "
"método :meth:`~os.PathLike.__fspath__` retorna uma string, como outro objeto "
"caminho::"

#: ../../library/pathlib.rst:118
msgid ""
">>> PurePath('foo', 'some/path', 'bar')\n"
"PurePosixPath('foo/some/path/bar')\n"
">>> PurePath(Path('foo'), Path('bar'))\n"
"PurePosixPath('foo/bar')"
msgstr ""

#: ../../library/pathlib.rst:123
msgid "When *pathsegments* is empty, the current directory is assumed::"
msgstr "Quando *pathsegments* está vazio, o diretório atual é presumido::"

#: ../../library/pathlib.rst:125
msgid ""
">>> PurePath()\n"
"PurePosixPath('.')"
msgstr ""

#: ../../library/pathlib.rst:128
msgid ""
"If a segment is an absolute path, all previous segments are ignored (like :"
"func:`os.path.join`)::"
msgstr ""
"Se um segmento for um caminho absoluto, todos os segmentos anteriores serão "
"ignorados (como :func:`os.path.join`)::"

#: ../../library/pathlib.rst:131
msgid ""
">>> PurePath('/etc', '/usr', 'lib64')\n"
"PurePosixPath('/usr/lib64')\n"
">>> PureWindowsPath('c:/Windows', 'd:bar')\n"
"PureWindowsPath('d:bar')"
msgstr ""

#: ../../library/pathlib.rst:136
msgid ""
"On Windows, the drive is not reset when a rooted relative path segment (e."
"g., ``r'\\foo'``) is encountered::"
msgstr ""
"No Windows, a unidade não é redefinida quando um segmento de caminho "
"relativo enraizado (por exemplo, ``r'\\foo'``) é encontrado::"

#: ../../library/pathlib.rst:139
msgid ""
">>> PureWindowsPath('c:/Windows', '/Program Files')\n"
"PureWindowsPath('c:/Program Files')"
msgstr ""

#: ../../library/pathlib.rst:142
msgid ""
"Spurious slashes and single dots are collapsed, but double dots (``'..'``) "
"and leading double slashes (``'//'``) are not, since this would change the "
"meaning of a path for various reasons (e.g. symbolic links, UNC paths)::"
msgstr ""
"Barras espúrias e pontos simples são recolhidos, mas pontos duplos "
"(``'..'``) e barras duplas iniciais (``'//'``) não são, pois isso mudaria o "
"significado de um caminho por vários motivos (por exemplo, links simbólicos, "
"caminhos UNC)::"

#: ../../library/pathlib.rst:146
msgid ""
">>> PurePath('foo//bar')\n"
"PurePosixPath('foo/bar')\n"
">>> PurePath('//foo/bar')\n"
"PurePosixPath('//foo/bar')\n"
">>> PurePath('foo/./bar')\n"
"PurePosixPath('foo/bar')\n"
">>> PurePath('foo/../bar')\n"
"PurePosixPath('foo/../bar')"
msgstr ""

#: ../../library/pathlib.rst:155
msgid ""
"(a naïve approach would make ``PurePosixPath('foo/../bar')`` equivalent to "
"``PurePosixPath('bar')``, which is wrong if ``foo`` is a symbolic link to "
"another directory)"
msgstr ""
"(uma abordagem ingênua seria criar ``PurePosixPath('foo/../bar')`` "
"equivalente a ``PurePosixPath('bar')``, o que é errado se ``foo`` for um "
"link simbólico para outro diretório)"

#: ../../library/pathlib.rst:159
msgid ""
"Pure path objects implement the :class:`os.PathLike` interface, allowing "
"them to be used anywhere the interface is accepted."
msgstr ""
"Objetos caminho puro implementam a interface :class:`os.PathLike`, "
"permitindo que sejam usados em qualquer lugar em que a interface seja aceita."

#: ../../library/pathlib.rst:162
msgid "Added support for the :class:`os.PathLike` interface."
msgstr "Adicionado suporte para a interface :class:`os.PathLike`."

#: ../../library/pathlib.rst:167
msgid ""
"A subclass of :class:`PurePath`, this path flavour represents non-Windows "
"filesystem paths::"
msgstr ""
"Uma subclasse de :class:`PurePath`, este tipo de caminho representa caminhos "
"de sistema de arquivos não Windows::"

#: ../../library/pathlib.rst:170
msgid ""
">>> PurePosixPath('/etc/hosts')\n"
"PurePosixPath('/etc/hosts')"
msgstr ""

#: ../../library/pathlib.rst:173 ../../library/pathlib.rst:185
#: ../../library/pathlib.rst:758 ../../library/pathlib.rst:768
#: ../../library/pathlib.rst:778
msgid "*pathsegments* is specified similarly to :class:`PurePath`."
msgstr "*pathsegments* é especificado de forma similar para :class:`PurePath`."

#: ../../library/pathlib.rst:177
msgid ""
"A subclass of :class:`PurePath`, this path flavour represents Windows "
"filesystem paths, including `UNC paths`_::"
msgstr ""
"Uma subclasse de :class:`PurePath`, este tipo de caminho representa os "
"caminhos do sistema de arquivos do Windows, incluindo `Caminhos UNC`_::"

#: ../../library/pathlib.rst:180
msgid ""
">>> PureWindowsPath('c:/', 'Users', 'Ximénez')\n"
"PureWindowsPath('c:/Users/Ximénez')\n"
">>> PureWindowsPath('//server/share/file')\n"
"PureWindowsPath('//server/share/file')"
msgstr ""

#: ../../library/pathlib.rst:189
msgid ""
"Regardless of the system you're running on, you can instantiate all of these "
"classes, since they don't provide any operation that does system calls."
msgstr ""
"Independentemente do sistema em que você está usando, você pode instanciar "
"todas essas classes, uma vez que elas não fornecem nenhuma operação que faça "
"chamadas de sistema."

#: ../../library/pathlib.rst:194
msgid "General properties"
msgstr "Propriedades gerais"

#: ../../library/pathlib.rst:196
msgid ""
"Paths are immutable and :term:`hashable`.  Paths of a same flavour are "
"comparable and orderable.  These properties respect the flavour's case-"
"folding semantics::"
msgstr ""
"Os caminhos são imutáveis e :term:`hasheáveis <hasheável>`. Os caminhos do "
"mesmo sabor são comparáveis e ordenáveis. Essas propriedades respeitam a "
"semântica de caixa alta e baixa do sabor:"

#: ../../library/pathlib.rst:200
msgid ""
">>> PurePosixPath('foo') == PurePosixPath('FOO')\n"
"False\n"
">>> PureWindowsPath('foo') == PureWindowsPath('FOO')\n"
"True\n"
">>> PureWindowsPath('FOO') in { PureWindowsPath('foo') }\n"
"True\n"
">>> PureWindowsPath('C:') < PureWindowsPath('d:')\n"
"True"
msgstr ""

#: ../../library/pathlib.rst:209
msgid "Paths of a different flavour compare unequal and cannot be ordered::"
msgstr ""
"Caminhos de um sabor diferente são comparados de forma desigual e não podem "
"ser ordenados::"

#: ../../library/pathlib.rst:211
msgid ""
">>> PureWindowsPath('foo') == PurePosixPath('foo')\n"
"False\n"
">>> PureWindowsPath('foo') < PurePosixPath('foo')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: '<' not supported between instances of 'PureWindowsPath' and "
"'PurePosixPath'"
msgstr ""

#: ../../library/pathlib.rst:220
msgid "Operators"
msgstr "Operadores"

#: ../../library/pathlib.rst:222
msgid ""
"The slash operator helps create child paths, like :func:`os.path.join`. If "
"the argument is an absolute path, the previous path is ignored. On Windows, "
"the drive is not reset when the argument is a rooted relative path (e.g., "
"``r'\\foo'``)::"
msgstr ""
"O operador barra ajuda a criar caminhos filhos, como :func:`os.path.join`. "
"Se o argumento for um caminho absoluto, o caminho anterior será ignorado. No "
"Windows, a unidade não é redefinida quando o argumento é um caminho relativo "
"enraizado (por exemplo, ``r'\\foo'``)::"

#: ../../library/pathlib.rst:227
msgid ""
">>> p = PurePath('/etc')\n"
">>> p\n"
"PurePosixPath('/etc')\n"
">>> p / 'init.d' / 'apache2'\n"
"PurePosixPath('/etc/init.d/apache2')\n"
">>> q = PurePath('bin')\n"
">>> '/usr' / q\n"
"PurePosixPath('/usr/bin')\n"
">>> p / '/an_absolute_path'\n"
"PurePosixPath('/an_absolute_path')\n"
">>> PureWindowsPath('c:/Windows', '/Program Files')\n"
"PureWindowsPath('c:/Program Files')"
msgstr ""

#: ../../library/pathlib.rst:240
msgid ""
"A path object can be used anywhere an object implementing :class:`os."
"PathLike` is accepted::"
msgstr ""
"Um objeto de caminho pode ser usado em qualquer lugar em que um objeto "
"implementando :class:`os.PathLike` seja aceito::"

#: ../../library/pathlib.rst:243
msgid ""
">>> import os\n"
">>> p = PurePath('/etc')\n"
">>> os.fspath(p)\n"
"'/etc'"
msgstr ""

#: ../../library/pathlib.rst:248
msgid ""
"The string representation of a path is the raw filesystem path itself (in "
"native form, e.g. with backslashes under Windows), which you can pass to any "
"function taking a file path as a string::"
msgstr ""
"A representação de string de um caminho é o próprio caminho do sistema de "
"arquivos bruto (na forma nativa, por exemplo, com contrabarras no Windows), "
"que você pode passar para qualquer função usando um caminho de arquivo como "
"uma string::"

#: ../../library/pathlib.rst:252
msgid ""
">>> p = PurePath('/etc')\n"
">>> str(p)\n"
"'/etc'\n"
">>> p = PureWindowsPath('c:/Program Files')\n"
">>> str(p)\n"
"'c:\\\\Program Files'"
msgstr ""

#: ../../library/pathlib.rst:259
msgid ""
"Similarly, calling :class:`bytes` on a path gives the raw filesystem path as "
"a bytes object, as encoded by :func:`os.fsencode`::"
msgstr ""
"Da mesma forma, chamar :class:`bytes` em um caminho fornece o caminho do "
"sistema de arquivos bruto como um objeto bytes, codificado por :func:`os."
"fsencode`::"

#: ../../library/pathlib.rst:262
msgid ""
">>> bytes(p)\n"
"b'/etc'"
msgstr ""

#: ../../library/pathlib.rst:266
msgid ""
"Calling :class:`bytes` is only recommended under Unix.  Under Windows, the "
"unicode form is the canonical representation of filesystem paths."
msgstr ""
"A chamada de :class:`bytes` só é recomendada no Unix. No Windows, a forma "
"Unicode é a representação canônica dos caminhos do sistema de arquivos."

#: ../../library/pathlib.rst:271
msgid "Accessing individual parts"
msgstr "Acessando partes individuais"

#: ../../library/pathlib.rst:273
msgid ""
"To access the individual \"parts\" (components) of a path, use the following "
"property:"
msgstr ""
"Para acessar as \"partes\" individuais (componentes) de um caminho, use a "
"seguinte propriedade:"

#: ../../library/pathlib.rst:278
msgid "A tuple giving access to the path's various components::"
msgstr "Uma tupla que dá acesso aos vários componentes do caminho::"

#: ../../library/pathlib.rst:280
msgid ""
">>> p = PurePath('/usr/bin/python3')\n"
">>> p.parts\n"
"('/', 'usr', 'bin', 'python3')\n"
"\n"
">>> p = PureWindowsPath('c:/Program Files/PSF')\n"
">>> p.parts\n"
"('c:\\\\', 'Program Files', 'PSF')"
msgstr ""

#: ../../library/pathlib.rst:288
msgid "(note how the drive and local root are regrouped in a single part)"
msgstr ""
"(observe como a unidade e a raiz local são reagrupadas em uma única parte)"

#: ../../library/pathlib.rst:292
msgid "Methods and properties"
msgstr "Métodos e propriedades"

#: ../../library/pathlib.rst:298
msgid "Pure paths provide the following methods and properties:"
msgstr "Caminhos puros fornecem os seguintes métodos e propriedades:"

#: ../../library/pathlib.rst:302
msgid "A string representing the drive letter or name, if any::"
msgstr "Uma string que representa a letra ou nome da unidade, se houver::"

#: ../../library/pathlib.rst:304
msgid ""
">>> PureWindowsPath('c:/Program Files/').drive\n"
"'c:'\n"
">>> PureWindowsPath('/Program Files/').drive\n"
"''\n"
">>> PurePosixPath('/etc').drive\n"
"''"
msgstr ""

#: ../../library/pathlib.rst:311
msgid "UNC shares are also considered drives::"
msgstr "Os compartilhamentos UNC também são considerados unidades::"

#: ../../library/pathlib.rst:313
msgid ""
">>> PureWindowsPath('//host/share/foo.txt').drive\n"
"'\\\\\\\\host\\\\share'"
msgstr ""

#: ../../library/pathlib.rst:318
msgid "A string representing the (local or global) root, if any::"
msgstr "Uma string que representa a raiz (local ou global), se houver:"

#: ../../library/pathlib.rst:320
msgid ""
">>> PureWindowsPath('c:/Program Files/').root\n"
"'\\\\'\n"
">>> PureWindowsPath('c:Program Files/').root\n"
"''\n"
">>> PurePosixPath('/etc').root\n"
"'/'"
msgstr ""

#: ../../library/pathlib.rst:327
msgid "UNC shares always have a root::"
msgstr "Os compartilhamentos UNC sempre têm uma raiz::"

#: ../../library/pathlib.rst:329
msgid ""
">>> PureWindowsPath('//host/share').root\n"
"'\\\\'"
msgstr ""

#: ../../library/pathlib.rst:332
msgid ""
"If the path starts with more than two successive slashes, :class:`~pathlib."
"PurePosixPath` collapses them::"
msgstr ""
"Se o caminho começa com mais de duas barras sucessivas, :class:`~pathlib."
"PurePosixPath` as recolhe::"

#: ../../library/pathlib.rst:335
msgid ""
">>> PurePosixPath('//etc').root\n"
"'//'\n"
">>> PurePosixPath('///etc').root\n"
"'/'\n"
">>> PurePosixPath('////etc').root\n"
"'/'"
msgstr ""

#: ../../library/pathlib.rst:344
msgid ""
"This behavior conforms to *The Open Group Base Specifications Issue 6*, "
"paragraph `4.11 Pathname Resolution <https://pubs.opengroup.org/"
"onlinepubs/009695399/basedefs/xbd_chap04.html#tag_04_11>`_:"
msgstr ""
"Este comportamento está em conformidade com o parágrafo `4.11 Pathname "
"Resolution <https://pubs.opengroup.org/onlinepubs/009695399/basedefs/"
"xbd_chap04.html#tag_04_11>`_ do *The Open Group Base Specifications Issue 6*:"

#: ../../library/pathlib.rst:348
msgid ""
"*\"A pathname that begins with two successive slashes may be interpreted in "
"an implementation-defined manner, although more than two leading slashes "
"shall be treated as a single slash.\"*"
msgstr ""
"*\"Um nome de caminho que começa com duas barras sucessivas pode ser "
"interpretado de maneira definida pela implementação, embora mais de duas "
"barras iniciais devam ser tratadas como uma única barra.\"*"

#: ../../library/pathlib.rst:354
msgid "The concatenation of the drive and root::"
msgstr "A concatenação da unidade e da raiz::"

#: ../../library/pathlib.rst:356
msgid ""
">>> PureWindowsPath('c:/Program Files/').anchor\n"
"'c:\\\\'\n"
">>> PureWindowsPath('c:Program Files/').anchor\n"
"'c:'\n"
">>> PurePosixPath('/etc').anchor\n"
"'/'\n"
">>> PureWindowsPath('//host/share').anchor\n"
"'\\\\\\\\host\\\\share\\\\'"
msgstr ""

#: ../../library/pathlib.rst:368
msgid ""
"An immutable sequence providing access to the logical ancestors of the path::"
msgstr ""
"Uma sequência imutável que fornece acesso aos ancestrais lógicos do caminho:"

#: ../../library/pathlib.rst:371
msgid ""
">>> p = PureWindowsPath('c:/foo/bar/setup.py')\n"
">>> p.parents[0]\n"
"PureWindowsPath('c:/foo/bar')\n"
">>> p.parents[1]\n"
"PureWindowsPath('c:/foo')\n"
">>> p.parents[2]\n"
"PureWindowsPath('c:/')"
msgstr ""

#: ../../library/pathlib.rst:379
msgid ""
"The parents sequence now supports :term:`slices <slice>` and negative index "
"values."
msgstr ""
"A sequência pai agora tem suporte :term:`fatias <slice>` e valores de índice "
"negativos."

#: ../../library/pathlib.rst:384
msgid "The logical parent of the path::"
msgstr "O pai lógico do caminho::"

#: ../../library/pathlib.rst:386
msgid ""
">>> p = PurePosixPath('/a/b/c/d')\n"
">>> p.parent\n"
"PurePosixPath('/a/b/c')"
msgstr ""

#: ../../library/pathlib.rst:390
msgid "You cannot go past an anchor, or empty path::"
msgstr "Você não pode passar por uma âncora ou caminho vazio::"

#: ../../library/pathlib.rst:392
msgid ""
">>> p = PurePosixPath('/')\n"
">>> p.parent\n"
"PurePosixPath('/')\n"
">>> p = PurePosixPath('.')\n"
">>> p.parent\n"
"PurePosixPath('.')"
msgstr ""

#: ../../library/pathlib.rst:400
msgid "This is a purely lexical operation, hence the following behaviour::"
msgstr "Esta é uma operação puramente lexical, daí o seguinte comportamento::"

#: ../../library/pathlib.rst:402
msgid ""
">>> p = PurePosixPath('foo/..')\n"
">>> p.parent\n"
"PurePosixPath('foo')"
msgstr ""

#: ../../library/pathlib.rst:406
msgid ""
"If you want to walk an arbitrary filesystem path upwards, it is recommended "
"to first call :meth:`Path.resolve` so as to resolve symlinks and eliminate "
"``\"..\"`` components."
msgstr ""
"Se você deseja percorrer um caminho arbitrário do sistema de arquivos para "
"cima, é recomendável primeiro chamar :meth:`Path.resolve` para resolver os "
"links simbólicos e eliminar os componentes ``\"..\"``."

#: ../../library/pathlib.rst:413
msgid ""
"A string representing the final path component, excluding the drive and "
"root, if any::"
msgstr ""
"Uma string que representa o componente do caminho final, excluindo a unidade "
"e a raiz, se houver::"

#: ../../library/pathlib.rst:416
msgid ""
">>> PurePosixPath('my/library/setup.py').name\n"
"'setup.py'"
msgstr ""

#: ../../library/pathlib.rst:419
msgid "UNC drive names are not considered::"
msgstr "Nomes de unidades UNC não são considerados:::"

#: ../../library/pathlib.rst:421
msgid ""
">>> PureWindowsPath('//some/share/setup.py').name\n"
"'setup.py'\n"
">>> PureWindowsPath('//some/share').name\n"
"''"
msgstr ""

#: ../../library/pathlib.rst:429
msgid "The file extension of the final component, if any::"
msgstr ""

#: ../../library/pathlib.rst:431
msgid ""
">>> PurePosixPath('my/library/setup.py').suffix\n"
"'.py'\n"
">>> PurePosixPath('my/library.tar.gz').suffix\n"
"'.gz'\n"
">>> PurePosixPath('my/library').suffix\n"
"''"
msgstr ""

#: ../../library/pathlib.rst:441
msgid "A list of the path's file extensions::"
msgstr ""

#: ../../library/pathlib.rst:443
msgid ""
">>> PurePosixPath('my/library.tar.gar').suffixes\n"
"['.tar', '.gar']\n"
">>> PurePosixPath('my/library.tar.gz').suffixes\n"
"['.tar', '.gz']\n"
">>> PurePosixPath('my/library').suffixes\n"
"[]"
msgstr ""

#: ../../library/pathlib.rst:453
msgid "The final path component, without its suffix::"
msgstr "O componente final do caminho, sem seu sufixo::"

#: ../../library/pathlib.rst:455
msgid ""
">>> PurePosixPath('my/library.tar.gz').stem\n"
"'library.tar'\n"
">>> PurePosixPath('my/library.tar').stem\n"
"'library'\n"
">>> PurePosixPath('my/library').stem\n"
"'library'"
msgstr ""

#: ../../library/pathlib.rst:465
msgid ""
"Return a string representation of the path with forward slashes (``/``)::"
msgstr "Retorna uma representação de string do caminho com barras (``/``)::"

#: ../../library/pathlib.rst:467
msgid ""
">>> p = PureWindowsPath('c:\\\\windows')\n"
">>> str(p)\n"
"'c:\\\\windows'\n"
">>> p.as_posix()\n"
"'c:/windows'"
msgstr ""

#: ../../library/pathlib.rst:476
msgid ""
"Represent the path as a ``file`` URI.  :exc:`ValueError` is raised if the "
"path isn't absolute."
msgstr ""

#: ../../library/pathlib.rst:489
msgid ""
"Return whether the path is absolute or not.  A path is considered absolute "
"if it has both a root and (if the flavour allows) a drive::"
msgstr ""
"Retorna se o caminho é absoluto ou não. Um caminho é considerado absoluto se "
"tiver uma raiz e (se o tipo permitir) uma unidade::"

#: ../../library/pathlib.rst:492
msgid ""
">>> PurePosixPath('/a/b').is_absolute()\n"
"True\n"
">>> PurePosixPath('a/b').is_absolute()\n"
"False\n"
"\n"
">>> PureWindowsPath('c:/a/b').is_absolute()\n"
"True\n"
">>> PureWindowsPath('/a/b').is_absolute()\n"
"False\n"
">>> PureWindowsPath('c:').is_absolute()\n"
"False\n"
">>> PureWindowsPath('//some/share').is_absolute()\n"
"True"
msgstr ""

#: ../../library/pathlib.rst:509
msgid "Return whether or not this path is relative to the *other* path."
msgstr ""
"Retorna se este caminho é ou não relativo a outro caminho, representado por "
"*other*."

#: ../../library/pathlib.rst:517
msgid ""
"This method is string-based; it neither accesses the filesystem nor treats "
"\"``..``\" segments specially. The following code is equivalent:"
msgstr ""
"Este método é baseado em string; ele não acessa o sistema de arquivos nem "
"trata segmentos \"``..``\" especialmente. O código a seguir é equivalente:"

#: ../../library/pathlib.rst:528
msgid ""
"Passing additional arguments is deprecated; if supplied, they are joined "
"with *other*."
msgstr ""
"A passagem de argumentos adicionais está descontinuada; se fornecidos, eles "
"são unidos com *other*."

#: ../../library/pathlib.rst:533
msgid ""
"With :class:`PureWindowsPath`, return ``True`` if the path is considered "
"reserved under Windows, ``False`` otherwise.  With :class:`PurePosixPath`, "
"``False`` is always returned."
msgstr ""
"Com :class:`PureWindowsPath`, retorna ``True`` se o caminho é considerado "
"reservado no Windows, ``False`` caso contrário. Com :class:`PurePosixPath`, "
"``False`` é sempre retornado."

#: ../../library/pathlib.rst:542
msgid ""
"File system calls on reserved paths can fail mysteriously or have unintended "
"effects."
msgstr ""

#: ../../library/pathlib.rst:548
msgid ""
"Calling this method is equivalent to combining the path with each of the "
"given *pathsegments* in turn::"
msgstr ""
"Chamar este método é equivalente a combinar o caminho com cada um dos "
"*pathsegments* por vez::"

#: ../../library/pathlib.rst:551
msgid ""
">>> PurePosixPath('/etc').joinpath('passwd')\n"
"PurePosixPath('/etc/passwd')\n"
">>> PurePosixPath('/etc').joinpath(PurePosixPath('passwd'))\n"
"PurePosixPath('/etc/passwd')\n"
">>> PurePosixPath('/etc').joinpath('init.d', 'apache2')\n"
"PurePosixPath('/etc/init.d/apache2')\n"
">>> PureWindowsPath('c:').joinpath('/Program Files')\n"
"PureWindowsPath('c:/Program Files')"
msgstr ""

#: ../../library/pathlib.rst:563
msgid ""
"Match this path against the provided glob-style pattern.  Return ``True`` if "
"matching is successful, ``False`` otherwise."
msgstr ""

#: ../../library/pathlib.rst:566
msgid ""
"If *pattern* is relative, the path can be either relative or absolute, and "
"matching is done from the right::"
msgstr ""

#: ../../library/pathlib.rst:569
msgid ""
">>> PurePath('a/b.py').match('*.py')\n"
"True\n"
">>> PurePath('/a/b/c.py').match('b/*.py')\n"
"True\n"
">>> PurePath('/a/b/c.py').match('a/*.py')\n"
"False"
msgstr ""

#: ../../library/pathlib.rst:576
msgid ""
"If *pattern* is absolute, the path must be absolute, and the whole path must "
"match::"
msgstr ""

#: ../../library/pathlib.rst:579
msgid ""
">>> PurePath('/a.py').match('/*.py')\n"
"True\n"
">>> PurePath('a/b.py').match('/*.py')\n"
"False"
msgstr ""

#: ../../library/pathlib.rst:584
msgid ""
"The *pattern* may be another path object; this speeds up matching the same "
"pattern against multiple files::"
msgstr ""

#: ../../library/pathlib.rst:587
msgid ""
">>> pattern = PurePath('*.py')\n"
">>> PurePath('a/b.py').match(pattern)\n"
"True"
msgstr ""

#: ../../library/pathlib.rst:592
msgid ""
"The recursive wildcard \"``**``\" isn't supported by this method (it acts "
"like non-recursive \"``*``\".)"
msgstr ""

#: ../../library/pathlib.rst:595
msgid "Accepts an object implementing the :class:`os.PathLike` interface."
msgstr ""

#: ../../library/pathlib.rst:598
msgid "As with other methods, case-sensitivity follows platform defaults::"
msgstr ""
"Tal como acontece com outros métodos, a distinção entre maiúsculas e "
"minúsculas segue os padrões da plataforma::"

#: ../../library/pathlib.rst:600
msgid ""
">>> PurePosixPath('b.py').match('*.PY')\n"
"False\n"
">>> PureWindowsPath('b.py').match('*.PY')\n"
"True"
msgstr ""

#: ../../library/pathlib.rst:605
msgid ""
"Set *case_sensitive* to ``True`` or ``False`` to override this behaviour."
msgstr ""
"Defina *case_sensitive* como ``True`` ou ``False`` para substituir esse "
"comportamento."

#: ../../library/pathlib.rst:607 ../../library/pathlib.rst:1212
#: ../../library/pathlib.rst:1240
msgid "The *case_sensitive* parameter was added."
msgstr "O parâmetro *case_sensitive* foi adicionado."

#: ../../library/pathlib.rst:613
msgid ""
"Compute a version of this path relative to the path represented by *other*.  "
"If it's impossible, :exc:`ValueError` is raised::"
msgstr ""
"Calcula uma versão deste caminho em relação ao caminho representado por "
"*other*. Se for impossível, :exc:`ValueError` é levantada::"

#: ../../library/pathlib.rst:616
msgid ""
">>> p = PurePosixPath('/etc/passwd')\n"
">>> p.relative_to('/')\n"
"PurePosixPath('etc/passwd')\n"
">>> p.relative_to('/etc')\n"
"PurePosixPath('passwd')\n"
">>> p.relative_to('/usr')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"pathlib.py\", line 941, in relative_to\n"
"    raise ValueError(error_message.format(str(self), str(formatted)))\n"
"ValueError: '/etc/passwd' is not in the subpath of '/usr' OR one path is "
"relative and the other is absolute."
msgstr ""

#: ../../library/pathlib.rst:628
msgid ""
"When *walk_up* is false (the default), the path must start with *other*. "
"When the argument is true, ``..`` entries may be added to form the relative "
"path. In all other cases, such as the paths referencing different drives, :"
"exc:`ValueError` is raised.::"
msgstr ""
"Quando *walk_up* é falso (o padrão), o caminho deve começar com *other*. "
"Quando o argumento é verdadeiro, entradas ``..`` podem ser adicionadas para "
"formar o caminho relativo. Em todos os outros casos, como os caminhos que "
"fazem referência a unidades diferentes, :exc:`ValueError` é levantada.::"

#: ../../library/pathlib.rst:633
msgid ""
">>> p.relative_to('/usr', walk_up=True)\n"
"PurePosixPath('../etc/passwd')\n"
">>> p.relative_to('foo', walk_up=True)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"pathlib.py\", line 941, in relative_to\n"
"    raise ValueError(error_message.format(str(self), str(formatted)))\n"
"ValueError: '/etc/passwd' is not on the same drive as 'foo' OR one path is "
"relative and the other is absolute."
msgstr ""

#: ../../library/pathlib.rst:643
msgid ""
"This function is part of :class:`PurePath` and works with strings. It does "
"not check or access the underlying file structure. This can impact the "
"*walk_up* option as it assumes that no symlinks are present in the path; "
"call :meth:`~Path.resolve` first if necessary to resolve symlinks."
msgstr ""
"Esta função faz parte de :class:`PurePath` e funciona com strings. Ela não "
"verifica ou acessa a estrutura do arquivo subjacente. Isso pode impactar a "
"opção *walk_up*, pois ela presume que não há links simbólicos presentes no "
"caminho; chame :meth:`~Path.resolve` primeiro se necessário para resolver "
"links simbólicos."

#: ../../library/pathlib.rst:649
msgid ""
"The *walk_up* parameter was added (old behavior is the same as "
"``walk_up=False``)."
msgstr ""
"O parâmetro *walk_up* foi adicionado (o comportamento antigo é o mesmo de "
"``walk_up=False``)."

#: ../../library/pathlib.rst:654
msgid ""
"Passing additional positional arguments is deprecated; if supplied, they are "
"joined with *other*."
msgstr ""
"A passagem de argumentos posicionais adicionais está descontinuada; se "
"fornecidos, eles são unidos com *other*."

#: ../../library/pathlib.rst:659
msgid ""
"Return a new path with the :attr:`name` changed.  If the original path "
"doesn't have a name, ValueError is raised::"
msgstr ""
"Retorna um novo caminho com o :attr:`name` alterado. Se o caminho original "
"não tiver um nome, ValueError é levantada::"

#: ../../library/pathlib.rst:662
msgid ""
">>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')\n"
">>> p.with_name('setup.py')\n"
"PureWindowsPath('c:/Downloads/setup.py')\n"
">>> p = PureWindowsPath('c:/')\n"
">>> p.with_name('setup.py')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"/home/antoine/cpython/default/Lib/pathlib.py\", line 751, in "
"with_name\n"
"    raise ValueError(\"%r has an empty name\" % (self,))\n"
"ValueError: PureWindowsPath('c:/') has an empty name"
msgstr ""

#: ../../library/pathlib.rst:676
msgid ""
"Return a new path with the :attr:`stem` changed.  If the original path "
"doesn't have a name, ValueError is raised::"
msgstr ""
"Retorna um novo caminho com o :attr:`stem` alterado. Se o caminho original "
"não tiver um nome, ValueError é levantada::"

#: ../../library/pathlib.rst:679
msgid ""
">>> p = PureWindowsPath('c:/Downloads/draft.txt')\n"
">>> p.with_stem('final')\n"
"PureWindowsPath('c:/Downloads/final.txt')\n"
">>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')\n"
">>> p.with_stem('lib')\n"
"PureWindowsPath('c:/Downloads/lib.gz')\n"
">>> p = PureWindowsPath('c:/')\n"
">>> p.with_stem('')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"/home/antoine/cpython/default/Lib/pathlib.py\", line 861, in "
"with_stem\n"
"    return self.with_name(stem + self.suffix)\n"
"  File \"/home/antoine/cpython/default/Lib/pathlib.py\", line 851, in "
"with_name\n"
"    raise ValueError(\"%r has an empty name\" % (self,))\n"
"ValueError: PureWindowsPath('c:/') has an empty name"
msgstr ""

#: ../../library/pathlib.rst:700
msgid ""
"Return a new path with the :attr:`suffix` changed.  If the original path "
"doesn't have a suffix, the new *suffix* is appended instead.  If the "
"*suffix* is an empty string, the original suffix is removed::"
msgstr ""
"Retorna um novo caminho com o :attr:`suffix` alterado. Se o caminho original "
"não tiver um sufixo, o novo *suffixo* será anexado. Se o *suffix* for uma "
"string vazia, o sufixo original será removido::"

#: ../../library/pathlib.rst:704
msgid ""
">>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')\n"
">>> p.with_suffix('.bz2')\n"
"PureWindowsPath('c:/Downloads/pathlib.tar.bz2')\n"
">>> p = PureWindowsPath('README')\n"
">>> p.with_suffix('.txt')\n"
"PureWindowsPath('README.txt')\n"
">>> p = PureWindowsPath('README.txt')\n"
">>> p.with_suffix('')\n"
"PureWindowsPath('README')"
msgstr ""

#: ../../library/pathlib.rst:717
msgid ""
"Create a new path object of the same type by combining the given "
"*pathsegments*. This method is called whenever a derivative path is created, "
"such as from :attr:`parent` and :meth:`relative_to`. Subclasses may override "
"this method to pass information to derivative paths, for example::"
msgstr ""
"Cria um novo objeto caminho do mesmo tipo combinando os *pathsegments* "
"fornecidos. Este método é chamado sempre que um caminho derivado é criado, "
"como de :attr:`parent` e :meth:`relative_to`. Subclasses podem substituir "
"este método para passar informações para caminhos derivados, por exemplo::"

#: ../../library/pathlib.rst:722
msgid ""
"from pathlib import PurePosixPath\n"
"\n"
"class MyPath(PurePosixPath):\n"
"    def __init__(self, *pathsegments, session_id):\n"
"        super().__init__(*pathsegments)\n"
"        self.session_id = session_id\n"
"\n"
"    def with_segments(self, *pathsegments):\n"
"        return type(self)(*pathsegments, session_id=self.session_id)\n"
"\n"
"etc = MyPath('/etc', session_id=42)\n"
"hosts = etc / 'hosts'\n"
"print(hosts.session_id)  # 42"
msgstr ""

#: ../../library/pathlib.rst:743
msgid "Concrete paths"
msgstr "Caminhos concretos"

#: ../../library/pathlib.rst:745
msgid ""
"Concrete paths are subclasses of the pure path classes.  In addition to "
"operations provided by the latter, they also provide methods to do system "
"calls on path objects.  There are three ways to instantiate concrete paths:"
msgstr ""
"Caminhos concretos são subclasses das classes de caminho puro. Além das "
"operações fornecidas por este último, eles também fornecem métodos para "
"fazer chamadas de sistema em objetos de caminho. Existem três maneiras de "
"instanciar caminhos concretos:"

#: ../../library/pathlib.rst:751
msgid ""
"A subclass of :class:`PurePath`, this class represents concrete paths of the "
"system's path flavour (instantiating it creates either a :class:`PosixPath` "
"or a :class:`WindowsPath`)::"
msgstr ""
"Uma subclasse de :class:`PurePath`, esta classe representa caminhos "
"concretos do tipo de caminho do sistema (instanciando-o cria uma :class:"
"`PosixPath` ou uma :class:`WindowsPath`)::"

#: ../../library/pathlib.rst:755
msgid ""
">>> Path('setup.py')\n"
"PosixPath('setup.py')"
msgstr ""

#: ../../library/pathlib.rst:762
msgid ""
"A subclass of :class:`Path` and :class:`PurePosixPath`, this class "
"represents concrete non-Windows filesystem paths::"
msgstr ""
"Uma subclasse de :class:`Path` e :class:`PurePosixPath`, esta classe "
"representa caminhos concretos de sistemas de arquivos não Windows::"

#: ../../library/pathlib.rst:765
msgid ""
">>> PosixPath('/etc/hosts')\n"
"PosixPath('/etc/hosts')"
msgstr ""

#: ../../library/pathlib.rst:772
msgid ""
"A subclass of :class:`Path` and :class:`PureWindowsPath`, this class "
"represents concrete Windows filesystem paths::"
msgstr ""
"Uma subclasse de :class:`Path` e :class:`PureWindowsPath`, esta classe "
"representa caminhos concretos de sistemas de arquivos do Windows::"

#: ../../library/pathlib.rst:775
msgid ""
">>> WindowsPath('c:/', 'Users', 'Ximénez')\n"
"WindowsPath('c:/Users/Ximénez')"
msgstr ""

#: ../../library/pathlib.rst:780
msgid ""
"You can only instantiate the class flavour that corresponds to your system "
"(allowing system calls on non-compatible path flavours could lead to bugs or "
"failures in your application)::"
msgstr ""
"Você só pode instanciar o tipo de classe que corresponde ao seu sistema "
"(permitir chamadas de sistema em tipos de caminho não compatíveis pode levar "
"a bugs ou falhas em sua aplicação)::"

#: ../../library/pathlib.rst:784
msgid ""
">>> import os\n"
">>> os.name\n"
"'posix'\n"
">>> Path('setup.py')\n"
"PosixPath('setup.py')\n"
">>> PosixPath('setup.py')\n"
"PosixPath('setup.py')\n"
">>> WindowsPath('setup.py')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"pathlib.py\", line 798, in __new__\n"
"    % (cls.__name__,))\n"
"NotImplementedError: cannot instantiate 'WindowsPath' on your system"
msgstr ""

#: ../../library/pathlib.rst:798
msgid ""
"Some concrete path methods can raise an :exc:`OSError` if a system call "
"fails (for example because the path doesn't exist)."
msgstr ""
"Alguns métodos de caminho concretos podem levantar um :exc:`OSError` se uma "
"chamada de sistema falhar (por exemplo, porque o caminho não existe)."

#: ../../library/pathlib.rst:803
msgid "Expanding and resolving paths"
msgstr "Expandindo e resolvendo caminhos"

#: ../../library/pathlib.rst:807
msgid ""
"Return a new path object representing the user's home directory (as returned "
"by :func:`os.path.expanduser` with ``~`` construct). If the home directory "
"can't be resolved, :exc:`RuntimeError` is raised."
msgstr ""
"Retorna um novo objeto caminho representando o diretório pessoal do usuário "
"(conforme retornado por :func:`os.path.expanduser` com a construção ``~``). "
"Se o diretório pessoal não puder ser resolvido, :exc:`RuntimeError` é "
"levantada."

#: ../../library/pathlib.rst:813
msgid ""
">>> Path.home()\n"
"PosixPath('/home/antoine')"
msgstr ""

#: ../../library/pathlib.rst:821
msgid ""
"Return a new path with expanded ``~`` and ``~user`` constructs, as returned "
"by :meth:`os.path.expanduser`. If a home directory can't be resolved, :exc:"
"`RuntimeError` is raised."
msgstr ""
"Retorna um novo caminho com as construções ``~`` e ``~user`` expandidas,  "
"como retornado por :meth:`os.path.expanduser`. Se um diretório pessoal não "
"puder ser resolvido, :exc:`RuntimeError` é levantada."

#: ../../library/pathlib.rst:827
msgid ""
">>> p = PosixPath('~/films/Monty Python')\n"
">>> p.expanduser()\n"
"PosixPath('/home/eric/films/Monty Python')"
msgstr ""

#: ../../library/pathlib.rst:836
msgid ""
"Return a new path object representing the current directory (as returned by :"
"func:`os.getcwd`)::"
msgstr ""
"Retorna um novo objeto caminho que representa o diretório atual (conforme "
"retornado por :func:`os.getcwd`)::"

#: ../../library/pathlib.rst:839
msgid ""
">>> Path.cwd()\n"
"PosixPath('/home/antoine/pathlib')"
msgstr ""

#: ../../library/pathlib.rst:845
msgid ""
"Make the path absolute, without normalization or resolving symlinks. Returns "
"a new path object::"
msgstr ""
"Torna o caminho absoluto, sem normalização ou resolução de links simbólicos. "
"Retorna um novo objeto de caminho::"

#: ../../library/pathlib.rst:848
msgid ""
">>> p = Path('tests')\n"
">>> p\n"
"PosixPath('tests')\n"
">>> p.absolute()\n"
"PosixPath('/home/antoine/pathlib/tests')"
msgstr ""

#: ../../library/pathlib.rst:857
msgid ""
"Make the path absolute, resolving any symlinks.  A new path object is "
"returned::"
msgstr ""
"Faça o caminho absoluto, resolvendo quaisquer links simbólicos. Um novo "
"objeto de caminho é retornado::"

#: ../../library/pathlib.rst:860
msgid ""
">>> p = Path()\n"
">>> p\n"
"PosixPath('.')\n"
">>> p.resolve()\n"
"PosixPath('/home/antoine/pathlib')"
msgstr ""

#: ../../library/pathlib.rst:866
msgid ""
"\"``..``\" components are also eliminated (this is the only method to do "
"so)::"
msgstr ""
"Componentes \"``..``\" também são eliminados (este é o único método para "
"fazer isso)::"

#: ../../library/pathlib.rst:868
msgid ""
">>> p = Path('docs/../setup.py')\n"
">>> p.resolve()\n"
"PosixPath('/home/antoine/pathlib/setup.py')"
msgstr ""

#: ../../library/pathlib.rst:872
msgid ""
"If the path doesn't exist and *strict* is ``True``, :exc:`FileNotFoundError` "
"is raised.  If *strict* is ``False``, the path is resolved as far as "
"possible and any remainder is appended without checking whether it exists.  "
"If an infinite loop is encountered along the resolution path, :exc:"
"`RuntimeError` is raised."
msgstr ""

#: ../../library/pathlib.rst:878
msgid "The *strict* parameter was added (pre-3.6 behavior is strict)."
msgstr "O parâmetro *strict* foi adicionado (comportamento pré-3.6 é estrito)."

#: ../../library/pathlib.rst:884
msgid ""
"Return the path to which the symbolic link points (as returned by :func:`os."
"readlink`)::"
msgstr ""
"Retorna o caminho para o qual o link simbólico aponta (conforme retornado "
"por :func:`os.readlink`)::"

#: ../../library/pathlib.rst:887
msgid ""
">>> p = Path('mylink')\n"
">>> p.symlink_to('setup.py')\n"
">>> p.readlink()\n"
"PosixPath('setup.py')"
msgstr ""

#: ../../library/pathlib.rst:896
msgid "Querying file type and status"
msgstr "Consultando tipo de arquivo e status"

#: ../../library/pathlib.rst:900
msgid ""
":meth:`~Path.exists()`, :meth:`~Path.is_dir()`, :meth:`~Path.is_file()`, :"
"meth:`~Path.is_mount()`, :meth:`~Path.is_symlink()`, :meth:`~Path."
"is_block_device()`, :meth:`~Path.is_char_device()`, :meth:`~Path."
"is_fifo()`, :meth:`~Path.is_socket()` now return ``False`` instead of "
"raising an exception for paths that contain characters unrepresentable at "
"the OS level."
msgstr ""
":meth:`~Path.exists()`, :meth:`~Path.is_dir()`, :meth:`~Path.is_file()`, :"
"meth:`~Path.is_mount()`, :meth:`~Path.is_symlink()`, :meth:`~Path."
"is_block_device()`, :meth:`~Path.is_char_device()`, :meth:`~Path."
"is_fifo()`, :meth:`~Path.is_socket()` agora retornam ``False`` em vez de "
"levantar uma exceção para caminhos que contêm caracteres não representáveis "
"no nível do sistema operacional."

#: ../../library/pathlib.rst:910
msgid ""
"Return an :class:`os.stat_result` object containing information about this "
"path, like :func:`os.stat`. The result is looked up at each call to this "
"method."
msgstr ""
"Retorna um objeto :class:`os.stat_result` contendo informações sobre este "
"caminho, como :func:`os.stat`. O resultado é consultado em cada chamada para "
"este método."

#: ../../library/pathlib.rst:913
msgid ""
"This method normally follows symlinks; to stat a symlink add the argument "
"``follow_symlinks=False``, or use :meth:`~Path.lstat`."
msgstr ""
"Este método normalmente segue links simbólicos; para obter estado de um link "
"simbólico, adicione o argumento ``follow_symlinks=False``, ou use :meth:"
"`~Path.lstat`."

#: ../../library/pathlib.rst:918
msgid ""
">>> p = Path('setup.py')\n"
">>> p.stat().st_size\n"
"956\n"
">>> p.stat().st_mtime\n"
"1327883547.852554"
msgstr ""

#: ../../library/pathlib.rst:924 ../../library/pathlib.rst:952
#: ../../library/pathlib.rst:1514
msgid "The *follow_symlinks* parameter was added."
msgstr "O parâmetro *follow_symlinks* foi adicionado."

#: ../../library/pathlib.rst:930
msgid ""
"Like :meth:`Path.stat` but, if the path points to a symbolic link, return "
"the symbolic link's information rather than its target's."
msgstr ""
"Como :meth:`Path.stat`, mas, se o caminho apontar para um link simbólico, "
"retorna as informações do link simbólico ao invés de seu alvo."

#: ../../library/pathlib.rst:936
msgid "Return ``True`` if the path points to an existing file or directory."
msgstr ""
"Retorna ``True`` se o caminho aponta para um arquivo ou diretório existente."

#: ../../library/pathlib.rst:938
msgid ""
"This method normally follows symlinks; to check if a symlink exists, add the "
"argument ``follow_symlinks=False``."
msgstr ""
"Este método normalmente segue links simbólicos; para verificar se um link "
"simbólico existe, adicione o argumento ``follow_symlinks=False``."

#: ../../library/pathlib.rst:943
msgid ""
">>> Path('.').exists()\n"
"True\n"
">>> Path('setup.py').exists()\n"
"True\n"
">>> Path('/etc').exists()\n"
"True\n"
">>> Path('nonexistentfile').exists()\n"
"False"
msgstr ""

#: ../../library/pathlib.rst:958
msgid ""
"Return ``True`` if the path points to a regular file (or a symbolic link "
"pointing to a regular file), ``False`` if it points to another kind of file."
msgstr ""

#: ../../library/pathlib.rst:961 ../../library/pathlib.rst:970
#: ../../library/pathlib.rst:1012 ../../library/pathlib.rst:1021
#: ../../library/pathlib.rst:1030 ../../library/pathlib.rst:1039
msgid ""
"``False`` is also returned if the path doesn't exist or is a broken symlink; "
"other errors (such as permission errors) are propagated."
msgstr ""
"``False`` também é retornado se o caminho não existir ou se for um link "
"simbólico quebrado; outros erros (como erros de permissão) são propagados."

#: ../../library/pathlib.rst:967
msgid ""
"Return ``True`` if the path points to a directory (or a symbolic link "
"pointing to a directory), ``False`` if it points to another kind of file."
msgstr ""

#: ../../library/pathlib.rst:976
msgid ""
"Return ``True`` if the path points to a symbolic link, ``False`` otherwise."
msgstr ""
"Retorna ``True`` se o caminho apontar para um link simbólico, ``False`` caso "
"contrário."

#: ../../library/pathlib.rst:978
msgid ""
"``False`` is also returned if the path doesn't exist; other errors (such as "
"permission errors) are propagated."
msgstr ""
"``False`` também é retornado se o caminho não existir; outros erros (como "
"erros de permissão) são propagados."

#: ../../library/pathlib.rst:984
msgid ""
"Return ``True`` if the path points to a junction, and ``False`` for any "
"other type of file. Currently only Windows supports junctions."
msgstr ""
"Retorna ``True`` se o caminho apontar para uma junção, e ``False`` para "
"qualquer outro tipo de arquivo. Atualmente, apenas o Windows dá suporte a "
"junções."

#: ../../library/pathlib.rst:992
msgid ""
"Return ``True`` if the path is a :dfn:`mount point`: a point in a file "
"system where a different file system has been mounted.  On POSIX, the "
"function checks whether *path*'s parent, :file:`path/..`, is on a different "
"device than *path*, or whether :file:`path/..` and *path* point to the same "
"i-node on the same device --- this should detect mount points for all Unix "
"and POSIX variants.  On Windows, a mount point is considered to be a drive "
"letter root (e.g. ``c:\\``), a UNC share (e.g. ``\\\\server\\share``), or a "
"mounted filesystem directory."
msgstr ""
"Retorna ``True`` se o caminho for um :dfn:`ponto de montagem`: um ponto em "
"um sistema de arquivos onde um sistema de arquivos diferente foi montado. No "
"POSIX, a função verifica se o pai do *path*, :file:`path/..`, está em um "
"dispositivo diferente de *path*, ou se :file:`path/..` e *path* apontam para "
"o mesmo nó-i no mesmo dispositivo -- isso deve detectar pontos de montagem "
"para todas as variantes Unix e POSIX. No Windows, um ponto de montagem é "
"considerado uma raiz de letra de unidade (por exemplo, ``c:\\``), um "
"compartilhamento UNC (por exemplo, ``\\\\server\\share``) ou um diretório de "
"sistema de arquivos montado."

#: ../../library/pathlib.rst:1003
msgid "Windows support was added."
msgstr "Suporte ao Windows foi adicionado."

#: ../../library/pathlib.rst:1009
msgid ""
"Return ``True`` if the path points to a Unix socket (or a symbolic link "
"pointing to a Unix socket), ``False`` if it points to another kind of file."
msgstr ""
"Retorna ``True`` se o caminho apontar para um soquete Unix (ou um link "
"simbólico apontando para um soquete Unix), ``False`` se apontar para outro "
"tipo de arquivo."

#: ../../library/pathlib.rst:1018
msgid ""
"Return ``True`` if the path points to a FIFO (or a symbolic link pointing to "
"a FIFO), ``False`` if it points to another kind of file."
msgstr ""
"Retorna ``True`` se o caminho apontar para um FIFO (ou um link simbólico "
"apontando para um FIFO), ``False`` se apontar para outro tipo de arquivo."

#: ../../library/pathlib.rst:1027
msgid ""
"Return ``True`` if the path points to a block device (or a symbolic link "
"pointing to a block device), ``False`` if it points to another kind of file."
msgstr ""
"Retorna ``True`` se o caminho apontar para um dispositivo de bloco (ou um "
"link simbólico apontando para um dispositivo de bloco), ``False`` se apontar "
"para outro tipo de arquivo."

#: ../../library/pathlib.rst:1036
msgid ""
"Return ``True`` if the path points to a character device (or a symbolic link "
"pointing to a character device), ``False`` if it points to another kind of "
"file."
msgstr ""
"Retorna ``True`` se o caminho apontar para um dispositivo de caractere (ou "
"um link simbólico apontando para um dispositivo de caractere), ``False`` se "
"apontar para outro tipo de arquivo."

#: ../../library/pathlib.rst:1045
msgid ""
"Return whether this path points to the same file as *other_path*, which can "
"be either a Path object, or a string.  The semantics are similar to :func:"
"`os.path.samefile` and :func:`os.path.samestat`."
msgstr ""
"Retorna se este path apontar para o mesmo arquivo como *other_path*, que "
"pode ser um objeto PATH ou uma String. A semântica é semelhante a função :"
"func:`os.path.samefile` e a função :func:`os.path.samestat`."

#: ../../library/pathlib.rst:1049
msgid ""
"An :exc:`OSError` can be raised if either file cannot be accessed for some "
"reason."
msgstr ""
"Um :exc:`OSError` poderá ser levantado caso algum arquivo não puder ser "
"acessado por alguma razão."

#: ../../library/pathlib.rst:1054
msgid ""
">>> p = Path('spam')\n"
">>> q = Path('eggs')\n"
">>> p.samefile(q)\n"
"False\n"
">>> p.samefile('spam')\n"
"True"
msgstr ""

#: ../../library/pathlib.rst:1065
msgid "Reading and writing files"
msgstr "Lendo e escrevendo arquivos"

#: ../../library/pathlib.rst:1070
msgid ""
"Open the file pointed to by the path, like the built-in :func:`open` "
"function does::"
msgstr ""
"Abre o arquivo apontado pelo caminho, como a função embutida :func:`open` "
"faz::"

#: ../../library/pathlib.rst:1073
msgid ""
">>> p = Path('setup.py')\n"
">>> with p.open() as f:\n"
"...     f.readline()\n"
"...\n"
"'#!/usr/bin/env python3\\n'"
msgstr ""

#: ../../library/pathlib.rst:1082
msgid "Return the decoded contents of the pointed-to file as a string::"
msgstr "Retorna o conteúdo decodificado do arquivo apontado como uma string::"

#: ../../library/pathlib.rst:1084 ../../library/pathlib.rst:1114
msgid ""
">>> p = Path('my_text_file')\n"
">>> p.write_text('Text file contents')\n"
"18\n"
">>> p.read_text()\n"
"'Text file contents'"
msgstr ""

#: ../../library/pathlib.rst:1090
msgid ""
"The file is opened and then closed. The optional parameters have the same "
"meaning as in :func:`open`."
msgstr ""
"O arquivo é aberto e, então, fechado. Os parâmetros opcionais têm o mesmo "
"significado que em :func:`open`."

#: ../../library/pathlib.rst:1098
msgid "Return the binary contents of the pointed-to file as a bytes object::"
msgstr "Retorna o conteúdo binário do arquivo apontado como um objeto bytes::"

#: ../../library/pathlib.rst:1100 ../../library/pathlib.rst:1134
msgid ""
">>> p = Path('my_binary_file')\n"
">>> p.write_bytes(b'Binary file contents')\n"
"20\n"
">>> p.read_bytes()\n"
"b'Binary file contents'"
msgstr ""

#: ../../library/pathlib.rst:1111
msgid ""
"Open the file pointed to in text mode, write *data* to it, and close the "
"file::"
msgstr ""
"Abre o arquivo apontado no modo de texto, escreve *data* e fecha o arquivo::"

#: ../../library/pathlib.rst:1120
msgid ""
"An existing file of the same name is overwritten. The optional parameters "
"have the same meaning as in :func:`open`."
msgstr ""
"Um arquivo existente com o mesmo nome é sobrescrito. Os parâmetros opcionais "
"têm o mesmo significado que em :func:`open`."

#: ../../library/pathlib.rst:1125
msgid "The *newline* parameter was added."
msgstr "O parâmetro *newline* foi adicionado."

#: ../../library/pathlib.rst:1131
msgid ""
"Open the file pointed to in bytes mode, write *data* to it, and close the "
"file::"
msgstr ""
"Abre o arquivo apontado no modo bytes, escreve *dados* e fecha o arquivo::"

#: ../../library/pathlib.rst:1140
msgid "An existing file of the same name is overwritten."
msgstr "Um arquivo existente de mesmo nome será substituído."

#: ../../library/pathlib.rst:1146
msgid "Reading directories"
msgstr "Lendo diretórios"

#: ../../library/pathlib.rst:1150
msgid ""
"When the path points to a directory, yield path objects of the directory "
"contents::"
msgstr ""
"Quando o caminho aponta para um diretório, produz objetos caminho do "
"conteúdo do diretório::"

#: ../../library/pathlib.rst:1153
msgid ""
">>> p = Path('docs')\n"
">>> for child in p.iterdir(): child\n"
"...\n"
"PosixPath('docs/conf.py')\n"
"PosixPath('docs/_templates')\n"
"PosixPath('docs/make.bat')\n"
"PosixPath('docs/index.rst')\n"
"PosixPath('docs/_build')\n"
"PosixPath('docs/_static')\n"
"PosixPath('docs/Makefile')"
msgstr ""

#: ../../library/pathlib.rst:1164
msgid ""
"The children are yielded in arbitrary order, and the special entries ``'.'`` "
"and ``'..'`` are not included.  If a file is removed from or added to the "
"directory after creating the iterator, it is unspecified whether a path "
"object for that file is included."
msgstr ""
"Os filhos são gerados em ordem arbitrária e as entradas especiais ``'.'`` e "
"``'..'`` não são incluídas. Se um arquivo for removido ou adicionado ao "
"diretório após a criação do iterador, não está especificado se um objeto "
"caminho para esse arquivo é incluído."

#: ../../library/pathlib.rst:1169
msgid ""
"If the path is not a directory or otherwise inaccessible, :exc:`OSError` is "
"raised."
msgstr ""
"Se o caminho não for um diretório ou estiver inacessível, :exc:`OSError` "
"será levantada."

#: ../../library/pathlib.rst:1174
msgid ""
"Glob the given relative *pattern* in the directory represented by this path, "
"yielding all matching files (of any kind)::"
msgstr ""
"Faz o glob do *pattern* relativo fornecido no diretório representado por "
"este caminho, produzindo todos os arquivos correspondentes (de qualquer "
"tipo):"

#: ../../library/pathlib.rst:1177
msgid ""
">>> sorted(Path('.').glob('*.py'))\n"
"[PosixPath('pathlib.py'), PosixPath('setup.py'), PosixPath('test_pathlib."
"py')]\n"
">>> sorted(Path('.').glob('*/*.py'))\n"
"[PosixPath('docs/conf.py')]"
msgstr ""

#: ../../library/pathlib.rst:1182
msgid ""
"Patterns are the same as for :mod:`fnmatch`, with the addition of \"``**``\" "
"which means \"this directory and all subdirectories, recursively\".  In "
"other words, it enables recursive globbing::"
msgstr ""

#: ../../library/pathlib.rst:1186
msgid ""
">>> sorted(Path('.').glob('**/*.py'))\n"
"[PosixPath('build/lib/pathlib.py'),\n"
" PosixPath('docs/conf.py'),\n"
" PosixPath('pathlib.py'),\n"
" PosixPath('setup.py'),\n"
" PosixPath('test_pathlib.py')]"
msgstr ""

#: ../../library/pathlib.rst:1193
msgid ""
"This method calls :meth:`Path.is_dir` on the top-level directory and "
"propagates any :exc:`OSError` exception that is raised. Subsequent :exc:"
"`OSError` exceptions from scanning directories are suppressed."
msgstr ""

#: ../../library/pathlib.rst:1197 ../../library/pathlib.rst:1229
msgid ""
"By default, or when the *case_sensitive* keyword-only argument is set to "
"``None``, this method matches paths using platform-specific casing rules: "
"typically, case-sensitive on POSIX, and case-insensitive on Windows. Set "
"*case_sensitive* to ``True`` or ``False`` to override this behaviour."
msgstr ""
"Por padrão, ou quando o argumento somente-nomeado *case_sensitive* é "
"definido como ``None``, esse método corresponde a caminhos usando regras de "
"capitalização específicas da plataforma: normalmente, diferencia maiúsculas "
"de minúsculas no POSIX e não diferencia maiúsculas de minúsculas no Windows. "
"Defina *case_sensitive* como ``True`` ou ``False`` para substituir esse "
"comportamento."

#: ../../library/pathlib.rst:1203
msgid ""
"Using the \"``**``\" pattern in large directory trees may consume an "
"inordinate amount of time."
msgstr ""
"Usar o padrão \"``**``\" em grandes árvores de diretório pode consumir uma "
"quantidade excessiva de tempo."

#: ../../library/pathlib.rst:1206
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pathlib.Path.glob`` with "
"arguments ``self``, ``pattern``."
msgstr ""
"Levanta um :ref:`evento de auditoria <auditing>` ``pathlib.Path.glob`` com "
"os argumentos ``self``, ``pattern``."

#: ../../library/pathlib.rst:1208 ../../library/pathlib.rst:1236
msgid ""
"Return only directories if *pattern* ends with a pathname components "
"separator (:data:`~os.sep` or :data:`~os.altsep`)."
msgstr ""

#: ../../library/pathlib.rst:1218
msgid ""
"Glob the given relative *pattern* recursively.  This is like calling :func:"
"`Path.glob` with \"``**/``\" added in front of the *pattern*, where "
"*patterns* are the same as for :mod:`fnmatch`::"
msgstr ""

#: ../../library/pathlib.rst:1222
msgid ""
">>> sorted(Path().rglob(\"*.py\"))\n"
"[PosixPath('build/lib/pathlib.py'),\n"
" PosixPath('docs/conf.py'),\n"
" PosixPath('pathlib.py'),\n"
" PosixPath('setup.py'),\n"
" PosixPath('test_pathlib.py')]"
msgstr ""

#: ../../library/pathlib.rst:1234
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pathlib.Path.rglob`` with "
"arguments ``self``, ``pattern``."
msgstr ""
"Levanta um :ref:`evento de auditoria <auditing>` ``pathlib.Path.rglob`` com "
"argumentos ``self``, ``pattern``."

#: ../../library/pathlib.rst:1246
msgid ""
"Generate the file names in a directory tree by walking the tree either top-"
"down or bottom-up."
msgstr ""
"Gera os nomes de arquivos em uma árvore de diretórios percorrendo a árvore "
"de cima para baixo ou de baixo para cima."

#: ../../library/pathlib.rst:1249
msgid ""
"For each directory in the directory tree rooted at *self* (including *self* "
"but excluding '.' and '..'), the method yields a 3-tuple of ``(dirpath, "
"dirnames, filenames)``."
msgstr ""
"Para cada diretório na árvore de diretórios com raiz em *self* (incluindo "
"*self*, mas excluindo '.' e '..'), o método produz uma tupla de 3 elementos "
"de ``(dirpath, dirnames, filenames)``."

#: ../../library/pathlib.rst:1253
msgid ""
"*dirpath* is a :class:`Path` to the directory currently being walked, "
"*dirnames* is a list of strings for the names of subdirectories in *dirpath* "
"(excluding ``'.'`` and ``'..'``), and *filenames* is a list of strings for "
"the names of the non-directory files in *dirpath*. To get a full path (which "
"begins with *self*) to a file or directory in *dirpath*, do ``dirpath / "
"name``. Whether or not the lists are sorted is file system-dependent."
msgstr ""
"*dirpath* é um :class:`Path` para o diretório que está sendo percorrido no "
"momento, *dirnames* é uma lista de strings para os nomes dos subdiretórios "
"em *dirpath* (excluindo ``'.'`` e ``'..'``), e *filenames* é uma lista de "
"strings para os nomes dos arquivos não diretório em *dirpath*. Para obter um "
"caminho completo (que começa com *self*) para um arquivo ou diretório em "
"*dirpath*, faça ``dirpath / name``. Se as listas são ou não classificadas "
"depende do sistema de arquivos."

#: ../../library/pathlib.rst:1261
msgid ""
"If the optional argument *top_down* is true (which is the default), the "
"triple for a directory is generated before the triples for any of its "
"subdirectories (directories are walked top-down).  If *top_down* is false, "
"the triple for a directory is generated after the triples for all of its "
"subdirectories (directories are walked bottom-up). No matter the value of "
"*top_down*, the list of subdirectories is retrieved before the triples for "
"the directory and its subdirectories are walked."
msgstr ""
"Se o argumento opcional *top_down* for verdadeiro (que é o padrão), o trio "
"para um diretório é gerado antes dos trios para qualquer um de seus "
"subdiretórios (os diretórios são percorridos de cima para baixo). Se "
"*top_down* for falso, o trio para um diretório é gerado após os trios para "
"todos os seus subdiretórios (os diretórios são percorridos de baixo para "
"cima). Não importa o valor de *top_down*, a lista de subdiretórios é "
"recuperada antes que os trios para o diretório e seus subdiretórios sejam "
"percorridos."

#: ../../library/pathlib.rst:1269
msgid ""
"When *top_down* is true, the caller can modify the *dirnames* list in-place "
"(for example, using :keyword:`del` or slice assignment), and :meth:`Path."
"walk` will only recurse into the subdirectories whose names remain in "
"*dirnames*. This can be used to prune the search, or to impose a specific "
"order of visiting, or even to inform :meth:`Path.walk` about directories the "
"caller creates or renames before it resumes :meth:`Path.walk` again. "
"Modifying *dirnames* when *top_down* is false has no effect on the behavior "
"of :meth:`Path.walk()` since the directories in *dirnames* have already been "
"generated by the time *dirnames* is yielded to the caller."
msgstr ""
"Quando *top_down* é verdadeiro, o chamador pode modificar a lista *dirnames* "
"no local (por exemplo, usando :keyword:`del` ou atribuição de fatias), e :"
"meth:`Path.walk` só recursivamente nos subdiretórios cujos nomes permanecem "
"em *dirnames*. Isso pode ser usado para podar a pesquisa, ou para impor uma "
"ordem específica de visita, ou mesmo para informar :meth:`Path.walk` sobre "
"diretórios que o chamador cria ou renomeia antes de retomar :meth:`Path."
"walk` novamente. Modificar *dirnames* quando *top_down* é false não tem "
"efeito no comportamento de :meth:`Path.walk()`, pois os diretórios em "
"*dirnames* já foram gerados no momento em que *dirnames* é cedido ao "
"chamador."

#: ../../library/pathlib.rst:1279
msgid ""
"By default, errors from :func:`os.scandir` are ignored.  If the optional "
"argument *on_error* is specified, it should be a callable; it will be called "
"with one argument, an :exc:`OSError` instance. The callable can handle the "
"error to continue the walk or re-raise it to stop the walk. Note that the "
"filename is available as the ``filename`` attribute of the exception object."
msgstr ""

#: ../../library/pathlib.rst:1285
msgid ""
"By default, :meth:`Path.walk` does not follow symbolic links, and instead "
"adds them to the *filenames* list. Set *follow_symlinks* to true to resolve "
"symlinks and place them in *dirnames* and *filenames* as appropriate for "
"their targets, and consequently visit directories pointed to by symlinks "
"(where supported)."
msgstr ""

#: ../../library/pathlib.rst:1292
msgid ""
"Be aware that setting *follow_symlinks* to true can lead to infinite "
"recursion if a link points to a parent directory of itself. :meth:`Path."
"walk` does not keep track of the directories it has already visited."
msgstr ""

#: ../../library/pathlib.rst:1297
msgid ""
":meth:`Path.walk` assumes the directories it walks are not modified during "
"execution. For example, if a directory from *dirnames* has been replaced "
"with a symlink and *follow_symlinks* is false, :meth:`Path.walk` will still "
"try to descend into it. To prevent such behavior, remove directories from "
"*dirnames* as appropriate."
msgstr ""

#: ../../library/pathlib.rst:1305
msgid ""
"Unlike :func:`os.walk`, :meth:`Path.walk` lists symlinks to directories in "
"*filenames* if *follow_symlinks* is false."
msgstr ""

#: ../../library/pathlib.rst:1308
msgid ""
"This example displays the number of bytes used by all files in each "
"directory, while ignoring ``__pycache__`` directories::"
msgstr ""

#: ../../library/pathlib.rst:1311
msgid ""
"from pathlib import Path\n"
"for root, dirs, files in Path(\"cpython/Lib/concurrent\")."
"walk(on_error=print):\n"
"  print(\n"
"      root,\n"
"      \"consumes\",\n"
"      sum((root / file).stat().st_size for file in files),\n"
"      \"bytes in\",\n"
"      len(files),\n"
"      \"non-directory files\"\n"
"  )\n"
"  if '__pycache__' in dirs:\n"
"        dirs.remove('__pycache__')"
msgstr ""

#: ../../library/pathlib.rst:1324
msgid ""
"This next example is a simple implementation of :func:`shutil.rmtree`. "
"Walking the tree bottom-up is essential as :func:`rmdir` doesn't allow "
"deleting a directory before it is empty::"
msgstr ""

#: ../../library/pathlib.rst:1328
msgid ""
"# Delete everything reachable from the directory \"top\".\n"
"# CAUTION:  This is dangerous! For example, if top == Path('/'),\n"
"# it could delete all of your files.\n"
"for root, dirs, files in top.walk(top_down=False):\n"
"    for name in files:\n"
"        (root / name).unlink()\n"
"    for name in dirs:\n"
"        (root / name).rmdir()"
msgstr ""

#: ../../library/pathlib.rst:1341
msgid "Creating files and directories"
msgstr ""

#: ../../library/pathlib.rst:1345
msgid ""
"Create a file at this given path.  If *mode* is given, it is combined with "
"the process's ``umask`` value to determine the file mode and access flags.  "
"If the file already exists, the function succeeds when *exist_ok* is true "
"(and its modification time is updated to the current time), otherwise :exc:"
"`FileExistsError` is raised."
msgstr ""

#: ../../library/pathlib.rst:1352
msgid ""
"The :meth:`~Path.open`, :meth:`~Path.write_text` and :meth:`~Path."
"write_bytes` methods are often used to create files."
msgstr ""

#: ../../library/pathlib.rst:1358
msgid ""
"Create a new directory at this given path.  If *mode* is given, it is "
"combined with the process's ``umask`` value to determine the file mode and "
"access flags.  If the path already exists, :exc:`FileExistsError` is raised."
msgstr ""

#: ../../library/pathlib.rst:1363
msgid ""
"If *parents* is true, any missing parents of this path are created as "
"needed; they are created with the default permissions without taking *mode* "
"into account (mimicking the POSIX ``mkdir -p`` command)."
msgstr ""
"Se *parents* for verdadeiro, quaisquer pais ausentes neste caminho serão "
"criados conforme necessário; eles são criados com as permissões padrão sem "
"levar o *mode* em consideração (imitando o comando POSIX ``mkdir -p``)."

#: ../../library/pathlib.rst:1367
msgid ""
"If *parents* is false (the default), a missing parent raises :exc:"
"`FileNotFoundError`."
msgstr ""
"Se *parents* for falso (o padrão), um pai ausente levanta :exc:"
"`FileNotFoundError`."

#: ../../library/pathlib.rst:1370
msgid ""
"If *exist_ok* is false (the default), :exc:`FileExistsError` is raised if "
"the target directory already exists."
msgstr ""
"Se *exist_ok* for falso (o padrão), :exc:`FileExistsError` será levantada se "
"o diretório alvo já existir."

#: ../../library/pathlib.rst:1373
msgid ""
"If *exist_ok* is true, :exc:`FileExistsError` will not be raised unless the "
"given path already exists in the file system and is not a directory (same "
"behavior as the POSIX ``mkdir -p`` command)."
msgstr ""

#: ../../library/pathlib.rst:1377
msgid "The *exist_ok* parameter was added."
msgstr "O parâmetro *exist_ok* foi adicionado."

#: ../../library/pathlib.rst:1383
msgid "Make this path a symbolic link pointing to *target*."
msgstr ""

#: ../../library/pathlib.rst:1385
msgid ""
"On Windows, a symlink represents either a file or a directory, and does not "
"morph to the target dynamically.  If the target is present, the type of the "
"symlink will be created to match. Otherwise, the symlink will be created as "
"a directory if *target_is_directory* is true or a file symlink (the default) "
"otherwise.  On non-Windows platforms, *target_is_directory* is ignored."
msgstr ""

#: ../../library/pathlib.rst:1393
msgid ""
">>> p = Path('mylink')\n"
">>> p.symlink_to('setup.py')\n"
">>> p.resolve()\n"
"PosixPath('/home/antoine/pathlib/setup.py')\n"
">>> p.stat().st_size\n"
"956\n"
">>> p.lstat().st_size\n"
"8"
msgstr ""

#: ../../library/pathlib.rst:1403
msgid ""
"The order of arguments (link, target) is the reverse of :func:`os.symlink`'s."
msgstr ""
"A ordem dos argumentos (link, target) é o inverso da função :func:`os."
"symlink`'s."

#: ../../library/pathlib.rst:1409
msgid "Make this path a hard link to the same file as *target*."
msgstr "Faz deste caminho um link físico para o mesmo arquivo que *target*."

#: ../../library/pathlib.rst:1412
msgid ""
"The order of arguments (link, target) is the reverse of :func:`os.link`'s."
msgstr ""
"A ordem dos argumentos (link, target) é o inverso da função :func:`os."
"link`'s."

#: ../../library/pathlib.rst:1419
msgid "Renaming and deleting"
msgstr ""

#: ../../library/pathlib.rst:1423
msgid ""
"Rename this file or directory to the given *target*, and return a new :class:"
"`!Path` instance pointing to *target*.  On Unix, if *target* exists and is a "
"file, it will be replaced silently if the user has permission. On Windows, "
"if *target* exists, :exc:`FileExistsError` will be raised. *target* can be "
"either a string or another path object::"
msgstr ""

#: ../../library/pathlib.rst:1429
msgid ""
">>> p = Path('foo')\n"
">>> p.open('w').write('some text')\n"
"9\n"
">>> target = Path('bar')\n"
">>> p.rename(target)\n"
"PosixPath('bar')\n"
">>> target.open().read()\n"
"'some text'"
msgstr ""

#: ../../library/pathlib.rst:1438 ../../library/pathlib.rst:1454
msgid ""
"The target path may be absolute or relative. Relative paths are interpreted "
"relative to the current working directory, *not* the directory of the :class:"
"`!Path` object."
msgstr ""

#: ../../library/pathlib.rst:1442
msgid ""
"It is implemented in terms of :func:`os.rename` and gives the same "
"guarantees."
msgstr ""
"Está implementada em termos de :func:`os.rename` e fornece as mesmas "
"garantias."

#: ../../library/pathlib.rst:1444 ../../library/pathlib.rst:1458
msgid "Added return value, return the new :class:`!Path` instance."
msgstr ""

#: ../../library/pathlib.rst:1450
msgid ""
"Rename this file or directory to the given *target*, and return a new :class:"
"`!Path` instance pointing to *target*.  If *target* points to an existing "
"file or empty directory, it will be unconditionally replaced."
msgstr ""

#: ../../library/pathlib.rst:1464
msgid ""
"Remove this file or symbolic link.  If the path points to a directory, use :"
"func:`Path.rmdir` instead."
msgstr ""
"Remova esse arquivo ou link simbólico. Caso o caminho aponte para um "
"diretório, use a função :func:`Path.rmdir` em vez disso."

#: ../../library/pathlib.rst:1467
msgid ""
"If *missing_ok* is false (the default), :exc:`FileNotFoundError` is raised "
"if the path does not exist."
msgstr ""
"Se *missing_ok* for falso (o padrão), :exc:`FileNotFoundError` é levantada "
"se o caminho não existir."

#: ../../library/pathlib.rst:1470
msgid ""
"If *missing_ok* is true, :exc:`FileNotFoundError` exceptions will be ignored "
"(same behavior as the POSIX ``rm -f`` command)."
msgstr ""
"Se *missing_ok* for verdadeiro, exceções de :exc:`FileNotFoundError` serão "
"ignoradas (mesmo comportamento que o comando POSIX ``rm -f``)."

#: ../../library/pathlib.rst:1473
msgid "The *missing_ok* parameter was added."
msgstr "O parâmetro *missing_ok* foi adicionado."

#: ../../library/pathlib.rst:1479
msgid "Remove this directory.  The directory must be empty."
msgstr "Remove este diretório. O diretório deve estar vazio."

#: ../../library/pathlib.rst:1483
msgid "Permissions and ownership"
msgstr ""

#: ../../library/pathlib.rst:1487
msgid ""
"Return the name of the user owning the file.  :exc:`KeyError` is raised if "
"the file's user identifier (UID) isn't found in the system database."
msgstr ""

#: ../../library/pathlib.rst:1493
msgid ""
"Return the name of the group owning the file.  :exc:`KeyError` is raised if "
"the file's group identifier (GID) isn't found in the system database."
msgstr ""

#: ../../library/pathlib.rst:1499
msgid "Change the file mode and permissions, like :func:`os.chmod`."
msgstr "Altera o modo de arquivo e as permissões, como :func:`os.chmod`."

#: ../../library/pathlib.rst:1501
msgid ""
"This method normally follows symlinks. Some Unix flavours support changing "
"permissions on the symlink itself; on these platforms you may add the "
"argument ``follow_symlinks=False``, or use :meth:`~Path.lchmod`."
msgstr ""
" Este método normalmente segue links simbólicos. Alguns tipos de Unix têm "
"suporte à alteração de permissões no próprio link simbólico; nessas "
"plataformas, você pode adicionar o argumento ``follow_symlinks=False``, ou "
"use :meth:`~Path.lchmod`."

#: ../../library/pathlib.rst:1507
msgid ""
">>> p = Path('setup.py')\n"
">>> p.stat().st_mode\n"
"33277\n"
">>> p.chmod(0o444)\n"
">>> p.stat().st_mode\n"
"33060"
msgstr ""

#: ../../library/pathlib.rst:1520
msgid ""
"Like :meth:`Path.chmod` but, if the path points to a symbolic link, the "
"symbolic link's mode is changed rather than its target's."
msgstr ""
"Como :meth:`Path.chmod`, mas, se o caminho apontar para um link simbólico, o "
"modo do link simbólico é alterado ao invés de seu alvo."

#: ../../library/pathlib.rst:1525
msgid "Correspondence to tools in the :mod:`os` module"
msgstr ""

#: ../../library/pathlib.rst:1527
msgid ""
"Below is a table mapping various :mod:`os` functions to their corresponding :"
"class:`PurePath`/:class:`Path` equivalent."
msgstr ""
"Abaixo está uma tabela mapeando várias funções :mod:`os` a sua :class:"
"`PurePath`/:class:`Path` equivalente."

#: ../../library/pathlib.rst:1531
msgid ":mod:`os` and :mod:`os.path`"
msgstr ":mod:`os` e :mod:`os.path`"

#: ../../library/pathlib.rst:1531
msgid ":mod:`pathlib`"
msgstr ":mod:`pathlib`"

#: ../../library/pathlib.rst:1533
msgid ":func:`os.path.dirname`"
msgstr ":func:`os.path.dirname`"

#: ../../library/pathlib.rst:1533
msgid ":attr:`PurePath.parent`"
msgstr ":attr:`PurePath.parent`"

#: ../../library/pathlib.rst:1534
msgid ":func:`os.path.basename`"
msgstr ":func:`os.path.basename`"

#: ../../library/pathlib.rst:1534
msgid ":attr:`PurePath.name`"
msgstr ":attr:`PurePath.name`"

#: ../../library/pathlib.rst:1535
msgid ":func:`os.path.splitext`"
msgstr ":func:`os.path.splitext`"

#: ../../library/pathlib.rst:1535
msgid ":attr:`PurePath.stem`, :attr:`PurePath.suffix`"
msgstr ""

#: ../../library/pathlib.rst:1536
msgid ":func:`os.path.join`"
msgstr ":func:`os.path.join`"

#: ../../library/pathlib.rst:1536
msgid ":meth:`PurePath.joinpath`"
msgstr ""

#: ../../library/pathlib.rst:1537
msgid ":func:`os.path.isabs`"
msgstr ":func:`os.path.isabs`"

#: ../../library/pathlib.rst:1537
msgid ":meth:`PurePath.is_absolute`"
msgstr ":meth:`PurePath.is_absolute`"

#: ../../library/pathlib.rst:1538
msgid ":func:`os.path.relpath`"
msgstr ":func:`os.path.relpath`"

#: ../../library/pathlib.rst:1538
msgid ":meth:`PurePath.relative_to` [1]_"
msgstr ""

#: ../../library/pathlib.rst:1539
msgid ":func:`os.path.expanduser`"
msgstr ":func:`os.path.expanduser`"

#: ../../library/pathlib.rst:1539
msgid ":meth:`Path.expanduser` [2]_"
msgstr ""

#: ../../library/pathlib.rst:1540
msgid ":func:`os.path.realpath`"
msgstr ":func:`os.path.realpath`"

#: ../../library/pathlib.rst:1540
msgid ":meth:`Path.resolve`"
msgstr ":meth:`Path.resolve`"

#: ../../library/pathlib.rst:1541
msgid ":func:`os.path.abspath`"
msgstr ":func:`os.path.abspath`"

#: ../../library/pathlib.rst:1541
msgid ":meth:`Path.absolute` [3]_"
msgstr ""

#: ../../library/pathlib.rst:1542
msgid ":func:`os.path.exists`"
msgstr ":func:`os.path.exists`"

#: ../../library/pathlib.rst:1542
msgid ":meth:`Path.exists`"
msgstr ":meth:`Path.exists`"

#: ../../library/pathlib.rst:1543
msgid ":func:`os.path.isfile`"
msgstr ":func:`os.path.isfile`"

#: ../../library/pathlib.rst:1543
msgid ":meth:`Path.is_file`"
msgstr ":meth:`Path.is_file`"

#: ../../library/pathlib.rst:1544
msgid ":func:`os.path.isdir`"
msgstr ":func:`os.path.isdir`"

#: ../../library/pathlib.rst:1544
msgid ":meth:`Path.is_dir`"
msgstr ":meth:`Path.is_dir`"

#: ../../library/pathlib.rst:1545
msgid ":func:`os.path.islink`"
msgstr ":func:`os.path.islink`"

#: ../../library/pathlib.rst:1545
msgid ":meth:`Path.is_symlink`"
msgstr ":meth:`Path.is_symlink`"

#: ../../library/pathlib.rst:1546
msgid ":func:`os.path.isjunction`"
msgstr ""

#: ../../library/pathlib.rst:1546
msgid ":meth:`Path.is_junction`"
msgstr ""

#: ../../library/pathlib.rst:1547
msgid ":func:`os.path.ismount`"
msgstr ""

#: ../../library/pathlib.rst:1547
msgid ":meth:`Path.is_mount`"
msgstr ""

#: ../../library/pathlib.rst:1548
msgid ":func:`os.path.samefile`"
msgstr ":func:`os.path.samefile`"

#: ../../library/pathlib.rst:1548
msgid ":meth:`Path.samefile`"
msgstr ":meth:`Path.samefile`"

#: ../../library/pathlib.rst:1549
msgid ":func:`os.getcwd`"
msgstr ":func:`os.getcwd`"

#: ../../library/pathlib.rst:1549
msgid ":meth:`Path.cwd`"
msgstr ""

#: ../../library/pathlib.rst:1550
msgid ":func:`os.stat`"
msgstr ":func:`os.stat`"

#: ../../library/pathlib.rst:1550
msgid ":meth:`Path.stat`"
msgstr ""

#: ../../library/pathlib.rst:1551
msgid ":func:`os.lstat`"
msgstr ""

#: ../../library/pathlib.rst:1551
msgid ":meth:`Path.lstat`"
msgstr ""

#: ../../library/pathlib.rst:1552
msgid ":func:`os.listdir`"
msgstr ":func:`os.listdir`"

#: ../../library/pathlib.rst:1552
msgid ":meth:`Path.iterdir`"
msgstr ":meth:`Path.iterdir`"

#: ../../library/pathlib.rst:1553
msgid ":func:`os.walk`"
msgstr ""

#: ../../library/pathlib.rst:1553
msgid ":meth:`Path.walk` [4]_"
msgstr ""

#: ../../library/pathlib.rst:1554
msgid ":func:`os.mkdir`, :func:`os.makedirs`"
msgstr ""

#: ../../library/pathlib.rst:1554
msgid ":meth:`Path.mkdir`"
msgstr ":meth:`Path.mkdir`"

#: ../../library/pathlib.rst:1555
msgid ":func:`os.link`"
msgstr ":func:`os.link`"

#: ../../library/pathlib.rst:1555
msgid ":meth:`Path.hardlink_to`"
msgstr ":meth:`Path.hardlink_to`"

#: ../../library/pathlib.rst:1556
msgid ":func:`os.symlink`"
msgstr ":func:`os.symlink`"

#: ../../library/pathlib.rst:1556
msgid ":meth:`Path.symlink_to`"
msgstr ":meth:`Path.symlink_to`"

#: ../../library/pathlib.rst:1557
msgid ":func:`os.readlink`"
msgstr ":func:`os.readlink`"

#: ../../library/pathlib.rst:1557
msgid ":meth:`Path.readlink`"
msgstr ":meth:`Path.readlink`"

#: ../../library/pathlib.rst:1558
msgid ":func:`os.rename`"
msgstr ":func:`os.rename`"

#: ../../library/pathlib.rst:1558
msgid ":meth:`Path.rename`"
msgstr ":meth:`Path.rename`"

#: ../../library/pathlib.rst:1559
msgid ":func:`os.replace`"
msgstr ":func:`os.replace`"

#: ../../library/pathlib.rst:1559
msgid ":meth:`Path.replace`"
msgstr ":meth:`Path.replace`"

#: ../../library/pathlib.rst:1560
msgid ":func:`os.remove`, :func:`os.unlink`"
msgstr ":func:`os.remove`, :func:`os.unlink`"

#: ../../library/pathlib.rst:1560
msgid ":meth:`Path.unlink`"
msgstr ":meth:`Path.unlink`"

#: ../../library/pathlib.rst:1561
msgid ":func:`os.rmdir`"
msgstr ":func:`os.rmdir`"

#: ../../library/pathlib.rst:1561
msgid ":meth:`Path.rmdir`"
msgstr ":meth:`Path.rmdir`"

#: ../../library/pathlib.rst:1562
msgid ":func:`os.chmod`"
msgstr ":func:`os.chmod`"

#: ../../library/pathlib.rst:1562
msgid ":meth:`Path.chmod`"
msgstr ":meth:`Path.chmod`"

#: ../../library/pathlib.rst:1563
msgid ":func:`os.lchmod`"
msgstr ""

#: ../../library/pathlib.rst:1563
msgid ":meth:`Path.lchmod`"
msgstr ""

#: ../../library/pathlib.rst:1567
msgid "Footnotes"
msgstr "Notas de rodapé"

#: ../../library/pathlib.rst:1568
msgid ""
":func:`os.path.relpath` calls :func:`~os.path.abspath` to make paths "
"absolute and remove \"``..``\" parts, whereas :meth:`PurePath.relative_to` "
"is a lexical operation that raises :exc:`ValueError` when its inputs' "
"anchors differ (e.g. if one path is absolute and the other relative.)"
msgstr ""

#: ../../library/pathlib.rst:1572
msgid ""
":func:`os.path.expanduser` returns the path unchanged if the home directory "
"can't be resolved, whereas :meth:`Path.expanduser` raises :exc:"
"`RuntimeError`."
msgstr ""

#: ../../library/pathlib.rst:1575
msgid ""
":func:`os.path.abspath` removes \"``..``\" components without resolving "
"symlinks, which may change the meaning of the path, whereas :meth:`Path."
"absolute` leaves any \"``..``\" components in the path."
msgstr ""

#: ../../library/pathlib.rst:1578
msgid ""
":func:`os.walk` always follows symlinks when categorizing paths into "
"*dirnames* and *filenames*, whereas :meth:`Path.walk` categorizes all "
"symlinks into *filenames* when *follow_symlinks* is false (the default.)"
msgstr ""

#: ../../library/pathlib.rst:11
msgid "path"
msgstr "caminho"

#: ../../library/pathlib.rst:11
msgid "operations"
msgstr "operações"
