# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-20 14:21+0000\n"
"PO-Revision-Date: 2025-07-18 18:49+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/stdtypes.rst:8
msgid "Built-in Types"
msgstr ""

#: ../../library/stdtypes.rst:10
msgid ""
"The following sections describe the standard types that are built into the "
"interpreter."
msgstr ""

#: ../../library/stdtypes.rst:15
msgid ""
"The principal built-in types are numerics, sequences, mappings, classes, "
"instances and exceptions."
msgstr ""

#: ../../library/stdtypes.rst:18
msgid ""
"Some collection classes are mutable.  The methods that add, subtract, or "
"rearrange their members in place, and don't return a specific item, never "
"return the collection instance itself but ``None``."
msgstr ""

#: ../../library/stdtypes.rst:22
msgid ""
"Some operations are supported by several object types; in particular, "
"practically all objects can be compared for equality, tested for truth "
"value, and converted to a string (with the :func:`repr` function or the "
"slightly different :func:`str` function).  The latter function is implicitly "
"used when an object is written by the :func:`print` function."
msgstr ""

#: ../../library/stdtypes.rst:32
msgid "Truth Value Testing"
msgstr ""

#: ../../library/stdtypes.rst:41
msgid ""
"Any object can be tested for truth value, for use in an :keyword:`if` or :"
"keyword:`while` condition or as operand of the Boolean operations below."
msgstr ""

#: ../../library/stdtypes.rst:46
msgid ""
"By default, an object is considered true unless its class defines either a :"
"meth:`~object.__bool__` method that returns ``False`` or a :meth:`~object."
"__len__` method that returns zero, when called with the object. [1]_  Here "
"are most of the built-in objects considered false:"
msgstr ""

#: ../../library/stdtypes.rst:56
msgid "constants defined to be false: ``None`` and ``False``"
msgstr ""

#: ../../library/stdtypes.rst:58
msgid ""
"zero of any numeric type: ``0``, ``0.0``, ``0j``, ``Decimal(0)``, "
"``Fraction(0, 1)``"
msgstr ""

#: ../../library/stdtypes.rst:61
msgid ""
"empty sequences and collections: ``''``, ``()``, ``[]``, ``{}``, ``set()``, "
"``range(0)``"
msgstr ""

#: ../../library/stdtypes.rst:70
msgid ""
"Operations and built-in functions that have a Boolean result always return "
"``0`` or ``False`` for false and ``1`` or ``True`` for true, unless "
"otherwise stated. (Important exception: the Boolean operations ``or`` and "
"``and`` always return one of their operands.)"
msgstr ""

#: ../../library/stdtypes.rst:79
msgid "Boolean Operations --- :keyword:`!and`, :keyword:`!or`, :keyword:`!not`"
msgstr ""

#: ../../library/stdtypes.rst:83
msgid "These are the Boolean operations, ordered by ascending priority:"
msgstr ""

#: ../../library/stdtypes.rst:86 ../../library/stdtypes.rst:144
#: ../../library/stdtypes.rst:282 ../../library/stdtypes.rst:372
#: ../../library/stdtypes.rst:422 ../../library/stdtypes.rst:1007
#: ../../library/stdtypes.rst:1215
msgid "Operation"
msgstr ""

#: ../../library/stdtypes.rst:86 ../../library/stdtypes.rst:282
#: ../../library/stdtypes.rst:372 ../../library/stdtypes.rst:422
#: ../../library/stdtypes.rst:1007 ../../library/stdtypes.rst:1215
msgid "Result"
msgstr ""

#: ../../library/stdtypes.rst:86 ../../library/stdtypes.rst:282
#: ../../library/stdtypes.rst:422 ../../library/stdtypes.rst:1007
#: ../../library/stdtypes.rst:1215 ../../library/stdtypes.rst:2770
#: ../../library/stdtypes.rst:4029
msgid "Notes"
msgstr "Notas"

#: ../../library/stdtypes.rst:88
msgid "``x or y``"
msgstr ""

#: ../../library/stdtypes.rst:88
msgid "if *x* is true, then *x*, else *y*"
msgstr ""

#: ../../library/stdtypes.rst:88 ../../library/stdtypes.rst:1009
#: ../../library/stdtypes.rst:1012 ../../library/stdtypes.rst:1228
#: ../../library/stdtypes.rst:2776 ../../library/stdtypes.rst:4035
msgid "\\(1)"
msgstr ""

#: ../../library/stdtypes.rst:91
msgid "``x and y``"
msgstr ""

#: ../../library/stdtypes.rst:91
msgid "if *x* is false, then *x*, else *y*"
msgstr ""

#: ../../library/stdtypes.rst:91 ../../library/stdtypes.rst:295
#: ../../library/stdtypes.rst:315 ../../library/stdtypes.rst:1256
#: ../../library/stdtypes.rst:2780 ../../library/stdtypes.rst:2782
#: ../../library/stdtypes.rst:4039 ../../library/stdtypes.rst:4041
msgid "\\(2)"
msgstr ""

#: ../../library/stdtypes.rst:94
msgid "``not x``"
msgstr ""

#: ../../library/stdtypes.rst:94
msgid "if *x* is false, then ``True``, else ``False``"
msgstr ""

#: ../../library/stdtypes.rst:94 ../../library/stdtypes.rst:1259
#: ../../library/stdtypes.rst:2784 ../../library/stdtypes.rst:2786
#: ../../library/stdtypes.rst:2788 ../../library/stdtypes.rst:2790
#: ../../library/stdtypes.rst:4043 ../../library/stdtypes.rst:4045
#: ../../library/stdtypes.rst:4047 ../../library/stdtypes.rst:4049
msgid "\\(3)"
msgstr ""

#: ../../library/stdtypes.rst:103 ../../library/stdtypes.rst:326
#: ../../library/stdtypes.rst:440 ../../library/stdtypes.rst:1058
#: ../../library/stdtypes.rst:1268 ../../library/stdtypes.rst:2816
#: ../../library/stdtypes.rst:4079
msgid "Notes:"
msgstr "Notas:"

#: ../../library/stdtypes.rst:106
msgid ""
"This is a short-circuit operator, so it only evaluates the second argument "
"if the first one is false."
msgstr ""

#: ../../library/stdtypes.rst:110
msgid ""
"This is a short-circuit operator, so it only evaluates the second argument "
"if the first one is true."
msgstr ""

#: ../../library/stdtypes.rst:114
msgid ""
"``not`` has a lower priority than non-Boolean operators, so ``not a == b`` "
"is interpreted as ``not (a == b)``, and ``a == not b`` is a syntax error."
msgstr ""

#: ../../library/stdtypes.rst:121
msgid "Comparisons"
msgstr ""

#: ../../library/stdtypes.rst:135
msgid ""
"There are eight comparison operations in Python.  They all have the same "
"priority (which is higher than that of the Boolean operations).  Comparisons "
"can be chained arbitrarily; for example, ``x < y <= z`` is equivalent to ``x "
"< y and y <= z``, except that *y* is evaluated only once (but in both cases "
"*z* is not evaluated at all when ``x < y`` is found to be false)."
msgstr ""

#: ../../library/stdtypes.rst:141
msgid "This table summarizes the comparison operations:"
msgstr ""

#: ../../library/stdtypes.rst:144 ../../library/stdtypes.rst:2602
#: ../../library/stdtypes.rst:2747 ../../library/stdtypes.rst:2770
#: ../../library/stdtypes.rst:4006 ../../library/stdtypes.rst:4029
msgid "Meaning"
msgstr "Significado"

#: ../../library/stdtypes.rst:146
msgid "``<``"
msgstr ""

#: ../../library/stdtypes.rst:146
msgid "strictly less than"
msgstr ""

#: ../../library/stdtypes.rst:148
msgid "``<=``"
msgstr ""

#: ../../library/stdtypes.rst:148
msgid "less than or equal"
msgstr ""

#: ../../library/stdtypes.rst:150
msgid "``>``"
msgstr ""

#: ../../library/stdtypes.rst:150
msgid "strictly greater than"
msgstr ""

#: ../../library/stdtypes.rst:152
msgid "``>=``"
msgstr ""

#: ../../library/stdtypes.rst:152
msgid "greater than or equal"
msgstr ""

#: ../../library/stdtypes.rst:154
msgid "``==``"
msgstr ""

#: ../../library/stdtypes.rst:154
msgid "equal"
msgstr ""

#: ../../library/stdtypes.rst:156
msgid "``!=``"
msgstr ""

#: ../../library/stdtypes.rst:156
msgid "not equal"
msgstr ""

#: ../../library/stdtypes.rst:158
msgid "``is``"
msgstr ""

#: ../../library/stdtypes.rst:158
msgid "object identity"
msgstr ""

#: ../../library/stdtypes.rst:160
msgid "``is not``"
msgstr ""

#: ../../library/stdtypes.rst:160
msgid "negated object identity"
msgstr ""

#: ../../library/stdtypes.rst:167
msgid ""
"Objects of different types, except different numeric types, never compare "
"equal. The ``==`` operator is always defined but for some object types (for "
"example, class objects) is equivalent to :keyword:`is`. The ``<``, ``<=``, "
"``>`` and ``>=`` operators are only defined where they make sense; for "
"example, they raise a :exc:`TypeError` exception when one of the arguments "
"is a complex number."
msgstr ""

#: ../../library/stdtypes.rst:181
msgid ""
"Non-identical instances of a class normally compare as non-equal unless the "
"class defines the :meth:`~object.__eq__` method."
msgstr ""

#: ../../library/stdtypes.rst:184
msgid ""
"Instances of a class cannot be ordered with respect to other instances of "
"the same class, or other types of object, unless the class defines enough of "
"the methods :meth:`~object.__lt__`, :meth:`~object.__le__`, :meth:`~object."
"__gt__`, and :meth:`~object.__ge__` (in general, :meth:`~object.__lt__` and :"
"meth:`~object.__eq__` are sufficient, if you want the conventional meanings "
"of the comparison operators)."
msgstr ""

#: ../../library/stdtypes.rst:191
msgid ""
"The behavior of the :keyword:`is` and :keyword:`is not` operators cannot be "
"customized; also they can be applied to any two objects and never raise an "
"exception."
msgstr ""

#: ../../library/stdtypes.rst:199
msgid ""
"Two more operations with the same syntactic priority, :keyword:`in` and :"
"keyword:`not in`, are supported by types that are :term:`iterable` or "
"implement the :meth:`~object.__contains__` method."
msgstr ""

#: ../../library/stdtypes.rst:206
msgid "Numeric Types --- :class:`int`, :class:`float`, :class:`complex`"
msgstr ""

#: ../../library/stdtypes.rst:216
msgid ""
"There are three distinct numeric types: :dfn:`integers`, :dfn:`floating-"
"point numbers`, and :dfn:`complex numbers`.  In addition, Booleans are a "
"subtype of integers.  Integers have unlimited precision.  Floating-point "
"numbers are usually implemented using :c:expr:`double` in C; information "
"about the precision and internal representation of floating-point numbers "
"for the machine on which your program is running is available in :data:`sys."
"float_info`.  Complex numbers have a real and imaginary part, which are each "
"a floating-point number.  To extract these parts from a complex number *z*, "
"use ``z.real`` and ``z.imag``. (The standard library includes the additional "
"numeric types :mod:`fractions.Fraction`, for rationals, and :mod:`decimal."
"Decimal`, for floating-point numbers with user-definable precision.)"
msgstr ""

#: ../../library/stdtypes.rst:238
msgid ""
"Numbers are created by numeric literals or as the result of built-in "
"functions and operators.  Unadorned integer literals (including hex, octal "
"and binary numbers) yield integers.  Numeric literals containing a decimal "
"point or an exponent sign yield floating-point numbers.  Appending ``'j'`` "
"or ``'J'`` to a numeric literal yields an imaginary number (a complex number "
"with a zero real part) which you can add to an integer or float to get a "
"complex number with real and imaginary parts."
msgstr ""

#: ../../library/stdtypes.rst:246
msgid ""
"The constructors :func:`int`, :func:`float`, and :func:`complex` can be used "
"to produce numbers of a specific type."
msgstr ""

#: ../../library/stdtypes.rst:266
msgid ""
"Python fully supports mixed arithmetic: when a binary arithmetic operator "
"has operands of different numeric types, the operand with the \"narrower\" "
"type is widened to that of the other, where integer is narrower than "
"floating point. Arithmetic with complex and real operands is defined by the "
"usual mathematical formula, for example::"
msgstr ""

#: ../../library/stdtypes.rst:272
msgid ""
"x + complex(u, v) = complex(x + u, v)\n"
"x * complex(u, v) = complex(x * u, x * v)"
msgstr ""

#: ../../library/stdtypes.rst:275
msgid ""
"A comparison between numbers of different types behaves as though the exact "
"values of those numbers were being compared. [2]_"
msgstr ""

#: ../../library/stdtypes.rst:278
msgid ""
"All numeric types (except complex) support the following operations (for "
"priorities of the operations, see :ref:`operator-summary`):"
msgstr ""

#: ../../library/stdtypes.rst:282
msgid "Full documentation"
msgstr ""

#: ../../library/stdtypes.rst:284
msgid "``x + y``"
msgstr ""

#: ../../library/stdtypes.rst:284
msgid "sum of *x* and *y*"
msgstr ""

#: ../../library/stdtypes.rst:286
msgid "``x - y``"
msgstr ""

#: ../../library/stdtypes.rst:286
msgid "difference of *x* and *y*"
msgstr ""

#: ../../library/stdtypes.rst:288
msgid "``x * y``"
msgstr ""

#: ../../library/stdtypes.rst:288
msgid "product of *x* and *y*"
msgstr ""

#: ../../library/stdtypes.rst:290
msgid "``x / y``"
msgstr ""

#: ../../library/stdtypes.rst:290
msgid "quotient of *x* and *y*"
msgstr ""

#: ../../library/stdtypes.rst:292
msgid "``x // y``"
msgstr ""

#: ../../library/stdtypes.rst:292
msgid "floored quotient of *x* and *y*"
msgstr ""

#: ../../library/stdtypes.rst:292
msgid "\\(1)\\(2)"
msgstr ""

#: ../../library/stdtypes.rst:295
msgid "``x % y``"
msgstr ""

#: ../../library/stdtypes.rst:295
msgid "remainder of ``x / y``"
msgstr ""

#: ../../library/stdtypes.rst:297
msgid "``-x``"
msgstr ""

#: ../../library/stdtypes.rst:297
msgid "*x* negated"
msgstr ""

#: ../../library/stdtypes.rst:299
msgid "``+x``"
msgstr ""

#: ../../library/stdtypes.rst:299
msgid "*x* unchanged"
msgstr ""

#: ../../library/stdtypes.rst:301
msgid "``abs(x)``"
msgstr ""

#: ../../library/stdtypes.rst:301
msgid "absolute value or magnitude of *x*"
msgstr ""

#: ../../library/stdtypes.rst:301
msgid ":func:`abs`"
msgstr ""

#: ../../library/stdtypes.rst:304
msgid "``int(x)``"
msgstr ""

#: ../../library/stdtypes.rst:304
msgid "*x* converted to integer"
msgstr ""

#: ../../library/stdtypes.rst:304
msgid "\\(3)\\(6)"
msgstr ""

#: ../../library/stdtypes.rst:304
msgid ":func:`int`"
msgstr ""

#: ../../library/stdtypes.rst:306
msgid "``float(x)``"
msgstr ""

#: ../../library/stdtypes.rst:306
msgid "*x* converted to floating point"
msgstr ""

#: ../../library/stdtypes.rst:306
msgid "\\(4)\\(6)"
msgstr ""

#: ../../library/stdtypes.rst:306
msgid ":func:`float`"
msgstr ""

#: ../../library/stdtypes.rst:308
msgid "``complex(re, im)``"
msgstr ""

#: ../../library/stdtypes.rst:308
msgid ""
"a complex number with real part *re*, imaginary part *im*. *im* defaults to "
"zero."
msgstr ""

#: ../../library/stdtypes.rst:308 ../../library/stdtypes.rst:1249
#: ../../library/stdtypes.rst:2778 ../../library/stdtypes.rst:4066
msgid "\\(6)"
msgstr ""

#: ../../library/stdtypes.rst:308
msgid ":func:`complex`"
msgstr ""

#: ../../library/stdtypes.rst:312
msgid "``c.conjugate()``"
msgstr ""

#: ../../library/stdtypes.rst:312
msgid "conjugate of the complex number *c*"
msgstr ""

#: ../../library/stdtypes.rst:315
msgid "``divmod(x, y)``"
msgstr ""

#: ../../library/stdtypes.rst:315
msgid "the pair ``(x // y, x % y)``"
msgstr ""

#: ../../library/stdtypes.rst:315
msgid ":func:`divmod`"
msgstr ""

#: ../../library/stdtypes.rst:317
msgid "``pow(x, y)``"
msgstr ""

#: ../../library/stdtypes.rst:317 ../../library/stdtypes.rst:319
msgid "*x* to the power *y*"
msgstr ""

#: ../../library/stdtypes.rst:317 ../../library/stdtypes.rst:319
#: ../../library/stdtypes.rst:1238 ../../library/stdtypes.rst:1241
#: ../../library/stdtypes.rst:2803 ../../library/stdtypes.rst:2806
#: ../../library/stdtypes.rst:2809 ../../library/stdtypes.rst:4062
#: ../../library/stdtypes.rst:4069
msgid "\\(5)"
msgstr ""

#: ../../library/stdtypes.rst:317
msgid ":func:`pow`"
msgstr ""

#: ../../library/stdtypes.rst:319
msgid "``x ** y``"
msgstr ""

#: ../../library/stdtypes.rst:329
msgid ""
"Also referred to as integer division.  For operands of type :class:`int`, "
"the result has type :class:`int`.  For operands of type :class:`float`, the "
"result has type :class:`float`.  In general, the result is a whole integer, "
"though the result's type is not necessarily :class:`int`.  The result is "
"always rounded towards minus infinity: ``1//2`` is ``0``, ``(-1)//2`` is "
"``-1``, ``1//(-2)`` is ``-1``, and ``(-1)//(-2)`` is ``0``."
msgstr ""

#: ../../library/stdtypes.rst:337
msgid ""
"Not for complex numbers.  Instead convert to floats using :func:`abs` if "
"appropriate."
msgstr ""

#: ../../library/stdtypes.rst:348
msgid ""
"Conversion from :class:`float` to :class:`int` truncates, discarding the "
"fractional part. See functions :func:`math.floor` and :func:`math.ceil` for "
"alternative conversions."
msgstr ""

#: ../../library/stdtypes.rst:353
msgid ""
"float also accepts the strings \"nan\" and \"inf\" with an optional prefix "
"\"+\" or \"-\" for Not a Number (NaN) and positive or negative infinity."
msgstr ""

#: ../../library/stdtypes.rst:357
msgid ""
"Python defines ``pow(0, 0)`` and ``0 ** 0`` to be ``1``, as is common for "
"programming languages."
msgstr ""

#: ../../library/stdtypes.rst:361
msgid ""
"The numeric literals accepted include the digits ``0`` to ``9`` or any "
"Unicode equivalent (code points with the ``Nd`` property)."
msgstr ""

#: ../../library/stdtypes.rst:364
msgid ""
"See `the Unicode Standard <https://unicode.org/Public/UNIDATA/extracted/"
"DerivedNumericType.txt>`_ for a complete list of code points with the ``Nd`` "
"property."
msgstr ""

#: ../../library/stdtypes.rst:368
msgid ""
"All :class:`numbers.Real` types (:class:`int` and :class:`float`) also "
"include the following operations:"
msgstr ""

#: ../../library/stdtypes.rst:374
msgid ":func:`math.trunc(\\ x) <math.trunc>`"
msgstr ""

#: ../../library/stdtypes.rst:374
msgid "*x* truncated to :class:`~numbers.Integral`"
msgstr ""

#: ../../library/stdtypes.rst:377
msgid ":func:`round(x[, n]) <round>`"
msgstr ""

#: ../../library/stdtypes.rst:377
msgid ""
"*x* rounded to *n* digits, rounding half to even. If *n* is omitted, it "
"defaults to 0."
msgstr ""

#: ../../library/stdtypes.rst:381
msgid ":func:`math.floor(\\ x) <math.floor>`"
msgstr ""

#: ../../library/stdtypes.rst:381
msgid "the greatest :class:`~numbers.Integral` <= *x*"
msgstr ""

#: ../../library/stdtypes.rst:384
msgid ":func:`math.ceil(x) <math.ceil>`"
msgstr ""

#: ../../library/stdtypes.rst:384
msgid "the least :class:`~numbers.Integral` >= *x*"
msgstr ""

#: ../../library/stdtypes.rst:388
msgid ""
"For additional numeric operations see the :mod:`math` and :mod:`cmath` "
"modules."
msgstr ""

#: ../../library/stdtypes.rst:397
msgid "Bitwise Operations on Integer Types"
msgstr ""

#: ../../library/stdtypes.rst:411
msgid ""
"Bitwise operations only make sense for integers. The result of bitwise "
"operations is calculated as though carried out in two's complement with an "
"infinite number of sign bits."
msgstr ""

#: ../../library/stdtypes.rst:415
msgid ""
"The priorities of the binary bitwise operations are all lower than the "
"numeric operations and higher than the comparisons; the unary operation "
"``~`` has the same priority as the other unary numeric operations (``+`` and "
"``-``)."
msgstr ""

#: ../../library/stdtypes.rst:419
msgid "This table lists the bitwise operations sorted in ascending priority:"
msgstr ""

#: ../../library/stdtypes.rst:424
msgid "``x | y``"
msgstr ""

#: ../../library/stdtypes.rst:424
msgid "bitwise :dfn:`or` of *x* and *y*"
msgstr ""

#: ../../library/stdtypes.rst:424 ../../library/stdtypes.rst:427
#: ../../library/stdtypes.rst:430 ../../library/stdtypes.rst:1263
#: ../../library/stdtypes.rst:2792 ../../library/stdtypes.rst:2796
#: ../../library/stdtypes.rst:4051 ../../library/stdtypes.rst:4055
msgid "\\(4)"
msgstr ""

#: ../../library/stdtypes.rst:427
msgid "``x ^ y``"
msgstr ""

#: ../../library/stdtypes.rst:427
msgid "bitwise :dfn:`exclusive or` of *x* and *y*"
msgstr ""

#: ../../library/stdtypes.rst:430
msgid "``x & y``"
msgstr ""

#: ../../library/stdtypes.rst:430
msgid "bitwise :dfn:`and` of *x* and *y*"
msgstr ""

#: ../../library/stdtypes.rst:433
msgid "``x << n``"
msgstr ""

#: ../../library/stdtypes.rst:433
msgid "*x* shifted left by *n* bits"
msgstr ""

#: ../../library/stdtypes.rst:433
msgid "(1)(2)"
msgstr ""

#: ../../library/stdtypes.rst:435
msgid "``x >> n``"
msgstr ""

#: ../../library/stdtypes.rst:435
msgid "*x* shifted right by *n* bits"
msgstr ""

#: ../../library/stdtypes.rst:435
msgid "(1)(3)"
msgstr ""

#: ../../library/stdtypes.rst:437
msgid "``~x``"
msgstr ""

#: ../../library/stdtypes.rst:437
msgid "the bits of *x* inverted"
msgstr ""

#: ../../library/stdtypes.rst:443
msgid ""
"Negative shift counts are illegal and cause a :exc:`ValueError` to be raised."
msgstr ""

#: ../../library/stdtypes.rst:446
msgid ""
"A left shift by *n* bits is equivalent to multiplication by ``pow(2, n)``."
msgstr ""

#: ../../library/stdtypes.rst:449
msgid ""
"A right shift by *n* bits is equivalent to floor division by ``pow(2, n)``."
msgstr ""

#: ../../library/stdtypes.rst:452
msgid ""
"Performing these calculations with at least one extra sign extension bit in "
"a finite two's complement representation (a working bit-width of ``1 + max(x."
"bit_length(), y.bit_length())`` or more) is sufficient to get the same "
"result as if there were an infinite number of sign bits."
msgstr ""

#: ../../library/stdtypes.rst:459
msgid "Additional Methods on Integer Types"
msgstr ""

#: ../../library/stdtypes.rst:461
msgid ""
"The int type implements the :class:`numbers.Integral` :term:`abstract base "
"class`. In addition, it provides a few more methods:"
msgstr ""

#: ../../library/stdtypes.rst:466
msgid ""
"Return the number of bits necessary to represent an integer in binary, "
"excluding the sign and leading zeros::"
msgstr ""

#: ../../library/stdtypes.rst:469
msgid ""
">>> n = -37\n"
">>> bin(n)\n"
"'-0b100101'\n"
">>> n.bit_length()\n"
"6"
msgstr ""

#: ../../library/stdtypes.rst:475
msgid ""
"More precisely, if ``x`` is nonzero, then ``x.bit_length()`` is the unique "
"positive integer ``k`` such that ``2**(k-1) <= abs(x) < 2**k``. "
"Equivalently, when ``abs(x)`` is small enough to have a correctly rounded "
"logarithm, then ``k = 1 + int(log(abs(x), 2))``. If ``x`` is zero, then ``x."
"bit_length()`` returns ``0``."
msgstr ""

#: ../../library/stdtypes.rst:481 ../../library/stdtypes.rst:504
#: ../../library/stdtypes.rst:549 ../../library/stdtypes.rst:593
msgid "Equivalent to::"
msgstr ""

#: ../../library/stdtypes.rst:483
msgid ""
"def bit_length(self):\n"
"    s = bin(self)       # binary representation:  bin(-37) --> '-0b100101'\n"
"    s = s.lstrip('-0b') # remove leading zeros and minus sign\n"
"    return len(s)       # len('100101') --> 6"
msgstr ""

#: ../../library/stdtypes.rst:492
msgid ""
"Return the number of ones in the binary representation of the absolute value "
"of the integer. This is also known as the population count. Example::"
msgstr ""

#: ../../library/stdtypes.rst:496
msgid ""
">>> n = 19\n"
">>> bin(n)\n"
"'0b10011'\n"
">>> n.bit_count()\n"
"3\n"
">>> (-n).bit_count()\n"
"3"
msgstr ""

#: ../../library/stdtypes.rst:506
msgid ""
"def bit_count(self):\n"
"    return bin(self).count(\"1\")"
msgstr ""

#: ../../library/stdtypes.rst:513
msgid "Return an array of bytes representing an integer."
msgstr ""

#: ../../library/stdtypes.rst:525
msgid ""
"The integer is represented using *length* bytes, and defaults to 1.  An :exc:"
"`OverflowError` is raised if the integer is not representable with the given "
"number of bytes."
msgstr ""

#: ../../library/stdtypes.rst:529
msgid ""
"The *byteorder* argument determines the byte order used to represent the "
"integer, and defaults to ``\"big\"``.  If *byteorder* is ``\"big\"``, the "
"most significant byte is at the beginning of the byte array.  If *byteorder* "
"is ``\"little\"``, the most significant byte is at the end of the byte array."
msgstr ""

#: ../../library/stdtypes.rst:535
msgid ""
"The *signed* argument determines whether two's complement is used to "
"represent the integer.  If *signed* is ``False`` and a negative integer is "
"given, an :exc:`OverflowError` is raised. The default value for *signed* is "
"``False``."
msgstr ""

#: ../../library/stdtypes.rst:540
msgid ""
"The default values can be used to conveniently turn an integer into a single "
"byte object::"
msgstr ""

#: ../../library/stdtypes.rst:543
msgid ""
">>> (65).to_bytes()\n"
"b'A'"
msgstr ""

#: ../../library/stdtypes.rst:546
msgid ""
"However, when using the default arguments, don't try to convert a value "
"greater than 255 or you'll get an :exc:`OverflowError`."
msgstr ""

#: ../../library/stdtypes.rst:551
msgid ""
"def to_bytes(n, length=1, byteorder='big', signed=False):\n"
"    if byteorder == 'little':\n"
"        order = range(length)\n"
"    elif byteorder == 'big':\n"
"        order = reversed(range(length))\n"
"    else:\n"
"        raise ValueError(\"byteorder must be either 'little' or 'big'\")\n"
"\n"
"    return bytes((n >> i*8) & 0xff for i in order)"
msgstr ""

#: ../../library/stdtypes.rst:562
msgid "Added default argument values for ``length`` and ``byteorder``."
msgstr ""

#: ../../library/stdtypes.rst:567
msgid "Return the integer represented by the given array of bytes."
msgstr ""

#: ../../library/stdtypes.rst:580
msgid ""
"The argument *bytes* must either be a :term:`bytes-like object` or an "
"iterable producing bytes."
msgstr ""

#: ../../library/stdtypes.rst:583
msgid ""
"The *byteorder* argument determines the byte order used to represent the "
"integer, and defaults to ``\"big\"``.  If *byteorder* is ``\"big\"``, the "
"most significant byte is at the beginning of the byte array.  If *byteorder* "
"is ``\"little\"``, the most significant byte is at the end of the byte "
"array.  To request the native byte order of the host system, use :data:`sys."
"byteorder` as the byte order value."
msgstr ""

#: ../../library/stdtypes.rst:590
msgid ""
"The *signed* argument indicates whether two's complement is used to "
"represent the integer."
msgstr ""

#: ../../library/stdtypes.rst:595
msgid ""
"def from_bytes(bytes, byteorder='big', signed=False):\n"
"    if byteorder == 'little':\n"
"        little_ordered = list(bytes)\n"
"    elif byteorder == 'big':\n"
"        little_ordered = list(reversed(bytes))\n"
"    else:\n"
"        raise ValueError(\"byteorder must be either 'little' or 'big'\")\n"
"\n"
"    n = sum(b << i*8 for i, b in enumerate(little_ordered))\n"
"    if signed and little_ordered and (little_ordered[-1] & 0x80):\n"
"        n -= 1 << 8*len(little_ordered)\n"
"\n"
"    return n"
msgstr ""

#: ../../library/stdtypes.rst:610
msgid "Added default argument value for ``byteorder``."
msgstr ""

#: ../../library/stdtypes.rst:615
msgid ""
"Return a pair of integers whose ratio is equal to the original integer and "
"has a positive denominator.  The integer ratio of integers (whole numbers) "
"is always the integer as the numerator and ``1`` as the denominator."
msgstr ""

#: ../../library/stdtypes.rst:624
msgid ""
"Returns ``True``. Exists for duck type compatibility with :meth:`float."
"is_integer`."
msgstr ""

#: ../../library/stdtypes.rst:629
msgid "Additional Methods on Float"
msgstr ""

#: ../../library/stdtypes.rst:631
msgid ""
"The float type implements the :class:`numbers.Real` :term:`abstract base "
"class`. float also has the following additional methods."
msgstr ""

#: ../../library/stdtypes.rst:636
msgid ""
"Class method to return a floating-point number constructed from a number *x*."
msgstr ""

#: ../../library/stdtypes.rst:638
msgid ""
"If the argument is an integer or a floating-point number, a floating-point "
"number with the same value (within Python's floating-point precision) is "
"returned.  If the argument is outside the range of a Python float, an :exc:"
"`OverflowError` will be raised."
msgstr ""

#: ../../library/stdtypes.rst:643
msgid ""
"For a general Python object ``x``, ``float.from_number(x)`` delegates to ``x."
"__float__()``. If :meth:`~object.__float__` is not defined then it falls "
"back to :meth:`~object.__index__`."
msgstr ""

#: ../../library/stdtypes.rst:653
msgid ""
"Return a pair of integers whose ratio is exactly equal to the original "
"float. The ratio is in lowest terms and has a positive denominator.  Raises :"
"exc:`OverflowError` on infinities and a :exc:`ValueError` on NaNs."
msgstr ""

#: ../../library/stdtypes.rst:660
msgid ""
"Return ``True`` if the float instance is finite with integral value, and "
"``False`` otherwise::"
msgstr ""

#: ../../library/stdtypes.rst:663
msgid ""
">>> (-2.0).is_integer()\n"
"True\n"
">>> (3.2).is_integer()\n"
"False"
msgstr ""

#: ../../library/stdtypes.rst:668
msgid ""
"Two methods support conversion to and from hexadecimal strings.  Since "
"Python's floats are stored internally as binary numbers, converting a float "
"to or from a *decimal* string usually involves a small rounding error.  In "
"contrast, hexadecimal strings allow exact representation and specification "
"of floating-point numbers.  This can be useful when debugging, and in "
"numerical work."
msgstr ""

#: ../../library/stdtypes.rst:679
msgid ""
"Return a representation of a floating-point number as a hexadecimal string.  "
"For finite floating-point numbers, this representation will always include a "
"leading ``0x`` and a trailing ``p`` and exponent."
msgstr ""

#: ../../library/stdtypes.rst:687
msgid ""
"Class method to return the float represented by a hexadecimal string *s*.  "
"The string *s* may have leading and trailing whitespace."
msgstr ""

#: ../../library/stdtypes.rst:692
msgid ""
"Note that :meth:`float.hex` is an instance method, while :meth:`float."
"fromhex` is a class method."
msgstr ""

#: ../../library/stdtypes.rst:695
msgid "A hexadecimal string takes the form::"
msgstr ""

#: ../../library/stdtypes.rst:697
msgid "[sign] ['0x'] integer ['.' fraction] ['p' exponent]"
msgstr ""

#: ../../library/stdtypes.rst:699
msgid ""
"where the optional ``sign`` may by either ``+`` or ``-``, ``integer`` and "
"``fraction`` are strings of hexadecimal digits, and ``exponent`` is a "
"decimal integer with an optional leading sign.  Case is not significant, and "
"there must be at least one hexadecimal digit in either the integer or the "
"fraction.  This syntax is similar to the syntax specified in section 6.4.4.2 "
"of the C99 standard, and also to the syntax used in Java 1.5 onwards.  In "
"particular, the output of :meth:`float.hex` is usable as a hexadecimal "
"floating-point literal in C or Java code, and hexadecimal strings produced "
"by C's ``%a`` format character or Java's ``Double.toHexString`` are accepted "
"by :meth:`float.fromhex`."
msgstr ""

#: ../../library/stdtypes.rst:712
msgid ""
"Note that the exponent is written in decimal rather than hexadecimal, and "
"that it gives the power of 2 by which to multiply the coefficient. For "
"example, the hexadecimal string ``0x3.a7p10`` represents the floating-point "
"number ``(3 + 10./16 + 7./16**2) * 2.0**10``, or ``3740.0``::"
msgstr ""

#: ../../library/stdtypes.rst:718
msgid ""
">>> float.fromhex('0x3.a7p10')\n"
"3740.0"
msgstr ""

#: ../../library/stdtypes.rst:722
msgid ""
"Applying the reverse conversion to ``3740.0`` gives a different hexadecimal "
"string representing the same number::"
msgstr ""

#: ../../library/stdtypes.rst:725
msgid ""
">>> float.hex(3740.0)\n"
"'0x1.d380000000000p+11'"
msgstr ""

#: ../../library/stdtypes.rst:730
msgid "Additional Methods on Complex"
msgstr ""

#: ../../library/stdtypes.rst:732
msgid ""
"The :class:`!complex` type implements the :class:`numbers.Complex` :term:"
"`abstract base class`. :class:`!complex` also has the following additional "
"methods."
msgstr ""

#: ../../library/stdtypes.rst:738
msgid "Class method to convert a number to a complex number."
msgstr ""

#: ../../library/stdtypes.rst:740
msgid ""
"For a general Python object ``x``, ``complex.from_number(x)`` delegates to "
"``x.__complex__()``.  If :meth:`~object.__complex__` is not defined then it "
"falls back to :meth:`~object.__float__`.  If :meth:`!__float__` is not "
"defined then it falls back to :meth:`~object.__index__`."
msgstr ""

#: ../../library/stdtypes.rst:751
msgid "Hashing of numeric types"
msgstr ""

#: ../../library/stdtypes.rst:753
msgid ""
"For numbers ``x`` and ``y``, possibly of different types, it's a requirement "
"that ``hash(x) == hash(y)`` whenever ``x == y`` (see the :meth:`~object."
"__hash__` method documentation for more details).  For ease of "
"implementation and efficiency across a variety of numeric types (including :"
"class:`int`, :class:`float`, :class:`decimal.Decimal` and :class:`fractions."
"Fraction`) Python's hash for numeric types is based on a single mathematical "
"function that's defined for any rational number, and hence applies to all "
"instances of :class:`int` and :class:`fractions.Fraction`, and all finite "
"instances of :class:`float` and :class:`decimal.Decimal`.  Essentially, this "
"function is given by reduction modulo ``P`` for a fixed prime ``P``.  The "
"value of ``P`` is made available to Python as the :attr:`~sys.hash_info."
"modulus` attribute of :data:`sys.hash_info`."
msgstr ""

#: ../../library/stdtypes.rst:768
msgid ""
"Currently, the prime used is ``P = 2**31 - 1`` on machines with 32-bit C "
"longs and ``P = 2**61 - 1`` on machines with 64-bit C longs."
msgstr ""

#: ../../library/stdtypes.rst:771
msgid "Here are the rules in detail:"
msgstr ""

#: ../../library/stdtypes.rst:773
msgid ""
"If ``x = m / n`` is a nonnegative rational number and ``n`` is not divisible "
"by ``P``, define ``hash(x)`` as ``m * invmod(n, P) % P``, where ``invmod(n, "
"P)`` gives the inverse of ``n`` modulo ``P``."
msgstr ""

#: ../../library/stdtypes.rst:777
msgid ""
"If ``x = m / n`` is a nonnegative rational number and ``n`` is divisible by "
"``P`` (but ``m`` is not) then ``n`` has no inverse modulo ``P`` and the rule "
"above doesn't apply; in this case define ``hash(x)`` to be the constant "
"value ``sys.hash_info.inf``."
msgstr ""

#: ../../library/stdtypes.rst:782
msgid ""
"If ``x = m / n`` is a negative rational number define ``hash(x)`` as ``-"
"hash(-x)``.  If the resulting hash is ``-1``, replace it with ``-2``."
msgstr ""

#: ../../library/stdtypes.rst:786
msgid ""
"The particular values ``sys.hash_info.inf`` and ``-sys.hash_info.inf`` are "
"used as hash values for positive infinity or negative infinity "
"(respectively)."
msgstr ""

#: ../../library/stdtypes.rst:790
msgid ""
"For a :class:`complex` number ``z``, the hash values of the real and "
"imaginary parts are combined by computing ``hash(z.real) + sys.hash_info."
"imag * hash(z.imag)``, reduced modulo ``2**sys.hash_info.width`` so that it "
"lies in ``range(-2**(sys.hash_info.width - 1), 2**(sys.hash_info.width - "
"1))``.  Again, if the result is ``-1``, it's replaced with ``-2``."
msgstr ""

#: ../../library/stdtypes.rst:798
msgid ""
"To clarify the above rules, here's some example Python code, equivalent to "
"the built-in hash, for computing the hash of a rational number, :class:"
"`float`, or :class:`complex`::"
msgstr ""

#: ../../library/stdtypes.rst:803
msgid ""
"import sys, math\n"
"\n"
"def hash_fraction(m, n):\n"
"    \"\"\"Compute the hash of a rational number m / n.\n"
"\n"
"    Assumes m and n are integers, with n positive.\n"
"    Equivalent to hash(fractions.Fraction(m, n)).\n"
"\n"
"    \"\"\"\n"
"    P = sys.hash_info.modulus\n"
"    # Remove common factors of P.  (Unnecessary if m and n already "
"coprime.)\n"
"    while m % P == n % P == 0:\n"
"        m, n = m // P, n // P\n"
"\n"
"    if n % P == 0:\n"
"        hash_value = sys.hash_info.inf\n"
"    else:\n"
"        # Fermat's Little Theorem: pow(n, P-1, P) is 1, so\n"
"        # pow(n, P-2, P) gives the inverse of n modulo P.\n"
"        hash_value = (abs(m) % P) * pow(n, P - 2, P) % P\n"
"    if m < 0:\n"
"        hash_value = -hash_value\n"
"    if hash_value == -1:\n"
"        hash_value = -2\n"
"    return hash_value\n"
"\n"
"def hash_float(x):\n"
"    \"\"\"Compute the hash of a float x.\"\"\"\n"
"\n"
"    if math.isnan(x):\n"
"        return object.__hash__(x)\n"
"    elif math.isinf(x):\n"
"        return sys.hash_info.inf if x > 0 else -sys.hash_info.inf\n"
"    else:\n"
"        return hash_fraction(*x.as_integer_ratio())\n"
"\n"
"def hash_complex(z):\n"
"    \"\"\"Compute the hash of a complex number z.\"\"\"\n"
"\n"
"    hash_value = hash_float(z.real) + sys.hash_info.imag * hash_float(z."
"imag)\n"
"    # do a signed reduction modulo 2**sys.hash_info.width\n"
"    M = 2**(sys.hash_info.width - 1)\n"
"    hash_value = (hash_value & (M - 1)) - (hash_value & M)\n"
"    if hash_value == -1:\n"
"        hash_value = -2\n"
"    return hash_value"
msgstr ""

#: ../../library/stdtypes.rst:854
msgid "Boolean Type - :class:`bool`"
msgstr ""

#: ../../library/stdtypes.rst:856
msgid ""
"Booleans represent truth values. The :class:`bool` type has exactly two "
"constant instances: ``True`` and ``False``."
msgstr ""

#: ../../library/stdtypes.rst:864
msgid ""
"The built-in function :func:`bool`  converts any value to a boolean, if the "
"value can be interpreted as a truth value (see section :ref:`truth` above)."
msgstr ""

#: ../../library/stdtypes.rst:867
msgid ""
"For logical operations, use the :ref:`boolean operators <boolean>` ``and``, "
"``or`` and ``not``. When applying the bitwise operators ``&``, ``|``, ``^`` "
"to two booleans, they return a bool equivalent to the logical operations "
"\"and\", \"or\", \"xor\". However, the logical operators ``and``, ``or`` and "
"``!=`` should be preferred over ``&``, ``|`` and ``^``."
msgstr ""

#: ../../library/stdtypes.rst:876
msgid ""
"The use of the bitwise inversion operator ``~`` is deprecated and will raise "
"an error in Python 3.16."
msgstr ""

#: ../../library/stdtypes.rst:879
msgid ""
":class:`bool` is a subclass of :class:`int` (see :ref:`typesnumeric`). In "
"many numeric contexts, ``False`` and ``True`` behave like the integers 0 and "
"1, respectively. However, relying on this is discouraged; explicitly convert "
"using :func:`int` instead."
msgstr ""

#: ../../library/stdtypes.rst:887
msgid "Iterator Types"
msgstr ""

#: ../../library/stdtypes.rst:895
msgid ""
"Python supports a concept of iteration over containers.  This is implemented "
"using two distinct methods; these are used to allow user-defined classes to "
"support iteration.  Sequences, described below in more detail, always "
"support the iteration methods."
msgstr ""

#: ../../library/stdtypes.rst:900
msgid ""
"One method needs to be defined for container objects to provide :term:"
"`iterable` support:"
msgstr ""

#: ../../library/stdtypes.rst:907
msgid ""
"Return an :term:`iterator` object.  The object is required to support the "
"iterator protocol described below.  If a container supports different types "
"of iteration, additional methods can be provided to specifically request "
"iterators for those iteration types.  (An example of an object supporting "
"multiple forms of iteration would be a tree structure which supports both "
"breadth-first and depth-first traversal.)  This method corresponds to the :c:"
"member:`~PyTypeObject.tp_iter` slot of the type structure for Python objects "
"in the Python/C API."
msgstr ""

#: ../../library/stdtypes.rst:916
msgid ""
"The iterator objects themselves are required to support the following two "
"methods, which together form the :dfn:`iterator protocol`:"
msgstr ""

#: ../../library/stdtypes.rst:922
msgid ""
"Return the :term:`iterator` object itself.  This is required to allow both "
"containers and iterators to be used with the :keyword:`for` and :keyword:"
"`in` statements.  This method corresponds to the :c:member:`~PyTypeObject."
"tp_iter` slot of the type structure for Python objects in the Python/C API."
msgstr ""

#: ../../library/stdtypes.rst:931
msgid ""
"Return the next item from the :term:`iterator`.  If there are no further "
"items, raise the :exc:`StopIteration` exception.  This method corresponds to "
"the :c:member:`~PyTypeObject.tp_iternext` slot of the type structure for "
"Python objects in the Python/C API."
msgstr ""

#: ../../library/stdtypes.rst:936
msgid ""
"Python defines several iterator objects to support iteration over general "
"and specific sequence types, dictionaries, and other more specialized "
"forms.  The specific types are not important beyond their implementation of "
"the iterator protocol."
msgstr ""

#: ../../library/stdtypes.rst:941
msgid ""
"Once an iterator's :meth:`~iterator.__next__` method raises :exc:"
"`StopIteration`, it must continue to do so on subsequent calls. "
"Implementations that do not obey this property are deemed broken."
msgstr ""

#: ../../library/stdtypes.rst:949
msgid "Generator Types"
msgstr ""

#: ../../library/stdtypes.rst:951
msgid ""
"Python's :term:`generator`\\s provide a convenient way to implement the "
"iterator protocol.  If a container object's :meth:`~object.__iter__` method "
"is implemented as a generator, it will automatically return an iterator "
"object (technically, a generator object) supplying the :meth:`~iterator."
"__iter__` and :meth:`~generator.__next__` methods. More information about "
"generators can be found in :ref:`the documentation for the yield expression "
"<yieldexpr>`."
msgstr ""

#: ../../library/stdtypes.rst:963
msgid "Sequence Types --- :class:`list`, :class:`tuple`, :class:`range`"
msgstr ""

#: ../../library/stdtypes.rst:965
msgid ""
"There are three basic sequence types: lists, tuples, and range objects. "
"Additional sequence types tailored for processing of :ref:`binary data "
"<binaryseq>` and :ref:`text strings <textseq>` are described in dedicated "
"sections."
msgstr ""

#: ../../library/stdtypes.rst:974
msgid "Common Sequence Operations"
msgstr ""

#: ../../library/stdtypes.rst:978
msgid ""
"The operations in the following table are supported by most sequence types, "
"both mutable and immutable. The :class:`collections.abc.Sequence` ABC is "
"provided to make it easier to correctly implement these operations on custom "
"sequence types."
msgstr ""

#: ../../library/stdtypes.rst:983
msgid ""
"This table lists the sequence operations sorted in ascending priority.  In "
"the table, *s* and *t* are sequences of the same type, *n*, *i*, *j* and *k* "
"are integers and *x* is an arbitrary object that meets any type and value "
"restrictions imposed by *s*."
msgstr ""

#: ../../library/stdtypes.rst:988
msgid ""
"The ``in`` and ``not in`` operations have the same priorities as the "
"comparison operations. The ``+`` (concatenation) and ``*`` (repetition) "
"operations have the same priority as the corresponding numeric operations. "
"[3]_"
msgstr ""

#: ../../library/stdtypes.rst:1009
msgid "``x in s``"
msgstr ""

#: ../../library/stdtypes.rst:1009
msgid "``True`` if an item of *s* is equal to *x*, else ``False``"
msgstr ""

#: ../../library/stdtypes.rst:1012
msgid "``x not in s``"
msgstr ""

#: ../../library/stdtypes.rst:1012
msgid "``False`` if an item of *s* is equal to *x*, else ``True``"
msgstr ""

#: ../../library/stdtypes.rst:1015
msgid "``s + t``"
msgstr ""

#: ../../library/stdtypes.rst:1015
msgid "the concatenation of *s* and *t*"
msgstr ""

#: ../../library/stdtypes.rst:1015
msgid "(6)(7)"
msgstr ""

#: ../../library/stdtypes.rst:1018
msgid "``s * n`` or ``n * s``"
msgstr ""

#: ../../library/stdtypes.rst:1018
msgid "equivalent to adding *s* to itself *n* times"
msgstr ""

#: ../../library/stdtypes.rst:1018
msgid "(2)(7)"
msgstr ""

#: ../../library/stdtypes.rst:1021
msgid "``s[i]``"
msgstr ""

#: ../../library/stdtypes.rst:1021
msgid "*i*\\ th item of *s*, origin 0"
msgstr ""

#: ../../library/stdtypes.rst:1021
msgid "(3)(9)"
msgstr ""

#: ../../library/stdtypes.rst:1023
msgid "``s[i:j]``"
msgstr ""

#: ../../library/stdtypes.rst:1023
msgid "slice of *s* from *i* to *j*"
msgstr ""

#: ../../library/stdtypes.rst:1023
msgid "(3)(4)"
msgstr ""

#: ../../library/stdtypes.rst:1025
msgid "``s[i:j:k]``"
msgstr ""

#: ../../library/stdtypes.rst:1025
msgid "slice of *s* from *i* to *j* with step *k*"
msgstr ""

#: ../../library/stdtypes.rst:1025
msgid "(3)(5)"
msgstr ""

#: ../../library/stdtypes.rst:1028
msgid "``len(s)``"
msgstr ""

#: ../../library/stdtypes.rst:1028
msgid "length of *s*"
msgstr ""

#: ../../library/stdtypes.rst:1030
msgid "``min(s)``"
msgstr ""

#: ../../library/stdtypes.rst:1030
msgid "smallest item of *s*"
msgstr ""

#: ../../library/stdtypes.rst:1032
msgid "``max(s)``"
msgstr ""

#: ../../library/stdtypes.rst:1032
msgid "largest item of *s*"
msgstr ""

#: ../../library/stdtypes.rst:1034
msgid "``s.index(x[, i[, j]])``"
msgstr ""

#: ../../library/stdtypes.rst:1034
msgid ""
"index of the first occurrence of *x* in *s* (at or after index *i* and "
"before index *j*)"
msgstr ""

#: ../../library/stdtypes.rst:1034 ../../library/stdtypes.rst:4037
msgid "\\(8)"
msgstr ""

#: ../../library/stdtypes.rst:1038
msgid "``s.count(x)``"
msgstr ""

#: ../../library/stdtypes.rst:1038
msgid "total number of occurrences of *x* in *s*"
msgstr ""

#: ../../library/stdtypes.rst:1042
msgid ""
"Sequences of the same type also support comparisons.  In particular, tuples "
"and lists are compared lexicographically by comparing corresponding "
"elements. This means that to compare equal, every element must compare equal "
"and the two sequences must be of the same type and have the same length.  "
"(For full details see :ref:`comparisons` in the language reference.)"
msgstr ""

#: ../../library/stdtypes.rst:1052
msgid ""
"Forward and reversed iterators over mutable sequences access values using an "
"index.  That index will continue to march forward (or backward) even if the "
"underlying sequence is mutated.  The iterator terminates only when an :exc:"
"`IndexError` or a :exc:`StopIteration` is encountered (or when the index "
"drops below zero)."
msgstr ""

#: ../../library/stdtypes.rst:1061
msgid ""
"While the ``in`` and ``not in`` operations are used only for simple "
"containment testing in the general case, some specialised sequences (such "
"as :class:`str`, :class:`bytes` and :class:`bytearray`) also use them for "
"subsequence testing::"
msgstr ""

#: ../../library/stdtypes.rst:1066
msgid ""
">>> \"gg\" in \"eggs\"\n"
"True"
msgstr ""

#: ../../library/stdtypes.rst:1070
msgid ""
"Values of *n* less than ``0`` are treated as ``0`` (which yields an empty "
"sequence of the same type as *s*).  Note that items in the sequence *s* are "
"not copied; they are referenced multiple times.  This often haunts new "
"Python programmers; consider::"
msgstr ""

#: ../../library/stdtypes.rst:1075
msgid ""
">>> lists = [[]] * 3\n"
">>> lists\n"
"[[], [], []]\n"
">>> lists[0].append(3)\n"
">>> lists\n"
"[[3], [3], [3]]"
msgstr ""

#: ../../library/stdtypes.rst:1082
msgid ""
"What has happened is that ``[[]]`` is a one-element list containing an empty "
"list, so all three elements of ``[[]] * 3`` are references to this single "
"empty list.  Modifying any of the elements of ``lists`` modifies this single "
"list. You can create a list of different lists this way::"
msgstr ""

#: ../../library/stdtypes.rst:1087
msgid ""
">>> lists = [[] for i in range(3)]\n"
">>> lists[0].append(3)\n"
">>> lists[1].append(5)\n"
">>> lists[2].append(7)\n"
">>> lists\n"
"[[3], [5], [7]]"
msgstr ""

#: ../../library/stdtypes.rst:1094
msgid ""
"Further explanation is available in the FAQ entry :ref:`faq-multidimensional-"
"list`."
msgstr ""

#: ../../library/stdtypes.rst:1098
msgid ""
"If *i* or *j* is negative, the index is relative to the end of sequence *s*: "
"``len(s) + i`` or ``len(s) + j`` is substituted.  But note that ``-0`` is "
"still ``0``."
msgstr ""

#: ../../library/stdtypes.rst:1103
msgid ""
"The slice of *s* from *i* to *j* is defined as the sequence of items with "
"index *k* such that ``i <= k < j``.  If *i* or *j* is greater than "
"``len(s)``, use ``len(s)``.  If *i* is omitted or ``None``, use ``0``.  If "
"*j* is omitted or ``None``, use ``len(s)``.  If *i* is greater than or equal "
"to *j*, the slice is empty."
msgstr ""

#: ../../library/stdtypes.rst:1110
msgid ""
"The slice of *s* from *i* to *j* with step *k* is defined as the sequence of "
"items with index  ``x = i + n*k`` such that ``0 <= n < (j-i)/k``.  In other "
"words, the indices are ``i``, ``i+k``, ``i+2*k``, ``i+3*k`` and so on, "
"stopping when *j* is reached (but never including *j*).  When *k* is "
"positive, *i* and *j* are reduced to ``len(s)`` if they are greater. When "
"*k* is negative, *i* and *j* are reduced to ``len(s) - 1`` if they are "
"greater.  If *i* or *j* are omitted or ``None``, they become \"end\" values "
"(which end depends on the sign of *k*).  Note, *k* cannot be zero. If *k* is "
"``None``, it is treated like ``1``."
msgstr ""

#: ../../library/stdtypes.rst:1121
msgid ""
"Concatenating immutable sequences always results in a new object.  This "
"means that building up a sequence by repeated concatenation will have a "
"quadratic runtime cost in the total sequence length.  To get a linear "
"runtime cost, you must switch to one of the alternatives below:"
msgstr ""

#: ../../library/stdtypes.rst:1126
msgid ""
"if concatenating :class:`str` objects, you can build a list and use :meth:"
"`str.join` at the end or else write to an :class:`io.StringIO` instance and "
"retrieve its value when complete"
msgstr ""

#: ../../library/stdtypes.rst:1130
msgid ""
"if concatenating :class:`bytes` objects, you can similarly use :meth:`bytes."
"join` or :class:`io.BytesIO`, or you can do in-place concatenation with a :"
"class:`bytearray` object.  :class:`bytearray` objects are mutable and have "
"an efficient overallocation mechanism"
msgstr ""

#: ../../library/stdtypes.rst:1135
msgid "if concatenating :class:`tuple` objects, extend a :class:`list` instead"
msgstr ""

#: ../../library/stdtypes.rst:1137
msgid "for other types, investigate the relevant class documentation"
msgstr ""

#: ../../library/stdtypes.rst:1141
msgid ""
"Some sequence types (such as :class:`range`) only support item sequences "
"that follow specific patterns, and hence don't support sequence "
"concatenation or repetition."
msgstr ""

#: ../../library/stdtypes.rst:1146
msgid ""
"``index`` raises :exc:`ValueError` when *x* is not found in *s*. Not all "
"implementations support passing the additional arguments *i* and *j*. These "
"arguments allow efficient searching of subsections of the sequence. Passing "
"the extra arguments is roughly equivalent to using ``s[i:j].index(x)``, only "
"without copying any data and with the returned index being relative to the "
"start of the sequence rather than the start of the slice."
msgstr ""

#: ../../library/stdtypes.rst:1154
msgid "An :exc:`IndexError` is raised if *i* is outside the sequence range."
msgstr ""

#: ../../library/stdtypes.rst:1160
msgid "Immutable Sequence Types"
msgstr ""

#: ../../library/stdtypes.rst:1167
msgid ""
"The only operation that immutable sequence types generally implement that is "
"not also implemented by mutable sequence types is support for the :func:"
"`hash` built-in."
msgstr ""

#: ../../library/stdtypes.rst:1171
msgid ""
"This support allows immutable sequences, such as :class:`tuple` instances, "
"to be used as :class:`dict` keys and stored in :class:`set` and :class:"
"`frozenset` instances."
msgstr ""

#: ../../library/stdtypes.rst:1175
msgid ""
"Attempting to hash an immutable sequence that contains unhashable values "
"will result in :exc:`TypeError`."
msgstr ""

#: ../../library/stdtypes.rst:1182
msgid "Mutable Sequence Types"
msgstr ""

#: ../../library/stdtypes.rst:1189
msgid ""
"The operations in the following table are defined on mutable sequence types. "
"The :class:`collections.abc.MutableSequence` ABC is provided to make it "
"easier to correctly implement these operations on custom sequence types."
msgstr ""

#: ../../library/stdtypes.rst:1193
msgid ""
"In the table *s* is an instance of a mutable sequence type, *t* is any "
"iterable object and *x* is an arbitrary object that meets any type and value "
"restrictions imposed by *s* (for example, :class:`bytearray` only accepts "
"integers that meet the value restriction ``0 <= x <= 255``)."
msgstr ""

#: ../../library/stdtypes.rst:1217
msgid "``s[i] = x``"
msgstr ""

#: ../../library/stdtypes.rst:1217
msgid "item *i* of *s* is replaced by *x*"
msgstr ""

#: ../../library/stdtypes.rst:1220
msgid "``del s[i]``"
msgstr ""

#: ../../library/stdtypes.rst:1220
msgid "removes item *i* of *s*"
msgstr ""

#: ../../library/stdtypes.rst:1222
msgid "``s[i:j] = t``"
msgstr ""

#: ../../library/stdtypes.rst:1222
msgid ""
"slice of *s* from *i* to *j* is replaced by the contents of the iterable *t*"
msgstr ""

#: ../../library/stdtypes.rst:1226
msgid "``del s[i:j]``"
msgstr ""

#: ../../library/stdtypes.rst:1226
msgid "same as ``s[i:j] = []``"
msgstr ""

#: ../../library/stdtypes.rst:1228
msgid "``s[i:j:k] = t``"
msgstr ""

#: ../../library/stdtypes.rst:1228
msgid "the elements of ``s[i:j:k]`` are replaced by those of *t*"
msgstr ""

#: ../../library/stdtypes.rst:1231
msgid "``del s[i:j:k]``"
msgstr ""

#: ../../library/stdtypes.rst:1231
msgid "removes the elements of ``s[i:j:k]`` from the list"
msgstr ""

#: ../../library/stdtypes.rst:1234
msgid "``s.append(x)``"
msgstr ""

#: ../../library/stdtypes.rst:1234
msgid ""
"appends *x* to the end of the sequence (same as ``s[len(s):len(s)] = [x]``)"
msgstr ""

#: ../../library/stdtypes.rst:1238
msgid "``s.clear()``"
msgstr ""

#: ../../library/stdtypes.rst:1238
msgid "removes all items from *s* (same as ``del s[:]``)"
msgstr ""

#: ../../library/stdtypes.rst:1241
msgid "``s.copy()``"
msgstr ""

#: ../../library/stdtypes.rst:1241
msgid "creates a shallow copy of *s* (same as ``s[:]``)"
msgstr ""

#: ../../library/stdtypes.rst:1244
msgid "``s.extend(t)`` or ``s += t``"
msgstr ""

#: ../../library/stdtypes.rst:1244
msgid ""
"extends *s* with the contents of *t* (for the most part the same as "
"``s[len(s):len(s)] = t``)"
msgstr ""

#: ../../library/stdtypes.rst:1249
msgid "``s *= n``"
msgstr ""

#: ../../library/stdtypes.rst:1249
msgid "updates *s* with its contents repeated *n* times"
msgstr ""

#: ../../library/stdtypes.rst:1252
msgid "``s.insert(i, x)``"
msgstr ""

#: ../../library/stdtypes.rst:1252
msgid ""
"inserts *x* into *s* at the index given by *i* (same as ``s[i:i] = [x]``)"
msgstr ""

#: ../../library/stdtypes.rst:1256
msgid "``s.pop()`` or ``s.pop(i)``"
msgstr ""

#: ../../library/stdtypes.rst:1256
msgid "retrieves the item at *i* and also removes it from *s*"
msgstr ""

#: ../../library/stdtypes.rst:1259
msgid "``s.remove(x)``"
msgstr ""

#: ../../library/stdtypes.rst:1259
msgid "removes the first item from *s* where ``s[i]`` is equal to *x*"
msgstr ""

#: ../../library/stdtypes.rst:1263
msgid "``s.reverse()``"
msgstr ""

#: ../../library/stdtypes.rst:1263
msgid "reverses the items of *s* in place"
msgstr ""

#: ../../library/stdtypes.rst:1271
msgid ""
"If *k* is not equal to ``1``, *t* must have the same length as the slice it "
"is replacing."
msgstr ""

#: ../../library/stdtypes.rst:1274
msgid ""
"The optional argument *i* defaults to ``-1``, so that by default the last "
"item is removed and returned."
msgstr ""

#: ../../library/stdtypes.rst:1278
msgid ":meth:`remove` raises :exc:`ValueError` when *x* is not found in *s*."
msgstr ""

#: ../../library/stdtypes.rst:1281
msgid ""
"The :meth:`reverse` method modifies the sequence in place for economy of "
"space when reversing a large sequence.  To remind users that it operates by "
"side effect, it does not return the reversed sequence."
msgstr ""

#: ../../library/stdtypes.rst:1286
msgid ""
":meth:`clear` and :meth:`!copy` are included for consistency with the "
"interfaces of mutable containers that don't support slicing operations (such "
"as :class:`dict` and :class:`set`). :meth:`!copy` is not part of the :class:"
"`collections.abc.MutableSequence` ABC, but most concrete mutable sequence "
"classes provide it."
msgstr ""

#: ../../library/stdtypes.rst:1292
msgid ":meth:`clear` and :meth:`!copy` methods."
msgstr ""

#: ../../library/stdtypes.rst:1296
msgid ""
"The value *n* is an integer, or an object implementing :meth:`~object."
"__index__`.  Zero and negative values of *n* clear the sequence.  Items in "
"the sequence are not copied; they are referenced multiple times, as "
"explained for ``s * n`` under :ref:`typesseq-common`."
msgstr ""

#: ../../library/stdtypes.rst:1305
msgid "Lists"
msgstr ""

#: ../../library/stdtypes.rst:1309
msgid ""
"Lists are mutable sequences, typically used to store collections of "
"homogeneous items (where the precise degree of similarity will vary by "
"application)."
msgstr ""

#: ../../library/stdtypes.rst:1315
msgid "Lists may be constructed in several ways:"
msgstr ""

#: ../../library/stdtypes.rst:1317
msgid "Using a pair of square brackets to denote the empty list: ``[]``"
msgstr ""

#: ../../library/stdtypes.rst:1318
msgid ""
"Using square brackets, separating items with commas: ``[a]``, ``[a, b, c]``"
msgstr ""

#: ../../library/stdtypes.rst:1319
msgid "Using a list comprehension: ``[x for x in iterable]``"
msgstr ""

#: ../../library/stdtypes.rst:1320
msgid "Using the type constructor: ``list()`` or ``list(iterable)``"
msgstr ""

#: ../../library/stdtypes.rst:1322
msgid ""
"The constructor builds a list whose items are the same and in the same order "
"as *iterable*'s items.  *iterable* may be either a sequence, a container "
"that supports iteration, or an iterator object.  If *iterable* is already a "
"list, a copy is made and returned, similar to ``iterable[:]``. For example, "
"``list('abc')`` returns ``['a', 'b', 'c']`` and ``list( (1, 2, 3) )`` "
"returns ``[1, 2, 3]``. If no argument is given, the constructor creates a "
"new empty list, ``[]``."
msgstr ""

#: ../../library/stdtypes.rst:1331
msgid ""
"Many other operations also produce lists, including the :func:`sorted` built-"
"in."
msgstr ""

#: ../../library/stdtypes.rst:1334
msgid ""
"Lists implement all of the :ref:`common <typesseq-common>` and :ref:`mutable "
"<typesseq-mutable>` sequence operations. Lists also provide the following "
"additional method:"
msgstr ""

#: ../../library/stdtypes.rst:1340
msgid ""
"This method sorts the list in place, using only ``<`` comparisons between "
"items. Exceptions are not suppressed - if any comparison operations fail, "
"the entire sort operation will fail (and the list will likely be left in a "
"partially modified state)."
msgstr ""

#: ../../library/stdtypes.rst:1345
msgid ""
":meth:`sort` accepts two arguments that can only be passed by keyword (:ref:"
"`keyword-only arguments <keyword-only_parameter>`):"
msgstr ""

#: ../../library/stdtypes.rst:1348
msgid ""
"*key* specifies a function of one argument that is used to extract a "
"comparison key from each list element (for example, ``key=str.lower``). The "
"key corresponding to each item in the list is calculated once and then used "
"for the entire sorting process. The default value of ``None`` means that "
"list items are sorted directly without calculating a separate key value."
msgstr ""

#: ../../library/stdtypes.rst:1355
msgid ""
"The :func:`functools.cmp_to_key` utility is available to convert a 2.x style "
"*cmp* function to a *key* function."
msgstr ""

#: ../../library/stdtypes.rst:1358
msgid ""
"*reverse* is a boolean value.  If set to ``True``, then the list elements "
"are sorted as if each comparison were reversed."
msgstr ""

#: ../../library/stdtypes.rst:1361
msgid ""
"This method modifies the sequence in place for economy of space when sorting "
"a large sequence.  To remind users that it operates by side effect, it does "
"not return the sorted sequence (use :func:`sorted` to explicitly request a "
"new sorted list instance)."
msgstr ""

#: ../../library/stdtypes.rst:1366
msgid ""
"The :meth:`sort` method is guaranteed to be stable.  A sort is stable if it "
"guarantees not to change the relative order of elements that compare equal "
"--- this is helpful for sorting in multiple passes (for example, sort by "
"department, then by salary grade)."
msgstr ""

#: ../../library/stdtypes.rst:1371
msgid ""
"For sorting examples and a brief sorting tutorial, see :ref:`sortinghowto`."
msgstr ""

#: ../../library/stdtypes.rst:1375
msgid ""
"While a list is being sorted, the effect of attempting to mutate, or even "
"inspect, the list is undefined.  The C implementation of Python makes the "
"list appear empty for the duration, and raises :exc:`ValueError` if it can "
"detect that the list has been mutated during a sort."
msgstr ""

#: ../../library/stdtypes.rst:1384
msgid "Tuples"
msgstr ""

#: ../../library/stdtypes.rst:1388
msgid ""
"Tuples are immutable sequences, typically used to store collections of "
"heterogeneous data (such as the 2-tuples produced by the :func:`enumerate` "
"built-in). Tuples are also used for cases where an immutable sequence of "
"homogeneous data is needed (such as allowing storage in a :class:`set` or :"
"class:`dict` instance)."
msgstr ""

#: ../../library/stdtypes.rst:1396
msgid "Tuples may be constructed in a number of ways:"
msgstr ""

#: ../../library/stdtypes.rst:1398
msgid "Using a pair of parentheses to denote the empty tuple: ``()``"
msgstr ""

#: ../../library/stdtypes.rst:1399
msgid "Using a trailing comma for a singleton tuple: ``a,`` or ``(a,)``"
msgstr ""

#: ../../library/stdtypes.rst:1400
msgid "Separating items with commas: ``a, b, c`` or ``(a, b, c)``"
msgstr ""

#: ../../library/stdtypes.rst:1401
msgid "Using the :func:`tuple` built-in: ``tuple()`` or ``tuple(iterable)``"
msgstr ""

#: ../../library/stdtypes.rst:1403
msgid ""
"The constructor builds a tuple whose items are the same and in the same "
"order as *iterable*'s items.  *iterable* may be either a sequence, a "
"container that supports iteration, or an iterator object.  If *iterable* is "
"already a tuple, it is returned unchanged. For example, ``tuple('abc')`` "
"returns ``('a', 'b', 'c')`` and ``tuple( [1, 2, 3] )`` returns ``(1, 2, "
"3)``. If no argument is given, the constructor creates a new empty tuple, "
"``()``."
msgstr ""

#: ../../library/stdtypes.rst:1411
msgid ""
"Note that it is actually the comma which makes a tuple, not the parentheses. "
"The parentheses are optional, except in the empty tuple case, or when they "
"are needed to avoid syntactic ambiguity. For example, ``f(a, b, c)`` is a "
"function call with three arguments, while ``f((a, b, c))`` is a function "
"call with a 3-tuple as the sole argument."
msgstr ""

#: ../../library/stdtypes.rst:1417
msgid ""
"Tuples implement all of the :ref:`common <typesseq-common>` sequence "
"operations."
msgstr ""

#: ../../library/stdtypes.rst:1420
msgid ""
"For heterogeneous collections of data where access by name is clearer than "
"access by index, :func:`collections.namedtuple` may be a more appropriate "
"choice than a simple tuple object."
msgstr ""

#: ../../library/stdtypes.rst:1428
msgid "Ranges"
msgstr ""

#: ../../library/stdtypes.rst:1432
msgid ""
"The :class:`range` type represents an immutable sequence of numbers and is "
"commonly used for looping a specific number of times in :keyword:`for` loops."
msgstr ""

#: ../../library/stdtypes.rst:1439
msgid ""
"The arguments to the range constructor must be integers (either built-in :"
"class:`int` or any object that implements the :meth:`~object.__index__` "
"special method).  If the *step* argument is omitted, it defaults to ``1``. "
"If the *start* argument is omitted, it defaults to ``0``. If *step* is "
"zero, :exc:`ValueError` is raised."
msgstr ""

#: ../../library/stdtypes.rst:1445
msgid ""
"For a positive *step*, the contents of a range ``r`` are determined by the "
"formula ``r[i] = start + step*i`` where ``i >= 0`` and ``r[i] < stop``."
msgstr ""

#: ../../library/stdtypes.rst:1449
msgid ""
"For a negative *step*, the contents of the range are still determined by the "
"formula ``r[i] = start + step*i``, but the constraints are ``i >= 0`` and "
"``r[i] > stop``."
msgstr ""

#: ../../library/stdtypes.rst:1453
msgid ""
"A range object will be empty if ``r[0]`` does not meet the value constraint. "
"Ranges do support negative indices, but these are interpreted as indexing "
"from the end of the sequence determined by the positive indices."
msgstr ""

#: ../../library/stdtypes.rst:1458
msgid ""
"Ranges containing absolute values larger than :data:`sys.maxsize` are "
"permitted but some features (such as :func:`len`) may raise :exc:"
"`OverflowError`."
msgstr ""

#: ../../library/stdtypes.rst:1462
msgid "Range examples::"
msgstr ""

#: ../../library/stdtypes.rst:1464
msgid ""
">>> list(range(10))\n"
"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
">>> list(range(1, 11))\n"
"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
">>> list(range(0, 30, 5))\n"
"[0, 5, 10, 15, 20, 25]\n"
">>> list(range(0, 10, 3))\n"
"[0, 3, 6, 9]\n"
">>> list(range(0, -10, -1))\n"
"[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n"
">>> list(range(0))\n"
"[]\n"
">>> list(range(1, 0))\n"
"[]"
msgstr ""

#: ../../library/stdtypes.rst:1479
msgid ""
"Ranges implement all of the :ref:`common <typesseq-common>` sequence "
"operations except concatenation and repetition (due to the fact that range "
"objects can only represent sequences that follow a strict pattern and "
"repetition and concatenation will usually violate that pattern)."
msgstr ""

#: ../../library/stdtypes.rst:1486
msgid ""
"The value of the *start* parameter (or ``0`` if the parameter was not "
"supplied)"
msgstr ""

#: ../../library/stdtypes.rst:1491
msgid "The value of the *stop* parameter"
msgstr ""

#: ../../library/stdtypes.rst:1495
msgid ""
"The value of the *step* parameter (or ``1`` if the parameter was not "
"supplied)"
msgstr ""

#: ../../library/stdtypes.rst:1498
msgid ""
"The advantage of the :class:`range` type over a regular :class:`list` or :"
"class:`tuple` is that a :class:`range` object will always take the same "
"(small) amount of memory, no matter the size of the range it represents (as "
"it only stores the ``start``, ``stop`` and ``step`` values, calculating "
"individual items and subranges as needed)."
msgstr ""

#: ../../library/stdtypes.rst:1504
msgid ""
"Range objects implement the :class:`collections.abc.Sequence` ABC, and "
"provide features such as containment tests, element index lookup, slicing "
"and support for negative indices (see :ref:`typesseq`):"
msgstr ""

#: ../../library/stdtypes.rst:1524
msgid ""
"Testing range objects for equality with ``==`` and ``!=`` compares them as "
"sequences.  That is, two range objects are considered equal if they "
"represent the same sequence of values.  (Note that two range objects that "
"compare equal might have different :attr:`~range.start`, :attr:`~range.stop` "
"and :attr:`~range.step` attributes, for example ``range(0) == range(2, 1, "
"3)`` or ``range(0, 3, 2) == range(0, 4, 2)``.)"
msgstr ""

#: ../../library/stdtypes.rst:1531
msgid ""
"Implement the Sequence ABC. Support slicing and negative indices. Test :"
"class:`int` objects for membership in constant time instead of iterating "
"through all items."
msgstr ""

#: ../../library/stdtypes.rst:1537
msgid ""
"Define '==' and '!=' to compare range objects based on the sequence of "
"values they define (instead of comparing based on object identity)."
msgstr ""

#: ../../library/stdtypes.rst:1542
msgid ""
"Added the :attr:`~range.start`, :attr:`~range.stop` and :attr:`~range.step` "
"attributes."
msgstr ""

#: ../../library/stdtypes.rst:1547
msgid ""
"The `linspace recipe <https://code.activestate.com/recipes/579000-equally-"
"spaced-numbers-linspace/>`_ shows how to implement a lazy version of range "
"suitable for floating-point applications."
msgstr ""

#: ../../library/stdtypes.rst:1559
msgid "Text and Binary Sequence Type Methods Summary"
msgstr ""

#: ../../library/stdtypes.rst:1560
msgid ""
"The following table summarizes the text and binary sequence types methods by "
"category."
msgstr ""

#: ../../library/stdtypes.rst:1565
msgid "Category"
msgstr ""

#: ../../library/stdtypes.rst:1565
msgid ":class:`str` methods"
msgstr ""

#: ../../library/stdtypes.rst:1565
msgid ":class:`bytes` and :class:`bytearray` methods"
msgstr ""

#: ../../library/stdtypes.rst:1567
msgid "Formatting"
msgstr ""

#: ../../library/stdtypes.rst:1567
msgid ":meth:`str.format`"
msgstr ""

#: ../../library/stdtypes.rst:1569
msgid ":meth:`str.format_map`"
msgstr ""

#: ../../library/stdtypes.rst:1571
msgid ":ref:`f-strings`"
msgstr ""

#: ../../library/stdtypes.rst:1573
msgid ":ref:`old-string-formatting`"
msgstr ""

#: ../../library/stdtypes.rst:1573
msgid ":ref:`bytes-formatting`"
msgstr ""

#: ../../library/stdtypes.rst:1575
msgid "Searching and Replacing"
msgstr ""

#: ../../library/stdtypes.rst:1575
msgid ":meth:`str.find`"
msgstr ""

#: ../../library/stdtypes.rst:1575
msgid ":meth:`str.rfind`"
msgstr ""

#: ../../library/stdtypes.rst:1575
msgid ":meth:`bytes.find`"
msgstr ""

#: ../../library/stdtypes.rst:1575
msgid ":meth:`bytes.rfind`"
msgstr ""

#: ../../library/stdtypes.rst:1577
msgid ":meth:`str.index`"
msgstr ""

#: ../../library/stdtypes.rst:1577
msgid ":meth:`str.rindex`"
msgstr ""

#: ../../library/stdtypes.rst:1577
msgid ":meth:`bytes.index`"
msgstr ""

#: ../../library/stdtypes.rst:1577
msgid ":meth:`bytes.rindex`"
msgstr ""

#: ../../library/stdtypes.rst:1579
msgid ":meth:`str.startswith`"
msgstr ""

#: ../../library/stdtypes.rst:1579
msgid ":meth:`bytes.startswith`"
msgstr ""

#: ../../library/stdtypes.rst:1581
msgid ":meth:`str.endswith`"
msgstr ""

#: ../../library/stdtypes.rst:1581
msgid ":meth:`bytes.endswith`"
msgstr ""

#: ../../library/stdtypes.rst:1583
msgid ":meth:`str.count`"
msgstr ""

#: ../../library/stdtypes.rst:1583
msgid ":meth:`bytes.count`"
msgstr ""

#: ../../library/stdtypes.rst:1585
msgid ":meth:`str.replace`"
msgstr ""

#: ../../library/stdtypes.rst:1585
msgid ":meth:`bytes.replace`"
msgstr ""

#: ../../library/stdtypes.rst:1587
msgid "Splitting and Joining"
msgstr ""

#: ../../library/stdtypes.rst:1587
msgid ":meth:`str.split`"
msgstr ""

#: ../../library/stdtypes.rst:1587
msgid ":meth:`str.rsplit`"
msgstr ""

#: ../../library/stdtypes.rst:1587
msgid ":meth:`bytes.split`"
msgstr ""

#: ../../library/stdtypes.rst:1587
msgid ":meth:`bytes.rsplit`"
msgstr ""

#: ../../library/stdtypes.rst:1589
msgid ":meth:`str.splitlines`"
msgstr ""

#: ../../library/stdtypes.rst:1589
msgid ":meth:`bytes.splitlines`"
msgstr ""

#: ../../library/stdtypes.rst:1591
msgid ":meth:`str.partition`"
msgstr ""

#: ../../library/stdtypes.rst:1591
msgid ":meth:`bytes.partition`"
msgstr ""

#: ../../library/stdtypes.rst:1593
msgid ":meth:`str.rpartition`"
msgstr ""

#: ../../library/stdtypes.rst:1593
msgid ":meth:`bytes.rpartition`"
msgstr ""

#: ../../library/stdtypes.rst:1595
msgid ":meth:`str.join`"
msgstr ""

#: ../../library/stdtypes.rst:1595
msgid ":meth:`bytes.join`"
msgstr ""

#: ../../library/stdtypes.rst:1597
msgid "String Classification"
msgstr ""

#: ../../library/stdtypes.rst:1597
msgid ":meth:`str.isalpha`"
msgstr ""

#: ../../library/stdtypes.rst:1597
msgid ":meth:`bytes.isalpha`"
msgstr ""

#: ../../library/stdtypes.rst:1599
msgid ":meth:`str.isdecimal`"
msgstr ""

#: ../../library/stdtypes.rst:1601
msgid ":meth:`str.isdigit`"
msgstr ""

#: ../../library/stdtypes.rst:1601
msgid ":meth:`bytes.isdigit`"
msgstr ""

#: ../../library/stdtypes.rst:1603
msgid ":meth:`str.isnumeric`"
msgstr ""

#: ../../library/stdtypes.rst:1605
msgid ":meth:`str.isalnum`"
msgstr ""

#: ../../library/stdtypes.rst:1605
msgid ":meth:`bytes.isalnum`"
msgstr ""

#: ../../library/stdtypes.rst:1607
msgid ":meth:`str.isidentifier`"
msgstr ""

#: ../../library/stdtypes.rst:1609
msgid ":meth:`str.islower`"
msgstr ""

#: ../../library/stdtypes.rst:1609
msgid ":meth:`bytes.islower`"
msgstr ""

#: ../../library/stdtypes.rst:1611
msgid ":meth:`str.isupper`"
msgstr ""

#: ../../library/stdtypes.rst:1611
msgid ":meth:`bytes.isupper`"
msgstr ""

#: ../../library/stdtypes.rst:1613
msgid ":meth:`str.istitle`"
msgstr ""

#: ../../library/stdtypes.rst:1613
msgid ":meth:`bytes.istitle`"
msgstr ""

#: ../../library/stdtypes.rst:1615
msgid ":meth:`str.isspace`"
msgstr ""

#: ../../library/stdtypes.rst:1615
msgid ":meth:`bytes.isspace`"
msgstr ""

#: ../../library/stdtypes.rst:1617
msgid ":meth:`str.isprintable`"
msgstr ""

#: ../../library/stdtypes.rst:1619
msgid "Case Manipulation"
msgstr ""

#: ../../library/stdtypes.rst:1619
msgid ":meth:`str.lower`"
msgstr ""

#: ../../library/stdtypes.rst:1619
msgid ":meth:`bytes.lower`"
msgstr ""

#: ../../library/stdtypes.rst:1621
msgid ":meth:`str.upper`"
msgstr ""

#: ../../library/stdtypes.rst:1621
msgid ":meth:`bytes.upper`"
msgstr ""

#: ../../library/stdtypes.rst:1623
msgid ":meth:`str.casefold`"
msgstr ""

#: ../../library/stdtypes.rst:1625
msgid ":meth:`str.capitalize`"
msgstr ""

#: ../../library/stdtypes.rst:1625
msgid ":meth:`bytes.capitalize`"
msgstr ""

#: ../../library/stdtypes.rst:1627
msgid ":meth:`str.title`"
msgstr ""

#: ../../library/stdtypes.rst:1627
msgid ":meth:`bytes.title`"
msgstr ""

#: ../../library/stdtypes.rst:1629
msgid ":meth:`str.swapcase`"
msgstr ""

#: ../../library/stdtypes.rst:1629
msgid ":meth:`bytes.swapcase`"
msgstr ""

#: ../../library/stdtypes.rst:1631
msgid "Padding and Stripping"
msgstr ""

#: ../../library/stdtypes.rst:1631
msgid ":meth:`str.ljust`"
msgstr ""

#: ../../library/stdtypes.rst:1631
msgid ":meth:`str.rjust`"
msgstr ""

#: ../../library/stdtypes.rst:1631
msgid ":meth:`bytes.ljust`"
msgstr ""

#: ../../library/stdtypes.rst:1631
msgid ":meth:`bytes.rjust`"
msgstr ""

#: ../../library/stdtypes.rst:1633
msgid ":meth:`str.center`"
msgstr ""

#: ../../library/stdtypes.rst:1633
msgid ":meth:`bytes.center`"
msgstr ""

#: ../../library/stdtypes.rst:1635
msgid ":meth:`str.expandtabs`"
msgstr ""

#: ../../library/stdtypes.rst:1635
msgid ":meth:`bytes.expandtabs`"
msgstr ""

#: ../../library/stdtypes.rst:1637
msgid ":meth:`str.strip`"
msgstr ""

#: ../../library/stdtypes.rst:1637
msgid ":meth:`bytes.strip`"
msgstr ""

#: ../../library/stdtypes.rst:1639
msgid ":meth:`str.lstrip`"
msgstr ""

#: ../../library/stdtypes.rst:1639
msgid ":meth:`str.rstrip`"
msgstr ""

#: ../../library/stdtypes.rst:1639
msgid ":meth:`bytes.lstrip`"
msgstr ""

#: ../../library/stdtypes.rst:1639
msgid ":meth:`bytes.rstrip`"
msgstr ""

#: ../../library/stdtypes.rst:1641
msgid "Translation and Encoding"
msgstr ""

#: ../../library/stdtypes.rst:1641
msgid ":meth:`str.translate`"
msgstr ""

#: ../../library/stdtypes.rst:1641
msgid ":meth:`bytes.translate`"
msgstr ""

#: ../../library/stdtypes.rst:1643
msgid ":meth:`str.maketrans`"
msgstr ""

#: ../../library/stdtypes.rst:1643
msgid ":meth:`bytes.maketrans`"
msgstr ""

#: ../../library/stdtypes.rst:1645
msgid ":meth:`str.encode`"
msgstr ""

#: ../../library/stdtypes.rst:1647
msgid ":meth:`bytes.decode`"
msgstr ""

#: ../../library/stdtypes.rst:1653
msgid "Text Sequence Type --- :class:`str`"
msgstr ""

#: ../../library/stdtypes.rst:1655
msgid ""
"Textual data in Python is handled with :class:`str` objects, or :dfn:"
"`strings`. Strings are immutable :ref:`sequences <typesseq>` of Unicode code "
"points.  String literals are written in a variety of ways:"
msgstr ""

#: ../../library/stdtypes.rst:1660
msgid "Single quotes: ``'allows embedded \"double\" quotes'``"
msgstr ""

#: ../../library/stdtypes.rst:1661
msgid "Double quotes: ``\"allows embedded 'single' quotes\"``"
msgstr ""

#: ../../library/stdtypes.rst:1662
msgid ""
"Triple quoted: ``'''Three single quotes'''``, ``\"\"\"Three double "
"quotes\"\"\"``"
msgstr ""

#: ../../library/stdtypes.rst:1664
msgid ""
"Triple quoted strings may span multiple lines - all associated whitespace "
"will be included in the string literal."
msgstr ""

#: ../../library/stdtypes.rst:1667
msgid ""
"String literals that are part of a single expression and have only "
"whitespace between them will be implicitly converted to a single string "
"literal. That is, ``(\"spam \" \"eggs\") == \"spam eggs\"``."
msgstr ""

#: ../../library/stdtypes.rst:1671
msgid ""
"See :ref:`strings` for more about the various forms of string literal, "
"including supported :ref:`escape sequences <escape-sequences>`, and the "
"``r`` (\"raw\") prefix that disables most escape sequence processing."
msgstr ""

#: ../../library/stdtypes.rst:1675
msgid ""
"Strings may also be created from other objects using the :class:`str` "
"constructor."
msgstr ""

#: ../../library/stdtypes.rst:1678
msgid ""
"Since there is no separate \"character\" type, indexing a string produces "
"strings of length 1. That is, for a non-empty string *s*, ``s[0] == s[0:1]``."
msgstr ""

#: ../../library/stdtypes.rst:1684
msgid ""
"There is also no mutable string type, but :meth:`str.join` or :class:`io."
"StringIO` can be used to efficiently construct strings from multiple "
"fragments."
msgstr ""

#: ../../library/stdtypes.rst:1688
msgid ""
"For backwards compatibility with the Python 2 series, the ``u`` prefix is "
"once again permitted on string literals. It has no effect on the meaning of "
"string literals and cannot be combined with the ``r`` prefix."
msgstr ""

#: ../../library/stdtypes.rst:1700
msgid ""
"Return a :ref:`string <textseq>` version of *object*.  If *object* is not "
"provided, returns the empty string.  Otherwise, the behavior of ``str()`` "
"depends on whether *encoding* or *errors* is given, as follows."
msgstr ""

#: ../../library/stdtypes.rst:1704
msgid ""
"If neither *encoding* nor *errors* is given, ``str(object)`` returns :meth:"
"`type(object).__str__(object) <object.__str__>`, which is the \"informal\" "
"or nicely printable string representation of *object*.  For string objects, "
"this is the string itself.  If *object* does not have a :meth:`~object."
"__str__` method, then :func:`str` falls back to returning :func:"
"`repr(object) <repr>`."
msgstr ""

#: ../../library/stdtypes.rst:1716
msgid ""
"If at least one of *encoding* or *errors* is given, *object* should be a :"
"term:`bytes-like object` (e.g. :class:`bytes` or :class:`bytearray`).  In "
"this case, if *object* is a :class:`bytes` (or :class:`bytearray`) object, "
"then ``str(bytes, encoding, errors)`` is equivalent to :meth:`bytes."
"decode(encoding, errors) <bytes.decode>`.  Otherwise, the bytes object "
"underlying the buffer object is obtained before calling :meth:`bytes."
"decode`.  See :ref:`binaryseq` and :ref:`bufferobjects` for information on "
"buffer objects."
msgstr ""

#: ../../library/stdtypes.rst:1725
msgid ""
"Passing a :class:`bytes` object to :func:`str` without the *encoding* or "
"*errors* arguments falls under the first case of returning the informal "
"string representation (see also the :option:`-b` command-line option to "
"Python).  For example::"
msgstr ""

#: ../../library/stdtypes.rst:1730
msgid ""
">>> str(b'Zoot!')\n"
"\"b'Zoot!'\""
msgstr ""

#: ../../library/stdtypes.rst:1733
msgid ""
"For more information on the ``str`` class and its methods, see :ref:"
"`textseq` and the :ref:`string-methods` section below.  To output formatted "
"strings, see the :ref:`f-strings` and :ref:`formatstrings` sections.  In "
"addition, see the :ref:`stringservices` section."
msgstr ""

#: ../../library/stdtypes.rst:1745
msgid "String Methods"
msgstr ""

#: ../../library/stdtypes.rst:1750
msgid ""
"Strings implement all of the :ref:`common <typesseq-common>` sequence "
"operations, along with the additional methods described below."
msgstr ""

#: ../../library/stdtypes.rst:1753
msgid ""
"Strings also support two styles of string formatting, one providing a large "
"degree of flexibility and customization (see :meth:`str.format`, :ref:"
"`formatstrings` and :ref:`string-formatting`) and the other based on C "
"``printf`` style formatting that handles a narrower range of types and is "
"slightly harder to use correctly, but is often faster for the cases it can "
"handle (:ref:`old-string-formatting`)."
msgstr ""

#: ../../library/stdtypes.rst:1760
msgid ""
"The :ref:`textservices` section of the standard library covers a number of "
"other modules that provide various text related utilities (including regular "
"expression support in the :mod:`re` module)."
msgstr ""

#: ../../library/stdtypes.rst:1766
msgid ""
"Return a copy of the string with its first character capitalized and the "
"rest lowercased."
msgstr ""

#: ../../library/stdtypes.rst:1769
msgid ""
"The first character is now put into titlecase rather than uppercase. This "
"means that characters like digraphs will only have their first letter "
"capitalized, instead of the full character."
msgstr ""

#: ../../library/stdtypes.rst:1776
msgid ""
"Return a casefolded copy of the string. Casefolded strings may be used for "
"caseless matching."
msgstr ""

#: ../../library/stdtypes.rst:1779
msgid ""
"Casefolding is similar to lowercasing but more aggressive because it is "
"intended to remove all case distinctions in a string. For example, the "
"German lowercase letter ``'ß'`` is equivalent to ``\"ss\"``. Since it is "
"already lowercase, :meth:`lower` would do nothing to ``'ß'``; :meth:"
"`casefold` converts it to ``\"ss\"``."
msgstr ""

#: ../../library/stdtypes.rst:1785
msgid ""
"The casefolding algorithm is `described in section 3.13 'Default Case "
"Folding' of the Unicode Standard <https://www.unicode.org/versions/"
"Unicode16.0.0/core-spec/chapter-3/#G33992>`__."
msgstr ""

#: ../../library/stdtypes.rst:1794
msgid ""
"Return centered in a string of length *width*. Padding is done using the "
"specified *fillchar* (default is an ASCII space). The original string is "
"returned if *width* is less than or equal to ``len(s)``.  For example::"
msgstr ""

#: ../../library/stdtypes.rst:1798
msgid ""
">>> 'Python'.center(10)\n"
"'  Python  '\n"
">>> 'Python'.center(10, '-')\n"
"'--Python--'\n"
">>> 'Python'.center(4)\n"
"'Python'"
msgstr ""

#: ../../library/stdtypes.rst:1808
msgid ""
"Return the number of non-overlapping occurrences of substring *sub* in the "
"range [*start*, *end*].  Optional arguments *start* and *end* are "
"interpreted as in slice notation."
msgstr ""

#: ../../library/stdtypes.rst:1812
msgid ""
"If *sub* is empty, returns the number of empty strings between characters "
"which is the length of the string plus one. For example::"
msgstr ""

#: ../../library/stdtypes.rst:1815
msgid ""
">>> 'spam, spam, spam'.count('spam')\n"
"3\n"
">>> 'spam, spam, spam'.count('spam', 5)\n"
"2\n"
">>> 'spam, spam, spam'.count('spam', 5, 10)\n"
"1\n"
">>> 'spam, spam, spam'.count('eggs')\n"
"0\n"
">>> 'spam, spam, spam'.count('')\n"
"17"
msgstr ""

#: ../../library/stdtypes.rst:1828
msgid "Return the string encoded to :class:`bytes`."
msgstr ""

#: ../../library/stdtypes.rst:1830 ../../library/stdtypes.rst:3202
msgid ""
"*encoding* defaults to ``'utf-8'``; see :ref:`standard-encodings` for "
"possible values."
msgstr ""

#: ../../library/stdtypes.rst:1833
msgid ""
"*errors* controls how encoding errors are handled. If ``'strict'`` (the "
"default), a :exc:`UnicodeError` exception is raised. Other possible values "
"are ``'ignore'``, ``'replace'``, ``'xmlcharrefreplace'``, "
"``'backslashreplace'`` and any other name registered via :func:`codecs."
"register_error`. See :ref:`error-handlers` for details."
msgstr ""

#: ../../library/stdtypes.rst:1840
msgid ""
"For performance reasons, the value of *errors* is not checked for validity "
"unless an encoding error actually occurs, :ref:`devmode` is enabled or a :"
"ref:`debug build <debug-build>` is used. For example::"
msgstr ""

#: ../../library/stdtypes.rst:1846
msgid ""
">>> encoded_str_to_bytes = 'Python'.encode()\n"
">>> type(encoded_str_to_bytes)\n"
"<class 'bytes'>\n"
">>> encoded_str_to_bytes\n"
"b'Python'"
msgstr ""

#: ../../library/stdtypes.rst:1853 ../../library/stdtypes.rst:3221
msgid "Added support for keyword arguments."
msgstr ""

#: ../../library/stdtypes.rst:1856 ../../library/stdtypes.rst:3224
msgid ""
"The value of the *errors* argument is now checked in :ref:`devmode` and in :"
"ref:`debug mode <debug-build>`."
msgstr ""

#: ../../library/stdtypes.rst:1863
msgid ""
"Return ``True`` if the string ends with the specified *suffix*, otherwise "
"return ``False``.  *suffix* can also be a tuple of suffixes to look for.  "
"With optional *start*, test beginning at that position.  With optional "
"*end*, stop comparing at that position. Using *start* and *end* is "
"equivalent to ``str[start:end].endswith(suffix)``. For example::"
msgstr ""

#: ../../library/stdtypes.rst:1869
msgid ""
">>> 'Python'.endswith('on')\n"
"True\n"
">>> 'a tuple of suffixes'.endswith(('at', 'in'))\n"
"False\n"
">>> 'a tuple of suffixes'.endswith(('at', 'es'))\n"
"True\n"
">>> 'Python is amazing'.endswith('is', 0, 9)\n"
"True"
msgstr ""

#: ../../library/stdtypes.rst:1878
msgid "See also :meth:`startswith` and :meth:`removesuffix`."
msgstr ""

#: ../../library/stdtypes.rst:1883
msgid ""
"Return a copy of the string where all tab characters are replaced by one or "
"more spaces, depending on the current column and the given tab size.  Tab "
"positions occur every *tabsize* characters (default is 8, giving tab "
"positions at columns 0, 8, 16 and so on).  To expand the string, the current "
"column is set to zero and the string is examined character by character.  If "
"the character is a tab (``\\t``), one or more space characters are inserted "
"in the result until the current column is equal to the next tab position. "
"(The tab character itself is not copied.)  If the character is a newline "
"(``\\n``) or return (``\\r``), it is copied and the current column is reset "
"to zero.  Any other character is copied unchanged and the current column is "
"incremented by one regardless of how the character is represented when "
"printed. For example::"
msgstr ""

#: ../../library/stdtypes.rst:1896
msgid ""
">>> '01\\t012\\t0123\\t01234'.expandtabs()\n"
"'01      012     0123    01234'\n"
">>> '01\\t012\\t0123\\t01234'.expandtabs(4)\n"
"'01  012 0123    01234'\n"
">>> print('01\\t012\\n0123\\t01234'.expandtabs(4))\n"
"01  012\n"
"0123    01234"
msgstr ""

#: ../../library/stdtypes.rst:1907
msgid ""
"Return the lowest index in the string where substring *sub* is found within "
"the slice ``s[start:end]``.  Optional arguments *start* and *end* are "
"interpreted as in slice notation.  Return ``-1`` if *sub* is not found."
msgstr ""

#: ../../library/stdtypes.rst:1913
msgid ""
"The :meth:`~str.find` method should be used only if you need to know the "
"position of *sub*.  To check if *sub* is a substring or not, use the :"
"keyword:`in` operator::"
msgstr ""

#: ../../library/stdtypes.rst:1917
msgid ""
">>> 'Py' in 'Python'\n"
"True"
msgstr ""

#: ../../library/stdtypes.rst:1923
msgid ""
"Perform a string formatting operation.  The string on which this method is "
"called can contain literal text or replacement fields delimited by braces "
"``{}``.  Each replacement field contains either the numeric index of a "
"positional argument, or the name of a keyword argument.  Returns a copy of "
"the string where each replacement field is replaced with the string value of "
"the corresponding argument."
msgstr ""

#: ../../library/stdtypes.rst:1933
msgid ""
"See :ref:`formatstrings` for a description of the various formatting options "
"that can be specified in format strings."
msgstr ""

#: ../../library/stdtypes.rst:1937
msgid ""
"When formatting a number (:class:`int`, :class:`float`, :class:`complex`, :"
"class:`decimal.Decimal` and subclasses) with the ``n`` type (ex: ``'{:n}'."
"format(1234)``), the function temporarily sets the ``LC_CTYPE`` locale to "
"the ``LC_NUMERIC`` locale to decode ``decimal_point`` and ``thousands_sep`` "
"fields of :c:func:`localeconv` if they are non-ASCII or longer than 1 byte, "
"and the ``LC_NUMERIC`` locale is different than the ``LC_CTYPE`` locale.  "
"This temporary change affects other threads."
msgstr ""

#: ../../library/stdtypes.rst:1946
msgid ""
"When formatting a number with the ``n`` type, the function sets temporarily "
"the ``LC_CTYPE`` locale to the ``LC_NUMERIC`` locale in some cases."
msgstr ""

#: ../../library/stdtypes.rst:1954
msgid ""
"Similar to ``str.format(**mapping)``, except that ``mapping`` is used "
"directly and not copied to a :class:`dict`.  This is useful if for example "
"``mapping`` is a dict subclass:"
msgstr ""

#: ../../library/stdtypes.rst:1970
msgid ""
"Like :meth:`~str.find`, but raise :exc:`ValueError` when the substring is "
"not found."
msgstr ""

#: ../../library/stdtypes.rst:1976
msgid ""
"Return ``True`` if all characters in the string are alphanumeric and there "
"is at least one character, ``False`` otherwise.  A character ``c`` is "
"alphanumeric if one of the following returns ``True``: ``c.isalpha()``, ``c."
"isdecimal()``, ``c.isdigit()``, or ``c.isnumeric()``."
msgstr ""

#: ../../library/stdtypes.rst:1984
msgid ""
"Return ``True`` if all characters in the string are alphabetic and there is "
"at least one character, ``False`` otherwise.  Alphabetic characters are "
"those characters defined in the Unicode character database as \"Letter\", i."
"e., those with general category property being one of \"Lm\", \"Lt\", "
"\"Lu\", \"Ll\", or \"Lo\".  Note that this is different from the `Alphabetic "
"property defined in the section 4.10 'Letters, Alphabetic, and Ideographic' "
"of the Unicode Standard <https://www.unicode.org/versions/Unicode16.0.0/core-"
"spec/chapter-4/#G91002>`_."
msgstr ""

#: ../../library/stdtypes.rst:1995
msgid ""
"Return ``True`` if the string is empty or all characters in the string are "
"ASCII, ``False`` otherwise. ASCII characters have code points in the range "
"U+0000-U+007F."
msgstr ""

#: ../../library/stdtypes.rst:2004
msgid ""
"Return ``True`` if all characters in the string are decimal characters and "
"there is at least one character, ``False`` otherwise. Decimal characters are "
"those that can be used to form numbers in base 10, e.g. U+0660, ARABIC-INDIC "
"DIGIT ZERO.  Formally a decimal character is a character in the Unicode "
"General Category \"Nd\"."
msgstr ""

#: ../../library/stdtypes.rst:2014
msgid ""
"Return ``True`` if all characters in the string are digits and there is at "
"least one character, ``False`` otherwise.  Digits include decimal characters "
"and digits that need special handling, such as the compatibility superscript "
"digits. This covers digits which cannot be used to form numbers in base 10, "
"like the Kharosthi numbers.  Formally, a digit is a character that has the "
"property value Numeric_Type=Digit or Numeric_Type=Decimal."
msgstr ""

#: ../../library/stdtypes.rst:2024
msgid ""
"Return ``True`` if the string is a valid identifier according to the "
"language definition, section :ref:`identifiers`."
msgstr ""

#: ../../library/stdtypes.rst:2027
msgid ""
":func:`keyword.iskeyword` can be used to test whether string ``s`` is a "
"reserved identifier, such as :keyword:`def` and :keyword:`class`."
msgstr ""

#: ../../library/stdtypes.rst:2030
msgid "Example: ::"
msgstr ""

#: ../../library/stdtypes.rst:2033
msgid ""
">>> from keyword import iskeyword\n"
"\n"
">>> 'hello'.isidentifier(), iskeyword('hello')\n"
"(True, False)\n"
">>> 'def'.isidentifier(), iskeyword('def')\n"
"(True, True)"
msgstr ""

#: ../../library/stdtypes.rst:2043
msgid ""
"Return ``True`` if all cased characters [4]_ in the string are lowercase and "
"there is at least one cased character, ``False`` otherwise."
msgstr ""

#: ../../library/stdtypes.rst:2049
msgid ""
"Return ``True`` if all characters in the string are numeric characters, and "
"there is at least one character, ``False`` otherwise. Numeric characters "
"include digit characters, and all characters that have the Unicode numeric "
"value property, e.g. U+2155, VULGAR FRACTION ONE FIFTH.  Formally, numeric "
"characters are those with the property value Numeric_Type=Digit, "
"Numeric_Type=Decimal or Numeric_Type=Numeric."
msgstr ""

#: ../../library/stdtypes.rst:2059
msgid ""
"Return ``True`` if all characters in the string are printable, ``False`` if "
"it contains at least one non-printable character."
msgstr ""

#: ../../library/stdtypes.rst:2062
msgid ""
"Here \"printable\" means the character is suitable for :func:`repr` to use "
"in its output; \"non-printable\" means that :func:`repr` on built-in types "
"will hex-escape the character.  It has no bearing on the handling of strings "
"written to :data:`sys.stdout` or :data:`sys.stderr`."
msgstr ""

#: ../../library/stdtypes.rst:2067
msgid ""
"The printable characters are those which in the Unicode character database "
"(see :mod:`unicodedata`) have a general category in group Letter, Mark, "
"Number, Punctuation, or Symbol (L, M, N, P, or S); plus the ASCII space "
"0x20. Nonprintable characters are those in group Separator or Other (Z or "
"C), except the ASCII space."
msgstr ""

#: ../../library/stdtypes.rst:2076
msgid ""
"Return ``True`` if there are only whitespace characters in the string and "
"there is at least one character, ``False`` otherwise."
msgstr ""

#: ../../library/stdtypes.rst:2079
msgid ""
"A character is *whitespace* if in the Unicode character database (see :mod:"
"`unicodedata`), either its general category is ``Zs`` (\"Separator, "
"space\"), or its bidirectional class is one of ``WS``, ``B``, or ``S``."
msgstr ""

#: ../../library/stdtypes.rst:2087
msgid ""
"Return ``True`` if the string is a titlecased string and there is at least "
"one character, for example uppercase characters may only follow uncased "
"characters and lowercase characters only cased ones.  Return ``False`` "
"otherwise."
msgstr ""

#: ../../library/stdtypes.rst:2094
msgid ""
"Return ``True`` if all cased characters [4]_ in the string are uppercase and "
"there is at least one cased character, ``False`` otherwise."
msgstr ""

#: ../../library/stdtypes.rst:2112
msgid ""
"Return a string which is the concatenation of the strings in *iterable*. A :"
"exc:`TypeError` will be raised if there are any non-string values in "
"*iterable*, including :class:`bytes` objects.  The separator between "
"elements is the string providing this method."
msgstr ""

#: ../../library/stdtypes.rst:2120
msgid ""
"Return the string left justified in a string of length *width*. Padding is "
"done using the specified *fillchar* (default is an ASCII space). The "
"original string is returned if *width* is less than or equal to ``len(s)``."
msgstr ""

#: ../../library/stdtypes.rst:2127
msgid ""
"Return a copy of the string with all the cased characters [4]_ converted to "
"lowercase."
msgstr ""

#: ../../library/stdtypes.rst:2130
msgid ""
"The lowercasing algorithm used is `described in section 3.13 'Default Case "
"Folding' of the Unicode Standard <https://www.unicode.org/versions/"
"Unicode16.0.0/core-spec/chapter-3/#G33992>`__."
msgstr ""

#: ../../library/stdtypes.rst:2137
msgid ""
"Return a copy of the string with leading characters removed.  The *chars* "
"argument is a string specifying the set of characters to be removed.  If "
"omitted or ``None``, the *chars* argument defaults to removing whitespace.  "
"The *chars* argument is not a prefix; rather, all combinations of its values "
"are stripped::"
msgstr ""

#: ../../library/stdtypes.rst:2142
msgid ""
">>> '   spacious   '.lstrip()\n"
"'spacious   '\n"
">>> 'www.example.com'.lstrip('cmowz.')\n"
"'example.com'"
msgstr ""

#: ../../library/stdtypes.rst:2147
msgid ""
"See :meth:`str.removeprefix` for a method that will remove a single prefix "
"string rather than all of a set of characters.  For example::"
msgstr ""

#: ../../library/stdtypes.rst:2150
msgid ""
">>> 'Arthur: three!'.lstrip('Arthur: ')\n"
"'ee!'\n"
">>> 'Arthur: three!'.removeprefix('Arthur: ')\n"
"'three!'"
msgstr ""

#: ../../library/stdtypes.rst:2158
msgid ""
"This static method returns a translation table usable for :meth:`str."
"translate`."
msgstr ""

#: ../../library/stdtypes.rst:2160
msgid ""
"If there is only one argument, it must be a dictionary mapping Unicode "
"ordinals (integers) or characters (strings of length 1) to Unicode ordinals, "
"strings (of arbitrary lengths) or ``None``.  Character keys will then be "
"converted to ordinals."
msgstr ""

#: ../../library/stdtypes.rst:2165
msgid ""
"If there are two arguments, they must be strings of equal length, and in the "
"resulting dictionary, each character in x will be mapped to the character at "
"the same position in y.  If there is a third argument, it must be a string, "
"whose characters will be mapped to ``None`` in the result."
msgstr ""

#: ../../library/stdtypes.rst:2173
msgid ""
"Split the string at the first occurrence of *sep*, and return a 3-tuple "
"containing the part before the separator, the separator itself, and the part "
"after the separator.  If the separator is not found, return a 3-tuple "
"containing the string itself, followed by two empty strings."
msgstr ""

#: ../../library/stdtypes.rst:2181
msgid ""
"If the string starts with the *prefix* string, return "
"``string[len(prefix):]``. Otherwise, return a copy of the original string::"
msgstr ""

#: ../../library/stdtypes.rst:2185
msgid ""
">>> 'TestHook'.removeprefix('Test')\n"
"'Hook'\n"
">>> 'BaseTestCase'.removeprefix('Test')\n"
"'BaseTestCase'"
msgstr ""

#: ../../library/stdtypes.rst:2195
msgid ""
"If the string ends with the *suffix* string and that *suffix* is not empty, "
"return ``string[:-len(suffix)]``. Otherwise, return a copy of the original "
"string::"
msgstr ""

#: ../../library/stdtypes.rst:2199
msgid ""
">>> 'MiscTests'.removesuffix('Tests')\n"
"'Misc'\n"
">>> 'TmpDirMixin'.removesuffix('Tests')\n"
"'TmpDirMixin'"
msgstr ""

#: ../../library/stdtypes.rst:2209
msgid ""
"Return a copy of the string with all occurrences of substring *old* replaced "
"by *new*.  If *count* is given, only the first *count* occurrences are "
"replaced. If *count* is not specified or ``-1``, then all occurrences are "
"replaced."
msgstr ""

#: ../../library/stdtypes.rst:2213
msgid "*count* is now supported as a keyword argument."
msgstr ""

#: ../../library/stdtypes.rst:2219
msgid ""
"Return the highest index in the string where substring *sub* is found, such "
"that *sub* is contained within ``s[start:end]``.  Optional arguments *start* "
"and *end* are interpreted as in slice notation.  Return ``-1`` on failure."
msgstr ""

#: ../../library/stdtypes.rst:2226
msgid ""
"Like :meth:`rfind` but raises :exc:`ValueError` when the substring *sub* is "
"not found."
msgstr ""

#: ../../library/stdtypes.rst:2232
msgid ""
"Return the string right justified in a string of length *width*. Padding is "
"done using the specified *fillchar* (default is an ASCII space). The "
"original string is returned if *width* is less than or equal to ``len(s)``."
msgstr ""

#: ../../library/stdtypes.rst:2239
msgid ""
"Split the string at the last occurrence of *sep*, and return a 3-tuple "
"containing the part before the separator, the separator itself, and the part "
"after the separator.  If the separator is not found, return a 3-tuple "
"containing two empty strings, followed by the string itself."
msgstr ""

#: ../../library/stdtypes.rst:2247
msgid ""
"Return a list of the words in the string, using *sep* as the delimiter "
"string. If *maxsplit* is given, at most *maxsplit* splits are done, the "
"*rightmost* ones.  If *sep* is not specified or ``None``, any whitespace "
"string is a separator.  Except for splitting from the right, :meth:`rsplit` "
"behaves like :meth:`split` which is described in detail below."
msgstr ""

#: ../../library/stdtypes.rst:2256
msgid ""
"Return a copy of the string with trailing characters removed.  The *chars* "
"argument is a string specifying the set of characters to be removed.  If "
"omitted or ``None``, the *chars* argument defaults to removing whitespace.  "
"The *chars* argument is not a suffix; rather, all combinations of its values "
"are stripped::"
msgstr ""

#: ../../library/stdtypes.rst:2261
msgid ""
">>> '   spacious   '.rstrip()\n"
"'   spacious'\n"
">>> 'mississippi'.rstrip('ipz')\n"
"'mississ'"
msgstr ""

#: ../../library/stdtypes.rst:2266
msgid ""
"See :meth:`str.removesuffix` for a method that will remove a single suffix "
"string rather than all of a set of characters.  For example::"
msgstr ""

#: ../../library/stdtypes.rst:2269
msgid ""
">>> 'Monty Python'.rstrip(' Python')\n"
"'M'\n"
">>> 'Monty Python'.removesuffix(' Python')\n"
"'Monty'"
msgstr ""

#: ../../library/stdtypes.rst:2276
msgid ""
"Return a list of the words in the string, using *sep* as the delimiter "
"string.  If *maxsplit* is given, at most *maxsplit* splits are done (thus, "
"the list will have at most ``maxsplit+1`` elements).  If *maxsplit* is not "
"specified or ``-1``, then there is no limit on the number of splits (all "
"possible splits are made)."
msgstr ""

#: ../../library/stdtypes.rst:2282
msgid ""
"If *sep* is given, consecutive delimiters are not grouped together and are "
"deemed to delimit empty strings (for example, ``'1,,2'.split(',')`` returns "
"``['1', '', '2']``).  The *sep* argument may consist of multiple characters "
"as a single delimiter (to split with multiple delimiters, use :func:`re."
"split`). Splitting an empty string with a specified separator returns "
"``['']``."
msgstr ""

#: ../../library/stdtypes.rst:2289 ../../library/stdtypes.rst:2307
#: ../../library/stdtypes.rst:2319 ../../library/stdtypes.rst:2371
#: ../../library/stdtypes.rst:2439 ../../library/stdtypes.rst:2507
#: ../../library/stdtypes.rst:3539 ../../library/stdtypes.rst:3557
#: ../../library/stdtypes.rst:3648 ../../library/stdtypes.rst:3664
#: ../../library/stdtypes.rst:3689 ../../library/stdtypes.rst:3703
#: ../../library/stdtypes.rst:3731 ../../library/stdtypes.rst:3745
#: ../../library/stdtypes.rst:3763 ../../library/stdtypes.rst:3790
#: ../../library/stdtypes.rst:3813 ../../library/stdtypes.rst:3840
#: ../../library/stdtypes.rst:3882 ../../library/stdtypes.rst:3906
msgid "For example::"
msgstr "Por exemplo::"

#: ../../library/stdtypes.rst:2291
msgid ""
">>> '1,2,3'.split(',')\n"
"['1', '2', '3']\n"
">>> '1,2,3'.split(',', maxsplit=1)\n"
"['1', '2,3']\n"
">>> '1,2,,3,'.split(',')\n"
"['1', '2', '', '3', '']\n"
">>> '1<>2<>3<4'.split('<>')\n"
"['1', '2', '3<4']"
msgstr ""

#: ../../library/stdtypes.rst:2300
msgid ""
"If *sep* is not specified or is ``None``, a different splitting algorithm is "
"applied: runs of consecutive whitespace are regarded as a single separator, "
"and the result will contain no empty strings at the start or end if the "
"string has leading or trailing whitespace.  Consequently, splitting an empty "
"string or a string consisting of just whitespace with a ``None`` separator "
"returns ``[]``."
msgstr ""

#: ../../library/stdtypes.rst:2309
msgid ""
">>> '1 2 3'.split()\n"
"['1', '2', '3']\n"
">>> '1 2 3'.split(maxsplit=1)\n"
"['1', '2 3']\n"
">>> '   1   2   3   '.split()\n"
"['1', '2', '3']"
msgstr ""

#: ../../library/stdtypes.rst:2316
msgid ""
"If *sep* is not specified or is ``None`` and  *maxsplit* is ``0``, only "
"leading runs of consecutive whitespace are considered."
msgstr ""

#: ../../library/stdtypes.rst:2321
msgid ""
">>> \"\".split(None, 0)\n"
"[]\n"
">>> \"   \".split(None, 0)\n"
"[]\n"
">>> \"   foo   \".split(maxsplit=0)\n"
"['foo   ']"
msgstr ""

#: ../../library/stdtypes.rst:2334
msgid ""
"Return a list of the lines in the string, breaking at line boundaries.  Line "
"breaks are not included in the resulting list unless *keepends* is given and "
"true."
msgstr ""

#: ../../library/stdtypes.rst:2338
msgid ""
"This method splits on the following line boundaries.  In particular, the "
"boundaries are a superset of :term:`universal newlines`."
msgstr ""

#: ../../library/stdtypes.rst:2342
msgid "Representation"
msgstr ""

#: ../../library/stdtypes.rst:2342
msgid "Description"
msgstr ""

#: ../../library/stdtypes.rst:2344
msgid "``\\n``"
msgstr ""

#: ../../library/stdtypes.rst:2344
msgid "Line Feed"
msgstr ""

#: ../../library/stdtypes.rst:2346
msgid "``\\r``"
msgstr ""

#: ../../library/stdtypes.rst:2346
msgid "Carriage Return"
msgstr ""

#: ../../library/stdtypes.rst:2348
msgid "``\\r\\n``"
msgstr ""

#: ../../library/stdtypes.rst:2348
msgid "Carriage Return + Line Feed"
msgstr ""

#: ../../library/stdtypes.rst:2350
msgid "``\\v`` or ``\\x0b``"
msgstr ""

#: ../../library/stdtypes.rst:2350
msgid "Line Tabulation"
msgstr ""

#: ../../library/stdtypes.rst:2352
msgid "``\\f`` or ``\\x0c``"
msgstr ""

#: ../../library/stdtypes.rst:2352
msgid "Form Feed"
msgstr ""

#: ../../library/stdtypes.rst:2354
msgid "``\\x1c``"
msgstr ""

#: ../../library/stdtypes.rst:2354
msgid "File Separator"
msgstr ""

#: ../../library/stdtypes.rst:2356
msgid "``\\x1d``"
msgstr ""

#: ../../library/stdtypes.rst:2356
msgid "Group Separator"
msgstr ""

#: ../../library/stdtypes.rst:2358
msgid "``\\x1e``"
msgstr ""

#: ../../library/stdtypes.rst:2358
msgid "Record Separator"
msgstr ""

#: ../../library/stdtypes.rst:2360
msgid "``\\x85``"
msgstr ""

#: ../../library/stdtypes.rst:2360
msgid "Next Line (C1 Control Code)"
msgstr ""

#: ../../library/stdtypes.rst:2362
msgid "``\\u2028``"
msgstr ""

#: ../../library/stdtypes.rst:2362
msgid "Line Separator"
msgstr ""

#: ../../library/stdtypes.rst:2364
msgid "``\\u2029``"
msgstr ""

#: ../../library/stdtypes.rst:2364
msgid "Paragraph Separator"
msgstr ""

#: ../../library/stdtypes.rst:2369
msgid "``\\v`` and ``\\f`` added to list of line boundaries."
msgstr ""

#: ../../library/stdtypes.rst:2373
msgid ""
">>> 'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines()\n"
"['ab c', '', 'de fg', 'kl']\n"
">>> 'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines(keepends=True)\n"
"['ab c\\n', '\\n', 'de fg\\r', 'kl\\r\\n']"
msgstr ""

#: ../../library/stdtypes.rst:2378
msgid ""
"Unlike :meth:`~str.split` when a delimiter string *sep* is given, this "
"method returns an empty list for the empty string, and a terminal line break "
"does not result in an extra line::"
msgstr ""

#: ../../library/stdtypes.rst:2382
msgid ""
">>> \"\".splitlines()\n"
"[]\n"
">>> \"One line\\n\".splitlines()\n"
"['One line']"
msgstr ""

#: ../../library/stdtypes.rst:2387
msgid "For comparison, ``split('\\n')`` gives::"
msgstr ""

#: ../../library/stdtypes.rst:2389
msgid ""
">>> ''.split('\\n')\n"
"['']\n"
">>> 'Two lines\\n'.split('\\n')\n"
"['Two lines', '']"
msgstr ""

#: ../../library/stdtypes.rst:2397
msgid ""
"Return ``True`` if string starts with the *prefix*, otherwise return "
"``False``. *prefix* can also be a tuple of prefixes to look for.  With "
"optional *start*, test string beginning at that position.  With optional "
"*end*, stop comparing string at that position."
msgstr ""

#: ../../library/stdtypes.rst:2405
msgid ""
"Return a copy of the string with the leading and trailing characters "
"removed. The *chars* argument is a string specifying the set of characters "
"to be removed. If omitted or ``None``, the *chars* argument defaults to "
"removing whitespace. The *chars* argument is not a prefix or suffix; rather, "
"all combinations of its values are stripped::"
msgstr ""

#: ../../library/stdtypes.rst:2411
msgid ""
">>> '   spacious   '.strip()\n"
"'spacious'\n"
">>> 'www.example.com'.strip('cmowz.')\n"
"'example'"
msgstr ""

#: ../../library/stdtypes.rst:2416
msgid ""
"The outermost leading and trailing *chars* argument values are stripped from "
"the string. Characters are removed from the leading end until reaching a "
"string character that is not contained in the set of characters in *chars*. "
"A similar action takes place on the trailing end. For example::"
msgstr ""

#: ../../library/stdtypes.rst:2422
msgid ""
">>> comment_string = '#....... Section 3.2.1 Issue #32 .......'\n"
">>> comment_string.strip('.#! ')\n"
"'Section 3.2.1 Issue #32'"
msgstr ""

#: ../../library/stdtypes.rst:2429
msgid ""
"Return a copy of the string with uppercase characters converted to lowercase "
"and vice versa. Note that it is not necessarily true that ``s.swapcase()."
"swapcase() == s``."
msgstr ""

#: ../../library/stdtypes.rst:2436
msgid ""
"Return a titlecased version of the string where words start with an "
"uppercase character and the remaining characters are lowercase."
msgstr ""

#: ../../library/stdtypes.rst:2441
msgid ""
">>> 'Hello world'.title()\n"
"'Hello World'"
msgstr ""

#: ../../library/stdtypes.rst:2444 ../../library/stdtypes.rst:3850
msgid ""
"The algorithm uses a simple language-independent definition of a word as "
"groups of consecutive letters.  The definition works in many contexts but it "
"means that apostrophes in contractions and possessives form word boundaries, "
"which may not be the desired result::"
msgstr ""

#: ../../library/stdtypes.rst:2449
msgid ""
">>> \"they're bill's friends from the UK\".title()\n"
"\"They'Re Bill'S Friends From The Uk\""
msgstr ""

#: ../../library/stdtypes.rst:2452
msgid ""
"The :func:`string.capwords` function does not have this problem, as it "
"splits words on spaces only."
msgstr ""

#: ../../library/stdtypes.rst:2455
msgid ""
"Alternatively, a workaround for apostrophes can be constructed using regular "
"expressions::"
msgstr ""

#: ../../library/stdtypes.rst:2458
msgid ""
">>> import re\n"
">>> def titlecase(s):\n"
"...     return re.sub(r\"[A-Za-z]+('[A-Za-z]+)?\",\n"
"...                   lambda mo: mo.group(0).capitalize(),\n"
"...                   s)\n"
"...\n"
">>> titlecase(\"they're bill's friends.\")\n"
"\"They're Bill's Friends.\""
msgstr ""

#: ../../library/stdtypes.rst:2470
msgid ""
"Return a copy of the string in which each character has been mapped through "
"the given translation table.  The table must be an object that implements "
"indexing via :meth:`~object.__getitem__`, typically a :term:`mapping` or :"
"term:`sequence`.  When indexed by a Unicode ordinal (an integer), the table "
"object can do any of the following: return a Unicode ordinal or a string, to "
"map the character to one or more other characters; return ``None``, to "
"delete the character from the return string; or raise a :exc:`LookupError` "
"exception, to map the character to itself."
msgstr ""

#: ../../library/stdtypes.rst:2479
msgid ""
"You can use :meth:`str.maketrans` to create a translation map from character-"
"to-character mappings in different formats."
msgstr ""

#: ../../library/stdtypes.rst:2482
msgid ""
"See also the :mod:`codecs` module for a more flexible approach to custom "
"character mappings."
msgstr ""

#: ../../library/stdtypes.rst:2488
msgid ""
"Return a copy of the string with all the cased characters [4]_ converted to "
"uppercase.  Note that ``s.upper().isupper()`` might be ``False`` if ``s`` "
"contains uncased characters or if the Unicode category of the resulting "
"character(s) is not \"Lu\" (Letter, uppercase), but e.g. \"Lt\" (Letter, "
"titlecase)."
msgstr ""

#: ../../library/stdtypes.rst:2494
msgid ""
"The uppercasing algorithm used is `described in section 3.13 'Default Case "
"Folding' of the Unicode Standard <https://www.unicode.org/versions/"
"Unicode16.0.0/core-spec/chapter-3/#G33992>`__."
msgstr ""

#: ../../library/stdtypes.rst:2501
msgid ""
"Return a copy of the string left filled with ASCII ``'0'`` digits to make a "
"string of length *width*. A leading sign prefix (``'+'``/``'-'``) is handled "
"by inserting the padding *after* the sign character rather than before. The "
"original string is returned if *width* is less than or equal to ``len(s)``."
msgstr ""

#: ../../library/stdtypes.rst:2509
msgid ""
">>> \"42\".zfill(5)\n"
"'00042'\n"
">>> \"-42\".zfill(5)\n"
"'-0042'"
msgstr ""

#: ../../library/stdtypes.rst:2530
msgid "Formatted String Literals (f-strings)"
msgstr ""

#: ../../library/stdtypes.rst:2533
msgid ""
"The :keyword:`await` and :keyword:`async for` can be used in expressions "
"within f-strings."
msgstr ""

#: ../../library/stdtypes.rst:2536
msgid "Added the debugging operator (``=``)"
msgstr ""

#: ../../library/stdtypes.rst:2538
msgid ""
"Many restrictions on expressions within f-strings have been removed. "
"Notably, nested strings, comments, and backslashes are now permitted."
msgstr ""

#: ../../library/stdtypes.rst:2542
msgid ""
"An :dfn:`f-string` (formally a :dfn:`formatted string literal`) is a string "
"literal that is prefixed with ``f`` or ``F``. This type of string literal "
"allows embedding arbitrary Python expressions within *replacement fields*, "
"which are delimited by curly brackets (``{}``). These expressions are "
"evaluated at runtime, similarly to :meth:`str.format`, and are converted "
"into regular :class:`str` objects. For example:"
msgstr ""

#: ../../library/stdtypes.rst:2550
msgid ""
">>> who = 'nobody'\n"
">>> nationality = 'Spanish'\n"
">>> f'{who.title()} expects the {nationality} Inquisition!'\n"
"'Nobody expects the Spanish Inquisition!'"
msgstr ""

#: ../../library/stdtypes.rst:2557
msgid "It is also possible to use a multi line f-string:"
msgstr ""

#: ../../library/stdtypes.rst:2559
msgid ""
">>> f'''This is a string\n"
"... on two lines'''\n"
"'This is a string\\non two lines'"
msgstr ""

#: ../../library/stdtypes.rst:2565
msgid ""
"A single opening curly bracket, ``'{'``, marks a *replacement field* that "
"can contain any Python expression:"
msgstr ""

#: ../../library/stdtypes.rst:2568
msgid ""
">>> nationality = 'Spanish'\n"
">>> f'The {nationality} Inquisition!'\n"
"'The Spanish Inquisition!'"
msgstr ""

#: ../../library/stdtypes.rst:2574
msgid "To include a literal ``{`` or ``}``, use a double bracket:"
msgstr ""

#: ../../library/stdtypes.rst:2576
msgid ""
">>> x = 42\n"
">>> f'{{x}} is {x}'\n"
"'{x} is 42'"
msgstr ""

#: ../../library/stdtypes.rst:2582
msgid ""
"Functions can also be used, and :ref:`format specifiers <formatstrings>`:"
msgstr ""

#: ../../library/stdtypes.rst:2584
msgid ""
">>> from math import sqrt\n"
">>> f'√2 \\N{ALMOST EQUAL TO} {sqrt(2):.5f}'\n"
"'√2 ≈ 1.41421'"
msgstr ""

#: ../../library/stdtypes.rst:2590
msgid "Any non-string expression is converted using :func:`str`, by default:"
msgstr ""

#: ../../library/stdtypes.rst:2592
msgid ""
">>> from fractions import Fraction\n"
">>> f'{Fraction(1, 3)}'\n"
"'1/3'"
msgstr ""

#: ../../library/stdtypes.rst:2598
msgid ""
"To use an explicit conversion, use the ``!`` (exclamation mark) operator, "
"followed by any of the valid formats, which are:"
msgstr ""

#: ../../library/stdtypes.rst:2602 ../../library/stdtypes.rst:2770
#: ../../library/stdtypes.rst:4029
msgid "Conversion"
msgstr ""

#: ../../library/stdtypes.rst:2604
msgid "``!a``"
msgstr ""

#: ../../library/stdtypes.rst:2604
msgid ":func:`ascii`"
msgstr ""

#: ../../library/stdtypes.rst:2605
msgid "``!r``"
msgstr ""

#: ../../library/stdtypes.rst:2605
msgid ":func:`repr`"
msgstr ""

#: ../../library/stdtypes.rst:2606
msgid "``!s``"
msgstr ""

#: ../../library/stdtypes.rst:2606
msgid ":func:`str`"
msgstr ""

#: ../../library/stdtypes.rst:2609
msgid "For example:"
msgstr "Por exemplo:"

#: ../../library/stdtypes.rst:2611
msgid ""
">>> from fractions import Fraction\n"
">>> f'{Fraction(1, 3)!s}'\n"
"'1/3'\n"
">>> f'{Fraction(1, 3)!r}'\n"
"'Fraction(1, 3)'\n"
">>> question = '¿Dónde está el Presidente?'\n"
">>> print(f'{question!a}')\n"
"'\\xbfD\\xf3nde est\\xe1 el Presidente?'"
msgstr ""

#: ../../library/stdtypes.rst:2622
msgid ""
"While debugging it may be helpful to see both the expression and its value, "
"by using the equals sign (``=``) after the expression. This preserves spaces "
"within the brackets, and can be used with a converter. By default, the "
"debugging operator uses the :func:`repr` (``!r``) conversion. For example:"
msgstr ""

#: ../../library/stdtypes.rst:2628
msgid ""
">>> from fractions import Fraction\n"
">>> calculation = Fraction(1, 3)\n"
">>> f'{calculation=}'\n"
"'calculation=Fraction(1, 3)'\n"
">>> f'{calculation = }'\n"
"'calculation = Fraction(1, 3)'\n"
">>> f'{calculation = !s}'\n"
"'calculation = 1/3'"
msgstr ""

#: ../../library/stdtypes.rst:2639
msgid ""
"Once the output has been evaluated, it can be formatted using a :ref:`format "
"specifier <formatstrings>` following a colon (``':'``). After the expression "
"has been evaluated, and possibly converted to a string, the :meth:`!"
"__format__` method of the result is called with the format specifier, or the "
"empty string if no format specifier is given. The formatted result is then "
"used as the final value for the replacement field. For example:"
msgstr ""

#: ../../library/stdtypes.rst:2647
msgid ""
">>> from fractions import Fraction\n"
">>> f'{Fraction(1, 7):.6f}'\n"
"'0.142857'\n"
">>> f'{Fraction(1, 7):_^+10}'\n"
"'___+1/7___'"
msgstr ""

#: ../../library/stdtypes.rst:2659
msgid "``printf``-style String Formatting"
msgstr ""

#: ../../library/stdtypes.rst:2672
msgid ""
"The formatting operations described here exhibit a variety of quirks that "
"lead to a number of common errors (such as failing to display tuples and "
"dictionaries correctly).  Using the newer :ref:`formatted string literals <f-"
"strings>`, the :meth:`str.format` interface, or :ref:`template strings "
"<template-strings>` may help avoid these errors.  Each of these alternatives "
"provides their own trade-offs and benefits of simplicity, flexibility, and/"
"or extensibility."
msgstr ""

#: ../../library/stdtypes.rst:2680
msgid ""
"String objects have one unique built-in operation: the ``%`` operator "
"(modulo). This is also known as the string *formatting* or *interpolation* "
"operator. Given ``format % values`` (where *format* is a string), ``%`` "
"conversion specifications in *format* are replaced with zero or more "
"elements of *values*. The effect is similar to using the :c:func:`sprintf` "
"function in the C language. For example:"
msgstr ""

#: ../../library/stdtypes.rst:2687
msgid ""
">>> print('%s has %d quote types.' % ('Python', 2))\n"
"Python has 2 quote types."
msgstr ""

#: ../../library/stdtypes.rst:2692
msgid ""
"If *format* requires a single argument, *values* may be a single non-tuple "
"object. [5]_  Otherwise, *values* must be a tuple with exactly the number of "
"items specified by the format string, or a single mapping object (for "
"example, a dictionary)."
msgstr ""

#: ../../library/stdtypes.rst:2702 ../../library/stdtypes.rst:3961
msgid ""
"A conversion specifier contains two or more characters and has the following "
"components, which must occur in this order:"
msgstr ""

#: ../../library/stdtypes.rst:2705 ../../library/stdtypes.rst:3964
msgid "The ``'%'`` character, which marks the start of the specifier."
msgstr ""

#: ../../library/stdtypes.rst:2707 ../../library/stdtypes.rst:3966
msgid ""
"Mapping key (optional), consisting of a parenthesised sequence of characters "
"(for example, ``(somename)``)."
msgstr ""

#: ../../library/stdtypes.rst:2710 ../../library/stdtypes.rst:3969
msgid ""
"Conversion flags (optional), which affect the result of some conversion "
"types."
msgstr ""

#: ../../library/stdtypes.rst:2713 ../../library/stdtypes.rst:3972
msgid ""
"Minimum field width (optional).  If specified as an ``'*'`` (asterisk), the "
"actual width is read from the next element of the tuple in *values*, and the "
"object to convert comes after the minimum field width and optional precision."
msgstr ""

#: ../../library/stdtypes.rst:2717 ../../library/stdtypes.rst:3976
msgid ""
"Precision (optional), given as a ``'.'`` (dot) followed by the precision.  "
"If specified as ``'*'`` (an asterisk), the actual precision is read from the "
"next element of the tuple in *values*, and the value to convert comes after "
"the precision."
msgstr ""

#: ../../library/stdtypes.rst:2722 ../../library/stdtypes.rst:3981
msgid "Length modifier (optional)."
msgstr ""

#: ../../library/stdtypes.rst:2724 ../../library/stdtypes.rst:3983
msgid "Conversion type."
msgstr ""

#: ../../library/stdtypes.rst:2726
msgid ""
"When the right argument is a dictionary (or other mapping type), then the "
"formats in the string *must* include a parenthesised mapping key into that "
"dictionary inserted immediately after the ``'%'`` character. The mapping key "
"selects the value to be formatted from the mapping.  For example:"
msgstr ""

#: ../../library/stdtypes.rst:2735 ../../library/stdtypes.rst:3994
msgid ""
"In this case no ``*`` specifiers may occur in a format (since they require a "
"sequential parameter list)."
msgstr ""

#: ../../library/stdtypes.rst:2738 ../../library/stdtypes.rst:3997
msgid "The conversion flag characters are:"
msgstr ""

#: ../../library/stdtypes.rst:2747 ../../library/stdtypes.rst:4006
msgid "Flag"
msgstr "Sinalizador"

#: ../../library/stdtypes.rst:2749 ../../library/stdtypes.rst:4008
msgid "``'#'``"
msgstr ""

#: ../../library/stdtypes.rst:2749 ../../library/stdtypes.rst:4008
msgid ""
"The value conversion will use the \"alternate form\" (where defined below)."
msgstr ""

#: ../../library/stdtypes.rst:2752 ../../library/stdtypes.rst:4011
msgid "``'0'``"
msgstr ""

#: ../../library/stdtypes.rst:2752 ../../library/stdtypes.rst:4011
msgid "The conversion will be zero padded for numeric values."
msgstr ""

#: ../../library/stdtypes.rst:2754 ../../library/stdtypes.rst:4013
msgid "``'-'``"
msgstr ""

#: ../../library/stdtypes.rst:2754 ../../library/stdtypes.rst:4013
msgid ""
"The converted value is left adjusted (overrides the ``'0'`` conversion if "
"both are given)."
msgstr ""

#: ../../library/stdtypes.rst:2757 ../../library/stdtypes.rst:4016
msgid "``' '``"
msgstr ""

#: ../../library/stdtypes.rst:2757 ../../library/stdtypes.rst:4016
msgid ""
"(a space) A blank should be left before a positive number (or empty string) "
"produced by a signed conversion."
msgstr ""

#: ../../library/stdtypes.rst:2760 ../../library/stdtypes.rst:4019
msgid "``'+'``"
msgstr ""

#: ../../library/stdtypes.rst:2760 ../../library/stdtypes.rst:4019
msgid ""
"A sign character (``'+'`` or ``'-'``) will precede the conversion (overrides "
"a \"space\" flag)."
msgstr ""

#: ../../library/stdtypes.rst:2764 ../../library/stdtypes.rst:4023
msgid ""
"A length modifier (``h``, ``l``, or ``L``) may be present, but is ignored as "
"it is not necessary for Python -- so e.g. ``%ld`` is identical to ``%d``."
msgstr ""

#: ../../library/stdtypes.rst:2767 ../../library/stdtypes.rst:4026
msgid "The conversion types are:"
msgstr ""

#: ../../library/stdtypes.rst:2772 ../../library/stdtypes.rst:4031
msgid "``'d'``"
msgstr ""

#: ../../library/stdtypes.rst:2772 ../../library/stdtypes.rst:2774
#: ../../library/stdtypes.rst:4031 ../../library/stdtypes.rst:4033
msgid "Signed integer decimal."
msgstr ""

#: ../../library/stdtypes.rst:2774 ../../library/stdtypes.rst:4033
msgid "``'i'``"
msgstr ""

#: ../../library/stdtypes.rst:2776 ../../library/stdtypes.rst:4035
msgid "``'o'``"
msgstr ""

#: ../../library/stdtypes.rst:2776 ../../library/stdtypes.rst:4035
msgid "Signed octal value."
msgstr ""

#: ../../library/stdtypes.rst:2778 ../../library/stdtypes.rst:4037
msgid "``'u'``"
msgstr ""

#: ../../library/stdtypes.rst:2778 ../../library/stdtypes.rst:4037
msgid "Obsolete type -- it is identical to ``'d'``."
msgstr ""

#: ../../library/stdtypes.rst:2780 ../../library/stdtypes.rst:4039
msgid "``'x'``"
msgstr ""

#: ../../library/stdtypes.rst:2780 ../../library/stdtypes.rst:4039
msgid "Signed hexadecimal (lowercase)."
msgstr ""

#: ../../library/stdtypes.rst:2782 ../../library/stdtypes.rst:4041
msgid "``'X'``"
msgstr ""

#: ../../library/stdtypes.rst:2782 ../../library/stdtypes.rst:4041
msgid "Signed hexadecimal (uppercase)."
msgstr ""

#: ../../library/stdtypes.rst:2784 ../../library/stdtypes.rst:4043
msgid "``'e'``"
msgstr ""

#: ../../library/stdtypes.rst:2784 ../../library/stdtypes.rst:4043
msgid "Floating-point exponential format (lowercase)."
msgstr ""

#: ../../library/stdtypes.rst:2786 ../../library/stdtypes.rst:4045
msgid "``'E'``"
msgstr ""

#: ../../library/stdtypes.rst:2786 ../../library/stdtypes.rst:4045
msgid "Floating-point exponential format (uppercase)."
msgstr ""

#: ../../library/stdtypes.rst:2788 ../../library/stdtypes.rst:4047
msgid "``'f'``"
msgstr ""

#: ../../library/stdtypes.rst:2788 ../../library/stdtypes.rst:2790
#: ../../library/stdtypes.rst:4047 ../../library/stdtypes.rst:4049
msgid "Floating-point decimal format."
msgstr ""

#: ../../library/stdtypes.rst:2790 ../../library/stdtypes.rst:4049
msgid "``'F'``"
msgstr ""

#: ../../library/stdtypes.rst:2792 ../../library/stdtypes.rst:4051
msgid "``'g'``"
msgstr ""

#: ../../library/stdtypes.rst:2792 ../../library/stdtypes.rst:4051
msgid ""
"Floating-point format. Uses lowercase exponential format if exponent is less "
"than -4 or not less than precision, decimal format otherwise."
msgstr ""

#: ../../library/stdtypes.rst:2796 ../../library/stdtypes.rst:4055
msgid "``'G'``"
msgstr ""

#: ../../library/stdtypes.rst:2796 ../../library/stdtypes.rst:4055
msgid ""
"Floating-point format. Uses uppercase exponential format if exponent is less "
"than -4 or not less than precision, decimal format otherwise."
msgstr ""

#: ../../library/stdtypes.rst:2800 ../../library/stdtypes.rst:4059
msgid "``'c'``"
msgstr ""

#: ../../library/stdtypes.rst:2800
msgid "Single character (accepts integer or single character string)."
msgstr ""

#: ../../library/stdtypes.rst:2803 ../../library/stdtypes.rst:4072
msgid "``'r'``"
msgstr ""

#: ../../library/stdtypes.rst:2803
msgid "String (converts any Python object using :func:`repr`)."
msgstr ""

#: ../../library/stdtypes.rst:2806 ../../library/stdtypes.rst:4066
msgid "``'s'``"
msgstr ""

#: ../../library/stdtypes.rst:2806
msgid "String (converts any Python object using :func:`str`)."
msgstr ""

#: ../../library/stdtypes.rst:2809 ../../library/stdtypes.rst:4069
msgid "``'a'``"
msgstr ""

#: ../../library/stdtypes.rst:2809
msgid "String (converts any Python object using :func:`ascii`)."
msgstr ""

#: ../../library/stdtypes.rst:2812 ../../library/stdtypes.rst:4075
msgid "``'%'``"
msgstr ""

#: ../../library/stdtypes.rst:2812 ../../library/stdtypes.rst:4075
msgid "No argument is converted, results in a ``'%'`` character in the result."
msgstr ""

#: ../../library/stdtypes.rst:2819 ../../library/stdtypes.rst:4082
msgid ""
"The alternate form causes a leading octal specifier (``'0o'``) to be "
"inserted before the first digit."
msgstr ""

#: ../../library/stdtypes.rst:2823 ../../library/stdtypes.rst:4086
msgid ""
"The alternate form causes a leading ``'0x'`` or ``'0X'`` (depending on "
"whether the ``'x'`` or ``'X'`` format was used) to be inserted before the "
"first digit."
msgstr ""

#: ../../library/stdtypes.rst:2827 ../../library/stdtypes.rst:4090
msgid ""
"The alternate form causes the result to always contain a decimal point, even "
"if no digits follow it."
msgstr ""

#: ../../library/stdtypes.rst:2830 ../../library/stdtypes.rst:4093
msgid ""
"The precision determines the number of digits after the decimal point and "
"defaults to 6."
msgstr ""

#: ../../library/stdtypes.rst:2834 ../../library/stdtypes.rst:4097
msgid ""
"The alternate form causes the result to always contain a decimal point, and "
"trailing zeroes are not removed as they would otherwise be."
msgstr ""

#: ../../library/stdtypes.rst:2837 ../../library/stdtypes.rst:4100
msgid ""
"The precision determines the number of significant digits before and after "
"the decimal point and defaults to 6."
msgstr ""

#: ../../library/stdtypes.rst:2841 ../../library/stdtypes.rst:4104
msgid "If precision is ``N``, the output is truncated to ``N`` characters."
msgstr ""

#: ../../library/stdtypes.rst:2844 ../../library/stdtypes.rst:4113
msgid "See :pep:`237`."
msgstr ""

#: ../../library/stdtypes.rst:2846
msgid ""
"Since Python strings have an explicit length, ``%s`` conversions do not "
"assume that ``'\\0'`` is the end of the string."
msgstr ""

#: ../../library/stdtypes.rst:2851
msgid ""
"``%f`` conversions for numbers whose absolute value is over 1e50 are no "
"longer replaced by ``%g`` conversions."
msgstr ""

#: ../../library/stdtypes.rst:2862
msgid ""
"Binary Sequence Types --- :class:`bytes`, :class:`bytearray`, :class:"
"`memoryview`"
msgstr ""

#: ../../library/stdtypes.rst:2870
msgid ""
"The core built-in types for manipulating binary data are :class:`bytes` and :"
"class:`bytearray`. They are supported by :class:`memoryview` which uses the :"
"ref:`buffer protocol <bufferobjects>` to access the memory of other binary "
"objects without needing to make a copy."
msgstr ""

#: ../../library/stdtypes.rst:2875
msgid ""
"The :mod:`array` module supports efficient storage of basic data types like "
"32-bit integers and IEEE754 double-precision floating values."
msgstr ""

#: ../../library/stdtypes.rst:2881
msgid "Bytes Objects"
msgstr "Objetos Bytes"

#: ../../library/stdtypes.rst:2885
msgid ""
"Bytes objects are immutable sequences of single bytes. Since many major "
"binary protocols are based on the ASCII text encoding, bytes objects offer "
"several methods that are only valid when working with ASCII compatible data "
"and are closely related to string objects in a variety of other ways."
msgstr ""

#: ../../library/stdtypes.rst:2892
msgid ""
"Firstly, the syntax for bytes literals is largely the same as that for "
"string literals, except that a ``b`` prefix is added:"
msgstr ""

#: ../../library/stdtypes.rst:2895
msgid "Single quotes: ``b'still allows embedded \"double\" quotes'``"
msgstr ""

#: ../../library/stdtypes.rst:2896
msgid "Double quotes: ``b\"still allows embedded 'single' quotes\"``"
msgstr ""

#: ../../library/stdtypes.rst:2897
msgid ""
"Triple quoted: ``b'''3 single quotes'''``, ``b\"\"\"3 double quotes\"\"\"``"
msgstr ""

#: ../../library/stdtypes.rst:2899
msgid ""
"Only ASCII characters are permitted in bytes literals (regardless of the "
"declared source code encoding). Any binary values over 127 must be entered "
"into bytes literals using the appropriate escape sequence."
msgstr ""

#: ../../library/stdtypes.rst:2903
msgid ""
"As with string literals, bytes literals may also use a ``r`` prefix to "
"disable processing of escape sequences. See :ref:`strings` for more about "
"the various forms of bytes literal, including supported escape sequences."
msgstr ""

#: ../../library/stdtypes.rst:2907
msgid ""
"While bytes literals and representations are based on ASCII text, bytes "
"objects actually behave like immutable sequences of integers, with each "
"value in the sequence restricted such that ``0 <= x < 256`` (attempts to "
"violate this restriction will trigger :exc:`ValueError`). This is done "
"deliberately to emphasise that while many binary formats include ASCII based "
"elements and can be usefully manipulated with some text-oriented algorithms, "
"this is not generally the case for arbitrary binary data (blindly applying "
"text processing algorithms to binary data formats that are not ASCII "
"compatible will usually lead to data corruption)."
msgstr ""

#: ../../library/stdtypes.rst:2917
msgid ""
"In addition to the literal forms, bytes objects can be created in a number "
"of other ways:"
msgstr ""

#: ../../library/stdtypes.rst:2920
msgid "A zero-filled bytes object of a specified length: ``bytes(10)``"
msgstr ""

#: ../../library/stdtypes.rst:2921
msgid "From an iterable of integers: ``bytes(range(20))``"
msgstr ""

#: ../../library/stdtypes.rst:2922
msgid "Copying existing binary data via the buffer protocol:  ``bytes(obj)``"
msgstr ""

#: ../../library/stdtypes.rst:2924
msgid "Also see the :ref:`bytes <func-bytes>` built-in."
msgstr ""

#: ../../library/stdtypes.rst:2926
msgid ""
"Since 2 hexadecimal digits correspond precisely to a single byte, "
"hexadecimal numbers are a commonly used format for describing binary data. "
"Accordingly, the bytes type has an additional class method to read data in "
"that format:"
msgstr ""

#: ../../library/stdtypes.rst:2932
msgid ""
"This :class:`bytes` class method returns a bytes object, decoding the given "
"string object.  The string must contain two hexadecimal digits per byte, "
"with ASCII whitespace being ignored."
msgstr ""

#: ../../library/stdtypes.rst:2939
msgid ""
":meth:`bytes.fromhex` now skips all ASCII whitespace in the string, not just "
"spaces."
msgstr ""

#: ../../library/stdtypes.rst:2943
msgid ""
":meth:`bytes.fromhex` now accepts ASCII :class:`bytes` and :term:`bytes-like "
"objects <bytes-like object>` as input."
msgstr ""

#: ../../library/stdtypes.rst:2947
msgid ""
"A reverse conversion function exists to transform a bytes object into its "
"hexadecimal representation."
msgstr ""

#: ../../library/stdtypes.rst:2952 ../../library/stdtypes.rst:3041
msgid ""
"Return a string object containing two hexadecimal digits for each byte in "
"the instance."
msgstr ""

#: ../../library/stdtypes.rst:2958
msgid ""
"If you want to make the hex string easier to read, you can specify a single "
"character separator *sep* parameter to include in the output. By default, "
"this separator will be included between each byte. A second optional "
"*bytes_per_sep* parameter controls the spacing. Positive values calculate "
"the separator position from the right, negative values from the left."
msgstr ""

#: ../../library/stdtypes.rst:2975
msgid ""
":meth:`bytes.hex` now supports optional *sep* and *bytes_per_sep* parameters "
"to insert separators between bytes in the hex output."
msgstr ""

#: ../../library/stdtypes.rst:2979
msgid ""
"Since bytes objects are sequences of integers (akin to a tuple), for a bytes "
"object *b*, ``b[0]`` will be an integer, while ``b[0:1]`` will be a bytes "
"object of length 1.  (This contrasts with text strings, where both indexing "
"and slicing will produce a string of length 1)"
msgstr ""

#: ../../library/stdtypes.rst:2984
msgid ""
"The representation of bytes objects uses the literal format (``b'...'``) "
"since it is often more useful than e.g. ``bytes([46, 46, 46])``.  You can "
"always convert a bytes object into a list of integers using ``list(b)``."
msgstr ""

#: ../../library/stdtypes.rst:2992
msgid "Bytearray Objects"
msgstr ""

#: ../../library/stdtypes.rst:2996
msgid ""
":class:`bytearray` objects are a mutable counterpart to :class:`bytes` "
"objects."
msgstr ""

#: ../../library/stdtypes.rst:3001
msgid ""
"There is no dedicated literal syntax for bytearray objects, instead they are "
"always created by calling the constructor:"
msgstr ""

#: ../../library/stdtypes.rst:3004
msgid "Creating an empty instance: ``bytearray()``"
msgstr ""

#: ../../library/stdtypes.rst:3005
msgid "Creating a zero-filled instance with a given length: ``bytearray(10)``"
msgstr ""

#: ../../library/stdtypes.rst:3006
msgid "From an iterable of integers: ``bytearray(range(20))``"
msgstr ""

#: ../../library/stdtypes.rst:3007
msgid ""
"Copying existing binary data via the buffer protocol:  ``bytearray(b'Hi!')``"
msgstr ""

#: ../../library/stdtypes.rst:3009
msgid ""
"As bytearray objects are mutable, they support the :ref:`mutable <typesseq-"
"mutable>` sequence operations in addition to the common bytes and bytearray "
"operations described in :ref:`bytes-methods`."
msgstr ""

#: ../../library/stdtypes.rst:3013
msgid "Also see the :ref:`bytearray <func-bytearray>` built-in."
msgstr ""

#: ../../library/stdtypes.rst:3015
msgid ""
"Since 2 hexadecimal digits correspond precisely to a single byte, "
"hexadecimal numbers are a commonly used format for describing binary data. "
"Accordingly, the bytearray type has an additional class method to read data "
"in that format:"
msgstr ""

#: ../../library/stdtypes.rst:3021
msgid ""
"This :class:`bytearray` class method returns bytearray object, decoding the "
"given string object.  The string must contain two hexadecimal digits per "
"byte, with ASCII whitespace being ignored."
msgstr ""

#: ../../library/stdtypes.rst:3028
msgid ""
":meth:`bytearray.fromhex` now skips all ASCII whitespace in the string, not "
"just spaces."
msgstr ""

#: ../../library/stdtypes.rst:3032
msgid ""
":meth:`bytearray.fromhex` now accepts ASCII :class:`bytes` and :term:`bytes-"
"like objects <bytes-like object>` as input."
msgstr ""

#: ../../library/stdtypes.rst:3036
msgid ""
"A reverse conversion function exists to transform a bytearray object into "
"its hexadecimal representation."
msgstr ""

#: ../../library/stdtypes.rst:3049
msgid ""
"Similar to :meth:`bytes.hex`, :meth:`bytearray.hex` now supports optional "
"*sep* and *bytes_per_sep* parameters to insert separators between bytes in "
"the hex output."
msgstr ""

#: ../../library/stdtypes.rst:3056
msgid ""
"Resize the :class:`bytearray` to contain *size* bytes. *size* must be "
"greater than or equal to 0."
msgstr ""

#: ../../library/stdtypes.rst:3059
msgid ""
"If the :class:`bytearray` needs to shrink, bytes beyond *size* are truncated."
msgstr ""

#: ../../library/stdtypes.rst:3061
msgid ""
"If the :class:`bytearray` needs to grow, all new bytes, those beyond *size*, "
"will be set to null bytes."
msgstr ""

#: ../../library/stdtypes.rst:3065
msgid "This is equivalent to:"
msgstr ""

#: ../../library/stdtypes.rst:3073
msgid "Examples:"
msgstr ""

#: ../../library/stdtypes.rst:3086
msgid ""
"Since bytearray objects are sequences of integers (akin to a list), for a "
"bytearray object *b*, ``b[0]`` will be an integer, while ``b[0:1]`` will be "
"a bytearray object of length 1.  (This contrasts with text strings, where "
"both indexing and slicing will produce a string of length 1)"
msgstr ""

#: ../../library/stdtypes.rst:3091
msgid ""
"The representation of bytearray objects uses the bytes literal format "
"(``bytearray(b'...')``) since it is often more useful than e.g. "
"``bytearray([46, 46, 46])``.  You can always convert a bytearray object into "
"a list of integers using ``list(b)``."
msgstr ""

#: ../../library/stdtypes.rst:3100
msgid "Bytes and Bytearray Operations"
msgstr ""

#: ../../library/stdtypes.rst:3105
msgid ""
"Both bytes and bytearray objects support the :ref:`common <typesseq-common>` "
"sequence operations. They interoperate not just with operands of the same "
"type, but with any :term:`bytes-like object`. Due to this flexibility, they "
"can be freely mixed in operations without causing errors. However, the "
"return type of the result may depend on the order of operands."
msgstr ""

#: ../../library/stdtypes.rst:3113
msgid ""
"The methods on bytes and bytearray objects don't accept strings as their "
"arguments, just as the methods on strings don't accept bytes as their "
"arguments.  For example, you have to write::"
msgstr ""

#: ../../library/stdtypes.rst:3117
msgid ""
"a = \"abc\"\n"
"b = a.replace(\"a\", \"f\")"
msgstr ""

#: ../../library/stdtypes.rst:3120
msgid "and::"
msgstr ""

#: ../../library/stdtypes.rst:3122
msgid ""
"a = b\"abc\"\n"
"b = a.replace(b\"a\", b\"f\")"
msgstr ""

#: ../../library/stdtypes.rst:3125
msgid ""
"Some bytes and bytearray operations assume the use of ASCII compatible "
"binary formats, and hence should be avoided when working with arbitrary "
"binary data. These restrictions are covered below."
msgstr ""

#: ../../library/stdtypes.rst:3130
msgid ""
"Using these ASCII based operations to manipulate binary data that is not "
"stored in an ASCII based format may lead to data corruption."
msgstr ""

#: ../../library/stdtypes.rst:3133
msgid ""
"The following methods on bytes and bytearray objects can be used with "
"arbitrary binary data."
msgstr ""

#: ../../library/stdtypes.rst:3139
msgid ""
"Return the number of non-overlapping occurrences of subsequence *sub* in the "
"range [*start*, *end*].  Optional arguments *start* and *end* are "
"interpreted as in slice notation."
msgstr ""

#: ../../library/stdtypes.rst:3143 ../../library/stdtypes.rst:3248
#: ../../library/stdtypes.rst:3270 ../../library/stdtypes.rst:3336
#: ../../library/stdtypes.rst:3349
msgid ""
"The subsequence to search for may be any :term:`bytes-like object` or an "
"integer in the range 0 to 255."
msgstr ""

#: ../../library/stdtypes.rst:3146
msgid ""
"If *sub* is empty, returns the number of empty slices between characters "
"which is the length of the bytes object plus one."
msgstr ""

#: ../../library/stdtypes.rst:3149 ../../library/stdtypes.rst:3260
#: ../../library/stdtypes.rst:3273 ../../library/stdtypes.rst:3339
#: ../../library/stdtypes.rst:3352
msgid "Also accept an integer in the range 0 to 255 as the subsequence."
msgstr ""

#: ../../library/stdtypes.rst:3156
msgid ""
"If the binary data starts with the *prefix* string, return "
"``bytes[len(prefix):]``. Otherwise, return a copy of the original binary "
"data::"
msgstr ""

#: ../../library/stdtypes.rst:3160
msgid ""
">>> b'TestHook'.removeprefix(b'Test')\n"
"b'Hook'\n"
">>> b'BaseTestCase'.removeprefix(b'Test')\n"
"b'BaseTestCase'"
msgstr ""

#: ../../library/stdtypes.rst:3165
msgid "The *prefix* may be any :term:`bytes-like object`."
msgstr ""

#: ../../library/stdtypes.rst:3169 ../../library/stdtypes.rst:3191
#: ../../library/stdtypes.rst:3324 ../../library/stdtypes.rst:3417
#: ../../library/stdtypes.rst:3431 ../../library/stdtypes.rst:3462
#: ../../library/stdtypes.rst:3476 ../../library/stdtypes.rst:3518
#: ../../library/stdtypes.rst:3589 ../../library/stdtypes.rst:3607
#: ../../library/stdtypes.rst:3635 ../../library/stdtypes.rst:3774
#: ../../library/stdtypes.rst:3829 ../../library/stdtypes.rst:3872
#: ../../library/stdtypes.rst:3893 ../../library/stdtypes.rst:3915
#: ../../library/stdtypes.rst:4117
msgid ""
"The bytearray version of this method does *not* operate in place - it always "
"produces a new object, even if no changes were made."
msgstr ""

#: ../../library/stdtypes.rst:3178
msgid ""
"If the binary data ends with the *suffix* string and that *suffix* is not "
"empty, return ``bytes[:-len(suffix)]``.  Otherwise, return a copy of the "
"original binary data::"
msgstr ""

#: ../../library/stdtypes.rst:3182
msgid ""
">>> b'MiscTests'.removesuffix(b'Tests')\n"
"b'Misc'\n"
">>> b'TmpDirMixin'.removesuffix(b'Tests')\n"
"b'TmpDirMixin'"
msgstr ""

#: ../../library/stdtypes.rst:3187
msgid "The *suffix* may be any :term:`bytes-like object`."
msgstr ""

#: ../../library/stdtypes.rst:3200
msgid "Return the bytes decoded to a :class:`str`."
msgstr ""

#: ../../library/stdtypes.rst:3205
msgid ""
"*errors* controls how decoding errors are handled. If ``'strict'`` (the "
"default), a :exc:`UnicodeError` exception is raised. Other possible values "
"are ``'ignore'``, ``'replace'``, and any other name registered via :func:"
"`codecs.register_error`. See :ref:`error-handlers` for details."
msgstr ""

#: ../../library/stdtypes.rst:3211
msgid ""
"For performance reasons, the value of *errors* is not checked for validity "
"unless a decoding error actually occurs, :ref:`devmode` is enabled or a :ref:"
"`debug build <debug-build>` is used."
msgstr ""

#: ../../library/stdtypes.rst:3217
msgid ""
"Passing the *encoding* argument to :class:`str` allows decoding any :term:"
"`bytes-like object` directly, without needing to make a temporary :class:`!"
"bytes` or :class:`!bytearray` object."
msgstr ""

#: ../../library/stdtypes.rst:3232
msgid ""
"Return ``True`` if the binary data ends with the specified *suffix*, "
"otherwise return ``False``.  *suffix* can also be a tuple of suffixes to "
"look for.  With optional *start*, test beginning at that position.  With "
"optional *end*, stop comparing at that position."
msgstr ""

#: ../../library/stdtypes.rst:3237
msgid "The suffix(es) to search for may be any :term:`bytes-like object`."
msgstr ""

#: ../../library/stdtypes.rst:3243
msgid ""
"Return the lowest index in the data where the subsequence *sub* is found, "
"such that *sub* is contained in the slice ``s[start:end]``.  Optional "
"arguments *start* and *end* are interpreted as in slice notation.  Return "
"``-1`` if *sub* is not found."
msgstr ""

#: ../../library/stdtypes.rst:3253
msgid ""
"The :meth:`~bytes.find` method should be used only if you need to know the "
"position of *sub*.  To check if *sub* is a substring or not, use the :"
"keyword:`in` operator::"
msgstr ""

#: ../../library/stdtypes.rst:3257
msgid ""
">>> b'Py' in b'Python'\n"
"True"
msgstr ""

#: ../../library/stdtypes.rst:3267
msgid ""
"Like :meth:`~bytes.find`, but raise :exc:`ValueError` when the subsequence "
"is not found."
msgstr ""

#: ../../library/stdtypes.rst:3280
msgid ""
"Return a bytes or bytearray object which is the concatenation of the binary "
"data sequences in *iterable*.  A :exc:`TypeError` will be raised if there "
"are any values in *iterable* that are not :term:`bytes-like objects <bytes-"
"like object>`, including :class:`str` objects.  The separator between "
"elements is the contents of the bytes or bytearray object providing this "
"method."
msgstr ""

#: ../../library/stdtypes.rst:3291
msgid ""
"This static method returns a translation table usable for :meth:`bytes."
"translate` that will map each character in *from* into the character at the "
"same position in *to*; *from* and *to* must both be :term:`bytes-like "
"objects <bytes-like object>` and have the same length."
msgstr ""

#: ../../library/stdtypes.rst:3302
msgid ""
"Split the sequence at the first occurrence of *sep*, and return a 3-tuple "
"containing the part before the separator, the separator itself or its "
"bytearray copy, and the part after the separator. If the separator is not "
"found, return a 3-tuple containing a copy of the original sequence, followed "
"by two empty bytes or bytearray objects."
msgstr ""

#: ../../library/stdtypes.rst:3309 ../../library/stdtypes.rst:3366
msgid "The separator to search for may be any :term:`bytes-like object`."
msgstr ""

#: ../../library/stdtypes.rst:3315
msgid ""
"Return a copy of the sequence with all occurrences of subsequence *old* "
"replaced by *new*.  If the optional argument *count* is given, only the "
"first *count* occurrences are replaced."
msgstr ""

#: ../../library/stdtypes.rst:3319
msgid ""
"The subsequence to search for and its replacement may be any :term:`bytes-"
"like object`."
msgstr ""

#: ../../library/stdtypes.rst:3331
msgid ""
"Return the highest index in the sequence where the subsequence *sub* is "
"found, such that *sub* is contained within ``s[start:end]``.  Optional "
"arguments *start* and *end* are interpreted as in slice notation. Return "
"``-1`` on failure."
msgstr ""

#: ../../library/stdtypes.rst:3346
msgid ""
"Like :meth:`~bytes.rfind` but raises :exc:`ValueError` when the subsequence "
"*sub* is not found."
msgstr ""

#: ../../library/stdtypes.rst:3359
msgid ""
"Split the sequence at the last occurrence of *sep*, and return a 3-tuple "
"containing the part before the separator, the separator itself or its "
"bytearray copy, and the part after the separator. If the separator is not "
"found, return a 3-tuple containing two empty bytes or bytearray objects, "
"followed by a copy of the original sequence."
msgstr ""

#: ../../library/stdtypes.rst:3372
msgid ""
"Return ``True`` if the binary data starts with the specified *prefix*, "
"otherwise return ``False``.  *prefix* can also be a tuple of prefixes to "
"look for.  With optional *start*, test beginning at that position.  With "
"optional *end*, stop comparing at that position."
msgstr ""

#: ../../library/stdtypes.rst:3377
msgid "The prefix(es) to search for may be any :term:`bytes-like object`."
msgstr ""

#: ../../library/stdtypes.rst:3383
msgid ""
"Return a copy of the bytes or bytearray object where all bytes occurring in "
"the optional argument *delete* are removed, and the remaining bytes have "
"been mapped through the given translation table, which must be a bytes "
"object of length 256."
msgstr ""

#: ../../library/stdtypes.rst:3388
msgid ""
"You can use the :func:`bytes.maketrans` method to create a translation table."
msgstr ""

#: ../../library/stdtypes.rst:3391
msgid ""
"Set the *table* argument to ``None`` for translations that only delete "
"characters::"
msgstr ""

#: ../../library/stdtypes.rst:3394
msgid ""
">>> b'read this short text'.translate(None, b'aeiou')\n"
"b'rd ths shrt txt'"
msgstr ""

#: ../../library/stdtypes.rst:3397
msgid "*delete* is now supported as a keyword argument."
msgstr ""

#: ../../library/stdtypes.rst:3401
msgid ""
"The following methods on bytes and bytearray objects have default behaviours "
"that assume the use of ASCII compatible binary formats, but can still be "
"used with arbitrary binary data by passing appropriate arguments. Note that "
"all of the bytearray methods in this section do *not* operate in place, and "
"instead produce new objects."
msgstr ""

#: ../../library/stdtypes.rst:3410
msgid ""
"Return a copy of the object centered in a sequence of length *width*. "
"Padding is done using the specified *fillbyte* (default is an ASCII space). "
"For :class:`bytes` objects, the original sequence is returned if *width* is "
"less than or equal to ``len(s)``."
msgstr ""

#: ../../library/stdtypes.rst:3424
msgid ""
"Return a copy of the object left justified in a sequence of length *width*. "
"Padding is done using the specified *fillbyte* (default is an ASCII space). "
"For :class:`bytes` objects, the original sequence is returned if *width* is "
"less than or equal to ``len(s)``."
msgstr ""

#: ../../library/stdtypes.rst:3438
msgid ""
"Return a copy of the sequence with specified leading bytes removed.  The "
"*chars* argument is a binary sequence specifying the set of byte values to "
"be removed - the name refers to the fact this method is usually used with "
"ASCII characters.  If omitted or ``None``, the *chars* argument defaults to "
"removing ASCII whitespace.  The *chars* argument is not a prefix; rather, "
"all combinations of its values are stripped::"
msgstr ""

#: ../../library/stdtypes.rst:3445
msgid ""
">>> b'   spacious   '.lstrip()\n"
"b'spacious   '\n"
">>> b'www.example.com'.lstrip(b'cmowz.')\n"
"b'example.com'"
msgstr ""

#: ../../library/stdtypes.rst:3450
msgid ""
"The binary sequence of byte values to remove may be any :term:`bytes-like "
"object`. See :meth:`~bytes.removeprefix` for a method that will remove a "
"single prefix string rather than all of a set of characters.  For example::"
msgstr ""

#: ../../library/stdtypes.rst:3455
msgid ""
">>> b'Arthur: three!'.lstrip(b'Arthur: ')\n"
"b'ee!'\n"
">>> b'Arthur: three!'.removeprefix(b'Arthur: ')\n"
"b'three!'"
msgstr ""

#: ../../library/stdtypes.rst:3469
msgid ""
"Return a copy of the object right justified in a sequence of length *width*. "
"Padding is done using the specified *fillbyte* (default is an ASCII space). "
"For :class:`bytes` objects, the original sequence is returned if *width* is "
"less than or equal to ``len(s)``."
msgstr ""

#: ../../library/stdtypes.rst:3483
msgid ""
"Split the binary sequence into subsequences of the same type, using *sep* as "
"the delimiter string. If *maxsplit* is given, at most *maxsplit* splits are "
"done, the *rightmost* ones.  If *sep* is not specified or ``None``, any "
"subsequence consisting solely of ASCII whitespace is a separator. Except for "
"splitting from the right, :meth:`rsplit` behaves like :meth:`split` which is "
"described in detail below."
msgstr ""

#: ../../library/stdtypes.rst:3494
msgid ""
"Return a copy of the sequence with specified trailing bytes removed.  The "
"*chars* argument is a binary sequence specifying the set of byte values to "
"be removed - the name refers to the fact this method is usually used with "
"ASCII characters.  If omitted or ``None``, the *chars* argument defaults to "
"removing ASCII whitespace.  The *chars* argument is not a suffix; rather, "
"all combinations of its values are stripped::"
msgstr ""

#: ../../library/stdtypes.rst:3501
msgid ""
">>> b'   spacious   '.rstrip()\n"
"b'   spacious'\n"
">>> b'mississippi'.rstrip(b'ipz')\n"
"b'mississ'"
msgstr ""

#: ../../library/stdtypes.rst:3506
msgid ""
"The binary sequence of byte values to remove may be any :term:`bytes-like "
"object`. See :meth:`~bytes.removesuffix` for a method that will remove a "
"single suffix string rather than all of a set of characters.  For example::"
msgstr ""

#: ../../library/stdtypes.rst:3511
msgid ""
">>> b'Monty Python'.rstrip(b' Python')\n"
"b'M'\n"
">>> b'Monty Python'.removesuffix(b' Python')\n"
"b'Monty'"
msgstr ""

#: ../../library/stdtypes.rst:3525
msgid ""
"Split the binary sequence into subsequences of the same type, using *sep* as "
"the delimiter string. If *maxsplit* is given and non-negative, at most "
"*maxsplit* splits are done (thus, the list will have at most ``maxsplit+1`` "
"elements).  If *maxsplit* is not specified or is ``-1``, then there is no "
"limit on the number of splits (all possible splits are made)."
msgstr ""

#: ../../library/stdtypes.rst:3531
msgid ""
"If *sep* is given, consecutive delimiters are not grouped together and are "
"deemed to delimit empty subsequences (for example, ``b'1,,2'.split(b',')`` "
"returns ``[b'1', b'', b'2']``).  The *sep* argument may consist of a "
"multibyte sequence as a single delimiter. Splitting an empty sequence with a "
"specified separator returns ``[b'']`` or ``[bytearray(b'')]`` depending on "
"the type of object being split.  The *sep* argument may be any :term:`bytes-"
"like object`."
msgstr ""

#: ../../library/stdtypes.rst:3541
msgid ""
">>> b'1,2,3'.split(b',')\n"
"[b'1', b'2', b'3']\n"
">>> b'1,2,3'.split(b',', maxsplit=1)\n"
"[b'1', b'2,3']\n"
">>> b'1,2,,3,'.split(b',')\n"
"[b'1', b'2', b'', b'3', b'']\n"
">>> b'1<>2<>3<4'.split(b'<>')\n"
"[b'1', b'2', b'3<4']"
msgstr ""

#: ../../library/stdtypes.rst:3550
msgid ""
"If *sep* is not specified or is ``None``, a different splitting algorithm is "
"applied: runs of consecutive ASCII whitespace are regarded as a single "
"separator, and the result will contain no empty strings at the start or end "
"if the sequence has leading or trailing whitespace.  Consequently, splitting "
"an empty sequence or a sequence consisting solely of ASCII whitespace "
"without a specified separator returns ``[]``."
msgstr ""

#: ../../library/stdtypes.rst:3560
msgid ""
">>> b'1 2 3'.split()\n"
"[b'1', b'2', b'3']\n"
">>> b'1 2 3'.split(maxsplit=1)\n"
"[b'1', b'2 3']\n"
">>> b'   1   2   3   '.split()\n"
"[b'1', b'2', b'3']"
msgstr ""

#: ../../library/stdtypes.rst:3571
msgid ""
"Return a copy of the sequence with specified leading and trailing bytes "
"removed. The *chars* argument is a binary sequence specifying the set of "
"byte values to be removed - the name refers to the fact this method is "
"usually used with ASCII characters.  If omitted or ``None``, the *chars* "
"argument defaults to removing ASCII whitespace. The *chars* argument is not "
"a prefix or suffix; rather, all combinations of its values are stripped::"
msgstr ""

#: ../../library/stdtypes.rst:3579
msgid ""
">>> b'   spacious   '.strip()\n"
"b'spacious'\n"
">>> b'www.example.com'.strip(b'cmowz.')\n"
"b'example'"
msgstr ""

#: ../../library/stdtypes.rst:3584
msgid ""
"The binary sequence of byte values to remove may be any :term:`bytes-like "
"object`."
msgstr ""

#: ../../library/stdtypes.rst:3593
msgid ""
"The following methods on bytes and bytearray objects assume the use of ASCII "
"compatible binary formats and should not be applied to arbitrary binary "
"data. Note that all of the bytearray methods in this section do *not* "
"operate in place, and instead produce new objects."
msgstr ""

#: ../../library/stdtypes.rst:3601
msgid ""
"Return a copy of the sequence with each byte interpreted as an ASCII "
"character, and the first byte capitalized and the rest lowercased. Non-ASCII "
"byte values are passed through unchanged."
msgstr ""

#: ../../library/stdtypes.rst:3614
msgid ""
"Return a copy of the sequence where all ASCII tab characters are replaced by "
"one or more ASCII spaces, depending on the current column and the given tab "
"size.  Tab positions occur every *tabsize* bytes (default is 8, giving tab "
"positions at columns 0, 8, 16 and so on).  To expand the sequence, the "
"current column is set to zero and the sequence is examined byte by byte.  If "
"the byte is an ASCII tab character (``b'\\t'``), one or more space "
"characters are inserted in the result until the current column is equal to "
"the next tab position. (The tab character itself is not copied.)  If the "
"current byte is an ASCII newline (``b'\\n'``) or carriage return "
"(``b'\\r'``), it is copied and the current column is reset to zero.  Any "
"other byte value is copied unchanged and the current column is incremented "
"by one regardless of how the byte value is represented when printed::"
msgstr ""

#: ../../library/stdtypes.rst:3628
msgid ""
">>> b'01\\t012\\t0123\\t01234'.expandtabs()\n"
"b'01      012     0123    01234'\n"
">>> b'01\\t012\\t0123\\t01234'.expandtabs(4)\n"
"b'01  012 0123    01234'"
msgstr ""

#: ../../library/stdtypes.rst:3642
msgid ""
"Return ``True`` if all bytes in the sequence are alphabetical ASCII "
"characters or ASCII decimal digits and the sequence is not empty, ``False`` "
"otherwise. Alphabetic ASCII characters are those byte values in the sequence "
"``b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'``. ASCII decimal "
"digits are those byte values in the sequence ``b'0123456789'``."
msgstr ""

#: ../../library/stdtypes.rst:3650
msgid ""
">>> b'ABCabc1'.isalnum()\n"
"True\n"
">>> b'ABC abc1'.isalnum()\n"
"False"
msgstr ""

#: ../../library/stdtypes.rst:3659
msgid ""
"Return ``True`` if all bytes in the sequence are alphabetic ASCII characters "
"and the sequence is not empty, ``False`` otherwise.  Alphabetic ASCII "
"characters are those byte values in the sequence "
"``b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'``."
msgstr ""

#: ../../library/stdtypes.rst:3666
msgid ""
">>> b'ABCabc'.isalpha()\n"
"True\n"
">>> b'ABCabc1'.isalpha()\n"
"False"
msgstr ""

#: ../../library/stdtypes.rst:3675
msgid ""
"Return ``True`` if the sequence is empty or all bytes in the sequence are "
"ASCII, ``False`` otherwise. ASCII bytes are in the range 0-0x7F."
msgstr ""

#: ../../library/stdtypes.rst:3685
msgid ""
"Return ``True`` if all bytes in the sequence are ASCII decimal digits and "
"the sequence is not empty, ``False`` otherwise. ASCII decimal digits are "
"those byte values in the sequence ``b'0123456789'``."
msgstr ""

#: ../../library/stdtypes.rst:3691
msgid ""
">>> b'1234'.isdigit()\n"
"True\n"
">>> b'1.23'.isdigit()\n"
"False"
msgstr ""

#: ../../library/stdtypes.rst:3700
msgid ""
"Return ``True`` if there is at least one lowercase ASCII character in the "
"sequence and no uppercase ASCII characters, ``False`` otherwise."
msgstr ""

#: ../../library/stdtypes.rst:3705
msgid ""
">>> b'hello world'.islower()\n"
"True\n"
">>> b'Hello world'.islower()\n"
"False"
msgstr ""

#: ../../library/stdtypes.rst:3710 ../../library/stdtypes.rst:3752
#: ../../library/stdtypes.rst:3768 ../../library/stdtypes.rst:3818
#: ../../library/stdtypes.rst:3887
msgid ""
"Lowercase ASCII characters are those byte values in the sequence "
"``b'abcdefghijklmnopqrstuvwxyz'``. Uppercase ASCII characters are those byte "
"values in the sequence ``b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'``."
msgstr ""

#: ../../library/stdtypes.rst:3718
msgid ""
"Return ``True`` if all bytes in the sequence are ASCII whitespace and the "
"sequence is not empty, ``False`` otherwise.  ASCII whitespace characters are "
"those byte values in the sequence ``b' \\t\\n\\r\\x0b\\f'`` (space, tab, "
"newline, carriage return, vertical tab, form feed)."
msgstr ""

#: ../../library/stdtypes.rst:3727
msgid ""
"Return ``True`` if the sequence is ASCII titlecase and the sequence is not "
"empty, ``False`` otherwise. See :meth:`bytes.title` for more details on the "
"definition of \"titlecase\"."
msgstr ""

#: ../../library/stdtypes.rst:3733
msgid ""
">>> b'Hello World'.istitle()\n"
"True\n"
">>> b'Hello world'.istitle()\n"
"False"
msgstr ""

#: ../../library/stdtypes.rst:3742
msgid ""
"Return ``True`` if there is at least one uppercase alphabetic ASCII "
"character in the sequence and no lowercase ASCII characters, ``False`` "
"otherwise."
msgstr ""

#: ../../library/stdtypes.rst:3747
msgid ""
">>> b'HELLO WORLD'.isupper()\n"
"True\n"
">>> b'Hello world'.isupper()\n"
"False"
msgstr ""

#: ../../library/stdtypes.rst:3760
msgid ""
"Return a copy of the sequence with all the uppercase ASCII characters "
"converted to their corresponding lowercase counterpart."
msgstr ""

#: ../../library/stdtypes.rst:3765
msgid ""
">>> b'Hello World'.lower()\n"
"b'hello world'"
msgstr ""

#: ../../library/stdtypes.rst:3785
msgid ""
"Return a list of the lines in the binary sequence, breaking at ASCII line "
"boundaries. This method uses the :term:`universal newlines` approach to "
"splitting lines. Line breaks are not included in the resulting list unless "
"*keepends* is given and true."
msgstr ""

#: ../../library/stdtypes.rst:3792
msgid ""
">>> b'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines()\n"
"[b'ab c', b'', b'de fg', b'kl']\n"
">>> b'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines(keepends=True)\n"
"[b'ab c\\n', b'\\n', b'de fg\\r', b'kl\\r\\n']"
msgstr ""

#: ../../library/stdtypes.rst:3797
msgid ""
"Unlike :meth:`~bytes.split` when a delimiter string *sep* is given, this "
"method returns an empty list for the empty string, and a terminal line break "
"does not result in an extra line::"
msgstr ""

#: ../../library/stdtypes.rst:3801
msgid ""
">>> b\"\".split(b'\\n'), b\"Two lines\\n\".split(b'\\n')\n"
"([b''], [b'Two lines', b''])\n"
">>> b\"\".splitlines(), b\"One line\\n\".splitlines()\n"
"([], [b'One line'])"
msgstr ""

#: ../../library/stdtypes.rst:3810
msgid ""
"Return a copy of the sequence with all the lowercase ASCII characters "
"converted to their corresponding uppercase counterpart and vice-versa."
msgstr ""

#: ../../library/stdtypes.rst:3815
msgid ""
">>> b'Hello World'.swapcase()\n"
"b'hELLO wORLD'"
msgstr ""

#: ../../library/stdtypes.rst:3822
msgid ""
"Unlike :func:`str.swapcase`, it is always the case that ``bin.swapcase()."
"swapcase() == bin`` for the binary versions. Case conversions are "
"symmetrical in ASCII, even though that is not generally true for arbitrary "
"Unicode code points."
msgstr ""

#: ../../library/stdtypes.rst:3836
msgid ""
"Return a titlecased version of the binary sequence where words start with an "
"uppercase ASCII character and the remaining characters are lowercase. "
"Uncased byte values are left unmodified."
msgstr ""

#: ../../library/stdtypes.rst:3842
msgid ""
">>> b'Hello world'.title()\n"
"b'Hello World'"
msgstr ""

#: ../../library/stdtypes.rst:3845
msgid ""
"Lowercase ASCII characters are those byte values in the sequence "
"``b'abcdefghijklmnopqrstuvwxyz'``. Uppercase ASCII characters are those byte "
"values in the sequence ``b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'``. All other byte "
"values are uncased."
msgstr ""

#: ../../library/stdtypes.rst:3855
msgid ""
">>> b\"they're bill's friends from the UK\".title()\n"
"b\"They'Re Bill'S Friends From The Uk\""
msgstr ""

#: ../../library/stdtypes.rst:3858
msgid ""
"A workaround for apostrophes can be constructed using regular expressions::"
msgstr ""

#: ../../library/stdtypes.rst:3860
msgid ""
">>> import re\n"
">>> def titlecase(s):\n"
"...     return re.sub(rb\"[A-Za-z]+('[A-Za-z]+)?\",\n"
"...                   lambda mo: mo.group(0)[0:1].upper() +\n"
"...                              mo.group(0)[1:].lower(),\n"
"...                   s)\n"
"...\n"
">>> titlecase(b\"they're bill's friends.\")\n"
"b\"They're Bill's Friends.\""
msgstr ""

#: ../../library/stdtypes.rst:3879
msgid ""
"Return a copy of the sequence with all the lowercase ASCII characters "
"converted to their corresponding uppercase counterpart."
msgstr ""

#: ../../library/stdtypes.rst:3884
msgid ""
">>> b'Hello World'.upper()\n"
"b'HELLO WORLD'"
msgstr ""

#: ../../library/stdtypes.rst:3900
msgid ""
"Return a copy of the sequence left filled with ASCII ``b'0'`` digits to make "
"a sequence of length *width*. A leading sign prefix (``b'+'``/ ``b'-'``) is "
"handled by inserting the padding *after* the sign character rather than "
"before. For :class:`bytes` objects, the original sequence is returned if "
"*width* is less than or equal to ``len(seq)``."
msgstr ""

#: ../../library/stdtypes.rst:3908
msgid ""
">>> b\"42\".zfill(5)\n"
"b'00042'\n"
">>> b\"-42\".zfill(5)\n"
"b'-0042'"
msgstr ""

#: ../../library/stdtypes.rst:3922
msgid "``printf``-style Bytes Formatting"
msgstr ""

#: ../../library/stdtypes.rst:3939
msgid ""
"The formatting operations described here exhibit a variety of quirks that "
"lead to a number of common errors (such as failing to display tuples and "
"dictionaries correctly).  If the value being printed may be a tuple or "
"dictionary, wrap it in a tuple."
msgstr ""

#: ../../library/stdtypes.rst:3944
msgid ""
"Bytes objects (``bytes``/``bytearray``) have one unique built-in operation: "
"the ``%`` operator (modulo). This is also known as the bytes *formatting* or "
"*interpolation* operator. Given ``format % values`` (where *format* is a "
"bytes object), ``%`` conversion specifications in *format* are replaced with "
"zero or more elements of *values*. The effect is similar to using the :c:"
"func:`sprintf` in the C language."
msgstr ""

#: ../../library/stdtypes.rst:3951
msgid ""
"If *format* requires a single argument, *values* may be a single non-tuple "
"object. [5]_  Otherwise, *values* must be a tuple with exactly the number of "
"items specified by the format bytes object, or a single mapping object (for "
"example, a dictionary)."
msgstr ""

#: ../../library/stdtypes.rst:3985
msgid ""
"When the right argument is a dictionary (or other mapping type), then the "
"formats in the bytes object *must* include a parenthesised mapping key into "
"that dictionary inserted immediately after the ``'%'`` character. The "
"mapping key selects the value to be formatted from the mapping.  For example:"
msgstr ""

#: ../../library/stdtypes.rst:4059
msgid "Single byte (accepts integer or single byte objects)."
msgstr ""

#: ../../library/stdtypes.rst:4062
msgid "``'b'``"
msgstr ""

#: ../../library/stdtypes.rst:4062
msgid ""
"Bytes (any object that follows the :ref:`buffer protocol <bufferobjects>` or "
"has :meth:`~object.__bytes__`)."
msgstr ""

#: ../../library/stdtypes.rst:4066
msgid ""
"``'s'`` is an alias for ``'b'`` and should only be used for Python2/3 code "
"bases."
msgstr ""

#: ../../library/stdtypes.rst:4069
msgid ""
"Bytes (converts any Python object using ``repr(obj).encode('ascii', "
"'backslashreplace')``)."
msgstr ""

#: ../../library/stdtypes.rst:4072
msgid ""
"``'r'`` is an alias for ``'a'`` and should only be used for Python2/3 code "
"bases."
msgstr ""

#: ../../library/stdtypes.rst:4072
msgid "\\(7)"
msgstr ""

#: ../../library/stdtypes.rst:4107
msgid "``b'%s'`` is deprecated, but will not be removed during the 3.x series."
msgstr ""

#: ../../library/stdtypes.rst:4110
msgid "``b'%r'`` is deprecated, but will not be removed during the 3.x series."
msgstr ""

#: ../../library/stdtypes.rst:4122
msgid ":pep:`461` - Adding % formatting to bytes and bytearray"
msgstr ""

#: ../../library/stdtypes.rst:4129
msgid "Memory Views"
msgstr ""

#: ../../library/stdtypes.rst:4131
msgid ""
":class:`memoryview` objects allow Python code to access the internal data of "
"an object that supports the :ref:`buffer protocol <bufferobjects>` without "
"copying."
msgstr ""

#: ../../library/stdtypes.rst:4137
msgid ""
"Create a :class:`memoryview` that references *object*.  *object* must "
"support the buffer protocol.  Built-in objects that support the buffer "
"protocol include :class:`bytes` and :class:`bytearray`."
msgstr ""

#: ../../library/stdtypes.rst:4141
msgid ""
"A :class:`memoryview` has the notion of an *element*, which is the atomic "
"memory unit handled by the originating *object*.  For many simple types such "
"as :class:`bytes` and :class:`bytearray`, an element is a single byte, but "
"other types such as :class:`array.array` may have bigger elements."
msgstr ""

#: ../../library/stdtypes.rst:4146
msgid ""
"``len(view)`` is equal to the length of :class:`~memoryview.tolist`, which "
"is the nested list representation of the view. If ``view.ndim = 1``, this is "
"equal to the number of elements in the view."
msgstr ""

#: ../../library/stdtypes.rst:4150
msgid ""
"If ``view.ndim == 0``, ``len(view)`` now raises :exc:`TypeError` instead of "
"returning 1."
msgstr ""

#: ../../library/stdtypes.rst:4153
msgid ""
"The :class:`~memoryview.itemsize` attribute will give you the number of "
"bytes in a single element."
msgstr ""

#: ../../library/stdtypes.rst:4156
msgid ""
"A :class:`memoryview` supports slicing and indexing to expose its data. One-"
"dimensional slicing will result in a subview::"
msgstr ""

#: ../../library/stdtypes.rst:4159
msgid ""
">>> v = memoryview(b'abcefg')\n"
">>> v[1]\n"
"98\n"
">>> v[-1]\n"
"103\n"
">>> v[1:4]\n"
"<memory at 0x7f3ddc9f4350>\n"
">>> bytes(v[1:4])\n"
"b'bce'"
msgstr ""

#: ../../library/stdtypes.rst:4169
msgid ""
"If :class:`~memoryview.format` is one of the native format specifiers from "
"the :mod:`struct` module, indexing with an integer or a tuple of integers is "
"also supported and returns a single *element* with the correct type.  One-"
"dimensional memoryviews can be indexed with an integer or a one-integer "
"tuple.  Multi-dimensional memoryviews can be indexed with tuples of exactly "
"*ndim* integers where *ndim* is the number of dimensions.  Zero-dimensional "
"memoryviews can be indexed with the empty tuple."
msgstr ""

#: ../../library/stdtypes.rst:4178
msgid "Here is an example with a non-byte format::"
msgstr ""

#: ../../library/stdtypes.rst:4180
msgid ""
">>> import array\n"
">>> a = array.array('l', [-11111111, 22222222, -33333333, 44444444])\n"
">>> m = memoryview(a)\n"
">>> m[0]\n"
"-11111111\n"
">>> m[-1]\n"
"44444444\n"
">>> m[::2].tolist()\n"
"[-11111111, -33333333]"
msgstr ""

#: ../../library/stdtypes.rst:4190
msgid ""
"If the underlying object is writable, the memoryview supports one-"
"dimensional slice assignment. Resizing is not allowed::"
msgstr ""

#: ../../library/stdtypes.rst:4193
msgid ""
">>> data = bytearray(b'abcefg')\n"
">>> v = memoryview(data)\n"
">>> v.readonly\n"
"False\n"
">>> v[0] = ord(b'z')\n"
">>> data\n"
"bytearray(b'zbcefg')\n"
">>> v[1:4] = b'123'\n"
">>> data\n"
"bytearray(b'z123fg')\n"
">>> v[2:3] = b'spam'\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"ValueError: memoryview assignment: lvalue and rvalue have different "
"structures\n"
">>> v[2:6] = b'spam'\n"
">>> data\n"
"bytearray(b'z1spam')"
msgstr ""

#: ../../library/stdtypes.rst:4211
msgid ""
"One-dimensional memoryviews of :term:`hashable` (read-only) types with "
"formats 'B', 'b' or 'c' are also hashable. The hash is defined as ``hash(m) "
"== hash(m.tobytes())``::"
msgstr ""

#: ../../library/stdtypes.rst:4215
msgid ""
">>> v = memoryview(b'abcefg')\n"
">>> hash(v) == hash(b'abcefg')\n"
"True\n"
">>> hash(v[2:4]) == hash(b'ce')\n"
"True\n"
">>> hash(v[::-2]) == hash(b'abcefg'[::-2])\n"
"True"
msgstr ""

#: ../../library/stdtypes.rst:4223
msgid ""
"One-dimensional memoryviews can now be sliced. One-dimensional memoryviews "
"with formats 'B', 'b' or 'c' are now :term:`hashable`."
msgstr ""

#: ../../library/stdtypes.rst:4227
msgid ""
"memoryview is now registered automatically with :class:`collections.abc."
"Sequence`"
msgstr ""

#: ../../library/stdtypes.rst:4231
msgid "memoryviews can now be indexed with tuple of integers."
msgstr ""

#: ../../library/stdtypes.rst:4234
msgid "memoryview is now a :term:`generic type`."
msgstr ""

#: ../../library/stdtypes.rst:4237
msgid ":class:`memoryview` has several methods:"
msgstr ""

#: ../../library/stdtypes.rst:4241
msgid ""
"A memoryview and a :pep:`3118` exporter are equal if their shapes are "
"equivalent and if all corresponding values are equal when the operands' "
"respective format codes are interpreted using :mod:`struct` syntax."
msgstr ""

#: ../../library/stdtypes.rst:4245
msgid ""
"For the subset of :mod:`struct` format strings currently supported by :meth:"
"`tolist`, ``v`` and ``w`` are equal if ``v.tolist() == w.tolist()``::"
msgstr ""

#: ../../library/stdtypes.rst:4248
msgid ""
">>> import array\n"
">>> a = array.array('I', [1, 2, 3, 4, 5])\n"
">>> b = array.array('d', [1.0, 2.0, 3.0, 4.0, 5.0])\n"
">>> c = array.array('b', [5, 3, 1])\n"
">>> x = memoryview(a)\n"
">>> y = memoryview(b)\n"
">>> x == a == y == b\n"
"True\n"
">>> x.tolist() == a.tolist() == y.tolist() == b.tolist()\n"
"True\n"
">>> z = y[::-2]\n"
">>> z == c\n"
"True\n"
">>> z.tolist() == c.tolist()\n"
"True"
msgstr ""

#: ../../library/stdtypes.rst:4264
msgid ""
"If either format string is not supported by the :mod:`struct` module, then "
"the objects will always compare as unequal (even if the format strings and "
"buffer contents are identical)::"
msgstr ""

#: ../../library/stdtypes.rst:4268
msgid ""
">>> from ctypes import BigEndianStructure, c_long\n"
">>> class BEPoint(BigEndianStructure):\n"
"...     _fields_ = [(\"x\", c_long), (\"y\", c_long)]\n"
"...\n"
">>> point = BEPoint(100, 200)\n"
">>> a = memoryview(point)\n"
">>> b = memoryview(point)\n"
">>> a == point\n"
"False\n"
">>> a == b\n"
"False"
msgstr ""

#: ../../library/stdtypes.rst:4280
msgid ""
"Note that, as with floating-point numbers, ``v is w`` does *not* imply ``v "
"== w`` for memoryview objects."
msgstr ""

#: ../../library/stdtypes.rst:4283
msgid ""
"Previous versions compared the raw memory disregarding the item format and "
"the logical array structure."
msgstr ""

#: ../../library/stdtypes.rst:4289
msgid ""
"Return the data in the buffer as a bytestring.  This is equivalent to "
"calling the :class:`bytes` constructor on the memoryview. ::"
msgstr ""

#: ../../library/stdtypes.rst:4292
msgid ""
">>> m = memoryview(b\"abc\")\n"
">>> m.tobytes()\n"
"b'abc'\n"
">>> bytes(m)\n"
"b'abc'"
msgstr ""

#: ../../library/stdtypes.rst:4298
msgid ""
"For non-contiguous arrays the result is equal to the flattened list "
"representation with all elements converted to bytes. :meth:`tobytes` "
"supports all format strings, including those that are not in :mod:`struct` "
"module syntax."
msgstr ""

#: ../../library/stdtypes.rst:4303
msgid ""
"*order* can be {'C', 'F', 'A'}.  When *order* is 'C' or 'F', the data of the "
"original array is converted to C or Fortran order. For contiguous views, 'A' "
"returns an exact copy of the physical memory. In particular, in-memory "
"Fortran order is preserved. For non-contiguous views, the data is converted "
"to C first. *order=None* is the same as *order='C'*."
msgstr ""

#: ../../library/stdtypes.rst:4312
msgid ""
"Return a string object containing two hexadecimal digits for each byte in "
"the buffer. ::"
msgstr ""

#: ../../library/stdtypes.rst:4315
msgid ""
">>> m = memoryview(b\"abc\")\n"
">>> m.hex()\n"
"'616263'"
msgstr ""

#: ../../library/stdtypes.rst:4321
msgid ""
"Similar to :meth:`bytes.hex`, :meth:`memoryview.hex` now supports optional "
"*sep* and *bytes_per_sep* parameters to insert separators between bytes in "
"the hex output."
msgstr ""

#: ../../library/stdtypes.rst:4328
msgid "Return the data in the buffer as a list of elements. ::"
msgstr ""

#: ../../library/stdtypes.rst:4330
msgid ""
">>> memoryview(b'abc').tolist()\n"
"[97, 98, 99]\n"
">>> import array\n"
">>> a = array.array('d', [1.1, 2.2, 3.3])\n"
">>> m = memoryview(a)\n"
">>> m.tolist()\n"
"[1.1, 2.2, 3.3]"
msgstr ""

#: ../../library/stdtypes.rst:4338
msgid ""
":meth:`tolist` now supports all single character native formats in :mod:"
"`struct` module syntax as well as multi-dimensional representations."
msgstr ""

#: ../../library/stdtypes.rst:4345
msgid ""
"Return a readonly version of the memoryview object.  The original memoryview "
"object is unchanged. ::"
msgstr ""

#: ../../library/stdtypes.rst:4348
msgid ""
">>> m = memoryview(bytearray(b'abc'))\n"
">>> mm = m.toreadonly()\n"
">>> mm.tolist()\n"
"[97, 98, 99]\n"
">>> mm[0] = 42\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: cannot modify read-only memory\n"
">>> m[0] = 43\n"
">>> mm.tolist()\n"
"[43, 98, 99]"
msgstr ""

#: ../../library/stdtypes.rst:4364
msgid ""
"Release the underlying buffer exposed by the memoryview object.  Many "
"objects take special actions when a view is held on them (for example, a :"
"class:`bytearray` would temporarily forbid resizing); therefore, calling "
"release() is handy to remove these restrictions (and free any dangling "
"resources) as soon as possible."
msgstr ""

#: ../../library/stdtypes.rst:4370
msgid ""
"After this method has been called, any further operation on the view raises "
"a :class:`ValueError` (except :meth:`release` itself which can be called "
"multiple times)::"
msgstr ""

#: ../../library/stdtypes.rst:4374
msgid ""
">>> m = memoryview(b'abc')\n"
">>> m.release()\n"
">>> m[0]\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"ValueError: operation forbidden on released memoryview object"
msgstr ""

#: ../../library/stdtypes.rst:4381
msgid ""
"The context management protocol can be used for a similar effect, using the "
"``with`` statement::"
msgstr ""

#: ../../library/stdtypes.rst:4384
msgid ""
">>> with memoryview(b'abc') as m:\n"
"...     m[0]\n"
"...\n"
"97\n"
">>> m[0]\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"ValueError: operation forbidden on released memoryview object"
msgstr ""

#: ../../library/stdtypes.rst:4397
msgid ""
"Cast a memoryview to a new format or shape. *shape* defaults to "
"``[byte_length//new_itemsize]``, which means that the result view will be "
"one-dimensional. The return value is a new memoryview, but the buffer itself "
"is not copied. Supported casts are 1D -> C-:term:`contiguous` and C-"
"contiguous -> 1D."
msgstr ""

#: ../../library/stdtypes.rst:4403
msgid ""
"The destination format is restricted to a single element native format in :"
"mod:`struct` syntax. One of the formats must be a byte format ('B', 'b' or "
"'c'). The byte length of the result must be the same as the original length. "
"Note that all byte lengths may depend on the operating system."
msgstr ""

#: ../../library/stdtypes.rst:4409
msgid "Cast 1D/long to 1D/unsigned bytes::"
msgstr ""

#: ../../library/stdtypes.rst:4411
msgid ""
">>> import array\n"
">>> a = array.array('l', [1,2,3])\n"
">>> x = memoryview(a)\n"
">>> x.format\n"
"'l'\n"
">>> x.itemsize\n"
"8\n"
">>> len(x)\n"
"3\n"
">>> x.nbytes\n"
"24\n"
">>> y = x.cast('B')\n"
">>> y.format\n"
"'B'\n"
">>> y.itemsize\n"
"1\n"
">>> len(y)\n"
"24\n"
">>> y.nbytes\n"
"24"
msgstr ""

#: ../../library/stdtypes.rst:4432
msgid "Cast 1D/unsigned bytes to 1D/char::"
msgstr ""

#: ../../library/stdtypes.rst:4434
msgid ""
">>> b = bytearray(b'zyz')\n"
">>> x = memoryview(b)\n"
">>> x[0] = b'a'\n"
"Traceback (most recent call last):\n"
"  ...\n"
"TypeError: memoryview: invalid type for format 'B'\n"
">>> y = x.cast('c')\n"
">>> y[0] = b'a'\n"
">>> b\n"
"bytearray(b'ayz')"
msgstr ""

#: ../../library/stdtypes.rst:4445
msgid "Cast 1D/bytes to 3D/ints to 1D/signed char::"
msgstr ""

#: ../../library/stdtypes.rst:4447
msgid ""
">>> import struct\n"
">>> buf = struct.pack(\"i\"*12, *list(range(12)))\n"
">>> x = memoryview(buf)\n"
">>> y = x.cast('i', shape=[2,2,3])\n"
">>> y.tolist()\n"
"[[[0, 1, 2], [3, 4, 5]], [[6, 7, 8], [9, 10, 11]]]\n"
">>> y.format\n"
"'i'\n"
">>> y.itemsize\n"
"4\n"
">>> len(y)\n"
"2\n"
">>> y.nbytes\n"
"48\n"
">>> z = y.cast('b')\n"
">>> z.format\n"
"'b'\n"
">>> z.itemsize\n"
"1\n"
">>> len(z)\n"
"48\n"
">>> z.nbytes\n"
"48"
msgstr ""

#: ../../library/stdtypes.rst:4471
msgid "Cast 1D/unsigned long to 2D/unsigned long::"
msgstr ""

#: ../../library/stdtypes.rst:4473
msgid ""
">>> buf = struct.pack(\"L\"*6, *list(range(6)))\n"
">>> x = memoryview(buf)\n"
">>> y = x.cast('L', shape=[2,3])\n"
">>> len(y)\n"
"2\n"
">>> y.nbytes\n"
"48\n"
">>> y.tolist()\n"
"[[0, 1, 2], [3, 4, 5]]"
msgstr ""

#: ../../library/stdtypes.rst:4485
msgid "The source format is no longer restricted when casting to a byte view."
msgstr ""

#: ../../library/stdtypes.rst:4490
msgid "Count the number of occurrences of *value*."
msgstr ""

#: ../../library/stdtypes.rst:4496
msgid ""
"Return the index of the first occurrence of *value* (at or after index "
"*start* and before index *stop*)."
msgstr ""

#: ../../library/stdtypes.rst:4499
msgid "Raises a :exc:`ValueError` if *value* cannot be found."
msgstr ""

#: ../../library/stdtypes.rst:4503
msgid "There are also several readonly attributes available:"
msgstr ""

#: ../../library/stdtypes.rst:4507
msgid "The underlying object of the memoryview::"
msgstr ""

#: ../../library/stdtypes.rst:4509
msgid ""
">>> b  = bytearray(b'xyz')\n"
">>> m = memoryview(b)\n"
">>> m.obj is b\n"
"True"
msgstr ""

#: ../../library/stdtypes.rst:4518
msgid ""
"``nbytes == product(shape) * itemsize == len(m.tobytes())``. This is the "
"amount of space in bytes that the array would use in a contiguous "
"representation. It is not necessarily equal to ``len(m)``::"
msgstr ""

#: ../../library/stdtypes.rst:4522
msgid ""
">>> import array\n"
">>> a = array.array('i', [1,2,3,4,5])\n"
">>> m = memoryview(a)\n"
">>> len(m)\n"
"5\n"
">>> m.nbytes\n"
"20\n"
">>> y = m[::2]\n"
">>> len(y)\n"
"3\n"
">>> y.nbytes\n"
"12\n"
">>> len(y.tobytes())\n"
"12"
msgstr ""

#: ../../library/stdtypes.rst:4537
msgid "Multi-dimensional arrays::"
msgstr ""

#: ../../library/stdtypes.rst:4539
msgid ""
">>> import struct\n"
">>> buf = struct.pack(\"d\"*12, *[1.5*x for x in range(12)])\n"
">>> x = memoryview(buf)\n"
">>> y = x.cast('d', shape=[3,4])\n"
">>> y.tolist()\n"
"[[0.0, 1.5, 3.0, 4.5], [6.0, 7.5, 9.0, 10.5], [12.0, 13.5, 15.0, 16.5]]\n"
">>> len(y)\n"
"3\n"
">>> y.nbytes\n"
"96"
msgstr ""

#: ../../library/stdtypes.rst:4554
msgid "A bool indicating whether the memory is read only."
msgstr ""

#: ../../library/stdtypes.rst:4558
msgid ""
"A string containing the format (in :mod:`struct` module style) for each "
"element in the view. A memoryview can be created from exporters with "
"arbitrary format strings, but some methods (e.g. :meth:`tolist`) are "
"restricted to native single element formats."
msgstr ""

#: ../../library/stdtypes.rst:4563
msgid ""
"format ``'B'`` is now handled according to the struct module syntax. This "
"means that ``memoryview(b'abc')[0] == b'abc'[0] == 97``."
msgstr ""

#: ../../library/stdtypes.rst:4569
msgid "The size in bytes of each element of the memoryview::"
msgstr ""

#: ../../library/stdtypes.rst:4571
msgid ""
">>> import array, struct\n"
">>> m = memoryview(array.array('H', [32000, 32001, 32002]))\n"
">>> m.itemsize\n"
"2\n"
">>> m[0]\n"
"32000\n"
">>> struct.calcsize('H') == m.itemsize\n"
"True"
msgstr ""

#: ../../library/stdtypes.rst:4582
msgid ""
"An integer indicating how many dimensions of a multi-dimensional array the "
"memory represents."
msgstr ""

#: ../../library/stdtypes.rst:4587
msgid ""
"A tuple of integers the length of :attr:`ndim` giving the shape of the "
"memory as an N-dimensional array."
msgstr ""

#: ../../library/stdtypes.rst:4590 ../../library/stdtypes.rst:4598
msgid "An empty tuple instead of ``None`` when ndim = 0."
msgstr ""

#: ../../library/stdtypes.rst:4595
msgid ""
"A tuple of integers the length of :attr:`ndim` giving the size in bytes to "
"access each element for each dimension of the array."
msgstr ""

#: ../../library/stdtypes.rst:4603
msgid "Used internally for PIL-style arrays. The value is informational only."
msgstr ""

#: ../../library/stdtypes.rst:4607
msgid "A bool indicating whether the memory is C-:term:`contiguous`."
msgstr ""

#: ../../library/stdtypes.rst:4613
msgid "A bool indicating whether the memory is Fortran :term:`contiguous`."
msgstr ""

#: ../../library/stdtypes.rst:4619
msgid "A bool indicating whether the memory is :term:`contiguous`."
msgstr ""

#: ../../library/stdtypes.rst:4627
msgid "Set Types --- :class:`set`, :class:`frozenset`"
msgstr ""

#: ../../library/stdtypes.rst:4631
msgid ""
"A :dfn:`set` object is an unordered collection of distinct :term:`hashable` "
"objects. Common uses include membership testing, removing duplicates from a "
"sequence, and computing mathematical operations such as intersection, union, "
"difference, and symmetric difference. (For other containers see the built-"
"in :class:`dict`, :class:`list`, and :class:`tuple` classes, and the :mod:"
"`collections` module.)"
msgstr ""

#: ../../library/stdtypes.rst:4638
msgid ""
"Like other collections, sets support ``x in set``, ``len(set)``, and ``for x "
"in set``.  Being an unordered collection, sets do not record element "
"position or order of insertion.  Accordingly, sets do not support indexing, "
"slicing, or other sequence-like behavior."
msgstr ""

#: ../../library/stdtypes.rst:4643
msgid ""
"There are currently two built-in set types, :class:`set` and :class:"
"`frozenset`. The :class:`set` type is mutable --- the contents can be "
"changed using methods like :meth:`~set.add` and :meth:`~set.remove`.  Since "
"it is mutable, it has no hash value and cannot be used as either a "
"dictionary key or as an element of another set.  The :class:`frozenset` type "
"is immutable and :term:`hashable` --- its contents cannot be altered after "
"it is created; it can therefore be used as a dictionary key or as an element "
"of another set."
msgstr ""

#: ../../library/stdtypes.rst:4651
msgid ""
"Non-empty sets (not frozensets) can be created by placing a comma-separated "
"list of elements within braces, for example: ``{'jack', 'sjoerd'}``, in "
"addition to the :class:`set` constructor."
msgstr ""

#: ../../library/stdtypes.rst:4655
msgid "The constructors for both classes work the same:"
msgstr ""

#: ../../library/stdtypes.rst:4660
msgid ""
"Return a new set or frozenset object whose elements are taken from "
"*iterable*.  The elements of a set must be :term:`hashable`.  To represent "
"sets of sets, the inner sets must be :class:`frozenset` objects.  If "
"*iterable* is not specified, a new empty set is returned."
msgstr ""

#: ../../library/stdtypes.rst:4666
msgid "Sets can be created by several means:"
msgstr ""

#: ../../library/stdtypes.rst:4668
msgid ""
"Use a comma-separated list of elements within braces: ``{'jack', 'sjoerd'}``"
msgstr ""

#: ../../library/stdtypes.rst:4669
msgid ""
"Use a set comprehension: ``{c for c in 'abracadabra' if c not in 'abc'}``"
msgstr ""

#: ../../library/stdtypes.rst:4670
msgid ""
"Use the type constructor: ``set()``, ``set('foobar')``, ``set(['a', 'b', "
"'foo'])``"
msgstr ""

#: ../../library/stdtypes.rst:4672
msgid ""
"Instances of :class:`set` and :class:`frozenset` provide the following "
"operations:"
msgstr ""

#: ../../library/stdtypes.rst:4677
msgid "Return the number of elements in set *s* (cardinality of *s*)."
msgstr ""

#: ../../library/stdtypes.rst:4681
msgid "Test *x* for membership in *s*."
msgstr ""

#: ../../library/stdtypes.rst:4685
msgid "Test *x* for non-membership in *s*."
msgstr ""

#: ../../library/stdtypes.rst:4689
msgid ""
"Return ``True`` if the set has no elements in common with *other*.  Sets are "
"disjoint if and only if their intersection is the empty set."
msgstr ""

#: ../../library/stdtypes.rst:4695
msgid "Test whether every element in the set is in *other*."
msgstr ""

#: ../../library/stdtypes.rst:4699
msgid ""
"Test whether the set is a proper subset of *other*, that is, ``set <= other "
"and set != other``."
msgstr ""

#: ../../library/stdtypes.rst:4705
msgid "Test whether every element in *other* is in the set."
msgstr ""

#: ../../library/stdtypes.rst:4709
msgid ""
"Test whether the set is a proper superset of *other*, that is, ``set >= "
"other and set != other``."
msgstr ""

#: ../../library/stdtypes.rst:4715
msgid "Return a new set with elements from the set and all others."
msgstr ""

#: ../../library/stdtypes.rst:4720
msgid "Return a new set with elements common to the set and all others."
msgstr ""

#: ../../library/stdtypes.rst:4725
msgid "Return a new set with elements in the set that are not in the others."
msgstr ""

#: ../../library/stdtypes.rst:4730
msgid ""
"Return a new set with elements in either the set or *other* but not both."
msgstr ""

#: ../../library/stdtypes.rst:4734
msgid "Return a shallow copy of the set."
msgstr ""

#: ../../library/stdtypes.rst:4737
msgid ""
"Note, the non-operator versions of :meth:`union`, :meth:`intersection`, :"
"meth:`difference`, :meth:`symmetric_difference`, :meth:`issubset`, and :meth:"
"`issuperset` methods will accept any iterable as an argument.  In contrast, "
"their operator based counterparts require their arguments to be sets.  This "
"precludes error-prone constructions like ``set('abc') & 'cbs'`` in favor of "
"the more readable ``set('abc').intersection('cbs')``."
msgstr ""

#: ../../library/stdtypes.rst:4744
msgid ""
"Both :class:`set` and :class:`frozenset` support set to set comparisons. Two "
"sets are equal if and only if every element of each set is contained in the "
"other (each is a subset of the other). A set is less than another set if and "
"only if the first set is a proper subset of the second set (is a subset, but "
"is not equal). A set is greater than another set if and only if the first "
"set is a proper superset of the second set (is a superset, but is not equal)."
msgstr ""

#: ../../library/stdtypes.rst:4751
msgid ""
"Instances of :class:`set` are compared to instances of :class:`frozenset` "
"based on their members.  For example, ``set('abc') == frozenset('abc')`` "
"returns ``True`` and so does ``set('abc') in set([frozenset('abc')])``."
msgstr ""

#: ../../library/stdtypes.rst:4755
msgid ""
"The subset and equality comparisons do not generalize to a total ordering "
"function.  For example, any two nonempty disjoint sets are not equal and are "
"not subsets of each other, so *all* of the following return ``False``: "
"``a<b``, ``a==b``, or ``a>b``."
msgstr ""

#: ../../library/stdtypes.rst:4760
msgid ""
"Since sets only define partial ordering (subset relationships), the output "
"of the :meth:`list.sort` method is undefined for lists of sets."
msgstr ""

#: ../../library/stdtypes.rst:4763
msgid "Set elements, like dictionary keys, must be :term:`hashable`."
msgstr ""

#: ../../library/stdtypes.rst:4765
msgid ""
"Binary operations that mix :class:`set` instances with :class:`frozenset` "
"return the type of the first operand.  For example: ``frozenset('ab') | "
"set('bc')`` returns an instance of :class:`frozenset`."
msgstr ""

#: ../../library/stdtypes.rst:4769
msgid ""
"The following table lists operations available for :class:`set` that do not "
"apply to immutable instances of :class:`frozenset`:"
msgstr ""

#: ../../library/stdtypes.rst:4775
msgid "Update the set, adding elements from all others."
msgstr ""

#: ../../library/stdtypes.rst:4780
msgid "Update the set, keeping only elements found in it and all others."
msgstr ""

#: ../../library/stdtypes.rst:4785
msgid "Update the set, removing elements found in others."
msgstr ""

#: ../../library/stdtypes.rst:4790
msgid ""
"Update the set, keeping only elements found in either set, but not in both."
msgstr ""

#: ../../library/stdtypes.rst:4794
msgid "Add element *elem* to the set."
msgstr ""

#: ../../library/stdtypes.rst:4798
msgid ""
"Remove element *elem* from the set.  Raises :exc:`KeyError` if *elem* is not "
"contained in the set."
msgstr ""

#: ../../library/stdtypes.rst:4803
msgid "Remove element *elem* from the set if it is present."
msgstr ""

#: ../../library/stdtypes.rst:4807
msgid ""
"Remove and return an arbitrary element from the set.  Raises :exc:`KeyError` "
"if the set is empty."
msgstr ""

#: ../../library/stdtypes.rst:4812
msgid "Remove all elements from the set."
msgstr ""

#: ../../library/stdtypes.rst:4815
msgid ""
"Note, the non-operator versions of the :meth:`update`, :meth:"
"`intersection_update`, :meth:`difference_update`, and :meth:"
"`symmetric_difference_update` methods will accept any iterable as an "
"argument."
msgstr ""

#: ../../library/stdtypes.rst:4820
msgid ""
"Note, the *elem* argument to the :meth:`~object.__contains__`, :meth:"
"`remove`, and :meth:`discard` methods may be a set.  To support searching "
"for an equivalent frozenset, a temporary one is created from *elem*."
msgstr ""

#: ../../library/stdtypes.rst:4829
msgid "Mapping Types --- :class:`dict`"
msgstr ""

#: ../../library/stdtypes.rst:4839
msgid ""
"A :term:`mapping` object maps :term:`hashable` values to arbitrary objects. "
"Mappings are mutable objects.  There is currently only one standard mapping "
"type, the :dfn:`dictionary`.  (For other containers see the built-in :class:"
"`list`, :class:`set`, and :class:`tuple` classes, and the :mod:`collections` "
"module.)"
msgstr ""

#: ../../library/stdtypes.rst:4845
msgid ""
"A dictionary's keys are *almost* arbitrary values.  Values that are not :"
"term:`hashable`, that is, values containing lists, dictionaries or other "
"mutable types (that are compared by value rather than by object identity) "
"may not be used as keys. Values that compare equal (such as ``1``, ``1.0``, "
"and ``True``) can be used interchangeably to index the same dictionary entry."
msgstr ""

#: ../../library/stdtypes.rst:4856
msgid ""
"Return a new dictionary initialized from an optional positional argument and "
"a possibly empty set of keyword arguments."
msgstr ""

#: ../../library/stdtypes.rst:4859
msgid "Dictionaries can be created by several means:"
msgstr ""

#: ../../library/stdtypes.rst:4861
msgid ""
"Use a comma-separated list of ``key: value`` pairs within braces: ``{'jack': "
"4098, 'sjoerd': 4127}`` or ``{4098: 'jack', 4127: 'sjoerd'}``"
msgstr ""

#: ../../library/stdtypes.rst:4863
msgid "Use a dict comprehension: ``{}``, ``{x: x ** 2 for x in range(10)}``"
msgstr ""

#: ../../library/stdtypes.rst:4864
msgid ""
"Use the type constructor: ``dict()``, ``dict([('foo', 100), ('bar', "
"200)])``, ``dict(foo=100, bar=200)``"
msgstr ""

#: ../../library/stdtypes.rst:4867
msgid ""
"If no positional argument is given, an empty dictionary is created. If a "
"positional argument is given and it defines a ``keys()`` method, a "
"dictionary is created by calling :meth:`~object.__getitem__` on the argument "
"with each returned key from the method.  Otherwise, the positional argument "
"must be an :term:`iterable` object.  Each item in the iterable must itself "
"be an iterable with exactly two elements.  The first element of each item "
"becomes a key in the new dictionary, and the second element the "
"corresponding value.  If a key occurs more than once, the last value for "
"that key becomes the corresponding value in the new dictionary."
msgstr ""

#: ../../library/stdtypes.rst:4877
msgid ""
"If keyword arguments are given, the keyword arguments and their values are "
"added to the dictionary created from the positional argument.  If a key "
"being added is already present, the value from the keyword argument replaces "
"the value from the positional argument."
msgstr ""

#: ../../library/stdtypes.rst:4882 ../../library/stdtypes.rst:4900
msgid ""
"Providing keyword arguments as in the first example only works for keys that "
"are valid Python identifiers.  Otherwise, any valid keys can be used."
msgstr ""

#: ../../library/stdtypes.rst:4885
msgid ""
"Dictionaries compare equal if and only if they have the same ``(key, "
"value)`` pairs (regardless of ordering). Order comparisons ('<', '<=', '>=', "
"'>') raise :exc:`TypeError`.  To illustrate dictionary creation and "
"equality, the following examples all return a dictionary equal to "
"``{\"one\": 1, \"two\": 2, \"three\": 3}``::"
msgstr ""

#: ../../library/stdtypes.rst:4891
msgid ""
">>> a = dict(one=1, two=2, three=3)\n"
">>> b = {'one': 1, 'two': 2, 'three': 3}\n"
">>> c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))\n"
">>> d = dict([('two', 2), ('one', 1), ('three', 3)])\n"
">>> e = dict({'three': 3, 'one': 1, 'two': 2})\n"
">>> f = dict({'one': 1, 'three': 3}, two=2)\n"
">>> a == b == c == d == e == f\n"
"True"
msgstr ""

#: ../../library/stdtypes.rst:4903
msgid ""
"Dictionaries preserve insertion order.  Note that updating a key does not "
"affect the order.  Keys added after deletion are inserted at the end. ::"
msgstr ""

#: ../../library/stdtypes.rst:4906
msgid ""
">>> d = {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4}\n"
">>> d\n"
"{'one': 1, 'two': 2, 'three': 3, 'four': 4}\n"
">>> list(d)\n"
"['one', 'two', 'three', 'four']\n"
">>> list(d.values())\n"
"[1, 2, 3, 4]\n"
">>> d[\"one\"] = 42\n"
">>> d\n"
"{'one': 42, 'two': 2, 'three': 3, 'four': 4}\n"
">>> del d[\"two\"]\n"
">>> d[\"two\"] = None\n"
">>> d\n"
"{'one': 42, 'three': 3, 'four': 4, 'two': None}"
msgstr ""

#: ../../library/stdtypes.rst:4921
msgid ""
"Dictionary order is guaranteed to be insertion order.  This behavior was an "
"implementation detail of CPython from 3.6."
msgstr ""

#: ../../library/stdtypes.rst:4925
msgid ""
"These are the operations that dictionaries support (and therefore, custom "
"mapping types should support too):"
msgstr ""

#: ../../library/stdtypes.rst:4930
msgid "Return a list of all the keys used in the dictionary *d*."
msgstr ""

#: ../../library/stdtypes.rst:4934
msgid "Return the number of items in the dictionary *d*."
msgstr ""

#: ../../library/stdtypes.rst:4938
msgid ""
"Return the item of *d* with key *key*.  Raises a :exc:`KeyError` if *key* is "
"not in the map."
msgstr ""

#: ../../library/stdtypes.rst:4943
msgid ""
"If a subclass of dict defines a method :meth:`__missing__` and *key* is not "
"present, the ``d[key]`` operation calls that method with the key *key* as "
"argument.  The ``d[key]`` operation then returns or raises whatever is "
"returned or raised by the ``__missing__(key)`` call. No other operations or "
"methods invoke :meth:`__missing__`. If :meth:`__missing__` is not defined, :"
"exc:`KeyError` is raised. :meth:`__missing__` must be a method; it cannot be "
"an instance variable::"
msgstr ""

#: ../../library/stdtypes.rst:4951
msgid ""
">>> class Counter(dict):\n"
"...     def __missing__(self, key):\n"
"...         return 0\n"
"...\n"
">>> c = Counter()\n"
">>> c['red']\n"
"0\n"
">>> c['red'] += 1\n"
">>> c['red']\n"
"1"
msgstr ""

#: ../../library/stdtypes.rst:4962
msgid ""
"The example above shows part of the implementation of :class:`collections."
"Counter`.  A different ``__missing__`` method is used by :class:`collections."
"defaultdict`."
msgstr ""

#: ../../library/stdtypes.rst:4968
msgid "Set ``d[key]`` to *value*."
msgstr ""

#: ../../library/stdtypes.rst:4972
msgid ""
"Remove ``d[key]`` from *d*.  Raises a :exc:`KeyError` if *key* is not in the "
"map."
msgstr ""

#: ../../library/stdtypes.rst:4977
msgid "Return ``True`` if *d* has a key *key*, else ``False``."
msgstr ""

#: ../../library/stdtypes.rst:4981
msgid "Equivalent to ``not key in d``."
msgstr ""

#: ../../library/stdtypes.rst:4985
msgid ""
"Return an iterator over the keys of the dictionary.  This is a shortcut for "
"``iter(d.keys())``."
msgstr ""

#: ../../library/stdtypes.rst:4990
msgid "Remove all items from the dictionary."
msgstr ""

#: ../../library/stdtypes.rst:4994
msgid "Return a shallow copy of the dictionary."
msgstr ""

#: ../../library/stdtypes.rst:4998
msgid ""
"Create a new dictionary with keys from *iterable* and values set to *value*."
msgstr ""

#: ../../library/stdtypes.rst:5000
msgid ""
":meth:`fromkeys` is a class method that returns a new dictionary. *value* "
"defaults to ``None``.  All of the values refer to just a single instance, so "
"it generally doesn't make sense for *value* to be a mutable object such as "
"an empty list.  To get distinct values, use a :ref:`dict comprehension "
"<dict>` instead."
msgstr ""

#: ../../library/stdtypes.rst:5008
msgid ""
"Return the value for *key* if *key* is in the dictionary, else *default*. If "
"*default* is not given, it defaults to ``None``, so that this method never "
"raises a :exc:`KeyError`."
msgstr ""

#: ../../library/stdtypes.rst:5014
msgid ""
"Return a new view of the dictionary's items (``(key, value)`` pairs). See "
"the :ref:`documentation of view objects <dict-views>`."
msgstr ""

#: ../../library/stdtypes.rst:5019
msgid ""
"Return a new view of the dictionary's keys.  See the :ref:`documentation of "
"view objects <dict-views>`."
msgstr ""

#: ../../library/stdtypes.rst:5024
msgid ""
"If *key* is in the dictionary, remove it and return its value, else return "
"*default*.  If *default* is not given and *key* is not in the dictionary, a :"
"exc:`KeyError` is raised."
msgstr ""

#: ../../library/stdtypes.rst:5030
msgid ""
"Remove and return a ``(key, value)`` pair from the dictionary. Pairs are "
"returned in :abbr:`LIFO (last-in, first-out)` order."
msgstr ""

#: ../../library/stdtypes.rst:5033
msgid ""
":meth:`popitem` is useful to destructively iterate over a dictionary, as "
"often used in set algorithms.  If the dictionary is empty, calling :meth:"
"`popitem` raises a :exc:`KeyError`."
msgstr ""

#: ../../library/stdtypes.rst:5037
msgid ""
"LIFO order is now guaranteed. In prior versions, :meth:`popitem` would "
"return an arbitrary key/value pair."
msgstr ""

#: ../../library/stdtypes.rst:5043
msgid ""
"Return a reverse iterator over the keys of the dictionary. This is a "
"shortcut for ``reversed(d.keys())``."
msgstr ""

#: ../../library/stdtypes.rst:5050
msgid ""
"If *key* is in the dictionary, return its value.  If not, insert *key* with "
"a value of *default* and return *default*.  *default* defaults to ``None``."
msgstr ""

#: ../../library/stdtypes.rst:5056
msgid ""
"Update the dictionary with the key/value pairs from *other*, overwriting "
"existing keys.  Return ``None``."
msgstr ""

#: ../../library/stdtypes.rst:5059
msgid ""
":meth:`update` accepts either another object with a ``keys()`` method (in "
"which case :meth:`~object.__getitem__` is called with every key returned "
"from the method) or an iterable of key/value pairs (as tuples or other "
"iterables of length two). If keyword arguments are specified, the dictionary "
"is then updated with those key/value pairs: ``d.update(red=1, blue=2)``."
msgstr ""

#: ../../library/stdtypes.rst:5067
msgid ""
"Return a new view of the dictionary's values.  See the :ref:`documentation "
"of view objects <dict-views>`."
msgstr ""

#: ../../library/stdtypes.rst:5070
msgid ""
"An equality comparison between one ``dict.values()`` view and another will "
"always return ``False``. This also applies when comparing ``dict.values()`` "
"to itself::"
msgstr ""

#: ../../library/stdtypes.rst:5074
msgid ""
">>> d = {'a': 1}\n"
">>> d.values() == d.values()\n"
"False"
msgstr ""

#: ../../library/stdtypes.rst:5080
msgid ""
"Create a new dictionary with the merged keys and values of *d* and *other*, "
"which must both be dictionaries. The values of *other* take priority when "
"*d* and *other* share keys."
msgstr ""

#: ../../library/stdtypes.rst:5088
msgid ""
"Update the dictionary *d* with keys and values from *other*, which may be "
"either a :term:`mapping` or an :term:`iterable` of key/value pairs. The "
"values of *other* take priority when *d* and *other* share keys."
msgstr ""

#: ../../library/stdtypes.rst:5094
msgid "Dictionaries and dictionary views are reversible. ::"
msgstr ""

#: ../../library/stdtypes.rst:5096
msgid ""
">>> d = {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4}\n"
">>> d\n"
"{'one': 1, 'two': 2, 'three': 3, 'four': 4}\n"
">>> list(reversed(d))\n"
"['four', 'three', 'two', 'one']\n"
">>> list(reversed(d.values()))\n"
"[4, 3, 2, 1]\n"
">>> list(reversed(d.items()))\n"
"[('four', 4), ('three', 3), ('two', 2), ('one', 1)]"
msgstr ""

#: ../../library/stdtypes.rst:5106
msgid "Dictionaries are now reversible."
msgstr ""

#: ../../library/stdtypes.rst:5111
msgid ""
":class:`types.MappingProxyType` can be used to create a read-only view of a :"
"class:`dict`."
msgstr ""

#: ../../library/stdtypes.rst:5118
msgid "Dictionary view objects"
msgstr ""

#: ../../library/stdtypes.rst:5120
msgid ""
"The objects returned by :meth:`dict.keys`, :meth:`dict.values` and :meth:"
"`dict.items` are *view objects*.  They provide a dynamic view on the "
"dictionary's entries, which means that when the dictionary changes, the view "
"reflects these changes."
msgstr ""

#: ../../library/stdtypes.rst:5125
msgid ""
"Dictionary views can be iterated over to yield their respective data, and "
"support membership tests:"
msgstr ""

#: ../../library/stdtypes.rst:5130
msgid "Return the number of entries in the dictionary."
msgstr ""

#: ../../library/stdtypes.rst:5134
msgid ""
"Return an iterator over the keys, values or items (represented as tuples of "
"``(key, value)``) in the dictionary."
msgstr ""

#: ../../library/stdtypes.rst:5137
msgid ""
"Keys and values are iterated over in insertion order. This allows the "
"creation of ``(value, key)`` pairs using :func:`zip`: ``pairs = zip(d."
"values(), d.keys())``.  Another way to create the same list is ``pairs = "
"[(v, k) for (k, v) in d.items()]``."
msgstr ""

#: ../../library/stdtypes.rst:5142
msgid ""
"Iterating views while adding or deleting entries in the dictionary may raise "
"a :exc:`RuntimeError` or fail to iterate over all entries."
msgstr ""

#: ../../library/stdtypes.rst:5145
msgid "Dictionary order is guaranteed to be insertion order."
msgstr ""

#: ../../library/stdtypes.rst:5150
msgid ""
"Return ``True`` if *x* is in the underlying dictionary's keys, values or "
"items (in the latter case, *x* should be a ``(key, value)`` tuple)."
msgstr ""

#: ../../library/stdtypes.rst:5155
msgid ""
"Return a reverse iterator over the keys, values or items of the dictionary. "
"The view will be iterated in reverse order of the insertion."
msgstr ""

#: ../../library/stdtypes.rst:5158
msgid "Dictionary views are now reversible."
msgstr ""

#: ../../library/stdtypes.rst:5163
msgid ""
"Return a :class:`types.MappingProxyType` that wraps the original dictionary "
"to which the view refers."
msgstr ""

#: ../../library/stdtypes.rst:5168
msgid ""
"Keys views are set-like since their entries are unique and :term:`hashable`. "
"Items views also have set-like operations since the (key, value) pairs are "
"unique and the keys are hashable. If all values in an items view are "
"hashable as well, then the items view can interoperate with other sets. "
"(Values views are not treated as set-like since the entries are generally "
"not unique.)  For set-like views, all of the operations defined for the "
"abstract base class :class:`collections.abc.Set` are available (for example, "
"``==``, ``<``, or ``^``).  While using set operators, set-like views accept "
"any iterable as the other operand, unlike sets which only accept sets as the "
"input."
msgstr ""

#: ../../library/stdtypes.rst:5180
msgid "An example of dictionary view usage::"
msgstr ""

#: ../../library/stdtypes.rst:5182
msgid ""
">>> dishes = {'eggs': 2, 'sausage': 1, 'bacon': 1, 'spam': 500}\n"
">>> keys = dishes.keys()\n"
">>> values = dishes.values()\n"
"\n"
">>> # iteration\n"
">>> n = 0\n"
">>> for val in values:\n"
"...     n += val\n"
"...\n"
">>> print(n)\n"
"504\n"
"\n"
">>> # keys and values are iterated over in the same order (insertion order)\n"
">>> list(keys)\n"
"['eggs', 'sausage', 'bacon', 'spam']\n"
">>> list(values)\n"
"[2, 1, 1, 500]\n"
"\n"
">>> # view objects are dynamic and reflect dict changes\n"
">>> del dishes['eggs']\n"
">>> del dishes['sausage']\n"
">>> list(keys)\n"
"['bacon', 'spam']\n"
"\n"
">>> # set operations\n"
">>> keys & {'eggs', 'bacon', 'salad'}\n"
"{'bacon'}\n"
">>> keys ^ {'sausage', 'juice'} == {'juice', 'sausage', 'bacon', 'spam'}\n"
"True\n"
">>> keys | ['juice', 'juice', 'juice'] == {'bacon', 'spam', 'juice'}\n"
"True\n"
"\n"
">>> # get back a read-only proxy for the original dictionary\n"
">>> values.mapping\n"
"mappingproxy({'bacon': 1, 'spam': 500})\n"
">>> values.mapping['spam']\n"
"500"
msgstr ""

#: ../../library/stdtypes.rst:5224
msgid "Context Manager Types"
msgstr ""

#: ../../library/stdtypes.rst:5231
msgid ""
"Python's :keyword:`with` statement supports the concept of a runtime context "
"defined by a context manager.  This is implemented using a pair of methods "
"that allow user-defined classes to define a runtime context that is entered "
"before the statement body is executed and exited when the statement ends:"
msgstr ""

#: ../../library/stdtypes.rst:5239
msgid ""
"Enter the runtime context and return either this object or another object "
"related to the runtime context. The value returned by this method is bound "
"to the identifier in the :keyword:`!as` clause of :keyword:`with` statements "
"using this context manager."
msgstr ""

#: ../../library/stdtypes.rst:5244
msgid ""
"An example of a context manager that returns itself is a :term:`file "
"object`. File objects return themselves from __enter__() to allow :func:"
"`open` to be used as the context expression in a :keyword:`with` statement."
msgstr ""

#: ../../library/stdtypes.rst:5248
msgid ""
"An example of a context manager that returns a related object is the one "
"returned by :func:`decimal.localcontext`. These managers set the active "
"decimal context to a copy of the original decimal context and then return "
"the copy. This allows changes to be made to the current decimal context in "
"the body of the :keyword:`with` statement without affecting code outside "
"the :keyword:`!with` statement."
msgstr ""

#: ../../library/stdtypes.rst:5258
msgid ""
"Exit the runtime context and return a Boolean flag indicating if any "
"exception that occurred should be suppressed. If an exception occurred while "
"executing the body of the :keyword:`with` statement, the arguments contain "
"the exception type, value and traceback information. Otherwise, all three "
"arguments are ``None``."
msgstr ""

#: ../../library/stdtypes.rst:5263
msgid ""
"Returning a true value from this method will cause the :keyword:`with` "
"statement to suppress the exception and continue execution with the "
"statement immediately following the :keyword:`!with` statement. Otherwise "
"the exception continues propagating after this method has finished "
"executing. Exceptions that occur during execution of this method will "
"replace any exception that occurred in the body of the :keyword:`!with` "
"statement."
msgstr ""

#: ../../library/stdtypes.rst:5270
msgid ""
"The exception passed in should never be reraised explicitly - instead, this "
"method should return a false value to indicate that the method completed "
"successfully and does not want to suppress the raised exception. This allows "
"context management code to easily detect whether or not an :meth:`~object."
"__exit__` method has actually failed."
msgstr ""

#: ../../library/stdtypes.rst:5276
msgid ""
"Python defines several context managers to support easy thread "
"synchronisation, prompt closure of files or other objects, and simpler "
"manipulation of the active decimal arithmetic context. The specific types "
"are not treated specially beyond their implementation of the context "
"management protocol. See the :mod:`contextlib` module for some examples."
msgstr ""

#: ../../library/stdtypes.rst:5282
msgid ""
"Python's :term:`generator`\\s and the :class:`contextlib.contextmanager` "
"decorator provide a convenient way to implement these protocols.  If a "
"generator function is decorated with the :class:`contextlib.contextmanager` "
"decorator, it will return a context manager implementing the necessary :meth:"
"`~contextmanager.__enter__` and :meth:`~contextmanager.__exit__` methods, "
"rather than the iterator produced by an undecorated generator function."
msgstr ""

#: ../../library/stdtypes.rst:5289
msgid ""
"Note that there is no specific slot for any of these methods in the type "
"structure for Python objects in the Python/C API. Extension types wanting to "
"define these methods must provide them as a normal Python accessible method. "
"Compared to the overhead of setting up the runtime context, the overhead of "
"a single class dictionary lookup is negligible."
msgstr ""

#: ../../library/stdtypes.rst:5297
msgid ""
"Type Annotation Types --- :ref:`Generic Alias <types-genericalias>`, :ref:"
"`Union <types-union>`"
msgstr ""

#: ../../library/stdtypes.rst:5302
msgid ""
"The core built-in types for :term:`type annotations <annotation>` are :ref:"
"`Generic Alias <types-genericalias>` and :ref:`Union <types-union>`."
msgstr ""

#: ../../library/stdtypes.rst:5309
msgid "Generic Alias Type"
msgstr ""

#: ../../library/stdtypes.rst:5315
msgid ""
"``GenericAlias`` objects are generally created by :ref:`subscripting "
"<subscriptions>` a class. They are most often used with :ref:`container "
"classes <sequence-types>`, such as :class:`list` or :class:`dict`. For "
"example, ``list[int]`` is a ``GenericAlias`` object created by subscripting "
"the ``list`` class with the argument :class:`int`. ``GenericAlias`` objects "
"are intended primarily for use with :term:`type annotations <annotation>`."
msgstr ""

#: ../../library/stdtypes.rst:5325
msgid ""
"It is generally only possible to subscript a class if the class implements "
"the special method :meth:`~object.__class_getitem__`."
msgstr ""

#: ../../library/stdtypes.rst:5328
msgid ""
"A ``GenericAlias`` object acts as a proxy for a :term:`generic type`, "
"implementing *parameterized generics*."
msgstr ""

#: ../../library/stdtypes.rst:5331
msgid ""
"For a container class, the argument(s) supplied to a :ref:`subscription "
"<subscriptions>` of the class may indicate the type(s) of the elements an "
"object contains. For example, ``set[bytes]`` can be used in type annotations "
"to signify a :class:`set` in which all the elements are of type :class:"
"`bytes`."
msgstr ""

#: ../../library/stdtypes.rst:5337
msgid ""
"For a class which defines :meth:`~object.__class_getitem__` but is not a "
"container, the argument(s) supplied to a subscription of the class will "
"often indicate the return type(s) of one or more methods defined on an "
"object. For example, :mod:`regular expressions <re>` can be used on both "
"the :class:`str` data type and the :class:`bytes` data type:"
msgstr ""

#: ../../library/stdtypes.rst:5343
msgid ""
"If ``x = re.search('foo', 'foo')``, ``x`` will be a :ref:`re.Match <match-"
"objects>` object where the return values of ``x.group(0)`` and ``x[0]`` will "
"both be of type :class:`str`. We can represent this kind of object in type "
"annotations with the ``GenericAlias`` ``re.Match[str]``."
msgstr ""

#: ../../library/stdtypes.rst:5349
msgid ""
"If ``y = re.search(b'bar', b'bar')``, (note the ``b`` for :class:`bytes`), "
"``y`` will also be an instance of ``re.Match``, but the return values of ``y."
"group(0)`` and ``y[0]`` will both be of type :class:`bytes`. In type "
"annotations, we would represent this variety of :ref:`re.Match <match-"
"objects>` objects with ``re.Match[bytes]``."
msgstr ""

#: ../../library/stdtypes.rst:5355
msgid ""
"``GenericAlias`` objects are instances of the class :class:`types."
"GenericAlias`, which can also be used to create ``GenericAlias`` objects "
"directly."
msgstr ""

#: ../../library/stdtypes.rst:5361
msgid ""
"Creates a ``GenericAlias`` representing a type ``T`` parameterized by types "
"*X*, *Y*, and more depending on the ``T`` used. For example, a function "
"expecting a :class:`list` containing :class:`float` elements::"
msgstr ""

#: ../../library/stdtypes.rst:5366
msgid ""
"def average(values: list[float]) -> float:\n"
"    return sum(values) / len(values)"
msgstr ""

#: ../../library/stdtypes.rst:5369
msgid ""
"Another example for :term:`mapping` objects, using a :class:`dict`, which is "
"a generic type expecting two type parameters representing the key type and "
"the value type.  In this example, the function expects a ``dict`` with keys "
"of type :class:`str` and values of type :class:`int`::"
msgstr ""

#: ../../library/stdtypes.rst:5374
msgid ""
"def send_post_request(url: str, body: dict[str, int]) -> None:\n"
"    ..."
msgstr ""

#: ../../library/stdtypes.rst:5377
msgid ""
"The builtin functions :func:`isinstance` and :func:`issubclass` do not "
"accept ``GenericAlias`` types for their second argument::"
msgstr ""

#: ../../library/stdtypes.rst:5380
msgid ""
">>> isinstance([1, 2], list[str])\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: isinstance() argument 2 cannot be a parameterized generic"
msgstr ""

#: ../../library/stdtypes.rst:5385
msgid ""
"The Python runtime does not enforce :term:`type annotations <annotation>`. "
"This extends to generic types and their type parameters. When creating a "
"container object from a ``GenericAlias``, the elements in the container are "
"not checked against their type. For example, the following code is "
"discouraged, but will run without errors::"
msgstr ""

#: ../../library/stdtypes.rst:5391
msgid ""
">>> t = list[str]\n"
">>> t([1, 2, 3])\n"
"[1, 2, 3]"
msgstr ""

#: ../../library/stdtypes.rst:5395
msgid ""
"Furthermore, parameterized generics erase type parameters during object "
"creation::"
msgstr ""

#: ../../library/stdtypes.rst:5398
msgid ""
">>> t = list[str]\n"
">>> type(t)\n"
"<class 'types.GenericAlias'>\n"
"\n"
">>> l = t()\n"
">>> type(l)\n"
"<class 'list'>"
msgstr ""

#: ../../library/stdtypes.rst:5406
msgid ""
"Calling :func:`repr` or :func:`str` on a generic shows the parameterized "
"type::"
msgstr ""

#: ../../library/stdtypes.rst:5408
msgid ""
">>> repr(list[int])\n"
"'list[int]'\n"
"\n"
">>> str(list[int])\n"
"'list[int]'"
msgstr ""

#: ../../library/stdtypes.rst:5414
msgid ""
"The :meth:`~object.__getitem__` method of generic containers will raise an "
"exception to disallow mistakes like ``dict[str][str]``::"
msgstr ""

#: ../../library/stdtypes.rst:5417
msgid ""
">>> dict[str][str]\n"
"Traceback (most recent call last):\n"
"  ...\n"
"TypeError: dict[str] is not a generic class"
msgstr ""

#: ../../library/stdtypes.rst:5422
msgid ""
"However, such expressions are valid when :ref:`type variables <generics>` "
"are used.  The index must have as many elements as there are type variable "
"items in the ``GenericAlias`` object's :attr:`~genericalias.__args__`. ::"
msgstr ""

#: ../../library/stdtypes.rst:5426
msgid ""
">>> from typing import TypeVar\n"
">>> Y = TypeVar('Y')\n"
">>> dict[str, Y][int]\n"
"dict[str, int]"
msgstr ""

#: ../../library/stdtypes.rst:5433
msgid "Standard Generic Classes"
msgstr ""

#: ../../library/stdtypes.rst:5435
msgid ""
"The following standard library classes support parameterized generics. This "
"list is non-exhaustive."
msgstr ""

#: ../../library/stdtypes.rst:5438
msgid ":class:`tuple`"
msgstr ""

#: ../../library/stdtypes.rst:5439
msgid ":class:`list`"
msgstr ""

#: ../../library/stdtypes.rst:5440
msgid ":class:`dict`"
msgstr ""

#: ../../library/stdtypes.rst:5441
msgid ":class:`set`"
msgstr ""

#: ../../library/stdtypes.rst:5442
msgid ":class:`frozenset`"
msgstr ""

#: ../../library/stdtypes.rst:5443
msgid ":class:`type`"
msgstr ""

#: ../../library/stdtypes.rst:5444
msgid ":class:`asyncio.Future`"
msgstr ""

#: ../../library/stdtypes.rst:5445
msgid ":class:`asyncio.Task`"
msgstr ""

#: ../../library/stdtypes.rst:5446
msgid ":class:`collections.deque`"
msgstr ""

#: ../../library/stdtypes.rst:5447
msgid ":class:`collections.defaultdict`"
msgstr ""

#: ../../library/stdtypes.rst:5448
msgid ":class:`collections.OrderedDict`"
msgstr ""

#: ../../library/stdtypes.rst:5449
msgid ":class:`collections.Counter`"
msgstr ""

#: ../../library/stdtypes.rst:5450
msgid ":class:`collections.ChainMap`"
msgstr ""

#: ../../library/stdtypes.rst:5451
msgid ":class:`collections.abc.Awaitable`"
msgstr ""

#: ../../library/stdtypes.rst:5452
msgid ":class:`collections.abc.Coroutine`"
msgstr ""

#: ../../library/stdtypes.rst:5453
msgid ":class:`collections.abc.AsyncIterable`"
msgstr ""

#: ../../library/stdtypes.rst:5454
msgid ":class:`collections.abc.AsyncIterator`"
msgstr ""

#: ../../library/stdtypes.rst:5455
msgid ":class:`collections.abc.AsyncGenerator`"
msgstr ""

#: ../../library/stdtypes.rst:5456
msgid ":class:`collections.abc.Iterable`"
msgstr ""

#: ../../library/stdtypes.rst:5457
msgid ":class:`collections.abc.Iterator`"
msgstr ""

#: ../../library/stdtypes.rst:5458
msgid ":class:`collections.abc.Generator`"
msgstr ""

#: ../../library/stdtypes.rst:5459
msgid ":class:`collections.abc.Reversible`"
msgstr ""

#: ../../library/stdtypes.rst:5460
msgid ":class:`collections.abc.Container`"
msgstr ""

#: ../../library/stdtypes.rst:5461
msgid ":class:`collections.abc.Collection`"
msgstr ""

#: ../../library/stdtypes.rst:5462
msgid ":class:`collections.abc.Callable`"
msgstr ""

#: ../../library/stdtypes.rst:5463
msgid ":class:`collections.abc.Set`"
msgstr ""

#: ../../library/stdtypes.rst:5464
msgid ":class:`collections.abc.MutableSet`"
msgstr ""

#: ../../library/stdtypes.rst:5465
msgid ":class:`collections.abc.Mapping`"
msgstr ""

#: ../../library/stdtypes.rst:5466
msgid ":class:`collections.abc.MutableMapping`"
msgstr ""

#: ../../library/stdtypes.rst:5467
msgid ":class:`collections.abc.Sequence`"
msgstr ""

#: ../../library/stdtypes.rst:5468
msgid ":class:`collections.abc.MutableSequence`"
msgstr ""

#: ../../library/stdtypes.rst:5469
msgid ":class:`collections.abc.MappingView`"
msgstr ""

#: ../../library/stdtypes.rst:5470
msgid ":class:`collections.abc.KeysView`"
msgstr ""

#: ../../library/stdtypes.rst:5471
msgid ":class:`collections.abc.ItemsView`"
msgstr ""

#: ../../library/stdtypes.rst:5472
msgid ":class:`collections.abc.ValuesView`"
msgstr ""

#: ../../library/stdtypes.rst:5473
msgid ":class:`contextlib.AbstractContextManager`"
msgstr ""

#: ../../library/stdtypes.rst:5474
msgid ":class:`contextlib.AbstractAsyncContextManager`"
msgstr ""

#: ../../library/stdtypes.rst:5475
msgid ":class:`dataclasses.Field`"
msgstr ""

#: ../../library/stdtypes.rst:5476
msgid ":class:`functools.cached_property`"
msgstr ""

#: ../../library/stdtypes.rst:5477
msgid ":class:`functools.partialmethod`"
msgstr ""

#: ../../library/stdtypes.rst:5478
msgid ":class:`os.PathLike`"
msgstr ""

#: ../../library/stdtypes.rst:5479
msgid ":class:`queue.LifoQueue`"
msgstr ""

#: ../../library/stdtypes.rst:5480
msgid ":class:`queue.Queue`"
msgstr ""

#: ../../library/stdtypes.rst:5481
msgid ":class:`queue.PriorityQueue`"
msgstr ""

#: ../../library/stdtypes.rst:5482
msgid ":class:`queue.SimpleQueue`"
msgstr ""

#: ../../library/stdtypes.rst:5483
msgid ":ref:`re.Pattern <re-objects>`"
msgstr ""

#: ../../library/stdtypes.rst:5484
msgid ":ref:`re.Match <match-objects>`"
msgstr ""

#: ../../library/stdtypes.rst:5485
msgid ":class:`shelve.BsdDbShelf`"
msgstr ""

#: ../../library/stdtypes.rst:5486
msgid ":class:`shelve.DbfilenameShelf`"
msgstr ""

#: ../../library/stdtypes.rst:5487
msgid ":class:`shelve.Shelf`"
msgstr ""

#: ../../library/stdtypes.rst:5488
msgid ":class:`types.MappingProxyType`"
msgstr ""

#: ../../library/stdtypes.rst:5489
msgid ":class:`weakref.WeakKeyDictionary`"
msgstr ""

#: ../../library/stdtypes.rst:5490
msgid ":class:`weakref.WeakMethod`"
msgstr ""

#: ../../library/stdtypes.rst:5491
msgid ":class:`weakref.WeakSet`"
msgstr ""

#: ../../library/stdtypes.rst:5492
msgid ":class:`weakref.WeakValueDictionary`"
msgstr ""

#: ../../library/stdtypes.rst:5497
msgid "Special Attributes of ``GenericAlias`` objects"
msgstr ""

#: ../../library/stdtypes.rst:5499
msgid "All parameterized generics implement special read-only attributes."
msgstr ""

#: ../../library/stdtypes.rst:5503
msgid "This attribute points at the non-parameterized generic class::"
msgstr ""

#: ../../library/stdtypes.rst:5505
msgid ""
">>> list[int].__origin__\n"
"<class 'list'>"
msgstr ""

#: ../../library/stdtypes.rst:5511
msgid ""
"This attribute is a :class:`tuple` (possibly of length 1) of generic types "
"passed to the original :meth:`~object.__class_getitem__` of the generic "
"class::"
msgstr ""

#: ../../library/stdtypes.rst:5515
msgid ""
">>> dict[str, list[int]].__args__\n"
"(<class 'str'>, list[int])"
msgstr ""

#: ../../library/stdtypes.rst:5521
msgid ""
"This attribute is a lazily computed tuple (possibly empty) of unique type "
"variables found in ``__args__``::"
msgstr ""

#: ../../library/stdtypes.rst:5524
msgid ""
">>> from typing import TypeVar\n"
"\n"
">>> T = TypeVar('T')\n"
">>> list[T].__parameters__\n"
"(~T,)"
msgstr ""

#: ../../library/stdtypes.rst:5532
msgid ""
"A ``GenericAlias`` object with :class:`typing.ParamSpec` parameters may not "
"have correct ``__parameters__`` after substitution because :class:`typing."
"ParamSpec` is intended primarily for static type checking."
msgstr ""

#: ../../library/stdtypes.rst:5539
msgid ""
"A boolean that is true if the alias has been unpacked using the ``*`` "
"operator (see :data:`~typing.TypeVarTuple`)."
msgstr ""

#: ../../library/stdtypes.rst:5547
msgid ":pep:`484` - Type Hints"
msgstr ""

#: ../../library/stdtypes.rst:5548
msgid "Introducing Python's framework for type annotations."
msgstr ""

#: ../../library/stdtypes.rst:5550
msgid ":pep:`585` - Type Hinting Generics In Standard Collections"
msgstr ""

#: ../../library/stdtypes.rst:5551
msgid ""
"Introducing the ability to natively parameterize standard-library classes, "
"provided they implement the special class method :meth:`~object."
"__class_getitem__`."
msgstr ""

#: ../../library/stdtypes.rst:5555
msgid ""
":ref:`Generics`, :ref:`user-defined generics <user-defined-generics>` and :"
"class:`typing.Generic`"
msgstr ""

#: ../../library/stdtypes.rst:5556
msgid ""
"Documentation on how to implement generic classes that can be parameterized "
"at runtime and understood by static type-checkers."
msgstr ""

#: ../../library/stdtypes.rst:5565
msgid "Union Type"
msgstr ""

#: ../../library/stdtypes.rst:5571
msgid ""
"A union object holds the value of the ``|`` (bitwise or) operation on "
"multiple :ref:`type objects <bltin-type-objects>`.  These types are intended "
"primarily for :term:`type annotations <annotation>`. The union type "
"expression enables cleaner type hinting syntax compared to subscripting :"
"class:`typing.Union`."
msgstr ""

#: ../../library/stdtypes.rst:5578
msgid ""
"Defines a union object which holds types *X*, *Y*, and so forth. ``X | Y`` "
"means either X or Y.  It is equivalent to ``typing.Union[X, Y]``. For "
"example, the following function expects an argument of type :class:`int` or :"
"class:`float`::"
msgstr ""

#: ../../library/stdtypes.rst:5583
msgid ""
"def square(number: int | float) -> int | float:\n"
"    return number ** 2"
msgstr ""

#: ../../library/stdtypes.rst:5588
msgid ""
"The ``|`` operand cannot be used at runtime to define unions where one or "
"more members is a forward reference. For example, ``int | \"Foo\"``, where "
"``\"Foo\"`` is a reference to a class not yet defined, will fail at runtime. "
"For unions which include forward references, present the whole expression as "
"a string, e.g. ``\"int | Foo\"``."
msgstr ""

#: ../../library/stdtypes.rst:5596
msgid ""
"Union objects can be tested for equality with other union objects.  Details:"
msgstr ""

#: ../../library/stdtypes.rst:5598
msgid "Unions of unions are flattened::"
msgstr ""

#: ../../library/stdtypes.rst:5600
msgid "(int | str) | float == int | str | float"
msgstr ""

#: ../../library/stdtypes.rst:5602
msgid "Redundant types are removed::"
msgstr ""

#: ../../library/stdtypes.rst:5604
msgid "int | str | int == int | str"
msgstr ""

#: ../../library/stdtypes.rst:5606
msgid "When comparing unions, the order is ignored::"
msgstr ""

#: ../../library/stdtypes.rst:5608
msgid "int | str == str | int"
msgstr ""

#: ../../library/stdtypes.rst:5610
msgid "It creates instances of :class:`typing.Union`::"
msgstr ""

#: ../../library/stdtypes.rst:5612
msgid ""
"int | str == typing.Union[int, str]\n"
"type(int | str) is typing.Union"
msgstr ""

#: ../../library/stdtypes.rst:5615
msgid "Optional types can be spelled as a union with ``None``::"
msgstr ""

#: ../../library/stdtypes.rst:5617
msgid "str | None == typing.Optional[str]"
msgstr ""

#: ../../library/stdtypes.rst:5622
msgid ""
"Calls to :func:`isinstance` and :func:`issubclass` are also supported with a "
"union object::"
msgstr ""

#: ../../library/stdtypes.rst:5625
msgid ""
">>> isinstance(\"\", int | str)\n"
"True"
msgstr ""

#: ../../library/stdtypes.rst:5628
msgid ""
"However, :ref:`parameterized generics <types-genericalias>` in union objects "
"cannot be checked::"
msgstr ""

#: ../../library/stdtypes.rst:5631
msgid ""
">>> isinstance(1, int | list[int])  # short-circuit evaluation\n"
"True\n"
">>> isinstance([1], int | list[int])\n"
"Traceback (most recent call last):\n"
"  ...\n"
"TypeError: isinstance() argument 2 cannot be a parameterized generic"
msgstr ""

#: ../../library/stdtypes.rst:5638
msgid ""
"The user-exposed type for the union object can be accessed from :class:"
"`typing.Union` and used for :func:`isinstance` checks::"
msgstr ""

#: ../../library/stdtypes.rst:5641
msgid ""
">>> import typing\n"
">>> isinstance(int | str, typing.Union)\n"
"True\n"
">>> typing.Union()\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: cannot create 'typing.Union' instances"
msgstr ""

#: ../../library/stdtypes.rst:5650
msgid ""
"The :meth:`!__or__` method for type objects was added to support the syntax "
"``X | Y``.  If a metaclass implements :meth:`!__or__`, the Union may "
"override it:"
msgstr ""

#: ../../library/stdtypes.rst:5654
msgid ""
">>> class M(type):\n"
"...     def __or__(self, other):\n"
"...         return \"Hello\"\n"
"...\n"
">>> class C(metaclass=M):\n"
"...     pass\n"
"...\n"
">>> C | int\n"
"'Hello'\n"
">>> int | C\n"
"int | C"
msgstr ""

#: ../../library/stdtypes.rst:5670
msgid ":pep:`604` -- PEP proposing the ``X | Y`` syntax and the Union type."
msgstr ""

#: ../../library/stdtypes.rst:5676
msgid ""
"Union objects are now instances of :class:`typing.Union`. Previously, they "
"were instances of :class:`types.UnionType`, which remains an alias for :"
"class:`typing.Union`."
msgstr ""

#: ../../library/stdtypes.rst:5683
msgid "Other Built-in Types"
msgstr ""

#: ../../library/stdtypes.rst:5685
msgid ""
"The interpreter supports several other kinds of objects. Most of these "
"support only one or two operations."
msgstr ""

#: ../../library/stdtypes.rst:5692
msgid "Modules"
msgstr ""

#: ../../library/stdtypes.rst:5694
msgid ""
"The only special operation on a module is attribute access: ``m.name``, "
"where *m* is a module and *name* accesses a name defined in *m*'s symbol "
"table. Module attributes can be assigned to.  (Note that the :keyword:"
"`import` statement is not, strictly speaking, an operation on a module "
"object; ``import foo`` does not require a module object named *foo* to "
"exist, rather it requires an (external) *definition* for a module named "
"*foo* somewhere.)"
msgstr ""

#: ../../library/stdtypes.rst:5701
msgid ""
"A special attribute of every module is :attr:`~object.__dict__`. This is the "
"dictionary containing the module's symbol table. Modifying this dictionary "
"will actually change the module's symbol table, but direct assignment to "
"the :attr:`~object.__dict__` attribute is not possible (you can write ``m."
"__dict__['a'] = 1``, which defines ``m.a`` to be ``1``, but you can't write "
"``m.__dict__ = {}``).  Modifying :attr:`~object.__dict__` directly is not "
"recommended."
msgstr ""

#: ../../library/stdtypes.rst:5709
msgid ""
"Modules built into the interpreter are written like this: ``<module "
"'sys' (built-in)>``.  If loaded from a file, they are written as ``<module "
"'os' from '/usr/local/lib/pythonX.Y/os.pyc'>``."
msgstr ""

#: ../../library/stdtypes.rst:5717
msgid "Classes and Class Instances"
msgstr ""

#: ../../library/stdtypes.rst:5719
msgid "See :ref:`objects` and :ref:`class` for these."
msgstr ""

#: ../../library/stdtypes.rst:5725
msgid "Functions"
msgstr "Funções"

#: ../../library/stdtypes.rst:5727
msgid ""
"Function objects are created by function definitions.  The only operation on "
"a function object is to call it: ``func(argument-list)``."
msgstr ""

#: ../../library/stdtypes.rst:5730
msgid ""
"There are really two flavors of function objects: built-in functions and "
"user-defined functions.  Both support the same operation (to call the "
"function), but the implementation is different, hence the different object "
"types."
msgstr ""

#: ../../library/stdtypes.rst:5734
msgid "See :ref:`function` for more information."
msgstr ""

#: ../../library/stdtypes.rst:5740
msgid "Methods"
msgstr "Métodos"

#: ../../library/stdtypes.rst:5744
msgid ""
"Methods are functions that are called using the attribute notation. There "
"are two flavors: :ref:`built-in methods <builtin-methods>` (such as :meth:"
"`append` on lists) and :ref:`class instance method <instance-methods>`. "
"Built-in methods are described with the types that support them."
msgstr ""

#: ../../library/stdtypes.rst:5749
msgid ""
"If you access a method (a function defined in a class namespace) through an "
"instance, you get a special object: a :dfn:`bound method` (also called :ref:"
"`instance method <instance-methods>`) object. When called, it will add the "
"``self`` argument to the argument list.  Bound methods have two special read-"
"only attributes: :attr:`m.__self__ <method.__self__>` is the object on which "
"the method operates, and :attr:`m.__func__ <method.__func__>` is the "
"function implementing the method.  Calling ``m(arg-1, arg-2, ..., arg-n)`` "
"is completely equivalent to calling ``m.__func__(m.__self__, arg-1, "
"arg-2, ..., arg-n)``."
msgstr ""

#: ../../library/stdtypes.rst:5760
msgid ""
"Like :ref:`function objects <user-defined-funcs>`, bound method objects "
"support getting arbitrary attributes.  However, since method attributes are "
"actually stored on the underlying function object (:attr:`method.__func__`), "
"setting method attributes on bound methods is disallowed.  Attempting to set "
"an attribute on a method results in an :exc:`AttributeError` being raised.  "
"In order to set a method attribute, you need to explicitly set it on the "
"underlying function object:"
msgstr ""

#: ../../library/stdtypes.rst:5768
msgid ""
">>> class C:\n"
"...     def method(self):\n"
"...         pass\n"
"...\n"
">>> c = C()\n"
">>> c.method.whoami = 'my name is method'  # can't set on the method\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"AttributeError: 'method' object has no attribute 'whoami'\n"
">>> c.method.__func__.whoami = 'my name is method'\n"
">>> c.method.whoami\n"
"'my name is method'"
msgstr ""

#: ../../library/stdtypes.rst:5783
msgid "See :ref:`instance-methods` for more information."
msgstr ""

#: ../../library/stdtypes.rst:5791
msgid "Code Objects"
msgstr "Objetos código"

#: ../../library/stdtypes.rst:5797
msgid ""
"Code objects are used by the implementation to represent \"pseudo-compiled\" "
"executable Python code such as a function body. They differ from function "
"objects because they don't contain a reference to their global execution "
"environment.  Code objects are returned by the built-in :func:`compile` "
"function and can be extracted from function objects through their :attr:"
"`~function.__code__` attribute. See also the :mod:`code` module."
msgstr ""

#: ../../library/stdtypes.rst:5804
msgid ""
"Accessing :attr:`~function.__code__` raises an :ref:`auditing event "
"<auditing>` ``object.__getattr__`` with arguments ``obj`` and "
"``\"__code__\"``."
msgstr ""

#: ../../library/stdtypes.rst:5811
msgid ""
"A code object can be executed or evaluated by passing it (instead of a "
"source string) to the :func:`exec` or :func:`eval`  built-in functions."
msgstr ""

#: ../../library/stdtypes.rst:5814
msgid "See :ref:`types` for more information."
msgstr ""

#: ../../library/stdtypes.rst:5820
msgid "Type Objects"
msgstr ""

#: ../../library/stdtypes.rst:5826
msgid ""
"Type objects represent the various object types.  An object's type is "
"accessed by the built-in function :func:`type`.  There are no special "
"operations on types.  The standard module :mod:`types` defines names for all "
"standard built-in types."
msgstr ""

#: ../../library/stdtypes.rst:5831
msgid "Types are written like this: ``<class 'int'>``."
msgstr ""

#: ../../library/stdtypes.rst:5837
msgid "The Null Object"
msgstr ""

#: ../../library/stdtypes.rst:5839
msgid ""
"This object is returned by functions that don't explicitly return a value.  "
"It supports no special operations.  There is exactly one null object, named "
"``None`` (a built-in name).  ``type(None)()`` produces the same singleton."
msgstr ""

#: ../../library/stdtypes.rst:5843
msgid "It is written as ``None``."
msgstr ""

#: ../../library/stdtypes.rst:5850
msgid "The Ellipsis Object"
msgstr ""

#: ../../library/stdtypes.rst:5852
msgid ""
"This object is commonly used by slicing (see :ref:`slicings`).  It supports "
"no special operations.  There is exactly one ellipsis object, named :const:"
"`Ellipsis` (a built-in name).  ``type(Ellipsis)()`` produces the :const:"
"`Ellipsis` singleton."
msgstr ""

#: ../../library/stdtypes.rst:5857
msgid "It is written as ``Ellipsis`` or ``...``."
msgstr ""

#: ../../library/stdtypes.rst:5863
msgid "The NotImplemented Object"
msgstr ""

#: ../../library/stdtypes.rst:5865
msgid ""
"This object is returned from comparisons and binary operations when they are "
"asked to operate on types they don't support. See :ref:`comparisons` for "
"more information.  There is exactly one :data:`NotImplemented` object. :code:"
"`type(NotImplemented)()` produces the singleton instance."
msgstr ""

#: ../../library/stdtypes.rst:5870
msgid "It is written as :code:`NotImplemented`."
msgstr ""

#: ../../library/stdtypes.rst:5876
msgid "Internal Objects"
msgstr ""

#: ../../library/stdtypes.rst:5878
msgid ""
"See :ref:`types` for this information.  It describes :ref:`stack frame "
"objects <frame-objects>`, :ref:`traceback objects <traceback-objects>`, and "
"slice objects."
msgstr ""

#: ../../library/stdtypes.rst:5886
msgid "Special Attributes"
msgstr ""

#: ../../library/stdtypes.rst:5888
msgid ""
"The implementation adds a few special read-only attributes to several object "
"types, where they are relevant.  Some of these are not reported by the :func:"
"`dir` built-in function."
msgstr ""

#: ../../library/stdtypes.rst:5895
msgid ""
"The name of the class, function, method, descriptor, or generator instance."
msgstr ""

#: ../../library/stdtypes.rst:5901
msgid ""
"The :term:`qualified name` of the class, function, method, descriptor, or "
"generator instance."
msgstr ""

#: ../../library/stdtypes.rst:5909
msgid "The name of the module in which a class or function was defined."
msgstr ""

#: ../../library/stdtypes.rst:5914
msgid ""
"The documentation string of a class or function, or ``None`` if undefined."
msgstr ""

#: ../../library/stdtypes.rst:5919
msgid ""
"The :ref:`type parameters <type-params>` of generic classes, functions, and :"
"ref:`type aliases <type-aliases>`. For classes and functions that are not "
"generic, this will be an empty tuple."
msgstr ""

#: ../../library/stdtypes.rst:5929
msgid "Integer string conversion length limitation"
msgstr ""

#: ../../library/stdtypes.rst:5931
msgid ""
"CPython has a global limit for converting between :class:`int` and :class:"
"`str` to mitigate denial of service attacks. This limit *only* applies to "
"decimal or other non-power-of-two number bases. Hexadecimal, octal, and "
"binary conversions are unlimited. The limit can be configured."
msgstr ""

#: ../../library/stdtypes.rst:5936
msgid ""
"The :class:`int` type in CPython is an arbitrary length number stored in "
"binary form (commonly known as a \"bignum\"). There exists no algorithm that "
"can convert a string to a binary integer or a binary integer to a string in "
"linear time, *unless* the base is a power of 2. Even the best known "
"algorithms for base 10 have sub-quadratic complexity. Converting a large "
"value such as ``int('1' * 500_000)`` can take over a second on a fast CPU."
msgstr ""

#: ../../library/stdtypes.rst:5943
msgid ""
"Limiting conversion size offers a practical way to avoid :cve:`2020-10735`."
msgstr ""

#: ../../library/stdtypes.rst:5945
msgid ""
"The limit is applied to the number of digit characters in the input or "
"output string when a non-linear conversion algorithm would be involved.  "
"Underscores and the sign are not counted towards the limit."
msgstr ""

#: ../../library/stdtypes.rst:5949
msgid ""
"When an operation would exceed the limit, a :exc:`ValueError` is raised:"
msgstr ""

#: ../../library/stdtypes.rst:5951
msgid ""
">>> import sys\n"
">>> sys.set_int_max_str_digits(4300)  # Illustrative, this is the default.\n"
">>> _ = int('2' * 5432)\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: Exceeds the limit (4300 digits) for integer string conversion: "
"value has 5432 digits; use sys.set_int_max_str_digits() to increase the "
"limit\n"
">>> i = int('2' * 4300)\n"
">>> len(str(i))\n"
"4300\n"
">>> i_squared = i*i\n"
">>> len(str(i_squared))\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: Exceeds the limit (4300 digits) for integer string conversion; "
"use sys.set_int_max_str_digits() to increase the limit\n"
">>> len(hex(i_squared))\n"
"7144\n"
">>> assert int(hex(i_squared), base=16) == i*i  # Hexadecimal is unlimited."
msgstr ""

#: ../../library/stdtypes.rst:5971
msgid ""
"The default limit is 4300 digits as provided in :data:`sys.int_info."
"default_max_str_digits <sys.int_info>`. The lowest limit that can be "
"configured is 640 digits as provided in :data:`sys.int_info."
"str_digits_check_threshold <sys.int_info>`."
msgstr ""

#: ../../library/stdtypes.rst:5976
msgid "Verification:"
msgstr ""

#: ../../library/stdtypes.rst:5978
msgid ""
">>> import sys\n"
">>> assert sys.int_info.default_max_str_digits == 4300, sys.int_info\n"
">>> assert sys.int_info.str_digits_check_threshold == 640, sys.int_info\n"
">>> msg = int('578966293710682886880994035146873798396722250538762761564'\n"
"...           '9252925514383915483333812743580549779436104706260696366600'\n"
"...           '571186405732').to_bytes(53, 'big')\n"
"..."
msgstr ""

#: ../../library/stdtypes.rst:5991
msgid "Affected APIs"
msgstr ""

#: ../../library/stdtypes.rst:5993
msgid ""
"The limitation only applies to potentially slow conversions between :class:"
"`int` and :class:`str` or :class:`bytes`:"
msgstr ""

#: ../../library/stdtypes.rst:5996
msgid "``int(string)`` with default base 10."
msgstr ""

#: ../../library/stdtypes.rst:5997
msgid "``int(string, base)`` for all bases that are not a power of 2."
msgstr ""

#: ../../library/stdtypes.rst:5998
msgid "``str(integer)``."
msgstr ""

#: ../../library/stdtypes.rst:5999
msgid "``repr(integer)``."
msgstr ""

#: ../../library/stdtypes.rst:6000
msgid ""
"any other string conversion to base 10, for example ``f\"{integer}\"``, "
"``\"{}\".format(integer)``, or ``b\"%d\" % integer``."
msgstr ""

#: ../../library/stdtypes.rst:6003
msgid "The limitations do not apply to functions with a linear algorithm:"
msgstr ""

#: ../../library/stdtypes.rst:6005
msgid "``int(string, base)`` with base 2, 4, 8, 16, or 32."
msgstr ""

#: ../../library/stdtypes.rst:6006
msgid ":func:`int.from_bytes` and :func:`int.to_bytes`."
msgstr ""

#: ../../library/stdtypes.rst:6007
msgid ":func:`hex`, :func:`oct`, :func:`bin`."
msgstr ""

#: ../../library/stdtypes.rst:6008
msgid ":ref:`formatspec` for hex, octal, and binary numbers."
msgstr ""

#: ../../library/stdtypes.rst:6009
msgid ":class:`str` to :class:`float`."
msgstr ""

#: ../../library/stdtypes.rst:6010
msgid ":class:`str` to :class:`decimal.Decimal`."
msgstr ""

#: ../../library/stdtypes.rst:6013
msgid "Configuring the limit"
msgstr ""

#: ../../library/stdtypes.rst:6015
msgid ""
"Before Python starts up you can use an environment variable or an "
"interpreter command line flag to configure the limit:"
msgstr ""

#: ../../library/stdtypes.rst:6018
msgid ""
":envvar:`PYTHONINTMAXSTRDIGITS`, e.g. ``PYTHONINTMAXSTRDIGITS=640 python3`` "
"to set the limit to 640 or ``PYTHONINTMAXSTRDIGITS=0 python3`` to disable "
"the limitation."
msgstr ""

#: ../../library/stdtypes.rst:6021
msgid ""
":option:`-X int_max_str_digits <-X>`, e.g. ``python3 -X "
"int_max_str_digits=640``"
msgstr ""

#: ../../library/stdtypes.rst:6023
msgid ""
":data:`sys.flags.int_max_str_digits` contains the value of :envvar:"
"`PYTHONINTMAXSTRDIGITS` or :option:`-X int_max_str_digits <-X>`. If both the "
"env var and the ``-X`` option are set, the ``-X`` option takes precedence. A "
"value of *-1* indicates that both were unset, thus a value of :data:`sys."
"int_info.default_max_str_digits` was used during initialization."
msgstr ""

#: ../../library/stdtypes.rst:6029
msgid ""
"From code, you can inspect the current limit and set a new one using these :"
"mod:`sys` APIs:"
msgstr ""

#: ../../library/stdtypes.rst:6032
msgid ""
":func:`sys.get_int_max_str_digits` and :func:`sys.set_int_max_str_digits` "
"are a getter and setter for the interpreter-wide limit. Subinterpreters have "
"their own limit."
msgstr ""

#: ../../library/stdtypes.rst:6036
msgid ""
"Information about the default and minimum can be found in :data:`sys."
"int_info`:"
msgstr ""

#: ../../library/stdtypes.rst:6038
msgid ""
":data:`sys.int_info.default_max_str_digits <sys.int_info>` is the compiled-"
"in default limit."
msgstr ""

#: ../../library/stdtypes.rst:6040
msgid ""
":data:`sys.int_info.str_digits_check_threshold <sys.int_info>` is the lowest "
"accepted value for the limit (other than 0 which disables it)."
msgstr ""

#: ../../library/stdtypes.rst:6047
msgid ""
"Setting a low limit *can* lead to problems. While rare, code exists that "
"contains integer constants in decimal in their source that exceed the "
"minimum threshold. A consequence of setting the limit is that Python source "
"code containing decimal integer literals longer than the limit will "
"encounter an error during parsing, usually at startup time or import time or "
"even at installation time - anytime an up to date ``.pyc`` does not already "
"exist for the code. A workaround for source that contains such large "
"constants is to convert them to ``0x`` hexadecimal form as it has no limit."
msgstr ""

#: ../../library/stdtypes.rst:6056
msgid ""
"Test your application thoroughly if you use a low limit. Ensure your tests "
"run with the limit set early via the environment or flag so that it applies "
"during startup and even during any installation step that may invoke Python "
"to precompile ``.py`` sources to ``.pyc`` files."
msgstr ""

#: ../../library/stdtypes.rst:6062
msgid "Recommended configuration"
msgstr ""

#: ../../library/stdtypes.rst:6064
msgid ""
"The default :data:`sys.int_info.default_max_str_digits` is expected to be "
"reasonable for most applications. If your application requires a different "
"limit, set it from your main entry point using Python version agnostic code "
"as these APIs were added in security patch releases in versions before 3.12."
msgstr ""

#: ../../library/stdtypes.rst:6069
msgid "Example::"
msgstr "Exemplo::"

#: ../../library/stdtypes.rst:6071
msgid ""
">>> import sys\n"
">>> if hasattr(sys, \"set_int_max_str_digits\"):\n"
"...     upper_bound = 68000\n"
"...     lower_bound = 4004\n"
"...     current_limit = sys.get_int_max_str_digits()\n"
"...     if current_limit == 0 or current_limit > upper_bound:\n"
"...         sys.set_int_max_str_digits(upper_bound)\n"
"...     elif current_limit < lower_bound:\n"
"...         sys.set_int_max_str_digits(lower_bound)"
msgstr ""

#: ../../library/stdtypes.rst:6081
msgid "If you need to disable it entirely, set it to ``0``."
msgstr ""

#: ../../library/stdtypes.rst:6085
msgid "Footnotes"
msgstr ""

#: ../../library/stdtypes.rst:6086
msgid ""
"Additional information on these special methods may be found in the Python "
"Reference Manual (:ref:`customization`)."
msgstr ""

#: ../../library/stdtypes.rst:6089
msgid ""
"As a consequence, the list ``[1, 2]`` is considered equal to ``[1.0, 2.0]``, "
"and similarly for tuples."
msgstr ""

#: ../../library/stdtypes.rst:6092
msgid "They must have since the parser can't tell the type of the operands."
msgstr ""

#: ../../library/stdtypes.rst:6094
msgid ""
"Cased characters are those with general category property being one of "
"\"Lu\" (Letter, uppercase), \"Ll\" (Letter, lowercase), or \"Lt\" (Letter, "
"titlecase)."
msgstr ""

#: ../../library/stdtypes.rst:6097
msgid ""
"To format only a tuple you should therefore provide a singleton tuple whose "
"only element is the tuple to be formatted."
msgstr ""

#: ../../library/stdtypes.rst:13
msgid "built-in"
msgstr ""

#: ../../library/stdtypes.rst:13 ../../library/stdtypes.rst:322
#: ../../library/stdtypes.rst:399 ../../library/stdtypes.rst:992
#: ../../library/stdtypes.rst:1162 ../../library/stdtypes.rst:1184
#: ../../library/stdtypes.rst:1199 ../../library/stdtypes.rst:4831
#: ../../library/stdtypes.rst:5822
msgid "types"
msgstr ""

#: ../../library/stdtypes.rst:34 ../../library/stdtypes.rst:1199
#: ../../library/stdtypes.rst:4831
msgid "statement"
msgstr ""

#: ../../library/stdtypes.rst:34
msgid "if"
msgstr ""

#: ../../library/stdtypes.rst:34
msgid "while"
msgstr ""

#: ../../library/stdtypes.rst:34
msgid "truth"
msgstr ""

#: ../../library/stdtypes.rst:34
msgid "value"
msgstr ""

#: ../../library/stdtypes.rst:34 ../../library/stdtypes.rst:81
#: ../../library/stdtypes.rst:208 ../../library/stdtypes.rst:859
msgid "Boolean"
msgstr ""

#: ../../library/stdtypes.rst:34 ../../library/stdtypes.rst:81
#: ../../library/stdtypes.rst:399
msgid "operations"
msgstr ""

#: ../../library/stdtypes.rst:34
msgid "false"
msgstr ""

#: ../../library/stdtypes.rst:44
msgid "true"
msgstr ""

#: ../../library/stdtypes.rst:52
msgid "None (Built-in object)"
msgstr ""

#: ../../library/stdtypes.rst:52
msgid "False (Built-in object)"
msgstr ""

#: ../../library/stdtypes.rst:64 ../../library/stdtypes.rst:98
#: ../../library/stdtypes.rst:123 ../../library/stdtypes.rst:195
#: ../../library/stdtypes.rst:249 ../../library/stdtypes.rst:399
#: ../../library/stdtypes.rst:992
msgid "operator"
msgstr ""

#: ../../library/stdtypes.rst:64 ../../library/stdtypes.rst:98
msgid "or"
msgstr ""

#: ../../library/stdtypes.rst:64 ../../library/stdtypes.rst:98
msgid "and"
msgstr ""

#: ../../library/stdtypes.rst:64 ../../library/stdtypes.rst:859
msgid "False"
msgstr ""

#: ../../library/stdtypes.rst:64 ../../library/stdtypes.rst:859
msgid "True"
msgstr ""

#: ../../library/stdtypes.rst:98
msgid "not"
msgstr ""

#: ../../library/stdtypes.rst:123
msgid "chaining"
msgstr ""

#: ../../library/stdtypes.rst:123
msgid "comparisons"
msgstr ""

#: ../../library/stdtypes.rst:123
msgid "comparison"
msgstr ""

#: ../../library/stdtypes.rst:123
msgid "=="
msgstr ""

#: ../../library/stdtypes.rst:123
msgid "< (less)"
msgstr ""

#: ../../library/stdtypes.rst:123
msgid "<="
msgstr ""

#: ../../library/stdtypes.rst:123
msgid "> (greater)"
msgstr ""

#: ../../library/stdtypes.rst:123
msgid ">="
msgstr ""

#: ../../library/stdtypes.rst:123
msgid "!="
msgstr ""

#: ../../library/stdtypes.rst:123
msgid "is"
msgstr ""

#: ../../library/stdtypes.rst:123
msgid "is not"
msgstr ""

#: ../../library/stdtypes.rst:163 ../../library/stdtypes.rst:208
#: ../../library/stdtypes.rst:976 ../../library/stdtypes.rst:1162
#: ../../library/stdtypes.rst:1184 ../../library/stdtypes.rst:1307
#: ../../library/stdtypes.rst:1386 ../../library/stdtypes.rst:1430
#: ../../library/stdtypes.rst:1551 ../../library/stdtypes.rst:1681
#: ../../library/stdtypes.rst:2864 ../../library/stdtypes.rst:2883
#: ../../library/stdtypes.rst:2994 ../../library/stdtypes.rst:4629
#: ../../library/stdtypes.rst:4831 ../../library/stdtypes.rst:5311
#: ../../library/stdtypes.rst:5567 ../../library/stdtypes.rst:5742
#: ../../library/stdtypes.rst:5786
msgid "object"
msgstr "objeto"

#: ../../library/stdtypes.rst:163 ../../library/stdtypes.rst:208
#: ../../library/stdtypes.rst:229 ../../library/stdtypes.rst:322
#: ../../library/stdtypes.rst:341
msgid "numeric"
msgstr "numérico"

#: ../../library/stdtypes.rst:163
msgid "objects"
msgstr ""

#: ../../library/stdtypes.rst:163
msgid "comparing"
msgstr ""

#: ../../library/stdtypes.rst:173
msgid "__eq__() (instance method)"
msgstr ""

#: ../../library/stdtypes.rst:173
msgid "__ne__() (instance method)"
msgstr ""

#: ../../library/stdtypes.rst:173
msgid "__lt__() (instance method)"
msgstr ""

#: ../../library/stdtypes.rst:173
msgid "__le__() (instance method)"
msgstr ""

#: ../../library/stdtypes.rst:173
msgid "__gt__() (instance method)"
msgstr ""

#: ../../library/stdtypes.rst:173
msgid "__ge__() (instance method)"
msgstr ""

#: ../../library/stdtypes.rst:195 ../../library/stdtypes.rst:992
msgid "in"
msgstr ""

#: ../../library/stdtypes.rst:195 ../../library/stdtypes.rst:992
msgid "not in"
msgstr ""

#: ../../library/stdtypes.rst:208 ../../library/stdtypes.rst:229
#: ../../library/stdtypes.rst:399
msgid "integer"
msgstr "inteiro"

#: ../../library/stdtypes.rst:208 ../../library/stdtypes.rst:229
msgid "floating-point"
msgstr "ponto flutuante"

#: ../../library/stdtypes.rst:208 ../../library/stdtypes.rst:229
msgid "complex number"
msgstr "número complexo"

#: ../../library/stdtypes.rst:208
msgid "C"
msgstr "C"

#: ../../library/stdtypes.rst:208
msgid "language"
msgstr ""

#: ../../library/stdtypes.rst:229
msgid "literals"
msgstr ""

#: ../../library/stdtypes.rst:229
msgid "hexadecimal"
msgstr ""

#: ../../library/stdtypes.rst:229
msgid "octal"
msgstr ""

#: ../../library/stdtypes.rst:229
msgid "binary"
msgstr ""

#: ../../library/stdtypes.rst:249
msgid "arithmetic"
msgstr ""

#: ../../library/stdtypes.rst:249 ../../library/stdtypes.rst:992
#: ../../library/stdtypes.rst:1162 ../../library/stdtypes.rst:4831
#: ../../library/stdtypes.rst:5793 ../../library/stdtypes.rst:5807
#: ../../library/stdtypes.rst:5822
msgid "built-in function"
msgstr "função embutida"

#: ../../library/stdtypes.rst:249
msgid "int"
msgstr "int"

#: ../../library/stdtypes.rst:249
msgid "float"
msgstr ""

#: ../../library/stdtypes.rst:249
msgid "complex"
msgstr ""

#: ../../library/stdtypes.rst:249 ../../library/stdtypes.rst:2740
#: ../../library/stdtypes.rst:3999
msgid "+ (plus)"
msgstr ""

#: ../../library/stdtypes.rst:249
msgid "unary operator"
msgstr ""

#: ../../library/stdtypes.rst:249
msgid "binary operator"
msgstr ""

#: ../../library/stdtypes.rst:249 ../../library/stdtypes.rst:2740
#: ../../library/stdtypes.rst:3999
msgid "- (minus)"
msgstr ""

#: ../../library/stdtypes.rst:249 ../../library/stdtypes.rst:2697
#: ../../library/stdtypes.rst:3956
msgid "* (asterisk)"
msgstr ""

#: ../../library/stdtypes.rst:249
msgid "/ (slash)"
msgstr ""

#: ../../library/stdtypes.rst:249
msgid "//"
msgstr ""

#: ../../library/stdtypes.rst:249 ../../library/stdtypes.rst:2661
#: ../../library/stdtypes.rst:3924
msgid "% (percent)"
msgstr ""

#: ../../library/stdtypes.rst:249
msgid "**"
msgstr ""

#: ../../library/stdtypes.rst:322 ../../library/stdtypes.rst:399
#: ../../library/stdtypes.rst:992 ../../library/stdtypes.rst:1199
#: ../../library/stdtypes.rst:4831
msgid "operations on"
msgstr ""

#: ../../library/stdtypes.rst:322
msgid "conjugate() (complex number method)"
msgstr ""

#: ../../library/stdtypes.rst:341 ../../library/stdtypes.rst:1747
#: ../../library/stdtypes.rst:2864 ../../library/stdtypes.rst:5822
msgid "module"
msgstr "módulo"

#: ../../library/stdtypes.rst:341
msgid "math"
msgstr ""

#: ../../library/stdtypes.rst:341
msgid "floor() (in module math)"
msgstr ""

#: ../../library/stdtypes.rst:341
msgid "ceil() (in module math)"
msgstr ""

#: ../../library/stdtypes.rst:341
msgid "trunc() (in module math)"
msgstr ""

#: ../../library/stdtypes.rst:341
msgid "conversions"
msgstr ""

#: ../../library/stdtypes.rst:399
msgid "bitwise"
msgstr ""

#: ../../library/stdtypes.rst:399
msgid "shifting"
msgstr ""

#: ../../library/stdtypes.rst:399
msgid "masking"
msgstr ""

#: ../../library/stdtypes.rst:399
msgid "| (vertical bar)"
msgstr ""

#: ../../library/stdtypes.rst:399
msgid "^ (caret)"
msgstr ""

#: ../../library/stdtypes.rst:399
msgid "& (ampersand)"
msgstr ""

#: ../../library/stdtypes.rst:399
msgid "<<"
msgstr ""

#: ../../library/stdtypes.rst:399
msgid ">>"
msgstr ""

#: ../../library/stdtypes.rst:399
msgid "~ (tilde)"
msgstr ""

#: ../../library/stdtypes.rst:859
msgid "values"
msgstr ""

#: ../../library/stdtypes.rst:889
msgid "iterator protocol"
msgstr ""

#: ../../library/stdtypes.rst:889 ../../library/stdtypes.rst:5226
msgid "protocol"
msgstr ""

#: ../../library/stdtypes.rst:889
msgid "iterator"
msgstr ""

#: ../../library/stdtypes.rst:889 ../../library/stdtypes.rst:976
#: ../../library/stdtypes.rst:992 ../../library/stdtypes.rst:1162
#: ../../library/stdtypes.rst:1184 ../../library/stdtypes.rst:1199
msgid "sequence"
msgstr "sequência"

#: ../../library/stdtypes.rst:889
msgid "iteration"
msgstr ""

#: ../../library/stdtypes.rst:889
msgid "container"
msgstr ""

#: ../../library/stdtypes.rst:889
msgid "iteration over"
msgstr ""

#: ../../library/stdtypes.rst:992 ../../library/stdtypes.rst:4831
msgid "len"
msgstr "len"

#: ../../library/stdtypes.rst:992
msgid "min"
msgstr ""

#: ../../library/stdtypes.rst:992
msgid "max"
msgstr ""

#: ../../library/stdtypes.rst:992
msgid "concatenation"
msgstr ""

#: ../../library/stdtypes.rst:992
msgid "operation"
msgstr ""

#: ../../library/stdtypes.rst:992
msgid "repetition"
msgstr ""

#: ../../library/stdtypes.rst:992 ../../library/stdtypes.rst:1199
msgid "subscript"
msgstr ""

#: ../../library/stdtypes.rst:992 ../../library/stdtypes.rst:1199
msgid "slice"
msgstr ""

#: ../../library/stdtypes.rst:992
msgid "count() (sequence method)"
msgstr ""

#: ../../library/stdtypes.rst:992
msgid "index() (sequence method)"
msgstr ""

#: ../../library/stdtypes.rst:1048
msgid "loop"
msgstr ""

#: ../../library/stdtypes.rst:1048
msgid "over mutable sequence"
msgstr ""

#: ../../library/stdtypes.rst:1048
msgid "mutable sequence"
msgstr ""

#: ../../library/stdtypes.rst:1048
msgid "loop over"
msgstr ""

#: ../../library/stdtypes.rst:1162
msgid "immutable"
msgstr ""

#: ../../library/stdtypes.rst:1162 ../../library/stdtypes.rst:1386
msgid "tuple"
msgstr "tupla"

#: ../../library/stdtypes.rst:1162
msgid "hash"
msgstr ""

#: ../../library/stdtypes.rst:1184
msgid "mutable"
msgstr ""

#: ../../library/stdtypes.rst:1184 ../../library/stdtypes.rst:1199
#: ../../library/stdtypes.rst:1307
msgid "list"
msgstr "lista"

#: ../../library/stdtypes.rst:1184 ../../library/stdtypes.rst:2864
#: ../../library/stdtypes.rst:2994 ../../library/stdtypes.rst:3102
#: ../../library/stdtypes.rst:3924
msgid "bytearray"
msgstr "bytearray"

#: ../../library/stdtypes.rst:1199 ../../library/stdtypes.rst:4831
#: ../../library/stdtypes.rst:5567 ../../library/stdtypes.rst:5822
msgid "type"
msgstr "tipo"

#: ../../library/stdtypes.rst:1199
msgid "assignment"
msgstr ""

#: ../../library/stdtypes.rst:1199 ../../library/stdtypes.rst:4831
msgid "del"
msgstr ""

#: ../../library/stdtypes.rst:1199
msgid "append() (sequence method)"
msgstr ""

#: ../../library/stdtypes.rst:1199
msgid "clear() (sequence method)"
msgstr ""

#: ../../library/stdtypes.rst:1199
msgid "copy() (sequence method)"
msgstr ""

#: ../../library/stdtypes.rst:1199
msgid "extend() (sequence method)"
msgstr ""

#: ../../library/stdtypes.rst:1199
msgid "insert() (sequence method)"
msgstr ""

#: ../../library/stdtypes.rst:1199
msgid "pop() (sequence method)"
msgstr ""

#: ../../library/stdtypes.rst:1199
msgid "remove() (sequence method)"
msgstr ""

#: ../../library/stdtypes.rst:1199
msgid "reverse() (sequence method)"
msgstr ""

#: ../../library/stdtypes.rst:1430
msgid "range"
msgstr ""

#: ../../library/stdtypes.rst:1551 ../../library/stdtypes.rst:1694
#: ../../library/stdtypes.rst:1739 ../../library/stdtypes.rst:2515
#: ../../library/stdtypes.rst:2661
msgid "string"
msgstr ""

#: ../../library/stdtypes.rst:1551
msgid "text sequence type"
msgstr ""

#: ../../library/stdtypes.rst:1551 ../../library/stdtypes.rst:1694
#: ../../library/stdtypes.rst:1712
msgid "str (built-in class)"
msgstr ""

#: ../../library/stdtypes.rst:1551
msgid "(see also string)"
msgstr ""

#: ../../library/stdtypes.rst:1681
msgid "io.StringIO"
msgstr ""

#: ../../library/stdtypes.rst:1712 ../../library/stdtypes.rst:2856
msgid "buffer protocol"
msgstr "protocolo de buffer"

#: ../../library/stdtypes.rst:1712 ../../library/stdtypes.rst:2864
#: ../../library/stdtypes.rst:2883 ../../library/stdtypes.rst:3102
#: ../../library/stdtypes.rst:3924
msgid "bytes"
msgstr "bytes"

#: ../../library/stdtypes.rst:1739 ../../library/stdtypes.rst:3102
msgid "methods"
msgstr ""

#: ../../library/stdtypes.rst:1747
msgid "re"
msgstr ""

#: ../../library/stdtypes.rst:2329 ../../library/stdtypes.rst:3778
msgid "universal newlines"
msgstr ""

#: ../../library/stdtypes.rst:2329
msgid "str.splitlines method"
msgstr ""

#: ../../library/stdtypes.rst:2515
msgid "! formatted string literal"
msgstr ""

#: ../../library/stdtypes.rst:2515
msgid "formatted string literals"
msgstr ""

#: ../../library/stdtypes.rst:2515
msgid "! f-string"
msgstr ""

#: ../../library/stdtypes.rst:2515
msgid "f-strings"
msgstr ""

#: ../../library/stdtypes.rst:2515
msgid "fstring"
msgstr ""

#: ../../library/stdtypes.rst:2515
msgid "interpolated string literal"
msgstr ""

#: ../../library/stdtypes.rst:2515
msgid "formatted literal"
msgstr ""

#: ../../library/stdtypes.rst:2515
msgid "interpolated literal"
msgstr ""

#: ../../library/stdtypes.rst:2515
msgid "{} (curly brackets)"
msgstr ""

#: ../../library/stdtypes.rst:2515
msgid "in formatted string literal"
msgstr ""

#: ../../library/stdtypes.rst:2515
msgid "! (exclamation mark)"
msgstr ""

#: ../../library/stdtypes.rst:2515
msgid ": (colon)"
msgstr ""

#: ../../library/stdtypes.rst:2515
msgid "= (equals)"
msgstr ""

#: ../../library/stdtypes.rst:2515
msgid "for help in debugging using string literals"
msgstr ""

#: ../../library/stdtypes.rst:2661
msgid "formatting, string (%)"
msgstr ""

#: ../../library/stdtypes.rst:2661
msgid "interpolation, string (%)"
msgstr ""

#: ../../library/stdtypes.rst:2661
msgid "formatting, printf"
msgstr ""

#: ../../library/stdtypes.rst:2661
msgid "interpolation, printf"
msgstr ""

#: ../../library/stdtypes.rst:2661 ../../library/stdtypes.rst:3924
msgid "printf-style formatting"
msgstr ""

#: ../../library/stdtypes.rst:2661 ../../library/stdtypes.rst:3924
msgid "sprintf-style formatting"
msgstr ""

#: ../../library/stdtypes.rst:2697 ../../library/stdtypes.rst:3956
msgid "() (parentheses)"
msgstr ""

#: ../../library/stdtypes.rst:2697 ../../library/stdtypes.rst:2740
#: ../../library/stdtypes.rst:3956 ../../library/stdtypes.rst:3999
msgid "in printf-style formatting"
msgstr ""

#: ../../library/stdtypes.rst:2697 ../../library/stdtypes.rst:3956
msgid ". (dot)"
msgstr ""

#: ../../library/stdtypes.rst:2740 ../../library/stdtypes.rst:3999
msgid "# (hash)"
msgstr ""

#: ../../library/stdtypes.rst:2740 ../../library/stdtypes.rst:3999
msgid "space"
msgstr ""

#: ../../library/stdtypes.rst:2856
msgid "binary sequence types"
msgstr ""

#: ../../library/stdtypes.rst:2864
msgid "memoryview"
msgstr ""

#: ../../library/stdtypes.rst:2864
msgid "array"
msgstr ""

#: ../../library/stdtypes.rst:3778
msgid "bytes.splitlines method"
msgstr ""

#: ../../library/stdtypes.rst:3778
msgid "bytearray.splitlines method"
msgstr ""

#: ../../library/stdtypes.rst:3924
msgid "formatting"
msgstr ""

#: ../../library/stdtypes.rst:3924
msgid "bytes (%)"
msgstr ""

#: ../../library/stdtypes.rst:3924
msgid "bytearray (%)"
msgstr ""

#: ../../library/stdtypes.rst:3924
msgid "interpolation"
msgstr ""

#: ../../library/stdtypes.rst:4629
msgid "set"
msgstr ""

#: ../../library/stdtypes.rst:4831
msgid "mapping"
msgstr "mapeamento"

#: ../../library/stdtypes.rst:4831
msgid "dictionary"
msgstr "dicionário"

#: ../../library/stdtypes.rst:4941
msgid "__missing__()"
msgstr ""

#: ../../library/stdtypes.rst:5226
msgid "context manager"
msgstr ""

#: ../../library/stdtypes.rst:5226
msgid "context management protocol"
msgstr ""

#: ../../library/stdtypes.rst:5226
msgid "context management"
msgstr ""

#: ../../library/stdtypes.rst:5299
msgid "annotation"
msgstr ""

#: ../../library/stdtypes.rst:5299
msgid "type annotation; type hint"
msgstr ""

#: ../../library/stdtypes.rst:5311
msgid "GenericAlias"
msgstr ""

#: ../../library/stdtypes.rst:5311
msgid "Generic"
msgstr ""

#: ../../library/stdtypes.rst:5311
msgid "Alias"
msgstr ""

#: ../../library/stdtypes.rst:5567
msgid "Union"
msgstr ""

#: ../../library/stdtypes.rst:5567
msgid "union"
msgstr ""

#: ../../library/stdtypes.rst:5742
msgid "method"
msgstr ""

#: ../../library/stdtypes.rst:5786
msgid "code"
msgstr "código"

#: ../../library/stdtypes.rst:5786
msgid "code object"
msgstr "objeto código"

#: ../../library/stdtypes.rst:5793
msgid "compile"
msgstr "compile"

#: ../../library/stdtypes.rst:5793
msgid "__code__ (function object attribute)"
msgstr ""

#: ../../library/stdtypes.rst:5807
msgid "exec"
msgstr ""

#: ../../library/stdtypes.rst:5807
msgid "eval"
msgstr ""

#: ../../library/stdtypes.rst:5846
msgid "..."
msgstr ""

#: ../../library/stdtypes.rst:5846
msgid "ellipsis literal"
msgstr ""
