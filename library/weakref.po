# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2020
# And Past <andrepgs@gmail.com>, 2020
# i17obot <i17obot@rougeth.com>, 2020
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-06 22:14+0000\n"
"PO-Revision-Date: 2020-05-30 12:14+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/weakref.rst:2
msgid ":mod:`weakref` --- Weak references"
msgstr ":mod:`weakref` --- Referências fracas"

#: ../../library/weakref.rst:12
msgid "**Source code:** :source:`Lib/weakref.py`"
msgstr "**Código-fonte:** :source:`Lib/weakref.py`"

#: ../../library/weakref.rst:16
msgid ""
"The :mod:`weakref` module allows the Python programmer to create :dfn:`weak "
"references` to objects."
msgstr ""
"O módulo :mod:`weakref` permite ao programador Python criar :dfn:"
"`referências fracas` para objetos."

#: ../../library/weakref.rst:22
msgid ""
"In the following, the term :dfn:`referent` means the object which is "
"referred to by a weak reference."
msgstr ""
"A seguir, o termo :dfn:`referente` significa o objeto ao qual é referido por "
"uma referência fraca."

#: ../../library/weakref.rst:25
msgid ""
"A weak reference to an object is not enough to keep the object alive: when "
"the only remaining references to a referent are weak references, :term:"
"`garbage collection` is free to destroy the referent and reuse its memory "
"for something else.  However, until the object is actually destroyed the "
"weak reference may return the object even if there are no strong references "
"to it."
msgstr ""
"Uma referência fraca a um objeto não é suficiente para mantê-lo vivo: quando "
"as únicas referências restantes a um referente são referências fracas, a :"
"term:`coleta de lixo` está livre para destruir o referente e reutilizar sua "
"memória para outra coisa. Entretanto, até que o objeto seja realmente "
"destruído, a referência fraca poderá retornar o objeto mesmo que não haja "
"referências fortes a ele."

#: ../../library/weakref.rst:31
msgid ""
"A primary use for weak references is to implement caches or mappings holding "
"large objects, where it's desired that a large object not be kept alive "
"solely because it appears in a cache or mapping."
msgstr ""
"Um uso principal para referências fracas é implementar caches ou mapeamentos "
"contendo objetos grandes, onde é desejado que um objeto grande não seja "
"mantido ativo apenas porque aparece em um cache ou mapeamento."

#: ../../library/weakref.rst:35
msgid ""
"For example, if you have a number of large binary image objects, you may "
"wish to associate a name with each.  If you used a Python dictionary to map "
"names to images, or images to names, the image objects would remain alive "
"just because they appeared as values or keys in the dictionaries.  The :"
"class:`WeakKeyDictionary` and :class:`WeakValueDictionary` classes supplied "
"by the :mod:`weakref` module are an alternative, using weak references to "
"construct mappings that don't keep objects alive solely because they appear "
"in the mapping objects.  If, for example, an image object is a value in a :"
"class:`WeakValueDictionary`, then when the last remaining references to that "
"image object are the weak references held by weak mappings, garbage "
"collection can reclaim the object, and its corresponding entries in weak "
"mappings are simply deleted."
msgstr ""
"Por exemplo, se você tiver vários objetos de imagem binária grandes, poderá "
"associar um nome a cada um. Se você usasse um dicionário Python para mapear "
"nomes para imagens, ou imagens para nomes, os objetos de imagem "
"permaneceriam vivos apenas porque apareceriam como valores ou chaves nos "
"dicionários. As classes :class:`WeakKeyDictionary` e :class:"
"`WeakValueDictionary` fornecidas pelo módulo :mod:`weakref` são uma "
"alternativa, usando referências fracas para construir mapeamentos que não "
"mantêm objetos vivos apenas porque aparecem nos objetos de mapeamento. Se, "
"por exemplo, um objeto de imagem for um valor em um :class:"
"`WeakValueDictionary`, então quando as últimas referências restantes a esse "
"objeto de imagem forem as referências fracas mantidas por mapeamentos "
"fracos, a coleta de lixo poderá recuperar o objeto e suas entradas "
"correspondentes em mapeamentos fracos são simplesmente excluídos."

#: ../../library/weakref.rst:48
msgid ""
":class:`WeakKeyDictionary` and :class:`WeakValueDictionary` use weak "
"references in their implementation, setting up callback functions on the "
"weak references that notify the weak dictionaries when a key or value has "
"been reclaimed by garbage collection.  :class:`WeakSet` implements the :"
"class:`set` interface, but keeps weak references to its elements, just like "
"a :class:`WeakKeyDictionary` does."
msgstr ""
":class:`WeakKeyDictionary` e :class:`WeakValueDictionary` usam referências "
"fracas em sua implementação, configurando funções de retorno de chamada nas "
"referências fracas que notificam os dicionários fracos quando uma chave ou "
"valor foi recuperado pela coleta de lixo. :class:`WeakSet` implementa a "
"interface :class:`set`, mas mantém referências fracas aos seus elementos, "
"assim como :class:`WeakKeyDictionary` faz."

#: ../../library/weakref.rst:55
msgid ""
":class:`finalize` provides a straight forward way to register a cleanup "
"function to be called when an object is garbage collected. This is simpler "
"to use than setting up a callback function on a raw weak reference, since "
"the module automatically ensures that the finalizer remains alive until the "
"object is collected."
msgstr ""
":class:`finalize` fornece uma maneira direta de registrar uma função de "
"limpeza a ser chamada quando um objeto é coletado como lixo. Isso é mais "
"simples de usar do que configurar uma função de retorno de chamada em uma "
"referência fraca não tratada, pois o módulo garante automaticamente que o "
"finalizador permaneça ativo até que o objeto seja coletado."

#: ../../library/weakref.rst:61
msgid ""
"Most programs should find that using one of these weak container types or :"
"class:`finalize` is all they need -- it's not usually necessary to create "
"your own weak references directly.  The low-level machinery is exposed by "
"the :mod:`weakref` module for the benefit of advanced uses."
msgstr ""
"A maioria dos programas deve descobrir que usar um desses tipos de "
"contêineres fracos ou :class:`finalize` é tudo que eles precisam -- "
"geralmente não é necessário criar suas próprias referências fracas "
"diretamente. O maquinário de baixo nível é exposto pelo módulo :mod:"
"`weakref` para benefício de usos avançados."

#: ../../library/weakref.rst:66
msgid ""
"Not all objects can be weakly referenced; those objects which can include "
"class instances, functions written in Python (but not in C), instance "
"methods, sets, frozensets, some :term:`file objects <file object>`, :term:"
"`generators <generator>`, type objects, sockets, arrays, deques, regular "
"expression pattern objects, and code objects."
msgstr ""

#: ../../library/weakref.rst:72
msgid "Added support for thread.lock, threading.Lock, and code objects."
msgstr "Adicionado suporte para thread.lock, threading.Lock e objetos código."

#: ../../library/weakref.rst:75
msgid ""
"Several built-in types such as :class:`list` and :class:`dict` do not "
"directly support weak references but can add support through subclassing::"
msgstr ""
"Vários tipos embutidos como :class:`list` e :class:`dict` não oferecem "
"suporta diretamente a referências fracas, mas podem adicionar suporte "
"através de subclasses::"

#: ../../library/weakref.rst:85
msgid ""
"Other built-in types such as :class:`tuple` and :class:`int` do not support "
"weak references even when subclassed."
msgstr ""
"Outros tipos embutidos como :class:`tuple` e :class:`int` não oferecem "
"suporte a referências fracas mesmo em subclasses."

#: ../../library/weakref.rst:88
msgid ""
"Extension types can easily be made to support weak references; see :ref:"
"`weakref-support`."
msgstr ""
"Os tipos de extensão podem ser facilmente criados para oferecer suporte a "
"referências fracas; veja :ref:`weakref-support`."

#: ../../library/weakref.rst:94
msgid ""
"Return a weak reference to *object*.  The original object can be retrieved "
"by calling the reference object if the referent is still alive; if the "
"referent is no longer alive, calling the reference object will cause :const:"
"`None` to be returned.  If *callback* is provided and not :const:`None`, and "
"the returned weakref object is still alive, the callback will be called when "
"the object is about to be finalized; the weak reference object will be "
"passed as the only parameter to the callback; the referent will no longer be "
"available."
msgstr ""
"Retorna uma referência fraca para *object*. O objeto original pode ser "
"recuperado chamando o objeto referência se o referente ainda estiver ativo; "
"se o referente não estiver mais ativo, chamar o objeto referência fará com "
"que :const:`None` seja retornado. Se *callback* for fornecido e não for :"
"const:`None`, e o objeto referência fraca retornado ainda estiver ativo, o "
"função de retorno será chamada quando o objeto estiver prestes a ser "
"finalizado; o objeto referência fraca será passado como único parâmetro para "
"a função de retorno; o referente não estará mais disponível."

#: ../../library/weakref.rst:102
msgid ""
"It is allowable for many weak references to be constructed for the same "
"object. Callbacks registered for each weak reference will be called from the "
"most recently registered callback to the oldest registered callback."
msgstr ""
"É permitido que muitas referências fracas sejam construídas para o mesmo "
"objeto. As funções de retorno registradas para cada referência fraca serão "
"chamadas da função de retorno registrada mais recentemente para a função de "
"retorno registrada mais antiga."

#: ../../library/weakref.rst:106
msgid ""
"Exceptions raised by the callback will be noted on the standard error "
"output, but cannot be propagated; they are handled in exactly the same way "
"as exceptions raised from an object's :meth:`__del__` method."
msgstr ""

#: ../../library/weakref.rst:110
msgid ""
"Weak references are :term:`hashable` if the *object* is hashable.  They will "
"maintain their hash value even after the *object* was deleted.  If :func:"
"`hash` is called the first time only after the *object* was deleted, the "
"call will raise :exc:`TypeError`."
msgstr ""
"Referências fracas são :term:`hasheáveis <hasheável>` se o *object* for "
"hasheável. Elas manterão seu valor de hash mesmo depois que *object* for "
"excluído. Se :func:`hash` for chamada pela primeira vez somente após o "
"*object* ter sido excluído, a chamada vai levantar :exc:`TypeError`."

#: ../../library/weakref.rst:115
msgid ""
"Weak references support tests for equality, but not ordering.  If the "
"referents are still alive, two references have the same equality "
"relationship as their referents (regardless of the *callback*).  If either "
"referent has been deleted, the references are equal only if the reference "
"objects are the same object."
msgstr ""
"Referências fracas oferecem suporte a testes de igualdade, mas não de "
"ordenação. Se os referentes ainda estiverem vivos, duas referências terão a "
"mesma relação de igualdade que seus referentes (independentemente do "
"*callback*). Se um dos referentes tiver sido excluído, as referências serão "
"iguais somente se os objetos referência forem o mesmo objeto."

#: ../../library/weakref.rst:120
msgid "This is a subclassable type rather than a factory function."
msgstr ""
"Este é um tipo do qual pode ser feita subclasse em vez de uma função de "
"fábrica."

#: ../../library/weakref.rst:124
msgid ""
"This read-only attribute returns the callback currently associated to the "
"weakref.  If there is no callback or if the referent of the weakref is no "
"longer alive then this attribute will have value ``None``."
msgstr ""
"Este atributo somente leitura retorna a função de retorno atualmente "
"associada à referência fraca. Se não houver função de retorno ou se o "
"referente da referência fraca não estiver mais ativo, então este atributo "
"terá o valor ``None``."

#: ../../library/weakref.rst:128
msgid "Added the :attr:`__callback__` attribute."
msgstr "Adicionado o atributo :attr:`__callback__`."

#: ../../library/weakref.rst:134
msgid ""
"Return a proxy to *object* which uses a weak reference.  This supports use "
"of the proxy in most contexts instead of requiring the explicit "
"dereferencing used with weak reference objects.  The returned object will "
"have a type of either ``ProxyType`` or ``CallableProxyType``, depending on "
"whether *object* is callable.  Proxy objects are not :term:`hashable` "
"regardless of the referent; this avoids a number of problems related to "
"their fundamentally mutable nature, and prevent their use as dictionary "
"keys.  *callback* is the same as the parameter of the same name to the :func:"
"`ref` function."
msgstr ""

#: ../../library/weakref.rst:143
msgid ""
"Extended the operator support on proxy objects to include the matrix "
"multiplication operators ``@`` and ``@=``."
msgstr ""
"Estendeu o suporte ao operador em objetos intermediários para incluir os "
"operadores ``@`` e ``@=`` para multiplicação de matrizes."

#: ../../library/weakref.rst:150
msgid ""
"Return the number of weak references and proxies which refer to *object*."
msgstr ""
"Retorna o número de referências fracas e intermediários que fazem referência "
"a *object*."

#: ../../library/weakref.rst:155
msgid ""
"Return a list of all weak reference and proxy objects which refer to "
"*object*."
msgstr ""
"Retorna uma lista de todos os objetos intermediários e de referência fraca "
"que fazem referência a *object*."

#: ../../library/weakref.rst:160
msgid ""
"Mapping class that references keys weakly.  Entries in the dictionary will "
"be discarded when there is no longer a strong reference to the key.  This "
"can be used to associate additional data with an object owned by other parts "
"of an application without adding attributes to those objects.  This can be "
"especially useful with objects that override attribute accesses."
msgstr ""
"Classe de mapeamento que faz referência fraca a chaves. Entradas no "
"dicionário serão descartadas quando não houver mais uma referência forte à "
"chave. Isso pode ser usado para associar dados adicionais a um objeto de "
"propriedade de outras partes de uma aplicação sem adicionar atributos a "
"esses objetos. Isso pode ser especialmente útil com objetos que substituem "
"acessos de atributos."

#: ../../library/weakref.rst:167
msgid ""
":class:`WeakKeyDictionary` objects have an additional method that exposes "
"the internal references directly.  The references are not guaranteed to be "
"\"live\" at the time they are used, so the result of calling the references "
"needs to be checked before being used.  This can be used to avoid creating "
"references that will cause the garbage collector to keep the keys around "
"longer than needed."
msgstr ""
"Objetos :class:`WeakKeyDictionary` têm um método adicional que expõe as "
"referências internas diretamente. Não há garantia de que as referências "
"estejam \"ativas\" no momento em que são usadas, então o resultado da "
"chamada das referências precisa ser verificado antes de ser usado. Isso pode "
"ser usado para evitar a criação de referências que farão com que o coletor "
"de lixo mantenha as chaves por mais tempo do que o necessário."

#: ../../library/weakref.rst:177
msgid "Return an iterable of the weak references to the keys."
msgstr "Retorna um iterável das referências fracas às chaves."

#: ../../library/weakref.rst:182
msgid ""
"Mapping class that references values weakly.  Entries in the dictionary will "
"be discarded when no strong reference to the value exists any more."
msgstr ""
"Classe de mapeamento que faz referência fraca a valores. Entradas no "
"dicionário serão descartadas quando nenhuma referência forte ao valor "
"existir mais."

#: ../../library/weakref.rst:186
msgid ""
":class:`WeakValueDictionary` objects have an additional method that has the "
"same issues as the :meth:`keyrefs` method of :class:`WeakKeyDictionary` "
"objects."
msgstr ""

#: ../../library/weakref.rst:193
msgid "Return an iterable of the weak references to the values."
msgstr "Retorna um iterável das referências fracas aos valores."

#: ../../library/weakref.rst:198
msgid ""
"Set class that keeps weak references to its elements.  An element will be "
"discarded when no strong reference to it exists any more."
msgstr ""
"Define a classe que mantém referências fracas para seus elementos. Um "
"elemento será descartado quando nenhuma referência forte a ele existir mais."

#: ../../library/weakref.rst:204
msgid ""
"A custom :class:`ref` subclass which simulates a weak reference to a bound "
"method (i.e., a method defined on a class and looked up on an instance). "
"Since a bound method is ephemeral, a standard weak reference cannot keep "
"hold of it.  :class:`WeakMethod` has special code to recreate the bound "
"method until either the object or the original function dies::"
msgstr ""
"Uma subclasse personalizada de :class:`ref` que simula uma referência fraca "
"a um método vinculado (ou seja, um método definido em uma classe e "
"pesquisado em uma instância). Como um método vinculado é efêmero, uma "
"referência fraca padrão não pode mantê-lo. :class:`WeakMethod` tem um código "
"especial para recriar o método vinculado até que o objeto ou a função "
"original morra::"

#: ../../library/weakref.rst:232
msgid ""
"Return a callable finalizer object which will be called when *obj* is "
"garbage collected. Unlike an ordinary weak reference, a finalizer will "
"always survive until the reference object is collected, greatly simplifying "
"lifecycle management."
msgstr ""
"Retorna um objeto finalizador chamável que será chamado quando *obj* for "
"coletado como lixo. Diferentemente de uma referência fraca comum, um "
"finalizador sempre sobreviverá até que o objeto referência seja coletado, "
"simplificando muito o gerenciamento do ciclo de vida."

#: ../../library/weakref.rst:237
msgid ""
"A finalizer is considered *alive* until it is called (either explicitly or "
"at garbage collection), and after that it is *dead*.  Calling a live "
"finalizer returns the result of evaluating ``func(*arg, **kwargs)``, whereas "
"calling a dead finalizer returns :const:`None`."
msgstr ""
"Um finalizador é considerado *alive* (vivo) até ser chamado (explicitamente "
"ou na coleta de lixo), e depois disso ele é *dead* (morto). Chamar um "
"finalizador vivo retorna o resultado da avaliação de ``func(*arg, "
"**kwargs)``, enquanto chamar um finalizador morto retorna :const:`None`."

#: ../../library/weakref.rst:242
msgid ""
"Exceptions raised by finalizer callbacks during garbage collection will be "
"shown on the standard error output, but cannot be propagated.  They are "
"handled in the same way as exceptions raised from an object's :meth:"
"`__del__` method or a weak reference's callback."
msgstr ""

#: ../../library/weakref.rst:248
msgid ""
"When the program exits, each remaining live finalizer is called unless its :"
"attr:`atexit` attribute has been set to false.  They are called in reverse "
"order of creation."
msgstr ""
"Quando o programa é encerrado, cada finalizador vivo restante é chamado, a "
"menos que seu atributo :attr:`atexit` tenha sido definido como falso. Eles "
"são chamados na ordem reversa da criação."

#: ../../library/weakref.rst:252
msgid ""
"A finalizer will never invoke its callback during the later part of the :"
"term:`interpreter shutdown` when module globals are liable to have been "
"replaced by :const:`None`."
msgstr ""
"Um finalizador nunca vai invocar sua função de retorno durante a parte "
"posterior do :term:`desligamento do interpretador` quando os globais do "
"módulo podem ter sido substituídos por :const:`None`."

#: ../../library/weakref.rst:258
msgid ""
"If *self* is alive then mark it as dead and return the result of calling "
"``func(*args, **kwargs)``.  If *self* is dead then return :const:`None`."
msgstr ""
"Se *self* estiver vivo, marca-o como morto e retorna o resultado da chamada "
"``func(*args, **kwargs)``. Se *self* estiver morto, retorna :const:`None`."

#: ../../library/weakref.rst:264
msgid ""
"If *self* is alive then mark it as dead and return the tuple ``(obj, func, "
"args, kwargs)``.  If *self* is dead then return :const:`None`."
msgstr ""
"Se *self* estiver vivo, marca-o como morto e retorna a tupla ``(obj, func, "
"args, kwargs)``. Se *self* estiver morto, retorna :const:`None`."

#: ../../library/weakref.rst:270
msgid ""
"If *self* is alive then return the tuple ``(obj, func, args, kwargs)``.  If "
"*self* is dead then return :const:`None`."
msgstr ""
"Se *self* estiver vivo, retorna a tupla ``(obj, func, args, kwargs)``. Se "
"*self* estiver morto, retorna :const:`None`."

#: ../../library/weakref.rst:275
msgid "Property which is true if the finalizer is alive, false otherwise."
msgstr ""
"Propriedade que é verdadeiro se o finalizador estiver ativo, falsa caso "
"contrário."

#: ../../library/weakref.rst:279
msgid ""
"A writable boolean property which by default is true.  When the program "
"exits, it calls all remaining live finalizers for which :attr:`.atexit` is "
"true.  They are called in reverse order of creation."
msgstr ""
"Uma propriedade booleana gravável que por padrão é verdadeiro. Quando o "
"programa sai, ele chama todos os finalizadores vivos restantes para os "
"quais :attr:`.atexit` é verdadeiro. Eles são chamados na ordem reversa da "
"criação."

#: ../../library/weakref.rst:286
msgid ""
"It is important to ensure that *func*, *args* and *kwargs* do not own any "
"references to *obj*, either directly or indirectly, since otherwise *obj* "
"will never be garbage collected.  In particular, *func* should not be a "
"bound method of *obj*."
msgstr ""
"É importante garantir que *func*, *args* e *kwargs* não possuam nenhuma "
"referência a *obj*, direta ou indiretamente, pois, caso contrário, *obj* "
"nunca será coletado como lixo. Em particular, *func* não deve ser um método "
"vinculado de *obj*."

#: ../../library/weakref.rst:296
msgid "The type object for weak references objects."
msgstr "O objeto tipo para objetos referências fracas."

#: ../../library/weakref.rst:301
msgid "The type object for proxies of objects which are not callable."
msgstr "O tipo de objeto para intermediários de objetos que não são chamáveis."

#: ../../library/weakref.rst:306
msgid "The type object for proxies of callable objects."
msgstr "O objeto de tipo para intermediários de objetos chamáveis."

#: ../../library/weakref.rst:311
msgid ""
"Sequence containing all the type objects for proxies.  This can make it "
"simpler to test if an object is a proxy without being dependent on naming "
"both proxy types."
msgstr ""
"Sequência contendo todos os objetos de tipo para intermediários. Isso pode "
"tornar mais simples testar se um objeto é um intermediário sem depender da "
"nomeação de ambos os tipos de intermediário."

#: ../../library/weakref.rst:319
msgid ":pep:`205` - Weak References"
msgstr ":pep:`205` - Weak References"

#: ../../library/weakref.rst:319
msgid ""
"The proposal and rationale for this feature, including links to earlier "
"implementations and information about similar features in other languages."
msgstr ""
"A proposta e a justificativa para esse recurso, incluindo links para "
"implementações anteriores e informações sobre recursos semelhantes em outras "
"linguagens."

#: ../../library/weakref.rst:326
msgid "Weak Reference Objects"
msgstr "Objetos referência fraca"

#: ../../library/weakref.rst:328
msgid ""
"Weak reference objects have no methods and no attributes besides :attr:`ref."
"__callback__`. A weak reference object allows the referent to be obtained, "
"if it still exists, by calling it:"
msgstr ""
"Objetos referência fraca não têm métodos nem atributos além de :attr:`ref."
"__callback__`. Um objeto referência fraca permite que o referente seja "
"obtido, se ele ainda existir, chamando-o:"

#: ../../library/weakref.rst:342
msgid ""
"If the referent no longer exists, calling the reference object returns :"
"const:`None`:"
msgstr ""
"Se o referente não existir mais, chamar o objeto referência retornará :const:"
"`None`:"

#: ../../library/weakref.rst:349
msgid ""
"Testing that a weak reference object is still live should be done using the "
"expression ``ref() is not None``.  Normally, application code that needs to "
"use a reference object should follow this pattern::"
msgstr ""
"O teste de se um objeto referência fraca ainda está vivo deve ser feito "
"usando a expressão ``ref() is not None``. Normalmente, o código da aplicação "
"que precisa usar um objeto de referência deve seguir este padrão::"

#: ../../library/weakref.rst:362
msgid ""
"Using a separate test for \"liveness\" creates race conditions in threaded "
"applications; another thread can cause a weak reference to become "
"invalidated before the weak reference is called; the idiom shown above is "
"safe in threaded applications as well as single-threaded applications."
msgstr ""
"Usar um teste separado para \"vivacidade\" cria condições de corrida em "
"aplicações que usam mais de uma thread; uma outra thread pode fazer com que "
"uma referência fraca seja invalidada antes que a referência fraca seja "
"chamada; o idioma mostrado acima é seguro em aplicações que usam mais de uma "
"thread, bem como em aplicações de thread única."

#: ../../library/weakref.rst:367
msgid ""
"Specialized versions of :class:`ref` objects can be created through "
"subclassing. This is used in the implementation of the :class:"
"`WeakValueDictionary` to reduce the memory overhead for each entry in the "
"mapping.  This may be most useful to associate additional information with a "
"reference, but could also be used to insert additional processing on calls "
"to retrieve the referent."
msgstr ""
"Versões especializadas de objetos :class:`ref` podem ser criadas por meio de "
"subclasse. Isso é usado na implementação do :class:`WeakValueDictionary` "
"para reduzir a sobrecarga de memória para cada entrada no mapeamento. Isso "
"pode ser mais útil para associar informações adicionais a uma referência, "
"mas também pode ser usado para inserir processamento adicional em chamadas "
"para recuperar o referente."

#: ../../library/weakref.rst:373
msgid ""
"This example shows how a subclass of :class:`ref` can be used to store "
"additional information about an object and affect the value that's returned "
"when the referent is accessed::"
msgstr ""
"Este exemplo mostra como uma subclasse de :class:`ref` pode ser usada para "
"armazenar informações adicionais sobre um objeto e afetar o valor retornado "
"quando o referente é acessado::"

#: ../../library/weakref.rst:400
msgid "Example"
msgstr "Exemplo"

#: ../../library/weakref.rst:402
msgid ""
"This simple example shows how an application can use object IDs to retrieve "
"objects that it has seen before.  The IDs of the objects can then be used in "
"other data structures without forcing the objects to remain alive, but the "
"objects can still be retrieved by ID if they do."
msgstr ""
"Este exemplo simples mostra como uma aplicação pode usar IDs de objeto para "
"recuperar objetos que ele viu antes. Os IDs dos objetos podem então ser "
"usados ​​em outras estruturas de dados sem forçar os objetos a permanecerem "
"vivos, mas os objetos ainda podem ser recuperados por ID se o fizerem."

#: ../../library/weakref.rst:427
msgid "Finalizer Objects"
msgstr "Objetos finalizadores"

#: ../../library/weakref.rst:429
msgid ""
"The main benefit of using :class:`finalize` is that it makes it simple to "
"register a callback without needing to preserve the returned finalizer "
"object.  For instance"
msgstr ""
"O principal benefício de usar :class:`finalize` é que ele simplifica o "
"registro de um retorno de chamada sem precisar preservar o objeto "
"finalizador retornado. Por exemplo"

#: ../../library/weakref.rst:443
msgid ""
"The finalizer can be called directly as well.  However the finalizer will "
"invoke the callback at most once."
msgstr ""
"O finalizador pode ser chamado diretamente também. No entanto, o finalizador "
"vai invocar a função de retorno no máximo uma vez."

#: ../../library/weakref.rst:459
msgid ""
"You can unregister a finalizer using its :meth:`~finalize.detach` method.  "
"This kills the finalizer and returns the arguments passed to the constructor "
"when it was created."
msgstr ""
"Você pode desfazer o registro de um finalizador usando seu método :meth:"
"`~finalize.detach`. Isso elimina o finalizador e retorna os argumentos "
"passados ​​ao construtor quando ele foi criado."

#: ../../library/weakref.rst:473
msgid ""
"Unless you set the :attr:`~finalize.atexit` attribute to :const:`False`, a "
"finalizer will be called when the program exits if it is still alive.  For "
"instance"
msgstr ""
"A menos que você defina o atributo :attr:`~finalize.atexit` como :const:"
"`False`, um finalizador será chamado quando o programa sair se ele ainda "
"estiver vivo. Por exemplo"

#: ../../library/weakref.rst:488
msgid "Comparing finalizers with :meth:`__del__` methods"
msgstr ""

#: ../../library/weakref.rst:490
msgid ""
"Suppose we want to create a class whose instances represent temporary "
"directories.  The directories should be deleted with their contents when the "
"first of the following events occurs:"
msgstr ""
"Suponha que queremos criar uma classe cujas instâncias representam "
"diretórios temporários. Os diretórios devem ser excluídos com seus conteúdos "
"quando o primeiro dos seguintes eventos ocorrer:"

#: ../../library/weakref.rst:494
msgid "the object is garbage collected,"
msgstr "o objeto é um lixo coletado,"

#: ../../library/weakref.rst:495
msgid "the object's :meth:`remove` method is called, or"
msgstr ""

#: ../../library/weakref.rst:496
msgid "the program exits."
msgstr "o programa finaliza."

#: ../../library/weakref.rst:498
msgid ""
"We might try to implement the class using a :meth:`__del__` method as "
"follows::"
msgstr ""

#: ../../library/weakref.rst:517
msgid ""
"Starting with Python 3.4, :meth:`__del__` methods no longer prevent "
"reference cycles from being garbage collected, and module globals are no "
"longer forced to :const:`None` during :term:`interpreter shutdown`. So this "
"code should work without any issues on CPython."
msgstr ""

#: ../../library/weakref.rst:522
msgid ""
"However, handling of :meth:`__del__` methods is notoriously implementation "
"specific, since it depends on internal details of the interpreter's garbage "
"collector implementation."
msgstr ""

#: ../../library/weakref.rst:526
msgid ""
"A more robust alternative can be to define a finalizer which only references "
"the specific functions and objects that it needs, rather than having access "
"to the full state of the object::"
msgstr ""
"Uma alternativa mais robusta pode ser definir um finalizador que faça "
"referência apenas às funções e objetos específicos de que necessita, em vez "
"de ter acesso ao estado completo do objeto::"

#: ../../library/weakref.rst:542
msgid ""
"Defined like this, our finalizer only receives a reference to the details it "
"needs to clean up the directory appropriately. If the object never gets "
"garbage collected the finalizer will still be called at exit."
msgstr ""
"Definido assim, nosso finalizador recebe apenas uma referência aos detalhes "
"que ele precisa para limpar o diretório apropriadamente. Se o objeto nunca "
"for coletado como lixo, o finalizador ainda será chamado na saída."

#: ../../library/weakref.rst:546
msgid ""
"The other advantage of weakref based finalizers is that they can be used to "
"register finalizers for classes where the definition is controlled by a "
"third party, such as running code when a module is unloaded::"
msgstr ""
"A outra vantagem dos finalizadores baseados em referências fracas é que eles "
"podem ser usados ​​para registrar finalizadores para classes onde a definição "
"é controlada por terceiros, como executar código quando um módulo é "
"descarregado::"

#: ../../library/weakref.rst:558
msgid ""
"If you create a finalizer object in a daemonic thread just as the program "
"exits then there is the possibility that the finalizer does not get called "
"at exit.  However, in a daemonic thread :func:`atexit.register`, ``try: ... "
"finally: ...`` and ``with: ...`` do not guarantee that cleanup occurs either."
msgstr ""
"Se você criar um objeto finalizador em uma thread em um daemon assim que o "
"programa sair, então há a possibilidade de que o finalizador não seja "
"chamado na saída. No entanto, em um thread em um daemon :func:`atexit."
"register`, ``try: ... finally: ...`` e ``with: ...`` não garantem que a "
"limpeza ocorra também."
