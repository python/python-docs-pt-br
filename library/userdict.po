# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2017-02-19 16:08+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/"
"python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../library/userdict.rst:2
msgid ":mod:`UserDict` --- Class wrapper for dictionary objects"
msgstr ""

#: ../../library/userdict.rst:8
msgid "**Source code:** :source:`Lib/UserDict.py`"
msgstr ""

#: ../../library/userdict.rst:12
msgid ""
"The module defines a mixin,  :class:`DictMixin`, defining all dictionary "
"methods for classes that already have a minimum mapping interface.  This "
"greatly simplifies writing classes that need to be substitutable for "
"dictionaries (such as the shelve module)."
msgstr ""

#: ../../library/userdict.rst:17
msgid ""
"This module also defines a class, :class:`~UserDict.UserDict`, that acts as "
"a wrapper around dictionary objects.  The need for this class has been "
"largely supplanted by the ability to subclass directly from :class:`dict` (a "
"feature that became available starting with Python version 2.2).  Prior to "
"the introduction of :class:`dict`, the :class:`~UserDict.UserDict` class was "
"used to create dictionary-like sub-classes that obtained new behaviors by "
"overriding existing methods or adding new ones."
msgstr ""

#: ../../library/userdict.rst:25
msgid ""
"The :mod:`UserDict` module defines the :class:`~UserDict.UserDict` class "
"and :class:`DictMixin`:"
msgstr ""

#: ../../library/userdict.rst:31
msgid ""
"Class that simulates a dictionary.  The instance's contents are kept in a "
"regular dictionary, which is accessible via the :attr:`data` attribute of :"
"class:`~UserDict.UserDict` instances.  If *initialdata* is provided, :attr:"
"`data` is initialized with its contents; note that a reference to "
"*initialdata* will not be kept, allowing it be used for other purposes."
msgstr ""

#: ../../library/userdict.rst:39
msgid ""
"For backward compatibility, instances of :class:`~UserDict.UserDict` are not "
"iterable."
msgstr ""

#: ../../library/userdict.rst:44
msgid ""
"Subclass of :class:`~UserDict.UserDict` that supports direct iteration (e."
"g.  ``for key in myDict``)."
msgstr ""

#: ../../library/userdict.rst:47
msgid ""
"In addition to supporting the methods and operations of mappings (see "
"section :ref:`typesmapping`), :class:`~UserDict.UserDict` and :class:"
"`IterableUserDict` instances provide the following attribute:"
msgstr ""

#: ../../library/userdict.rst:54
msgid ""
"A real dictionary used to store the contents of the :class:`~UserDict."
"UserDict` class."
msgstr ""

#: ../../library/userdict.rst:59
msgid ""
"Mixin defining all dictionary methods for classes that already have a "
"minimum dictionary interface including :meth:`__getitem__`, :meth:"
"`__setitem__`, :meth:`__delitem__`, and :meth:`keys`."
msgstr ""

#: ../../library/userdict.rst:63
msgid ""
"This mixin should be used as a superclass.  Adding each of the above methods "
"adds progressively more functionality.  For instance, defining all but :meth:"
"`__delitem__` will preclude only :meth:`pop` and :meth:`popitem` from the "
"full interface."
msgstr ""

#: ../../library/userdict.rst:68
msgid ""
"In addition to the four base methods, progressively more efficiency comes "
"with defining :meth:`__contains__`, :meth:`__iter__`, and :meth:`iteritems`."
msgstr ""

#: ../../library/userdict.rst:71
msgid ""
"Since the mixin has no knowledge of the subclass constructor, it does not "
"define :meth:`__init__` or :meth:`copy`."
msgstr ""

#: ../../library/userdict.rst:74
msgid ""
"Starting with Python version 2.6, it is recommended to use :class:"
"`collections.MutableMapping` instead of :class:`DictMixin`."
msgstr ""

#: ../../library/userdict.rst:77
msgid ""
"Note that DictMixin does not implement the :meth:`~dict.viewkeys`, :meth:"
"`~dict.viewvalues`, or :meth:`~dict.viewitems` methods."
msgstr ""

#: ../../library/userdict.rst:81
msgid ":mod:`UserList` --- Class wrapper for list objects"
msgstr ""

#: ../../library/userdict.rst:89
msgid ""
"When Python 2.2 was released, many of the use cases for this class were "
"subsumed by the ability to subclass :class:`list` directly.  However, a "
"handful of use cases remain."
msgstr ""

#: ../../library/userdict.rst:93
msgid ""
"This module provides a list-interface around an underlying data store.  By "
"default, that data store is a :class:`list`; however, it can be used to wrap "
"a list-like interface around other objects (such as persistent storage)."
msgstr ""

#: ../../library/userdict.rst:97
msgid ""
"In addition, this class can be mixed-in with built-in classes using multiple "
"inheritance.  This can sometimes be useful.  For example, you can inherit "
"from :class:`~UserList.UserList` and :class:`str` at the same time.  That "
"would not be possible with both a real :class:`list` and a real :class:`str`."
msgstr ""

#: ../../library/userdict.rst:102
msgid ""
"This module defines a class that acts as a wrapper around list objects.  It "
"is a useful base class for your own list-like classes, which can inherit "
"from them and override existing methods or add new ones.  In this way one "
"can add new behaviors to lists."
msgstr ""

#: ../../library/userdict.rst:107
msgid ""
"The :mod:`UserList` module defines the :class:`~UserList.UserList` class:"
msgstr ""

#: ../../library/userdict.rst:112
msgid ""
"Class that simulates a list.  The instance's contents are kept in a regular "
"list, which is accessible via the :attr:`data` attribute of :class:"
"`~UserList.UserList` instances.  The instance's contents are initially set "
"to a copy of *list*, defaulting to the empty list ``[]``.  *list* can be any "
"iterable, e.g. a real Python list or a :class:`~UserList.UserList` object."
msgstr ""

#: ../../library/userdict.rst:119
msgid ""
"The :class:`~UserList.UserList` class has been moved to the :mod:"
"`collections` module in Python 3. The :term:`2to3` tool will automatically "
"adapt imports when converting your sources to Python 3."
msgstr ""

#: ../../library/userdict.rst:124
msgid ""
"In addition to supporting the methods and operations of mutable sequences "
"(see section :ref:`typesseq`), :class:`~UserList.UserList` instances provide "
"the following attribute:"
msgstr ""

#: ../../library/userdict.rst:131
msgid ""
"A real Python list object used to store the contents of the :class:"
"`~UserList.UserList` class."
msgstr ""

#: ../../library/userdict.rst:134
msgid ""
"**Subclassing requirements:** Subclasses of :class:`~UserList.UserList` are "
"expected to offer a constructor which can be called with either no arguments "
"or one argument.  List operations which return a new sequence attempt to "
"create an instance of the actual implementation class.  To do so, it assumes "
"that the constructor can be called with a single parameter, which is a "
"sequence object used as a data source."
msgstr ""

#: ../../library/userdict.rst:141
msgid ""
"If a derived class does not wish to comply with this requirement, all of the "
"special methods supported by this class will need to be overridden; please "
"consult the sources for information about the methods which need to be "
"provided in that case."
msgstr ""
"Se uma classe derivada não desejar atender a este requisito, todos os "
"métodos especiais suportados por esta classe precisarão ser substituídos; "
"consulte as fontes para obter informações sobre os métodos que precisam ser "
"fornecidos nesse caso."

#: ../../library/userdict.rst:146
msgid ""
"Python versions 1.5.2 and 1.6 also required that the constructor be callable "
"with no parameters, and offer a mutable :attr:`data` attribute.  Earlier "
"versions of Python did not attempt to create instances of the derived class."
msgstr ""

#: ../../library/userdict.rst:153
msgid ":mod:`UserString` --- Class wrapper for string objects"
msgstr ""

#: ../../library/userdict.rst:163
msgid ""
"This :class:`~UserString.UserString` class from this module is available for "
"backward compatibility only.  If you are writing code that does not need to "
"work with versions of Python earlier than Python 2.2, please consider "
"subclassing directly from the built-in :class:`str` type instead of using :"
"class:`~UserString.UserString` (there is no built-in equivalent to :class:"
"`MutableString`)."
msgstr ""

#: ../../library/userdict.rst:169
msgid ""
"This module defines a class that acts as a wrapper around string objects.  "
"It is a useful base class for your own string-like classes, which can "
"inherit from them and override existing methods or add new ones.  In this "
"way one can add new behaviors to strings."
msgstr ""

#: ../../library/userdict.rst:174
msgid ""
"It should be noted that these classes are highly inefficient compared to "
"real string or Unicode objects; this is especially the case for :class:"
"`MutableString`."
msgstr ""

#: ../../library/userdict.rst:178
msgid "The :mod:`UserString` module defines the following classes:"
msgstr ""

#: ../../library/userdict.rst:183
msgid ""
"Class that simulates a string or a Unicode string object.  The instance's "
"content is kept in a regular string or Unicode string object, which is "
"accessible via the :attr:`data` attribute of :class:`~UserString.UserString` "
"instances.  The instance's contents are initially set to a copy of "
"*sequence*.  *sequence* can be either a regular Python string or Unicode "
"string, an instance of :class:`~UserString.UserString` (or a subclass) or an "
"arbitrary sequence which can be converted into a string using the built-in :"
"func:`str` function."
msgstr ""

#: ../../library/userdict.rst:192
msgid ""
"The :class:`~UserString.UserString` class has been moved to the :mod:"
"`collections` module in Python 3. The :term:`2to3` tool will automatically "
"adapt imports when converting your sources to Python 3."
msgstr ""

#: ../../library/userdict.rst:200
msgid ""
"This class is derived from the :class:`~UserString.UserString` above and "
"redefines strings to be *mutable*.  Mutable strings can't be used as "
"dictionary keys, because dictionaries require *immutable* objects as keys.  "
"The main intention of this class is to serve as an educational example for "
"inheritance and necessity to remove (override) the :meth:`__hash__` method "
"in order to trap attempts to use a mutable object as dictionary key, which "
"would be otherwise very error prone and hard to track down."
msgstr ""

#: ../../library/userdict.rst:208
msgid "The :class:`MutableString` class has been removed in Python 3."
msgstr ""

#: ../../library/userdict.rst:211
msgid ""
"In addition to supporting the methods and operations of string and Unicode "
"objects (see section :ref:`string-methods`), :class:`~UserString.UserString` "
"instances provide the following attribute:"
msgstr ""

#: ../../library/userdict.rst:218
msgid ""
"A real Python string or Unicode object used to store the content of the :"
"class:`~UserString.UserString` class."
msgstr ""
