# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-11 17:17+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/shlex.rst:2
msgid ":mod:`shlex` --- Simple lexical analysis"
msgstr ":mod:`shlex` --- Análise léxica simples"

#: ../../library/shlex.rst:12
msgid "**Source code:** :source:`Lib/shlex.py`"
msgstr "**Código-fonte:** :source:`Lib/shlex.py`"

#: ../../library/shlex.rst:16
msgid ""
"The :class:`~shlex.shlex` class makes it easy to write lexical analyzers for "
"simple syntaxes resembling that of the Unix shell.  This will often be "
"useful for writing minilanguages, (for example, in run control files for "
"Python applications) or for parsing quoted strings."
msgstr ""
"Клас :class:`~shlex.shlex` дозволяє легко писати лексичні аналізатори для "
"простого синтаксису, схожого на синтаксис оболонки Unix. Це часто буде "
"корисно для написання міні-мов (наприклад, у файлах керування виконанням "
"програм Python) або для аналізу рядків у лапках."

#: ../../library/shlex.rst:21
msgid "The :mod:`shlex` module defines the following functions:"
msgstr "Модуль :mod:`shlex` визначає такі функції:"

#: ../../library/shlex.rst:26
msgid ""
"Split the string *s* using shell-like syntax. If *comments* is :const:"
"`False` (the default), the parsing of comments in the given string will be "
"disabled (setting the :attr:`~shlex.commenters` attribute of the :class:"
"`~shlex.shlex` instance to the empty string).  This function operates in "
"POSIX mode by default, but uses non-POSIX mode if the *posix* argument is "
"false."
msgstr ""
"Розділіть рядок *s* за допомогою синтаксису, подібного до оболонки. Якщо "
"*comments* має значення :const:`False` (за замовчуванням), розбір коментарів "
"у вказаному рядку буде вимкнено (встановлюється атрибут :attr:`~shlex."
"commenters` :class:`~shlex.shlex` до порожнього рядка). Ця функція за "
"замовчуванням працює в режимі POSIX, але використовує режим, відмінний від "
"POSIX, якщо аргумент *posix* має значення false."

#: ../../library/shlex.rst:35
msgid ""
"Since the :func:`split` function instantiates a :class:`~shlex.shlex` "
"instance, passing ``None`` for *s* will read the string to split from "
"standard input."
msgstr ""
"Оскільки функція :func:`split` створює екземпляр :class:`~shlex.shlex`, "
"передаючи ``None`` для *s*, буде прочитано рядок для розділення зі "
"стандартного введення."

#: ../../library/shlex.rst:39
msgid ""
"Passing ``None`` for *s* will raise an exception in future Python versions."
msgstr ""

#: ../../library/shlex.rst:45
msgid ""
"Concatenate the tokens of the list *split_command* and return a string. This "
"function is the inverse of :func:`split`."
msgstr ""
"Об’єднайте маркери списку *split_command* і поверніть рядок. Ця функція є "
"зворотною до :func:`split`."

#: ../../library/shlex.rst:52
msgid ""
"The returned value is shell-escaped to protect against injection "
"vulnerabilities (see :func:`quote`)."
msgstr ""
"Повернене значення екранується оболонкою, щоб захистити від уразливості "
"ін’єкції (див. :func:`quote`)."

#: ../../library/shlex.rst:60
msgid ""
"Return a shell-escaped version of the string *s*.  The returned value is a "
"string that can safely be used as one token in a shell command line, for "
"cases where you cannot use a list."
msgstr ""
"Повертає екрановану версію рядка *s*. Повернене значення — це рядок, який "
"можна безпечно використовувати як один маркер у командному рядку оболонки у "
"випадках, коли ви не можете використовувати список."

#: ../../library/shlex.rst:68
msgid "The ``shlex`` module is **only designed for Unix shells**."
msgstr "Модуль ``shlex`` призначений **лише для оболонок Unix**."

#: ../../library/shlex.rst:70
msgid ""
"The :func:`quote` function is not guaranteed to be correct on non-POSIX "
"compliant shells or shells from other operating systems such as Windows. "
"Executing commands quoted by this module on such shells can open up the "
"possibility of a command injection vulnerability."
msgstr ""
"Не гарантується, що функція :func:`quote` буде коректною для несумісних з "
"POSIX оболонок або оболонок інших операційних систем, таких як Windows. "
"Виконання команд, цитованих цим модулем, у таких оболонках може відкрити "
"ймовірність уразливості впровадження команд."

#: ../../library/shlex.rst:75
msgid ""
"Consider using functions that pass command arguments with lists such as :"
"func:`subprocess.run` with ``shell=False``."
msgstr ""
"Розгляньте можливість використання функцій, які передають аргументи команд "
"зі списками, наприклад :func:`subprocess.run` з ``shell=False``."

#: ../../library/shlex.rst:78
msgid "This idiom would be unsafe:"
msgstr "Este idioma seria inseguro:"

#: ../../library/shlex.rst:85
msgid ":func:`quote` lets you plug the security hole:"
msgstr ":func:`quote` дозволяє закрити дірку в безпеці:"

#: ../../library/shlex.rst:95
msgid "The quoting is compatible with UNIX shells and with :func:`split`:"
msgstr "Цитування сумісно з оболонками UNIX і з :func:`split`:"

#: ../../library/shlex.rst:107
msgid "The :mod:`shlex` module defines the following class:"
msgstr "Модуль :mod:`shlex` визначає такий клас:"

#: ../../library/shlex.rst:112
msgid ""
"A :class:`~shlex.shlex` instance or subclass instance is a lexical analyzer "
"object.  The initialization argument, if present, specifies where to read "
"characters from.  It must be a file-/stream-like object with :meth:`~io."
"TextIOBase.read` and :meth:`~io.TextIOBase.readline` methods, or a string.  "
"If no argument is given, input will be taken from ``sys.stdin``. The second "
"optional argument is a filename string, which sets the initial value of the :"
"attr:`~shlex.infile` attribute.  If the *instream* argument is omitted or "
"equal to ``sys.stdin``, this second argument defaults to \"stdin\".  The "
"*posix* argument defines the operational mode: when *posix* is not true "
"(default), the :class:`~shlex.shlex` instance will operate in compatibility "
"mode.  When operating in POSIX mode, :class:`~shlex.shlex` will try to be as "
"close as possible to the POSIX shell parsing rules.  The *punctuation_chars* "
"argument provides a way to make the behaviour even closer to how real shells "
"parse.  This can take a number of values: the default value, ``False``, "
"preserves the behaviour seen under Python 3.5 and earlier.  If set to "
"``True``, then parsing of the characters ``();<>|&`` is changed: any run of "
"these characters (considered punctuation characters) is returned as a single "
"token.  If set to a non-empty string of characters, those characters will be "
"used as the punctuation characters.  Any characters in the :attr:`wordchars` "
"attribute that appear in *punctuation_chars* will be removed from :attr:"
"`wordchars`.  See :ref:`improved-shell-compatibility` for more information. "
"*punctuation_chars* can be set only upon :class:`~shlex.shlex` instance "
"creation and can't be modified later."
msgstr ""
"Екземпляр :class:`~shlex.shlex` або екземпляр підкласу є об’єктом лексичного "
"аналізатора. Аргумент ініціалізації, якщо він присутній, визначає, звідки "
"читати символи. Це має бути файлоподібний/потоковий об’єкт із методами :meth:"
"`~io.TextIOBase.read` і :meth:`~io.TextIOBase.readline` або рядок. Якщо "
"аргумент не вказано, вхідні дані братимуться з ``sys.stdin``. Другим "
"необов’язковим аргументом є рядок імені файлу, який встановлює початкове "
"значення атрибута :attr:`~shlex.infile`. Якщо аргумент *instream* опущено "
"або дорівнює ``sys.stdin``, цей другий аргумент за умовчанням має значення "
"stdin. Аргумент *posix* визначає робочий режим: якщо *posix* не є істинним "
"(за замовчуванням), примірник :class:`~shlex.shlex` працюватиме в режимі "
"сумісності. Під час роботи в режимі POSIX :class:`~shlex.shlex` "
"намагатиметься бути якомога ближчим до правил розбору оболонки POSIX. "
"Аргумент *punctuation_chars* забезпечує спосіб зробити поведінку ще ближчою "
"до того, як розбирають справжні оболонки. Це може приймати кілька значень: "
"значення за замовчуванням, ``False``, зберігає поведінку, яку можна побачити "
"в Python 3.5 і раніше. Якщо встановлено значення ``True``, то розбір "
"символів ``(); <> |&`` змінено: будь-яке виконання цих символів (вважаються "
"знаками пунктуації) повертається як один маркер. Якщо встановлено непорожній "
"рядок символів, ці символи використовуватимуться як знаки пунктуації. Будь-"
"які символи в атрибуті :attr:`wordchars`, які з’являються в "
"*punctuation_chars*, будуть видалені з :attr:`wordchars`. Перегляньте :ref:"
"`improved-shell-compatibility` для отримання додаткової інформації. "
"*punctuation_chars* можна встановити лише під час створення екземпляра :"
"class:`~shlex.shlex` і не можна змінити пізніше."

#: ../../library/shlex.rst:137
msgid "The *punctuation_chars* parameter was added."
msgstr "Додано параметр *punctuation_chars*."

#: ../../library/shlex.rst:142
msgid "Module :mod:`configparser`"
msgstr "Модуль :mod:`configparser`"

#: ../../library/shlex.rst:143
msgid ""
"Parser for configuration files similar to the Windows :file:`.ini` files."
msgstr ""
"Синтаксичний аналізатор файлів конфігурації, подібних до файлів Windows :"
"file:`.ini`."

#: ../../library/shlex.rst:149
msgid "shlex Objects"
msgstr "Об'єкти shlex"

#: ../../library/shlex.rst:151
msgid "A :class:`~shlex.shlex` instance has the following methods:"
msgstr "Екземпляр :class:`~shlex.shlex` має такі методи:"

#: ../../library/shlex.rst:156
msgid ""
"Return a token.  If tokens have been stacked using :meth:`push_token`, pop a "
"token off the stack.  Otherwise, read one from the input stream.  If reading "
"encounters an immediate end-of-file, :attr:`eof` is returned (the empty "
"string (``''``) in non-POSIX mode, and ``None`` in POSIX mode)."
msgstr ""
"Повернути жетон. Якщо маркери були складені за допомогою :meth:`push_token`, "
"витягніть маркер зі стеку. В іншому випадку прочитайте один із вхідного "
"потоку. Якщо під час читання виникає негайний кінець файлу, повертається :"
"attr:`eof` (порожній рядок (``''``) у режимі, відмінному від POSIX, і "
"``None`` у режимі POSIX)."

#: ../../library/shlex.rst:164
msgid "Push the argument onto the token stack."
msgstr "Помістіть аргумент у стек маркерів."

#: ../../library/shlex.rst:169
msgid ""
"Read a raw token.  Ignore the pushback stack, and do not interpret source "
"requests.  (This is not ordinarily a useful entry point, and is documented "
"here only for the sake of completeness.)"
msgstr ""
"Прочитайте необроблений токен. Ігноруйте зворотний стек і не інтерпретуйте "
"запити джерела. (Це зазвичай не є корисною точкою входу, і задокументовано "
"тут лише для повноти.)"

#: ../../library/shlex.rst:176
msgid ""
"When :class:`~shlex.shlex` detects a source request (see :attr:`source` "
"below) this method is given the following token as argument, and expected to "
"return a tuple consisting of a filename and an open file-like object."
msgstr ""
"Коли :class:`~shlex.shlex` виявляє вихідний запит (див. :attr:`source` "
"нижче), цьому методу надається наступний маркер як аргумент і очікується, що "
"він поверне кортеж, що складається з імені файлу та відкритого файлу, "
"подібного об'єкт."

#: ../../library/shlex.rst:180
msgid ""
"Normally, this method first strips any quotes off the argument.  If the "
"result is an absolute pathname, or there was no previous source request in "
"effect, or the previous source was a stream (such as ``sys.stdin``), the "
"result is left alone.  Otherwise, if the result is a relative pathname, the "
"directory part of the name of the file immediately before it on the source "
"inclusion stack is prepended (this behavior is like the way the C "
"preprocessor handles ``#include \"file.h\"``)."
msgstr ""
"Зазвичай цей метод спочатку видаляє будь-які лапки з аргументу. Якщо "
"результатом є абсолютний шлях, або не було попереднього запиту джерела, або "
"попереднім джерелом був потік (наприклад, ``sys.stdin``), результат "
"залишається одним. В іншому випадку, якщо результатом є відносний шлях, "
"частина каталогу імені файлу безпосередньо перед ним у вихідному стеку "
"включення додається (така поведінка подібна до того, як препроцесор C "
"обробляє ``#include \"file.h\"``)."

#: ../../library/shlex.rst:188
msgid ""
"The result of the manipulations is treated as a filename, and returned as "
"the first component of the tuple, with :func:`open` called on it to yield "
"the second component. (Note: this is the reverse of the order of arguments "
"in instance initialization!)"
msgstr ""
"Результат маніпуляцій розглядається як ім’я файлу та повертається як перший "
"компонент кортежу з викликом :func:`open`, щоб отримати другий компонент. "
"(Примітка: це зворотний порядок аргументів під час ініціалізації екземпляра!)"

#: ../../library/shlex.rst:193
msgid ""
"This hook is exposed so that you can use it to implement directory search "
"paths, addition of file extensions, and other namespace hacks. There is no "
"corresponding 'close' hook, but a shlex instance will call the :meth:`~io."
"IOBase.close` method of the sourced input stream when it returns EOF."
msgstr ""
"Цей хук відкритий, щоб ви могли використовувати його для реалізації шляхів "
"пошуку в каталогах, додавання розширень файлів та інших хаків простору імен. "
"Немає відповідного хука 'close', але екземпляр shlex викличе метод :meth:"
"`~io.IOBase.close` вихідного вхідного потоку, коли він повертає EOF."

#: ../../library/shlex.rst:199
msgid ""
"For more explicit control of source stacking, use the :meth:`push_source` "
"and :meth:`pop_source` methods."
msgstr ""
"Для більш чіткого керування стеком джерела використовуйте методи :meth:"
"`push_source` і :meth:`pop_source`."

#: ../../library/shlex.rst:205
msgid ""
"Push an input source stream onto the input stack.  If the filename argument "
"is specified it will later be available for use in error messages.  This is "
"the same method used internally by the :meth:`sourcehook` method."
msgstr ""
"Надішліть потік джерела вхідних даних у стек вхідних даних. Якщо вказати "
"аргумент імені файлу, він пізніше буде доступний для використання в "
"повідомленнях про помилки. Це той самий метод, який внутрішньо "
"використовується методом :meth:`sourcehook`."

#: ../../library/shlex.rst:212
msgid ""
"Pop the last-pushed input source from the input stack. This is the same "
"method used internally when the lexer reaches EOF on a stacked input stream."
msgstr ""
"Витягніть джерело вхідного сигналу, надіслане востаннє, зі стеку вхідних "
"даних. Це той самий метод, який використовується внутрішньо, коли лексер "
"досягає EOF у складеному вхідному потоці."

#: ../../library/shlex.rst:218
msgid ""
"This method generates an error message leader in the format of a Unix C "
"compiler error label; the format is ``'\"%s\", line %d: '``, where the "
"``%s`` is replaced with the name of the current source file and the ``%d`` "
"with the current input line number (the optional arguments can be used to "
"override these)."
msgstr ""
"Цей метод генерує лідер повідомлення про помилку у форматі мітки помилки "
"компілятора Unix C; формат ``'\"%s\", line %d: '``, де ``%s`` замінюється "
"назвою поточного вихідного файлу, а ``%d`` поточним номером рядка введення "
"(додатковий аргументи можуть бути використані для перевизначення цих)."

#: ../../library/shlex.rst:223
msgid ""
"This convenience is provided to encourage :mod:`shlex` users to generate "
"error messages in the standard, parseable format understood by Emacs and "
"other Unix tools."
msgstr ""
"Ця зручність створена для заохочення користувачів :mod:`shlex` генерувати "
"повідомлення про помилки у стандартному форматі, який можна аналізувати, "
"зрозумілому Emacs та іншим інструментам Unix."

#: ../../library/shlex.rst:227
msgid ""
"Instances of :class:`~shlex.shlex` subclasses have some public instance "
"variables which either control lexical analysis or can be used for debugging:"
msgstr ""
"Екземпляри підкласів :class:`~shlex.shlex` мають деякі загальнодоступні "
"змінні екземпляра, які або контролюють лексичний аналіз, або можуть бути "
"використані для налагодження:"

#: ../../library/shlex.rst:233
msgid ""
"The string of characters that are recognized as comment beginners. All "
"characters from the comment beginner to end of line are ignored. Includes "
"just ``'#'`` by default."
msgstr ""
"Рядок символів, які розпізнаються як початкові коментарі. Усі символи від "
"початку коментаря до кінця рядка ігноруються. За замовчуванням містить лише "
"``''#'``."

#: ../../library/shlex.rst:240
msgid ""
"The string of characters that will accumulate into multi-character tokens.  "
"By default, includes all ASCII alphanumerics and underscore.  In POSIX mode, "
"the accented characters in the Latin-1 set are also included.  If :attr:"
"`punctuation_chars` is not empty, the characters ``~-./*?=``, which can "
"appear in filename specifications and command line parameters, will also be "
"included in this attribute, and any characters which appear in "
"``punctuation_chars`` will be removed from ``wordchars`` if they are present "
"there. If :attr:`whitespace_split` is set to ``True``, this will have no "
"effect."
msgstr ""
"Рядок символів, який накопичуватиметься в багатосимвольні маркери. За "
"замовчуванням включає всі буквено-цифрові символи ASCII і підкреслення. У "
"режимі POSIX також включені символи з наголосами в наборі Latin-1. Якщо :"
"attr:`punctuation_chars` не порожній, символи ``~-./*?=``, які можуть "
"з’являтися в специфікаціях імен файлів і параметрах командного рядка, також "
"будуть включені в цей атрибут, а також будь-які символи, які з’являються в "
"``punctuation_chars`` буде видалено з ``wordchars``, якщо вони там присутні. "
"Якщо :attr:`whitespace_split` має значення ``True``, це не матиме ефекту."

#: ../../library/shlex.rst:253
msgid ""
"Characters that will be considered whitespace and skipped.  Whitespace "
"bounds tokens.  By default, includes space, tab, linefeed and carriage-"
"return."
msgstr ""
"Символи, які вважатимуться пробілами та пропускатимуться. Пробіли обмежують "
"маркери. За замовчуванням включає пробіл, табуляцію, переведення рядка та "
"повернення каретки."

#: ../../library/shlex.rst:259
msgid ""
"Characters that will be considered as escape. This will be only used in "
"POSIX mode, and includes just ``'\\'`` by default."
msgstr ""
"Символи, які будуть вважатися втечею. Він використовуватиметься лише в "
"режимі POSIX і за замовчуванням включає лише ``'\\'``."

#: ../../library/shlex.rst:265
msgid ""
"Characters that will be considered string quotes.  The token accumulates "
"until the same quote is encountered again (thus, different quote types "
"protect each other as in the shell.)  By default, includes ASCII single and "
"double quotes."
msgstr ""
"Символи, які будуть вважатися лапками. Маркер накопичується, доки ті самі "
"лапки не зустрічаються знову (таким чином, різні типи лапок захищають один "
"одного, як і в оболонці). За замовчуванням включає одинарні та подвійні "
"лапки ASCII."

#: ../../library/shlex.rst:272
msgid ""
"Characters in :attr:`quotes` that will interpret escape characters defined "
"in :attr:`escape`.  This is only used in POSIX mode, and includes just "
"``'\"'`` by default."
msgstr ""
"Символи в :attr:`quotes`, які інтерпретуватимуть escape-символи, визначені "
"в :attr:`escape`. Це використовується лише в режимі POSIX і включає лише "
"``'\"'`` за замовчуванням."

#: ../../library/shlex.rst:279
msgid ""
"If ``True``, tokens will only be split in whitespaces.  This is useful, for "
"example, for parsing command lines with :class:`~shlex.shlex`, getting "
"tokens in a similar way to shell arguments.  When used in combination with :"
"attr:`punctuation_chars`, tokens will be split on whitespace in addition to "
"those characters."
msgstr ""
"Якщо ``True``, маркери будуть розділені лише пробілами. Це корисно, "
"наприклад, для аналізу командних рядків за допомогою :class:`~shlex.shlex`, "
"отримання токенів подібним чином до аргументів оболонки. При використанні в "
"поєднанні з :attr:`punctuation_chars`, маркери будуть розділені на пробіли "
"на додаток до цих символів."

#: ../../library/shlex.rst:285
msgid ""
"The :attr:`punctuation_chars` attribute was made compatible with the :attr:"
"`whitespace_split` attribute."
msgstr ""
"Атрибут :attr:`punctuation_chars` було зроблено сумісним з атрибутом :attr:"
"`whitespace_split`."

#: ../../library/shlex.rst:292
msgid ""
"The name of the current input file, as initially set at class instantiation "
"time or stacked by later source requests.  It may be useful to examine this "
"when constructing error messages."
msgstr ""
"Ім’я поточного вхідного файлу, початково встановлене під час створення "
"екземпляра класу або складене пізнішими запитами джерела. Це може бути "
"корисно вивчити під час створення повідомлень про помилки."

#: ../../library/shlex.rst:299
msgid ""
"The input stream from which this :class:`~shlex.shlex` instance is reading "
"characters."
msgstr ""
"Вхідний потік, з якого цей екземпляр :class:`~shlex.shlex` читає символи."

#: ../../library/shlex.rst:305
msgid ""
"This attribute is ``None`` by default.  If you assign a string to it, that "
"string will be recognized as a lexical-level inclusion request similar to "
"the ``source`` keyword in various shells.  That is, the immediately "
"following token will be opened as a filename and input will be taken from "
"that stream until EOF, at which point the :meth:`~io.IOBase.close` method of "
"that stream will be called and the input source will again become the "
"original input stream.  Source requests may be stacked any number of levels "
"deep."
msgstr ""
"Цей атрибут за замовчуванням має значення ``None``. Якщо ви призначите йому "
"рядок, цей рядок буде розпізнано як запит на включення на лексичному рівні, "
"подібний до ключового слова ``source`` у різних оболонках. Тобто наступний "
"токен відкриватиметься як ім’я файлу, а вхідні дані братимуться з цього "
"потоку до закінчення EOF, після чого буде викликано метод :meth:`~io.IOBase."
"close` цього потоку та джерело вхідних даних. знову стане вихідним вхідним "
"потоком. Запити джерела можуть бути складені на будь-яку кількість рівнів."

#: ../../library/shlex.rst:316
msgid ""
"If this attribute is numeric and ``1`` or more, a :class:`~shlex.shlex` "
"instance will print verbose progress output on its behavior.  If you need to "
"use this, you can read the module source code to learn the details."
msgstr ""
"Якщо цей атрибут є числовим і має ``1`` або більше, екземпляр :class:`~shlex."
"shlex` друкуватиме докладні дані про свою поведінку. Якщо вам потрібно "
"скористатися цим, ви можете прочитати вихідний код модуля, щоб дізнатися "
"подробиці."

#: ../../library/shlex.rst:323
msgid "Source line number (count of newlines seen so far plus one)."
msgstr ""
"Номер вихідного рядка (кількість нових рядків, побачених на даний момент "
"плюс один)."

#: ../../library/shlex.rst:328
msgid ""
"The token buffer.  It may be useful to examine this when catching exceptions."
msgstr ""
"Буфер маркера. Може бути корисно перевірити це під час перехоплення винятків."

#: ../../library/shlex.rst:333
msgid ""
"Token used to determine end of file. This will be set to the empty string "
"(``''``), in non-POSIX mode, and to ``None`` in POSIX mode."
msgstr ""
"Маркер, який використовується для визначення кінця файлу. Буде встановлено "
"порожній рядок (``''``) у режимі, відмінному від POSIX, і значення ``None`` "
"в режимі POSIX."

#: ../../library/shlex.rst:339
msgid ""
"A read-only property. Characters that will be considered punctuation. Runs "
"of punctuation characters will be returned as a single token. However, note "
"that no semantic validity checking will be performed: for example, '>>>' "
"could be returned as a token, even though it may not be recognised as such "
"by shells."
msgstr ""
"Властивість лише для читання. Символи, які вважатимуться розділовими. Серії "
"знаків пунктуації повертатимуться як один маркер. Однак зауважте, що "
"перевірка семантичної достовірності не виконуватиметься: наприклад, \">>>\" "
"може бути повернуто як маркер, навіть якщо він може бути не розпізнаний як "
"такий оболонками."

#: ../../library/shlex.rst:350
msgid "Parsing Rules"
msgstr "Regras de análise"

#: ../../library/shlex.rst:352
msgid ""
"When operating in non-POSIX mode, :class:`~shlex.shlex` will try to obey to "
"the following rules."
msgstr ""
"Під час роботи в режимі, відмінному від POSIX, :class:`~shlex.shlex` "
"намагатиметься дотримуватися наступних правил."

#: ../../library/shlex.rst:355
msgid ""
"Quote characters are not recognized within words (``Do\"Not\"Separate`` is "
"parsed as the single word ``Do\"Not\"Separate``);"
msgstr ""
"Символи лапок не розпізнаються всередині слів (``Do\"Not\"Separate`` "
"аналізується як одне слово ``Do\"Not\"Separate``);"

#: ../../library/shlex.rst:358
msgid "Escape characters are not recognized;"
msgstr "Екран-символи не розпізнаються;"

#: ../../library/shlex.rst:360
msgid ""
"Enclosing characters in quotes preserve the literal value of all characters "
"within the quotes;"
msgstr ""
"Укладання символів у лапки зберігає буквальне значення всіх символів у "
"лапках;"

#: ../../library/shlex.rst:363
msgid ""
"Closing quotes separate words (``\"Do\"Separate`` is parsed as ``\"Do\"`` "
"and ``Separate``);"
msgstr ""
"Закриваючі лапки відокремлюють слова (``\"Do\"Separate`` розбирається як "
"``\"Do\"`` і ``Separate``);"

#: ../../library/shlex.rst:366
msgid ""
"If :attr:`~shlex.whitespace_split` is ``False``, any character not declared "
"to be a word character, whitespace, or a quote will be returned as a single-"
"character token. If it is ``True``, :class:`~shlex.shlex` will only split "
"words in whitespaces;"
msgstr ""
"Якщо :attr:`~shlex.whitespace_split` має значення ``False``, будь-який "
"символ, не оголошений як символ слова, пробіл або лапка, буде повернуто як "
"односимвольний маркер. Якщо значення ``True``, :class:`~shlex.shlex` "
"розділятиме слова лише пробілами;"

#: ../../library/shlex.rst:371
msgid "EOF is signaled with an empty string (``''``);"
msgstr "EOF сигналізується порожнім рядком (``''``);"

#: ../../library/shlex.rst:373
msgid "It's not possible to parse empty strings, even if quoted."
msgstr ""
"Неможливо проаналізувати порожні рядки, навіть якщо вони взяті в лапки."

#: ../../library/shlex.rst:375
msgid ""
"When operating in POSIX mode, :class:`~shlex.shlex` will try to obey to the "
"following parsing rules."
msgstr ""
"Під час роботи в режимі POSIX :class:`~shlex.shlex` намагатиметься "
"підкорятися наступним правилам аналізу."

#: ../../library/shlex.rst:378
msgid ""
"Quotes are stripped out, and do not separate words "
"(``\"Do\"Not\"Separate\"`` is parsed as the single word ``DoNotSeparate``);"
msgstr ""
"Лапки видаляються й не розділяють слова (``\"Do\"Not\"Separate`` "
"розбирається як одне слово ``DoNotSeparate``);"

#: ../../library/shlex.rst:381
msgid ""
"Non-quoted escape characters (e.g. ``'\\'``) preserve the literal value of "
"the next character that follows;"
msgstr ""
"Екран-символи без лапок (наприклад, ``'\\'`` зберігають літеральне значення "
"наступного наступного символу;"

#: ../../library/shlex.rst:384
msgid ""
"Enclosing characters in quotes which are not part of :attr:`~shlex."
"escapedquotes` (e.g. ``\"'\"``) preserve the literal value of all characters "
"within the quotes;"
msgstr ""
"Взяття символів у лапки, які не є частиною :attr:`~shlex.escapedquotes` "
"(наприклад, ``\"'\"``), зберігає буквальне значення всіх символів у лапках;"

#: ../../library/shlex.rst:388
msgid ""
"Enclosing characters in quotes which are part of :attr:`~shlex."
"escapedquotes` (e.g. ``'\"'``) preserves the literal value of all characters "
"within the quotes, with the exception of the characters mentioned in :attr:"
"`~shlex.escape`.  The escape characters retain its special meaning only when "
"followed by the quote in use, or the escape character itself. Otherwise the "
"escape character will be considered a normal character."
msgstr ""
"Взяття в лапки символів, які є частиною :attr:`~shlex.escapedquotes` "
"(наприклад, ``'\"'``), зберігає буквальне значення всіх символів у лапках, "
"за винятком символів, згаданих у :attr:`~shlex.escape`. Екран-символи "
"зберігають своє особливе значення лише тоді, коли за ними йде "
"використовувана лапка або сам керуючий символ. Інакше керуючий символ "
"вважатиметься звичайним символом."

#: ../../library/shlex.rst:396
msgid "EOF is signaled with a :const:`None` value;"
msgstr "EOF сигналізується значенням :const:`None`;"

#: ../../library/shlex.rst:398
msgid "Quoted empty strings (``''``) are allowed."
msgstr "Допускаються порожні рядки в лапках (``''``)."

#: ../../library/shlex.rst:403
msgid "Improved Compatibility with Shells"
msgstr "Покращена сумісність із оболонками"

#: ../../library/shlex.rst:407
msgid ""
"The :class:`shlex` class provides compatibility with the parsing performed "
"by common Unix shells like ``bash``, ``dash``, and ``sh``.  To take "
"advantage of this compatibility, specify the ``punctuation_chars`` argument "
"in the constructor.  This defaults to ``False``, which preserves pre-3.6 "
"behaviour. However, if it is set to ``True``, then parsing of the characters "
"``();<>|&`` is changed: any run of these characters is returned as a single "
"token.  While this is short of a full parser for shells (which would be out "
"of scope for the standard library, given the multiplicity of shells out "
"there), it does allow you to perform processing of command lines more easily "
"than you could otherwise.  To illustrate, you can see the difference in the "
"following snippet:"
msgstr ""
"Клас :class:`shlex` забезпечує сумісність із синтаксичним аналізом, який "
"виконується звичайними оболонками Unix, такими як ``bash``, ``dash`` і "
"``sh``. Щоб скористатися перевагами цієї сумісності, вкажіть аргумент "
"``punctuation_chars`` у конструкторі. За замовчуванням встановлено "
"``False``, що зберігає поведінку до 3.6. Однак, якщо встановлено значення "
"``True``, тоді розбір символів ``(); <> |&`` змінено: будь-яке виконання цих "
"символів повертається як один маркер. Хоча це недостатньо повноцінного "
"синтаксичного аналізатора для оболонок (який був би поза межами стандартної "
"бібліотеки, враховуючи безліч оболонок), він дозволяє вам виконувати обробку "
"командних рядків легше, ніж ви могли б інакше. Для ілюстрації ви можете "
"побачити різницю в наступному фрагменті:"

#: ../../library/shlex.rst:433
msgid ""
"Of course, tokens will be returned which are not valid for shells, and "
"you'll need to implement your own error checks on the returned tokens."
msgstr ""
"Звичайно, буде повернуто маркери, які не є дійсними для оболонок, і вам "
"потрібно буде реалізувати власні перевірки помилок на повернутих маркерах."

#: ../../library/shlex.rst:436
msgid ""
"Instead of passing ``True`` as the value for the punctuation_chars "
"parameter, you can pass a string with specific characters, which will be "
"used to determine which characters constitute punctuation. For example::"
msgstr ""
"Замість передачі ``True`` як значення для параметра punctuation_chars, ви "
"можете передати рядок із певними символами, які використовуватимуться для "
"визначення того, які символи становлять пунктуацію. Наприклад::"

#: ../../library/shlex.rst:445
msgid ""
"When ``punctuation_chars`` is specified, the :attr:`~shlex.wordchars` "
"attribute is augmented with the characters ``~-./*?=``.  That is because "
"these characters can appear in file names (including wildcards) and command-"
"line arguments (e.g. ``--color=auto``). Hence::"
msgstr ""
"Якщо вказано ``punctuation_chars``, атрибут :attr:`~shlex.wordchars` "
"доповнюється символами ``~-./*?=``. Це пов’язано з тим, що ці символи можуть "
"з’являтися в назвах файлів (включаючи символи підстановки) та аргументах "
"командного рядка (наприклад, ``--color=auto``). Отже::"

#: ../../library/shlex.rst:456
msgid ""
"However, to match the shell as closely as possible, it is recommended to "
"always use ``posix`` and :attr:`~shlex.whitespace_split` when using :attr:"
"`~shlex.punctuation_chars`, which will negate :attr:`~shlex.wordchars` "
"entirely."
msgstr ""
"Однак, щоб якомога точніше відповідати оболонці, рекомендується завжди "
"використовувати ``posix`` і :attr:`~shlex.whitespace_split` під час "
"використання :attr:`~shlex.punctuation_chars`, що скасовує :attr:`~shlex."
"wordchars` повністю."

#: ../../library/shlex.rst:461
msgid ""
"For best effect, ``punctuation_chars`` should be set in conjunction with "
"``posix=True``. (Note that ``posix=False`` is the default for :class:`~shlex."
"shlex`.)"
msgstr ""
"Для найкращого ефекту ``punctuation_chars`` має бути встановлено в поєднанні "
"з ``posix=True``. (Зверніть увагу, що ``posix=False`` є типовим для :class:"
"`~shlex.shlex`.)"
