# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-13 17:35+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/collections.abc.rst:2
msgid ":mod:`collections.abc` --- Abstract Base Classes for Containers"
msgstr ":mod:`collections.abc` --- Classes Base Abstratas para Contêineres"

#: ../../library/collections.abc.rst:10
msgid "Formerly, this module was part of the :mod:`collections` module."
msgstr "Anteriormente, esse módulo fazia parte do módulo :mod:`collections`."

#: ../../library/collections.abc.rst:13
msgid "**Source code:** :source:`Lib/_collections_abc.py`"
msgstr "**Código-fonte:** :source:`Lib/_collections_abc.py`"

#: ../../library/collections.abc.rst:23
msgid ""
"This module provides :term:`abstract base classes <abstract base class>` "
"that can be used to test whether a class provides a particular interface; "
"for example, whether it is hashable or whether it is a mapping."
msgstr ""
"Esse módulo fornece :term:`classes base abstratas <abstract base class>` que "
"podem ser usadas para testar se uma classe fornece uma interface específica; "
"por exemplo, se é hashable ou se é um mapeamento."

#: ../../library/collections.abc.rst:27
msgid ""
"These abstract classes now support ``[]``. See :ref:`types-genericalias` "
"and :pep:`585`."
msgstr ""
"Essas classes abstratas agora oferecem suporte a ``[]``. Veja :ref:`types-"
"genericalias` e :pep:`585`."

#: ../../library/collections.abc.rst:34
msgid "Collections Abstract Base Classes"
msgstr "Classes Base Abstratas de Coleções"

#: ../../library/collections.abc.rst:36
msgid ""
"The collections module offers the following :term:`ABCs <abstract base "
"class>`:"
msgstr ""
"O módulo de coleções oferece o seguinte :term:`ABCs <abstract base class>`:"

#: ../../library/collections.abc.rst:41
msgid "ABC"
msgstr "ABC"

#: ../../library/collections.abc.rst:41
msgid "Inherits from"
msgstr "Herda de"

#: ../../library/collections.abc.rst:41
msgid "Abstract Methods"
msgstr "Métodos abstratos"

#: ../../library/collections.abc.rst:41
msgid "Mixin Methods"
msgstr "Métodos mixin"

#: ../../library/collections.abc.rst:43
msgid ":class:`Container`"
msgstr ":class:`Container`"

#: ../../library/collections.abc.rst:43
msgid "``__contains__``"
msgstr "``__contains__``"

#: ../../library/collections.abc.rst:44
msgid ":class:`Hashable`"
msgstr ":class:`Hashable`"

#: ../../library/collections.abc.rst:44
msgid "``__hash__``"
msgstr "``__hash__``"

#: ../../library/collections.abc.rst:45 ../../library/collections.abc.rst:46
#: ../../library/collections.abc.rst:47
msgid ":class:`Iterable`"
msgstr ":class:`Iterable`"

#: ../../library/collections.abc.rst:45 ../../library/collections.abc.rst:46
msgid "``__iter__``"
msgstr "``__iter__``"

#: ../../library/collections.abc.rst:46 ../../library/collections.abc.rst:48
msgid ":class:`Iterator`"
msgstr ":class:`Iterator`"

#: ../../library/collections.abc.rst:46
msgid "``__next__``"
msgstr "``__next__``"

#: ../../library/collections.abc.rst:47
msgid ":class:`Reversible`"
msgstr ":class:`Reversible`"

#: ../../library/collections.abc.rst:47
msgid "``__reversed__``"
msgstr "``__reversed__``"

#: ../../library/collections.abc.rst:48
msgid ":class:`Generator`"
msgstr ":class:`Generator`"

#: ../../library/collections.abc.rst:48 ../../library/collections.abc.rst:96
msgid "``send``, ``throw``"
msgstr "``send``, ``throw``"

#: ../../library/collections.abc.rst:48
msgid "``close``, ``__iter__``, ``__next__``"
msgstr "``close``, ``__iter__``, ``__next__``"

#: ../../library/collections.abc.rst:49 ../../library/collections.abc.rst:88
msgid ":class:`Sized`"
msgstr ":class:`Sized`"

#: ../../library/collections.abc.rst:49 ../../library/collections.abc.rst:88
msgid "``__len__``"
msgstr "``__len__``"

#: ../../library/collections.abc.rst:50
msgid ":class:`Callable`"
msgstr ":class:`Callable`"

#: ../../library/collections.abc.rst:50
msgid "``__call__``"
msgstr "``__call__``"

#: ../../library/collections.abc.rst:51 ../../library/collections.abc.rst:67
#: ../../library/collections.abc.rst:77
msgid ":class:`Collection`"
msgstr ":class:`Collection`"

#: ../../library/collections.abc.rst:51
msgid ":class:`Sized`, :class:`Iterable`, :class:`Container`"
msgstr ":class:`Sized`, :class:`Iterable`, :class:`Container`"

#: ../../library/collections.abc.rst:51 ../../library/collections.abc.rst:67
msgid "``__contains__``, ``__iter__``, ``__len__``"
msgstr "``__contains__``, ``__iter__``, ``__len__``"

#: ../../library/collections.abc.rst:55 ../../library/collections.abc.rst:58
#: ../../library/collections.abc.rst:64
msgid ":class:`Sequence`"
msgstr ":class:`Sequence`"

#: ../../library/collections.abc.rst:55
msgid ":class:`Reversible`, :class:`Collection`"
msgstr ":class:`Reversible`, :class:`Collection`"

#: ../../library/collections.abc.rst:55 ../../library/collections.abc.rst:64
msgid "``__getitem__``, ``__len__``"
msgstr "``__getitem__``, ``__len__``"

#: ../../library/collections.abc.rst:55
msgid ""
"``__contains__``, ``__iter__``, ``__reversed__``, ``index``, and ``count``"
msgstr ""
"``__contains__``, ``__iter__``, ``__reversed__``, ``index``, and ``count``"

#: ../../library/collections.abc.rst:58
msgid ":class:`MutableSequence`"
msgstr ":class:`MutableSequence`"

#: ../../library/collections.abc.rst:58
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``insert``"
msgstr ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``insert``"

#: ../../library/collections.abc.rst:58
msgid ""
"Inherited :class:`Sequence` methods and ``append``, ``reverse``, ``extend``, "
"``pop``, ``remove``, and ``__iadd__``"
msgstr ""
"Herdado os métodos da :class:`Sequence` e ``append``, ``reverse``, "
"``extend``, ``pop``, ``remove``, e ``__iadd__``"

#: ../../library/collections.abc.rst:64
msgid ":class:`ByteString`"
msgstr ":class:`ByteString`"

#: ../../library/collections.abc.rst:64
msgid "Inherited :class:`Sequence` methods"
msgstr "Herdados métodos de :class:`Sequence`"

#: ../../library/collections.abc.rst:67 ../../library/collections.abc.rst:71
msgid ":class:`Set`"
msgstr ":class:`Set`"

#: ../../library/collections.abc.rst:67
msgid ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__``, and ``isdisjoint``"
msgstr ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__``, e ``isdisjoint``"

#: ../../library/collections.abc.rst:71
msgid ":class:`MutableSet`"
msgstr ":class:`MutableSet`"

#: ../../library/collections.abc.rst:71
msgid "``__contains__``, ``__iter__``, ``__len__``, ``add``, ``discard``"
msgstr "``__contains__``, ``__iter__``, ``__len__``, ``add``, ``discard``"

#: ../../library/collections.abc.rst:71
msgid ""
"Inherited :class:`Set` methods and ``clear``, ``pop``, ``remove``, "
"``__ior__``, ``__iand__``, ``__ixor__``, and ``__isub__``"
msgstr ""
"Herdado :class:`Set` métodos e ``clear``, ``pop``, ``remove``, ``__ior__``, "
"``__iand__``, ``__ixor__``, e ``__isub__``"

#: ../../library/collections.abc.rst:77 ../../library/collections.abc.rst:81
msgid ":class:`Mapping`"
msgstr ":class:`Mapping`"

#: ../../library/collections.abc.rst:77
msgid "``__getitem__``, ``__iter__``, ``__len__``"
msgstr "``__getitem__``, ``__iter__``, ``__len__``"

#: ../../library/collections.abc.rst:77
msgid ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__``, and "
"``__ne__``"
msgstr ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__``, e "
"``__ne__``"

#: ../../library/collections.abc.rst:81
msgid ":class:`MutableMapping`"
msgstr ":class:`MutableMapping`"

#: ../../library/collections.abc.rst:81
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, ``__len__``"
msgstr ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, ``__len__``"

#: ../../library/collections.abc.rst:81
msgid ""
"Inherited :class:`Mapping` methods and ``pop``, ``popitem``, ``clear``, "
"``update``, and ``setdefault``"
msgstr ""
"Herdado :class:`Mapping` métodos e ``pop``, ``popitem``, ``clear``, "
"``update``, e ``setdefault``"

#: ../../library/collections.abc.rst:88
msgid ":class:`MappingView`"
msgstr ":class:`MappingView`"

#: ../../library/collections.abc.rst:89
msgid ":class:`ItemsView`"
msgstr ":class:`ItemsView`"

#: ../../library/collections.abc.rst:89 ../../library/collections.abc.rst:91
msgid ":class:`MappingView`, :class:`Set`"
msgstr ":class:`MappingView`, :class:`Set`"

#: ../../library/collections.abc.rst:89 ../../library/collections.abc.rst:91
#: ../../library/collections.abc.rst:93
msgid "``__contains__``, ``__iter__``"
msgstr "``__contains__``, ``__iter__``"

#: ../../library/collections.abc.rst:91
msgid ":class:`KeysView`"
msgstr ":class:`KeysView`"

#: ../../library/collections.abc.rst:93
msgid ":class:`ValuesView`"
msgstr ":class:`ValuesView`"

#: ../../library/collections.abc.rst:93
msgid ":class:`MappingView`, :class:`Collection`"
msgstr ":class:`MappingView`, :class:`Collection`"

#: ../../library/collections.abc.rst:95 ../../library/collections.abc.rst:96
msgid ":class:`Awaitable`"
msgstr ":class:`Awaitable`"

#: ../../library/collections.abc.rst:95
msgid "``__await__``"
msgstr "``__await__``"

#: ../../library/collections.abc.rst:96
msgid ":class:`Coroutine`"
msgstr ":class:`Coroutine`"

#: ../../library/collections.abc.rst:96
msgid "``close``"
msgstr "``close``"

#: ../../library/collections.abc.rst:97 ../../library/collections.abc.rst:98
msgid ":class:`AsyncIterable`"
msgstr ":class:`AsyncIterable`"

#: ../../library/collections.abc.rst:97 ../../library/collections.abc.rst:98
msgid "``__aiter__``"
msgstr "``__aiter__``"

#: ../../library/collections.abc.rst:98 ../../library/collections.abc.rst:99
msgid ":class:`AsyncIterator`"
msgstr ":class:`AsyncIterator`"

#: ../../library/collections.abc.rst:98
msgid "``__anext__``"
msgstr "``__anext__``"

#: ../../library/collections.abc.rst:99
msgid ":class:`AsyncGenerator`"
msgstr ":class:`AsyncGenerator`"

#: ../../library/collections.abc.rst:99
msgid "``asend``, ``athrow``"
msgstr "``asend``, ``athrow``"

#: ../../library/collections.abc.rst:99
msgid "``aclose``, ``__aiter__``, ``__anext__``"
msgstr "``aclose``, ``__aiter__``, ``__anext__``"

#: ../../library/collections.abc.rst:105
msgid "ABC for classes that provide the :meth:`__contains__` method."
msgstr "ABC para classes que fornecem o método :meth:`__contains__`."

#: ../../library/collections.abc.rst:109
msgid "ABC for classes that provide the :meth:`__hash__` method."
msgstr "ABC para classes que fornecem o método :meth:`__hash__`."

#: ../../library/collections.abc.rst:113
msgid "ABC for classes that provide the :meth:`__len__` method."
msgstr "ABC para classes que fornecem o método :meth:`__len__`."

#: ../../library/collections.abc.rst:117
msgid "ABC for classes that provide the :meth:`__call__` method."
msgstr "ABC para classes que fornecem o método :meth:`__call__`."

#: ../../library/collections.abc.rst:121
msgid "ABC for classes that provide the :meth:`__iter__` method."
msgstr "ABC para classes que fornecem o método :meth:`__iter__`."

#: ../../library/collections.abc.rst:123
msgid ""
"Checking ``isinstance(obj, Iterable)`` detects classes that are registered "
"as :class:`Iterable` or that have an :meth:`__iter__` method, but it does "
"not detect classes that iterate with the :meth:`__getitem__` method. The "
"only reliable way to determine whether an object is :term:`iterable` is to "
"call ``iter(obj)``."
msgstr ""
"A verificação ``isinstance(obj, Iterable)`` detecta classes que são "
"registradas como :class:`Iterable` ou que possuem um método :meth:"
"`__iter__`, mas que não detecta classes que iteram com o método :meth:"
"`__getitem__`. A única maneira confiável de determinar se um objeto é :term:"
"`iterável` é chamar ``iter(obj)``."

#: ../../library/collections.abc.rst:131
msgid "ABC for sized iterable container classes."
msgstr "ABC para classes de contêiner iterável de tamanho."

#: ../../library/collections.abc.rst:137
msgid ""
"ABC for classes that provide the :meth:`~iterator.__iter__` and :meth:"
"`~iterator.__next__` methods.  See also the definition of :term:`iterator`."
msgstr ""
"ABC para classes que fornecem os métodos :meth:`~iterator.__iter__` e "
"métodos :meth:`~iterator.__next__`. Veja também a definição de :term:"
"`iterator`."

#: ../../library/collections.abc.rst:143
msgid ""
"ABC for iterable classes that also provide the :meth:`__reversed__` method."
msgstr ""
"ABC para classes iteráveis que também fornecem o método :meth:`__reversed__`."

#: ../../library/collections.abc.rst:150
msgid ""
"ABC for generator classes that implement the protocol defined in :pep:`342` "
"that extends iterators with the :meth:`~generator.send`, :meth:`~generator."
"throw` and :meth:`~generator.close` methods. See also the definition of :"
"term:`generator`."
msgstr ""
"ABC para classes geradores que implementam o protocolo definido em :pep:"
"`342` que estende os iteradores com os métodos :meth:`~generator.send`, :"
"meth:`~generator.throw` e :meth:`~generator.close`. Veja também a definição "
"de :term:`gerador`."

#: ../../library/collections.abc.rst:161
msgid "ABCs for read-only and mutable :term:`sequences <sequence>`."
msgstr "ABCs para :term:`sequências <sequence>` somente de leitura e mutáveis."

#: ../../library/collections.abc.rst:163
msgid ""
"Implementation note: Some of the mixin methods, such as :meth:`__iter__`, :"
"meth:`__reversed__` and :meth:`index`, make repeated calls to the "
"underlying :meth:`__getitem__` method. Consequently, if :meth:`__getitem__` "
"is implemented with constant access speed, the mixin methods will have "
"linear performance; however, if the underlying method is linear (as it would "
"be with a linked list), the mixins will have quadratic performance and will "
"likely need to be overridden."
msgstr ""
"Nota de implementação: Alguns dos métodos mixin, como :meth:`__iter__`, :"
"meth:`__reversed__` e :meth:`index`, fazem chamadas repetidas para o método "
"subjacente :meth:`__getitem__`. Consequentemente, se :meth:`__getitem__` for "
"implementado com velocidade de acesso constante, os métodos mixin terão "
"desempenho linear; no entanto se o método subjacente for linear (como seria "
"com uma lista encadeada), os mixins terão desempenho quadrático e "
"provavelmente precisará ser substituído."

#: ../../library/collections.abc.rst:172
msgid "The index() method added support for *stop* and *start* arguments."
msgstr ""
"O método index() adicionou suporte para os argumentos *stop* e *start*."

#: ../../library/collections.abc.rst:179
msgid "ABCs for read-only and mutable sets."
msgstr "ABCs para sets somente leitura e mutável."

#: ../../library/collections.abc.rst:184
msgid "ABCs for read-only and mutable :term:`mappings <mapping>`."
msgstr "ABCs para somente leitura e mutável :term:`mappings <mapping>`."

#: ../../library/collections.abc.rst:191
msgid ""
"ABCs for mapping, items, keys, and values :term:`views <dictionary view>`."
msgstr ""
"ABCs para mapeamento, itens, chaves e valores :term:`views <dictionary "
"view>`."

#: ../../library/collections.abc.rst:195
msgid ""
"ABC for :term:`awaitable` objects, which can be used in :keyword:`await` "
"expressions.  Custom implementations must provide the :meth:`__await__` "
"method."
msgstr ""
"ABC para objetos :term:`aguardáveis <awaitable>`, que podem ser usados em "
"expressões de :keyword:`await`. Implementações personalizadas devem fornecer "
"o método :meth:`__await__`."

#: ../../library/collections.abc.rst:199
msgid ""
":term:`Coroutine <coroutine>` objects and instances of the :class:"
"`~collections.abc.Coroutine` ABC are all instances of this ABC."
msgstr ""
"Objetos e instâncias de :term:`corrotina <coroutine>` da ABC :class:"
"`~collections.abc.Coroutine` são todas instâncias dessa ABC."

#: ../../library/collections.abc.rst:203
msgid ""
"In CPython, generator-based coroutines (generators decorated with :func:"
"`types.coroutine` or :func:`asyncio.coroutine`) are *awaitables*, even "
"though they do not have an :meth:`__await__` method. Using "
"``isinstance(gencoro, Awaitable)`` for them will return ``False``. Use :func:"
"`inspect.isawaitable` to detect them."
msgstr ""
"No CPython, as corrotinas baseados em gerador (geradoras decorados com :func:"
"`types.coroutine` ou :func:`asyncio.coroutine`) são *awaitables*, embora não "
"possuam o método :meth:`__await__`. Usar ``isinstance(gencoro, Awaitable)`` "
"para eles retornará ``False``. Use :func:`inspect.isawaitable` para detectá-"
"los."

#: ../../library/collections.abc.rst:213
msgid ""
"ABC for coroutine compatible classes.  These implement the following "
"methods, defined in :ref:`coroutine-objects`: :meth:`~coroutine.send`, :meth:"
"`~coroutine.throw`, and :meth:`~coroutine.close`.  Custom implementations "
"must also implement :meth:`__await__`.  All :class:`Coroutine` instances are "
"also instances of :class:`Awaitable`.  See also the definition of :term:"
"`coroutine`."
msgstr ""
"ABC para classes compatíveis com corrotina. Eles implementam os seguintes "
"métodos, definidos em :ref:`coroutine-objects`: :meth:`~coroutine.send`, :"
"meth:`~coroutine.throw`, e :meth:`~coroutine.close`. Implementações "
"personalizadas também devem implementar :meth:`__await__`. Todas as "
"instâncias :class:`Coroutine` também são instâncias de :class:`Awaitable`. "
"Veja também a definição de :term:`corrotina`."

#: ../../library/collections.abc.rst:221
msgid ""
"In CPython, generator-based coroutines (generators decorated with :func:"
"`types.coroutine` or :func:`asyncio.coroutine`) are *awaitables*, even "
"though they do not have an :meth:`__await__` method. Using "
"``isinstance(gencoro, Coroutine)`` for them will return ``False``. Use :func:"
"`inspect.isawaitable` to detect them."
msgstr ""
"Em CPython, as corrotinas baseadas em gerador (geradores decorados com :func:"
"`types.coroutine` ou :func:`asyncio.coroutine`) são *awaitables*, embora não "
"possuam o método :meth:`__await__`. Usar ``isinstance(gencoro, Coroutine)`` "
"para eles retornará ``False``. Use :func:`inspect.isawaitable` para detectá-"
"los."

#: ../../library/collections.abc.rst:231
msgid ""
"ABC for classes that provide ``__aiter__`` method.  See also the definition "
"of :term:`asynchronous iterable`."
msgstr ""
"ABC para classes que fornecem o método ``__aiter__``. Veja também a "
"definição de :term:`iterável assíncrono`."

#: ../../library/collections.abc.rst:238
msgid ""
"ABC for classes that provide ``__aiter__`` and ``__anext__`` methods.  See "
"also the definition of :term:`asynchronous iterator`."
msgstr ""
"ABC para classes que fornecem os métodos ``__aiter__`` e ``__anext__``. Veja "
"também a definição de :term:`iterador assíncrono`."

#: ../../library/collections.abc.rst:245
msgid ""
"ABC for asynchronous generator classes that implement the protocol defined "
"in :pep:`525` and :pep:`492`."
msgstr ""
"ABC para classes de gerador assíncrono que implementam o protocolo definido "
"em :pep:`525` e :pep:`492`."

#: ../../library/collections.abc.rst:251
msgid ""
"These ABCs allow us to ask classes or instances if they provide particular "
"functionality, for example::"
msgstr ""
"Esses ABCs nos permitem perguntar a classes ou instâncias se elas fornecem "
"funcionalidades específicas, por exemplo::"

#: ../../library/collections.abc.rst:258
msgid ""
"Several of the ABCs are also useful as mixins that make it easier to develop "
"classes supporting container APIs.  For example, to write a class supporting "
"the full :class:`Set` API, it is only necessary to supply the three "
"underlying abstract methods: :meth:`__contains__`, :meth:`__iter__`, and :"
"meth:`__len__`. The ABC supplies the remaining methods such as :meth:"
"`__and__` and :meth:`isdisjoint`::"
msgstr ""
"Vários ABCS também são também úteis como mixins que facilitam o "
"desenvolvimento de classes que suportam APIs de contêiner. Por exemplo, para "
"escrever uma classe que suporte toda a API :class:`Set` , é necessário "
"fornecer apenas os três métodos abstratos subjacentes: :meth:"
"`__contains__`, :meth:`__iter__`, e :meth:`__len__`. O ABC fornece os "
"métodos restantes, como :meth:`__and__` e :meth:`isdisjoint`::"

#: ../../library/collections.abc.rst:287
msgid "Notes on using :class:`Set` and :class:`MutableSet` as a mixin:"
msgstr "Notas sobre o uso de :class:`Set` e :class:`MutableSet` como um mixin:"

#: ../../library/collections.abc.rst:290
msgid ""
"Since some set operations create new sets, the default mixin methods need a "
"way to create new instances from an iterable. The class constructor is "
"assumed to have a signature in the form ``ClassName(iterable)``. That "
"assumption is factored-out to an internal classmethod called :meth:"
"`_from_iterable` which calls ``cls(iterable)`` to produce a new set. If the :"
"class:`Set` mixin is being used in a class with a different constructor "
"signature, you will need to override :meth:`_from_iterable` with a "
"classmethod or regular method that can construct new instances from an "
"iterable argument."
msgstr ""
"Como algumas operações de conjunto criam novos conjuntos, os métodos de "
"mixin padrão precisam de uma maneira de criar novas instâncias a partir de "
"uma iterável. Supõe-se que a classe construtor tenha uma assinatura no "
"formato ``ClassName(iterable)``. Essa suposição é fatorada em um método de "
"classe interno chamado: :meth:`_from_iterable` que chama ``cls(iterable)`` "
"para produzir um novo conjunto. Se o mixin :class:`Set` estiver sendo usado "
"em uma classe com uma assinatura de construtor diferente, você precisará "
"substituir :meth:`_from_iterable` por um método de classe ou um método "
"regular que possa construir novas instâncias a partir de um argumento "
"iterável."

#: ../../library/collections.abc.rst:301
msgid ""
"To override the comparisons (presumably for speed, as the semantics are "
"fixed), redefine :meth:`__le__` and :meth:`__ge__`, then the other "
"operations will automatically follow suit."
msgstr ""
"Para substituir as comparações (presumivelmente para velocidade, já que a "
"semântica é fixa), redefina :meth:`__le__` e :meth:`__ge__`, então as outras "
"operações seguirão o exemplo automaticamente."

#: ../../library/collections.abc.rst:306
msgid ""
"The :class:`Set` mixin provides a :meth:`_hash` method to compute a hash "
"value for the set; however, :meth:`__hash__` is not defined because not all "
"sets are hashable or immutable.  To add set hashability using mixins, "
"inherit from both :meth:`Set` and :meth:`Hashable`, then define ``__hash__ = "
"Set._hash``."
msgstr ""
"O mixin :class:`Set` fornece um método :meth:`_hash` para calcular um valor "
"de hash para o conjunto; no entanto, :meth:`__hash__` não pe definido porque "
"nem todos os conjuntos são encadeados ou imutáveis. Para adicionar "
"capacidade de encadeamento em conjuntos usando mixin, herde de ambos :meth:"
"`Set` e :meth:`Hashable`, e então defina ``__hash__ = Set._hash``."

#: ../../library/collections.abc.rst:314
msgid ""
"`OrderedSet recipe <https://code.activestate.com/recipes/576694/>`_ for an "
"example built on :class:`MutableSet`."
msgstr ""
"`OrderedSet receita <https://code.activestate.com/recipes/576694/>`_ para um "
"exemplo baseado em :class:`MutableSet`."

#: ../../library/collections.abc.rst:317
msgid "For more about ABCs, see the :mod:`abc` module and :pep:`3119`."
msgstr ""
"Para mais informações sobre ABCs, consulte o módulo :mod:`abc` e :pep:`3119`."
