# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Raphael Mendonça, 2021
# i17obot <i17obot@rougeth.com>, 2021
# Lucas Rafaldini <lucas.rafaldini@gmail.com>, 2022
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-08 02:53-0300\n"
"PO-Revision-Date: 2021-06-28 01:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/wsgiref.rst:2
msgid ":mod:`!wsgiref` --- WSGI Utilities and Reference Implementation"
msgstr ":mod:`!wsgiref` --- Implementação de referência e utilitários WSGI"

#: ../../library/wsgiref.rst:10
msgid "**Source code:** :source:`Lib/wsgiref`"
msgstr "**Código-fonte:** :source:`Lib/wsgiref`"

#: ../../library/wsgiref.rst:14
msgid ""
"The Web Server Gateway Interface (WSGI) is a standard interface between web "
"server software and web applications written in Python. Having a standard "
"interface makes it easy to use an application that supports WSGI with a "
"number of different web servers."
msgstr ""
"A Interface de Gateway para Servidor Web (em inglês, Web Server Gateway "
"Interface - WSGI) é uma interface padrão localizada entre software de "
"servidores web e aplicações web escritas em Python. Ter um interface padrão "
"torna mais fácil a utilização de uma aplicação que suporta WSGI com inúmeros "
"diferentes servidores web."

#: ../../library/wsgiref.rst:19
msgid ""
"Only authors of web servers and programming frameworks need to know every "
"detail and corner case of the WSGI design.  You don't need to understand "
"every detail of WSGI just to install a WSGI application or to write a web "
"application using an existing framework."
msgstr ""
"Apenas autores de servidores web e frameworks de programação necessitam "
"saber todos os detalhes e especificidades do design WSGI. Você não precisa "
"entender todos os detalhes do WSGI para apenas instalar uma aplicação WSGI "
"ou para escrever uma aplicação web usando um framework existente."

#: ../../library/wsgiref.rst:24
msgid ""
":mod:`wsgiref` is a reference implementation of the WSGI specification that "
"can be used to add WSGI support to a web server or framework.  It provides "
"utilities for manipulating WSGI environment variables and response headers, "
"base classes for implementing WSGI servers, a demo HTTP server that serves "
"WSGI applications, types for static type checking, and a validation tool "
"that checks WSGI servers and applications for conformance to the WSGI "
"specification (:pep:`3333`)."
msgstr ""
":mod:`wsgiref` é uma implementação de referência da especificação WSGI que "
"pode ser utilizada para adicionar suporte WSGI em um servidor web ou "
"framework. Ele provê utilidades para manipulação de variáveis de ambiente "
"WSGI e cabeçalhos de respostas, classes base para implementação de "
"servidores WSGI, uma demo de um servidor HTTP que serve aplicações WSGI, "
"tipos para verificação de tipos estáticos e uma ferramenta de validação que "
"confere se servidores WSGI e aplicações estão de acordo com a especificação "
"WSGI (:pep:`3333`)."

#: ../../library/wsgiref.rst:32
msgid ""
"See `wsgi.readthedocs.io <https://wsgi.readthedocs.io/>`_ for more "
"information about WSGI, and links to tutorials and other resources."
msgstr ""
"Veja `wsgi.readthedocs.io <https://wsgi.readthedocs.io/>`_ para mais "
"informações sobre WSGI, além de links para tutoriais e outros recursos."

#: ../../library/wsgiref.rst:39
msgid ":mod:`wsgiref.util` -- WSGI environment utilities"
msgstr ":mod:`wsgiref.util` -- Utilidades do ambiente WSGI"

#: ../../library/wsgiref.rst:45
msgid ""
"This module provides a variety of utility functions for working with WSGI "
"environments.  A WSGI environment is a dictionary containing HTTP request "
"variables as described in :pep:`3333`.  All of the functions taking an "
"*environ* parameter expect a WSGI-compliant dictionary to be supplied; "
"please see :pep:`3333` for a detailed specification and :data:`~wsgiref."
"types.WSGIEnvironment` for a type alias that can be used in type annotations."
msgstr ""
"Este módulo fornece uma variedade de funções de utilidade para trabalhar com "
"ambientes WSGI. Um ambiente WSGI é um dicionário contendo variáveis de "
"solicitação HTTP, conforme descrito na :pep:`3333`. Todas as funções que "
"recebem um parâmetro *environ* esperam que um dicionário compatível com WSGI "
"seja fornecido; consulte a :pep:`3333` para uma especificação detalhada e :"
"data:`~wsgiref.types.WSGIEnvironment` para um apelido de tipo que pode ser "
"usado em anotações de tipos."

#: ../../library/wsgiref.rst:56
msgid ""
"Return a guess for whether ``wsgi.url_scheme`` should be \"http\" or "
"\"https\", by checking for a ``HTTPS`` environment variable in the *environ* "
"dictionary.  The return value is a string."
msgstr ""
"Retorna uma sugestão sobre ``wsgi.url_scheme`` ser \"http\" ou \"https\" "
"buscando por uma variável de ambiente ``HTTPS`` dentro do dicionário "
"*environ*. O valor de retorno é uma string."

#: ../../library/wsgiref.rst:60
msgid ""
"This function is useful when creating a gateway that wraps CGI or a CGI-like "
"protocol such as FastCGI.  Typically, servers providing such protocols will "
"include a ``HTTPS`` variable with a value of \"1\", \"yes\", or \"on\" when "
"a request is received via SSL.  So, this function returns \"https\" if such "
"a value is found, and \"http\" otherwise."
msgstr ""
"Esta função é útil ao criar um gateway que encapsula CGI ou um protocolo "
"semelhante a CGI, como FastCGI. Normalmente, servidores que fornecem tais "
"protocolos incluirão uma variável ``HTTPS`` com um valor de \"1\", \"yes\" "
"ou \"on\" quando uma solicitação é recebida via SSL. Então, esta função "
"retorna \"https\" se tal valor for encontrado, e \"http\" caso contrário."

#: ../../library/wsgiref.rst:69
msgid ""
"Return the full request URI, optionally including the query string, using "
"the algorithm found in the \"URL Reconstruction\" section of :pep:`3333`.  "
"If *include_query* is false, the query string is not included in the "
"resulting URI."
msgstr ""
"Retorna o URI de solicitação completo, opcionalmente incluindo a string de "
"consulta, usando o algoritmo encontrado na seção \"URL Reconstruction\" da :"
"pep:`3333`. Se *include_query* for falso, a string de consulta não será "
"incluída no URI resultante."

#: ../../library/wsgiref.rst:76
msgid ""
"Similar to :func:`request_uri`, except that the ``PATH_INFO`` and "
"``QUERY_STRING`` variables are ignored.  The result is the base URI of the "
"application object addressed by the request."
msgstr ""
"Semelhante a :func:`request_uri`, exceto que as variáveis ``PATH_INFO`` e "
"``QUERY_STRING`` são ignoradas. O resultado é o URI base do objeto da "
"aplicação endereçado pela solicitação."

#: ../../library/wsgiref.rst:83
msgid ""
"Shift a single name from ``PATH_INFO`` to ``SCRIPT_NAME`` and return the "
"name. The *environ* dictionary is *modified* in-place; use a copy if you "
"need to keep the original ``PATH_INFO`` or ``SCRIPT_NAME`` intact."
msgstr ""
"Desloca um único nome de ``PATH_INFO`` para ``SCRIPT_NAME`` e retorna o "
"nome. O dicionário *environ* é *modificado* no local; use uma cópia se "
"precisar manter o ``PATH_INFO`` ou ``SCRIPT_NAME`` original intacto."

#: ../../library/wsgiref.rst:87
msgid ""
"If there are no remaining path segments in ``PATH_INFO``, ``None`` is "
"returned."
msgstr ""
"Se não houver segmentos de caminho restantes em ``PATH_INFO``, ``None`` será "
"retornado."

#: ../../library/wsgiref.rst:89
msgid ""
"Typically, this routine is used to process each portion of a request URI "
"path, for example to treat the path as a series of dictionary keys. This "
"routine modifies the passed-in environment to make it suitable for invoking "
"another WSGI application that is located at the target URI. For example, if "
"there is a WSGI application at ``/foo``, and the request URI path is ``/foo/"
"bar/baz``, and the WSGI application at ``/foo`` calls :func:"
"`shift_path_info`, it will receive the string \"bar\", and the environment "
"will be updated to be suitable for passing to a WSGI application at ``/foo/"
"bar``.  That is, ``SCRIPT_NAME`` will change from ``/foo`` to ``/foo/bar``, "
"and ``PATH_INFO`` will change from ``/bar/baz`` to ``/baz``."
msgstr ""
"Normalmente, essa rotina é usada para processar cada porção de um caminho de "
"URI de solicitação, por exemplo, para tratar o caminho como uma série de "
"chaves de dicionário. Essa rotina modifica o ambiente passado para torná-lo "
"adequado para invocar outra aplicação WSGI localizada no URI de destino. Por "
"exemplo, se houver uma aplicação WSGI em ``/foo``, e o caminho de URI de "
"solicitação for ``/foo/bar/baz``, e a aplicação WSGI em ``/foo`` chamar :"
"func:`shift_path_info`, ele receberá a string \"bar\", e o ambiente será "
"atualizado para ser adequado para passar para uma aplicação WSGI em ``/foo/"
"bar``. Ou seja, ``SCRIPT_NAME`` mudará de ``/foo`` para ``/foo/bar``, e "
"``PATH_INFO`` mudará de ``/bar/baz`` para ``/baz``."

#: ../../library/wsgiref.rst:100
msgid ""
"When ``PATH_INFO`` is just a \"/\", this routine returns an empty string and "
"appends a trailing slash to ``SCRIPT_NAME``, even though empty path segments "
"are normally ignored, and ``SCRIPT_NAME`` doesn't normally end in a slash.  "
"This is intentional behavior, to ensure that an application can tell the "
"difference between URIs ending in ``/x`` from ones ending in ``/x/`` when "
"using this routine to do object traversal."
msgstr ""
"Quando ``PATH_INFO`` é apenas um \"/\", esta rotina retorna uma string vazia "
"e acrescenta uma barra final a ``SCRIPT_NAME``, embora segmentos de caminho "
"vazios sejam normalmente ignorados, e ``SCRIPT_NAME`` normalmente não "
"termine em uma barra. Este é um comportamento intencional, para garantir que "
"uma aplicação possa diferenciar URIs terminando em ``/x`` daqueles "
"terminando em ``/x/`` ao usar esta rotina para fazer travessia de objetos."

#: ../../library/wsgiref.rst:110
msgid "Update *environ* with trivial defaults for testing purposes."
msgstr "Atualiza *environ* com padrões triviais para fins de teste."

#: ../../library/wsgiref.rst:112
msgid ""
"This routine adds various parameters required for WSGI, including "
"``HTTP_HOST``, ``SERVER_NAME``, ``SERVER_PORT``, ``REQUEST_METHOD``, "
"``SCRIPT_NAME``, ``PATH_INFO``, and all of the :pep:`3333`\\ -defined ``wsgi."
"*`` variables.  It only supplies default values, and does not replace any "
"existing settings for these variables."
msgstr ""
"Esta rotina adiciona vários parâmetros necessários para WSGI, incluindo "
"``HTTP_HOST``, ``SERVER_NAME``, ``SERVER_PORT``, ``REQUEST_METHOD``, "
"``SCRIPT_NAME``, ``PATH_INFO`` e todas as variáveis ``wsgi.*`` definidas "
"pela :pep:`3333`. Ela fornece apenas valores padrão e não substitui nenhuma "
"configuração existente para essas variáveis."

#: ../../library/wsgiref.rst:118
msgid ""
"This routine is intended to make it easier for unit tests of WSGI servers "
"and applications to set up dummy environments.  It should NOT be used by "
"actual WSGI servers or applications, since the data is fake!"
msgstr ""
"Esta rotina tem como objetivo facilitar que testes unitários de servidores e "
"aplicações WSGI configurem ambientes fictícios. Ela NÃO deve ser usada por "
"servidores ou aplicações WSGI reais, pois os dados são falsos!"

#: ../../library/wsgiref.rst:122
msgid ""
"Example usage (see also :func:`~wsgiref.simple_server.demo_app` for another "
"example)::"
msgstr ""
"Exemplo de uso (veja também :func:`~wsgiref.simple_server.demo_app` para "
"outro exemplo)::"

#: ../../library/wsgiref.rst:125
msgid ""
"from wsgiref.util import setup_testing_defaults\n"
"from wsgiref.simple_server import make_server\n"
"\n"
"# A relatively simple WSGI application. It's going to print out the\n"
"# environment dictionary after being updated by setup_testing_defaults\n"
"def simple_app(environ, start_response):\n"
"    setup_testing_defaults(environ)\n"
"\n"
"    status = '200 OK'\n"
"    headers = [('Content-type', 'text/plain; charset=utf-8')]\n"
"\n"
"    start_response(status, headers)\n"
"\n"
"    ret = [(\"%s: %s\\n\" % (key, value)).encode(\"utf-8\")\n"
"           for key, value in environ.items()]\n"
"    return ret\n"
"\n"
"with make_server('', 8000, simple_app) as httpd:\n"
"    print(\"Serving on port 8000...\")\n"
"    httpd.serve_forever()"
msgstr ""
"from wsgiref.util import setup_testing_defaults\n"
"from wsgiref.simple_server import make_server\n"
"\n"
"# Uma aplicação WSGI relativamente simples. Vai exibir o dicionário\n"
"# do ambiente após ser atualizada por setup_testing_defaults\n"
"def simple_app(environ, start_response):\n"
"    setup_testing_defaults(environ)\n"
"\n"
"    status = '200 OK'\n"
"    headers = [('Content-type', 'text/plain; charset=utf-8')]\n"
"\n"
"    start_response(status, headers)\n"
"\n"
"    ret = [(\"%s: %s\\n\" % (key, value)).encode(\"utf-8\")\n"
"           for key, value in environ.items()]\n"
"    return ret\n"
"\n"
"with make_server('', 8000, simple_app) as httpd:\n"
"    print(\"Serving on port 8000...\")\n"
"    httpd.serve_forever()"

#: ../../library/wsgiref.rst:147
msgid ""
"In addition to the environment functions above, the :mod:`wsgiref.util` "
"module also provides these miscellaneous utilities:"
msgstr ""
"Além das funções de ambiente acima, o módulo :mod:`wsgiref.util` também "
"fornece estes utilitários diversos:"

#: ../../library/wsgiref.rst:153
msgid ""
"Return ``True`` if 'header_name' is an HTTP/1.1 \"Hop-by-Hop\" header, as "
"defined by :rfc:`2616`."
msgstr ""
"Retorna ``True`` se 'header_name' for um cabeçalho HTTP/1.1 \"Hop-by-Hop\", "
"conforme definido por :rfc:`2616`."

#: ../../library/wsgiref.rst:159
msgid ""
"A concrete implementation of the :class:`wsgiref.types.FileWrapper` protocol "
"used to convert a file-like object to an :term:`iterator`. The resulting "
"objects are :term:`iterable`\\ s. As the object is iterated over, the "
"optional *blksize* parameter will be repeatedly passed to the *filelike* "
"object's :meth:`read` method to obtain bytestrings to yield.  When :meth:"
"`read` returns an empty bytestring, iteration is ended and is not resumable."
msgstr ""
"Uma implementação concreta do protocolo :class:`wsgiref.types.FileWrapper` "
"usado para converter um objeto arquivo ou similar em um :term:`iterador`. Os "
"objetos resultantes são :term:`iteráveis <iterável>`. Conforme o objeto é "
"iterado, o parâmetro opcional *blksize* será repetidamente passado para o "
"método :meth:`read` do objeto *filelike* para obter bytestrings para "
"produzir. Quando :meth:`read` retorna uma string de bytes vazia, a iteração "
"é encerrada e não pode ser retomada."

#: ../../library/wsgiref.rst:167
msgid ""
"If *filelike* has a :meth:`close` method, the returned object will also have "
"a :meth:`close` method, and it will invoke the *filelike* object's :meth:"
"`close` method when called."
msgstr ""
"Se *filelike* tiver um método :meth:`close`, o objeto retornado também terá "
"um método :meth:`close` e invocará o método :meth:`close` do objeto "
"*filelike* quando chamado."

#: ../../library/wsgiref.rst:171 ../../library/wsgiref.rst:294
#: ../../library/wsgiref.rst:429
msgid "Example usage::"
msgstr "Exemplo de uso::"

#: ../../library/wsgiref.rst:173
msgid ""
"from io import StringIO\n"
"from wsgiref.util import FileWrapper\n"
"\n"
"# We're using a StringIO-buffer for as the file-like object\n"
"filelike = StringIO(\"This is an example file-like object\"*10)\n"
"wrapper = FileWrapper(filelike, blksize=5)\n"
"\n"
"for chunk in wrapper:\n"
"    print(chunk)"
msgstr ""
"from io import StringIO\n"
"from wsgiref.util import FileWrapper\n"
"\n"
"# Estamos usando um StringIO-buffer como objeto arquivo ou similar\n"
"filelike = StringIO(\"This is an example file-like object\"*10)\n"
"wrapper = FileWrapper(filelike, blksize=5)\n"
"\n"
"for chunk in wrapper:\n"
"    print(chunk)"

#: ../../library/wsgiref.rst:183
msgid "Support for :meth:`~object.__getitem__` method has been removed."
msgstr "O suporte para o método :meth:`~object.__getitem__` foi removido"

#: ../../library/wsgiref.rst:188
msgid ":mod:`wsgiref.headers` -- WSGI response header tools"
msgstr ":mod:`wsgiref.headers` -- Ferramentas de cabeçalho de resposta WSGI"

#: ../../library/wsgiref.rst:194
msgid ""
"This module provides a single class, :class:`Headers`, for convenient "
"manipulation of WSGI response headers using a mapping-like interface."
msgstr ""
"Este módulo fornece uma única classe, :class:`Headers`, para manipulação "
"conveniente de cabeçalhos de resposta WSGI usando uma interface semelhante a "
"mapeamento."

#: ../../library/wsgiref.rst:200
msgid ""
"Create a mapping-like object wrapping *headers*, which must be a list of "
"header name/value tuples as described in :pep:`3333`. The default value of "
"*headers* is an empty list."
msgstr ""
"Cria um objeto mapeamento envolvendo *headers*, que deve ser uma lista de "
"tuplas de nome/valor de cabeçalho, conforme descrito na :pep:`3333`. O valor "
"padrão de *headers* é uma lista vazia."

#: ../../library/wsgiref.rst:204
msgid ""
":class:`Headers` objects support typical mapping operations including :meth:"
"`~object.__getitem__`, :meth:`~dict.get`, :meth:`~object.__setitem__`, :meth:"
"`~dict.setdefault`, :meth:`~object.__delitem__` and :meth:`~object."
"__contains__`.  For each of these methods, the key is the header name "
"(treated case-insensitively), and the value is the first value associated "
"with that header name.  Setting a header deletes any existing values for "
"that header, then adds a new value at the end of the wrapped header list.  "
"Headers' existing order is generally maintained, with new headers added to "
"the end of the wrapped list."
msgstr ""
"Os objetos :class:`Headers` oferecem suporte a operações de mapeamento "
"típicas, incluindo :meth:`~object.__getitem__`, :meth:`~dict.get`, :meth:"
"`~object.__setitem__`, :meth:`~dict.setdefault`, :meth:`~object.__delitem__` "
"e :meth:`~object.__contains__`. Para cada um desses métodos, a chave é o "
"nome do cabeçalho (tratado sem distinção entre maiúsculas e minúsculas) e o "
"valor é o primeiro valor associado a esse nome de cabeçalho. Definir um "
"cabeçalho exclui quaisquer valores existentes para esse cabeçalho e, em "
"seguida, adiciona um novo valor ao final da lista de cabeçalhos "
"encapsulados. A ordem existente dos cabeçalhos geralmente é mantida, com "
"novos cabeçalhos adicionados ao final da lista encapsulada."

#: ../../library/wsgiref.rst:214
msgid ""
"Unlike a dictionary, :class:`Headers` objects do not raise an error when you "
"try to get or delete a key that isn't in the wrapped header list. Getting a "
"nonexistent header just returns ``None``, and deleting a nonexistent header "
"does nothing."
msgstr ""
"Diferentemente de um dicionário, objetos :class:`Headers` não levantam um "
"erro quando você tenta obter ou excluir uma chave que não está na lista de "
"cabeçalhos encapsulados. Obter um cabeçalho inexistente retorna apenas "
"``None``, e excluir um cabeçalho inexistente não faz nada."

#: ../../library/wsgiref.rst:219
msgid ""
":class:`Headers` objects also support :meth:`keys`, :meth:`values`, and :"
"meth:`items` methods.  The lists returned by :meth:`keys` and :meth:`items` "
"can include the same key more than once if there is a multi-valued header.  "
"The ``len()`` of a :class:`Headers` object is the same as the length of its :"
"meth:`items`, which is the same as the length of the wrapped header list.  "
"In fact, the :meth:`items` method just returns a copy of the wrapped header "
"list."
msgstr ""
"Os objetos :class:`Headers` também oferecem suporte aos métodos :meth:"
"`keys`, :meth:`values` e :meth:`items`. As listas retornadas por :meth:"
"`keys` e :meth:`items` podem incluir a mesma chave mais de uma vez se houver "
"um cabeçalho multivalorado. O ``len()`` de um objeto :class:`Headers` é o "
"mesmo que o comprimento de seus :meth:`items`, que é o mesmo que o "
"comprimento da lista de cabeçalhos encapsulados. Na verdade, o método :meth:"
"`items` apenas retorna uma cópia da lista de cabeçalhos encapsulados."

#: ../../library/wsgiref.rst:226
msgid ""
"Calling ``bytes()`` on a :class:`Headers` object returns a formatted "
"bytestring suitable for transmission as HTTP response headers.  Each header "
"is placed on a line with its value, separated by a colon and a space. Each "
"line is terminated by a carriage return and line feed, and the bytestring is "
"terminated with a blank line."
msgstr ""
"Chamar ``bytes()`` em um objeto :class:`Headers` retorna uma bytestring "
"formatada adequada para transmissão como cabeçalhos de resposta HTTP. Cada "
"cabeçalho é colocado em uma linha com seu valor, separado por dois pontos e "
"um espaço. Cada linha é terminada por um retorno de carro e uma quebra de "
"linha, e a bytestring é terminada com uma linha em branco."

#: ../../library/wsgiref.rst:232
msgid ""
"In addition to their mapping interface and formatting features, :class:"
"`Headers` objects also have the following methods for querying and adding "
"multi-valued headers, and for adding headers with MIME parameters:"
msgstr ""
"Além de sua interface de mapeamento e recursos de formatação, os objetos :"
"class:`Headers` também têm os seguintes métodos para consultar e adicionar "
"cabeçalhos multivalorados e para adicionar cabeçalhos com parâmetros MIME:"

#: ../../library/wsgiref.rst:239
msgid "Return a list of all the values for the named header."
msgstr "Retorna uma lista de todos os valores para o cabeçalho nomeado."

#: ../../library/wsgiref.rst:241
msgid ""
"The returned list will be sorted in the order they appeared in the original "
"header list or were added to this instance, and may contain duplicates.  Any "
"fields deleted and re-inserted are always appended to the header list.  If "
"no fields exist with the given name, returns an empty list."
msgstr ""
"A lista retornada será classificada na ordem em que apareceu na lista de "
"cabeçalho original ou foi adicionada a esta instância, e pode conter "
"duplicatas. Quaisquer campos excluídos e reinseridos são sempre anexados à "
"lista de cabeçalho. Se não houver campos com o nome fornecido, retorna uma "
"lista vazia."

#: ../../library/wsgiref.rst:249
msgid ""
"Add a (possibly multi-valued) header, with optional MIME parameters "
"specified via keyword arguments."
msgstr ""
"Adiciona um cabeçalho (possivelmente multivalorado), com parâmetros MIME "
"opcionais especificados por meio de argumentos nomeados."

#: ../../library/wsgiref.rst:252
msgid ""
"*name* is the header field to add.  Keyword arguments can be used to set "
"MIME parameters for the header field.  Each parameter must be a string or "
"``None``. Underscores in parameter names are converted to dashes, since "
"dashes are illegal in Python identifiers, but many MIME parameter names "
"include dashes.  If the parameter value is a string, it is added to the "
"header value parameters in the form ``name=\"value\"``. If it is ``None``, "
"only the parameter name is added. (This is used for MIME parameters without "
"a value.)  Example usage::"
msgstr ""
"*name* é o campo de cabeçalho a ser adicionado. Argumentos nomeados podem "
"ser usados para definir parâmetros MIME para o campo de cabeçalho. Cada "
"parâmetro deve ser uma string ou ``None``. Sublinhados em nomes de "
"parâmetros são convertidos em traços, já que traços são ilegais em "
"identificadores Python, mas muitos nomes de parâmetros MIME incluem traços. "
"Se o valor do parâmetro for uma string, ele será adicionado aos parâmetros "
"de valor do cabeçalho no formato ``name=\"value\"``. Se for ``None``, "
"somente o nome do parâmetro será adicionado. (Isso é usado para parâmetros "
"MIME sem um valor.) Exemplo de uso::"

#: ../../library/wsgiref.rst:260
msgid "h.add_header('content-disposition', 'attachment', filename='bud.gif')"
msgstr "h.add_header('content-disposition', 'attachment', filename='bud.gif')"

#: ../../library/wsgiref.rst:262
msgid "The above will add a header that looks like this::"
msgstr "O exemplo acima adicionará um cabeçalho parecido com este::"

#: ../../library/wsgiref.rst:264
msgid "Content-Disposition: attachment; filename=\"bud.gif\""
msgstr "Content-Disposition: attachment; filename=\"bud.gif\""

#: ../../library/wsgiref.rst:267
msgid "*headers* parameter is optional."
msgstr "o parâmetro *headers* é opcional."

#: ../../library/wsgiref.rst:272
msgid ":mod:`wsgiref.simple_server` -- a simple WSGI HTTP server"
msgstr ":mod:`wsgiref.simple_server` -- um servidor HTTP WSGI simples"

#: ../../library/wsgiref.rst:278
msgid ""
"This module implements a simple HTTP server (based on :mod:`http.server`) "
"that serves WSGI applications.  Each server instance serves a single WSGI "
"application on a given host and port.  If you want to serve multiple "
"applications on a single host and port, you should create a WSGI application "
"that parses ``PATH_INFO`` to select which application to invoke for each "
"request.  (E.g., using the :func:`shift_path_info` function from :mod:"
"`wsgiref.util`.)"
msgstr ""
"Este módulo implementa um servidor HTTP simples (com base em :mod:`http."
"server`) que serve aplicações WSGI. Cada instância de servidor serve uma "
"única aplicação WSGI em um host e porta fornecidos. Se você quiser servir "
"várias aplicações em um único host e porta, você deve criar uma aplicação "
"WSGI que analise ``PATH_INFO`` para selecionar qual aplicação invocar para "
"cada solicitação. (Por exemplo, usando a função :func:`shift_path_info` de :"
"mod:`wsgiref.util`.)"

#: ../../library/wsgiref.rst:289
msgid ""
"Create a new WSGI server listening on *host* and *port*, accepting "
"connections for *app*.  The return value is an instance of the supplied "
"*server_class*, and will process requests using the specified "
"*handler_class*.  *app* must be a WSGI application object, as defined by :"
"pep:`3333`."
msgstr ""
"Cria um novo servidor WSGI escutando em *host* e *port*, aceitando conexões "
"para *app*. O valor de retorno é uma instância da *server_class* fornecida e "
"processará solicitações usando a *handler_class* especificada. *app* deve "
"ser um objeto de aplicação WSGI, conforme definido pela :pep:`3333`."

#: ../../library/wsgiref.rst:296
msgid ""
"from wsgiref.simple_server import make_server, demo_app\n"
"\n"
"with make_server('', 8000, demo_app) as httpd:\n"
"    print(\"Serving HTTP on port 8000...\")\n"
"\n"
"    # Respond to requests until process is killed\n"
"    httpd.serve_forever()\n"
"\n"
"    # Alternative: serve one request, then exit\n"
"    httpd.handle_request()"
msgstr ""
"from wsgiref.simple_server import make_server, demo_app\n"
"\n"
"with make_server('', 8000, demo_app) as httpd:\n"
"    print(\"Serving HTTP on port 8000...\")\n"
"\n"
"    # Responde a solicitações até o processo ser encerrado\n"
"    httpd.serve_forever()\n"
"\n"
"    # Alternativa: serve uma solicitação e então sai\n"
"    httpd.handle_request()"

#: ../../library/wsgiref.rst:310
msgid ""
"This function is a small but complete WSGI application that returns a text "
"page containing the message \"Hello world!\" and a list of the key/value "
"pairs provided in the *environ* parameter.  It's useful for verifying that a "
"WSGI server (such as :mod:`wsgiref.simple_server`) is able to run a simple "
"WSGI application correctly."
msgstr ""
"Esta função é uma aplicação WSGI pequeno, mas completo, que retorna uma "
"página de texto contendo a mensagem \"Hello world!\" e uma lista dos pares "
"chave/valor fornecidos no parâmetro *environ*. É útil para verificar se um "
"servidor WSGI (como :mod:`wsgiref.simple_server`) é capaz de executar uma "
"aplicação WSGI simples corretamente."

#: ../../library/wsgiref.rst:316
msgid ""
"The *start_response* callable should follow the :class:`.StartResponse` "
"protocol."
msgstr ""
"O chamável *start_response* deve seguir o protocolo :class:`.StartResponse`."

#: ../../library/wsgiref.rst:321
msgid ""
"Create a :class:`WSGIServer` instance.  *server_address* should be a ``(host,"
"port)`` tuple, and *RequestHandlerClass* should be the subclass of :class:"
"`http.server.BaseHTTPRequestHandler` that will be used to process requests."
msgstr ""
"Cria uma instância :class:`WSGIServer`. *server_address* deve ser uma tupla "
"``(host,port)`` e *RequestHandlerClass* deve ser a subclasse de :class:`http."
"server.BaseHTTPRequestHandler` que será usada para processar solicitações."

#: ../../library/wsgiref.rst:326
msgid ""
"You do not normally need to call this constructor, as the :func:"
"`make_server` function can handle all the details for you."
msgstr ""
"Normalmente você não precisa chamar esse construtor, pois a função :func:"
"`make_server` pode cuidar de todos os detalhes para você."

#: ../../library/wsgiref.rst:329
msgid ""
":class:`WSGIServer` is a subclass of :class:`http.server.HTTPServer`, so all "
"of its methods (such as :meth:`serve_forever` and :meth:`handle_request`) "
"are available. :class:`WSGIServer` also provides these WSGI-specific methods:"
msgstr ""
":class:`WSGIServer` é uma subclasse de :class:`http.server.HTTPServer`, "
"então todos os seus métodos (como :meth:`serve_forever` e :meth:"
"`handle_request`) estão disponíveis. :class:`WSGIServer` também fornece "
"estes métodos específicos do WSGI:"

#: ../../library/wsgiref.rst:336
msgid ""
"Sets the callable *application* as the WSGI application that will receive "
"requests."
msgstr ""
"Define o chamável *application* como a aplicação WSGI que receberá "
"solicitações."

#: ../../library/wsgiref.rst:342
msgid "Returns the currently set application callable."
msgstr "Retorna o chamável da aplicação definido atualmente."

#: ../../library/wsgiref.rst:344
msgid ""
"Normally, however, you do not need to use these additional methods, as :meth:"
"`set_app` is normally called by :func:`make_server`, and the :meth:`get_app` "
"exists mainly for the benefit of request handler instances."
msgstr ""
"Normalmente, no entanto, você não precisa usar esses métodos adicionais, "
"pois :meth:`set_app` é normalmente chamado por :func:`make_server`, e :meth:"
"`get_app` existe principalmente para o benefício de instâncias do "
"manipulador de solicitações."

#: ../../library/wsgiref.rst:351
msgid ""
"Create an HTTP handler for the given *request* (i.e. a socket), "
"*client_address* (a ``(host,port)`` tuple), and *server* (:class:"
"`WSGIServer` instance)."
msgstr ""
"Cria um manipulador HTTP para *request* fornecido (isto é, um soquete), "
"*client_address* (uma tupla ``(host,port)``) e *server* (instância :class:"
"`WSGIServer`)."

#: ../../library/wsgiref.rst:354
msgid ""
"You do not need to create instances of this class directly; they are "
"automatically created as needed by :class:`WSGIServer` objects.  You can, "
"however, subclass this class and supply it as a *handler_class* to the :func:"
"`make_server` function.  Some possibly relevant methods for overriding in "
"subclasses:"
msgstr ""
"Você não precisa criar instâncias desta classe diretamente; elas são criadas "
"automaticamente conforme necessário pelos objetos :class:`WSGIServer`. Você "
"pode, no entanto, estender esta classe e fornecê-la como uma *handler_class* "
"para a função :func:`make_server`. Alguns métodos possivelmente relevantes "
"para substituir em subclasses:"

#: ../../library/wsgiref.rst:363
msgid ""
"Return a :data:`~wsgiref.types.WSGIEnvironment` dictionary for a request.  "
"The default implementation copies the contents of the :class:`WSGIServer` "
"object's :attr:`base_environ` dictionary attribute and then adds various "
"headers derived from the HTTP request.  Each call to this method should "
"return a new dictionary containing all of the relevant CGI environment "
"variables as specified in :pep:`3333`."
msgstr ""
"Retorna um dicionário :data:`~wsgiref.types.WSGIEnvironment` para uma "
"solicitação. A implementação padrão copia o conteúdo do atributo de "
"dicionário :attr:`base_environ` do objeto :class:`WSGIServer` e então "
"adiciona vários cabeçalhos derivados da solicitação HTTP. Cada chamada para "
"esse método deve retornar um novo dicionário contendo todas as variáveis ​​de "
"ambiente CGI relevantes conforme especificado na :pep:`3333`."

#: ../../library/wsgiref.rst:374
msgid ""
"Return the object that should be used as the ``wsgi.errors`` stream. The "
"default implementation just returns ``sys.stderr``."
msgstr ""
"Retorna o objeto que deve ser usado como o fluxo ``wsgi.errors``. A "
"implementação padrão retorna apenas ``sys.stderr``."

#: ../../library/wsgiref.rst:380
msgid ""
"Process the HTTP request.  The default implementation creates a handler "
"instance using a :mod:`wsgiref.handlers` class to implement the actual WSGI "
"application interface."
msgstr ""
"Processa a solicitação HTTP. A implementação padrão cria uma instância "
"manipuladora usando uma classe :mod:`wsgiref.handlers` para implementar a "
"interface da aplicação WSGI."

#: ../../library/wsgiref.rst:386
msgid ":mod:`wsgiref.validate` --- WSGI conformance checker"
msgstr ":mod:`wsgiref.validate` --- Verificador de conformidade WSGI"

#: ../../library/wsgiref.rst:392
msgid ""
"When creating new WSGI application objects, frameworks, servers, or "
"middleware, it can be useful to validate the new code's conformance using :"
"mod:`wsgiref.validate`.  This module provides a function that creates WSGI "
"application objects that validate communications between a WSGI server or "
"gateway and a WSGI application object, to check both sides for protocol "
"conformance."
msgstr ""
"Ao criar novos objetos de aplicação WSGI, frameworks, servidores ou "
"middleware, pode ser útil validar a conformidade do novo código usando :mod:"
"`wsgiref.validate`. Este módulo fornece uma função que cria objetos de "
"aplicação WSGI que validam comunicações entre um servidor ou gateway WSGI e "
"um objeto de aplicação WSGI, para verificar ambos os lados quanto à "
"conformidade do protocolo."

#: ../../library/wsgiref.rst:399
msgid ""
"Note that this utility does not guarantee complete :pep:`3333` compliance; "
"an absence of errors from this module does not necessarily mean that errors "
"do not exist.  However, if this module does produce an error, then it is "
"virtually certain that either the server or application is not 100% "
"compliant."
msgstr ""
"Note que este utilitário não garante a conformidade completa com :pep:"
"`3333`; uma ausência de erros deste módulo não significa necessariamente que "
"os erros não existam. No entanto, se este módulo produzir um erro, então é "
"virtualmente certo que o servidor ou a aplicação não está 100% em "
"conformidade."

#: ../../library/wsgiref.rst:404
msgid ""
"This module is based on the :mod:`paste.lint` module from Ian Bicking's "
"\"Python Paste\" library."
msgstr ""
"Este módulo é baseado no módulo :mod:`paste.lint` da biblioteca \"Python "
"Paste\" de Ian Bicking."

#: ../../library/wsgiref.rst:410
msgid ""
"Wrap *application* and return a new WSGI application object.  The returned "
"application will forward all requests to the original *application*, and "
"will check that both the *application* and the server invoking it are "
"conforming to the WSGI specification and to :rfc:`2616`."
msgstr ""
"Encapsula *application* e retorna um novo objeto de aplicação WSGI. A "
"aplicação retornada encaminhará todas as solicitações para a *application* "
"original e verificará se tanto a *application* quanto o servidor que o "
"invoca estão em conformidade com a especificação WSGI e com :rfc:`2616`."

#: ../../library/wsgiref.rst:415
msgid ""
"Any detected nonconformance results in an :exc:`AssertionError` being "
"raised; note, however, that how these errors are handled is server-"
"dependent.  For example, :mod:`wsgiref.simple_server` and other servers "
"based on :mod:`wsgiref.handlers` (that don't override the error handling "
"methods to do something else) will simply output a message that an error has "
"occurred, and dump the traceback to ``sys.stderr`` or some other error "
"stream."
msgstr ""
"Qualquer falta de conformidade detectada resulta em uma :exc:"
"`AssertionError` sendo levantado; note, entretanto, que a forma como esses "
"erros são manipulados depende do servidor. Por exemplo, :mod:`wsgiref."
"simple_server` e outros servidores baseados em :mod:`wsgiref.handlers` (que "
"não substituem os métodos de manipulação de erros para fazer outra coisa) "
"simplesmente emitirão uma mensagem de que ocorreu um erro e despejarão o "
"traceback para ``sys.stderr`` ou algum outro fluxo de erro."

#: ../../library/wsgiref.rst:422
msgid ""
"This wrapper may also generate output using the :mod:`warnings` module to "
"indicate behaviors that are questionable but which may not actually be "
"prohibited by :pep:`3333`.  Unless they are suppressed using Python command-"
"line options or the :mod:`warnings` API, any such warnings will be written "
"to ``sys.stderr`` (*not* ``wsgi.errors``, unless they happen to be the same "
"object)."
msgstr ""
"Este invólucro também pode gerar saída usando o módulo :mod:`warnings` para "
"indicar comportamentos que são questionáveis, mas que podem não ser "
"realmente proibidos por :pep:`3333`. A menos que sejam suprimidos usando "
"opções de linha de comando do Python ou a API :mod:`warnings`, quaisquer "
"avisos serão gravados em ``sys.stderr`` (*não* ``wsgi.errors``, a menos que "
"sejam o mesmo objeto)."

#: ../../library/wsgiref.rst:431
msgid ""
"from wsgiref.validate import validator\n"
"from wsgiref.simple_server import make_server\n"
"\n"
"# Our callable object which is intentionally not compliant to the\n"
"# standard, so the validator is going to break\n"
"def simple_app(environ, start_response):\n"
"    status = '200 OK'  # HTTP Status\n"
"    headers = [('Content-type', 'text/plain')]  # HTTP Headers\n"
"    start_response(status, headers)\n"
"\n"
"    # This is going to break because we need to return a list, and\n"
"    # the validator is going to inform us\n"
"    return b\"Hello World\"\n"
"\n"
"# This is the application wrapped in a validator\n"
"validator_app = validator(simple_app)\n"
"\n"
"with make_server('', 8000, validator_app) as httpd:\n"
"    print(\"Listening on port 8000....\")\n"
"    httpd.serve_forever()"
msgstr ""
"from wsgiref.validate import validator\n"
"from wsgiref.simple_server import make_server\n"
"\n"
"# Nosso objeto chamável que intencionalmente não está em\n"
"# conformidade com o padrão, então o validador irá quebrar\n"
"def simple_app(environ, start_response):\n"
"    status = '200 OK'  # HTTP Status\n"
"    headers = [('Content-type', 'text/plain')]  # HTTP Headers\n"
"    start_response(status, headers)\n"
"\n"
"    # Isso vai quebrar porque precisamos retornar uma lista,\n"
"    # e o validador vai nos informar\n"
"    return b\"Hello World\"\n"
"\n"
"# Este é a aplicação encapsulada em um validador\n"
"validator_app = validator(simple_app)\n"
"\n"
"with make_server('', 8000, validator_app) as httpd:\n"
"    print(\"Listening on port 8000....\")\n"
"    httpd.serve_forever()"

#: ../../library/wsgiref.rst:454
msgid ":mod:`wsgiref.handlers` -- server/gateway base classes"
msgstr ":mod:`wsgiref.handlers` -- classes base de servidor/gateway"

#: ../../library/wsgiref.rst:460
msgid ""
"This module provides base handler classes for implementing WSGI servers and "
"gateways.  These base classes handle most of the work of communicating with "
"a WSGI application, as long as they are given a CGI-like environment, along "
"with input, output, and error streams."
msgstr ""
"Este módulo fornece classes de manipulador base para implementar servidores "
"e gateways WSGI. Essas classes base lidam com a maior parte do trabalho de "
"comunicação com uma aplicação WSGI, desde que recebam um ambiente semelhante "
"ao CGI, junto com fluxos de entrada, saída e erro."

#: ../../library/wsgiref.rst:468
msgid ""
"CGI-based invocation via ``sys.stdin``, ``sys.stdout``, ``sys.stderr`` and "
"``os.environ``.  This is useful when you have a WSGI application and want to "
"run it as a CGI script.  Simply invoke ``CGIHandler().run(app)``, where "
"``app`` is the WSGI application object you wish to invoke."
msgstr ""
"Invocação baseada em CGI via ``sys.stdin``, ``sys.stdout``, ``sys.stderr`` e "
"``os.environ``. Isso é útil quando você tem uma aplicação WSGI e quer "
"executá-lo como um script CGI. Basta invocar ``CGIHandler().run(app)``, onde "
"``app`` é o objeto da aplicação WSGI que você deseja invocar."

#: ../../library/wsgiref.rst:473
msgid ""
"This class is a subclass of :class:`BaseCGIHandler` that sets ``wsgi."
"run_once`` to true, ``wsgi.multithread`` to false, and ``wsgi.multiprocess`` "
"to true, and always uses :mod:`sys` and :mod:`os` to obtain the necessary "
"CGI streams and environment."
msgstr ""
"Esta classe é uma subclasse de :class:`BaseCGIHandler` que define ``wsgi."
"run_once`` como true, ``wsgi.multithread`` como false e ``wsgi."
"multiprocess`` como true, e sempre usa :mod:`sys` e :mod:`os` para obter os "
"fluxos CGI e o ambiente necessários."

#: ../../library/wsgiref.rst:481
msgid ""
"A specialized alternative to :class:`CGIHandler`, for use when deploying on "
"Microsoft's IIS web server, without having set the config allowPathInfo "
"option (IIS>=7) or metabase allowPathInfoForScriptMappings (IIS<7)."
msgstr ""
"Uma alternativa especializada para :class:`CGIHandler`, para uso ao "
"implantar no servidor web IIS da Microsoft, sem ter definido a opção de "
"configuração allowPathInfo (IIS>=7) ou metabase "
"allowPathInfoForScriptMappings (IIS<7)."

#: ../../library/wsgiref.rst:485
msgid ""
"By default, IIS gives a ``PATH_INFO`` that duplicates the ``SCRIPT_NAME`` at "
"the front, causing problems for WSGI applications that wish to implement "
"routing. This handler strips any such duplicated path."
msgstr ""
"Por padrão, o IIS fornece um ``PATH_INFO`` que duplica o ``SCRIPT_NAME`` na "
"frente, causando problemas para aplicações WSGI que desejam implementar "
"roteamento. Este manipulador remove qualquer caminho duplicado."

#: ../../library/wsgiref.rst:489
msgid ""
"IIS can be configured to pass the correct ``PATH_INFO``, but this causes "
"another bug where ``PATH_TRANSLATED`` is wrong. Luckily this variable is "
"rarely used and is not guaranteed by WSGI. On IIS<7, though, the setting can "
"only be made on a vhost level, affecting all other script mappings, many of "
"which break when exposed to the ``PATH_TRANSLATED`` bug. For this reason "
"IIS<7 is almost never deployed with the fix (Even IIS7 rarely uses it "
"because there is still no UI for it.)."
msgstr ""
"O IIS pode ser configurado para passar o ``PATH_INFO`` correto, mas isso "
"causa outro bug onde ``PATH_TRANSLATED`` está errado. Felizmente, essa "
"variável raramente é usada e não é garantida pelo WSGI. No IIS<7, no "
"entanto, a configuração só pode ser feita em um nível de vhost, afetando "
"todos os outros mapeamentos de script, muitos dos quais quebram quando "
"expostos ao bug ``PATH_TRANSLATED``. Por esse motivo, o IIS<7 quase nunca é "
"implantado com a correção (mesmo o IIS7 raramente a usa porque ainda não há "
"uma UI para ela)."

#: ../../library/wsgiref.rst:497
msgid ""
"There is no way for CGI code to tell whether the option was set, so a "
"separate handler class is provided.  It is used in the same way as :class:"
"`CGIHandler`, i.e., by calling ``IISCGIHandler().run(app)``, where ``app`` "
"is the WSGI application object you wish to invoke."
msgstr ""
"Não há como o código CGI dizer se a opção foi definida, então uma classe de "
"manipulador separada é fornecida. Ela é usada da mesma forma que :class:"
"`CGIHandler`, ou seja, chamando ``IISCGIHandler().run(app)``, onde ``app`` é "
"o objeto de aplicação WSGI que você deseja invocar."

#: ../../library/wsgiref.rst:507
msgid ""
"Similar to :class:`CGIHandler`, but instead of using the :mod:`sys` and :mod:"
"`os` modules, the CGI environment and I/O streams are specified explicitly. "
"The *multithread* and *multiprocess* values are used to set the ``wsgi."
"multithread`` and ``wsgi.multiprocess`` flags for any applications run by "
"the handler instance."
msgstr ""

#: ../../library/wsgiref.rst:513
msgid ""
"This class is a subclass of :class:`SimpleHandler` intended for use with "
"software other than HTTP \"origin servers\".  If you are writing a gateway "
"protocol implementation (such as CGI, FastCGI, SCGI, etc.) that uses a "
"``Status:`` header to send an HTTP status, you probably want to subclass "
"this instead of :class:`SimpleHandler`."
msgstr ""

#: ../../library/wsgiref.rst:522
msgid ""
"Similar to :class:`BaseCGIHandler`, but designed for use with HTTP origin "
"servers.  If you are writing an HTTP server implementation, you will "
"probably want to subclass this instead of :class:`BaseCGIHandler`."
msgstr ""

#: ../../library/wsgiref.rst:526
msgid ""
"This class is a subclass of :class:`BaseHandler`.  It overrides the :meth:`!"
"__init__`, :meth:`~BaseHandler.get_stdin`, :meth:`~BaseHandler.get_stderr`, :"
"meth:`~BaseHandler.add_cgi_vars`, :meth:`~BaseHandler._write`, and :meth:"
"`~BaseHandler._flush` methods to support explicitly setting the environment "
"and streams via the constructor.  The supplied environment and streams are "
"stored in the :attr:`stdin`, :attr:`stdout`, :attr:`stderr`, and :attr:"
"`environ` attributes."
msgstr ""

#: ../../library/wsgiref.rst:535
msgid ""
"The :meth:`~io.BufferedIOBase.write` method of *stdout* should write each "
"chunk in full, like :class:`io.BufferedIOBase`."
msgstr ""

#: ../../library/wsgiref.rst:541
msgid ""
"This is an abstract base class for running WSGI applications.  Each instance "
"will handle a single HTTP request, although in principle you could create a "
"subclass that was reusable for multiple requests."
msgstr ""

#: ../../library/wsgiref.rst:545
msgid ""
":class:`BaseHandler` instances have only one method intended for external "
"use:"
msgstr ""

#: ../../library/wsgiref.rst:550
msgid "Run the specified WSGI application, *app*."
msgstr ""

#: ../../library/wsgiref.rst:552
msgid ""
"All of the other :class:`BaseHandler` methods are invoked by this method in "
"the process of running the application, and thus exist primarily to allow "
"customizing the process."
msgstr ""

#: ../../library/wsgiref.rst:556
msgid "The following methods MUST be overridden in a subclass:"
msgstr ""

#: ../../library/wsgiref.rst:561
msgid ""
"Buffer the bytes *data* for transmission to the client.  It's okay if this "
"method actually transmits the data; :class:`BaseHandler` just separates "
"write and flush operations for greater efficiency when the underlying system "
"actually has such a distinction."
msgstr ""

#: ../../library/wsgiref.rst:569
msgid ""
"Force buffered data to be transmitted to the client.  It's okay if this "
"method is a no-op (i.e., if :meth:`_write` actually sends the data)."
msgstr ""

#: ../../library/wsgiref.rst:575
msgid ""
"Return an object compatible with :class:`~wsgiref.types.InputStream` "
"suitable for use as the ``wsgi.input`` of the request currently being "
"processed."
msgstr ""

#: ../../library/wsgiref.rst:582
msgid ""
"Return an object compatible with :class:`~wsgiref.types.ErrorStream` "
"suitable for use as the ``wsgi.errors`` of the request currently being "
"processed."
msgstr ""

#: ../../library/wsgiref.rst:589
msgid ""
"Insert CGI variables for the current request into the :attr:`environ` "
"attribute."
msgstr ""

#: ../../library/wsgiref.rst:591
msgid ""
"Here are some other methods and attributes you may wish to override. This "
"list is only a summary, however, and does not include every method that can "
"be overridden.  You should consult the docstrings and source code for "
"additional information before attempting to create a customized :class:"
"`BaseHandler` subclass."
msgstr ""

#: ../../library/wsgiref.rst:597
msgid "Attributes and methods for customizing the WSGI environment:"
msgstr ""

#: ../../library/wsgiref.rst:602
msgid ""
"The value to be used for the ``wsgi.multithread`` environment variable.  It "
"defaults to true in :class:`BaseHandler`, but may have a different default "
"(or be set by the constructor) in the other subclasses."
msgstr ""

#: ../../library/wsgiref.rst:609
msgid ""
"The value to be used for the ``wsgi.multiprocess`` environment variable.  It "
"defaults to true in :class:`BaseHandler`, but may have a different default "
"(or be set by the constructor) in the other subclasses."
msgstr ""

#: ../../library/wsgiref.rst:616
msgid ""
"The value to be used for the ``wsgi.run_once`` environment variable.  It "
"defaults to false in :class:`BaseHandler`, but :class:`CGIHandler` sets it "
"to true by default."
msgstr ""

#: ../../library/wsgiref.rst:623
msgid ""
"The default environment variables to be included in every request's WSGI "
"environment.  By default, this is a copy of ``os.environ`` at the time that :"
"mod:`wsgiref.handlers` was imported, but subclasses can either create their "
"own at the class or instance level.  Note that the dictionary should be "
"considered read-only, since the default value is shared between multiple "
"classes and instances."
msgstr ""

#: ../../library/wsgiref.rst:633
msgid ""
"If the :attr:`origin_server` attribute is set, this attribute's value is "
"used to set the default ``SERVER_SOFTWARE`` WSGI environment variable, and "
"also to set a default ``Server:`` header in HTTP responses.  It is ignored "
"for handlers (such as :class:`BaseCGIHandler` and :class:`CGIHandler`) that "
"are not HTTP origin servers."
msgstr ""

#: ../../library/wsgiref.rst:639
msgid ""
"The term \"Python\" is replaced with implementation specific term like "
"\"CPython\", \"Jython\" etc."
msgstr ""

#: ../../library/wsgiref.rst:645
msgid ""
"Return the URL scheme being used for the current request.  The default "
"implementation uses the :func:`guess_scheme` function from :mod:`wsgiref."
"util` to guess whether the scheme should be \"http\" or \"https\", based on "
"the current request's :attr:`environ` variables."
msgstr ""

#: ../../library/wsgiref.rst:653
msgid ""
"Set the :attr:`environ` attribute to a fully populated WSGI environment.  "
"The default implementation uses all of the above methods and attributes, "
"plus the :meth:`get_stdin`, :meth:`get_stderr`, and :meth:`add_cgi_vars` "
"methods and the :attr:`wsgi_file_wrapper` attribute.  It also inserts a "
"``SERVER_SOFTWARE`` key if not present, as long as the :attr:`origin_server` "
"attribute is a true value and the :attr:`server_software` attribute is set."
msgstr ""

#: ../../library/wsgiref.rst:660
msgid "Methods and attributes for customizing exception handling:"
msgstr ""

#: ../../library/wsgiref.rst:665
msgid ""
"Log the *exc_info* tuple in the server log.  *exc_info* is a ``(type, value, "
"traceback)`` tuple.  The default implementation simply writes the traceback "
"to the request's ``wsgi.errors`` stream and flushes it.  Subclasses can "
"override this method to change the format or retarget the output, mail the "
"traceback to an administrator, or whatever other action may be deemed "
"suitable."
msgstr ""

#: ../../library/wsgiref.rst:674
msgid ""
"The maximum number of frames to include in tracebacks output by the default :"
"meth:`log_exception` method.  If ``None``, all frames are included."
msgstr ""

#: ../../library/wsgiref.rst:680
msgid ""
"This method is a WSGI application to generate an error page for the user.  "
"It is only invoked if an error occurs before headers are sent to the client."
msgstr ""

#: ../../library/wsgiref.rst:683
msgid ""
"This method can access the current error using ``sys.exception()``, and "
"should pass that information to *start_response* when calling it (as "
"described in the \"Error Handling\" section of :pep:`3333`). In particular, "
"the *start_response* callable should follow the :class:`.StartResponse` "
"protocol."
msgstr ""

#: ../../library/wsgiref.rst:689
msgid ""
"The default implementation just uses the :attr:`error_status`, :attr:"
"`error_headers`, and :attr:`error_body` attributes to generate an output "
"page.  Subclasses can override this to produce more dynamic error output."
msgstr ""

#: ../../library/wsgiref.rst:693
msgid ""
"Note, however, that it's not recommended from a security perspective to spit "
"out diagnostics to any old user; ideally, you should have to do something "
"special to enable diagnostic output, which is why the default implementation "
"doesn't include any."
msgstr ""

#: ../../library/wsgiref.rst:701
msgid ""
"The HTTP status used for error responses.  This should be a status string as "
"defined in :pep:`3333`; it defaults to a 500 code and message."
msgstr ""

#: ../../library/wsgiref.rst:707
msgid ""
"The HTTP headers used for error responses.  This should be a list of WSGI "
"response headers (``(name, value)`` tuples), as described in :pep:`3333`.  "
"The default list just sets the content type to ``text/plain``."
msgstr ""

#: ../../library/wsgiref.rst:714
msgid ""
"The error response body.  This should be an HTTP response body bytestring. "
"It defaults to the plain text, \"A server error occurred.  Please contact "
"the administrator.\""
msgstr ""

#: ../../library/wsgiref.rst:718
msgid ""
"Methods and attributes for :pep:`3333`'s \"Optional Platform-Specific File "
"Handling\" feature:"
msgstr ""

#: ../../library/wsgiref.rst:724
msgid ""
"A ``wsgi.file_wrapper`` factory, compatible with :class:`wsgiref.types."
"FileWrapper`, or ``None``.  The default value of this attribute is the :"
"class:`wsgiref.util.FileWrapper` class."
msgstr ""

#: ../../library/wsgiref.rst:731
msgid ""
"Override to implement platform-specific file transmission.  This method is "
"called only if the application's return value is an instance of the class "
"specified by the :attr:`wsgi_file_wrapper` attribute.  It should return a "
"true value if it was able to successfully transmit the file, so that the "
"default transmission code will not be executed. The default implementation "
"of this method just returns a false value."
msgstr ""

#: ../../library/wsgiref.rst:738
msgid "Miscellaneous methods and attributes:"
msgstr ""

#: ../../library/wsgiref.rst:743
msgid ""
"This attribute should be set to a true value if the handler's :meth:`_write` "
"and :meth:`_flush` are being used to communicate directly to the client, "
"rather than via a CGI-like gateway protocol that wants the HTTP status in a "
"special ``Status:`` header."
msgstr ""

#: ../../library/wsgiref.rst:748
msgid ""
"This attribute's default value is true in :class:`BaseHandler`, but false "
"in :class:`BaseCGIHandler` and :class:`CGIHandler`."
msgstr ""

#: ../../library/wsgiref.rst:754
msgid ""
"If :attr:`origin_server` is true, this string attribute is used to set the "
"HTTP version of the response set to the client.  It defaults to ``\"1.0\"``."
msgstr ""

#: ../../library/wsgiref.rst:760
msgid ""
"Transcode CGI variables from ``os.environ`` to :pep:`3333` \"bytes in "
"unicode\" strings, returning a new dictionary.  This function is used by :"
"class:`CGIHandler` and :class:`IISCGIHandler` in place of directly using "
"``os.environ``, which is not necessarily WSGI-compliant on all platforms and "
"web servers using Python 3 -- specifically, ones where the OS's actual "
"environment is Unicode (i.e. Windows), or ones where the environment is "
"bytes, but the system encoding used by Python to decode it is anything other "
"than ISO-8859-1 (e.g. Unix systems using UTF-8)."
msgstr ""

#: ../../library/wsgiref.rst:769
msgid ""
"If you are implementing a CGI-based handler of your own, you probably want "
"to use this routine instead of just copying values out of ``os.environ`` "
"directly."
msgstr ""

#: ../../library/wsgiref.rst:777
msgid ":mod:`wsgiref.types` -- WSGI types for static type checking"
msgstr ""

#: ../../library/wsgiref.rst:783
msgid ""
"This module provides various types for static type checking as described in :"
"pep:`3333`."
msgstr ""

#: ../../library/wsgiref.rst:791
msgid ""
"A :class:`typing.Protocol` describing :pep:`start_response() <3333#the-start-"
"response-callable>` callables (:pep:`3333`)."
msgstr ""

#: ../../library/wsgiref.rst:797
msgid "A type alias describing a WSGI environment dictionary."
msgstr ""

#: ../../library/wsgiref.rst:801
msgid "A type alias describing a WSGI application callable."
msgstr ""

#: ../../library/wsgiref.rst:805
msgid ""
"A :class:`typing.Protocol` describing a :pep:`WSGI Input Stream <3333#input-"
"and-error-streams>`."
msgstr ""

#: ../../library/wsgiref.rst:810
msgid ""
"A :class:`typing.Protocol` describing a :pep:`WSGI Error Stream <3333#input-"
"and-error-streams>`."
msgstr ""

#: ../../library/wsgiref.rst:815
msgid ""
"A :class:`typing.Protocol` describing a :pep:`file wrapper <3333#optional-"
"platform-specific-file-handling>`. See :class:`wsgiref.util.FileWrapper` for "
"a concrete implementation of this protocol."
msgstr ""

#: ../../library/wsgiref.rst:822
msgid "Examples"
msgstr "Exemplos"

#: ../../library/wsgiref.rst:824
msgid ""
"This is a working \"Hello World\" WSGI application, where the "
"*start_response* callable should follow the :class:`.StartResponse` "
"protocol::"
msgstr ""

#: ../../library/wsgiref.rst:827
msgid ""
"\"\"\"\n"
"Every WSGI application must have an application object - a callable\n"
"object that accepts two arguments. For that purpose, we're going to\n"
"use a function (note that you're not limited to a function, you can\n"
"use a class for example). The first argument passed to the function\n"
"is a dictionary containing CGI-style environment variables and the\n"
"second variable is the callable object.\n"
"\"\"\"\n"
"from wsgiref.simple_server import make_server\n"
"\n"
"\n"
"def hello_world_app(environ, start_response):\n"
"    status = \"200 OK\"  # HTTP Status\n"
"    headers = [(\"Content-type\", \"text/plain; charset=utf-8\")]  # HTTP "
"Headers\n"
"    start_response(status, headers)\n"
"\n"
"    # The returned object is going to be printed\n"
"    return [b\"Hello World\"]\n"
"\n"
"with make_server(\"\", 8000, hello_world_app) as httpd:\n"
"    print(\"Serving on port 8000...\")\n"
"\n"
"    # Serve until process is killed\n"
"    httpd.serve_forever()"
msgstr ""

#: ../../library/wsgiref.rst:854
msgid ""
"Example of a WSGI application serving the current directory, accept optional "
"directory and port number (default: 8000) on the command line::"
msgstr ""

#: ../../library/wsgiref.rst:857
msgid ""
"\"\"\"\n"
"Small wsgiref based web server. Takes a path to serve from and an\n"
"optional port number (defaults to 8000), then tries to serve files.\n"
"MIME types are guessed from the file names, 404 errors are raised\n"
"if the file is not found.\n"
"\"\"\"\n"
"import mimetypes\n"
"import os\n"
"import sys\n"
"from wsgiref import simple_server, util\n"
"\n"
"\n"
"def app(environ, respond):\n"
"    # Get the file name and MIME type\n"
"    fn = os.path.join(path, environ[\"PATH_INFO\"][1:])\n"
"    if \".\" not in fn.split(os.path.sep)[-1]:\n"
"        fn = os.path.join(fn, \"index.html\")\n"
"    mime_type = mimetypes.guess_file_type(fn)[0]\n"
"\n"
"    # Return 200 OK if file exists, otherwise 404 Not Found\n"
"    if os.path.exists(fn):\n"
"        respond(\"200 OK\", [(\"Content-Type\", mime_type)])\n"
"        return util.FileWrapper(open(fn, \"rb\"))\n"
"    else:\n"
"        respond(\"404 Not Found\", [(\"Content-Type\", \"text/plain\")])\n"
"        return [b\"not found\"]\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    # Get the path and port from command-line arguments\n"
"    path = sys.argv[1] if len(sys.argv) > 1 else os.getcwd()\n"
"    port = int(sys.argv[2]) if len(sys.argv) > 2 else 8000\n"
"\n"
"    # Make and start the server until control-c\n"
"    httpd = simple_server.make_server(\"\", port, app)\n"
"    print(f\"Serving {path} on port {port}, control-C to stop\")\n"
"    try:\n"
"        httpd.serve_forever()\n"
"    except KeyboardInterrupt:\n"
"        print(\"Shutting down.\")\n"
"        httpd.server_close()"
msgstr ""
