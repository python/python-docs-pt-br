# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-23 14:20+0000\n"
"PO-Revision-Date: 2025-07-18 18:49+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/pdb.rst:4
msgid ":mod:`pdb` --- The Python Debugger"
msgstr ""

#: ../../library/pdb.rst:9
msgid "**Source code:** :source:`Lib/pdb.py`"
msgstr ""

#: ../../library/pdb.rst:15
msgid ""
"The module :mod:`pdb` defines an interactive source code debugger for Python "
"programs.  It supports setting (conditional) breakpoints and single stepping "
"at the source line level, inspection of stack frames, source code listing, "
"and evaluation of arbitrary Python code in the context of any stack frame.  "
"It also supports post-mortem debugging and can be called under program "
"control."
msgstr ""

#: ../../library/pdb.rst:26
msgid ""
"The debugger is extensible -- it is actually defined as the class :class:"
"`Pdb`. This is currently undocumented but easily understood by reading the "
"source.  The extension interface uses the modules :mod:`bdb` and :mod:`cmd`."
msgstr ""

#: ../../library/pdb.rst:32
msgid "Module :mod:`faulthandler`"
msgstr ""

#: ../../library/pdb.rst:33
msgid ""
"Used to dump Python tracebacks explicitly, on a fault, after a timeout, or "
"on a user signal."
msgstr ""

#: ../../library/pdb.rst:36
msgid "Module :mod:`traceback`"
msgstr ""

#: ../../library/pdb.rst:37
msgid ""
"Standard interface to extract, format and print stack traces of Python "
"programs."
msgstr ""

#: ../../library/pdb.rst:39
msgid "The typical usage to break into the debugger is to insert::"
msgstr ""

#: ../../library/pdb.rst:41
msgid "import pdb; pdb.set_trace()"
msgstr ""

#: ../../library/pdb.rst:43
msgid "Or::"
msgstr ""

#: ../../library/pdb.rst:45
msgid "breakpoint()"
msgstr ""

#: ../../library/pdb.rst:47
msgid ""
"at the location you want to break into the debugger, and then run the "
"program. You can then step through the code following this statement, and "
"continue running without the debugger using the :pdbcmd:`continue` command."
msgstr ""

#: ../../library/pdb.rst:51
msgid ""
"The built-in :func:`breakpoint`, when called with defaults, can be used "
"instead of ``import pdb; pdb.set_trace()``."
msgstr ""

#: ../../library/pdb.rst:57
msgid ""
"def double(x):\n"
"   breakpoint()\n"
"   return x * 2\n"
"val = 3\n"
"print(f\"{val} * 2 is {double(val)}\")"
msgstr ""

#: ../../library/pdb.rst:63
msgid ""
"The debugger's prompt is ``(Pdb)``, which is the indicator that you are in "
"debug mode::"
msgstr ""

#: ../../library/pdb.rst:65
msgid ""
"> ...(2)double()\n"
"-> breakpoint()\n"
"(Pdb) p x\n"
"3\n"
"(Pdb) continue\n"
"3 * 2 is 6"
msgstr ""

#: ../../library/pdb.rst:72
msgid ""
"Tab-completion via the :mod:`readline` module is available for commands and "
"command arguments, e.g. the current global and local names are offered as "
"arguments of the ``p`` command."
msgstr ""

#: ../../library/pdb.rst:80
msgid ""
"You can also invoke :mod:`pdb` from the command line to debug other "
"scripts.  For example::"
msgstr ""

#: ../../library/pdb.rst:83
msgid "python -m pdb [-c command] (-m module | -p pid | pyfile) [args ...]"
msgstr ""

#: ../../library/pdb.rst:85
msgid ""
"When invoked as a module, pdb will automatically enter post-mortem debugging "
"if the program being debugged exits abnormally.  After post-mortem debugging "
"(or after normal exit of the program), pdb will restart the program.  "
"Automatic restarting preserves pdb's state (such as breakpoints) and in most "
"cases is more useful than quitting the debugger upon program's exit."
msgstr ""

#: ../../library/pdb.rst:93
msgid ""
"To execute commands as if given in a :file:`.pdbrc` file; see :ref:`debugger-"
"commands`."
msgstr ""

#: ../../library/pdb.rst:96
msgid "Added the ``-c`` option."
msgstr ""

#: ../../library/pdb.rst:101
msgid ""
"To execute modules similar to the way ``python -m`` does. As with a script, "
"the debugger will pause execution just before the first line of the module."
msgstr ""

#: ../../library/pdb.rst:104
msgid "Added the ``-m`` option."
msgstr ""

#: ../../library/pdb.rst:109
msgid "Attach to the process with the specified PID."
msgstr ""

#: ../../library/pdb.rst:114
msgid ""
"To attach to a running Python process for remote debugging, use the ``-p`` "
"or ``--pid`` option with the target process's PID::"
msgstr ""

#: ../../library/pdb.rst:117
msgid "python -m pdb -p 1234"
msgstr ""

#: ../../library/pdb.rst:121
msgid ""
"Attaching to a process that is blocked in a system call or waiting for I/O "
"will only work once the next bytecode instruction is executed or when the "
"process receives a signal."
msgstr ""

#: ../../library/pdb.rst:125
msgid "Typical usage to execute a statement under control of the debugger is::"
msgstr ""

#: ../../library/pdb.rst:127
msgid ""
">>> import pdb\n"
">>> def f(x):\n"
"...     print(1 / x)\n"
">>> pdb.run(\"f(2)\")\n"
"> <string>(1)<module>()\n"
"(Pdb) continue\n"
"0.5\n"
">>>"
msgstr ""

#: ../../library/pdb.rst:136
msgid "The typical usage to inspect a crashed program is::"
msgstr ""

#: ../../library/pdb.rst:138
msgid ""
">>> import pdb\n"
">>> def f(x):\n"
"...     print(1 / x)\n"
"...\n"
">>> f(0)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"<stdin>\", line 2, in f\n"
"ZeroDivisionError: division by zero\n"
">>> pdb.pm()\n"
"> <stdin>(2)f()\n"
"(Pdb) p x\n"
"0\n"
"(Pdb)"
msgstr ""

#: ../../library/pdb.rst:153
msgid ""
"The implementation of :pep:`667` means that name assignments made via "
"``pdb`` will immediately affect the active scope, even when running inside "
"an :term:`optimized scope`."
msgstr ""

#: ../../library/pdb.rst:159
msgid ""
"The module defines the following functions; each enters the debugger in a "
"slightly different way:"
msgstr ""

#: ../../library/pdb.rst:164
msgid ""
"Execute the *statement* (given as a string or a code object) under debugger "
"control.  The debugger prompt appears before any code is executed; you can "
"set breakpoints and type :pdbcmd:`continue`, or you can step through the "
"statement using :pdbcmd:`step` or :pdbcmd:`next` (all these commands are "
"explained below).  The optional *globals* and *locals* arguments specify the "
"environment in which the code is executed; by default the dictionary of the "
"module :mod:`__main__` is used.  (See the explanation of the built-in :func:"
"`exec` or :func:`eval` functions.)"
msgstr ""

#: ../../library/pdb.rst:176
msgid ""
"Evaluate the *expression* (given as a string or a code object) under "
"debugger control.  When :func:`runeval` returns, it returns the value of the "
"*expression*.  Otherwise this function is similar to :func:`run`."
msgstr ""

#: ../../library/pdb.rst:183
msgid ""
"Call the *function* (a function or method object, not a string) with the "
"given arguments.  When :func:`runcall` returns, it returns whatever the "
"function call returned.  The debugger prompt appears as soon as the function "
"is entered."
msgstr ""

#: ../../library/pdb.rst:191
msgid ""
"Enter the debugger at the calling stack frame.  This is useful to hard-code "
"a breakpoint at a given point in a program, even if the code is not "
"otherwise being debugged (e.g. when an assertion fails).  If given, *header* "
"is printed to the console just before debugging begins. The *commands* "
"argument, if given, is a list of commands to execute when the debugger "
"starts."
msgstr ""

#: ../../library/pdb.rst:199
msgid "The keyword-only argument *header*."
msgstr ""

#: ../../library/pdb.rst:202
msgid ""
":func:`set_trace` will enter the debugger immediately, rather than on the "
"next line of code to be executed."
msgstr ""

#: ../../library/pdb.rst:206
msgid "The *commands* argument."
msgstr ""

#: ../../library/pdb.rst:212
msgid ""
"async version of :func:`set_trace`. This function should be used inside an "
"async function with :keyword:`await`."
msgstr ""

#: ../../library/pdb.rst:215
msgid ""
"async def f():\n"
"    await pdb.set_trace_async()"
msgstr ""

#: ../../library/pdb.rst:220
msgid ""
":keyword:`await` statements are supported if the debugger is invoked by this "
"function."
msgstr ""

#: ../../library/pdb.rst:226
msgid ""
"Enter post-mortem debugging of the given exception or :ref:`traceback object "
"<traceback-objects>`. If no value is given, it uses the exception that is "
"currently being handled, or raises ``ValueError`` if there isnâ€™t one."
msgstr ""

#: ../../library/pdb.rst:231
msgid "Support for exception objects was added."
msgstr ""

#: ../../library/pdb.rst:236
msgid ""
"Enter post-mortem debugging of the exception found in :data:`sys.last_exc`."
msgstr ""

#: ../../library/pdb.rst:241
msgid ""
"There are two supported backends for pdb: ``'settrace'`` and "
"``'monitoring'``. See :class:`bdb.Bdb` for details. The user can set the "
"default backend to use if none is specified when instantiating :class:`Pdb`. "
"If no backend is specified, the default is ``'settrace'``."
msgstr ""

#: ../../library/pdb.rst:248
msgid ""
":func:`breakpoint` and :func:`set_trace` will not be affected by this "
"function. They always use ``'monitoring'`` backend."
msgstr ""

#: ../../library/pdb.rst:255
msgid "Returns the default backend for pdb."
msgstr ""

#: ../../library/pdb.rst:259
msgid ""
"The ``run*`` functions and :func:`set_trace` are aliases for instantiating "
"the :class:`Pdb` class and calling the method of the same name.  If you want "
"to access further features, you have to do this yourself:"
msgstr ""

#: ../../library/pdb.rst:266
msgid ":class:`Pdb` is the debugger class."
msgstr ""

#: ../../library/pdb.rst:268
msgid ""
"The *completekey*, *stdin* and *stdout* arguments are passed to the "
"underlying :class:`cmd.Cmd` class; see the description there."
msgstr ""

#: ../../library/pdb.rst:271
msgid ""
"The *skip* argument, if given, must be an iterable of glob-style module name "
"patterns.  The debugger will not step into frames that originate in a module "
"that matches one of these patterns. [1]_"
msgstr ""

#: ../../library/pdb.rst:275
msgid ""
"By default, Pdb sets a handler for the SIGINT signal (which is sent when the "
"user presses :kbd:`Ctrl-C` on the console) when you give a :pdbcmd:"
"`continue` command. This allows you to break into the debugger again by "
"pressing :kbd:`Ctrl-C`.  If you want Pdb not to touch the SIGINT handler, "
"set *nosigint* to true."
msgstr ""

#: ../../library/pdb.rst:280
msgid ""
"The *readrc* argument defaults to true and controls whether Pdb will load ."
"pdbrc files from the filesystem."
msgstr ""

#: ../../library/pdb.rst:283
msgid ""
"The *mode* argument specifies how the debugger was invoked. It impacts the "
"workings of some debugger commands. Valid values are ``'inline'`` (used by "
"the breakpoint() builtin), ``'cli'`` (used by the command line invocation) "
"or ``None`` (for backwards compatible behaviour, as before the *mode* "
"argument was added)."
msgstr ""

#: ../../library/pdb.rst:290
msgid ""
"The *backend* argument specifies the backend to use for the debugger. If "
"``None`` is passed, the default backend will be used. See :func:"
"`set_default_backend`. Otherwise the supported backends are ``'settrace'`` "
"and ``'monitoring'``."
msgstr ""

#: ../../library/pdb.rst:294
msgid ""
"The *colorize* argument, if set to ``True``, will enable colorized output in "
"the debugger, if color is supported. This will highlight source code "
"displayed in pdb."
msgstr ""

#: ../../library/pdb.rst:297
msgid "Example call to enable tracing with *skip*::"
msgstr ""

#: ../../library/pdb.rst:299
msgid "import pdb; pdb.Pdb(skip=['django.*']).set_trace()"
msgstr ""

#: ../../library/pdb.rst:301
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pdb.Pdb`` with no arguments."
msgstr ""

#: ../../library/pdb.rst:303
msgid "Added the *skip* parameter."
msgstr ""

#: ../../library/pdb.rst:306
msgid ""
"Added the *nosigint* parameter. Previously, a SIGINT handler was never set "
"by Pdb."
msgstr ""

#: ../../library/pdb.rst:310
msgid "The *readrc* argument."
msgstr ""

#: ../../library/pdb.rst:313
msgid "Added the *mode* argument."
msgstr ""

#: ../../library/pdb.rst:316
msgid "Added the *backend* argument."
msgstr ""

#: ../../library/pdb.rst:319
msgid "Added the *colorize* argument."
msgstr ""

#: ../../library/pdb.rst:322
msgid ""
"Inline breakpoints like :func:`breakpoint` or :func:`pdb.set_trace` will "
"always stop the program at calling frame, ignoring the *skip* pattern (if "
"any)."
msgstr ""

#: ../../library/pdb.rst:331
msgid "See the documentation for the functions explained above."
msgstr ""

#: ../../library/pdb.rst:337
msgid "Debugger Commands"
msgstr ""

#: ../../library/pdb.rst:339
msgid ""
"The commands recognized by the debugger are listed below.  Most commands can "
"be abbreviated to one or two letters as indicated; e.g. ``h(elp)`` means "
"that either ``h`` or ``help`` can be used to enter the help command (but not "
"``he`` or ``hel``, nor ``H`` or ``Help`` or ``HELP``).  Arguments to "
"commands must be separated by whitespace (spaces or tabs).  Optional "
"arguments are enclosed in square brackets (``[]``) in the command syntax; "
"the square brackets must not be typed.  Alternatives in the command syntax "
"are separated by a vertical bar (``|``)."
msgstr ""

#: ../../library/pdb.rst:348
msgid ""
"Entering a blank line repeats the last command entered.  Exception: if the "
"last command was a :pdbcmd:`list` command, the next 11 lines are listed."
msgstr ""

#: ../../library/pdb.rst:351
msgid ""
"Commands that the debugger doesn't recognize are assumed to be Python "
"statements and are executed in the context of the program being debugged.  "
"Python statements can also be prefixed with an exclamation point (``!``).  "
"This is a powerful way to inspect the program being debugged; it is even "
"possible to change a variable or call a function.  When an exception occurs "
"in such a statement, the exception name is printed but the debugger's state "
"is not changed."
msgstr ""

#: ../../library/pdb.rst:359
msgid ""
"Expressions/Statements whose prefix is a pdb command are now correctly "
"identified and executed."
msgstr ""

#: ../../library/pdb.rst:363
msgid ""
"The debugger supports :ref:`aliases <debugger-aliases>`.  Aliases can have "
"parameters which allows one a certain level of adaptability to the context "
"under examination."
msgstr ""

#: ../../library/pdb.rst:367
msgid ""
"Multiple commands may be entered on a single line, separated by ``;;``.  (A "
"single ``;`` is not used as it is the separator for multiple commands in a "
"line that is passed to the Python parser.)  No intelligence is applied to "
"separating the commands; the input is split at the first ``;;`` pair, even "
"if it is in the middle of a quoted string. A workaround for strings with "
"double semicolons is to use implicit string concatenation ``';'';'`` or ``\";"
"\"\";\"``."
msgstr ""

#: ../../library/pdb.rst:374
msgid ""
"To set a temporary global variable, use a *convenience variable*. A "
"*convenience variable* is a variable whose name starts with ``$``.  For "
"example, ``$foo = 1`` sets a global variable ``$foo`` which you can use in "
"the debugger session.  The *convenience variables* are cleared when the "
"program resumes execution so it's less likely to interfere with your program "
"compared to using normal variables like ``foo = 1``."
msgstr ""

#: ../../library/pdb.rst:381
msgid "There are four preset *convenience variables*:"
msgstr ""

#: ../../library/pdb.rst:383
msgid "``$_frame``: the current frame you are debugging"
msgstr ""

#: ../../library/pdb.rst:384
msgid "``$_retval``: the return value if the frame is returning"
msgstr ""

#: ../../library/pdb.rst:385
msgid "``$_exception``: the exception if the frame is raising an exception"
msgstr ""

#: ../../library/pdb.rst:386
msgid "``$_asynctask``: the asyncio task if pdb stops in an async function"
msgstr ""

#: ../../library/pdb.rst:390
msgid "Added the *convenience variable* feature."
msgstr ""

#: ../../library/pdb.rst:392
msgid "Added the ``$_asynctask`` convenience variable."
msgstr ""

#: ../../library/pdb.rst:399
msgid ""
"If a file :file:`.pdbrc` exists in the user's home directory or in the "
"current directory, it is read with ``'utf-8'`` encoding and executed as if "
"it had been typed at the debugger prompt, with the exception that empty "
"lines and lines starting with ``#`` are ignored.  This is particularly "
"useful for aliases.  If both files exist, the one in the home directory is "
"read first and aliases defined there can be overridden by the local file."
msgstr ""

#: ../../library/pdb.rst:406
msgid ""
":file:`.pdbrc` can now contain commands that continue debugging, such as :"
"pdbcmd:`continue` or :pdbcmd:`next`.  Previously, these commands had no "
"effect."
msgstr ""

#: ../../library/pdb.rst:411
msgid ""
":file:`.pdbrc` is now read with ``'utf-8'`` encoding. Previously, it was "
"read with the system locale encoding."
msgstr ""

#: ../../library/pdb.rst:418
msgid ""
"Without argument, print the list of available commands.  With a *command* as "
"argument, print help about that command.  ``help pdb`` displays the full "
"documentation (the docstring of the :mod:`pdb` module).  Since the *command* "
"argument must be an identifier, ``help exec`` must be entered to get help on "
"the ``!`` command."
msgstr ""

#: ../../library/pdb.rst:426
msgid ""
"Print a stack trace, with the most recent frame at the bottom.  if *count* "
"is 0, print the current frame entry. If *count* is negative, print the least "
"recent - *count* frames. If *count* is positive, print the most recent "
"*count* frames.  An arrow (``>``) indicates the current frame, which "
"determines the context of most commands."
msgstr ""

#: ../../library/pdb.rst:432
msgid "*count* argument is added."
msgstr ""

#: ../../library/pdb.rst:437
msgid ""
"Move the current frame *count* (default one) levels down in the stack trace "
"(to a newer frame)."
msgstr ""

#: ../../library/pdb.rst:442
msgid ""
"Move the current frame *count* (default one) levels up in the stack trace "
"(to an older frame)."
msgstr ""

#: ../../library/pdb.rst:447
msgid ""
"With a *lineno* argument, set a break at line *lineno* in the current file. "
"The line number may be prefixed with a *filename* and a colon, to specify a "
"breakpoint in another file (possibly one that hasn't been loaded yet).  The "
"file is searched on :data:`sys.path`.  Acceptable forms of *filename* are ``/"
"abspath/to/file.py``, ``relpath/file.py``, ``module`` and ``package.module``."
msgstr ""

#: ../../library/pdb.rst:454
msgid ""
"With a *function* argument, set a break at the first executable statement "
"within that function. *function* can be any expression that evaluates to a "
"function in the current namespace."
msgstr ""

#: ../../library/pdb.rst:458
msgid ""
"If a second argument is present, it is an expression which must evaluate to "
"true before the breakpoint is honored."
msgstr ""

#: ../../library/pdb.rst:461
msgid ""
"Without argument, list all breaks, including for each breakpoint, the number "
"of times that breakpoint has been hit, the current ignore count, and the "
"associated condition if any."
msgstr ""

#: ../../library/pdb.rst:465
msgid ""
"Each breakpoint is assigned a number to which all the other breakpoint "
"commands refer."
msgstr ""

#: ../../library/pdb.rst:470
msgid ""
"Temporary breakpoint, which is removed automatically when it is first hit. "
"The arguments are the same as for :pdbcmd:`break`."
msgstr ""

#: ../../library/pdb.rst:475
msgid ""
"With a *filename:lineno* argument, clear all the breakpoints at this line. "
"With a space separated list of breakpoint numbers, clear those breakpoints. "
"Without argument, clear all breaks (but first ask confirmation)."
msgstr ""

#: ../../library/pdb.rst:481
msgid ""
"Disable the breakpoints given as a space separated list of breakpoint "
"numbers.  Disabling a breakpoint means it cannot cause the program to stop "
"execution, but unlike clearing a breakpoint, it remains in the list of "
"breakpoints and can be (re-)enabled."
msgstr ""

#: ../../library/pdb.rst:488
msgid "Enable the breakpoints specified."
msgstr ""

#: ../../library/pdb.rst:492
msgid ""
"Set the ignore count for the given breakpoint number.  If *count* is "
"omitted, the ignore count is set to 0.  A breakpoint becomes active when the "
"ignore count is zero.  When non-zero, the *count* is decremented each time "
"the breakpoint is reached and the breakpoint is not disabled and any "
"associated condition evaluates to true."
msgstr ""

#: ../../library/pdb.rst:500
msgid ""
"Set a new *condition* for the breakpoint, an expression which must evaluate "
"to true before the breakpoint is honored.  If *condition* is absent, any "
"existing condition is removed; i.e., the breakpoint is made unconditional."
msgstr ""

#: ../../library/pdb.rst:506
msgid ""
"Specify a list of commands for breakpoint number *bpnumber*.  The commands "
"themselves appear on the following lines.  Type a line containing just "
"``end`` to terminate the commands. An example::"
msgstr ""

#: ../../library/pdb.rst:510
msgid ""
"(Pdb) commands 1\n"
"(com) p some_variable\n"
"(com) end\n"
"(Pdb)"
msgstr ""

#: ../../library/pdb.rst:515
msgid ""
"To remove all commands from a breakpoint, type ``commands`` and follow it "
"immediately with ``end``; that is, give no commands."
msgstr ""

#: ../../library/pdb.rst:518
msgid ""
"With no *bpnumber* argument, ``commands`` refers to the last breakpoint set."
msgstr ""

#: ../../library/pdb.rst:520
msgid ""
"You can use breakpoint commands to start your program up again.  Simply use "
"the :pdbcmd:`continue` command, or :pdbcmd:`step`, or any other command that "
"resumes execution."
msgstr ""

#: ../../library/pdb.rst:524
msgid ""
"Specifying any command resuming execution (currently :pdbcmd:`continue`, :"
"pdbcmd:`step`, :pdbcmd:`next`, :pdbcmd:`return`, :pdbcmd:`until`, :pdbcmd:"
"`jump`, :pdbcmd:`quit` and their abbreviations) terminates the command list "
"(as if that command was immediately followed by end). This is because any "
"time you resume execution (even with a simple next or step), you may "
"encounter another breakpointâ€”which could have its own command list, leading "
"to ambiguities about which list to execute."
msgstr ""

#: ../../library/pdb.rst:533
msgid ""
"If the list of commands contains the ``silent`` command, or a command that "
"resumes execution, then the breakpoint message containing information about "
"the frame is not displayed."
msgstr ""

#: ../../library/pdb.rst:537
msgid ""
"Frame information will not be displayed if a command that resumes execution "
"is present in the command list."
msgstr ""

#: ../../library/pdb.rst:543
msgid ""
"Execute the current line, stop at the first possible occasion (either in a "
"function that is called or on the next line in the current function)."
msgstr ""

#: ../../library/pdb.rst:548
msgid ""
"Continue execution until the next line in the current function is reached or "
"it returns.  (The difference between :pdbcmd:`next` and :pdbcmd:`step` is "
"that :pdbcmd:`step` stops inside a called function, while :pdbcmd:`next` "
"executes called functions at (nearly) full speed, only stopping at the next "
"line in the current function.)"
msgstr ""

#: ../../library/pdb.rst:556
msgid ""
"Without argument, continue execution until the line with a number greater "
"than the current one is reached."
msgstr ""

#: ../../library/pdb.rst:559
msgid ""
"With *lineno*, continue execution until a line with a number greater or "
"equal to *lineno* is reached.  In both cases, also stop when the current "
"frame returns."
msgstr ""

#: ../../library/pdb.rst:563
msgid "Allow giving an explicit line number."
msgstr ""

#: ../../library/pdb.rst:568
msgid "Continue execution until the current function returns."
msgstr ""

#: ../../library/pdb.rst:572
msgid "Continue execution, only stop when a breakpoint is encountered."
msgstr ""

#: ../../library/pdb.rst:576
msgid ""
"Set the next line that will be executed.  Only available in the bottom-most "
"frame.  This lets you jump back and execute code again, or jump forward to "
"skip code that you don't want to run."
msgstr ""

#: ../../library/pdb.rst:580
msgid ""
"It should be noted that not all jumps are allowed -- for instance it is not "
"possible to jump into the middle of a :keyword:`for` loop or out of a :"
"keyword:`finally` clause."
msgstr ""

#: ../../library/pdb.rst:586
msgid ""
"List source code for the current file.  Without arguments, list 11 lines "
"around the current line or continue the previous listing.  With ``.`` as "
"argument, list 11 lines around the current line.  With one argument, list 11 "
"lines around at that line.  With two arguments, list the given range; if the "
"second argument is less than the first, it is interpreted as a count."
msgstr ""

#: ../../library/pdb.rst:592
msgid ""
"The current line in the current frame is indicated by ``->``.  If an "
"exception is being debugged, the line where the exception was originally "
"raised or propagated is indicated by ``>>``, if it differs from the current "
"line."
msgstr ""

#: ../../library/pdb.rst:597
msgid "Added the ``>>`` marker."
msgstr ""

#: ../../library/pdb.rst:602
msgid ""
"List all source code for the current function or frame.  Interesting lines "
"are marked as for :pdbcmd:`list`."
msgstr ""

#: ../../library/pdb.rst:609
msgid "Print the arguments of the current function and their current values."
msgstr ""

#: ../../library/pdb.rst:613
msgid "Evaluate *expression* in the current context and print its value."
msgstr ""

#: ../../library/pdb.rst:617
msgid ""
"``print()`` can also be used, but is not a debugger command --- this "
"executes the Python :func:`print` function."
msgstr ""

#: ../../library/pdb.rst:623
msgid ""
"Like the :pdbcmd:`p` command, except the value of *expression* is pretty-"
"printed using the :mod:`pprint` module."
msgstr ""

#: ../../library/pdb.rst:628
msgid "Print the type of *expression*."
msgstr ""

#: ../../library/pdb.rst:632
msgid "Try to get source code of *expression* and display it."
msgstr ""

#: ../../library/pdb.rst:638
msgid ""
"Display the value of *expression* if it changed, each time execution stops "
"in the current frame."
msgstr ""

#: ../../library/pdb.rst:641
msgid ""
"Without *expression*, list all display expressions for the current frame."
msgstr ""

#: ../../library/pdb.rst:645
msgid ""
"Display evaluates *expression* and compares to the result of the previous "
"evaluation of *expression*, so when the result is mutable, display may not "
"be able to pick up the changes."
msgstr ""

#: ../../library/pdb.rst:649 ../../library/pdb.rst:814
msgid "Example::"
msgstr "Exemplo::"

#: ../../library/pdb.rst:651
msgid ""
"lst = []\n"
"breakpoint()\n"
"pass\n"
"lst.append(1)\n"
"print(lst)"
msgstr ""

#: ../../library/pdb.rst:657
msgid ""
"Display won't realize ``lst`` has been changed because the result of "
"evaluation is modified in place by ``lst.append(1)`` before being compared::"
msgstr ""

#: ../../library/pdb.rst:660
msgid ""
"> example.py(3)<module>()\n"
"-> pass\n"
"(Pdb) display lst\n"
"display lst: []\n"
"(Pdb) n\n"
"> example.py(4)<module>()\n"
"-> lst.append(1)\n"
"(Pdb) n\n"
"> example.py(5)<module>()\n"
"-> print(lst)\n"
"(Pdb)"
msgstr ""

#: ../../library/pdb.rst:672
msgid "You can do some tricks with copy mechanism to make it work::"
msgstr ""

#: ../../library/pdb.rst:674
msgid ""
"> example.py(3)<module>()\n"
"-> pass\n"
"(Pdb) display lst[:]\n"
"display lst[:]: []\n"
"(Pdb) n\n"
"> example.py(4)<module>()\n"
"-> lst.append(1)\n"
"(Pdb) n\n"
"> example.py(5)<module>()\n"
"-> print(lst)\n"
"display lst[:]: [1]  [old: []]\n"
"(Pdb)"
msgstr ""

#: ../../library/pdb.rst:691
msgid ""
"Do not display *expression* anymore in the current frame.  Without "
"*expression*, clear all display expressions for the current frame."
msgstr ""

#: ../../library/pdb.rst:698
msgid ""
"Start an interactive interpreter (using the :mod:`code` module) in a new "
"global namespace initialised from the local and global namespaces for the "
"current scope. Use ``exit()`` or ``quit()`` to exit the interpreter and "
"return to the debugger."
msgstr ""

#: ../../library/pdb.rst:705
msgid ""
"As ``interact`` creates a new dedicated namespace for code execution, "
"assignments to variables will not affect the original namespaces. However, "
"modifications to any referenced mutable objects will be reflected in the "
"original namespaces as usual."
msgstr ""

#: ../../library/pdb.rst:712
msgid ""
"``exit()`` and ``quit()`` can be used to exit the :pdbcmd:`interact` command."
msgstr ""

#: ../../library/pdb.rst:716
msgid ""
":pdbcmd:`interact` directs its output to the debugger's output channel "
"rather than :data:`sys.stderr`."
msgstr ""

#: ../../library/pdb.rst:724
msgid ""
"Create an alias called *name* that executes *command*.  The *command* must "
"*not* be enclosed in quotes.  Replaceable parameters can be indicated by "
"``%1``, ``%2``, ... and ``%9``, while ``%*`` is replaced by all the "
"parameters. If *command* is omitted, the current alias for *name* is shown. "
"If no arguments are given, all aliases are listed."
msgstr ""

#: ../../library/pdb.rst:730
msgid ""
"Aliases may be nested and can contain anything that can be legally typed at "
"the pdb prompt.  Note that internal pdb commands *can* be overridden by "
"aliases.  Such a command is then hidden until the alias is removed.  "
"Aliasing is recursively applied to the first word of the command line; all "
"other words in the line are left alone."
msgstr ""

#: ../../library/pdb.rst:736
msgid ""
"As an example, here are two useful aliases (especially when placed in the :"
"file:`.pdbrc` file)::"
msgstr ""

#: ../../library/pdb.rst:739
msgid ""
"# Print instance variables (usage \"pi classInst\")\n"
"alias pi for k in %1.__dict__.keys(): print(f\"%1.{k} = {%1.__dict__[k]}\")\n"
"# Print instance variables in self\n"
"alias ps pi self"
msgstr ""

#: ../../library/pdb.rst:746
msgid "Delete the specified alias *name*."
msgstr ""

#: ../../library/pdb.rst:750
msgid ""
"Execute the (one-line) *statement* in the context of the current stack "
"frame. The exclamation point can be omitted unless the first word of the "
"statement resembles a debugger command, e.g.:"
msgstr ""

#: ../../library/pdb.rst:754
msgid ""
"(Pdb) ! n=42\n"
"(Pdb)"
msgstr ""

#: ../../library/pdb.rst:759
msgid ""
"To set a global variable, you can prefix the assignment command with a :"
"keyword:`global` statement on the same line, e.g.:"
msgstr ""

#: ../../library/pdb.rst:762
msgid ""
"(Pdb) global list_options; list_options = ['-l']\n"
"(Pdb)"
msgstr ""

#: ../../library/pdb.rst:770
msgid ""
"Restart the debugged Python program.  If *args* is supplied, it is split "
"with :mod:`shlex` and the result is used as the new :data:`sys.argv`. "
"History, breakpoints, actions and debugger options are preserved. :pdbcmd:"
"`restart` is an alias for :pdbcmd:`run`."
msgstr ""

#: ../../library/pdb.rst:775
msgid ""
":pdbcmd:`run` and :pdbcmd:`restart` commands are disabled when the debugger "
"is invoked in ``'inline'`` mode."
msgstr ""

#: ../../library/pdb.rst:781
msgid ""
"Quit from the debugger.  The program being executed is aborted. An end-of-"
"file input is equivalent to :pdbcmd:`quit`."
msgstr ""

#: ../../library/pdb.rst:784
msgid ""
"A confirmation prompt will be shown if the debugger is invoked in "
"``'inline'`` mode. Either ``y``, ``Y``, ``<Enter>`` or ``EOF`` will confirm "
"the quit."
msgstr ""

#: ../../library/pdb.rst:788
msgid ""
"A confirmation prompt will be shown if the debugger is invoked in "
"``'inline'`` mode. After the confirmation, the debugger will call :func:`sys."
"exit` immediately, instead of raising :exc:`bdb.BdbQuit` in the next trace "
"event."
msgstr ""

#: ../../library/pdb.rst:796
msgid ""
"Enter a recursive debugger that steps through *code* (which is an arbitrary "
"expression or statement to be executed in the current environment)."
msgstr ""

#: ../../library/pdb.rst:802
msgid "Print the return value for the last return of the current function."
msgstr ""

#: ../../library/pdb.rst:806
msgid "List or jump between chained exceptions."
msgstr ""

#: ../../library/pdb.rst:808
msgid ""
"When using ``pdb.pm()``  or ``Pdb.post_mortem(...)`` with a chained "
"exception instead of a traceback, it allows the user to move between the "
"chained exceptions using ``exceptions`` command to list exceptions, and "
"``exceptions <number>`` to switch to that exception."
msgstr ""

#: ../../library/pdb.rst:816
msgid ""
"def out():\n"
"    try:\n"
"        middle()\n"
"    except Exception as e:\n"
"        raise ValueError(\"reraise middle() error\") from e\n"
"\n"
"def middle():\n"
"    try:\n"
"        return inner(0)\n"
"    except Exception as e:\n"
"        raise ValueError(\"Middle fail\")\n"
"\n"
"def inner(x):\n"
"    1 / x\n"
"\n"
" out()"
msgstr ""

#: ../../library/pdb.rst:833
msgid "calling ``pdb.pm()`` will allow to move between exceptions::"
msgstr ""

#: ../../library/pdb.rst:835
msgid ""
"> example.py(5)out()\n"
"-> raise ValueError(\"reraise middle() error\") from e\n"
"\n"
"(Pdb) exceptions\n"
"  0 ZeroDivisionError('division by zero')\n"
"  1 ValueError('Middle fail')\n"
"> 2 ValueError('reraise middle() error')\n"
"\n"
"(Pdb) exceptions 0\n"
"> example.py(16)inner()\n"
"-> 1 / x\n"
"\n"
"(Pdb) up\n"
"> example.py(10)middle()\n"
"-> return inner(0)"
msgstr ""

#: ../../library/pdb.rst:854
msgid "Footnotes"
msgstr ""

#: ../../library/pdb.rst:855
msgid ""
"Whether a frame is considered to originate in a certain module is determined "
"by the ``__name__`` in the frame globals."
msgstr ""

#: ../../library/pdb.rst:11
msgid "debugging"
msgstr ""

#: ../../library/pdb.rst:21
msgid "Pdb (class in pdb)"
msgstr ""

#: ../../library/pdb.rst:21
msgid "module"
msgstr "mÃ³dulo"

#: ../../library/pdb.rst:21
msgid "bdb"
msgstr ""

#: ../../library/pdb.rst:21
msgid "cmd"
msgstr ""

#: ../../library/pdb.rst:395
msgid ".pdbrc"
msgstr ""

#: ../../library/pdb.rst:395
msgid "file"
msgstr "arquivo"

#: ../../library/pdb.rst:395
msgid "debugger"
msgstr ""

#: ../../library/pdb.rst:395
msgid "configuration"
msgstr ""
