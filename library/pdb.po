# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# i17obot <i17obot@rougeth.com>, 2021
# Italo Penaforte <italo.penaforte@gmail.com>, 2023
# Marco Rougeth <marco@rougeth.com>, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-31 10:59+0000\n"
"PO-Revision-Date: 2021-06-28 01:11+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/pdb.rst:4
msgid ":mod:`pdb` --- The Python Debugger"
msgstr ":mod:`pdb` --- O Depurador do Python"

#: ../../library/pdb.rst:9
msgid "**Source code:** :source:`Lib/pdb.py`"
msgstr "**Código-fonte:** :source:`Lib/pdb.py`"

#: ../../library/pdb.rst:15
msgid ""
"The module :mod:`pdb` defines an interactive source code debugger for Python "
"programs.  It supports setting (conditional) breakpoints and single stepping "
"at the source line level, inspection of stack frames, source code listing, "
"and evaluation of arbitrary Python code in the context of any stack frame.  "
"It also supports post-mortem debugging and can be called under program "
"control."
msgstr ""
"O módulo :mod:`pdb` define um depurador de código-fonte interativo para "
"programas Python. Ele possui suporte a definição de pontos de interrupção "
"(condicionais) e passo único no nível da linha de origem, inspeção de "
"quadros de pilha, listagem de código-fonte e avaliação de código Python "
"arbitrário no contexto de qualquer quadro de pilha. Ele também tem suporte a "
"depuração *post-mortem* e pode ser chamado sob controle do programa."

#: ../../library/pdb.rst:26
msgid ""
"The debugger is extensible -- it is actually defined as the class :class:"
"`Pdb`. This is currently undocumented but easily understood by reading the "
"source.  The extension interface uses the modules :mod:`bdb` and :mod:`cmd`."
msgstr ""
"O depurador é extensível -- na verdade, ele é definido como a classe :class:"
"`Pdb`. Atualmente, isso não está documentado, mas é facilmente compreendido "
"pela leitura do código-fonte. A interface de extensão usa os módulos :mod:"
"`bdb` e :mod:`cmd`."

#: ../../library/pdb.rst:32
msgid "Module :mod:`faulthandler`"
msgstr "Módulo :mod:`faulthandler`"

#: ../../library/pdb.rst:33
msgid ""
"Used to dump Python tracebacks explicitly, on a fault, after a timeout, or "
"on a user signal."
msgstr ""
"Usado para despejar tracebacks (situação da pilha de execução) do Python "
"explicitamente, em uma falha, após um tempo limite ou em um sinal do usuário."

#: ../../library/pdb.rst:36
msgid "Module :mod:`traceback`"
msgstr "Módulo :mod:`traceback`"

#: ../../library/pdb.rst:37
msgid ""
"Standard interface to extract, format and print stack traces of Python "
"programs."
msgstr ""
"Interface padrão para extrair, formatar e imprimir rastreamentos de pilha de "
"programas Python."

#: ../../library/pdb.rst:39
msgid "The typical usage to break into the debugger is to insert::"
msgstr "O uso típico para invadir o depurador é inserir::"

#: ../../library/pdb.rst:41
msgid "import pdb; pdb.set_trace()"
msgstr ""

#: ../../library/pdb.rst:43
msgid "Or::"
msgstr "ou::"

#: ../../library/pdb.rst:45
msgid "breakpoint()"
msgstr ""

#: ../../library/pdb.rst:47
msgid ""
"at the location you want to break into the debugger, and then run the "
"program. You can then step through the code following this statement, and "
"continue running without the debugger using the :pdbcmd:`continue` command."
msgstr ""
"no local que você deseja interromper o depurador e, em seguida, execute o "
"programa. Você pode percorrer o código seguindo esta instrução e continuar "
"executando sem o depurador usando o comando :pdbcmd:`continue`."

#: ../../library/pdb.rst:51
msgid ""
"The built-in :func:`breakpoint`, when called with defaults, can be used "
"instead of ``import pdb; pdb.set_trace()``."
msgstr ""

#: ../../library/pdb.rst:57
msgid ""
"def double(x):\n"
"   breakpoint()\n"
"   return x * 2\n"
"val = 3\n"
"print(f\"{val} * 2 is {double(val)}\")"
msgstr ""

#: ../../library/pdb.rst:63
msgid ""
"The debugger's prompt is ``(Pdb)``, which is the indicator that you are in "
"debug mode::"
msgstr ""
"O prompt do depurador é ``(Pdb)``, que é o indicador de que você está no "
"modo de depuração::"

#: ../../library/pdb.rst:65
msgid ""
"> ...(2)double()\n"
"-> breakpoint()\n"
"(Pdb) p x\n"
"3\n"
"(Pdb) continue\n"
"3 * 2 is 6"
msgstr ""

#: ../../library/pdb.rst:72
msgid ""
"Tab-completion via the :mod:`readline` module is available for commands and "
"command arguments, e.g. the current global and local names are offered as "
"arguments of the ``p`` command."
msgstr ""
"O preenchimento por tabulação através do módulo :mod:`readline` está "
"disponível para comandos e argumentos de comando, por exemplo os nomes "
"globais e locais atuais são oferecidos como argumentos do comando ``p``."

#: ../../library/pdb.rst:78
msgid ""
"You can also invoke :mod:`pdb` from the command line to debug other "
"scripts.  For example::"
msgstr ""
"Você também pode invocar :mod:`pdb` na linha de comando para depurar outros "
"scripts. Por exemplo::"

#: ../../library/pdb.rst:81
msgid "python -m pdb myscript.py"
msgstr ""

#: ../../library/pdb.rst:83
msgid ""
"When invoked as a module, pdb will automatically enter post-mortem debugging "
"if the program being debugged exits abnormally.  After post-mortem debugging "
"(or after normal exit of the program), pdb will restart the program.  "
"Automatic restarting preserves pdb's state (such as breakpoints) and in most "
"cases is more useful than quitting the debugger upon program's exit."
msgstr ""
"Quando invocado como um módulo, o pdb entra automaticamente na depuração "
"*post-mortem* se o programa que está sendo depurado for encerrado de forma "
"anormal. Após a depuração *post-mortem* (ou após a saída normal do "
"programa), o pdb reiniciará o programa. A reinicialização automática "
"preserva o estado do pdb (p.ex., pontos de interrupção) e, na maioria dos "
"casos, é mais útil do que encerrar o depurador na saída do programa."

#: ../../library/pdb.rst:89
msgid ""
"Added the ``-c`` option to execute commands as if given in a :file:`.pdbrc` "
"file; see :ref:`debugger-commands`."
msgstr ""
"Adicionada a opção ``-c`` para executar comandos como se fossem dados em um "
"arquivo :file:`.pdbrc`. Veja :ref:`debugger-commands`."

#: ../../library/pdb.rst:93
msgid ""
"Added the ``-m`` option to execute modules similar to the way ``python -m`` "
"does. As with a script, the debugger will pause execution just before the "
"first line of the module."
msgstr ""
"Adicionada a opção ``-m`` para executar módulos de maneira similar ao "
"``python -m``. Assim como em um script, o depurador pausará a execução logo "
"antes da primeira linha do módulo."

#: ../../library/pdb.rst:98
msgid "Typical usage to execute a statement under control of the debugger is::"
msgstr ""
"O uso típico para executar uma instrução sob o controle do depurador é::"

#: ../../library/pdb.rst:100
msgid ""
">>> import pdb\n"
">>> def f(x):\n"
"...     print(1 / x)\n"
">>> pdb.run(\"f(2)\")\n"
"> <string>(1)<module>()\n"
"(Pdb) continue\n"
"0.5\n"
">>>"
msgstr ""

#: ../../library/pdb.rst:109
msgid "The typical usage to inspect a crashed program is::"
msgstr "O uso típico para inspecionar um programa com falha é::"

#: ../../library/pdb.rst:111
msgid ""
">>> import pdb\n"
">>> def f(x):\n"
"...     print(1 / x)\n"
"...\n"
">>> f(0)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"<stdin>\", line 2, in f\n"
"ZeroDivisionError: division by zero\n"
">>> pdb.pm()\n"
"> <stdin>(2)f()\n"
"(Pdb) p x\n"
"0\n"
"(Pdb)"
msgstr ""

#: ../../library/pdb.rst:126
msgid ""
"The implementation of :pep:`667` means that name assignments made via "
"``pdb`` will immediately affect the active scope, even when running inside "
"an :term:`optimized scope`."
msgstr ""
"A implementação de :pep:`667` significa que atribuições de nomes feitas via "
"``pdb`` afetarão imediatamente o escopo ativo, mesmo quando executado dentro "
"de um :term:`escopo otimizado`."

#: ../../library/pdb.rst:132
msgid ""
"The module defines the following functions; each enters the debugger in a "
"slightly different way:"
msgstr ""
"O módulo define as seguintes funções; cada uma entra no depurador de uma "
"maneira ligeiramente diferente:"

#: ../../library/pdb.rst:137
msgid ""
"Execute the *statement* (given as a string or a code object) under debugger "
"control.  The debugger prompt appears before any code is executed; you can "
"set breakpoints and type :pdbcmd:`continue`, or you can step through the "
"statement using :pdbcmd:`step` or :pdbcmd:`next` (all these commands are "
"explained below).  The optional *globals* and *locals* arguments specify the "
"environment in which the code is executed; by default the dictionary of the "
"module :mod:`__main__` is used.  (See the explanation of the built-in :func:"
"`exec` or :func:`eval` functions.)"
msgstr ""
"Executa a instrução *statement* (fornecida como uma string ou um objeto "
"código) sob controle do depurador. O prompt do depurador aparece antes de "
"qualquer código ser executado; você pode definir pontos de interrupção e "
"digitar :pdbcmd:`continue` ou pode percorrer a instrução usando :pdbcmd:"
"`step` ou :pdbcmd:`next` (todos esses comandos são explicados abaixo). Os "
"argumentos opcionais *globals* e *locals* especificam o ambiente em que o "
"código é executado; por padrão, o dicionário do módulo :mod:`__main__` é "
"usado. (Veja a explicação das funções embutidas :func:`exec` ou :func:"
"`eval`.)"

#: ../../library/pdb.rst:149
msgid ""
"Evaluate the *expression* (given as a string or a code object) under "
"debugger control.  When :func:`runeval` returns, it returns the value of the "
"*expression*.  Otherwise this function is similar to :func:`run`."
msgstr ""
"Avalia a expressão *expression* (fornecida como uma string ou um objeto "
"código) sob controle do depurador. Quando :func:`runeval` retorna, ele "
"retorna o valor de *expression*. Caso contrário, esta função é semelhante a :"
"func:`run`."

#: ../../library/pdb.rst:156
msgid ""
"Call the *function* (a function or method object, not a string) with the "
"given arguments.  When :func:`runcall` returns, it returns whatever the "
"function call returned.  The debugger prompt appears as soon as the function "
"is entered."
msgstr ""
"Chama a função *function* (um objeto função ou método, não uma string) com "
"os argumentos fornecidos. Quando :func:`runcall` retorna, ele retorna "
"qualquer que seja a chamada de função retornada. O prompt do depurador "
"aparece assim que a função é inserida."

#: ../../library/pdb.rst:164
msgid ""
"Enter the debugger at the calling stack frame.  This is useful to hard-code "
"a breakpoint at a given point in a program, even if the code is not "
"otherwise being debugged (e.g. when an assertion fails).  If given, *header* "
"is printed to the console just before debugging begins."
msgstr ""
"Entra no depurador no quadro da pilha de chamada. Isso é útil para codificar "
"um ponto de interrupção em um determinado ponto de um programa, mesmo que o "
"código não esteja sendo depurado de outra forma (por exemplo, quando uma "
"asserção falha). Se fornecido, *header* é impresso no console imediatamente "
"antes do início da depuração."

#: ../../library/pdb.rst:169
msgid "The keyword-only argument *header*."
msgstr "O argumento somente-nomeado *header*."

#: ../../library/pdb.rst:172
msgid ""
":func:`set_trace` will enter the debugger immediately, rather than on the "
"next line of code to be executed."
msgstr ""
":func:`set_trace` entrará no depurador imediatamente, em vez de na próxima "
"linha de código a ser executada."

#: ../../library/pdb.rst:178
msgid ""
"Enter post-mortem debugging of the given *traceback* object.  If no "
"*traceback* is given, it uses the one of the exception that is currently "
"being handled (an exception must be being handled if the default is to be "
"used)."
msgstr ""
"Entra na depuração *post-mortem* do objeto *traceback* fornecido. Se não for "
"fornecido um *traceback*, será usada a exceção que está sendo manipulada no "
"momento (uma exceção deve ser manipulada para que o padrão seja usado)."

#: ../../library/pdb.rst:186
msgid ""
"Enter post-mortem debugging of the exception found in :data:`sys.last_exc`."
msgstr ""
"Entra a depuração post-mortem da exceção encontrada em :data:`sys.last_exc`."

#: ../../library/pdb.rst:190
msgid ""
"The ``run*`` functions and :func:`set_trace` are aliases for instantiating "
"the :class:`Pdb` class and calling the method of the same name.  If you want "
"to access further features, you have to do this yourself:"
msgstr ""
"As funções ``run*`` e a :func:`set_trace` são aliases, ou apelidos, para "
"instanciar a classe :class:`Pdb` e chamar o método com o mesmo nome. Se você "
"deseja acessar outros recursos, faça você mesmo:"

#: ../../library/pdb.rst:197
msgid ":class:`Pdb` is the debugger class."
msgstr ":class:`Pdb` é a classe do depurador."

#: ../../library/pdb.rst:199
msgid ""
"The *completekey*, *stdin* and *stdout* arguments are passed to the "
"underlying :class:`cmd.Cmd` class; see the description there."
msgstr ""
"Os argumentos *completekey*, *stdin* e *stdout* são passados para a classe "
"subjacente :class:`cmd.Cmd`; veja a descrição lá."

#: ../../library/pdb.rst:202
msgid ""
"The *skip* argument, if given, must be an iterable of glob-style module name "
"patterns.  The debugger will not step into frames that originate in a module "
"that matches one of these patterns. [1]_"
msgstr ""
"O argumento *skip*, se fornecido, deve ser um iterável de padrões de nome de "
"módulo no estilo glob. O depurador não entrará nos quadros que se originam "
"em um módulo que corresponde a um desses padrões. [1]_"

#: ../../library/pdb.rst:206
msgid ""
"By default, Pdb sets a handler for the SIGINT signal (which is sent when the "
"user presses :kbd:`Ctrl-C` on the console) when you give a :pdbcmd:"
"`continue` command. This allows you to break into the debugger again by "
"pressing :kbd:`Ctrl-C`.  If you want Pdb not to touch the SIGINT handler, "
"set *nosigint* to true."
msgstr ""
"Por padrão, o Pdb define um manipulador para o sinal SIGINT (que é enviado "
"quando o usuário pressiona :kbd:`Ctrl-C` no console) quando você dá um "
"comando :pdbcmd:`continue`. Isso permite que você entre no depurador "
"novamente pressionando :kbd:`Ctrl-C`. Se você deseja que o Pdb não toque no "
"manipulador SIGINT, defina *nosigint* como true."

#: ../../library/pdb.rst:211
msgid ""
"The *readrc* argument defaults to true and controls whether Pdb will load ."
"pdbrc files from the filesystem."
msgstr ""
"O argumento *readrc* é padronizado como true e controla se o Pdb carregará "
"arquivos .pdbrc do sistema de arquivos."

#: ../../library/pdb.rst:214
msgid "Example call to enable tracing with *skip*::"
msgstr "Exemplo de chamada para habilitar rastreamento com *skip*::"

#: ../../library/pdb.rst:216
msgid "import pdb; pdb.Pdb(skip=['django.*']).set_trace()"
msgstr ""

#: ../../library/pdb.rst:218
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pdb.Pdb`` with no arguments."
msgstr ""
"Levanta um :ref:`evento de auditoria <auditing>` ``pdb.Pdb`` sem argumentos."

#: ../../library/pdb.rst:220
msgid "Added the *skip* parameter."
msgstr "Adicionado o parâmetro *skip*."

#: ../../library/pdb.rst:223
msgid ""
"Added the *nosigint* parameter. Previously, a SIGINT handler was never set "
"by Pdb."
msgstr ""
"Adicionado o parâmetro *nosigint*. Anteriormente, um manipulador de SIGINT "
"nunca era definido por Pdb."

#: ../../library/pdb.rst:227
msgid "The *readrc* argument."
msgstr "O argumento *readrc*."

#: ../../library/pdb.rst:235
msgid "See the documentation for the functions explained above."
msgstr "Consulte a documentação para as funções explicadas acima."

#: ../../library/pdb.rst:241
msgid "Debugger Commands"
msgstr "Comandos de depuração"

#: ../../library/pdb.rst:243
msgid ""
"The commands recognized by the debugger are listed below.  Most commands can "
"be abbreviated to one or two letters as indicated; e.g. ``h(elp)`` means "
"that either ``h`` or ``help`` can be used to enter the help command (but not "
"``he`` or ``hel``, nor ``H`` or ``Help`` or ``HELP``).  Arguments to "
"commands must be separated by whitespace (spaces or tabs).  Optional "
"arguments are enclosed in square brackets (``[]``) in the command syntax; "
"the square brackets must not be typed.  Alternatives in the command syntax "
"are separated by a vertical bar (``|``)."
msgstr ""
"Os comandos reconhecidos pelo depurador estão listados abaixo. A maioria dos "
"comandos pode ser abreviada para uma ou duas letras, conforme indicado; por "
"exemplo, ``h(elp)`` significa que ``h`` ou ``help`` podem ser usados para "
"inserir o comando de ajuda (mas não ``he`` ou ``hel``, nem ``H`` ou ``Help`` "
"ou ``HELP``). Os argumentos para os comandos devem ser separados por espaços "
"em branco (espaços ou tabulações). Os argumentos opcionais estão entre "
"colchetes (``[]``) na sintaxe do comando; os colchetes não devem ser "
"digitados. As alternativas na sintaxe de comando são separadas por uma barra "
"vertical (``|``)."

#: ../../library/pdb.rst:252
msgid ""
"Entering a blank line repeats the last command entered.  Exception: if the "
"last command was a :pdbcmd:`list` command, the next 11 lines are listed."
msgstr ""
"Digitar uma linha em branco repete o último comando digitado. Exceção: se o "
"último comando foi um comando :pdbcmd:`list`, as próximas 11 linhas serão "
"listadas."

#: ../../library/pdb.rst:255
msgid ""
"Commands that the debugger doesn't recognize are assumed to be Python "
"statements and are executed in the context of the program being debugged.  "
"Python statements can also be prefixed with an exclamation point (``!``).  "
"This is a powerful way to inspect the program being debugged; it is even "
"possible to change a variable or call a function.  When an exception occurs "
"in such a statement, the exception name is printed but the debugger's state "
"is not changed."
msgstr ""
"Os comandos que o depurador não reconhece são presumidos como instruções "
"Python e são executados no contexto do programa que está sendo depurado. As "
"instruções Python também podem ser prefixadas com um ponto de exclamação (``!"
"``). Essa é uma maneira poderosa de inspecionar o programa que está sendo "
"depurado; é até possível alterar uma variável ou chamar uma função. Quando "
"ocorre uma exceção em uma instrução, o nome da exceção é impresso, mas o "
"estado do depurador não é alterado."

#: ../../library/pdb.rst:263
msgid ""
"Expressions/Statements whose prefix is a pdb command are now correctly "
"identified and executed."
msgstr ""
"Expressões/instruções, cujo prefixo é um comando pdb, agora são "
"identificadas e executadas corretamente."

#: ../../library/pdb.rst:267
msgid ""
"The debugger supports :ref:`aliases <debugger-aliases>`.  Aliases can have "
"parameters which allows one a certain level of adaptability to the context "
"under examination."
msgstr ""
"O depurador possui suporte a :ref:`aliases <debugger-aliases>`. Os aliases "
"podem ter parâmetros que permitem um certo nível de adaptabilidade ao "
"contexto em exame."

#: ../../library/pdb.rst:271
msgid ""
"Multiple commands may be entered on a single line, separated by ``;;``.  (A "
"single ``;`` is not used as it is the separator for multiple commands in a "
"line that is passed to the Python parser.)  No intelligence is applied to "
"separating the commands; the input is split at the first ``;;`` pair, even "
"if it is in the middle of a quoted string. A workaround for strings with "
"double semicolons is to use implicit string concatenation ``';'';'`` or ``\";"
"\"\";\"``."
msgstr ""
"Vários comandos podem ser inseridos em uma única linha, separados por ``;;"
"``. (Um único ``;`` não é usado, pois é o separador para vários comandos em "
"uma linha que é passada para o analisador Python.) Nenhuma inteligência é "
"aplicada para separar os comandos; a entrada é dividida no primeiro par ``;;"
"``, mesmo que esteja no meio de uma string entre aspas. Uma solução "
"alternativa para strings com caractere de ponto e vírgula duplo é usar a "
"concatenação de string implícita ``';'';'`` ou ``\";\"\";\"``."

#: ../../library/pdb.rst:278
msgid ""
"To set a temporary global variable, use a *convenience variable*. A "
"*convenience variable* is a variable whose name starts with ``$``.  For "
"example, ``$foo = 1`` sets a global variable ``$foo`` which you can use in "
"the debugger session.  The *convenience variables* are cleared when the "
"program resumes execution so it's less likely to interfere with your program "
"compared to using normal variables like ``foo = 1``."
msgstr ""
"Para definir uma variável global temporária, use uma *variável de "
"conveniência*. Uma *variável de conveniência* é uma variável cujo nome "
"começa com ``$``. Por exemplo, ``$foo = 1`` define uma variável global "
"``$foo`` que você pode usar na sessão do depurador. As *variáveis de "
"conveniência* são limpas quando o programa retoma a execução, portanto é "
"menos provável que interfira em seu programa em comparação ao uso de "
"variáveis normais como ``foo = 1``."

#: ../../library/pdb.rst:285
msgid "There are three preset *convenience variables*:"
msgstr "Existem três *variáveis de conveniência* predefinidas:"

#: ../../library/pdb.rst:287
msgid "``$_frame``: the current frame you are debugging"
msgstr "``$_frame``: o quadro atual que você está depurando"

#: ../../library/pdb.rst:288
msgid "``$_retval``: the return value if the frame is returning"
msgstr "``$_retval``: o valor de retorno se o quadro estiver retornando"

#: ../../library/pdb.rst:289
msgid "``$_exception``: the exception if the frame is raising an exception"
msgstr "``$_exception``: a exceção se o quadro estiver levantando uma exceção"

#: ../../library/pdb.rst:293
msgid "Added the *convenience variable* feature."
msgstr "Adicionado o recurso de *variável de conveniência*."

#: ../../library/pdb.rst:299
msgid ""
"If a file :file:`.pdbrc` exists in the user's home directory or in the "
"current directory, it is read with ``'utf-8'`` encoding and executed as if "
"it had been typed at the debugger prompt, with the exception that empty "
"lines and lines starting with ``#`` are ignored.  This is particularly "
"useful for aliases.  If both files exist, the one in the home directory is "
"read first and aliases defined there can be overridden by the local file."
msgstr ""
"Se um arquivo :file:`.pdbrc` existe no diretório inicial do usuário ou no "
"diretório atual, ele é lido com a codificação ``'utf-8'`` e executado como "
"se tivesse sido digitado no prompt do depurador, com a exceção de que linhas "
"vazias e linhas iniciando com ``#`` são ignoradas. Isso é particularmente "
"útil para aliases. Se ambos os arquivos existirem, aquele no diretório "
"inicial será lido primeiro e os aliases definidos poderão ser substituídos "
"pelo arquivo local."

#: ../../library/pdb.rst:306
msgid ""
":file:`.pdbrc` can now contain commands that continue debugging, such as :"
"pdbcmd:`continue` or :pdbcmd:`next`.  Previously, these commands had no "
"effect."
msgstr ""
":file:`.pdbrc` agora pode conter comandos que continuam a depuração, como :"
"pdbcmd:`continue` ou :pdbcmd:`next`. Anteriormente, esses comandos não "
"tinham efeito."

#: ../../library/pdb.rst:311
msgid ""
":file:`.pdbrc` is now read with ``'utf-8'`` encoding. Previously, it was "
"read with the system locale encoding."
msgstr ""
":file:`.pdbrc` agora é lido com a codificação ``'utf-8'``. Anteriormente, "
"ele era lido com a codificação da localidade do sistema."

#: ../../library/pdb.rst:318
msgid ""
"Without argument, print the list of available commands.  With a *command* as "
"argument, print help about that command.  ``help pdb`` displays the full "
"documentation (the docstring of the :mod:`pdb` module).  Since the *command* "
"argument must be an identifier, ``help exec`` must be entered to get help on "
"the ``!`` command."
msgstr ""
"Sem argumento, imprime a lista de comandos disponíveis. Com um *command* "
"como argumento, imprime ajuda sobre esse comando. ``help pdb`` exibe a "
"documentação completa (a docstring do módulo :mod:`pdb`). Como o argumento "
"*command* deve ser um identificador, ``help exec`` deve ser inserido para "
"obter ajuda sobre o comando ``!``."

#: ../../library/pdb.rst:326
msgid ""
"Print a stack trace, with the most recent frame at the bottom.  An arrow "
"(``>``) indicates the current frame, which determines the context of most "
"commands."
msgstr ""
"Exibe um stack trace (situação da pilha de execução), com o quadro mais "
"recente na parte inferior. Uma seta (``>``) indica o quadro atual, que "
"determina o contexto da maioria dos comandos."

#: ../../library/pdb.rst:331
msgid ""
"Move the current frame *count* (default one) levels down in the stack trace "
"(to a newer frame)."
msgstr ""
"Move os níveis do quadro atual *count* (padrão 1) para baixo no stack trace "
"(para um quadro mais recente)."

#: ../../library/pdb.rst:336
msgid ""
"Move the current frame *count* (default one) levels up in the stack trace "
"(to an older frame)."
msgstr ""
"Move os níveis do quadro atual na *count* (padrão 1) para cima no stack "
"trace (para um quadro mais antigo)."

#: ../../library/pdb.rst:341
msgid ""
"With a *lineno* argument, set a break at line *lineno* in the current file. "
"The line number may be prefixed with a *filename* and a colon, to specify a "
"breakpoint in another file (possibly one that hasn't been loaded yet).  The "
"file is searched on :data:`sys.path`.  Accepatable forms of *filename* are "
"``/abspath/to/file.py``, ``relpath/file.py``, ``module`` and ``package."
"module``."
msgstr ""
"Com um argumento *lineno*, define uma quebra na linha *lineno* no arquivo "
"atual. O número da linha pode ser prefixado com *filename* e dois pontos, "
"para especificar um ponto de interrupção em outro arquivo (possivelmente um "
"que ainda não tenha sido carregado). O arquivo é pesquisado em :data:`sys."
"path`. Formas aceitáveis de *filename* são ``/caminhoabsoluto/para/arquivo."
"py``, ``caminhorelativo/do/arquivo.py``, ``módulo`` e ``pacote.módulo``."

#: ../../library/pdb.rst:348
msgid ""
"With a *function* argument, set a break at the first executable statement "
"within that function. *function* can be any expression that evaluates to a "
"function in the current namespace."
msgstr ""
"Com um argumento *function*, define uma interrupção na primeira instrução "
"executável dentro dessa função. *function* pode ser qualquer expressão "
"avaliada como uma função no espaço de nomes atual."

#: ../../library/pdb.rst:352
msgid ""
"If a second argument is present, it is an expression which must evaluate to "
"true before the breakpoint is honored."
msgstr ""
"Se um segundo argumento estiver presente, é uma expressão que deve ser "
"avaliada como verdadeira antes que o ponto de interrupção seja respeitado."

#: ../../library/pdb.rst:355
msgid ""
"Without argument, list all breaks, including for each breakpoint, the number "
"of times that breakpoint has been hit, the current ignore count, and the "
"associated condition if any."
msgstr ""
"Sem argumento, lista todas as quebras, inclusive para cada ponto de "
"interrupção, o número de vezes que o ponto de interrupção foi atingido, a "
"contagem atual de ignorados e a condição associada, se houver."

#: ../../library/pdb.rst:359
msgid ""
"Each breakpoint is assigned a number to which all the other breakpoint "
"commands refer."
msgstr ""
"Cada ponto de interrupção recebe um número ao qual todos os outros comandos "
"de ponto de interrupção se referem."

#: ../../library/pdb.rst:364
msgid ""
"Temporary breakpoint, which is removed automatically when it is first hit. "
"The arguments are the same as for :pdbcmd:`break`."
msgstr ""
"Ponto de interrupção temporário, que é removido automaticamente quando é "
"atingido pela primeira vez. Os argumentos são os mesmos que para :pdbcmd:"
"`break`."

#: ../../library/pdb.rst:369
msgid ""
"With a *filename:lineno* argument, clear all the breakpoints at this line. "
"With a space separated list of breakpoint numbers, clear those breakpoints. "
"Without argument, clear all breaks (but first ask confirmation)."
msgstr ""
"Com um argumento *filename:lineno*, limpa todos os pontos de interrupção "
"nessa linha. Com uma lista separada por espaços de números de ponto de "
"interrupção, limpa esses pontos de interrupção. Sem argumento, limpa todas "
"as quebras (mas primeiro pede a confirmação)."

#: ../../library/pdb.rst:375
msgid ""
"Disable the breakpoints given as a space separated list of breakpoint "
"numbers.  Disabling a breakpoint means it cannot cause the program to stop "
"execution, but unlike clearing a breakpoint, it remains in the list of "
"breakpoints and can be (re-)enabled."
msgstr ""
"Desativa os pontos de interrupção fornecidos como uma lista separada por "
"espaços de números de pontos de interrupção. Desabilitar um ponto de "
"interrupção significa que ele não pode interromper a execução do programa, "
"mas, ao contrário de limpar um ponto de interrupção, ele permanece na lista "
"de pontos de interrupção e pode ser (re)ativado."

#: ../../library/pdb.rst:382
msgid "Enable the breakpoints specified."
msgstr "Ativa o ponto de interrupção especificado."

#: ../../library/pdb.rst:386
msgid ""
"Set the ignore count for the given breakpoint number.  If *count* is "
"omitted, the ignore count is set to 0.  A breakpoint becomes active when the "
"ignore count is zero.  When non-zero, the *count* is decremented each time "
"the breakpoint is reached and the breakpoint is not disabled and any "
"associated condition evaluates to true."
msgstr ""
"Define a contagem de ignorados para o número do ponto de interrupção "
"especificado. Se *count* for omitida, a contagem de ignorados será definida "
"como 0. Um ponto de interrupção se torna ativo quando a contagem de "
"ignorados é zero. Quando diferente de zero, a contagem é decrementada cada "
"vez que o ponto de interrupção é atingido e o ponto de interrupção não é "
"desativado e qualquer condição associada é avaliada como verdadeira."

#: ../../library/pdb.rst:394
msgid ""
"Set a new *condition* for the breakpoint, an expression which must evaluate "
"to true before the breakpoint is honored.  If *condition* is absent, any "
"existing condition is removed; i.e., the breakpoint is made unconditional."
msgstr ""
"Define uma nova *condition* para o ponto de interrupção, uma expressão que "
"deve ser avaliada como verdadeira antes que o ponto de interrupção seja "
"respeitado. Se *condition* for omitida, qualquer condição existente será "
"removida; isto é, o ponto de interrupção é tornado incondicional."

#: ../../library/pdb.rst:400
msgid ""
"Specify a list of commands for breakpoint number *bpnumber*.  The commands "
"themselves appear on the following lines.  Type a line containing just "
"``end`` to terminate the commands. An example::"
msgstr ""
"Especifica uma lista de comandos para o número do ponto de interrupção "
"*bpnumber*. Os próprios comandos aparecem nas seguintes linhas. Digite em "
"uma linha contendo apenas ``end`` para finalizar os comandos. Um exemplo::"

#: ../../library/pdb.rst:404
msgid ""
"(Pdb) commands 1\n"
"(com) p some_variable\n"
"(com) end\n"
"(Pdb)"
msgstr ""

#: ../../library/pdb.rst:409
msgid ""
"To remove all commands from a breakpoint, type ``commands`` and follow it "
"immediately with ``end``; that is, give no commands."
msgstr ""
"Para remover todos os comandos de um ponto de interrupção, digite "
"``commands`` e siga-o imediatamente com ``end``; isto é, não dê comandos."

#: ../../library/pdb.rst:412
msgid ""
"With no *bpnumber* argument, ``commands`` refers to the last breakpoint set."
msgstr ""
"Sem argumento *bpnumber*, ``commands`` refere-se ao último conjunto de "
"pontos de interrupção."

#: ../../library/pdb.rst:414
msgid ""
"You can use breakpoint commands to start your program up again.  Simply use "
"the :pdbcmd:`continue` command, or :pdbcmd:`step`, or any other command that "
"resumes execution."
msgstr ""
"Você pode usar comandos de ponto de interrupção para iniciar seu programa "
"novamente. Simplesmente use o comando :pdbcmd:`continue`, ou :pdbcmd:`step`, "
"ou qualquer outro comando que reinicie a execução."

#: ../../library/pdb.rst:418
msgid ""
"Specifying any command resuming execution (currently :pdbcmd:`continue`, :"
"pdbcmd:`step`, :pdbcmd:`next`, :pdbcmd:`return`, :pdbcmd:`jump`, :pdbcmd:"
"`quit` and their abbreviations) terminates the command list (as if that "
"command was immediately followed by end). This is because any time you "
"resume execution (even with a simple next or step), you may encounter "
"another breakpoint—which could have its own command list, leading to "
"ambiguities about which list to execute."
msgstr ""
"Especificar qualquer comando que retome a execução (atualmente :pdbcmd:"
"`continue`, :pdbcmd:`step`, :pdbcmd:`next`, :pdbcmd:`return`, :pdbcmd:"
"`jump`, :pdbcmd:`quit` e suas abreviações) finaliza a lista de comandos "
"(como se esse comando fosse imediatamente seguido pelo final). Isso ocorre "
"sempre que você retoma a execução (mesmo com uma simples etapa ou etapa), "
"você pode encontrar outro ponto de interrupção — que pode ter sua própria "
"lista de comandos, levando a ambiguidades sobre qual lista executar."

#: ../../library/pdb.rst:427
msgid ""
"If you use the ``silent`` command in the command list, the usual message "
"about stopping at a breakpoint is not printed.  This may be desirable for "
"breakpoints that are to print a specific message and then continue.  If none "
"of the other commands print anything, you see no sign that the breakpoint "
"was reached."
msgstr ""
"Se você usar o comando ``silent`` na lista de comandos, a mensagem usual "
"sobre a parada em um ponto de interrupção não será impressa. Isso pode ser "
"desejável para pontos de interrupção que devem imprimir uma mensagem "
"específica e continuar. Se nenhum dos outros comandos imprimir alguma coisa, "
"você não vê sinal de que o ponto de interrupção foi atingido."

#: ../../library/pdb.rst:434
msgid ""
"Execute the current line, stop at the first possible occasion (either in a "
"function that is called or on the next line in the current function)."
msgstr ""
"Executa a linha atual, interrompe na primeira ocasião possível (em uma "
"função chamada ou na próxima linha na função atual)."

#: ../../library/pdb.rst:439
msgid ""
"Continue execution until the next line in the current function is reached or "
"it returns.  (The difference between :pdbcmd:`next` and :pdbcmd:`step` is "
"that :pdbcmd:`step` stops inside a called function, while :pdbcmd:`next` "
"executes called functions at (nearly) full speed, only stopping at the next "
"line in the current function.)"
msgstr ""
"Continua a execução até que a próxima linha na função atual seja atingida ou "
"ela retorne. (A diferença entre :pdbcmd:`next` e :pdbcmd:`step` é que :"
"pdbcmd:`step` para dentro de uma função chamada, enquanto :pdbcmd:`next` "
"executa funções chamadas em (quase) velocidade máxima, parando apenas na "
"próxima linha da função atual.)"

#: ../../library/pdb.rst:447
msgid ""
"Without argument, continue execution until the line with a number greater "
"than the current one is reached."
msgstr ""
"Sem argumento, continua a execução até que a linha com um número maior que o "
"atual seja atingida."

#: ../../library/pdb.rst:450
msgid ""
"With *lineno*, continue execution until a line with a number greater or "
"equal to *lineno* is reached.  In both cases, also stop when the current "
"frame returns."
msgstr ""
"Com *lineno*, continua a execução até que uma linha com um número maior ou "
"igual a *lineno* ser alcançada. Nos dois casos, também interrompe quando o "
"quadro atual retornar."

#: ../../library/pdb.rst:454
msgid "Allow giving an explicit line number."
msgstr "Permite fornecer um número de linha explícito."

#: ../../library/pdb.rst:459
msgid "Continue execution until the current function returns."
msgstr "Continua a execução até que a função atual retorne."

#: ../../library/pdb.rst:463
msgid "Continue execution, only stop when a breakpoint is encountered."
msgstr ""
"Continua a execução, interrompe apenas quando um ponto de interrupção for "
"encontrado."

#: ../../library/pdb.rst:467
msgid ""
"Set the next line that will be executed.  Only available in the bottom-most "
"frame.  This lets you jump back and execute code again, or jump forward to "
"skip code that you don't want to run."
msgstr ""
"Define a próxima linha que será executada. Disponível apenas no quadro mais "
"inferior. Isso permite voltar e executar o código novamente ou avançar para "
"pular o código que você não deseja executar."

#: ../../library/pdb.rst:471
msgid ""
"It should be noted that not all jumps are allowed -- for instance it is not "
"possible to jump into the middle of a :keyword:`for` loop or out of a :"
"keyword:`finally` clause."
msgstr ""
"Deve-se notar que nem todos os saltos são permitidos -- por exemplo, não é "
"possível pular para o meio de um loop de :keyword:`for` ou sair de uma "
"cláusula :keyword:`finally`."

#: ../../library/pdb.rst:477
msgid ""
"List source code for the current file.  Without arguments, list 11 lines "
"around the current line or continue the previous listing.  With ``.`` as "
"argument, list 11 lines around the current line.  With one argument, list 11 "
"lines around at that line.  With two arguments, list the given range; if the "
"second argument is less than the first, it is interpreted as a count."
msgstr ""
"Lista o código-fonte do arquivo atual. Sem argumentos, lista 11 linhas ao "
"redor da linha atual ou continue a listagem anterior. Com ``.`` como "
"argumento, lista 11 linhas ao redor da linha atual. Com um argumento, lista "
"11 linhas nessa linha. Com dois argumentos, lista o intervalo especificado; "
"se o segundo argumento for menor que o primeiro, ele será interpretado como "
"uma contagem."

#: ../../library/pdb.rst:483
msgid ""
"The current line in the current frame is indicated by ``->``.  If an "
"exception is being debugged, the line where the exception was originally "
"raised or propagated is indicated by ``>>``, if it differs from the current "
"line."
msgstr ""
"A linha atual no quadro atual é indicada por ``->``. Se uma exceção estiver "
"sendo depurada, a linha em que a exceção foi originalmente gerada ou "
"propagada é indicada por ``>>``, se for diferente da linha atual."

#: ../../library/pdb.rst:488
msgid "Added the ``>>`` marker."
msgstr "Adicionado o marcador ``>>``."

#: ../../library/pdb.rst:493
msgid ""
"List all source code for the current function or frame.  Interesting lines "
"are marked as for :pdbcmd:`list`."
msgstr ""
"Lista todo o código-fonte da função ou quadro atual. As linhas interessantes "
"estão marcadas como para :pdbcmd:`list`."

#: ../../library/pdb.rst:500
msgid "Print the arguments of the current function and their current values."
msgstr "Imprime os argumentos da função atual e seus valores atuais."

#: ../../library/pdb.rst:504
msgid "Evaluate *expression* in the current context and print its value."
msgstr "Avalia *expression* no contexto atual e imprima seu valor."

#: ../../library/pdb.rst:508
msgid ""
"``print()`` can also be used, but is not a debugger command --- this "
"executes the Python :func:`print` function."
msgstr ""
"``print()`` também pode ser usado, mas não é um comando de depuração --- "
"isso executa a função Python :func:`print`."

#: ../../library/pdb.rst:514
msgid ""
"Like the :pdbcmd:`p` command, except the value of *expression* is pretty-"
"printed using the :mod:`pprint` module."
msgstr ""
"Como o comando :pdbcmd:`p`, exceto que o valor de *expression* é bastante "
"impresso usando o módulo :mod:`pprint`."

#: ../../library/pdb.rst:519
msgid "Print the type of *expression*."
msgstr "Exibe o tipo de *expression*."

#: ../../library/pdb.rst:523
msgid "Try to get source code of *expression* and display it."
msgstr "Tenta obter o código-fonte de *expression* e exibe-o."

#: ../../library/pdb.rst:529
msgid ""
"Display the value of *expression* if it changed, each time execution stops "
"in the current frame."
msgstr ""
"Exibe o valor de *expression* caso ela tenha sido alterada, sempre que a "
"execução for interrompida no quadro atual."

#: ../../library/pdb.rst:532
msgid ""
"Without *expression*, list all display expressions for the current frame."
msgstr ""
"Sem *expression*, lista todas as expressões de exibição para o quadro atual."

#: ../../library/pdb.rst:536
msgid ""
"Display evaluates *expression* and compares to the result of the previous "
"evaluation of *expression*, so when the result is mutable, display may not "
"be able to pick up the changes."
msgstr ""
"Display avalia *expression* e compara com o resultado da avaliação anterior "
"de *expression*, portanto, quando o resultado é mutável, display pode não "
"ser capaz de captar as alterações."

#: ../../library/pdb.rst:540 ../../library/pdb.rst:690
msgid "Example::"
msgstr "Exemplo::"

#: ../../library/pdb.rst:542
msgid ""
"lst = []\n"
"breakpoint()\n"
"pass\n"
"lst.append(1)\n"
"print(lst)"
msgstr ""

#: ../../library/pdb.rst:548
msgid ""
"Display won't realize ``lst`` has been changed because the result of "
"evaluation is modified in place by ``lst.append(1)`` before being compared::"
msgstr ""
"Display não perceberá que ``lst`` foi alterado porque o resultado da "
"avaliação foi modificado internamente por ``lst.append(1)`` antes de ser "
"comparado::"

#: ../../library/pdb.rst:551
msgid ""
"> example.py(3)<module>()\n"
"-> pass\n"
"(Pdb) display lst\n"
"display lst: []\n"
"(Pdb) n\n"
"> example.py(4)<module>()\n"
"-> lst.append(1)\n"
"(Pdb) n\n"
"> example.py(5)<module>()\n"
"-> print(lst)\n"
"(Pdb)"
msgstr ""

#: ../../library/pdb.rst:563
msgid "You can do some tricks with copy mechanism to make it work::"
msgstr ""
"Você pode fazer alguns truques com o mecanismo de cópia para fazê-lo "
"funcionar::"

#: ../../library/pdb.rst:565
msgid ""
"> example.py(3)<module>()\n"
"-> pass\n"
"(Pdb) display lst[:]\n"
"display lst[:]: []\n"
"(Pdb) n\n"
"> example.py(4)<module>()\n"
"-> lst.append(1)\n"
"(Pdb) n\n"
"> example.py(5)<module>()\n"
"-> print(lst)\n"
"display lst[:]: [1]  [old: []]\n"
"(Pdb)"
msgstr ""

#: ../../library/pdb.rst:582
msgid ""
"Do not display *expression* anymore in the current frame.  Without "
"*expression*, clear all display expressions for the current frame."
msgstr ""
"Não exibe mais *expression* no quadro atual. Sem expressão, limpa todas as "
"expressões de exibição para o quadro atual."

#: ../../library/pdb.rst:589
msgid ""
"Start an interactive interpreter (using the :mod:`code` module) in a new "
"global namespace initialised from the local and global namespaces for the "
"current scope. Use ``exit()`` or ``quit()`` to exit the interpreter and "
"return to the debugger."
msgstr ""
"Inicia um interpretador interativo (usando o módulo :mod:`code`) em um novo "
"espaço de nomes global inicializado a partir dos espaços de nomes locais e "
"globais para o escopo atual. Use ``exit()`` ou ``quit()`` para sair do "
"interpretador e retornar ao depurador."

#: ../../library/pdb.rst:596
msgid ""
"As ``interact`` creates a new dedicated namespace for code execution, "
"assignments to variables will not affect the original namespaces. However, "
"modifications to any referenced mutable objects will be reflected in the "
"original namespaces as usual."
msgstr ""
"Como ``interact`` cria um novo espaço de nomes dedicado para execução de "
"código, atribuições a variáveis não afetarão os espaços de nomes originais. "
"No entanto, as modificações em quaisquer objetos mutáveis referenciados "
"serão refletidas nos espaços de nomes originais, como de costume."

#: ../../library/pdb.rst:603
msgid ""
"``exit()`` and ``quit()`` can be used to exit the :pdbcmd:`interact` command."
msgstr ""
"``exit()`` e ``quit()`` podem ser usados para sair do comando :pdbcmd:"
"`interact`."

#: ../../library/pdb.rst:607
msgid ""
":pdbcmd:`interact` directs its output to the debugger's output channel "
"rather than :data:`sys.stderr`."
msgstr ""
":pdbcmd:`interact` direciona sua saída para o canal de saída do depurador em "
"vez de :data:`sys.stderr`."

#: ../../library/pdb.rst:615
msgid ""
"Create an alias called *name* that executes *command*.  The *command* must "
"*not* be enclosed in quotes.  Replaceable parameters can be indicated by "
"``%1``, ``%2``, ... and ``%9``, while ``%*`` is replaced by all the "
"parameters. If *command* is omitted, the current alias for *name* is shown. "
"If no arguments are given, all aliases are listed."
msgstr ""
"Cria um apelido chamado *name* que executa *command*. O comando *command* "
"*não* deve ser colocado entre aspas. Parâmetros substituíveis podem ser "
"indicados por ``%1``, ``%2``, ... e ``%9``, enquanto ``%*`` é substituído "
"por todos os parâmetros. Se *command* for omitido, o apelido atual para "
"*name* será mostrado. Se nenhum argumento for fornecido, todos os apelidos "
"serão listados."

#: ../../library/pdb.rst:621
msgid ""
"Aliases may be nested and can contain anything that can be legally typed at "
"the pdb prompt.  Note that internal pdb commands *can* be overridden by "
"aliases.  Such a command is then hidden until the alias is removed.  "
"Aliasing is recursively applied to the first word of the command line; all "
"other words in the line are left alone."
msgstr ""
"Os aliases podem ser aninhados e podem conter qualquer coisa que possa ser "
"digitada legalmente no prompt do pdb. Observe que os comandos internos do "
"pdb *podem* ser substituídos por aliases. Esse comando é oculto até que o "
"alias seja removido. O alias é aplicado recursivamente à primeira palavra da "
"linha de comando; todas as outras palavras da linha são deixadas em paz."

#: ../../library/pdb.rst:627
msgid ""
"As an example, here are two useful aliases (especially when placed in the :"
"file:`.pdbrc` file)::"
msgstr ""
"Como exemplo, aqui estão dois aliases úteis (especialmente quando colocados "
"no arquivo :file:`.pdbrc`)::"

#: ../../library/pdb.rst:630
msgid ""
"# Print instance variables (usage \"pi classInst\")\n"
"alias pi for k in %1.__dict__.keys(): print(f\"%1.{k} = {%1.__dict__[k]}\")\n"
"# Print instance variables in self\n"
"alias ps pi self"
msgstr ""

#: ../../library/pdb.rst:637
msgid "Delete the specified alias *name*."
msgstr "Executa o alias *name* especificado."

#: ../../library/pdb.rst:641
msgid ""
"Execute the (one-line) *statement* in the context of the current stack "
"frame. The exclamation point can be omitted unless the first word of the "
"statement resembles a debugger command, e.g.:"
msgstr ""
"Executa a instrução *statement* (de uma só linha) no contexto do quadro de "
"pilha atual. O ponto de exclamação pode ser omitido, a menos que a primeira "
"palavra da instrução seja semelhante a um comando de depuração, por exemplo:"

#: ../../library/pdb.rst:645
msgid ""
"(Pdb) ! n=42\n"
"(Pdb)"
msgstr ""

#: ../../library/pdb.rst:650
msgid ""
"To set a global variable, you can prefix the assignment command with a :"
"keyword:`global` statement on the same line, e.g.:"
msgstr ""
"Para definir uma variável global, você pode prefixar o comando de atribuição "
"com uma instrução :keyword:`global` na mesma linha, por exemplo:"

#: ../../library/pdb.rst:653
msgid ""
"(Pdb) global list_options; list_options = ['-l']\n"
"(Pdb)"
msgstr ""

#: ../../library/pdb.rst:661
msgid ""
"Restart the debugged Python program.  If *args* is supplied, it is split "
"with :mod:`shlex` and the result is used as the new :data:`sys.argv`. "
"History, breakpoints, actions and debugger options are preserved. :pdbcmd:"
"`restart` is an alias for :pdbcmd:`run`."
msgstr ""
"Reinicia o programa Python depurado. Se *args* for fornecido, ele é dividido "
"com :mod:`shlex` e o resultado é usado como o novo :data:`sys.argv`. "
"Histórico, pontos de interrupção, ações e opções do depurador são "
"preservados. :pdbcmd:`restart` é um apelido para :pdbcmd:`run`."

#: ../../library/pdb.rst:668
msgid "Quit from the debugger.  The program being executed is aborted."
msgstr "Sai do depurador. O programa que está sendo executado é abortado."

#: ../../library/pdb.rst:672
msgid ""
"Enter a recursive debugger that steps through *code* (which is an arbitrary "
"expression or statement to be executed in the current environment)."
msgstr ""
"Entra em um depurador recursivo que percorre *code* (que é uma expressão ou "
"instrução arbitrária a ser executada no ambiente atual)."

#: ../../library/pdb.rst:678
msgid "Print the return value for the last return of the current function."
msgstr "Exibe o valor de retorno para o último retorno de a função atual."

#: ../../library/pdb.rst:682
msgid "List or jump between chained exceptions."
msgstr "Lista ou salta entre exceções encadeadas."

#: ../../library/pdb.rst:684
msgid ""
"When using ``pdb.pm()``  or ``Pdb.post_mortem(...)`` with a chained "
"exception instead of a traceback, it allows the user to move between the "
"chained exceptions using ``exceptions`` command to list exceptions, and "
"``exception <number>`` to switch to that exception."
msgstr ""
"Ao usar ``pdb.pm()`` ou ``Pdb.post_mortem(...)`` com uma exceção encadeada "
"em vez de um traceback, permite ao usuário mover entre as exceções "
"encadeadas usando o comando ``exceptions`` para listar exceções e "
"``exception <número>`` para mudar para essa exceção."

#: ../../library/pdb.rst:692
msgid ""
"def out():\n"
"    try:\n"
"        middle()\n"
"    except Exception as e:\n"
"        raise ValueError(\"reraise middle() error\") from e\n"
"\n"
"def middle():\n"
"    try:\n"
"        return inner(0)\n"
"    except Exception as e:\n"
"        raise ValueError(\"Middle fail\")\n"
"\n"
"def inner(x):\n"
"    1 / x\n"
"\n"
" out()"
msgstr ""

#: ../../library/pdb.rst:709
msgid "calling ``pdb.pm()`` will allow to move between exceptions::"
msgstr "chamar ``pdb.pm()`` permitirá mover entre exceções::"

#: ../../library/pdb.rst:711
msgid ""
"> example.py(5)out()\n"
"-> raise ValueError(\"reraise middle() error\") from e\n"
"\n"
"(Pdb) exceptions\n"
"  0 ZeroDivisionError('division by zero')\n"
"  1 ValueError('Middle fail')\n"
"> 2 ValueError('reraise middle() error')\n"
"\n"
"(Pdb) exceptions 0\n"
"> example.py(16)inner()\n"
"-> 1 / x\n"
"\n"
"(Pdb) up\n"
"> example.py(10)middle()\n"
"-> return inner(0)"
msgstr ""

#: ../../library/pdb.rst:730
msgid "Footnotes"
msgstr "Notas de rodapé"

#: ../../library/pdb.rst:731
msgid ""
"Whether a frame is considered to originate in a certain module is determined "
"by the ``__name__`` in the frame globals."
msgstr ""
"Se um quadro é considerado originário de um determinado módulo é determinado "
"pelo ``__name__`` nos globais do quadro."

#: ../../library/pdb.rst:11
msgid "debugging"
msgstr "depuração"

#: ../../library/pdb.rst:21
msgid "Pdb (class in pdb)"
msgstr "Pdb (classe no pdb)"

#: ../../library/pdb.rst:21
msgid "module"
msgstr "módulo"

#: ../../library/pdb.rst:21
msgid "bdb"
msgstr "bdb"

#: ../../library/pdb.rst:21
msgid "cmd"
msgstr "cmd"

#: ../../library/pdb.rst:295
msgid ".pdbrc"
msgstr ".pdbrc"

#: ../../library/pdb.rst:295
msgid "file"
msgstr "arquivo"

#: ../../library/pdb.rst:295
msgid "debugger"
msgstr "depurador"

#: ../../library/pdb.rst:295
msgid "configuration"
msgstr "configuração"
