# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2019-11-03 17:15+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/"
"python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../library/inspect.rst:2
msgid ":mod:`inspect` --- Inspect live objects"
msgstr ":mod:`inspect` --- Inspeciona objetos vivos"

#: ../../library/inspect.rst:12
msgid "**Source code:** :source:`Lib/inspect.py`"
msgstr "**Código Fonte:** :source:`Lib/inspect.py`"

#: ../../library/inspect.rst:16
msgid ""
"The :mod:`inspect` module provides several useful functions to help get "
"information about live objects such as modules, classes, methods, functions, "
"tracebacks, frame objects, and code objects.  For example, it can help you "
"examine the contents of a class, retrieve the source code of a method, "
"extract and format the argument list for a function, or get all the "
"information you need to display a detailed traceback."
msgstr ""

#: ../../library/inspect.rst:23
msgid ""
"There are four main kinds of services provided by this module: type "
"checking, getting source code, inspecting classes and functions, and "
"examining the interpreter stack."
msgstr ""

#: ../../library/inspect.rst:31
msgid "Types and members"
msgstr "Tipos e membros"

#: ../../library/inspect.rst:33
msgid ""
"The :func:`getmembers` function retrieves the members of an object such as a "
"class or module. The sixteen functions whose names begin with \"is\" are "
"mainly provided as convenient choices for the second argument to :func:"
"`getmembers`. They also help you determine when you can expect to find the "
"following special attributes:"
msgstr ""

#: ../../library/inspect.rst:40
msgid "Type"
msgstr "Tipo"

#: ../../library/inspect.rst:40
msgid "Attribute"
msgstr "Attribute"

#: ../../library/inspect.rst:40
msgid "Description"
msgstr "Descrição"

#: ../../library/inspect.rst:40
msgid "Notes"
msgstr "Notas"

#: ../../library/inspect.rst:42
msgid "module"
msgstr "module (módulo)"

#: ../../library/inspect.rst:42 ../../library/inspect.rst:47
#: ../../library/inspect.rst:52 ../../library/inspect.rst:68
#: ../../library/inspect.rst:208
msgid "__doc__"
msgstr "__doc__"

#: ../../library/inspect.rst:42 ../../library/inspect.rst:47
#: ../../library/inspect.rst:52 ../../library/inspect.rst:68
#: ../../library/inspect.rst:208
msgid "documentation string"
msgstr "string de documentação"

#: ../../library/inspect.rst:44
msgid "__file__"
msgstr "__file__"

#: ../../library/inspect.rst:44
msgid "filename (missing for built-in modules)"
msgstr "nome de arquivo (faltando para módulos embutidos)"

#: ../../library/inspect.rst:47
msgid "class"
msgstr "Classe"

#: ../../library/inspect.rst:49
msgid "__module__"
msgstr "__module__"

#: ../../library/inspect.rst:49
msgid "name of module in which this class was defined"
msgstr "nome do módulo no qual esta classe foi definida"

#: ../../library/inspect.rst:52
msgid "method"
msgstr "method (método)"

#: ../../library/inspect.rst:54 ../../library/inspect.rst:70
#: ../../library/inspect.rst:210
msgid "__name__"
msgstr "__name__"

#: ../../library/inspect.rst:54
msgid "name with which this method was defined"
msgstr "nome com o qual este método foi definido"

#: ../../library/inspect.rst:57
msgid "im_class"
msgstr ""

#: ../../library/inspect.rst:57
msgid "class object that asked for this method"
msgstr ""

#: ../../library/inspect.rst:57
msgid "\\(1)"
msgstr "\\(1)"

#: ../../library/inspect.rst:60
msgid "im_func or __func__"
msgstr ""

#: ../../library/inspect.rst:60
msgid "function object containing implementation of method"
msgstr "objeto função contendo implementação de método"

#: ../../library/inspect.rst:64
msgid "im_self or __self__"
msgstr ""

#: ../../library/inspect.rst:64
msgid "instance to which this method is bound, or ``None``"
msgstr "instância para o qual este método está vinculado, ou ``None``."

#: ../../library/inspect.rst:68
msgid "function"
msgstr "function (função)"

#: ../../library/inspect.rst:70
msgid "name with which this function was defined"
msgstr "nome com o qual esta função foi definida"

#: ../../library/inspect.rst:73
msgid "func_code"
msgstr ""

#: ../../library/inspect.rst:73
msgid "code object containing compiled function :term:`bytecode`"
msgstr ""

#: ../../library/inspect.rst:77
msgid "func_defaults"
msgstr ""

#: ../../library/inspect.rst:77
msgid "tuple of any default values for arguments"
msgstr ""

#: ../../library/inspect.rst:80
msgid "func_doc"
msgstr ""

#: ../../library/inspect.rst:80
msgid "(same as __doc__)"
msgstr ""

#: ../../library/inspect.rst:82
msgid "func_globals"
msgstr ""

#: ../../library/inspect.rst:82
msgid "global namespace in which this function was defined"
msgstr ""

#: ../../library/inspect.rst:85
msgid "func_name"
msgstr ""

#: ../../library/inspect.rst:85
msgid "(same as __name__)"
msgstr ""

#: ../../library/inspect.rst:87
msgid "generator"
msgstr "generator"

#: ../../library/inspect.rst:87
msgid "__iter__"
msgstr "__iter__"

#: ../../library/inspect.rst:87
msgid "defined to support iteration over container"
msgstr ""

#: ../../library/inspect.rst:90
msgid "close"
msgstr ""

#: ../../library/inspect.rst:90
msgid ""
"raises new GeneratorExit exception inside the generator to terminate the "
"iteration"
msgstr ""

#: ../../library/inspect.rst:95
msgid "gi_code"
msgstr "gi_code"

#: ../../library/inspect.rst:95
msgid "code object"
msgstr "objeto código"

#: ../../library/inspect.rst:97
msgid "gi_frame"
msgstr "gi_frame"

#: ../../library/inspect.rst:97
msgid "frame object or possibly ``None`` once the generator has been exhausted"
msgstr ""

#: ../../library/inspect.rst:102
msgid "gi_running"
msgstr "gi_running"

#: ../../library/inspect.rst:102
msgid "set to 1 when generator is executing, 0 otherwise"
msgstr ""

#: ../../library/inspect.rst:105
msgid "next"
msgstr ""

#: ../../library/inspect.rst:105
msgid "return the next item from the container"
msgstr ""

#: ../../library/inspect.rst:108
msgid "send"
msgstr ""

#: ../../library/inspect.rst:108
msgid ""
"resumes the generator and \"sends\" a value that becomes the result of the "
"current yield-expression"
msgstr ""

#: ../../library/inspect.rst:113
msgid "throw"
msgstr ""

#: ../../library/inspect.rst:113
msgid "used to raise an exception inside the generator"
msgstr ""

#: ../../library/inspect.rst:117
msgid "traceback"
msgstr "traceback"

#: ../../library/inspect.rst:117
msgid "tb_frame"
msgstr "tb_frame"

#: ../../library/inspect.rst:117
msgid "frame object at this level"
msgstr ""

#: ../../library/inspect.rst:120
msgid "tb_lasti"
msgstr "tb_lasti"

#: ../../library/inspect.rst:120 ../../library/inspect.rst:153
msgid "index of last attempted instruction in bytecode"
msgstr ""

#: ../../library/inspect.rst:123
msgid "tb_lineno"
msgstr "tb_lineno"

#: ../../library/inspect.rst:123 ../../library/inspect.rst:156
msgid "current line number in Python source code"
msgstr ""

#: ../../library/inspect.rst:126
msgid "tb_next"
msgstr "tb_next"

#: ../../library/inspect.rst:126
msgid "next inner traceback object (called by this level)"
msgstr ""

#: ../../library/inspect.rst:130
msgid "frame"
msgstr "quadro"

#: ../../library/inspect.rst:130
msgid "f_back"
msgstr "f_back"

#: ../../library/inspect.rst:130
msgid "next outer frame object (this frame's caller)"
msgstr ""

#: ../../library/inspect.rst:133
msgid "f_builtins"
msgstr "f_builtins"

#: ../../library/inspect.rst:133
msgid "builtins namespace seen by this frame"
msgstr ""

#: ../../library/inspect.rst:136
msgid "f_code"
msgstr "f_code"

#: ../../library/inspect.rst:136
msgid "code object being executed in this frame"
msgstr ""

#: ../../library/inspect.rst:139
msgid "f_exc_traceback"
msgstr ""

#: ../../library/inspect.rst:139
msgid "traceback if raised in this frame, or ``None``"
msgstr ""

#: ../../library/inspect.rst:142
msgid "f_exc_type"
msgstr ""

#: ../../library/inspect.rst:142
msgid "exception type if raised in this frame, or ``None``"
msgstr ""

#: ../../library/inspect.rst:146
msgid "f_exc_value"
msgstr ""

#: ../../library/inspect.rst:146
msgid "exception value if raised in this frame, or ``None``"
msgstr ""

#: ../../library/inspect.rst:150
msgid "f_globals"
msgstr "f_globals"

#: ../../library/inspect.rst:150
msgid "global namespace seen by this frame"
msgstr ""

#: ../../library/inspect.rst:153
msgid "f_lasti"
msgstr "f_lasti"

#: ../../library/inspect.rst:156
msgid "f_lineno"
msgstr "f_lineno"

#: ../../library/inspect.rst:159
msgid "f_locals"
msgstr "f_locals"

#: ../../library/inspect.rst:159
msgid "local namespace seen by this frame"
msgstr ""

#: ../../library/inspect.rst:162
msgid "f_restricted"
msgstr ""

#: ../../library/inspect.rst:162
msgid "0 or 1 if frame is in restricted execution mode"
msgstr ""

#: ../../library/inspect.rst:165
msgid "f_trace"
msgstr "f_trace"

#: ../../library/inspect.rst:165
msgid "tracing function for this frame, or ``None``"
msgstr ""

#: ../../library/inspect.rst:168
msgid "code"
msgstr "código"

#: ../../library/inspect.rst:168
msgid "co_argcount"
msgstr "co_argcount"

#: ../../library/inspect.rst:168
msgid "number of arguments (not including \\* or \\*\\* args)"
msgstr ""

#: ../../library/inspect.rst:172
msgid "co_code"
msgstr "co_code"

#: ../../library/inspect.rst:172
msgid "string of raw compiled bytecode"
msgstr ""

#: ../../library/inspect.rst:175
msgid "co_consts"
msgstr "co_consts"

#: ../../library/inspect.rst:175
msgid "tuple of constants used in the bytecode"
msgstr ""

#: ../../library/inspect.rst:178
msgid "co_filename"
msgstr "co_filename"

#: ../../library/inspect.rst:178
msgid "name of file in which this code object was created"
msgstr ""

#: ../../library/inspect.rst:182
msgid "co_firstlineno"
msgstr "co_firstlineno"

#: ../../library/inspect.rst:182
msgid "number of first line in Python source code"
msgstr ""

#: ../../library/inspect.rst:185
msgid "co_flags"
msgstr "co_flags"

#: ../../library/inspect.rst:185
msgid "bitmap: 1=optimized ``|`` 2=newlocals ``|`` 4=\\*arg ``|`` 8=\\*\\*arg"
msgstr ""

#: ../../library/inspect.rst:189
msgid "co_lnotab"
msgstr "co_lnotab"

#: ../../library/inspect.rst:189
msgid "encoded mapping of line numbers to bytecode indices"
msgstr ""

#: ../../library/inspect.rst:193
msgid "co_name"
msgstr "co_name"

#: ../../library/inspect.rst:193
msgid "name with which this code object was defined"
msgstr ""

#: ../../library/inspect.rst:196
msgid "co_names"
msgstr "co_names"

#: ../../library/inspect.rst:196
msgid "tuple of names of local variables"
msgstr ""

#: ../../library/inspect.rst:199
msgid "co_nlocals"
msgstr "co_nlocals"

#: ../../library/inspect.rst:199
msgid "number of local variables"
msgstr ""

#: ../../library/inspect.rst:201
msgid "co_stacksize"
msgstr "co_stacksize"

#: ../../library/inspect.rst:201
msgid "virtual machine stack space required"
msgstr ""

#: ../../library/inspect.rst:204
msgid "co_varnames"
msgstr "co_varnames"

#: ../../library/inspect.rst:204
msgid "tuple of names of arguments and local variables"
msgstr ""

#: ../../library/inspect.rst:208
msgid "builtin"
msgstr ""

#: ../../library/inspect.rst:210
msgid "original name of this function or method"
msgstr ""

#: ../../library/inspect.rst:213
msgid "__self__"
msgstr "__self__"

#: ../../library/inspect.rst:213
msgid "instance to which a method is bound, or ``None``"
msgstr ""

#: ../../library/inspect.rst:218
msgid "Note:"
msgstr "Note:"

#: ../../library/inspect.rst:221
msgid ":attr:`im_class` used to refer to the class that defined the method."
msgstr ""

#: ../../library/inspect.rst:227
msgid ""
"Return all the members of an object in a list of (name, value) pairs sorted "
"by name.  If the optional *predicate* argument is supplied, only members for "
"which the predicate returns a true value are included."
msgstr ""

#: ../../library/inspect.rst:233
msgid ""
":func:`getmembers` does not return metaclass attributes when the argument is "
"a class (this behavior is inherited from the :func:`dir` function)."
msgstr ""

#: ../../library/inspect.rst:239
msgid ""
"Return a tuple of values that describe how Python will interpret the file "
"identified by *path* if it is a module, or ``None`` if it would not be "
"identified as a module.  The return tuple is ``(name, suffix, mode, "
"module_type)``, where *name* is the name of the module without the name of "
"any enclosing package, *suffix* is the trailing part of the file name (which "
"may not be a dot-delimited extension), *mode* is the :func:`open` mode that "
"would be used (``'r'`` or ``'rb'``), and *module_type* is an integer giving "
"the type of the module.  *module_type* will have a value which can be "
"compared to the constants defined in the :mod:`imp` module; see the "
"documentation for that module for more information on module types."
msgstr ""

#: ../../library/inspect.rst:250
msgid ""
"Returns a :term:`named tuple` ``ModuleInfo(name, suffix, mode, "
"module_type)``."
msgstr ""

#: ../../library/inspect.rst:257
msgid ""
"Return the name of the module named by the file *path*, without including "
"the names of enclosing packages.  This uses the same algorithm as the "
"interpreter uses when searching for modules.  If the name cannot be matched "
"according to the interpreter's rules, ``None`` is returned."
msgstr ""

#: ../../library/inspect.rst:265
msgid "Return true if the object is a module."
msgstr ""

#: ../../library/inspect.rst:270
msgid ""
"Return true if the object is a class, whether built-in or created in Python "
"code."
msgstr ""

#: ../../library/inspect.rst:276
msgid ""
"Return true if the object is a bound or unbound method written in Python."
msgstr ""

#: ../../library/inspect.rst:282
msgid ""
"Return true if the object is a Python function, which includes functions "
"created by a :term:`lambda` expression."
msgstr ""

#: ../../library/inspect.rst:288
msgid "Return true if the object is a Python generator function."
msgstr ""

#: ../../library/inspect.rst:295
msgid "Return true if the object is a generator."
msgstr ""

#: ../../library/inspect.rst:302
msgid "Return true if the object is a traceback."
msgstr ""

#: ../../library/inspect.rst:307
msgid "Return true if the object is a frame."
msgstr ""

#: ../../library/inspect.rst:312
msgid "Return true if the object is a code."
msgstr ""

#: ../../library/inspect.rst:317
msgid ""
"Return true if the object is a built-in function or a bound built-in method."
msgstr ""

#: ../../library/inspect.rst:322
msgid ""
"Return true if the object is a user-defined or built-in function or method."
msgstr ""

#: ../../library/inspect.rst:327
msgid "Return true if the object is an abstract base class."
msgstr ""

#: ../../library/inspect.rst:334
msgid ""
"Return true if the object is a method descriptor, but not if :func:"
"`ismethod`, :func:`isclass`, :func:`isfunction` or :func:`isbuiltin` are "
"true."
msgstr ""

#: ../../library/inspect.rst:338
msgid ""
"This is new as of Python 2.2, and, for example, is true of ``int.__add__``. "
"An object passing this test has a :meth:`~object.__get__` method but not a :"
"meth:`~object.__set__` method, but beyond that the set of attributes "
"varies.  A :attr:`~definition.__name__` attribute is usually sensible, and :"
"attr:`__doc__` often is."
msgstr ""

#: ../../library/inspect.rst:345
msgid ""
"Methods implemented via descriptors that also pass one of the other tests "
"return false from the :func:`ismethoddescriptor` test, simply because the "
"other tests promise more -- you can, e.g., count on having the :attr:"
"`im_func` attribute (etc) when an object passes :func:`ismethod`."
msgstr ""

#: ../../library/inspect.rst:353
msgid "Return true if the object is a data descriptor."
msgstr ""

#: ../../library/inspect.rst:355
msgid ""
"Data descriptors have both a :attr:`~object.__get__` and a :attr:`~object."
"__set__` method. Examples are properties (defined in Python), getsets, and "
"members.  The latter two are defined in C and there are more specific tests "
"available for those types, which is robust across Python implementations.  "
"Typically, data descriptors will also have :attr:`~definition.__name__` and :"
"attr:`__doc__` attributes (properties, getsets, and members have both of "
"these attributes), but this is not guaranteed."
msgstr ""

#: ../../library/inspect.rst:368
msgid "Return true if the object is a getset descriptor."
msgstr ""

#: ../../library/inspect.rst:372
msgid ""
"getsets are attributes defined in extension modules via :c:type:"
"`PyGetSetDef` structures.  For Python implementations without such types, "
"this method will always return ``False``."
msgstr ""

#: ../../library/inspect.rst:381
msgid "Return true if the object is a member descriptor."
msgstr ""

#: ../../library/inspect.rst:385
msgid ""
"Member descriptors are attributes defined in extension modules via :c:type:"
"`PyMemberDef` structures.  For Python implementations without such types, "
"this method will always return ``False``."
msgstr ""

#: ../../library/inspect.rst:395
msgid "Retrieving source code"
msgstr ""

#: ../../library/inspect.rst:399
msgid ""
"Get the documentation string for an object, cleaned up with :func:`cleandoc`."
msgstr ""

#: ../../library/inspect.rst:404
msgid ""
"Return in a single string any lines of comments immediately preceding the "
"object's source code (for a class, function, or method), or at the top of "
"the Python source file (if the object is a module)."
msgstr ""

#: ../../library/inspect.rst:411
msgid ""
"Return the name of the (text or binary) file in which an object was defined. "
"This will fail with a :exc:`TypeError` if the object is a built-in module, "
"class, or function."
msgstr ""
"Retorna o nome do arquivo (texto ou binário) no qual um objeto foi definido. "
"Isso falhará com um: exc: `TypeError` se o objeto for um módulo, classe ou "
"função embutidos."

#: ../../library/inspect.rst:418
msgid "Try to guess which module an object was defined in."
msgstr ""

#: ../../library/inspect.rst:423
msgid ""
"Return the name of the Python source file in which an object was defined.  "
"This will fail with a :exc:`TypeError` if the object is a built-in module, "
"class, or function."
msgstr ""

#: ../../library/inspect.rst:430
msgid ""
"Return a list of source lines and starting line number for an object. The "
"argument may be a module, class, method, function, traceback, frame, or code "
"object.  The source code is returned as a list of the lines corresponding to "
"the object and the line number indicates where in the original source file "
"the first line of code was found.  An :exc:`IOError` is raised if the source "
"code cannot be retrieved."
msgstr ""

#: ../../library/inspect.rst:440
msgid ""
"Return the text of the source code for an object. The argument may be a "
"module, class, method, function, traceback, frame, or code object.  The "
"source code is returned as a single string.  An :exc:`IOError` is raised if "
"the source code cannot be retrieved."
msgstr ""

#: ../../library/inspect.rst:448
msgid ""
"Clean up indentation from docstrings that are indented to line up with "
"blocks of code."
msgstr ""

#: ../../library/inspect.rst:451
msgid ""
"All leading whitespace is removed from the first line.  Any leading "
"whitespace that can be uniformly removed from the second line onwards is "
"removed.  Empty lines at the beginning and end are subsequently removed.  "
"Also, all tabs are expanded to spaces."
msgstr ""

#: ../../library/inspect.rst:462
msgid "Classes and functions"
msgstr "Classes e funções"

#: ../../library/inspect.rst:467
msgid ""
"Arrange the given list of classes into a hierarchy of nested lists. Where a "
"nested list appears, it contains classes derived from the class whose entry "
"immediately precedes the list.  Each entry is a 2-tuple containing a class "
"and a tuple of its base classes.  If the *unique* argument is true, exactly "
"one entry appears in the returned structure for each class in the given "
"list.  Otherwise, classes using multiple inheritance and their descendants "
"will appear multiple times."
msgstr ""

#: ../../library/inspect.rst:478
msgid ""
"Get the names and default values of a Python function's arguments. A tuple "
"of four things is returned: ``(args, varargs, keywords, defaults)``. *args* "
"is a list of the argument names (it may contain nested lists). *varargs* and "
"*keywords* are the names of the ``*`` and ``**`` arguments or ``None``. "
"*defaults* is a tuple of default argument values or ``None`` if there are no "
"default arguments; if this tuple has *n* elements, they correspond to the "
"last *n* elements listed in *args*."
msgstr ""

#: ../../library/inspect.rst:486
msgid ""
"Returns a :term:`named tuple` ``ArgSpec(args, varargs, keywords, defaults)``."
msgstr ""

#: ../../library/inspect.rst:493
msgid ""
"Get information about arguments passed into a particular frame. A tuple of "
"four things is returned: ``(args, varargs, keywords, locals)``. *args* is a "
"list of the argument names (it may contain nested lists). *varargs* and "
"*keywords* are the names of the ``*`` and ``**`` arguments or ``None``. "
"*locals* is the locals dictionary of the given frame."
msgstr ""

#: ../../library/inspect.rst:499
msgid ""
"Returns a :term:`named tuple` ``ArgInfo(args, varargs, keywords, locals)``."
msgstr ""

#: ../../library/inspect.rst:506
msgid ""
"Format a pretty argument spec from the four values returned by :func:"
"`getargspec`.  The format\\* arguments are the corresponding optional "
"formatting functions that are called to turn names and values into strings."
msgstr ""

#: ../../library/inspect.rst:513
msgid ""
"Format a pretty argument spec from the four values returned by :func:"
"`getargvalues`.  The format\\* arguments are the corresponding optional "
"formatting functions that are called to turn names and values into strings."
msgstr ""

#: ../../library/inspect.rst:520
msgid ""
"Return a tuple of class cls's base classes, including cls, in method "
"resolution order.  No class appears more than once in this tuple. Note that "
"the method resolution order depends on cls's type.  Unless a very peculiar "
"user-defined metatype is in use, cls will be the first element of the tuple."
msgstr ""

#: ../../library/inspect.rst:528
msgid ""
"Bind the *args* and *kwds* to the argument names of the Python function or "
"method *func*, as if it was called with them. For bound methods, bind also "
"the first argument (typically named ``self``) to the associated instance. A "
"dict is returned, mapping the argument names (including the names of the "
"``*`` and ``**`` arguments, if any) to their values from *args* and *kwds*. "
"In case of invoking *func* incorrectly, i.e. whenever ``func(*args, "
"**kwds)`` would raise an exception because of incompatible signature, an "
"exception of the same type and the same or similar message is raised. For "
"example::"
msgstr ""

#: ../../library/inspect.rst:555
msgid "The interpreter stack"
msgstr "A pilha to interpretador"

#: ../../library/inspect.rst:557
msgid ""
"When the following functions return \"frame records,\" each record is a "
"tuple of six items: the frame object, the filename, the line number of the "
"current line, the function name, a list of lines of context from the source "
"code, and the index of the current line within that list."
msgstr ""

#: ../../library/inspect.rst:564
msgid ""
"Keeping references to frame objects, as found in the first element of the "
"frame records these functions return, can cause your program to create "
"reference cycles.  Once a reference cycle has been created, the lifespan of "
"all objects which can be accessed from the objects which form the cycle can "
"become much longer even if Python's optional cycle detector is enabled.  If "
"such cycles must be created, it is important to ensure they are explicitly "
"broken to avoid the delayed destruction of objects and increased memory "
"consumption which occurs."
msgstr ""

#: ../../library/inspect.rst:572
msgid ""
"Though the cycle detector will catch these, destruction of the frames (and "
"local variables) can be made deterministic by removing the cycle in a :"
"keyword:`finally` clause.  This is also important if the cycle detector was "
"disabled when Python was compiled or using :func:`gc.disable`.  For example::"
msgstr ""

#: ../../library/inspect.rst:584
msgid ""
"The optional *context* argument supported by most of these functions "
"specifies the number of lines of context to return, which are centered "
"around the current line."
msgstr ""

#: ../../library/inspect.rst:591
msgid ""
"Get information about a frame or traceback object.  A 5-tuple is returned, "
"the last five elements of the frame's frame record."
msgstr ""

#: ../../library/inspect.rst:594
msgid ""
"Returns a :term:`named tuple` ``Traceback(filename, lineno, function, "
"code_context, index)``."
msgstr ""

#: ../../library/inspect.rst:601
msgid ""
"Get a list of frame records for a frame and all outer frames.  These frames "
"represent the calls that lead to the creation of *frame*. The first entry in "
"the returned list represents *frame*; the last entry represents the "
"outermost call on *frame*'s stack."
msgstr ""

#: ../../library/inspect.rst:609
msgid ""
"Get a list of frame records for a traceback's frame and all inner frames.  "
"These frames represent calls made as a consequence of *frame*.  The first "
"entry in the list represents *traceback*; the last entry represents where "
"the exception was raised."
msgstr ""

#: ../../library/inspect.rst:617
msgid "Return the frame object for the caller's stack frame."
msgstr ""

#: ../../library/inspect.rst:621
msgid ""
"This function relies on Python stack frame support in the interpreter, which "
"isn't guaranteed to exist in all implementations of Python.  If running in "
"an implementation without Python stack frame support this function returns "
"``None``."
msgstr ""

#: ../../library/inspect.rst:629
msgid ""
"Return a list of frame records for the caller's stack.  The first entry in "
"the returned list represents the caller; the last entry represents the "
"outermost call on the stack."
msgstr ""

#: ../../library/inspect.rst:636
msgid ""
"Return a list of frame records for the stack between the current frame and "
"the frame in which an exception currently being handled was raised in.  The "
"first entry in the list represents the caller; the last entry represents "
"where the exception was raised."
msgstr ""
