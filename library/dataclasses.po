# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-31 12:42+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2023\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/dataclasses.rst:2
msgid ":mod:`dataclasses` --- Data Classes"
msgstr ":mod:`dataclasses` --- Data Classes"

#: ../../library/dataclasses.rst:10
msgid "**Source code:** :source:`Lib/dataclasses.py`"
msgstr "**Código-fonte:** :source:`Lib/dataclasses.py`"

#: ../../library/dataclasses.rst:14
msgid ""
"This module provides a decorator and functions for automatically adding "
"generated :term:`special method`\\s such as :meth:`__init__` and :meth:"
"`__repr__` to user-defined classes.  It was originally described in :pep:"
"`557`."
msgstr ""
"Este módulo fornece um decorador e funções para adicionar automaticamente :"
"term:`método especial`\\s tais como :meth:`__init__` e :meth:`__repr__` a "
"classes definidas pelo usuário. Foi originalmente descrita em :pep:`557`."

#: ../../library/dataclasses.rst:19
msgid ""
"The member variables to use in these generated methods are defined using :"
"pep:`526` type annotations.  For example, this code::"
msgstr ""
"Variáveis-membro a serem usadas nesses métodos gerados são definidas usando "
"as anotações de tipo da :pep:`526`. Por exemplo, esse código::"

#: ../../library/dataclasses.rst:34
msgid "will add, among other things, a :meth:`__init__` that looks like::"
msgstr "adicionará, entre outras coisas, um :meth:`__init__` como esse::"

#: ../../library/dataclasses.rst:41
msgid ""
"Note that this method is automatically added to the class: it is not "
"directly specified in the ``InventoryItem`` definition shown above."
msgstr ""
"Observe que este método é adicionado automaticamente à classe: ele não é "
"especificado diretamente na definição ``InventoryItem`` mostrada acima."

#: ../../library/dataclasses.rst:47
msgid "Module contents"
msgstr "Conteúdo do módulo"

#: ../../library/dataclasses.rst:51
msgid ""
"This function is a :term:`decorator` that is used to add generated :term:"
"`special method`\\s to classes, as described below."
msgstr ""
"Esta função é um :term:`decorador` que é usado para adicionar :term:`métodos "
"especiais <método especial>` para classes, conforme descrito abaixo."

#: ../../library/dataclasses.rst:54
msgid ""
"The :func:`dataclass` decorator examines the class to find ``field``\\s.  A "
"``field`` is defined as a class variable that has a :term:`type annotation "
"<variable annotation>`.  With two exceptions described below, nothing in :"
"func:`dataclass` examines the type specified in the variable annotation."
msgstr ""
"O decorador :func:`dataclass` examina a classe para encontrar campos "
"(``field``.  Um ``field`` é definido como uma variável de classe que tem "
"uma :term:`anotação de tipo <variable annotation>`.  Com duas exceções, "
"descritas mais adiante, :func:`dataclass` não examina o tipo especificado na "
"anotação de variável."

#: ../../library/dataclasses.rst:60
msgid ""
"The order of the fields in all of the generated methods is the order in "
"which they appear in the class definition."
msgstr ""
"A ordem dos campos em todos os métodos gerados é a ordem em que eles "
"aparecem na definição de classe."

#: ../../library/dataclasses.rst:63
msgid ""
"The :func:`dataclass` decorator will add various \"dunder\" methods to the "
"class, described below.  If any of the added methods already exist in the "
"class, the behavior depends on the parameter, as documented below. The "
"decorator returns the same class that it is called on; no new class is "
"created."
msgstr ""
"O decorador :func:`dataclass` adicionará vários métodos \"dunder\" à classe, "
"descritos abaixo. Se algum dos métodos adicionados já existir na classe, o "
"comportamento dependerá do parâmetro, conforme documentado abaixo. O "
"decorador retorna a mesma classe decorada; nenhuma nova classe é criada."

#: ../../library/dataclasses.rst:69
msgid ""
"If :func:`dataclass` is used just as a simple decorator with no parameters, "
"it acts as if it has the default values documented in this signature.  That "
"is, these three uses of :func:`dataclass` are equivalent::"
msgstr ""
"Se :func:`dataclass` for usado apenas como um simples decorador, sem "
"parâmetros, ele age como se tivesse os valores padrão documentados nessa "
"assinatura. Ou seja, esses três usos de :func:`dataclass` são equivalentes::"

#: ../../library/dataclasses.rst:87
msgid "The parameters to :func:`dataclass` are:"
msgstr "Os parâmetros do :func:`dataclass` são:"

#: ../../library/dataclasses.rst:89
msgid ""
"``init``: If true (the default), a :meth:`__init__` method will be generated."
msgstr ""
"``init``: Se verdadeiro (o padrão), o método :meth:`__init__` será gerado."

#: ../../library/dataclasses.rst:92
msgid ""
"If the class already defines :meth:`__init__`, this parameter is ignored."
msgstr ""
"Se a classe do usuário definir :meth:`__init__` esse parâmetro é ignorado."

#: ../../library/dataclasses.rst:95
msgid ""
"``repr``: If true (the default), a :meth:`__repr__` method will be "
"generated.  The generated repr string will have the class name and the name "
"and repr of each field, in the order they are defined in the class.  Fields "
"that are marked as being excluded from the repr are not included.  For "
"example: ``InventoryItem(name='widget', unit_price=3.0, "
"quantity_on_hand=10)``."
msgstr ""
"``repr``: Se verdadeiro (o padrão), um método :meth:`__repr__` será gerado. "
"A sequência de string de representação gerada terá o nome da classe e o nome "
"e representação de cada campo, na ordem em que são definidos na classe. Os "
"campos marcados como excluídos da representação não são incluídos. Por "
"exemplo: ``InventoryItem(name='widget', unit_price=3.0, "
"quantity_on_hand=10)``."

#: ../../library/dataclasses.rst:102
msgid ""
"If the class already defines :meth:`__repr__`, this parameter is ignored."
msgstr ""
"Se a classe do usuário já define :meth:`__repr__` esse parâmetro é ignorado."

#: ../../library/dataclasses.rst:105
msgid ""
"``eq``: If true (the default), an :meth:`__eq__` method will be generated.  "
"This method compares the class as if it were a tuple of its fields, in "
"order.  Both instances in the comparison must be of the identical type."
msgstr ""
"``eq``: Se verdadeiro (o padrão), um método :meth:`__eq__` será gerado. Este "
"método compara a classe como se fosse uma tupla de campos, em ordem. Ambas "
"as instâncias na comparação devem ser de tipo idêntico."

#: ../../library/dataclasses.rst:110
msgid "If the class already defines :meth:`__eq__`, this parameter is ignored."
msgstr ""
"Se a classe do usuário já define :meth:`__eq__` esse parâmetro é ignorado."

#: ../../library/dataclasses.rst:113
msgid ""
"``order``: If true (the default is ``False``), :meth:`__lt__`, :meth:"
"`__le__`, :meth:`__gt__`, and :meth:`__ge__` methods will be generated.  "
"These compare the class as if it were a tuple of its fields, in order.  Both "
"instances in the comparison must be of the identical type.  If ``order`` is "
"true and ``eq`` is false, a :exc:`ValueError` is raised."
msgstr ""
"``order``: Se verdadeiro (o padrão é ``False``), os métodos :meth:`__lt__`, :"
"meth:`__le__`, :meth:`__gt__`, e :meth:`__ge__` serão gerados.  Comparam a "
"classe como se fosse uma tupla de campos, em ordem.  Ambas instâncias na "
"comparação devem ser de tipo idêntico.  Se ``order`` é verdadeiro e  ``eq`` "
"é falso, a exceção :exc:`ValueError` é levantada."

#: ../../library/dataclasses.rst:120
msgid ""
"If the class already defines any of :meth:`__lt__`, :meth:`__le__`, :meth:"
"`__gt__`, or :meth:`__ge__`, then :exc:`TypeError` is raised."
msgstr ""
"Se a classe do usuário já define algum dentre :meth:`__lt__`, :meth:"
"`__le__`, :meth:`__gt__` ou :meth:`__ge__`, então :exc:`TypeError` é "
"levantada."

#: ../../library/dataclasses.rst:124
msgid ""
"``unsafe_hash``: If ``False`` (the default), a :meth:`__hash__` method is "
"generated according to how ``eq`` and ``frozen`` are set."
msgstr ""
"``unsafe_hash``: Se ``False`` (o padrão), um método :meth:`__hash__` é  "
"gerado, conforme ``eq`` e ``frozen`` estão configurados."

#: ../../library/dataclasses.rst:127
msgid ""
":meth:`__hash__` is used by built-in :meth:`hash()`, and when objects are "
"added to hashed collections such as dictionaries and sets.  Having a :meth:"
"`__hash__` implies that instances of the class are immutable. Mutability is "
"a complicated property that depends on the programmer's intent, the "
"existence and behavior of :meth:`__eq__`, and the values of the ``eq`` and "
"``frozen`` flags in the :func:`dataclass` decorator."
msgstr ""
":meth:`__hash__` é usado para prover o método :meth:`hash()`, e quando "
"objetos são adicionados a coleções do tipo dicionário ou conjunto.  Ter um "
"método :meth:`__hash__` implica que instâncias da classe serão imutáveis. "
"Mutabilidade é uma propriedade complicada, que depende da intenção do "
"programador, da existência e comportamento do método  :meth:`__eq__`, e dos "
"valores dos parâmetros ``eq`` e ``frozen`` no decorador :func:`dataclass` ."

#: ../../library/dataclasses.rst:134
msgid ""
"By default, :func:`dataclass` will not implicitly add a :meth:`__hash__` "
"method unless it is safe to do so.  Neither will it add or change an "
"existing explicitly defined :meth:`__hash__` method.  Setting the class "
"attribute ``__hash__ = None`` has a specific meaning to Python, as described "
"in the :meth:`__hash__` documentation."
msgstr ""
"Por padrão, :func:`dataclass` não vai adicionar implicitamente um método :"
"meth:`__hash__` , a menos que seja seguro fazê-lo.  Nem irá adicionar ou "
"modificar um método :meth:`__hash__` existente, definido explicitamente. "
"Configurar o atributo de classe ``__hash__ = None`` tem um significado "
"específico para o Python, conforme descrito na documentação do :meth:"
"`__hash__` ."

#: ../../library/dataclasses.rst:140
msgid ""
"If :meth:`__hash__` is not explicitly defined, or if it is set to ``None``, "
"then :func:`dataclass` *may* add an implicit :meth:`__hash__` method. "
"Although not recommended, you can force :func:`dataclass` to create a :meth:"
"`__hash__` method with ``unsafe_hash=True``. This might be the case if your "
"class is logically immutable but can nonetheless be mutated. This is a "
"specialized use case and should be considered carefully."
msgstr ""
"Se :meth:`__hash__` não é definido explicitamente, ou se é configurado como "
"``None``, então :func:`dataclass` *pode* adicionar um método :meth:"
"`__hash__` implícito. Mesmo que não seja recomendado, pode-se forçar :func:"
"`dataclass` a criar um método :meth:`__hash__` com  ``unsafe_hash=True``. "
"Este pode ser o caso se sua classe é logicamente imutável, mas na prática "
"pode ser mudada. Esse é um caso de uso específico e deve ser considerado com "
"muito cuidade."

#: ../../library/dataclasses.rst:147
msgid ""
"Here are the rules governing implicit creation of a :meth:`__hash__` "
"method.  Note that you cannot both have an explicit :meth:`__hash__` method "
"in your dataclass and set ``unsafe_hash=True``; this will result in a :exc:"
"`TypeError`."
msgstr ""
"Essas são as regras governando a criação implícita de um método  :meth:"
"`__hash__` .  Observe que não pode ter um método :meth:`__hash__` explícito "
"na dataclass e configurar ``unsafe_hash=True``; isso resultará em um :exc:"
"`TypeError`."

#: ../../library/dataclasses.rst:152
msgid ""
"If ``eq`` and ``frozen`` are both true, by default :func:`dataclass` will "
"generate a :meth:`__hash__` method for you.  If ``eq`` is true and "
"``frozen`` is false, :meth:`__hash__` will be set to ``None``, marking it "
"unhashable (which it is, since it is mutable).  If ``eq`` is false, :meth:"
"`__hash__` will be left untouched meaning the :meth:`__hash__` method of the "
"superclass will be used (if the superclass is :class:`object`, this means it "
"will fall back to id-based hashing)."
msgstr ""
"Se ``eq`` e ``frozen`` são ambos verdadeiros, por padrão :func:`dataclass` "
"vai gerar um método :meth:`__hash__`.  Se ``eq`` é verdadeiro e ``frozen`` é "
"falso, :meth:`__hash__` será configurado para ``None``, marcando a classe "
"como não hasheável (já que é mutável).  Se ``eq`` é falso, :meth:`__hash__` "
"será deixado intocado, o que significa que o método :meth:`__hash__` da "
"superclasse será usado (se a superclasse é :class:`object`, significa que "
"voltará para o hash baseado em id)."

#: ../../library/dataclasses.rst:160
msgid ""
"``frozen``: If true (the default is ``False``), assigning to fields will "
"generate an exception.  This emulates read-only frozen instances.  If :meth:"
"`__setattr__` or :meth:`__delattr__` is defined in the class, then :exc:"
"`TypeError` is raised.  See the discussion below."
msgstr ""
"``frozen``: Se verdadeiro (o padrão é ``False``), atribuições para os campos "
"vão gerar uma exceção.  Imita instâncias congeladas, somente leitura.  Se :"
"meth:`__setattr__` ou :meth:`__delattr__` é definido na classe, a exceção  :"
"exc:`TypeError` é levantada.  Veja a discussão abaixo."

#: ../../library/dataclasses.rst:165
msgid ""
"``match_args``: If true (the default is ``True``), the ``__match_args__`` "
"tuple will be created from the list of parameters to the generated :meth:"
"`__init__` method (even if :meth:`__init__` is not generated, see above).  "
"If false, or if ``__match_args__`` is already defined in the class, then "
"``__match_args__`` will not be generated."
msgstr ""

#: ../../library/dataclasses.rst:174
msgid ""
"``kw_only``: If true (the default value is ``False``), then all fields will "
"be marked as keyword-only.  If a field is marked as keyword-only, then the "
"only affect is that the :meth:`__init__` parameter generated from a keyword-"
"only field must be specified with a keyword when :meth:`__init__` is "
"called.  There is no effect on any other aspect of dataclasses.  See the :"
"term:`parameter` glossary entry for details.  Also see the :const:`KW_ONLY` "
"section."
msgstr ""

#: ../../library/dataclasses.rst:185
msgid ""
"``slots``: If true (the default is ``False``), :attr:`__slots__` attribute "
"will be generated and new class will be returned instead of the original "
"one. If :attr:`__slots__` is already defined in the class, then :exc:"
"`TypeError` is raised."
msgstr ""

#: ../../library/dataclasses.rst:192
msgid ""
"``field``\\s may optionally specify a default value, using normal Python "
"syntax::"
msgstr ""
"``field``\\s pode opcionalmente especificar um valor padrão, usando sintaxe "
"Python normal::"

#: ../../library/dataclasses.rst:200
msgid ""
"In this example, both ``a`` and ``b`` will be included in the added :meth:"
"`__init__` method, which will be defined as::"
msgstr ""
"Nesse exemplo,  ``a`` e ``b`` serão incluídos no método :meth:`__init__` "
"adicionado, que será definido como::"

#: ../../library/dataclasses.rst:205
msgid ""
":exc:`TypeError` will be raised if a field without a default value follows a "
"field with a default value.  This is true whether this occurs in a single "
"class, or as a result of class inheritance."
msgstr ""
":exc:`TypeError` será levantada se um campo sem valor padrão for definido "
"após um campo com valor padrão.  Isso é verdadeiro se ocorrer numa classe "
"simples, ou como resultado de uma herança de classe."

#: ../../library/dataclasses.rst:211
msgid ""
"For common and simple use cases, no other functionality is required.  There "
"are, however, some dataclass features that require additional per-field "
"information.  To satisfy this need for additional information, you can "
"replace the default field value with a call to the provided :func:`field` "
"function.  For example::"
msgstr ""
"Para casos de uso comuns e simples, nenhuma outra funcionalidade é "
"necessária. Existem, no entanto, alguns recursos que requerem informações "
"adicionais por campo. Para satisfazer essa necessidade de informações "
"adicionais, você pode substituir o valor do campo padrão por uma chamada "
"para a função :func:`field` fornecida. Por exemplo::"

#: ../../library/dataclasses.rst:224
msgid ""
"As shown above, the :const:`MISSING` value is a sentinel object used to "
"detect if some parameters are provided by the user. This sentinel is used "
"because ``None`` is a valid value for some parameters with a distinct "
"meaning.  No code should directly use the :const:`MISSING` value."
msgstr ""
"Como mostrado acima, o valor :const:`MISSING` é um objeto sentinela usado "
"para detectar se alguns parâmetros são fornecidos pelo usuário. Este "
"sentinela é usado porque ``None`` é um valor válido para alguns parâmetros "
"com um significado distinto.  Nenhum código deve usar diretamente o valor :"
"const:`MISSING`."

#: ../../library/dataclasses.rst:229
msgid "The parameters to :func:`field` are:"
msgstr "Os parâmetros de :func:`field` são:"

#: ../../library/dataclasses.rst:231
msgid ""
"``default``: If provided, this will be the default value for this field.  "
"This is needed because the :meth:`field` call itself replaces the normal "
"position of the default value."
msgstr ""
"``default``: Se fornecido, este será o valor padrão para este campo. Isso é "
"necessário porque a própria chamada :meth:`field` substitui a posição normal "
"do valor padrão."

#: ../../library/dataclasses.rst:235
msgid ""
"``default_factory``: If provided, it must be a zero-argument callable that "
"will be called when a default value is needed for this field.  Among other "
"purposes, this can be used to specify fields with mutable default values, as "
"discussed below.  It is an error to specify both ``default`` and "
"``default_factory``."
msgstr ""
"``default_factory``: Se fornecido, deve ser um chamável sem argumento que "
"será chamado quando um valor padrão for necessário para este campo. Entre "
"outras finalidades, isso pode ser usado para especificar campos com valores "
"padrão mutáveis, conforme discutido abaixo. É um erro especificar ambos "
"``default`` e ``default_factory``."

#: ../../library/dataclasses.rst:241
msgid ""
"``init``: If true (the default), this field is included as a parameter to "
"the generated :meth:`__init__` method."
msgstr ""

#: ../../library/dataclasses.rst:244
msgid ""
"``repr``: If true (the default), this field is included in the string "
"returned by the generated :meth:`__repr__` method."
msgstr ""

#: ../../library/dataclasses.rst:247
msgid ""
"``hash``: This can be a bool or ``None``.  If true, this field is included "
"in the generated :meth:`__hash__` method.  If ``None`` (the default), use "
"the value of ``compare``: this would normally be the expected behavior.  A "
"field should be considered in the hash if it's used for comparisons.  "
"Setting this value to anything other than ``None`` is discouraged."
msgstr ""

#: ../../library/dataclasses.rst:254
msgid ""
"One possible reason to set ``hash=False`` but ``compare=True`` would be if a "
"field is expensive to compute a hash value for, that field is needed for "
"equality testing, and there are other fields that contribute to the type's "
"hash value.  Even if a field is excluded from the hash, it will still be "
"used for comparisons."
msgstr ""
"Uma possível razão para definir ``hash=False`` mas ``compare=True`` seria se "
"um campo for caro para calcular um valor de hash, esse campo for necessário "
"para teste de igualdade e houver outros campos que contribuem para o valor "
"de hash do tipo. Mesmo que um campo seja excluído do hash, ele ainda será "
"usado para comparações."

#: ../../library/dataclasses.rst:260
msgid ""
"``compare``: If true (the default), this field is included in the generated "
"equality and comparison methods (:meth:`__eq__`, :meth:`__gt__`, et al.)."
msgstr ""

#: ../../library/dataclasses.rst:264
msgid ""
"``metadata``: This can be a mapping or None. None is treated as an empty "
"dict.  This value is wrapped in :func:`~types.MappingProxyType` to make it "
"read-only, and exposed on the :class:`Field` object. It is not used at all "
"by Data Classes, and is provided as a third-party extension mechanism. "
"Multiple third-parties can each have their own key, to use as a namespace in "
"the metadata."
msgstr ""
"``metadata``: Pode ser um mapeamento ou None. None é tratado como um "
"dicionário vazio. Este valor é agrupado em :func:`~types.MappingProxyType` "
"para torná-lo somente leitura e exposto no objeto :class:`Field`. Ele não é "
"usado por Data Classes e é fornecido como um mecanismo de extensão de "
"terceiros. Vários terceiros podem ter sua própria chave, para usar como um "
"espaço de nomes nos metadados."

#: ../../library/dataclasses.rst:272
msgid ""
"``kw_only``: If true, this field will be marked as keyword-only. This is "
"used when the generated :meth:`__init__` method's parameters are computed."
msgstr ""

#: ../../library/dataclasses.rst:278
msgid ""
"If the default value of a field is specified by a call to :func:`field()`, "
"then the class attribute for this field will be replaced by the specified "
"``default`` value.  If no ``default`` is provided, then the class attribute "
"will be deleted.  The intent is that after the :func:`dataclass` decorator "
"runs, the class attributes will all contain the default values for the "
"fields, just as if the default value itself were specified.  For example, "
"after::"
msgstr ""
"Se o valor padrão de um campo for especificado por uma chamada para :func:"
"`field()`, então o atributo de classe para este campo será substituído pelo "
"valor de ``default`` especificado. Se ``default`` não for fornecido, o "
"atributo de classe será excluído. A intenção é que, após a execução do "
"decorador :func:`dataclass`, todos os atributos de classe conterão os "
"valores padrão para os campos, como se o próprio valor padrão fosse "
"especificado. Por exemplo, depois de::"

#: ../../library/dataclasses.rst:294
msgid ""
"The class attribute ``C.z`` will be ``10``, the class attribute ``C.t`` will "
"be ``20``, and the class attributes ``C.x`` and ``C.y`` will not be set."
msgstr ""
"O atributo de classe ``C.z`` será ``10``, o atributo de classe ``C.t`` será "
"``20`` e os atributos de classe ``C.x`` e ``C.y`` não serão definidos."

#: ../../library/dataclasses.rst:300
msgid ""
":class:`Field` objects describe each defined field. These objects are "
"created internally, and are returned by the :func:`fields` module-level "
"method (see below).  Users should never instantiate a :class:`Field` object "
"directly.  Its documented attributes are:"
msgstr ""
"Objetos :class:`Field` descrevem cada campo definido. Esses objetos são "
"criados internamente e são retornados pelo método de nível de módulo :func:"
"`fields` (veja abaixo). Os usuários nunca devem instanciar um objeto :class:"
"`Field` diretamente. Seus atributos documentados são:"

#: ../../library/dataclasses.rst:305
msgid "``name``: The name of the field."
msgstr "``name``: O nome do campo."

#: ../../library/dataclasses.rst:307
msgid "``type``: The type of the field."
msgstr "``type``: O tipo do campo."

#: ../../library/dataclasses.rst:309
msgid ""
"``default``, ``default_factory``, ``init``, ``repr``, ``hash``, ``compare``, "
"``metadata``, and ``kw_only`` have the identical meaning and values as they "
"do in the :func:`field` function."
msgstr ""
"``default``, ``default_factory``, ``init``, ``repr``, ``hash``, ``compare``, "
"``metadata`` e ``kw_only`` têm significado e valores idênticos aos da "
"função :func:`field`."

#: ../../library/dataclasses.rst:313
msgid ""
"Other attributes may exist, but they are private and must not be inspected "
"or relied on."
msgstr ""
"Outros atributos podem existir, mas são privados e não devem ser "
"inspecionados ou confiáveis."

#: ../../library/dataclasses.rst:318
msgid ""
"Returns a tuple of :class:`Field` objects that define the fields for this "
"dataclass.  Accepts either a dataclass, or an instance of a dataclass. "
"Raises :exc:`TypeError` if not passed a dataclass or instance of one. Does "
"not return pseudo-fields which are ``ClassVar`` or ``InitVar``."
msgstr ""
"Retorna uma tupla de objetos :class:`Field` que definem os campos para esta "
"classe de dados. Aceita uma classe de dados ou uma instância de uma classe "
"de dados. Levanta :exc:`TypeError` se não for passada uma classe de dados ou "
"instância de uma. Não retorna pseudocampos que são ``ClassVar`` ou "
"``InitVar``."

#: ../../library/dataclasses.rst:325
msgid ""
"Converts the dataclass ``obj`` to a dict (by using the factory function "
"``dict_factory``).  Each dataclass is converted to a dict of its fields, as "
"``name: value`` pairs.  dataclasses, dicts, lists, and tuples are recursed "
"into.  Other objects are copied with :func:`copy.deepcopy`."
msgstr ""
"Converte a classe de dados ``obj`` em um dicionário (usando a função de "
"fábrica ``dict_factory``). Cada classe de dados é convertida em um "
"dicionário de seus campos, como pares ``nome: valor``. Pode-se fazer "
"recursividade em classes de dados, dicionários, listas e tuplas. Outros "
"objetos são copiados com :func:`copy.deepcopy`."

#: ../../library/dataclasses.rst:331
msgid "Example of using :func:`asdict` on nested dataclasses::"
msgstr "Exemplo de uso de :func:`asdict` em classes de dados aninhadas::"

#: ../../library/dataclasses.rst:348 ../../library/dataclasses.rst:368
msgid "To create a shallow copy, the following workaround may be used::"
msgstr ""
"Para criar uma cópia rasa, a seguinte solução alternativa pode ser usada::"

#: ../../library/dataclasses.rst:352
msgid ""
":func:`asdict` raises :exc:`TypeError` if ``obj`` is not a dataclass "
"instance."
msgstr ""
":func:`asdict` levanta :exc:`TypeError` se ``obj`` não é uma instância de "
"classe de dados."

#: ../../library/dataclasses.rst:357
msgid ""
"Converts the dataclass ``obj`` to a tuple (by using the factory function "
"``tuple_factory``).  Each dataclass is converted to a tuple of its field "
"values.  dataclasses, dicts, lists, and tuples are recursed into. Other "
"objects are copied with :func:`copy.deepcopy`."
msgstr ""
"Converte a classe de dados ``obj`` em uma tupla (usando a função de fábrica "
"``tuple_factory``). Cada classe de dados é convertida em uma tupla de seus "
"campos. Pode-se fazer recursividade em classes de dados, dicionários, listas "
"e tuplas. Outros objetos são copiados com :func:`copy.deepcopy`."

#: ../../library/dataclasses.rst:363
msgid "Continuing from the previous example::"
msgstr "Continuando a partir do exemplo anterior::"

#: ../../library/dataclasses.rst:372
msgid ""
":func:`astuple` raises :exc:`TypeError` if ``obj`` is not a dataclass "
"instance."
msgstr ""
":func:`astuple` levanta :exc:`TypeError` se ``obj`` não é uma instância de "
"classe de dados."

#: ../../library/dataclasses.rst:377
msgid ""
"Creates a new dataclass with name ``cls_name``, fields as defined in "
"``fields``, base classes as given in ``bases``, and initialized with a "
"namespace as given in ``namespace``.  ``fields`` is an iterable whose "
"elements are each either ``name``, ``(name, type)``, or ``(name, type, "
"Field)``.  If just ``name`` is supplied, ``typing.Any`` is used for "
"``type``.  The values of ``init``, ``repr``, ``eq``, ``order``, "
"``unsafe_hash``, ``frozen``, ``match_args``, ``kw_only``, and  ``slots`` "
"have the same meaning as they do in :func:`dataclass`."
msgstr ""

#: ../../library/dataclasses.rst:387
msgid ""
"This function is not strictly required, because any Python mechanism for "
"creating a new class with ``__annotations__`` can then apply the :func:"
"`dataclass` function to convert that class to a dataclass.  This function is "
"provided as a convenience.  For example::"
msgstr ""

#: ../../library/dataclasses.rst:399
msgid "Is equivalent to::"
msgstr "É equivalente a::"

#: ../../library/dataclasses.rst:412
msgid ""
"Creates a new object of the same type as ``obj``, replacing fields with "
"values from ``changes``.  If ``obj`` is not a Data Class, raises :exc:"
"`TypeError`.  If values in ``changes`` do not specify fields, raises :exc:"
"`TypeError`."
msgstr ""

#: ../../library/dataclasses.rst:417
msgid ""
"The newly returned object is created by calling the :meth:`__init__` method "
"of the dataclass.  This ensures that :meth:`__post_init__`, if present, is "
"also called."
msgstr ""

#: ../../library/dataclasses.rst:421
msgid ""
"Init-only variables without default values, if any exist, must be specified "
"on the call to :func:`replace` so that they can be passed to :meth:"
"`__init__` and :meth:`__post_init__`."
msgstr ""

#: ../../library/dataclasses.rst:425
msgid ""
"It is an error for ``changes`` to contain any fields that are defined as "
"having ``init=False``.  A :exc:`ValueError` will be raised in this case."
msgstr ""

#: ../../library/dataclasses.rst:429
msgid ""
"Be forewarned about how ``init=False`` fields work during a call to :func:"
"`replace`.  They are not copied from the source object, but rather are "
"initialized in :meth:`__post_init__`, if they're initialized at all.  It is "
"expected that ``init=False`` fields will be rarely and judiciously used.  If "
"they are used, it might be wise to have alternate class constructors, or "
"perhaps a custom ``replace()`` (or similarly named) method which handles "
"instance copying."
msgstr ""

#: ../../library/dataclasses.rst:440
msgid ""
"Return ``True`` if its parameter is a dataclass or an instance of one, "
"otherwise return ``False``."
msgstr ""

#: ../../library/dataclasses.rst:443
msgid ""
"If you need to know if a class is an instance of a dataclass (and not a "
"dataclass itself), then add a further check for ``not isinstance(obj, "
"type)``::"
msgstr ""
"Se você precisa saber se a classe é uma instância de dataclass (e não a "
"dataclass de fato), então adicione uma verificação para ``not "
"isinstance(obj, type)``::"

#: ../../library/dataclasses.rst:452
msgid "A sentinel value signifying a missing default or default_factory."
msgstr ""

#: ../../library/dataclasses.rst:456
msgid ""
"A sentinel value used as a type annotation.  Any fields after a pseudo-field "
"with the type of :const:`KW_ONLY` are marked as keyword-only fields.  Note "
"that a pseudo-field of type :const:`KW_ONLY` is otherwise completely "
"ignored.  This includes the name of such a field.  By convention, a name of "
"``_`` is used for a :const:`KW_ONLY` field.  Keyword-only fields signify :"
"meth:`__init__` parameters that must be specified as keywords when the class "
"is instantiated."
msgstr ""

#: ../../library/dataclasses.rst:465
msgid ""
"In this example, the fields ``y`` and ``z`` will be marked as keyword-only "
"fields::"
msgstr ""

#: ../../library/dataclasses.rst:476
msgid ""
"In a single dataclass, it is an error to specify more than one field whose "
"type is :const:`KW_ONLY`."
msgstr ""

#: ../../library/dataclasses.rst:483
msgid ""
"Raised when an implicitly defined :meth:`__setattr__` or :meth:`__delattr__` "
"is called on a dataclass which was defined with ``frozen=True``. It is a "
"subclass of :exc:`AttributeError`."
msgstr ""

#: ../../library/dataclasses.rst:488
msgid "Post-init processing"
msgstr "Processamento pós-inicialização"

#: ../../library/dataclasses.rst:490
msgid ""
"The generated :meth:`__init__` code will call a method named :meth:"
"`__post_init__`, if :meth:`__post_init__` is defined on the class.  It will "
"normally be called as ``self.__post_init__()``. However, if any ``InitVar`` "
"fields are defined, they will also be passed to :meth:`__post_init__` in the "
"order they were defined in the class.  If no :meth:`__init__` method is "
"generated, then :meth:`__post_init__` will not automatically be called."
msgstr ""

#: ../../library/dataclasses.rst:498
msgid ""
"Among other uses, this allows for initializing field values that depend on "
"one or more other fields.  For example::"
msgstr ""

#: ../../library/dataclasses.rst:510
msgid ""
"The :meth:`__init__` method generated by :func:`dataclass` does not call "
"base class :meth:`__init__` methods. If the base class has an :meth:"
"`__init__` method that has to be called, it is common to call this method in "
"a :meth:`__post_init__` method::"
msgstr ""

#: ../../library/dataclasses.rst:527
msgid ""
"Note, however, that in general the dataclass-generated :meth:`__init__` "
"methods don't need to be called, since the derived dataclass will take care "
"of initializing all fields of any base class that is a dataclass itself."
msgstr ""

#: ../../library/dataclasses.rst:531
msgid ""
"See the section below on init-only variables for ways to pass parameters to :"
"meth:`__post_init__`.  Also see the warning about how :func:`replace` "
"handles ``init=False`` fields."
msgstr ""

#: ../../library/dataclasses.rst:536
msgid "Class variables"
msgstr "Variáveis de classe"

#: ../../library/dataclasses.rst:538
msgid ""
"One of the few places where :func:`dataclass` actually inspects the type of "
"a field is to determine if a field is a class variable as defined in :pep:"
"`526`.  It does this by checking if the type of the field is ``typing."
"ClassVar``.  If a field is a ``ClassVar``, it is excluded from consideration "
"as a field and is ignored by the dataclass mechanisms.  Such ``ClassVar`` "
"pseudo-fields are not returned by the module-level :func:`fields` function."
msgstr ""

#: ../../library/dataclasses.rst:547
msgid "Init-only variables"
msgstr "Variáveis de inicialização apenas"

#: ../../library/dataclasses.rst:549
msgid ""
"Another place where :func:`dataclass` inspects a type annotation is to "
"determine if a field is an init-only variable.  It does this by seeing if "
"the type of a field is of type ``dataclasses.InitVar``.  If a field is an "
"``InitVar``, it is considered a pseudo-field called an init-only field.  As "
"it is not a true field, it is not returned by the module-level :func:"
"`fields` function.  Init-only fields are added as parameters to the "
"generated :meth:`__init__` method, and are passed to the optional :meth:"
"`__post_init__` method.  They are not otherwise used by dataclasses."
msgstr ""

#: ../../library/dataclasses.rst:559
msgid ""
"For example, suppose a field will be initialized from a database, if a value "
"is not provided when creating the class::"
msgstr ""

#: ../../library/dataclasses.rst:574
msgid ""
"In this case, :func:`fields` will return :class:`Field` objects for ``i`` "
"and ``j``, but not for ``database``."
msgstr ""

#: ../../library/dataclasses.rst:578
msgid "Frozen instances"
msgstr ""

#: ../../library/dataclasses.rst:580
msgid ""
"It is not possible to create truly immutable Python objects.  However, by "
"passing ``frozen=True`` to the :meth:`dataclass` decorator you can emulate "
"immutability.  In that case, dataclasses will add :meth:`__setattr__` and :"
"meth:`__delattr__` methods to the class.  These methods will raise a :exc:"
"`FrozenInstanceError` when invoked."
msgstr ""

#: ../../library/dataclasses.rst:586
msgid ""
"There is a tiny performance penalty when using ``frozen=True``: :meth:"
"`__init__` cannot use simple assignment to initialize fields, and must use :"
"meth:`object.__setattr__`."
msgstr ""

#: ../../library/dataclasses.rst:591
msgid "Inheritance"
msgstr "Herança"

#: ../../library/dataclasses.rst:593
msgid ""
"When the dataclass is being created by the :meth:`dataclass` decorator, it "
"looks through all of the class's base classes in reverse MRO (that is, "
"starting at :class:`object`) and, for each dataclass that it finds, adds the "
"fields from that base class to an ordered mapping of fields. After all of "
"the base class fields are added, it adds its own fields to the ordered "
"mapping.  All of the generated methods will use this combined, calculated "
"ordered mapping of fields.  Because the fields are in insertion order, "
"derived classes override base classes.  An example::"
msgstr ""

#: ../../library/dataclasses.rst:613
msgid ""
"The final list of fields is, in order, ``x``, ``y``, ``z``.  The final type "
"of ``x`` is ``int``, as specified in class ``C``."
msgstr ""
"A lista final de campos é, em ordem, ``x``, ``y``, ``z``. O tipo final de "
"``x`` é ``int``, conforme especificado na classe ``C``."

#: ../../library/dataclasses.rst:616
msgid "The generated :meth:`__init__` method for ``C`` will look like::"
msgstr "O método :meth:`__init__` gerado para ``C`` vai se parecer com::"

#: ../../library/dataclasses.rst:621
msgid "Re-ordering of keyword-only parameters in :meth:`__init__`"
msgstr ""

#: ../../library/dataclasses.rst:623
msgid ""
"After the parameters needed for :meth:`__init__` are computed, any keyword-"
"only parameters are moved to come after all regular (non-keyword-only) "
"parameters.  This is a requirement of how keyword-only parameters are "
"implemented in Python: they must come after non-keyword-only parameters."
msgstr ""

#: ../../library/dataclasses.rst:629
msgid ""
"In this example, ``Base.y``, ``Base.w``, and ``D.t`` are keyword-only "
"fields, and ``Base.x`` and ``D.z`` are regular fields::"
msgstr ""

#: ../../library/dataclasses.rst:644
msgid "The generated :meth:`__init__` method for ``D`` will look like::"
msgstr ""

#: ../../library/dataclasses.rst:648
msgid ""
"Note that the parameters have been re-ordered from how they appear in the "
"list of fields: parameters derived from regular fields are followed by "
"parameters derived from keyword-only fields."
msgstr ""

#: ../../library/dataclasses.rst:652
msgid ""
"The relative ordering of keyword-only parameters is maintained in the re-"
"ordered :meth:`__init__` parameter list."
msgstr ""

#: ../../library/dataclasses.rst:657
msgid "Default factory functions"
msgstr "Funções padrão de fábrica"

#: ../../library/dataclasses.rst:659
msgid ""
"If a :func:`field` specifies a ``default_factory``, it is called with zero "
"arguments when a default value for the field is needed.  For example, to "
"create a new instance of a list, use::"
msgstr ""

#: ../../library/dataclasses.rst:665
msgid ""
"If a field is excluded from :meth:`__init__` (using ``init=False``) and the "
"field also specifies ``default_factory``, then the default factory function "
"will always be called from the generated :meth:`__init__` function.  This "
"happens because there is no other way to give the field an initial value."
msgstr ""

#: ../../library/dataclasses.rst:672
msgid "Mutable default values"
msgstr "Valores padrão mutáveis"

#: ../../library/dataclasses.rst:674
msgid ""
"Python stores default member variable values in class attributes. Consider "
"this example, not using dataclasses::"
msgstr ""

#: ../../library/dataclasses.rst:689
msgid ""
"Note that the two instances of class ``C`` share the same class variable "
"``x``, as expected."
msgstr ""

#: ../../library/dataclasses.rst:692
msgid "Using dataclasses, *if* this code was valid::"
msgstr "Usando dataclasses, *se* este código fosse válido::"

#: ../../library/dataclasses.rst:700
msgid "it would generate code similar to::"
msgstr "Geraria código similar a::"

#: ../../library/dataclasses.rst:711
msgid ""
"This has the same issue as the original example using class ``C``. That is, "
"two instances of class ``D`` that do not specify a value for ``x`` when "
"creating a class instance will share the same copy of ``x``.  Because "
"dataclasses just use normal Python class creation they also share this "
"behavior.  There is no general way for Data Classes to detect this "
"condition.  Instead, the :func:`dataclass` decorator will raise a :exc:"
"`TypeError` if it detects a default parameter of type ``list``, ``dict``, or "
"``set``. This is a partial solution, but it does protect against many common "
"errors."
msgstr ""

#: ../../library/dataclasses.rst:722
msgid ""
"Using default factory functions is a way to create new instances of mutable "
"types as default values for fields::"
msgstr ""

#: ../../library/dataclasses.rst:732
msgid "Descriptor-typed fields"
msgstr ""

#: ../../library/dataclasses.rst:734
msgid ""
"Fields that are assigned :ref:`descriptor objects <descriptors>` as their "
"default value have the following special behaviors:"
msgstr ""

#: ../../library/dataclasses.rst:737
msgid ""
"The value for the field passed to the dataclass's ``__init__`` method is "
"passed to the descriptor's ``__set__`` method rather than overwriting the "
"descriptor object."
msgstr ""

#: ../../library/dataclasses.rst:740
msgid ""
"Similarly, when getting or setting the field, the descriptor's ``__get__`` "
"or ``__set__`` method is called rather than returning or overwriting the "
"descriptor object."
msgstr ""

#: ../../library/dataclasses.rst:743
msgid ""
"To determine whether a field contains a default value, ``dataclasses`` will "
"call the descriptor's ``__get__`` method using its class access form (i.e. "
"``descriptor.__get__(obj=None, type=cls)``.  If the descriptor returns a "
"value in this case, it will be used as the field's default. On the other "
"hand, if the descriptor raises :exc:`AttributeError` in this situation, no "
"default value will be provided for the field."
msgstr ""

#: ../../library/dataclasses.rst:778
msgid ""
"Note that if a field is annotated with a descriptor type, but is not "
"assigned a descriptor object as its default value, the field will act like a "
"normal field."
msgstr ""
