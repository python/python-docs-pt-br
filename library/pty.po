# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2019
# And Past <andrepgs@gmail.com>, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:28+0000\n"
"Last-Translator: And Past <andrepgs@gmail.com>, 2019\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../library/pty.rst:2
msgid ":mod:`pty` --- Pseudo-terminal utilities"
msgstr ""

#: ../../library/pty.rst:11
msgid "**Source code:** :source:`Lib/pty.py`"
msgstr "**Código Fonte:** :source:`Lib/pty.py`"

#: ../../library/pty.rst:15
msgid ""
"The :mod:`pty` module defines operations for handling the pseudo-terminal "
"concept: starting another process and being able to write to and read from "
"its controlling terminal programmatically."
msgstr ""
"O módulo :mod:`pty` define operações para lidar com o conceito de "
"pseudoterminal: iniciar outro processo e poder gravar e ler de seu terminal "
"de controle programaticamente."

#: ../../library/pty.rst:19
msgid ""
"Because pseudo-terminal handling is highly platform dependent, there is code "
"to do it only for Linux. (The Linux code is supposed to work on other "
"platforms, but hasn't been tested yet.)"
msgstr ""

#: ../../library/pty.rst:23
msgid "The :mod:`pty` module defines the following functions:"
msgstr "O módulo :mod:`pty` define as seguintes funções:"

#: ../../library/pty.rst:28
msgid ""
"Fork. Connect the child's controlling terminal to a pseudo-terminal. Return "
"value is ``(pid, fd)``. Note that the child  gets *pid* 0, and the *fd* is "
"*invalid*. The parent's return value is the *pid* of the child, and *fd* is "
"a file descriptor connected to the child's controlling terminal (and also to "
"the child's standard input and output)."
msgstr ""
"Faz um fork. Conecta o terminal de controle do filho a um pseudoterminal. O "
"valor de retorno é ``(pid, fd)``. Observe que a criança recebe *pid* 0 e o "
"*fd* é *inválido*. O valor de retorno do pai é o *pid* do filho, e o *fd* é "
"um descritor de arquivo conectado ao terminal de controle do filho (e também "
"à entrada e à saída padrão do filho)."

#: ../../library/pty.rst:37
msgid ""
"Open a new pseudo-terminal pair, using :func:`os.openpty` if possible, or "
"emulation code for generic Unix systems. Return a pair of file descriptors "
"``(master, slave)``, for the master and the slave end, respectively."
msgstr ""
"Abre um novo par de pseudoterminais, usando :func:`os.openpty`, se possível, "
"ou código de emulação para sistemas genérico Unix . Retorna um par de "
"descritores de arquivo ``(master, slave)``, para a extremidade mestre e "
"escrava, respectivamente."

#: ../../library/pty.rst:44
msgid ""
"Spawn a process, and connect its controlling terminal with the current "
"process's standard io. This is often used to baffle programs which insist on "
"reading from the controlling terminal."
msgstr ""

#: ../../library/pty.rst:48
msgid ""
"The functions *master_read* and *stdin_read* should be functions which read "
"from a file descriptor. The defaults try to read 1024 bytes each time they "
"are called."
msgstr ""

#: ../../library/pty.rst:52
msgid ""
":func:`spawn` now returns the status value from :func:`os.waitpid` on the "
"child process."
msgstr ""
":func:`spawn` agora retorna o valor de status de :func:`os.waitpid` no "
"processo filho."

#: ../../library/pty.rst:57
msgid "Example"
msgstr "Exemplo"

#: ../../library/pty.rst:61
msgid ""
"The following program acts like the Unix command :manpage:`script(1)`, using "
"a pseudo-terminal to record all input and output of a terminal session in a "
"\"typescript\". ::"
msgstr ""
"O programa a seguir funciona como o comando Unix :manpage:`script(1)` , "
"usando um pseudoterminal para registrar todas as entradas e saídas de uma "
"sessão de terminal em um \"script\". ::"
