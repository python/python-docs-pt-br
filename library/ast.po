# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Cauê Baasch de Souza <cauebaasch@gmail.com>, 2017
# Rafael Fontenelle <rffontenelle@gmail.com>, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-01 14:24+0000\n"
"PO-Revision-Date: 2017-02-16 17:48+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2019\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../library/ast.rst:2
msgid ":mod:`ast` --- Abstract Syntax Trees"
msgstr ":mod:`ast` --- Árvores de Sintaxe Abstrata"

#: ../../library/ast.rst:10
msgid "**Source code:** :source:`Lib/ast.py`"
msgstr "**Código-fonte:** :source:`Lib/ast.py`"

#: ../../library/ast.rst:14
msgid ""
"The :mod:`ast` module helps Python applications to process trees of the "
"Python abstract syntax grammar.  The abstract syntax itself might change "
"with each Python release; this module helps to find out programmatically "
"what the current grammar looks like."
msgstr ""
"O módulo :mod:`ast` ajuda os aplicativos Python a processar árvores da "
"gramática de sintaxe abstrata do Python. A sintaxe abstrata em si pode mudar "
"em cada lançamento do Python; este módulo ajuda a descobrir "
"programaticamente como é a gramática atual."

#: ../../library/ast.rst:19
msgid ""
"An abstract syntax tree can be generated by passing :data:`ast."
"PyCF_ONLY_AST` as a flag to the :func:`compile` built-in function, or using "
"the :func:`parse` helper provided in this module.  The result will be a tree "
"of objects whose classes all inherit from :class:`ast.AST`.  An abstract "
"syntax tree can be compiled into a Python code object using the built-in :"
"func:`compile` function."
msgstr ""
"Uma árvore de sintaxe abstrata pode ser gerada passando :data:`ast."
"PyCF_ONLY_AST` como um sinalizador para a função interna :func:`compile`, ou "
"usando o auxiliar :func:`parse` fornecido neste módulo. O resultado será uma "
"árvore de objetos cujas classes herdam de :class:`ast.AST`. Uma árvore de "
"sintaxe abstrata pode ser compilada em um objeto de código Python usando a "
"função interna :func:`compile`."

#: ../../library/ast.rst:27
msgid "Node classes"
msgstr "Classes de nó"

#: ../../library/ast.rst:31
msgid ""
"This is the base of all AST node classes.  The actual node classes are "
"derived from the :file:`Parser/Python.asdl` file, which is reproduced :ref:"
"`below <abstract-grammar>`.  They are defined in the :mod:`_ast` C module "
"and re-exported in :mod:`ast`."
msgstr ""
"Esta é a base de todas as classes de nós AST. As classes de nós reais são "
"derivadas do arquivo :file:`Parser/Python.asdl`, o qual é reproduzido :ref:"
"`abaixo <abstract-grammar>`. Elas são definidas no módulo C :mod:`_ast` e "
"reexportadas em :mod:`ast`."

#: ../../library/ast.rst:36
msgid ""
"There is one class defined for each left-hand side symbol in the abstract "
"grammar (for example, :class:`ast.stmt` or :class:`ast.expr`).  In addition, "
"there is one class defined for each constructor on the right-hand side; "
"these classes inherit from the classes for the left-hand side trees.  For "
"example, :class:`ast.BinOp` inherits from :class:`ast.expr`.  For production "
"rules with alternatives (aka \"sums\"), the left-hand side class is "
"abstract: only instances of specific constructor nodes are ever created."
msgstr ""
"Há uma classe definida para cada símbolo do lado esquerdo na gramática "
"abstrata (por exemplo, :class:`ast.stmt` ou :class:`ast.expr`). Além disso, "
"existe uma classe definida para cada construtor no lado direito; essas "
"classes herdam das classes para as árvores do lado esquerdo. Por exemplo, :"
"class:`ast.BinOp` herda de :class:`ast.expr`. Para regras de produção com "
"alternativas (\"somas\"), a classe do lado esquerdo é abstrata: apenas "
"instâncias de nós construtores específicos são criadas."

#: ../../library/ast.rst:49
msgid ""
"Each concrete class has an attribute :attr:`_fields` which gives the names "
"of all child nodes."
msgstr ""
"Cada classe concreta possui um atributo :attr:`_fields` que fornece os nomes "
"de todos os nós filhos."

#: ../../library/ast.rst:52
msgid ""
"Each instance of a concrete class has one attribute for each child node, of "
"the type as defined in the grammar.  For example, :class:`ast.BinOp` "
"instances have an attribute :attr:`left` of type :class:`ast.expr`."
msgstr ""
"Cada instância de uma classe concreta tem um atributo para cada nó filho, do "
"tipo definido na gramática. Por exemplo, as instâncias :class:`ast.BinOp` "
"possuem um atributo :attr:`left` do tipo :class:`ast.expr`."

#: ../../library/ast.rst:56
msgid ""
"If these attributes are marked as optional in the grammar (using a question "
"mark), the value might be ``None``.  If the attributes can have zero-or-more "
"values (marked with an asterisk), the values are represented as Python "
"lists.  All possible attributes must be present and have valid values when "
"compiling an AST with :func:`compile`."
msgstr ""
"Se estes atributos estiverem marcados como opcionais na gramática (usando um "
"ponto de interrogação), o valor pode ser ``None``. Se os atributos puderem "
"ter valor zero ou mais (marcados com um asterisco), os valores serão "
"representados como listas do Python. Todos os atributos possíveis devem "
"estar presentes e ter valores válidos ao compilar uma AST com :func:"
"`compile`."

#: ../../library/ast.rst:67
msgid ""
"Instances of :class:`ast.expr` and :class:`ast.stmt` subclasses have :attr:"
"`lineno`, :attr:`col_offset`, :attr:`lineno`, and :attr:`col_offset` "
"attributes.  The :attr:`lineno` and :attr:`end_lineno` are the first and "
"last line numbers of source text span (1-indexed so the first line is line "
"1) and the :attr:`col_offset` and :attr:`end_col_offset` are the "
"corresponding UTF-8 byte offsets of the first and last tokens that generated "
"the node. The UTF-8 offset is recorded because the parser uses UTF-8 "
"internally."
msgstr ""
"As instâncias das subclasses :class:`ast.expr` e :class:`ast.stmt` possuem :"
"attr:`lineno`, :attr:`col_offset`, :attr:`lineno` e :attr:`col_offset` . O :"
"attr:`lineno` e :attr:`end_lineno` são o primeiro e o último número de linha "
"do intervalo do texto de origem (indexado em 1, para que a primeira linha "
"seja a linha 1) e o :attr:`col_offset` e :attr:`end_col_offset` são os "
"deslocamentos de byte UTF-8 correspondentes do primeiro e do último tokens "
"que geraram o nó. O deslocamento UTF-8 é registrado porque o analisador usa "
"UTF-8 internamente."

#: ../../library/ast.rst:75
msgid ""
"Note that the end positions are not required by the compiler and are "
"therefore optional. The end offset is *after* the last symbol, for example "
"one can get the source segment of a one-line expression node using "
"``source_line[node.col_offset : node.end_col_offset]``."
msgstr ""
"Observe que as posições finais não são exigidas pelo compilador e, portanto, "
"são opcionais. O deslocamento final está *após* o último símbolo, por "
"exemplo, é possível obter o segmento de origem de um nó de expressão de uma "
"linha usando ``source_line[node.col_offset : node.end_col_offset]``."

#: ../../library/ast.rst:80
msgid ""
"The constructor of a class :class:`ast.T` parses its arguments as follows:"
msgstr ""
"O construtor de uma classe :class:`ast.T` analisa seus argumentos da "
"seguinte forma:"

#: ../../library/ast.rst:82
msgid ""
"If there are positional arguments, there must be as many as there are items "
"in :attr:`T._fields`; they will be assigned as attributes of these names."
msgstr ""
"Se houver argumentos posicionais, deve haver tantos quanto houver itens em :"
"attr:`T._fields`; eles serão atribuídos como atributos desses nomes."

#: ../../library/ast.rst:84
msgid ""
"If there are keyword arguments, they will set the attributes of the same "
"names to the given values."
msgstr ""
"Se houver argumentos de palavra-chave, eles definirão os atributos dos "
"mesmos nomes para os valores fornecidos."

#: ../../library/ast.rst:87
msgid ""
"For example, to create and populate an :class:`ast.UnaryOp` node, you could "
"use ::"
msgstr ""
"Por exemplo, para criar e popular um nó :class:`ast.UnaryOp`, você poderia "
"usar ::"

#: ../../library/ast.rst:99
msgid "or the more compact ::"
msgstr "ou a forma mais compacta ::"

#: ../../library/ast.rst:106
msgid ""
"Class :class:`ast.Constant` is now used for all constants. Old classes :"
"class:`ast.Num`, :class:`ast.Str`, :class:`ast.Bytes`, :class:`ast."
"NameConstant` and :class:`ast.Ellipsis` are still available, but they will "
"be removed in future Python releases."
msgstr ""
"A classe :class:`ast.Constant` agora é usada para todas as constantes. As "
"classes antigas :class:`ast.Num`, :class:`ast.Str`, :class:`ast.Bytes`, :"
"class:`ast.NameConstant` e :class:`ast.Elipsis` ainda estão disponíveis, mas "
"elas serão removidas em versões futuras do Python."

#: ../../library/ast.rst:115
msgid "Abstract Grammar"
msgstr "Gramática Abstrata"

#: ../../library/ast.rst:117
msgid "The abstract grammar is currently defined as follows:"
msgstr "A gramática abstrata está atualmente definida da seguinte forma:"

#: ../../library/ast.rst:124
msgid ":mod:`ast` Helpers"
msgstr "Auxiliares de :mod:`ast`"

#: ../../library/ast.rst:126
msgid ""
"Apart from the node classes, the :mod:`ast` module defines these utility "
"functions and classes for traversing abstract syntax trees:"
msgstr ""
"Além das classes de nós, o módulo :mod:`ast` define essas funções e classes "
"utilitárias para percorrer árvores de sintaxe abstrata:"

#: ../../library/ast.rst:131
msgid ""
"Parse the source into an AST node.  Equivalent to ``compile(source, "
"filename, mode, ast.PyCF_ONLY_AST)``."
msgstr ""
"Analisa a fonte em um nó AST. Equivalente a ``compile(source, filename, "
"mode, ast.PyCF_ONLY_AST)``."

#: ../../library/ast.rst:134
msgid ""
"If ``type_comments=True`` is given, the parser is modified to check and "
"return type comments as specified by :pep:`484` and :pep:`526`. This is "
"equivalent to adding :data:`ast.PyCF_TYPE_COMMENTS` to the flags passed to :"
"func:`compile()`.  This will report syntax errors for misplaced type "
"comments.  Without this flag, type comments will be ignored, and the "
"``type_comment`` field on selected AST nodes will always be ``None``.  In "
"addition, the locations of ``# type: ignore`` comments will be returned as "
"the ``type_ignores`` attribute of :class:`Module` (otherwise it is always an "
"empty list)."
msgstr ""
"Se ``type_comments=True`` é fornecido, o analisador é modificado para "
"verificar e retornar comentários do tipo, conforme especificado por :pep:"
"`484` e :pep:`526`. Isso é equivalente a adicionar :data:`ast."
"PyCF_TYPE_COMMENTS` aos sinalizadores passados para :func:`compile() `. Isso "
"relatará erros de sintaxe para comentários do tipo extraviado. Sem esse "
"sinalizador, os comentários do tipo serão ignorados e o campo "
"``type_comment`` nos nós AST selecionados sempre será ``None``. Além disso, "
"os locais dos comentários ``# type: ignore`` serão retornados como o "
"atributo ``type_ignores`` de :class:`Module` (caso contrário, é sempre uma "
"lista vazia)."

#: ../../library/ast.rst:144
msgid ""
"In addition, if ``mode`` is ``'func_type'``, the input syntax is modified to "
"correspond to :pep:`484` \"signature type comments\", e.g. ``(str, int) -> "
"List[str]``."
msgstr ""
"Além disso, se ``mode`` for ``'func_type'``, a sintaxe de entrada é "
"modificada para corresponder a \"comentários de tipo de assinatura\" de :pep:"
"`484`, por exemplo, ``(str, int) -> List[str]``."

#: ../../library/ast.rst:148
msgid ""
"Also, setting ``feature_version`` to a tuple ``(major, minor)`` will attempt "
"to parse using that Python version's grammar. Currently ``major`` must equal "
"to ``3``.  For example, setting ``feature_version=(3, 4)`` will allow the "
"use of ``async`` and ``await`` as variable names.  The lowest supported "
"version is ``(3, 4)``; the highest is ``sys.version_info[0:2]``."
msgstr ""
"Além disso, definir ``feature_version`` como uma tupla ``(maior, menor)`` "
"tentará analisar usando a gramática dessa versão do Python. Atualmente, "
"``maior`` deve ser igual a ``3``. Por exemplo, definir ``feature_version=(3, "
"4)`` permitirá o uso de ``async`` e ``waitit`` como nomes de variáveis. A "
"versão mais baixa suportada é ``(3, 4)``; a mais alta é ``sys."
"version_info[0:2]``."

#: ../../library/ast.rst:156 ../../library/ast.rst:177
msgid ""
"It is possible to crash the Python interpreter with a sufficiently large/"
"complex string due to stack depth limitations in Python's AST compiler."
msgstr ""
"É possível travar o interpretador Python com uma string suficientemente "
"grande/complexa devido às limitações de profundidade da pilha no compilador "
"de AST do Python."

#: ../../library/ast.rst:160
msgid "Added ``type_comments``, ``mode='func_type'`` and ``feature_version``."
msgstr ""
"Adicionado ``type_comments``, ``mode='func_type'`` e ``feature_version``."

#: ../../library/ast.rst:166
msgid ""
"Safely evaluate an expression node or a string containing a Python literal "
"or container display.  The string or node provided may only consist of the "
"following Python literal structures: strings, bytes, numbers, tuples, lists, "
"dicts, sets, booleans, and ``None``."
msgstr ""
"Avalia com segurança um nó de expressão ou uma string contendo um literal "
"Python ou exibição de contêiner. A string ou o nó fornecido pode consistir "
"apenas nas seguintes estruturas literais de Python: strings, bytes, números, "
"tuplas, listas, dicts, conjuntos, booleanos e ``None``."

#: ../../library/ast.rst:171
msgid ""
"This can be used for safely evaluating strings containing Python values from "
"untrusted sources without the need to parse the values oneself.  It is not "
"capable of evaluating arbitrarily complex expressions, for example involving "
"operators or indexing."
msgstr ""
"Isso pode ser usado para avaliar com segurança strings contendo valores "
"Python de fontes não confiáveis sem a necessidade de analisar os valores por "
"si próprio. Não é capaz de avaliar expressões arbitrariamente complexas, por "
"exemplo, envolvendo operadores ou indexação."

#: ../../library/ast.rst:181
msgid "Now allows bytes and set literals."
msgstr "Agora permite bytes e literais de conjuntos."

#: ../../library/ast.rst:187
msgid ""
"Return the docstring of the given *node* (which must be a :class:"
"`FunctionDef`, :class:`AsyncFunctionDef`, :class:`ClassDef`, or :class:"
"`Module` node), or ``None`` if it has no docstring. If *clean* is true, "
"clean up the docstring's indentation with :func:`inspect.cleandoc`."
msgstr ""
"Retorna a docstring do *node* dado (que deve ser um nó :class:"
"`FunctionDef`, :class:`AsyncFunctionDef`, :class:`ClassDef` ou :class:"
"`Module`) ou ``None`` se não tiver uma docstring. Se *clean* for verdadeiro, "
"limpa o recuo da docstring com :func:`inspect.cleandoc`."

#: ../../library/ast.rst:193
msgid ":class:`AsyncFunctionDef` is now supported."
msgstr "Não há suporte a :class:`AsyncFunctionDef`."

#: ../../library/ast.rst:199
msgid ""
"Get source code segment of the *source* that generated *node*. If some "
"location information (:attr:`lineno`, :attr:`end_lineno`, :attr:"
"`col_offset`, or :attr:`end_col_offset`) is missing, return ``None``."
msgstr ""
"Obtém o segmento de código-fonte de *source* que gerou *node*. Se algumas "
"informações de local (:attr:`lineno`, :attr:`end_lineno`, :attr:`col_offset` "
"ou :attr:`end_col_offset`) estiverem faltando, retorna ``None``."

#: ../../library/ast.rst:203
msgid ""
"If *padded* is ``True``, the first line of a multi-line statement will be "
"padded with spaces to match its original position."
msgstr ""
"Se *padded* for ``True``, a primeira linha de uma instrução multilinha será "
"preenchida com espaços para corresponder à sua posição original."

#: ../../library/ast.rst:211
msgid ""
"When you compile a node tree with :func:`compile`, the compiler expects :"
"attr:`lineno` and :attr:`col_offset` attributes for every node that supports "
"them.  This is rather tedious to fill in for generated nodes, so this helper "
"adds these attributes recursively where not already set, by setting them to "
"the values of the parent node.  It works recursively starting at *node*."
msgstr ""
"Quando você compila uma árvore de nós com :func:`compile`, o compilador "
"espera atributos :attr:`lineno` e :attr:`col_offset` para cada nó que os "
"suporta. Isso é tedioso para preencher nós gerados, portanto, esse auxiliar "
"adiciona esses atributos recursivamente, onde ainda não estão definidos, "
"definindo-os para os valores do nó pai. Ele funciona recursivamente a partir "
"do *node*."

#: ../../library/ast.rst:220
msgid ""
"Increment the line number and end line number of each node in the tree "
"starting at *node* by *n*. This is useful to \"move code\" to a different "
"location in a file."
msgstr ""
"Incrementa o número da linhas e o número da linha final de cada nó na árvore "
"começando em *node* em *n*. Isso é útil para \"mover código\" para um local "
"diferente em um arquivo."

#: ../../library/ast.rst:227
msgid ""
"Copy source location (:attr:`lineno`, :attr:`col_offset`, :attr:"
"`end_lineno`, and :attr:`end_col_offset`) from *old_node* to *new_node* if "
"possible, and return *new_node*."
msgstr ""
"Copia o local de origem (:attr:`lineno`, :attr:`col_offset`, :attr:"
"`end_lineno` e :attr:`end_col_offset`) de *old_node* para *new_node* se "
"possível e, então, retorna *new_node*."

#: ../../library/ast.rst:234
msgid ""
"Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields`` "
"that is present on *node*."
msgstr ""
"Produz uma tupla de ``(fieldname, value)`` para cada campo em ``node."
"_fields`` que esteja presente em *node*."

#: ../../library/ast.rst:240
msgid ""
"Yield all direct child nodes of *node*, that is, all fields that are nodes "
"and all items of fields that are lists of nodes."
msgstr ""
"Produz todos os nós filhos diretos de *node*, ou seja, todos os campos que "
"são nós e todos os itens de campos que são listas de nós."

#: ../../library/ast.rst:246
msgid ""
"Recursively yield all descendant nodes in the tree starting at *node* "
"(including *node* itself), in no specified order.  This is useful if you "
"only want to modify nodes in place and don't care about the context."
msgstr ""
"Produz recursivamente todos os nós descendentes na árvore começando em "
"*node* (incluindo o próprio *node*), em nenhuma ordem especificada. Isso é "
"útil se você quiser apenas modificar nós no lugar e não se importar com o "
"contexto."

#: ../../library/ast.rst:253
msgid ""
"A node visitor base class that walks the abstract syntax tree and calls a "
"visitor function for every node found.  This function may return a value "
"which is forwarded by the :meth:`visit` method."
msgstr ""
"Uma classe base de visitante de nó que percorre a árvore de sintaxe abstrata "
"e chama uma função de visitante para cada nó encontrado. Esta função pode "
"retornar um valor que é encaminhado pelo método :meth:`visit`."

#: ../../library/ast.rst:257
msgid ""
"This class is meant to be subclassed, with the subclass adding visitor "
"methods."
msgstr ""
"Esta classe deve ser uma subclasse, com a subclasse adicionando métodos "
"visitantes."

#: ../../library/ast.rst:262
msgid ""
"Visit a node.  The default implementation calls the method called :samp:"
"`self.visit_{classname}` where *classname* is the name of the node class, "
"or :meth:`generic_visit` if that method doesn't exist."
msgstr ""
"Visita um nó. A implementação padrão chama o método chamado :samp:`self."
"visit_{nomedaclasse}`  sendo *nomedaclasse* o nome da classe do nó, ou :meth:"
"`generic_visit` se aquele método não existir."

#: ../../library/ast.rst:268
msgid "This visitor calls :meth:`visit` on all children of the node."
msgstr "Este visitante chama :meth:`visit` em todos os filhos do nó."

#: ../../library/ast.rst:270
msgid ""
"Note that child nodes of nodes that have a custom visitor method won't be "
"visited unless the visitor calls :meth:`generic_visit` or visits them itself."
msgstr ""
"Observe que nós filhos de nós que possuem um método de visitante "
"personalizado não serão visitados, a menos que o visitante chame :meth:"
"`generic_visit` ou os visite por conta própria."

#: ../../library/ast.rst:274
msgid ""
"Don't use the :class:`NodeVisitor` if you want to apply changes to nodes "
"during traversal.  For this a special visitor exists (:class:"
"`NodeTransformer`) that allows modifications."
msgstr ""
"Não use o :class:`NodeVisitor` se você quiser aplicar mudanças nos nós "
"durante a travessia. Para isso existe um visitante especial (:class:"
"`NodeTransformer`) que permite modificações."

#: ../../library/ast.rst:280
msgid ""
"Methods :meth:`visit_Num`, :meth:`visit_Str`, :meth:`visit_Bytes`, :meth:"
"`visit_NameConstant` and :meth:`visit_Ellipsis` are deprecated now and will "
"not be called in future Python versions.  Add the :meth:`visit_Constant` "
"method to handle all constant nodes."
msgstr ""
"Os métodos :meth:`visit_Num`, :meth:`visit_Str`, :meth:`visit_Bytes`, :meth:"
"`visit_NameConstant` e :meth:`visit_Ellipsis` estão agora obsoletos e não "
"serão chamados em futuras versões do Python. Adicione um método :meth:"
"`visit_Constant` para lidar com nós de constantes."

#: ../../library/ast.rst:288
msgid ""
"A :class:`NodeVisitor` subclass that walks the abstract syntax tree and "
"allows modification of nodes."
msgstr ""
"A subclasse :class:`NodeVisitor` que percorre a árvore de sintaxe abstrata e "
"permite a modificação de nós."

#: ../../library/ast.rst:291
msgid ""
"The :class:`NodeTransformer` will walk the AST and use the return value of "
"the visitor methods to replace or remove the old node.  If the return value "
"of the visitor method is ``None``, the node will be removed from its "
"location, otherwise it is replaced with the return value.  The return value "
"may be the original node in which case no replacement takes place."
msgstr ""
"O :class:`NodeTransformer` percorrerá a AST e usará o valor de retorno dos "
"métodos do visitante para substituir ou remover o nó antigo. Se o valor de "
"retorno do método visitante for ``None``, o nó será removido de seu local, "
"caso contrário, ele será substituído pelo valor de retorno. O valor de "
"retorno pode ser o nó original, caso em que não há substituição."

#: ../../library/ast.rst:297
msgid ""
"Here is an example transformer that rewrites all occurrences of name lookups "
"(``foo``) to ``data['foo']``::"
msgstr ""
"Aqui está um exemplo de transformador que rescreve todas as ocorrências de "
"procuras por nome (``foo``) para ``data['foo']``::"

#: ../../library/ast.rst:309
msgid ""
"Keep in mind that if the node you're operating on has child nodes you must "
"either transform the child nodes yourself or call the :meth:`generic_visit` "
"method for the node first."
msgstr ""
"Tenha em mente que, se o nó em que você está operando tiver nós filhos, você "
"deve transformar os nós filhos por conta própria ou chamar o método :meth:"
"`generic_visit` para o nó primeiro."

#: ../../library/ast.rst:313
msgid ""
"For nodes that were part of a collection of statements (that applies to all "
"statement nodes), the visitor may also return a list of nodes rather than "
"just a single node."
msgstr ""
"Para nós que faziam parte de uma coleção de instruções (que se aplica a "
"todos os nós de instrução), o visitante também pode retornar uma lista de "
"nós em vez de apenas um único nó."

#: ../../library/ast.rst:317
msgid "Usually you use the transformer like this::"
msgstr "Normalmente você usa o transformador assim::"

#: ../../library/ast.rst:324
msgid ""
"Return a formatted dump of the tree in *node*.  This is mainly useful for "
"debugging purposes.  If *annotate_fields* is true (by default), the returned "
"string will show the names and the values for fields. If *annotate_fields* "
"is false, the result string will be more compact by omitting unambiguous "
"field names.  Attributes such as line numbers and column offsets are not "
"dumped by default.  If this is wanted, *include_attributes* can be set to "
"true."
msgstr ""
"Retorne um despejo formatado da árvore em *node*. Isso é útil principalmente "
"para fins de depuração. Se *annotate_fields* for verdadeiro (por padrão), a "
"sequência retornada mostrará os nomes e os valores para os campos. Se "
"*annotate_fields* for falso, a sequência de resultados será mais compacta ao "
"omitir nomes de campos não ambíguos. Atributos como números de linha e "
"deslocamentos de coluna não são despejados por padrão. Se isso for desejado, "
"*include_attributes* pode ser definido como verdadeiro."

#: ../../library/ast.rst:334
msgid ""
"`Green Tree Snakes <https://greentreesnakes.readthedocs.io/>`_, an external "
"documentation resource, has good details on working with Python ASTs."
msgstr ""
"`Green Tree Snakes <https://greentreesnakes.readthedocs.io/>`_, um recurso "
"de documentação externo, possui bons detalhes sobre trabalhar com ASTs do "
"Python."
