# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Cauê Baasch de Souza <cauebaasch@gmail.com>, 2017
# Raphael Mendonça, 2020
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2020
# i17obot <i17obot@rougeth.com>, 2020
# Vitor Buxbaum Orlandi, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-11 16:34+0000\n"
"PO-Revision-Date: 2017-02-16 17:48+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/ast.rst:2
msgid ":mod:`ast` --- Abstract Syntax Trees"
msgstr ":mod:`ast` --- Árvores de Sintaxe Abstrata"

#: ../../library/ast.rst:14
msgid "**Source code:** :source:`Lib/ast.py`"
msgstr "**Código-fonte:** :source:`Lib/ast.py`"

#: ../../library/ast.rst:18
msgid ""
"The :mod:`ast` module helps Python applications to process trees of the "
"Python abstract syntax grammar.  The abstract syntax itself might change "
"with each Python release; this module helps to find out programmatically "
"what the current grammar looks like."
msgstr ""
"O módulo :mod:`ast` ajuda as aplicações Python a processar árvores da "
"gramática de sintaxe abstrata do Python. A sintaxe abstrata em si pode mudar "
"em cada lançamento do Python; este módulo ajuda a descobrir "
"programaticamente como é a gramática atual."

#: ../../library/ast.rst:23
msgid ""
"An abstract syntax tree can be generated by passing :data:`ast."
"PyCF_ONLY_AST` as a flag to the :func:`compile` built-in function, or using "
"the :func:`parse` helper provided in this module.  The result will be a tree "
"of objects whose classes all inherit from :class:`ast.AST`.  An abstract "
"syntax tree can be compiled into a Python code object using the built-in :"
"func:`compile` function."
msgstr ""
"Uma árvore de sintaxe abstrata pode ser gerada passando :data:`ast."
"PyCF_ONLY_AST` como um sinalizador para a função embutida :func:`compile`, "
"ou usando o auxiliar :func:`parse` fornecido neste módulo. O resultado será "
"uma árvore de objetos cujas classes herdam de :class:`ast.AST`. Uma árvore "
"de sintaxe abstrata pode ser compilada em um objeto código Python usando a "
"função embutida :func:`compile`."

#: ../../library/ast.rst:33
msgid "Abstract Grammar"
msgstr "Gramática Abstrata"

#: ../../library/ast.rst:35
msgid "The abstract grammar is currently defined as follows:"
msgstr "A gramática abstrata está atualmente definida da seguinte forma:"

#: ../../library/ast.rst:42
msgid "Node classes"
msgstr "Classes de nós"

#: ../../library/ast.rst:46
msgid ""
"This is the base of all AST node classes.  The actual node classes are "
"derived from the :file:`Parser/Python.asdl` file, which is reproduced :ref:"
"`below <abstract-grammar>`.  They are defined in the :mod:`_ast` C module "
"and re-exported in :mod:`ast`."
msgstr ""
"Esta é a base de todas as classes de nós AST. As classes de nós reais são "
"derivadas do arquivo :file:`Parser/Python.asdl`, o qual é reproduzido :ref:"
"`abaixo <abstract-grammar>`. Elas são definidas no módulo C :mod:`_ast` e "
"reexportadas em :mod:`ast`."

#: ../../library/ast.rst:51
msgid ""
"There is one class defined for each left-hand side symbol in the abstract "
"grammar (for example, :class:`ast.stmt` or :class:`ast.expr`).  In addition, "
"there is one class defined for each constructor on the right-hand side; "
"these classes inherit from the classes for the left-hand side trees.  For "
"example, :class:`ast.BinOp` inherits from :class:`ast.expr`.  For production "
"rules with alternatives (aka \"sums\"), the left-hand side class is "
"abstract: only instances of specific constructor nodes are ever created."
msgstr ""
"Há uma classe definida para cada símbolo do lado esquerdo na gramática "
"abstrata (por exemplo, :class:`ast.stmt` ou :class:`ast.expr`). Além disso, "
"existe uma classe definida para cada construtor no lado direito; essas "
"classes herdam das classes para as árvores do lado esquerdo. Por exemplo, :"
"class:`ast.BinOp` herda de :class:`ast.expr`. Para regras de produção com "
"alternativas (\"somas\"), a classe do lado esquerdo é abstrata: apenas "
"instâncias de nós construtores específicos são criadas."

#: ../../library/ast.rst:64
msgid ""
"Each concrete class has an attribute :attr:`_fields` which gives the names "
"of all child nodes."
msgstr ""
"Cada classe concreta possui um atributo :attr:`_fields` que fornece os nomes "
"de todos os nós filhos."

#: ../../library/ast.rst:67
msgid ""
"Each instance of a concrete class has one attribute for each child node, of "
"the type as defined in the grammar.  For example, :class:`ast.BinOp` "
"instances have an attribute :attr:`left` of type :class:`ast.expr`."
msgstr ""
"Cada instância de uma classe concreta tem um atributo para cada nó filho, do "
"tipo definido na gramática. Por exemplo, as instâncias :class:`ast.BinOp` "
"possuem um atributo :attr:`left` do tipo :class:`ast.expr`."

#: ../../library/ast.rst:71
msgid ""
"If these attributes are marked as optional in the grammar (using a question "
"mark), the value might be ``None``.  If the attributes can have zero-or-more "
"values (marked with an asterisk), the values are represented as Python "
"lists.  All possible attributes must be present and have valid values when "
"compiling an AST with :func:`compile`."
msgstr ""
"Se estes atributos estiverem marcados como opcionais na gramática (usando um "
"ponto de interrogação), o valor pode ser ``None``. Se os atributos puderem "
"ter valor zero ou mais (marcados com um asterisco), os valores serão "
"representados como listas do Python. Todos os atributos possíveis devem "
"estar presentes e ter valores válidos ao compilar uma AST com :func:"
"`compile`."

#: ../../library/ast.rst:82
msgid ""
"Instances of :class:`ast.expr` and :class:`ast.stmt` subclasses have :attr:"
"`lineno`, :attr:`col_offset`, :attr:`end_lineno`, and :attr:`end_col_offset` "
"attributes.  The :attr:`lineno` and :attr:`end_lineno` are the first and "
"last line numbers of the source text span (1-indexed so the first line is "
"line 1), and the :attr:`col_offset` and :attr:`end_col_offset` are the "
"corresponding UTF-8 byte offsets of the first and last tokens that generated "
"the node. The UTF-8 offset is recorded because the parser uses UTF-8 "
"internally."
msgstr ""

#: ../../library/ast.rst:91
msgid ""
"Note that the end positions are not required by the compiler and are "
"therefore optional. The end offset is *after* the last symbol, for example "
"one can get the source segment of a one-line expression node using "
"``source_line[node.col_offset : node.end_col_offset]``."
msgstr ""
"Observe que as posições finais não são exigidas pelo compilador e, portanto, "
"são opcionais. O deslocamento final está *após* o último símbolo, por "
"exemplo, é possível obter o segmento de origem de um nó de expressão de uma "
"linha usando ``source_line[node.col_offset : node.end_col_offset]``."

#: ../../library/ast.rst:96
msgid ""
"The constructor of a class :class:`ast.T` parses its arguments as follows:"
msgstr ""
"O construtor de uma classe :class:`ast.T` analisa seus argumentos da "
"seguinte forma:"

#: ../../library/ast.rst:98
msgid ""
"If there are positional arguments, there must be as many as there are items "
"in :attr:`T._fields`; they will be assigned as attributes of these names."
msgstr ""
"Se houver argumentos posicionais, deve haver tantos quanto houver itens em :"
"attr:`T._fields`; eles serão atribuídos como atributos desses nomes."

#: ../../library/ast.rst:100
msgid ""
"If there are keyword arguments, they will set the attributes of the same "
"names to the given values."
msgstr ""
"Se houver argumentos nomeados, eles definirão os atributos dos mesmos nomes "
"para os valores fornecidos."

#: ../../library/ast.rst:103
msgid ""
"For example, to create and populate an :class:`ast.UnaryOp` node, you could "
"use ::"
msgstr ""
"Por exemplo, para criar e popular um nó :class:`ast.UnaryOp`, você poderia "
"usar ::"

#: ../../library/ast.rst:115
msgid "or the more compact ::"
msgstr "ou a forma mais compacta ::"

#: ../../library/ast.rst:122
msgid "Class :class:`ast.Constant` is now used for all constants."
msgstr "A classe :class:`ast.Constant` é agora usada para todas as constantes."

#: ../../library/ast.rst:126
msgid ""
"Simple indices are represented by their value, extended slices are "
"represented as tuples."
msgstr ""
"Os índices simples são representados por seus valores, as fatias estendidas "
"são representadas como tuplas."

#: ../../library/ast.rst:131
msgid ""
"Old classes :class:`ast.Num`, :class:`ast.Str`, :class:`ast.Bytes`, :class:"
"`ast.NameConstant` and :class:`ast.Ellipsis` are still available, but they "
"will be removed in future Python releases.  In the meantime, instantiating "
"them will return an instance of a different class."
msgstr ""

#: ../../library/ast.rst:138
msgid ""
"Old classes :class:`ast.Index` and :class:`ast.ExtSlice` are still "
"available, but they will be removed in future Python releases. In the "
"meantime, instantiating them will return an instance of a different class."
msgstr ""

#: ../../library/ast.rst:144
msgid ""
"The descriptions of the specific node classes displayed here were initially "
"adapted from the fantastic `Green Tree Snakes <https://greentreesnakes."
"readthedocs.io/en/latest/>`__ project and all its contributors."
msgstr ""
"As descrições das classes de nós específicas exibidas aqui foram "
"inicialmente adaptadas do fantástico projeto `Green Tree Snakes <https://"
"greentreesnakes.readthedocs.io/en/latest/>`__ e de todos os seus "
"contribuidores."

#: ../../library/ast.rst:150
msgid "Literals"
msgstr "Literais"

#: ../../library/ast.rst:154
msgid ""
"A constant value. The ``value`` attribute of the ``Constant`` literal "
"contains the Python object it represents. The values represented can be "
"simple types such as a number, string or ``None``, but also immutable "
"container types (tuples and frozensets) if all of their elements are "
"constant."
msgstr ""
"Um valor constante. O atributo ``value`` do literal ``Constant`` contém o "
"objeto Python que ele representa. Os valores representados podem ser tipos "
"simples como um número, string ou ``None``, mas também tipos de contêineres "
"imutáveis (tuplas e frozensets) se todos os seus elementos forem constantes."

#: ../../library/ast.rst:168
msgid ""
"Node representing a single formatting field in an f-string. If the string "
"contains a single formatting field and nothing else the node can be isolated "
"otherwise it appears in :class:`JoinedStr`."
msgstr ""
"Nó que representa um único campo de formatação em uma f-string. Se a string "
"contiver um único campo de formatação e nada mais, o nó poderá ser isolado, "
"caso contrário ele aparecerá em :class:`JoinedStr`."

#: ../../library/ast.rst:172
msgid ""
"``value`` is any expression node (such as a literal, a variable, or a "
"function call)."
msgstr ""
"``value`` é qualquer nó de expressão (como um literal, uma variável ou uma "
"chamada de função)."

#: ../../library/ast.rst:174
msgid "``conversion`` is an integer:"
msgstr "``conversion`` é um inteiro:"

#: ../../library/ast.rst:176
msgid "-1: no formatting"
msgstr "-1: sem formatação"

#: ../../library/ast.rst:177
msgid "115: ``!s`` string formatting"
msgstr "115: ``!s`` formatação de string"

#: ../../library/ast.rst:178
msgid "114: ``!r`` repr formatting"
msgstr "114: ``!r`` formatação de repr"

#: ../../library/ast.rst:179
msgid "97: ``!a`` ascii formatting"
msgstr "97: ``!a`` formatação ascii"

#: ../../library/ast.rst:181
msgid ""
"``format_spec`` is a :class:`JoinedStr` node representing the formatting of "
"the value, or ``None`` if no format was specified. Both ``conversion`` and "
"``format_spec`` can be set at the same time."
msgstr ""
"``format_spec`` é um nó :class:`JoinedStr` que representa a formatação do "
"valor, ou ``None`` se nenhum formato foi especificado. Tanto ``conversion`` "
"quanto ``format_spec`` podem ser configurados ao mesmo tempo."

#: ../../library/ast.rst:188
msgid ""
"An f-string, comprising a series of :class:`FormattedValue` and :class:"
"`Constant` nodes."
msgstr ""
"Uma f-string, compreendendo uma série de nós :class:`FormattedValue` e :"
"class:`Constant`."

#: ../../library/ast.rst:217
msgid ""
"A list or tuple. ``elts`` holds a list of nodes representing the elements. "
"``ctx`` is :class:`Store` if the container is an assignment target (i.e. "
"``(x,y)=something``), and :class:`Load` otherwise."
msgstr ""
"Uma lista ou tupla. ``elts`` contém uma lista de nós que representam os "
"elementos. ``ctx`` é :class:`Store` se o contêiner for um alvo de atribuição "
"(ou seja, ``(x,y)=algumacoisa``), e :class:`Load` caso contrário."

#: ../../library/ast.rst:243
msgid "A set. ``elts`` holds a list of nodes representing the set's elements."
msgstr ""
"Um conjunto. ``elts`` contém uma lista de nós que representam os elementos "
"do conjunto."

#: ../../library/ast.rst:258
msgid ""
"A dictionary. ``keys`` and ``values`` hold lists of nodes representing the "
"keys and the values respectively, in matching order (what would be returned "
"when calling :code:`dictionary.keys()` and :code:`dictionary.values()`)."
msgstr ""
"Um dicionário. ``keys`` e ``values`` contêm listas de nós que representam as "
"chaves e os valores respectivamente, em ordem correspondente (o que seria "
"retornado ao chamar :code:`dictionary.keys()` e :code:`dictionary.values()`)."

#: ../../library/ast.rst:262
msgid ""
"When doing dictionary unpacking using dictionary literals the expression to "
"be expanded goes in the ``values`` list, with a ``None`` at the "
"corresponding position in ``keys``."
msgstr ""
"Ao desempacotar o dicionário usando literais de dicionário, a expressão a "
"ser expandida vai para a lista ``values``, com um ``None`` na posição "
"correspondente em ``keys``."

#: ../../library/ast.rst:280
msgid "Variables"
msgstr "Variáveis"

#: ../../library/ast.rst:284
msgid ""
"A variable name. ``id`` holds the name as a string, and ``ctx`` is one of "
"the following types."
msgstr ""
"Um nome de variável. ``id`` contém o nome como uma string e ``ctx`` é um dos "
"seguintes tipos."

#: ../../library/ast.rst:292
msgid ""
"Variable references can be used to load the value of a variable, to assign a "
"new value to it, or to delete it. Variable references are given a context to "
"distinguish these cases."
msgstr ""
"As referências de variáveis podem ser usadas para carregar o valor de uma "
"variável, para atribuir um novo valor a ela ou para excluí-la. As "
"referências de variáveis recebem um contexto para distinguir esses casos."

#: ../../library/ast.rst:325
msgid ""
"A ``*var`` variable reference. ``value`` holds the variable, typically a :"
"class:`Name` node. This type must be used when building a :class:`Call` node "
"with ``*args``."
msgstr ""
"Uma referência de variável ``*var``. ``value`` contém a variável, "
"normalmente um nó :class:`Name`. Este tipo deve ser usado ao construir um "
"nó :class:`Call` com ``*args``."

#: ../../library/ast.rst:348
msgid "Expressions"
msgstr "Expressões"

#: ../../library/ast.rst:352
msgid ""
"When an expression, such as a function call, appears as a statement by "
"itself with its return value not used or stored, it is wrapped in this "
"container. ``value`` holds one of the other nodes in this section, a :class:"
"`Constant`, a :class:`Name`, a :class:`Lambda`, a :class:`Yield` or :class:"
"`YieldFrom` node."
msgstr ""
"Quando uma expressão, como uma chamada de função, aparece como uma instrução "
"por si só com seu valor de retorno não usado ou armazenado, ela é "
"encapsulada neste contêiner. ``value`` contém um dos outros nós nesta seção, "
"um nó :class:`Constant`, um :class:`Name`, um :class:`Lambda`, um :class:"
"`Yield` ou :class:`YieldFrom`."

#: ../../library/ast.rst:371
msgid ""
"A unary operation. ``op`` is the operator, and ``operand`` any expression "
"node."
msgstr ""
"Uma operação unária. ``op`` é o operador e ``operand`` qualquer nó de "
"expressão."

#: ../../library/ast.rst:380
msgid ""
"Unary operator tokens. :class:`Not` is the ``not`` keyword, :class:`Invert` "
"is the ``~`` operator."
msgstr ""
"Tokens de operador unário. :class:`Not` é a palavra reservada ``not``, :"
"class:`Invert` é o operador ``~``."

#: ../../library/ast.rst:394
msgid ""
"A binary operation (like addition or division). ``op`` is the operator, and "
"``left`` and ``right`` are any expression nodes."
msgstr ""
"Uma operação binária (como adição ou divisão). ``op`` é o operador, e "
"``left`` e ``right`` são quaisquer nós de expressão."

#: ../../library/ast.rst:421
msgid "Binary operator tokens."
msgstr "Tokens de operador binário."

#: ../../library/ast.rst:426
msgid ""
"A boolean operation, 'or' or 'and'. ``op`` is :class:`Or` or :class:`And`. "
"``values`` are the values involved. Consecutive operations with the same "
"operator, such as ``a or b or c``, are collapsed into one node with several "
"values."
msgstr ""
"Uma operação booleana, 'or' ou 'and'. ``op`` é :class:`Or` ou :class:`And`. "
"``values`` são os valores envolvidos. Operações consecutivas com o mesmo "
"operador, como ``a or b or c``, são recolhidas em um nó com vários valores."

#: ../../library/ast.rst:431
msgid "This doesn't include ``not``, which is a :class:`UnaryOp`."
msgstr "Isso não inclui ``not``, que é um :class:`UnaryOp`."

#: ../../library/ast.rst:447
msgid "Boolean operator tokens."
msgstr "Tokens de operador booleano."

#: ../../library/ast.rst:452
msgid ""
"A comparison of two or more values. ``left`` is the first value in the "
"comparison, ``ops`` the list of operators, and ``comparators`` the list of "
"values after the first element in the comparison."
msgstr ""
"Uma comparação de dois ou mais valores. ``left`` é o primeiro valor na "
"comparação, ``ops`` a lista de operadores e ``comparators`` a lista de "
"valores após o primeiro elemento na comparação."

#: ../../library/ast.rst:481
msgid "Comparison operator tokens."
msgstr "Tokens de operador de comparação."

#: ../../library/ast.rst:486
msgid ""
"A function call. ``func`` is the function, which will often be a :class:"
"`Name` or :class:`Attribute` object. Of the arguments:"
msgstr ""
"Uma chamada de função. ``func`` é a função, que geralmente será um objeto :"
"class:`Name` ou :class:`Attribute`. Dos argumentos:"

#: ../../library/ast.rst:489
msgid "``args`` holds a list of the arguments passed by position."
msgstr "``args`` contém uma lista dos argumentos passados ​​por posição."

#: ../../library/ast.rst:490
msgid ""
"``keywords`` holds a list of :class:`keyword` objects representing arguments "
"passed by keyword."
msgstr ""

#: ../../library/ast.rst:493
msgid ""
"When creating a ``Call`` node, ``args`` and ``keywords`` are required, but "
"they can be empty lists. ``starargs`` and ``kwargs`` are optional."
msgstr ""

#: ../../library/ast.rst:517
msgid ""
"A keyword argument to a function call or class definition. ``arg`` is a raw "
"string of the parameter name, ``value`` is a node to pass in."
msgstr ""
"Um argumento nomeado para uma chamada de função ou definição de classe. "
"``arg`` é uma string bruta do nome do parâmetro, ``value`` é um nó para "
"passar."

#: ../../library/ast.rst:523
msgid ""
"An expression such as ``a if b else c``. Each field holds a single node, so "
"in the following example, all three are :class:`Name` nodes."
msgstr ""
"Uma expressão como ``a if b else c``. Cada campo contém um único nó, "
"portanto, no exemplo a seguir, todos os três são nós :class:`Name`."

#: ../../library/ast.rst:538
msgid ""
"Attribute access, e.g. ``d.keys``. ``value`` is a node, typically a :class:"
"`Name`. ``attr`` is a bare string giving the name of the attribute, and "
"``ctx`` is :class:`Load`, :class:`Store` or :class:`Del` according to how "
"the attribute is acted on."
msgstr ""
"Acesso a atributo como, por exemplo, ``d.keys``. ``value`` é um nó, "
"normalmente um :class:`Name`. ``attr`` é uma string simples fornecendo o "
"nome do atributo, e ``ctx`` é :class:`Load`, :class:`Store` ou :class:`Del` "
"de acordo com como o atributo é acionado sobre."

#: ../../library/ast.rst:555
msgid ""
"A named expression. This AST node is produced by the assignment expressions "
"operator (also known as the walrus operator). As opposed to the :class:"
"`Assign` node in which the first argument can be multiple nodes, in this "
"case both ``target`` and ``value`` must be single nodes."
msgstr ""
"Uma expressão nomeada. Este nó de AST é produzido pelo operador de "
"expressões de atribuição (também conhecido como operador morsa). Ao "
"contrário do nó :class:`Assign` no qual o primeiro argumento pode ser "
"múltiplos nós, neste caso ambos ``target`` e ``value`` devem ser nós únicos."

#: ../../library/ast.rst:570
msgid "Subscripting"
msgstr "Subscrição"

#: ../../library/ast.rst:574
msgid ""
"A subscript, such as ``l[1]``. ``value`` is the subscripted object (usually "
"sequence or mapping). ``slice`` is an index, slice or key. It can be a :"
"class:`Tuple` and contain a :class:`Slice`. ``ctx`` is :class:`Load`, :class:"
"`Store` or :class:`Del` according to the action performed with the subscript."
msgstr ""
"Um subscrito, como ``l[1]``. ``value`` é o objeto subscrito (geralmente "
"sequência ou mapeamento). ``slice`` é um índice, fatia ou chave. Pode ser "
"uma :class:`Tuple` e conter uma :class:`Slice`. ``ctx`` é :class:`Load`, :"
"class:`Store` ou :class:`Del` de acordo com a ação realizada com o subscrito."

#: ../../library/ast.rst:598
msgid ""
"Regular slicing (on the form ``lower:upper`` or ``lower:upper:step``). Can "
"occur only inside the *slice* field of :class:`Subscript`, either directly "
"or as an element of :class:`Tuple`."
msgstr ""
"Fatiamento regular (no formato ``lower:upper`` ou ``lower:upper:step``). "
"Pode ocorrer apenas dentro do campo *slice* de :class:`Subscript`, "
"diretamente ou como um elemento de :class:`Tuple`."

#: ../../library/ast.rst:615
msgid "Comprehensions"
msgstr "Compreensões"

#: ../../library/ast.rst:622
msgid ""
"List and set comprehensions, generator expressions, and dictionary "
"comprehensions. ``elt`` (or ``key`` and ``value``) is a single node "
"representing the part that will be evaluated for each item."
msgstr ""
"Lista e define compreensões, expressões geradoras e compreensões de "
"dicionário. ``elt`` (ou ``key`` e ``value``) é um único nó que representa a "
"parte que será avaliada para cada item."

#: ../../library/ast.rst:626
msgid "``generators`` is a list of :class:`comprehension` nodes."
msgstr "``generators`` é uma lista de nós de :class:`comprehension`."

#: ../../library/ast.rst:668
msgid ""
"One ``for`` clause in a comprehension. ``target`` is the reference to use "
"for each element - typically a :class:`Name` or :class:`Tuple` node. "
"``iter`` is the object to iterate over. ``ifs`` is a list of test "
"expressions: each ``for`` clause can have multiple ``ifs``."
msgstr ""
"Uma cláusula ``for`` em uma compreensão. ``target`` é a referência a ser "
"usada para cada elemento - normalmente um nó :class:`Name` ou :class:"
"`Tuple`. ``iter`` é o objeto sobre o qual iterar. ``ifs`` é uma lista de "
"expressões de teste: cada cláusula ``for`` pode ter múltiplos ``ifs``."

#: ../../library/ast.rst:673
msgid ""
"``is_async`` indicates a comprehension is asynchronous (using an ``async "
"for`` instead of ``for``). The value is an integer (0 or 1)."
msgstr ""
"``is_async`` indica que uma compreensão é assíncrona (usando um ``async "
"for`` em vez de ``for``). O valor é um número inteiro (0 ou 1)."

#: ../../library/ast.rst:739
msgid "Statements"
msgstr "Instruções"

#: ../../library/ast.rst:743
msgid ""
"An assignment. ``targets`` is a list of nodes, and ``value`` is a single "
"node."
msgstr ""
"Uma atribuição. ``targets`` é uma lista de nós e ``value`` é um único nó."

#: ../../library/ast.rst:745
msgid ""
"Multiple nodes in ``targets`` represents assigning the same value to each. "
"Unpacking is represented by putting a :class:`Tuple` or :class:`List` within "
"``targets``."
msgstr ""
"Vários nós em ``targets`` representam a atribuição do mesmo valor a cada um. "
"O desempacotamento é representada colocando uma :class:`Tuple` ou :class:"
"`List` dentro de ``targets``."

#: ../../library/ast.rst:751 ../../library/ast.rst:1038
#: ../../library/ast.rst:1211 ../../library/ast.rst:1264
msgid ""
"``type_comment`` is an optional string with the type annotation as a comment."
msgstr ""
"``type_comment`` é uma string opcional com a anotação de tipo como "
"comentário."

#: ../../library/ast.rst:781
msgid ""
"An assignment with a type annotation. ``target`` is a single node and can be "
"a :class:`Name`, a :class:`Attribute` or a :class:`Subscript`. "
"``annotation`` is the annotation, such as a :class:`Constant` or :class:"
"`Name` node. ``value`` is a single optional node. ``simple`` is a boolean "
"integer set to True for a :class:`Name` node in ``target`` that do not "
"appear in between parenthesis and are hence pure names and not expressions."
msgstr ""
"Uma atribuição com uma anotação de tipo. ``target`` é um nó único e pode ser "
"um :class:`Name`, um :class:`Attribute` ou um :class:`Subscript`. "
"``annotation`` é a anotação, como um nó de :class:`Constant` ou :class:"
"`Name`. ``value`` é um único nó opcional. ``simple`` é um inteiro booleano "
"definido como True para um nó :class:`Name` em ``target`` que não aparece "
"entre parênteses e são, portanto, nomes puros e não expressões."

#: ../../library/ast.rst:836
msgid ""
"Augmented assignment, such as ``a += 1``. In the following example, "
"``target`` is a :class:`Name` node for ``x`` (with the :class:`Store` "
"context), ``op`` is :class:`Add`, and ``value`` is a :class:`Constant` with "
"value for 1."
msgstr ""
"Atribuição aumentada, como ``a += 1``. No exemplo a seguir, ``target`` é um "
"nó :class:`Name` para ``x`` (com o contexto :class:`Store`), ``op`` é :class:"
"`Add`, e ``value`` é uma :class:`Constant` com valor para 1."

#: ../../library/ast.rst:841
msgid ""
"The ``target`` attribute connot be of class :class:`Tuple` or :class:`List`, "
"unlike the targets of :class:`Assign`."
msgstr ""

#: ../../library/ast.rst:858
msgid ""
"A ``raise`` statement. ``exc`` is the exception object to be raised, "
"normally a :class:`Call` or :class:`Name`, or ``None`` for a standalone "
"``raise``. ``cause`` is the optional part for ``y`` in ``raise x from y``."
msgstr ""
"Uma instrução ``raise``. ``exc`` é o objeto de exceção a ser levantado, "
"normalmente uma :class:`Call` ou :class:`Name`, ou ``None`` para um "
"``raise`` independente. ``cause`` é a parte opcional para ``y`` em ``raise x "
"from y``."

#: ../../library/ast.rst:875
msgid ""
"An assertion. ``test`` holds the condition, such as a :class:`Compare` node. "
"``msg`` holds the failure message."
msgstr ""
"Uma asserção. ``test`` contém a condição, como um nó :class:`Compare`. "
"``msg`` contém a mensagem de falha."

#: ../../library/ast.rst:891
msgid ""
"Represents a ``del`` statement. ``targets`` is a list of nodes, such as :"
"class:`Name`, :class:`Attribute` or :class:`Subscript` nodes."
msgstr ""
"Representa uma instrução ``del``. ``targets`` é uma lista de nós, como nós :"
"class:`Name`, :class:`Attribute` ou :class:`Subscript`."

#: ../../library/ast.rst:909
msgid "A ``pass`` statement."
msgstr "Uma instrução ``pass``."

#: ../../library/ast.rst:920
msgid ""
"Other statements which are only applicable inside functions or loops are "
"described in other sections."
msgstr ""
"Outras instruções que são aplicáveis apenas dentro de funções ou laços são "
"descritas em outras seções."

#: ../../library/ast.rst:924
msgid "Imports"
msgstr "Importações"

#: ../../library/ast.rst:928
msgid "An import statement. ``names`` is a list of :class:`alias` nodes."
msgstr ""
"Uma instrução de importação. ``names`` é uma lista de nós de :class:`alias`."

#: ../../library/ast.rst:945
msgid ""
"Represents ``from x import y``. ``module`` is a raw string of the 'from' "
"name, without any leading dots, or ``None`` for statements such as ``from . "
"import foo``. ``level`` is an integer holding the level of the relative "
"import (0 means absolute import)."
msgstr ""
"Representa ``from x import y``. ``module`` é uma string bruta do nome "
"'from', sem quaisquer pontos iniciais, ou ``None`` para instruções como "
"``from . import foo``. ``level`` é um número inteiro que contém o nível da "
"importação relativa (0 significa importação absoluta)."

#: ../../library/ast.rst:967
msgid ""
"Both parameters are raw strings of the names. ``asname`` can be ``None`` if "
"the regular name is to be used."
msgstr ""
"Ambos os parâmetros são strings brutas dos nomes. ``asname`` pode ser "
"``None`` se o nome normal for usado."

#: ../../library/ast.rst:984
msgid "Control flow"
msgstr "Fluxo de controle"

#: ../../library/ast.rst:987
msgid ""
"Optional clauses such as ``else`` are stored as an empty list if they're not "
"present."
msgstr ""
"Cláusulas opcionais como ``else`` são armazenadas como uma lista vazia se "
"não estiverem presentes."

#: ../../library/ast.rst:992
msgid ""
"An ``if`` statement. ``test`` holds a single node, such as a :class:"
"`Compare` node. ``body`` and ``orelse`` each hold a list of nodes."
msgstr ""
"Uma instrução ``if``. ``test`` contém um único nó, como um nó :class:"
"`Compare`. ``body`` e ``orelse`` contêm, cada um, uma lista de nós."

#: ../../library/ast.rst:995
msgid ""
"``elif`` clauses don't have a special representation in the AST, but rather "
"appear as extra :class:`If` nodes within the ``orelse`` section of the "
"previous one."
msgstr ""
"As cláusulas ``elif`` não têm uma representação especial no AST, mas "
"aparecem como nós extras de :class:`If` dentro da seção ``orelse`` da "
"cláusula anterior."

#: ../../library/ast.rst:1030
msgid ""
"A ``for`` loop. ``target`` holds the variable(s) the loop assigns to, as a "
"single :class:`Name`, :class:`Tuple` or :class:`List` node. ``iter`` holds "
"the item to be looped over, again as a single node. ``body`` and ``orelse`` "
"contain lists of nodes to execute. Those in ``orelse`` are executed if the "
"loop finishes normally, rather than via a ``break`` statement."
msgstr ""

#: ../../library/ast.rst:1064
msgid ""
"A ``while`` loop. ``test`` holds the condition, such as a :class:`Compare` "
"node."
msgstr ""
"Um laço ``while``. ``test`` contém a condição, como um nó de :class:"
"`Compare`."

#: ../../library/ast.rst:1091
msgid "The ``break`` and ``continue`` statements."
msgstr "As instruções ``break`` e ``continue``."

#: ../../library/ast.rst:1126
msgid ""
"``try`` blocks. All attributes are list of nodes to execute, except for "
"``handlers``, which is a list of :class:`ExceptHandler` nodes."
msgstr ""
"Blocos ``try``. Todos os atributos são uma lista de nós a serem executados, "
"exceto ``handlers``, que é uma lista de nós de :class:`ExceptHandler`."

#: ../../library/ast.rst:1172
msgid ""
"A single ``except`` clause. ``type`` is the exception type it will match, "
"typically a :class:`Name` node (or ``None`` for a catch-all ``except:`` "
"clause). ``name`` is a raw string for the name to hold the exception, or "
"``None`` if the clause doesn't have ``as foo``. ``body`` is a list of nodes."
msgstr ""
"Uma única cláusula ``except``. ``type`` é o tipo de exceção que irá "
"corresponder, normalmente um nó de :class:`Name` (ou ``None`` para uma "
"cláusula abrangente ``except:``). ``name`` é uma string bruta para o nome "
"conter a exceção, ou ``None`` se a cláusula não tiver ``as foo``. ``body`` é "
"uma lista de nós."

#: ../../library/ast.rst:1206
msgid ""
"A ``with`` block. ``items`` is a list of :class:`withitem` nodes "
"representing the context managers, and ``body`` is the indented block inside "
"the context."
msgstr ""
"Um bloco ``with``. ``items`` é uma lista de nós :class:`withitem` "
"representando os gerenciadores de contexto, e ``body`` é o bloco indentado "
"dentro do contexto."

#: ../../library/ast.rst:1216
msgid ""
"A single context manager in a ``with`` block. ``context_expr`` is the "
"context manager, often a :class:`Call` node. ``optional_vars`` is a :class:"
"`Name`, :class:`Tuple` or :class:`List` for the ``as foo`` part, or ``None`` "
"if that isn't used."
msgstr ""
"Um único gerenciador de contexto em um bloco ``with``. ``context_expr`` é o "
"gerenciador de contexto, geralmente um nó de :class:`Call`. "
"``optional_vars`` é um :class:`Name`, :class:`Tuple` ou :class:`List` para a "
"parte ``as foo``, ou ``None`` se não for usado."

#: ../../library/ast.rst:1249
msgid "Function and class definitions"
msgstr "Definições de função e classe"

#: ../../library/ast.rst:1253
msgid "A function definition."
msgstr "Uma definição de função"

#: ../../library/ast.rst:1255
msgid "``name`` is a raw string of the function name."
msgstr "``name`` é uma string bruta do nome da função."

#: ../../library/ast.rst:1256
msgid "``args`` is an :class:`arguments` node."
msgstr "``args`` é um nó :class:`arguments`."

#: ../../library/ast.rst:1257
msgid "``body`` is the list of nodes inside the function."
msgstr "``body`` é a lista de nós dentro da função."

#: ../../library/ast.rst:1258
msgid ""
"``decorator_list`` is the list of decorators to be applied, stored outermost "
"first (i.e. the first in the list will be applied last)."
msgstr ""
"``decorator_list`` é a lista de decoradores a serem aplicados, armazenados "
"primeiro na parte externa (ou seja, o primeiro da lista será aplicado por "
"último)."

#: ../../library/ast.rst:1260
msgid "``returns`` is the return annotation."
msgstr "``returns`` é a anotação de retorno."

#: ../../library/ast.rst:1269
msgid ""
"``lambda`` is a minimal function definition that can be used inside an "
"expression. Unlike :class:`FunctionDef`, ``body`` holds a single node."
msgstr ""
"``lambda`` é uma definição mínima de função que pode ser usada dentro de uma "
"expressão. Ao contrário de :class:`FunctionDef`, ``body`` contém um único nó."

#: ../../library/ast.rst:1293
msgid "The arguments for a function."
msgstr "Os argumentos para uma função."

#: ../../library/ast.rst:1295
msgid ""
"``posonlyargs``, ``args`` and ``kwonlyargs`` are lists of :class:`arg` nodes."
msgstr ""
"``posonlyargs``, ``args`` e ``kwonlyargs`` são listas de nós :class:`arg`."

#: ../../library/ast.rst:1296
msgid ""
"``vararg`` and ``kwarg`` are single :class:`arg` nodes, referring to the "
"``*args, **kwargs`` parameters."
msgstr ""
"``vararg`` e ``kwarg`` são nós :class:`arg` únicos, referindo-se aos "
"parâmetros ``*args, **kwargs``."

#: ../../library/ast.rst:1298
msgid ""
"``kw_defaults`` is a list of default values for keyword-only arguments. If "
"one is ``None``, the corresponding argument is required."
msgstr ""
"``kw_defaults`` é uma lista de valores padrão para argumentos somente-"
"nomeados. Se um for ``None``, o argumento correspondente é necessário."

#: ../../library/ast.rst:1300
msgid ""
"``defaults`` is a list of default values for arguments that can be passed "
"positionally. If there are fewer defaults, they correspond to the last n "
"arguments."
msgstr ""
"``defaults`` é uma lista de valores padrão para argumentos que podem ser "
"passados ​​posicionalmente. Se houver menos padrões, eles corresponderão aos "
"últimos n argumentos."

#: ../../library/ast.rst:1307
msgid ""
"A single argument in a list. ``arg`` is a raw string of the argument name, "
"``annotation`` is its annotation, such as a :class:`Str` or :class:`Name` "
"node."
msgstr ""

#: ../../library/ast.rst:1313
msgid ""
"``type_comment`` is an optional string with the type annotation as a comment"
msgstr ""
"``type_comment`` é uma string opcional com a anotação de tipo como comentário"

#: ../../library/ast.rst:1357
msgid "A ``return`` statement."
msgstr "Uma instrução ``return``."

#: ../../library/ast.rst:1372
msgid ""
"A ``yield`` or ``yield from`` expression. Because these are expressions, "
"they must be wrapped in a :class:`Expr` node if the value sent back is not "
"used."
msgstr ""
"Uma expressão ``yield`` ou ``yield from``. Por serem expressões, elas devem "
"ser agrupadas em um nó :class:`Expr` se o valor enviado de volta não for "
"usado."

#: ../../library/ast.rst:1397
msgid ""
"``global`` and ``nonlocal`` statements. ``names`` is a list of raw strings."
msgstr ""
"Instruções ``global`` e ``nonlocal``. ``names`` é uma lista de strings "
"brutas."

#: ../../library/ast.rst:1424
msgid "A class definition."
msgstr "Uma definição de classe"

#: ../../library/ast.rst:1426
msgid "``name`` is a raw string for the class name"
msgstr "``name`` é uma string bruta para o nome da classe"

#: ../../library/ast.rst:1427
msgid "``bases`` is a list of nodes for explicitly specified base classes."
msgstr ""
"``bases`` é uma lista de nós para classes base especificadas explicitamente."

#: ../../library/ast.rst:1428
msgid ""
"``keywords`` is a list of :class:`keyword` nodes, principally for "
"'metaclass'. Other keywords will be passed to the metaclass, as per "
"`PEP-3115 <https://www.python.org/dev/peps/pep-3115/>`_."
msgstr ""

#: ../../library/ast.rst:1431
msgid ""
"``starargs`` and ``kwargs`` are each a single node, as in a function call. "
"starargs will be expanded to join the list of base classes, and kwargs will "
"be passed to the metaclass."
msgstr ""

#: ../../library/ast.rst:1434
msgid ""
"``body`` is a list of nodes representing the code within the class "
"definition."
msgstr ""
"``body`` é uma lista de nós que representam o código dentro da definição de "
"classe."

#: ../../library/ast.rst:1436
msgid "``decorator_list`` is a list of nodes, as in :class:`FunctionDef`."
msgstr "``decorator_list`` é uma lista de nós, como em :class:`FunctionDef`."

#: ../../library/ast.rst:1465
msgid "Async and await"
msgstr "Async e await"

#: ../../library/ast.rst:1469
msgid ""
"An ``async def`` function definition. Has the same fields as :class:"
"`FunctionDef`."
msgstr ""
"Uma definição de função ``async def``. Possui os mesmos campos que :class:"
"`FunctionDef`."

#: ../../library/ast.rst:1475
msgid ""
"An ``await`` expression. ``value`` is what it waits for. Only valid in the "
"body of an :class:`AsyncFunctionDef`."
msgstr ""
"Uma expressão ``await``. ``value`` é o que ela espera. Válido apenas no "
"corpo de um :class:`AsyncFunctionDef`."

#: ../../library/ast.rst:1508
msgid ""
"``async for`` loops and ``async with`` context managers. They have the same "
"fields as :class:`For` and :class:`With`, respectively. Only valid in the "
"body of an :class:`AsyncFunctionDef`."
msgstr ""
"Laços ``async for`` e gerenciadores de contexto ``async with``. Eles têm os "
"mesmos campos que :class:`For` e :class:`With`, respectivamente. Válido "
"apenas no corpo de :class:`AsyncFunctionDef`."

#: ../../library/ast.rst:1513
msgid ""
"When a string is parsed by :func:`ast.parse`, operator nodes (subclasses of :"
"class:`ast.operator`, :class:`ast.unaryop`, :class:`ast.cmpop`, :class:`ast."
"boolop` and :class:`ast.expr_context`) on the returned tree will be "
"singletons. Changes to one will be reflected in all other occurrences of the "
"same value (e.g. :class:`ast.Add`)."
msgstr ""
"Quando uma string é analisada por :func:`ast.parse`, os nós operadores "
"(subclasses de :class:`ast.operator`, :class:`ast.unaryop`, :class:`ast."
"cmpop`, :class:`ast.boolop` e :class:`ast.expr_context`) na árvore retornada "
"serão singletons. As alterações em um serão refletidas em todas as outras "
"ocorrências do mesmo valor (por exemplo, :class:`ast.Add`)."

#: ../../library/ast.rst:1521
msgid ":mod:`ast` Helpers"
msgstr "Auxiliares de :mod:`ast`"

#: ../../library/ast.rst:1523
msgid ""
"Apart from the node classes, the :mod:`ast` module defines these utility "
"functions and classes for traversing abstract syntax trees:"
msgstr ""
"Além das classes de nós, o módulo :mod:`ast` define essas funções e classes "
"utilitárias para percorrer árvores de sintaxe abstrata:"

#: ../../library/ast.rst:1528
msgid ""
"Parse the source into an AST node.  Equivalent to ``compile(source, "
"filename, mode, ast.PyCF_ONLY_AST)``."
msgstr ""
"Analisa a fonte em um nó AST. Equivalente a ``compile(source, filename, "
"mode, ast.PyCF_ONLY_AST)``."

#: ../../library/ast.rst:1531
msgid ""
"If ``type_comments=True`` is given, the parser is modified to check and "
"return type comments as specified by :pep:`484` and :pep:`526`. This is "
"equivalent to adding :data:`ast.PyCF_TYPE_COMMENTS` to the flags passed to :"
"func:`compile()`.  This will report syntax errors for misplaced type "
"comments.  Without this flag, type comments will be ignored, and the "
"``type_comment`` field on selected AST nodes will always be ``None``.  In "
"addition, the locations of ``# type: ignore`` comments will be returned as "
"the ``type_ignores`` attribute of :class:`Module` (otherwise it is always an "
"empty list)."
msgstr ""
"Se ``type_comments=True`` é fornecido, o analisador é modificado para "
"verificar e retornar comentários do tipo, conforme especificado por :pep:"
"`484` e :pep:`526`. Isso é equivalente a adicionar :data:`ast."
"PyCF_TYPE_COMMENTS` aos sinalizadores passados para :func:`compile()`. Isso "
"relatará erros de sintaxe para comentários do tipo extraviado. Sem esse "
"sinalizador, os comentários do tipo serão ignorados e o campo "
"``type_comment`` nos nós AST selecionados sempre será ``None``. Além disso, "
"os locais dos comentários ``# type: ignore`` serão retornados como o "
"atributo ``type_ignores`` de :class:`Module` (caso contrário, é sempre uma "
"lista vazia)."

#: ../../library/ast.rst:1541
msgid ""
"In addition, if ``mode`` is ``'func_type'``, the input syntax is modified to "
"correspond to :pep:`484` \"signature type comments\", e.g. ``(str, int) -> "
"List[str]``."
msgstr ""
"Além disso, se ``mode`` for ``'func_type'``, a sintaxe de entrada é "
"modificada para corresponder a \"comentários de tipo de assinatura\" de :pep:"
"`484`, por exemplo, ``(str, int) -> List[str]``."

#: ../../library/ast.rst:1545
msgid ""
"Also, setting ``feature_version`` to a tuple ``(major, minor)`` will attempt "
"to parse using that Python version's grammar. Currently ``major`` must equal "
"to ``3``.  For example, setting ``feature_version=(3, 4)`` will allow the "
"use of ``async`` and ``await`` as variable names.  The lowest supported "
"version is ``(3, 4)``; the highest is ``sys.version_info[0:2]``."
msgstr ""
"Além disso, definir ``feature_version`` como uma tupla ``(maior, menor)`` "
"tentará analisar usando a gramática dessa versão do Python. Atualmente, "
"``maior`` deve ser igual a ``3``. Por exemplo, definir ``feature_version=(3, "
"4)`` permitirá o uso de ``async`` e ``waitit`` como nomes de variáveis. A "
"versão mais baixa suportada é ``(3, 4)``; a mais alta é ``sys."
"version_info[0:2]``."

#: ../../library/ast.rst:1552
msgid ""
"If source contains a null character ('\\0'), :exc:`ValueError` is raised."
msgstr ""

#: ../../library/ast.rst:1555
msgid ""
"Note that successfully parsing source code into an AST object doesn't "
"guarantee that the source code provided is valid Python code that can be "
"executed as the compilation step can raise further :exc:`SyntaxError` "
"exceptions. For instance, the source ``return 42`` generates a valid AST "
"node for a return statement, but it cannot be compiled alone (it needs to be "
"inside a function node)."
msgstr ""
"Observe que a análise bem-sucedida do código-fonte em um objeto AST não "
"garante que o código-fonte fornecido seja um código Python válido que pode "
"ser executado, pois a etapa de compilação pode levantar mais exceções :exc:"
"`SyntaxError`. Por exemplo, a fonte ``return 42`` gera um nó AST válido para "
"uma instrução return, mas não pode ser compilado sozinho (precisa estar "
"dentro de um nó de função)."

#: ../../library/ast.rst:1562
msgid ""
"In particular, :func:`ast.parse` won't do any scoping checks, which the "
"compilation step does."
msgstr ""
"Em particular, :func:`ast.parse` não fará nenhuma verificação de escopo, o "
"que a etapa de compilação faz."

#: ../../library/ast.rst:1566 ../../library/ast.rst:1605
msgid ""
"It is possible to crash the Python interpreter with a sufficiently large/"
"complex string due to stack depth limitations in Python's AST compiler."
msgstr ""
"É possível travar o interpretador Python com uma string suficientemente "
"grande/complexa devido às limitações de profundidade da pilha no compilador "
"de AST do Python."

#: ../../library/ast.rst:1570
msgid "Added ``type_comments``, ``mode='func_type'`` and ``feature_version``."
msgstr ""
"Adicionado ``type_comments``, ``mode='func_type'`` e ``feature_version``."

#: ../../library/ast.rst:1576
msgid ""
"Unparse an :class:`ast.AST` object and generate a string with code that "
"would produce an equivalent :class:`ast.AST` object if parsed back with :"
"func:`ast.parse`."
msgstr ""
"Desfaz análise de um objeto :class:`ast.AST` e gera uma string com código "
"que produziria um objeto :class:`ast.AST` equivalente se analisado novamente "
"com :func:`ast.parse`."

#: ../../library/ast.rst:1581
msgid ""
"The produced code string will not necessarily be equal to the original code "
"that generated the :class:`ast.AST` object (without any compiler "
"optimizations, such as constant tuples/frozensets)."
msgstr ""
"A string de código produzida não será necessariamente igual ao código "
"original que gerou o objeto :class:`ast.AST` (sem quaisquer otimizações do "
"compilador, como tuplas/frozensets constantes)."

#: ../../library/ast.rst:1586
msgid ""
"Trying to unparse a highly complex expression would result with :exc:"
"`RecursionError`."
msgstr ""
"Tentar desfazer análise de uma expressão altamente complexa resultaria em :"
"exc:`RecursionError`."

#: ../../library/ast.rst:1594
msgid ""
"Safely evaluate an expression node or a string containing a Python literal "
"or container display.  The string or node provided may only consist of the "
"following Python literal structures: strings, bytes, numbers, tuples, lists, "
"dicts, sets, booleans, and ``None``."
msgstr ""
"Avalia com segurança um nó de expressão ou uma string contendo um literal "
"Python ou exibição de contêiner. A string ou o nó fornecido pode consistir "
"apenas nas seguintes estruturas literais de Python: strings, bytes, números, "
"tuplas, listas, dicts, conjuntos, booleanos e ``None``."

#: ../../library/ast.rst:1599
msgid ""
"This can be used for safely evaluating strings containing Python values from "
"untrusted sources without the need to parse the values oneself.  It is not "
"capable of evaluating arbitrarily complex expressions, for example involving "
"operators or indexing."
msgstr ""
"Isso pode ser usado para avaliar com segurança strings contendo valores "
"Python de fontes não confiáveis sem a necessidade de analisar os valores por "
"si próprio. Não é capaz de avaliar expressões arbitrariamente complexas, por "
"exemplo, envolvendo operadores ou indexação."

#: ../../library/ast.rst:1609
msgid "Now allows bytes and set literals."
msgstr "Agora permite bytes e literais de conjuntos."

#: ../../library/ast.rst:1612
msgid "Now supports creating empty sets with ``'set()'``."
msgstr "Agora oferece suporte à criação de conjuntos vazios com ``'set()'``."

#: ../../library/ast.rst:1618
msgid ""
"Return the docstring of the given *node* (which must be a :class:"
"`FunctionDef`, :class:`AsyncFunctionDef`, :class:`ClassDef`, or :class:"
"`Module` node), or ``None`` if it has no docstring. If *clean* is true, "
"clean up the docstring's indentation with :func:`inspect.cleandoc`."
msgstr ""
"Retorna a docstring do *node* dado (que deve ser um nó :class:"
"`FunctionDef`, :class:`AsyncFunctionDef`, :class:`ClassDef` ou :class:"
"`Module`) ou ``None`` se não tiver uma docstring. Se *clean* for verdadeiro, "
"limpa o recuo da docstring com :func:`inspect.cleandoc`."

#: ../../library/ast.rst:1624
msgid ":class:`AsyncFunctionDef` is now supported."
msgstr "Não há suporte a :class:`AsyncFunctionDef`."

#: ../../library/ast.rst:1630
msgid ""
"Get source code segment of the *source* that generated *node*. If some "
"location information (:attr:`lineno`, :attr:`end_lineno`, :attr:"
"`col_offset`, or :attr:`end_col_offset`) is missing, return ``None``."
msgstr ""
"Obtém o segmento de código-fonte de *source* que gerou *node*. Se algumas "
"informações de local (:attr:`lineno`, :attr:`end_lineno`, :attr:`col_offset` "
"ou :attr:`end_col_offset`) estiverem faltando, retorna ``None``."

#: ../../library/ast.rst:1634
msgid ""
"If *padded* is ``True``, the first line of a multi-line statement will be "
"padded with spaces to match its original position."
msgstr ""
"Se *padded* for ``True``, a primeira linha de uma instrução multilinha será "
"preenchida com espaços para corresponder à sua posição original."

#: ../../library/ast.rst:1642
msgid ""
"When you compile a node tree with :func:`compile`, the compiler expects :"
"attr:`lineno` and :attr:`col_offset` attributes for every node that supports "
"them.  This is rather tedious to fill in for generated nodes, so this helper "
"adds these attributes recursively where not already set, by setting them to "
"the values of the parent node.  It works recursively starting at *node*."
msgstr ""
"Quando você compila uma árvore de nós com :func:`compile`, o compilador "
"espera atributos :attr:`lineno` e :attr:`col_offset` para cada nó que os "
"suporta. Isso é tedioso para preencher nós gerados, portanto, esse auxiliar "
"adiciona esses atributos recursivamente, onde ainda não estão definidos, "
"definindo-os para os valores do nó pai. Ele funciona recursivamente a partir "
"do *node*."

#: ../../library/ast.rst:1651
msgid ""
"Increment the line number and end line number of each node in the tree "
"starting at *node* by *n*. This is useful to \"move code\" to a different "
"location in a file."
msgstr ""
"Incrementa o número da linhas e o número da linha final de cada nó na árvore "
"começando em *node* em *n*. Isso é útil para \"mover código\" para um local "
"diferente em um arquivo."

#: ../../library/ast.rst:1658
msgid ""
"Copy source location (:attr:`lineno`, :attr:`col_offset`, :attr:"
"`end_lineno`, and :attr:`end_col_offset`) from *old_node* to *new_node* if "
"possible, and return *new_node*."
msgstr ""
"Copia o local de origem (:attr:`lineno`, :attr:`col_offset`, :attr:"
"`end_lineno` e :attr:`end_col_offset`) de *old_node* para *new_node* se "
"possível e, então, retorna *new_node*."

#: ../../library/ast.rst:1665
msgid ""
"Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields`` "
"that is present on *node*."
msgstr ""
"Produz uma tupla de ``(fieldname, value)`` para cada campo em ``node."
"_fields`` que esteja presente em *node*."

#: ../../library/ast.rst:1671
msgid ""
"Yield all direct child nodes of *node*, that is, all fields that are nodes "
"and all items of fields that are lists of nodes."
msgstr ""
"Produz todos os nós filhos diretos de *node*, ou seja, todos os campos que "
"são nós e todos os itens de campos que são listas de nós."

#: ../../library/ast.rst:1677
msgid ""
"Recursively yield all descendant nodes in the tree starting at *node* "
"(including *node* itself), in no specified order.  This is useful if you "
"only want to modify nodes in place and don't care about the context."
msgstr ""
"Produz recursivamente todos os nós descendentes na árvore começando em "
"*node* (incluindo o próprio *node*), em nenhuma ordem especificada. Isso é "
"útil se você quiser apenas modificar nós no lugar e não se importar com o "
"contexto."

#: ../../library/ast.rst:1684
msgid ""
"A node visitor base class that walks the abstract syntax tree and calls a "
"visitor function for every node found.  This function may return a value "
"which is forwarded by the :meth:`visit` method."
msgstr ""
"Uma classe base de visitante de nó que percorre a árvore de sintaxe abstrata "
"e chama uma função de visitante para cada nó encontrado. Esta função pode "
"retornar um valor que é encaminhado pelo método :meth:`visit`."

#: ../../library/ast.rst:1688
msgid ""
"This class is meant to be subclassed, with the subclass adding visitor "
"methods."
msgstr ""
"Esta classe deve ser uma subclasse, com a subclasse adicionando métodos "
"visitantes."

#: ../../library/ast.rst:1693
msgid ""
"Visit a node.  The default implementation calls the method called :samp:"
"`self.visit_{classname}` where *classname* is the name of the node class, "
"or :meth:`generic_visit` if that method doesn't exist."
msgstr ""
"Visita um nó. A implementação padrão chama o método chamado :samp:`self."
"visit_{nomedaclasse}` sendo *nomedaclasse* o nome da classe do nó, ou :meth:"
"`generic_visit` se aquele método não existir."

#: ../../library/ast.rst:1699
msgid "This visitor calls :meth:`visit` on all children of the node."
msgstr "Este visitante chama :meth:`visit` em todos os filhos do nó."

#: ../../library/ast.rst:1701
msgid ""
"Note that child nodes of nodes that have a custom visitor method won't be "
"visited unless the visitor calls :meth:`generic_visit` or visits them itself."
msgstr ""
"Observe que nós filhos de nós que possuem um método de visitante "
"personalizado não serão visitados, a menos que o visitante chame :meth:"
"`generic_visit` ou os visite por conta própria."

#: ../../library/ast.rst:1705
msgid ""
"Don't use the :class:`NodeVisitor` if you want to apply changes to nodes "
"during traversal.  For this a special visitor exists (:class:"
"`NodeTransformer`) that allows modifications."
msgstr ""
"Não use o :class:`NodeVisitor` se você quiser aplicar mudanças nos nós "
"durante a travessia. Para isso existe um visitante especial (:class:"
"`NodeTransformer`) que permite modificações."

#: ../../library/ast.rst:1711
msgid ""
"Methods :meth:`visit_Num`, :meth:`visit_Str`, :meth:`visit_Bytes`, :meth:"
"`visit_NameConstant` and :meth:`visit_Ellipsis` are deprecated now and will "
"not be called in future Python versions.  Add the :meth:`visit_Constant` "
"method to handle all constant nodes."
msgstr ""
"Os métodos :meth:`visit_Num`, :meth:`visit_Str`, :meth:`visit_Bytes`, :meth:"
"`visit_NameConstant` e :meth:`visit_Ellipsis` estão agora descontinuados e "
"não serão chamados em futuras versões do Python. Adicione um método :meth:"
"`visit_Constant` para lidar com nós de constantes."

#: ../../library/ast.rst:1719
msgid ""
"A :class:`NodeVisitor` subclass that walks the abstract syntax tree and "
"allows modification of nodes."
msgstr ""
"A subclasse :class:`NodeVisitor` que percorre a árvore de sintaxe abstrata e "
"permite a modificação de nós."

#: ../../library/ast.rst:1722
msgid ""
"The :class:`NodeTransformer` will walk the AST and use the return value of "
"the visitor methods to replace or remove the old node.  If the return value "
"of the visitor method is ``None``, the node will be removed from its "
"location, otherwise it is replaced with the return value.  The return value "
"may be the original node in which case no replacement takes place."
msgstr ""
"O :class:`NodeTransformer` percorrerá a AST e usará o valor de retorno dos "
"métodos do visitante para substituir ou remover o nó antigo. Se o valor de "
"retorno do método visitante for ``None``, o nó será removido de seu local, "
"caso contrário, ele será substituído pelo valor de retorno. O valor de "
"retorno pode ser o nó original, caso em que não há substituição."

#: ../../library/ast.rst:1728
msgid ""
"Here is an example transformer that rewrites all occurrences of name lookups "
"(``foo``) to ``data['foo']``::"
msgstr ""
"Aqui está um exemplo de transformador que rescreve todas as ocorrências de "
"procuras por nome (``foo``) para ``data['foo']``::"

#: ../../library/ast.rst:1740
msgid ""
"Keep in mind that if the node you're operating on has child nodes you must "
"either transform the child nodes yourself or call the :meth:`generic_visit` "
"method for the node first."
msgstr ""
"Tenha em mente que, se o nó em que você está operando tiver nós filhos, você "
"deve transformar os nós filhos por conta própria ou chamar o método :meth:"
"`generic_visit` para o nó primeiro."

#: ../../library/ast.rst:1744
msgid ""
"For nodes that were part of a collection of statements (that applies to all "
"statement nodes), the visitor may also return a list of nodes rather than "
"just a single node."
msgstr ""
"Para nós que faziam parte de uma coleção de instruções (que se aplica a "
"todos os nós de instrução), o visitante também pode retornar uma lista de "
"nós em vez de apenas um único nó."

#: ../../library/ast.rst:1748
msgid ""
"If :class:`NodeTransformer` introduces new nodes (that weren't part of "
"original tree) without giving them location information (such as :attr:"
"`lineno`), :func:`fix_missing_locations` should be called with the new sub-"
"tree to recalculate the location information::"
msgstr ""
"Se :class:`NodeTransformer` introduz novos nós (que não faziam parte da "
"árvore original) sem fornecer informações de localização (como :attr:"
"`lineno`), :func:`fix_missing_locations` deve ser chamado com o novo "
"subárvore para recalcular as informações de localização::"

#: ../../library/ast.rst:1756
msgid "Usually you use the transformer like this::"
msgstr "Normalmente você usa o transformador assim::"

#: ../../library/ast.rst:1763
msgid ""
"Return a formatted dump of the tree in *node*.  This is mainly useful for "
"debugging purposes.  If *annotate_fields* is true (by default), the returned "
"string will show the names and the values for fields. If *annotate_fields* "
"is false, the result string will be more compact by omitting unambiguous "
"field names.  Attributes such as line numbers and column offsets are not "
"dumped by default.  If this is wanted, *include_attributes* can be set to "
"true."
msgstr ""
"Retorne um despejo formatado da árvore em *node*. Isso é útil principalmente "
"para fins de depuração. Se *annotate_fields* for verdadeiro (por padrão), a "
"sequência retornada mostrará os nomes e os valores para os campos. Se "
"*annotate_fields* for falso, a sequência de resultados será mais compacta ao "
"omitir nomes de campos não ambíguos. Atributos como números de linha e "
"deslocamentos de coluna não são despejados por padrão. Se isso for desejado, "
"*include_attributes* pode ser definido como verdadeiro."

#: ../../library/ast.rst:1771
msgid ""
"If *indent* is a non-negative integer or string, then the tree will be "
"pretty-printed with that indent level.  An indent level of 0, negative, or "
"``\"\"`` will only insert newlines.  ``None`` (the default) selects the "
"single line representation. Using a positive integer indent indents that "
"many spaces per level.  If *indent* is a string (such as ``\"\\t\"``), that "
"string is used to indent each level."
msgstr ""
"Se *indent* for um inteiro não negativo ou uma string, então a árvore terá "
"uma saída formatada com este nível de indentação. Um nível de indentação 0, "
"negativo ou ``\"\"`` apenas colocará novas linhas. ``None`` (o padrão) "
"seleciona a representação de uma única linha. Usando um inteiro positivo a "
"indentação terá alguns espaços por nível. Se *indent* for uma string (como "
"``\"\\t\"``), essa string será usada para indentar cada nível."

#: ../../library/ast.rst:1778
msgid "Added the *indent* option."
msgstr "Adicionada a opção *indent*."

#: ../../library/ast.rst:1785
msgid "Compiler Flags"
msgstr "Sinalizadores do compilador"

#: ../../library/ast.rst:1787
msgid ""
"The following flags may be passed to :func:`compile` in order to change "
"effects on the compilation of a program:"
msgstr ""
"Os seguintes sinalizadores podem ser passados para :func:`compile` para "
"alterar os efeitos na compilação de um programa:"

#: ../../library/ast.rst:1792
msgid ""
"Enables support for top-level ``await``, ``async for``, ``async with`` and "
"async comprehensions."
msgstr ""
"Habilita suporte para ``await``, ``async for``, ``async with`` e "
"compreensões assíncronas de nível superior."

#: ../../library/ast.rst:1799
msgid ""
"Generates and returns an abstract syntax tree instead of returning a "
"compiled code object."
msgstr ""
"Gera e retorna uma árvore de sintaxe abstrata em vez de retornar um objeto "
"de código compilado."

#: ../../library/ast.rst:1804
msgid ""
"Enables support for :pep:`484` and :pep:`526` style type comments (``# type: "
"<type>``, ``# type: ignore <stuff>``)."
msgstr ""
"Habilita suporte para comentários do tipo :pep:`484` e :pep:`526` (``# type: "
"<type>``, ``# type: ignore <stuff>``)."

#: ../../library/ast.rst:1813
msgid "Command-Line Usage"
msgstr "Uso da linha de comando"

#: ../../library/ast.rst:1817
msgid ""
"The :mod:`ast` module can be executed as a script from the command line. It "
"is as simple as:"
msgstr ""
"O módulo :mod:`ast` pode ser executado como um script na linha de comando. É "
"tão simples quanto:"

#: ../../library/ast.rst:1824
msgid "The following options are accepted:"
msgstr "As seguintes opções são aceitas:"

#: ../../library/ast.rst:1830
msgid "Show the help message and exit."
msgstr "Mostra a mensagem de ajuda e sai."

#: ../../library/ast.rst:1835
msgid ""
"Specify what kind of code must be compiled, like the *mode* argument in :"
"func:`parse`."
msgstr ""
"Especifica que tipo de código deve ser compilado, como o argumento *mode* "
"em :func:`parse`."

#: ../../library/ast.rst:1840
msgid "Don't parse type comments."
msgstr "Não analisa comentários de tipo."

#: ../../library/ast.rst:1844
msgid "Include attributes such as line numbers and column offsets."
msgstr "Inclui atributos como números de linha e deslocamentos de colunas."

#: ../../library/ast.rst:1849
msgid "Indentation of nodes in AST (number of spaces)."
msgstr "indentação de nós em AST (número de espaços)."

#: ../../library/ast.rst:1851
msgid ""
"If :file:`infile` is specified its contents are parsed to AST and dumped to "
"stdout.  Otherwise, the content is read from stdin."
msgstr ""
"Se :file:`infile` for especificado, seu conteúdo será analisado no AST e "
"despejado no stdout. Caso contrário, o conteúdo será lido em stdin."

#: ../../library/ast.rst:1857
msgid ""
"`Green Tree Snakes <https://greentreesnakes.readthedocs.io/>`_, an external "
"documentation resource, has good details on working with Python ASTs."
msgstr ""
"`Green Tree Snakes <https://greentreesnakes.readthedocs.io/>`_, um recurso "
"de documentação externo, possui bons detalhes sobre trabalhar com ASTs do "
"Python."

#: ../../library/ast.rst:1860
msgid ""
"`ASTTokens <https://asttokens.readthedocs.io/en/latest/user-guide.html>`_ "
"annotates Python ASTs with the positions of tokens and text in the source "
"code that generated them. This is helpful for tools that make source code "
"transformations."
msgstr ""
"`ASTTokens <https://asttokens.readthedocs.io/en/latest/user-guide.html>`_ "
"anota ASTs do Python com as posições de tokens e texto no código-fonte que "
"as gerou. Isso é útil para ferramentas que fazem transformações de código-"
"fonte."

#: ../../library/ast.rst:1865
msgid ""
"`leoAst.py <http://leoeditor.com/appendices.html#leoast-py>`_ unifies the "
"token-based and parse-tree-based views of python programs by inserting two-"
"way links between tokens and ast nodes."
msgstr ""

#: ../../library/ast.rst:1869
msgid ""
"`LibCST <https://libcst.readthedocs.io/>`_ parses code as a Concrete Syntax "
"Tree that looks like an ast tree and keeps all formatting details. It's "
"useful for building automated refactoring (codemod) applications and linters."
msgstr ""
"`LibCST <https://libcst.readthedocs.io/>`_ analisa o código como uma árvore "
"de sintaxe concreta que se parece com uma árvore ast e mantém todos os "
"detalhes de formatação. É útil para construir linters e aplicações de "
"refatoração automatizada (codemod)."

#: ../../library/ast.rst:1874
msgid ""
"`Parso <https://parso.readthedocs.io>`_ is a Python parser that supports "
"error recovery and round-trip parsing for different Python versions (in "
"multiple Python versions). Parso is also able to list multiple syntax errors "
"in your python file."
msgstr ""
