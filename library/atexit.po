# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-08 14:48+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/atexit.rst:2
msgid ":mod:`!atexit` --- Exit handlers"
msgstr ":mod:`!atexit` --- Manipuladores de saída"

#: ../../library/atexit.rst:12
msgid ""
"The :mod:`atexit` module defines functions to register and unregister "
"cleanup functions.  Functions thus registered are automatically executed "
"upon normal interpreter termination.  :mod:`atexit` runs these functions in "
"the *reverse* order in which they were registered; if you register ``A``, "
"``B``, and ``C``, at interpreter termination time they will be run in the "
"order ``C``, ``B``, ``A``."
msgstr ""
"O módulo :mod:`atexit` define funções para registrar e cancelar o registro "
"de funções de limpeza. As funções assim registradas são executadas "
"automaticamente após a conclusão normal do interpretador. O módulo :mod:"
"`atexit` executa essas funções na ordem *reversa* na qual foram registradas; "
"se você inscrever ``A``, ``B`` e ``C``, no momento do término do "
"interpretador, eles serão executados na ordem ``C``, ``B``, ``A`` ."

#: ../../library/atexit.rst:19
msgid ""
"**Note:** The functions registered via this module are not called when the "
"program is killed by a signal not handled by Python, when a Python fatal "
"internal error is detected, or when :func:`os._exit` is called."
msgstr ""
"**Nota:** As funções registradas através deste módulo não são invocadas "
"quando o programa é morto por um sinal não tratado pelo Python, quando um "
"erro interno fatal do Python é detectado ou quando a função :func:`os._exit` "
"é invocada."

#: ../../library/atexit.rst:23
msgid ""
"**Note:** The effect of registering or unregistering functions from within a "
"cleanup function is undefined."
msgstr ""
"**Nota:** O efeito de registrar ou cancelar o registro de funções dentro de "
"uma função de limpeza é indefinido."

#: ../../library/atexit.rst:26
msgid ""
"When used with C-API subinterpreters, registered functions are local to the "
"interpreter they were registered in."
msgstr ""
"Quando usadas com os subinterpretadores de C-API, as funções registradas são "
"locais para o interpretador em que foram registradas."

#: ../../library/atexit.rst:32
msgid ""
"Register *func* as a function to be executed at termination.  Any optional "
"arguments that are to be passed to *func* must be passed as arguments to :"
"func:`register`.  It is possible to register the same function and arguments "
"more than once."
msgstr ""
"Registre *func* como uma função a ser executada no término. Qualquer o "
"argumento opcional que deve ser passado para *func* for passado como "
"argumento para :func:`register`. É possível registrar mais ou menos a mesma "
"função e argumentos."

#: ../../library/atexit.rst:37
msgid ""
"At normal program termination (for instance, if :func:`sys.exit` is called "
"or the main module's execution completes), all functions registered are "
"called in last in, first out order.  The assumption is that lower level "
"modules will normally be imported before higher level modules and thus must "
"be cleaned up later."
msgstr ""
"Na terminação normal do programa (por exemplo, se :func:`sys.exit` for "
"chamado ou a execução do módulo principal for concluída), todas as funções "
"registradas serão chamadas por último, pela primeira ordem. A suposição é "
"que os módulos de nível inferior normalmente serão importados antes dos "
"módulos de nível mais alto e, portanto, devem ser limpos posteriormente."

#: ../../library/atexit.rst:43
msgid ""
"If an exception is raised during execution of the exit handlers, a traceback "
"is printed (unless :exc:`SystemExit` is raised) and the exception "
"information is saved.  After all exit handlers have had a chance to run, the "
"last exception to be raised is re-raised."
msgstr ""
"Se uma exceção é levantada durante a execução dos manipuladores de saída, um "
"traceback é impresso (a menos que :exc:`SystemExit` seja levantada) e as "
"informações de exceção sejam salvas. Depois de todos os manipuladores de "
"saída terem tido a chance de executar a última exceção a ser levantada, é "
"levantada novamente."

#: ../../library/atexit.rst:48
msgid ""
"This function returns *func*, which makes it possible to use it as a "
"decorator."
msgstr ""
"Esta função retorna *func*, o que torna possível usá-la como um decorador."

#: ../../library/atexit.rst:52
msgid ""
"Starting new threads or calling :func:`os.fork` from a registered function "
"can lead to race condition between the main Python runtime thread freeing "
"thread states while internal :mod:`threading` routines or the new process "
"try to use that state. This can lead to crashes rather than clean shutdown."
msgstr ""
"Iniciar novas threads ou chamar :func:`os.fork` de uma função registrada "
"pode levar a uma condição de corrida entre os estados de thread de liberação "
"de thread principal do tempo de execução do Python enquanto as rotinas "
"internas :mod:`threading` ou o novo processo tentam usar esse estado. Isso "
"pode levar a travamentos em vez de desligamento normal."

#: ../../library/atexit.rst:58
msgid ""
"Attempts to start a new thread or :func:`os.fork` a new process in a "
"registered function now leads to :exc:`RuntimeError`."
msgstr ""
"Tentativas de iniciar uma nova thread ou :func:`os.fork` um novo processo em "
"uma função registrada agora leva a :exc:`RuntimeError`."

#: ../../library/atexit.rst:64
msgid ""
"Remove *func* from the list of functions to be run at interpreter shutdown. :"
"func:`unregister` silently does nothing if *func* was not previously "
"registered.  If *func* has been registered more than once, every occurrence "
"of that function in the :mod:`atexit` call stack will be removed.  Equality "
"comparisons (``==``) are used internally during unregistration, so function "
"references do not need to have matching identities."
msgstr ""
"Remove *func* da lista de funções a serem executadas no desligamento do "
"interpretador. :func:`unregister` silenciosamente não faz nada se *func* não "
"foi registrado anteriormente. Se *func* foi registrado mais de uma vez, cada "
"ocorrência dessa função na pilha de chamada :mod:`atexit` será removida. "
"Comparações de igualdade (``==``) são usadas internamente durante o "
"cancelamento do registro, portanto, as referências de função não precisam "
"ter identidades correspondentes."

#: ../../library/atexit.rst:74
msgid "Module :mod:`readline`"
msgstr "Módulo :mod:`readline`"

#: ../../library/atexit.rst:75
msgid ""
"Useful example of :mod:`atexit` to read and write :mod:`readline` history "
"files."
msgstr ""
"Exemplo útil de :mod:`atexit` para ler e escrever arquivos de histórico de :"
"mod:`readline`."

#: ../../library/atexit.rst:82
msgid ":mod:`atexit` Example"
msgstr "Exemplo do :mod:`atexit`"

#: ../../library/atexit.rst:84
msgid ""
"The following simple example demonstrates how a module can initialize a "
"counter from a file when it is imported and save the counter's updated value "
"automatically when the program terminates without relying on the application "
"making an explicit call into this module at termination. ::"
msgstr ""
"O exemplo simples a seguir demonstra como um módulo pode inicializar um "
"contador de um arquivo quando ele é importado e salvar automaticamente o "
"valor atualizado do contador quando o programa termina, sem depender que a "
"aplicação faça uma chamada explícita nesse módulo na finalização. ::"

#: ../../library/atexit.rst:89
msgid ""
"try:\n"
"    with open('counterfile') as infile:\n"
"        _count = int(infile.read())\n"
"except FileNotFoundError:\n"
"    _count = 0\n"
"\n"
"def incrcounter(n):\n"
"    global _count\n"
"    _count = _count + n\n"
"\n"
"def savecounter():\n"
"    with open('counterfile', 'w') as outfile:\n"
"        outfile.write('%d' % _count)\n"
"\n"
"import atexit\n"
"\n"
"atexit.register(savecounter)"
msgstr ""

#: ../../library/atexit.rst:107
msgid ""
"Positional and keyword arguments may also be passed to :func:`register` to "
"be passed along to the registered function when it is called::"
msgstr ""
"Os argumentos posicional e de palavra reservada também podem ser passados "
"para :func:`register` para ser passada para a função registrada quando é "
"chamada ::"

#: ../../library/atexit.rst:110
msgid ""
"def goodbye(name, adjective):\n"
"    print('Goodbye %s, it was %s to meet you.' % (name, adjective))\n"
"\n"
"import atexit\n"
"\n"
"atexit.register(goodbye, 'Donny', 'nice')\n"
"# or:\n"
"atexit.register(goodbye, adjective='nice', name='Donny')"
msgstr ""

#: ../../library/atexit.rst:119
msgid "Usage as a :term:`decorator`::"
msgstr "Utilizado como um :term:`decorador`::"

#: ../../library/atexit.rst:121
msgid ""
"import atexit\n"
"\n"
"@atexit.register\n"
"def goodbye():\n"
"    print('You are now leaving the Python sector.')"
msgstr ""

#: ../../library/atexit.rst:127
msgid "This only works with functions that can be called without arguments."
msgstr "Isso só funciona com funções que podem ser invocadas sem argumentos."
