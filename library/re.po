# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Risaffi <erikrisaffi@gmail.com>, 2018
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2020-02-29 09:29+0000\n"
"Last-Translator: Marco Rougeth <marco@rougeth.com>\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/"
"python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../library/re.rst:3
msgid ":mod:`re` --- Regular expression operations"
msgstr ":mod:`re` --- Operações com expressões regulares"

#: ../../library/re.rst:11
msgid ""
"This module provides regular expression matching operations similar to those "
"found in Perl. Both patterns and strings to be searched can be Unicode "
"strings as well as 8-bit strings."
msgstr ""

#: ../../library/re.rst:15
msgid ""
"Regular expressions use the backslash character (``'\\'``) to indicate "
"special forms or to allow special characters to be used without invoking "
"their special meaning.  This collides with Python's usage of the same "
"character for the same purpose in string literals; for example, to match a "
"literal backslash, one might have to write ``'\\\\\\\\'`` as the pattern "
"string, because the regular expression must be ``\\\\``, and each backslash "
"must be expressed as ``\\\\`` inside a regular Python string literal."
msgstr ""

#: ../../library/re.rst:24
msgid ""
"The solution is to use Python's raw string notation for regular expression "
"patterns; backslashes are not handled in any special way in a string literal "
"prefixed with ``'r'``.  So ``r\"\\n\"`` is a two-character string containing "
"``'\\'`` and ``'n'``, while ``\"\\n\"`` is a one-character string containing "
"a newline.  Usually patterns will be expressed in Python code using this raw "
"string notation."
msgstr ""
"A solução é usar a notação de string bruta do Python para padrões de "
"expressão regular; as contrabarras não são tratadas de nenhuma maneira "
"especial em uma string literal com o prefixo ``'r'``. Portanto, ``r\"\\n\"`` "
"é uma string de dois caracteres contendo ``'\\'`` e ``'n'``, enquanto "
"``\"\\n\"`` é uma string de um caractere contendo um nova linha. "
"Normalmente, os padrões serão expressos em código Python usando esta notação "
"de string bruta."

#: ../../library/re.rst:31
msgid ""
"It is important to note that most regular expression operations are "
"available as module-level functions and :class:`RegexObject` methods.  The "
"functions are shortcuts that don't require you to compile a regex object "
"first, but miss some fine-tuning parameters."
msgstr ""

#: ../../library/re.rst:38
msgid ""
"The third-party `regex <https://pypi.org/project/regex/>`_ module, which has "
"an API compatible with the standard library :mod:`re` module, but offers "
"additional functionality and a more thorough Unicode support."
msgstr ""
"O módulo `regex <https://pypi.org/project/regex/>`_ de terceiros, que possui "
"uma API compatível com o módulo da biblioteca padrão :mod:`re`, mas oferece "
"funcionalidades adicionais e um suporte mais completo a Unicode."

#: ../../library/re.rst:46
msgid "Regular Expression Syntax"
msgstr "Sintaxe de expressão regular"

#: ../../library/re.rst:48
msgid ""
"A regular expression (or RE) specifies a set of strings that matches it; the "
"functions in this module let you check if a particular string matches a "
"given regular expression (or if a given regular expression matches a "
"particular string, which comes down to the same thing)."
msgstr ""
"Uma expressão regular (ou ER) especifica um conjunto de strings que "
"corresponde a ela; as funções neste módulo permitem que você verifique se "
"uma determinada string corresponde a uma determinada expressão regular (ou "
"se uma determinada expressão regular corresponde a uma determinada string, o "
"que resulta na mesma coisa)."

#: ../../library/re.rst:53
msgid ""
"Regular expressions can be concatenated to form new regular expressions; if "
"*A* and *B* are both regular expressions, then *AB* is also a regular "
"expression. In general, if a string *p* matches *A* and another string *q* "
"matches *B*, the string *pq* will match AB.  This holds unless *A* or *B* "
"contain low precedence operations; boundary conditions between *A* and *B*; "
"or have numbered group references.  Thus, complex expressions can easily be "
"constructed from simpler primitive expressions like the ones described "
"here.  For details of the theory and implementation of regular expressions, "
"consult the Friedl book referenced above, or almost any textbook about "
"compiler construction."
msgstr ""

#: ../../library/re.rst:63
msgid ""
"A brief explanation of the format of regular expressions follows.  For "
"further information and a gentler presentation, consult the :ref:`regex-"
"howto`."
msgstr ""
"Segue uma breve explicação do formato das expressões regulares. Para mais "
"informações e uma apresentação mais suave, consulte o :ref:`regex-howto`."

#: ../../library/re.rst:66
msgid ""
"Regular expressions can contain both special and ordinary characters. Most "
"ordinary characters, like ``'A'``, ``'a'``, or ``'0'``, are the simplest "
"regular expressions; they simply match themselves.  You can concatenate "
"ordinary characters, so ``last`` matches the string ``'last'``.  (In the "
"rest of this section, we'll write RE's in ``this special style``, usually "
"without quotes, and strings to be matched ``'in single quotes'``.)"
msgstr ""
"As expressões regulares podem conter caracteres especiais e comuns. A "
"maioria dos caracteres comuns, como ``'A'``, ``'a'`` ou ``'0'``, são as "
"expressões regulares mais simples; eles simplesmente se combinam. Você pode "
"concatenar caracteres comuns, de forma que ``último`` corresponda à string "
"``'último'``. (No restante desta seção, escreveremos ERs ``neste estilo "
"especial``, geralmente sem aspas, e strings para serem correspondidas "
"``'entre aspas simples'``.)"

#: ../../library/re.rst:73
msgid ""
"Some characters, like ``'|'`` or ``'('``, are special. Special characters "
"either stand for classes of ordinary characters, or affect how the regular "
"expressions around them are interpreted. Regular expression pattern strings "
"may not contain null bytes, but can specify the null byte using the "
"``\\number`` notation, e.g., ``'\\x00'``."
msgstr ""

#: ../../library/re.rst:79
msgid ""
"Repetition qualifiers (``*``, ``+``, ``?``, ``{m,n}``, etc) cannot be "
"directly nested. This avoids ambiguity with the non-greedy modifier suffix "
"``?``, and with other modifiers in other implementations. To apply a second "
"repetition to an inner repetition, parentheses may be used. For example, the "
"expression ``(?:a{6})*`` matches any multiple of six ``'a'`` characters."
msgstr ""
"Qualificadores de repetição (``*``, ``+``, ``?``, ``{m,n}`` etc) não podem "
"ser aninhados diretamente. Isso evita ambiguidade com o sufixo modificador "
"não guloso ``?``, E com outros modificadores em outras implementações. Para "
"aplicar uma segunda repetição a uma repetição interna, podem ser usados "
"parênteses. Por exemplo, a expressão ``(?:a{6})*`` corresponde a qualquer "
"múltiplo de seis caracteres ``'a'``."

#: ../../library/re.rst:86
msgid "The special characters are:"
msgstr "Os caracteres especiais são:"

#: ../../library/re.rst:91
msgid "``'.'``"
msgstr ""

#: ../../library/re.rst:89
msgid ""
"(Dot.)  In the default mode, this matches any character except a newline.  "
"If the :const:`DOTALL` flag has been specified, this matches any character "
"including a newline."
msgstr ""
"(Ponto.) No modo padrão, corresponde a qualquer caractere, exceto uma nova "
"linha. Se o sinalizador :const:`DOTALL` foi especificado, ele corresponde a "
"qualquer caractere, incluindo uma nova linha."

#: ../../library/re.rst:95
msgid "``'^'``"
msgstr "``'^'``"

#: ../../library/re.rst:94
msgid ""
"(Caret.)  Matches the start of the string, and in :const:`MULTILINE` mode "
"also matches immediately after each newline."
msgstr ""
"(Sinal de circunflexo.) Corresponde ao início da string, e no modo :const:"
"`MULTILINE` também corresponde imediatamente após cada nova linha."

#: ../../library/re.rst:104
msgid "``'$'``"
msgstr ""

#: ../../library/re.rst:98
msgid ""
"Matches the end of the string or just before the newline at the end of the "
"string, and in :const:`MULTILINE` mode also matches before a newline.  "
"``foo`` matches both 'foo' and 'foobar', while the regular expression "
"``foo$`` matches only 'foo'.  More interestingly, searching for ``foo.$`` in "
"``'foo1\\nfoo2\\n'`` matches 'foo2' normally, but 'foo1' in :const:"
"`MULTILINE` mode; searching for a single ``$`` in ``'foo\\n'`` will find two "
"(empty) matches: one just before the newline, and one at the end of the "
"string."
msgstr ""
"Corresponde ao final da string ou logo antes da nova linha no final da "
"string, e no modo :const:`MULTILINE` também corresponde antes de uma nova "
"linha. ``foo`` corresponde a 'foo' e 'foobar', enquanto a expressão regular "
"``foo$`` corresponde apenas a 'foo'. Mais interessante, pesquisar por ``foo."
"$`` em ``'foo1\\nfoo2\\n'`` corresponde a 'foo2' normalmente, mas 'foo1' no "
"modo :const:`MULTILINE`; procurando por um único ``$`` em ``'foo\\n'`` "
"encontrará duas correspondências (vazias): uma logo antes da nova linha e "
"uma no final da string."

#: ../../library/re.rst:109
msgid "``'*'``"
msgstr ""

#: ../../library/re.rst:107
msgid ""
"Causes the resulting RE to match 0 or more repetitions of the preceding RE, "
"as many repetitions as are possible.  ``ab*`` will match 'a', 'ab', or 'a' "
"followed by any number of 'b's."
msgstr ""
"Faz com que a ER resultante corresponda a 0 ou mais repetições da ER "
"anterior, tantas repetições quantas forem possíveis. ``ab*`` corresponderá a "
"'a', 'ab' ou 'a' seguido por qualquer número de 'b's."

#: ../../library/re.rst:114
msgid "``'+'``"
msgstr "``'+'``"

#: ../../library/re.rst:112
msgid ""
"Causes the resulting RE to match 1 or more repetitions of the preceding RE. "
"``ab+`` will match 'a' followed by any non-zero number of 'b's; it will not "
"match just 'a'."
msgstr ""
"Faz com que a ER resultante corresponda a 1 ou mais repetições da ER "
"anterior. ``ab+`` irá corresponder a 'a' seguido por qualquer número "
"diferente de zero de 'b's; não corresponderá apenas a 'a'."

#: ../../library/re.rst:118
msgid "``'?'``"
msgstr ""

#: ../../library/re.rst:117
msgid ""
"Causes the resulting RE to match 0 or 1 repetitions of the preceding RE. "
"``ab?`` will match either 'a' or 'ab'."
msgstr ""
"Faz com que a ER resultante corresponda a 0 ou 1 repetição da ER anterior. "
"``ab?`` irá corresponder a 'a' ou 'ab'."

#: ../../library/re.rst:127
msgid "``*?``, ``+?``, ``??``"
msgstr "``*?``, ``+?``, ``??``"

#: ../../library/re.rst:121
msgid ""
"The ``'*'``, ``'+'``, and ``'?'`` qualifiers are all :dfn:`greedy`; they "
"match as much text as possible.  Sometimes this behaviour isn't desired; if "
"the RE ``<.*>`` is matched against ``<a> b <c>``, it will match the entire "
"string, and not just ``<a>``.  Adding ``?`` after the qualifier makes it "
"perform the match in :dfn:`non-greedy` or :dfn:`minimal` fashion; as *few* "
"characters as possible will be matched.  Using the RE ``<.*?>`` will match "
"only ``<a>``."
msgstr ""

#: ../../library/re.rst:132
msgid "``{m}``"
msgstr "``{m}``"

#: ../../library/re.rst:130
msgid ""
"Specifies that exactly *m* copies of the previous RE should be matched; "
"fewer matches cause the entire RE not to match.  For example, ``a{6}`` will "
"match exactly six ``'a'`` characters, but not five."
msgstr ""
"Especifica que exatamente *m* cópias da ER anterior devem ser "
"correspondidas; menos correspondências fazem com que toda a ER não seja "
"correspondida. Por exemplo, ``a{6}`` irá corresponder exatamente a seis "
"caracteres ``'a'``, mas não a cinco."

#: ../../library/re.rst:141
msgid "``{m,n}``"
msgstr "``{m,n}``"

#: ../../library/re.rst:135
msgid ""
"Causes the resulting RE to match from *m* to *n* repetitions of the "
"preceding RE, attempting to match as many repetitions as possible.  For "
"example, ``a{3,5}`` will match from 3 to 5 ``'a'`` characters.  Omitting *m* "
"specifies a lower bound of zero,  and omitting *n* specifies an infinite "
"upper bound.  As an example, ``a{4,}b`` will match ``aaaab`` or a thousand "
"``'a'`` characters followed by a ``b``, but not ``aaab``. The comma may not "
"be omitted or the modifier would be confused with the previously described "
"form."
msgstr ""

#: ../../library/re.rst:148
msgid "``{m,n}?``"
msgstr "``{m,n}?``"

#: ../../library/re.rst:144
msgid ""
"Causes the resulting RE to match from *m* to *n* repetitions of the "
"preceding RE, attempting to match as *few* repetitions as possible.  This is "
"the non-greedy version of the previous qualifier.  For example, on the 6-"
"character string ``'aaaaaa'``, ``a{3,5}`` will match 5 ``'a'`` characters, "
"while ``a{3,5}?`` will only match 3 characters."
msgstr ""
"Faz com que a ER resultante corresponda de *m* a *n* repetições da ER "
"precedente, tentando corresponder o mínimo de *poucas* repetições possível. "
"Esta é a versão não gananciosa do qualificador anterior. Por exemplo, na "
"string de 6 caracteres ``'aaaaaa'``, ``a{3,5}`` irá corresponder a 5 "
"caracteres ``'a'``, enquanto ``a{3,5}?`` corresponderá apenas a 3 caracteres."

#: ../../library/re.rst:161
msgid "``'\\'``"
msgstr ""

#: ../../library/re.rst:151
msgid ""
"Either escapes special characters (permitting you to match characters like "
"``'*'``, ``'?'``, and so forth), or signals a special sequence; special "
"sequences are discussed below."
msgstr ""
"Ou escapa caracteres especiais (permitindo que você corresponde a caracteres "
"como ``'*'``, ``'?'`` e assim por diante), ou sinaliza uma sequência "
"especial; sequências especiais são discutidas abaixo."

#: ../../library/re.rst:155
msgid ""
"If you're not using a raw string to express the pattern, remember that "
"Python also uses the backslash as an escape sequence in string literals; if "
"the escape sequence isn't recognized by Python's parser, the backslash and "
"subsequent character are included in the resulting string.  However, if "
"Python would recognize the resulting sequence, the backslash should be "
"repeated twice.  This is complicated and hard to understand, so it's highly "
"recommended that you use raw strings for all but the simplest expressions."
msgstr ""
"Se você não estiver usando uma string raw para expressar o padrão, lembre-se "
"de que o Python também usa a contrabarra como uma sequência de escape em "
"literais de string; se a sequência de escape não for reconhecida pelo "
"analisador sintático do Python, a contrabarra e o caractere subsequente "
"serão incluídos na string resultante. No entanto, se o Python reconhecer a "
"sequência resultante, a contrabarra deve ser repetida duas vezes. Isso é "
"complicado e difícil de entender, portanto, é altamente recomendável que "
"você use strings raw para todas as expressões, exceto as mais simples."

#: ../../library/re.rst:193
msgid "``[]``"
msgstr "``[]``"

#: ../../library/re.rst:164
msgid "Used to indicate a set of characters.  In a set:"
msgstr "Usado para indicar um conjunto de caracteres. Em um conjunto:"

#: ../../library/re.rst:166
msgid ""
"Characters can be listed individually, e.g. ``[amk]`` will match ``'a'``, "
"``'m'``, or ``'k'``."
msgstr ""
"Caracteres podem ser listados individualmente, por exemplo, ``[amk]`` vai "
"corresponder a ``'a'``, ``'m'`` ou ``'k'``."

#: ../../library/re.rst:169
msgid ""
"Ranges of characters can be indicated by giving two characters and "
"separating them by a ``'-'``, for example ``[a-z]`` will match any lowercase "
"ASCII letter, ``[0-5][0-9]`` will match all the two-digits numbers from "
"``00`` to ``59``, and ``[0-9A-Fa-f]`` will match any hexadecimal digit.  If "
"``-`` is escaped (e.g. ``[a\\-z]``) or if it's placed as the first or last "
"character (e.g. ``[a-]``), it will match a literal ``'-'``."
msgstr ""

#: ../../library/re.rst:176
msgid ""
"Special characters lose their special meaning inside sets.  For example, "
"``[(+*)]`` will match any of the literal characters ``'('``, ``'+'``, "
"``'*'``, or ``')'``."
msgstr ""
"Os caracteres especiais perdem seu significado especial dentro dos "
"conjuntos. Por exemplo, ``[(+*)]`` corresponderá a qualquer um dos "
"caracteres literais ``'('``, ``'+'``, ``'*'`` ou ``')'``."

#: ../../library/re.rst:180
msgid ""
"Character classes such as ``\\w`` or ``\\S`` (defined below) are also "
"accepted inside a set, although the characters they match depends on "
"whether :const:`LOCALE` or  :const:`UNICODE` mode is in force."
msgstr ""

#: ../../library/re.rst:184
msgid ""
"Characters that are not within a range can be matched by :dfn:"
"`complementing` the set.  If the first character of the set is ``'^'``, all "
"the characters that are *not* in the set will be matched.  For example, "
"``[^5]`` will match any character except ``'5'``, and ``[^^]`` will match "
"any character except ``'^'``.  ``^`` has no special meaning if it's not the "
"first character in the set."
msgstr ""
"Os caracteres que não estão dentro de um intervalo podem ser correspondidos :"
"dfn:`complementando` o conjunto. Se o primeiro caractere do conjunto for "
"``'^'``, todos os caracteres que *não* estiverem no conjunto serão "
"correspondidos. Por exemplo, ``[^5]`` irá corresponder a qualquer caractere "
"exceto ``'5'``, e ``[^^]`` irá corresponder a qualquer caractere exceto "
"``'^'``. ``^`` não tem nenhum significado especial se não for o primeiro "
"caractere do conjunto."

#: ../../library/re.rst:191
msgid ""
"To match a literal ``']'`` inside a set, precede it with a backslash, or "
"place it at the beginning of the set.  For example, both ``[()[\\]{}]`` and "
"``[]()[{}]`` will both match a parenthesis."
msgstr ""
"Para corresponder a um ``']'`` literal dentro de um conjunto, preceda-o com "
"uma contrabarra ou coloque-o no início do conjunto. Por exemplo, ``[()[\\]"
"{}]`` e ``[]()[{}]`` ambos corresponderão a um parêntese."

#: ../../library/re.rst:204
msgid "``'|'``"
msgstr "``'|'``"

#: ../../library/re.rst:196
msgid ""
"``A|B``, where A and B can be arbitrary REs, creates a regular expression "
"that will match either A or B.  An arbitrary number of REs can be separated "
"by the ``'|'`` in this way.  This can be used inside groups (see below) as "
"well.  As the target string is scanned, REs separated by ``'|'`` are tried "
"from left to right. When one pattern completely matches, that branch is "
"accepted. This means that once ``A`` matches, ``B`` will not be tested "
"further, even if it would produce a longer overall match.  In other words, "
"the ``'|'`` operator is never greedy.  To match a literal ``'|'``, use ``\\|"
"``, or enclose it inside a character class, as in ``[|]``."
msgstr ""

#: ../../library/re.rst:211
msgid "``(...)``"
msgstr "``(...)``"

#: ../../library/re.rst:207
msgid ""
"Matches whatever regular expression is inside the parentheses, and indicates "
"the start and end of a group; the contents of a group can be retrieved after "
"a match has been performed, and can be matched later in the string with the "
"``\\number`` special sequence, described below.  To match the literals "
"``'('`` or ``')'``, use ``\\(`` or ``\\)``, or enclose them inside a "
"character class: ``[(] [)]``."
msgstr ""

#: ../../library/re.rst:218
msgid "``(?...)``"
msgstr "``(?...)``"

#: ../../library/re.rst:214
msgid ""
"This is an extension notation (a ``'?'`` following a ``'('`` is not "
"meaningful otherwise).  The first character after the ``'?'`` determines "
"what the meaning and further syntax of the construct is. Extensions usually "
"do not create a new group; ``(?P<name>...)`` is the only exception to this "
"rule. Following are the currently supported extensions."
msgstr ""
"Esta é uma notação de extensão (um ``'?'`` seguindo um ``'('`` não é "
"significativo de outra forma). O primeiro caractere após o ``'?'`` determina "
"qual o significado e sintaxe posterior do é. As extensões normalmente não "
"criam um novo grupo; ``(?P<name>...)`` é a única exceção a esta regra. A "
"seguir estão as extensões atualmente suportadas."

#: ../../library/re.rst:235
msgid "``(?iLmsux)``"
msgstr ""

#: ../../library/re.rst:221
msgid ""
"(One or more letters from the set ``'i'``, ``'L'``, ``'m'``, ``'s'``, "
"``'u'``, ``'x'``.)  The group matches the empty string; the letters set the "
"corresponding flags: :const:`re.I` (ignore case), :const:`re.L` (locale "
"dependent), :const:`re.M` (multi-line), :const:`re.S` (dot matches all), :"
"const:`re.U` (Unicode dependent), and :const:`re.X` (verbose), for the "
"entire regular expression. (The flags are described in :ref:`contents-of-"
"module-re`.) This is useful if you wish to include the flags as part of the "
"regular expression, instead of passing a *flag* argument to the :func:`re."
"compile` function."
msgstr ""

#: ../../library/re.rst:232
msgid ""
"Note that the ``(?x)`` flag changes how the expression is parsed. It should "
"be used first in the expression string, or after one or more whitespace "
"characters. If there are non-whitespace characters before the flag, the "
"results are undefined."
msgstr ""

#: ../../library/re.rst:241
msgid "``(?:...)``"
msgstr "``(?:...)``"

#: ../../library/re.rst:238
msgid ""
"A non-capturing version of regular parentheses.  Matches whatever regular "
"expression is inside the parentheses, but the substring matched by the group "
"*cannot* be retrieved after performing a match or referenced later in the "
"pattern."
msgstr ""
"Uma versão sem captura de parênteses regulares. Corresponde a qualquer "
"expressão regular que esteja entre parênteses, mas a substring correspondida "
"pelo grupo *não pode* ser recuperada após realizar uma correspondência ou "
"referenciada posteriormente no padrão."

#: ../../library/re.rst:266
msgid "``(?P<name>...)``"
msgstr "``(?P<name>...)``"

#: ../../library/re.rst:244
msgid ""
"Similar to regular parentheses, but the substring matched by the group is "
"accessible via the symbolic group name *name*.  Group names must be valid "
"Python identifiers, and each group name must be defined only once within a "
"regular expression.  A symbolic group is also a numbered group, just as if "
"the group were not named."
msgstr ""
"Semelhante aos parênteses regulares, mas a substring correspondida pelo "
"grupo é acessível por meio do nome de grupo simbólico *name*. Os nomes de "
"grupo devem ser identificadores Python válidos e cada nome de grupo deve ser "
"definido apenas uma vez em uma expressão regular. Um grupo simbólico também "
"é um grupo numerado, como se o grupo não tivesse um nome."

#: ../../library/re.rst:250
msgid ""
"Named groups can be referenced in three contexts.  If the pattern is ``(?"
"P<quote>['\"]).*?(?P=quote)`` (i.e. matching a string quoted with either "
"single or double quotes):"
msgstr ""
"Grupos nomeados podem ser referenciados em três contextos. Se o padrão for "
"``(?P<quote>['\"]).*?(?P=quote)`` (ou seja, corresponder a uma string entre "
"aspas simples ou duplas):"

#: ../../library/re.rst:255
msgid "Context of reference to group \"quote\""
msgstr "Contexto de referência ao grupo \"quote\""

#: ../../library/re.rst:255
msgid "Ways to reference it"
msgstr "Formas de referenciá-lo"

#: ../../library/re.rst:257
msgid "in the same pattern itself"
msgstr "no mesmo padrão"

#: ../../library/re.rst:257
msgid "``(?P=quote)`` (as shown)"
msgstr "``(?P=quote)`` (como mostrado)"

#: ../../library/re.rst:258 ../../library/re.rst:265
msgid "``\\1``"
msgstr "``\\1``"

#: ../../library/re.rst:260
msgid "when processing match object ``m``"
msgstr ""

#: ../../library/re.rst:260
msgid "``m.group('quote')``"
msgstr "``m.group('quote')``"

#: ../../library/re.rst:261
msgid "``m.end('quote')`` (etc.)"
msgstr "``m.end('quote')`` (etc.)"

#: ../../library/re.rst:263
msgid "in a string passed to the ``repl`` argument of ``re.sub()``"
msgstr ""

#: ../../library/re.rst:263
msgid "``\\g<quote>``"
msgstr "``\\g<quote>``"

#: ../../library/re.rst:264
msgid "``\\g<1>``"
msgstr "``\\g<1>``"

#: ../../library/re.rst:270
msgid "``(?P=name)``"
msgstr "``(?P=name)``"

#: ../../library/re.rst:269
msgid ""
"A backreference to a named group; it matches whatever text was matched by "
"the earlier group named *name*."
msgstr ""
"Uma referência anterior a um grupo nomeado; corresponde a qualquer texto que "
"corresponda ao grupo anterior denominado *name*."

#: ../../library/re.rst:273
msgid "``(?#...)``"
msgstr "``(?#...)``"

#: ../../library/re.rst:273
msgid "A comment; the contents of the parentheses are simply ignored."
msgstr "Um comentário; o conteúdo dos parênteses é simplesmente ignorado."

#: ../../library/re.rst:278
msgid "``(?=...)``"
msgstr "``(?=...)``"

#: ../../library/re.rst:276
msgid ""
"Matches if ``...`` matches next, but doesn't consume any of the string.  "
"This is called a lookahead assertion.  For example, ``Isaac (?=Asimov)`` "
"will match ``'Isaac '`` only if it's followed by ``'Asimov'``."
msgstr ""

#: ../../library/re.rst:283
msgid "``(?!...)``"
msgstr "``(?!...)``"

#: ../../library/re.rst:281
msgid ""
"Matches if ``...`` doesn't match next.  This is a negative lookahead "
"assertion. For example, ``Isaac (?!Asimov)`` will match ``'Isaac '`` only if "
"it's *not* followed by ``'Asimov'``."
msgstr ""

#: ../../library/re.rst:307
msgid "``(?<=...)``"
msgstr "``(?<=...)``"

#: ../../library/re.rst:286
msgid ""
"Matches if the current position in the string is preceded by a match for "
"``...`` that ends at the current position.  This is called a :dfn:`positive "
"lookbehind assertion`. ``(?<=abc)def`` will find a match in ``abcdef``, "
"since the lookbehind will back up 3 characters and check if the contained "
"pattern matches. The contained pattern must only match strings of some fixed "
"length, meaning that ``abc`` or ``a|b`` are allowed, but ``a*`` and ``a{3,4}"
"`` are not.  Group references are not supported even if they match strings "
"of some fixed length. Note that patterns which start with positive "
"lookbehind assertions will not match at the beginning of the string being "
"searched; you will most likely want to use the :func:`search` function "
"rather than the :func:`match` function:"
msgstr ""

#: ../../library/re.rst:303
msgid "This example looks for a word following a hyphen:"
msgstr "Este exemplo procura por uma palavra logo após um hífen:"

#: ../../library/re.rst:315
msgid "``(?<!...)``"
msgstr "``(?<!...)``"

#: ../../library/re.rst:310
msgid ""
"Matches if the current position in the string is not preceded by a match for "
"``...``.  This is called a :dfn:`negative lookbehind assertion`.  Similar to "
"positive lookbehind assertions, the contained pattern must only match "
"strings of some fixed length and shouldn't contain group references. "
"Patterns which start with negative lookbehind assertions may match at the "
"beginning of the string being searched."
msgstr ""

#: ../../library/re.rst:324
msgid "``(?(id/name)yes-pattern|no-pattern)``"
msgstr "``(?(id/name)yes-pattern|no-pattern)``"

#: ../../library/re.rst:318
msgid ""
"Will try to match with ``yes-pattern`` if the group with given *id* or "
"*name* exists, and with ``no-pattern`` if it doesn't. ``no-pattern`` is "
"optional and can be omitted. For example,  ``(<)?(\\w+@\\w+(?:\\.\\w+)+)(?"
"(1)>)`` is a poor email matching pattern, which will match with "
"``'<user@host.com>'`` as well as ``'user@host.com'``, but not with "
"``'<user@host.com'``."
msgstr ""

#: ../../library/re.rst:326
msgid ""
"The special sequences consist of ``'\\'`` and a character from the list "
"below. If the ordinary character is not on the list, then the resulting RE "
"will match the second character.  For example, ``\\$`` matches the character "
"``'$'``."
msgstr ""

#: ../../library/re.rst:338
msgid "``\\number``"
msgstr "``\\number``"

#: ../../library/re.rst:331
msgid ""
"Matches the contents of the group of the same number.  Groups are numbered "
"starting from 1.  For example, ``(.+) \\1`` matches ``'the the'`` or ``'55 "
"55'``, but not ``'thethe'`` (note the space after the group).  This special "
"sequence can only be used to match one of the first 99 groups.  If the first "
"digit of *number* is 0, or *number* is 3 octal digits long, it will not be "
"interpreted as a group match, but as the character with octal value "
"*number*. Inside the ``'['`` and ``']'`` of a character class, all numeric "
"escapes are treated as characters."
msgstr ""
"Corresponde ao conteúdo do grupo de mesmo número. Os grupos são numerados a "
"partir de 1. Por exemplo, ``(.+) \\1`` corresponde a ``'de de'`` ou ``'55 "
"55'``, mas não ``'dede'`` (note o espaço após o grupo). Esta sequência "
"especial só pode ser usada para corresponder a um dos primeiros 99 grupos. "
"Se o primeiro dígito de *número* for 0, ou *número* tiver 3 dígitos octais "
"de comprimento, ele não será interpretado como uma correspondência de grupo, "
"mas como o caractere com *número* de valor octal. Dentro de ``'['`` e "
"``']'`` de uma classe de caracteres, todos os escapes numéricos são tratados "
"como caracteres."

#: ../../library/re.rst:341
msgid "``\\A``"
msgstr "``\\A``"

#: ../../library/re.rst:341
msgid "Matches only at the start of the string."
msgstr "Corresponde apenas ao início da string."

#: ../../library/re.rst:354
msgid "``\\b``"
msgstr "``\\b``"

#: ../../library/re.rst:344
msgid ""
"Matches the empty string, but only at the beginning or end of a word.  A "
"word is defined as a sequence of alphanumeric or underscore characters, so "
"the end of a word is indicated by whitespace or a non-alphanumeric, non-"
"underscore character. Note that formally, ``\\b`` is defined as the boundary "
"between a ``\\w`` and a ``\\W`` character (or vice versa), or between "
"``\\w`` and the beginning/end of the string, so the precise set of "
"characters deemed to be alphanumeric depends on the values of the "
"``UNICODE`` and ``LOCALE`` flags. For example, ``r'\\bfoo\\b'`` matches "
"``'foo'``, ``'foo.'``, ``'(foo)'``, ``'bar foo baz'`` but not ``'foobar'`` "
"or ``'foo3'``. Inside a character range, ``\\b`` represents the backspace "
"character, for compatibility with Python's string literals."
msgstr ""

#: ../../library/re.rst:361
msgid "``\\B``"
msgstr "``\\B``"

#: ../../library/re.rst:357
msgid ""
"Matches the empty string, but only when it is *not* at the beginning or end "
"of a word.  This means that ``r'py\\B'`` matches ``'python'``, ``'py3'``, "
"``'py2'``, but not ``'py'``, ``'py.'``, or ``'py!'``. ``\\B`` is just the "
"opposite of ``\\b``, so is also subject to the settings of ``LOCALE`` and "
"``UNICODE``."
msgstr ""

#: ../../library/re.rst:367
msgid "``\\d``"
msgstr "``\\d``"

#: ../../library/re.rst:364
msgid ""
"When the :const:`UNICODE` flag is not specified, matches any decimal digit; "
"this is equivalent to the set ``[0-9]``.  With :const:`UNICODE`, it will "
"match whatever is classified as a decimal digit in the Unicode character "
"properties database."
msgstr ""

#: ../../library/re.rst:373
msgid "``\\D``"
msgstr "``\\D``"

#: ../../library/re.rst:370
msgid ""
"When the :const:`UNICODE` flag is not specified, matches any non-digit "
"character; this is equivalent to the set  ``[^0-9]``.  With :const:"
"`UNICODE`, it will match  anything other than character marked as digits in "
"the Unicode character  properties database."
msgstr ""

#: ../../library/re.rst:381
msgid "``\\s``"
msgstr "``\\s``"

#: ../../library/re.rst:376
msgid ""
"When the :const:`UNICODE` flag is not specified, it matches any whitespace "
"character, this is equivalent to the set ``[ \\t\\n\\r\\f\\v]``. The :const:"
"`LOCALE` flag has no extra effect on matching of the space. If :const:"
"`UNICODE` is set, this will match the characters ``[ \\t\\n\\r\\f\\v]`` plus "
"whatever is classified as space in the Unicode character properties database."
msgstr ""

#: ../../library/re.rst:389
msgid "``\\S``"
msgstr "``\\S``"

#: ../../library/re.rst:384
msgid ""
"When the :const:`UNICODE` flag is not specified, matches any non-whitespace "
"character; this is equivalent to the set ``[^ \\t\\n\\r\\f\\v]`` The :const:"
"`LOCALE` flag has no extra effect on non-whitespace match.  If :const:"
"`UNICODE` is set, then any character not marked as space in the Unicode "
"character properties database is matched."
msgstr ""

#: ../../library/re.rst:397
msgid "``\\w``"
msgstr "``\\w``"

#: ../../library/re.rst:392
msgid ""
"When the :const:`LOCALE` and :const:`UNICODE` flags are not specified, "
"matches any alphanumeric character and the underscore; this is equivalent to "
"the set ``[a-zA-Z0-9_]``.  With :const:`LOCALE`, it will match the set "
"``[0-9_]`` plus whatever characters are defined as alphanumeric for the "
"current locale.  If :const:`UNICODE` is set, this will match the characters "
"``[0-9_]`` plus whatever is classified as alphanumeric in the Unicode "
"character properties database."
msgstr ""

#: ../../library/re.rst:405
msgid "``\\W``"
msgstr "``\\W``"

#: ../../library/re.rst:400
msgid ""
"When the :const:`LOCALE` and :const:`UNICODE` flags are not specified, "
"matches any non-alphanumeric character; this is equivalent to the set ``[^a-"
"zA-Z0-9_]``. With :const:`LOCALE`, it will match any character not in the "
"set ``[0-9_]``, and not defined as alphanumeric for the current locale. If :"
"const:`UNICODE` is set, this will match anything other than ``[0-9_]`` plus "
"characters classified as not alphanumeric in the Unicode character "
"properties database."
msgstr ""

#: ../../library/re.rst:408
msgid "``\\Z``"
msgstr "``\\Z``"

#: ../../library/re.rst:408
msgid "Matches only at the end of the string."
msgstr "Corresponde apenas ao final da string."

#: ../../library/re.rst:410
msgid ""
"If both :const:`LOCALE` and :const:`UNICODE` flags are included for a "
"particular sequence, then :const:`LOCALE` flag takes effect first followed "
"by the :const:`UNICODE`."
msgstr ""

#: ../../library/re.rst:414
msgid ""
"Most of the standard escapes supported by Python string literals are also "
"accepted by the regular expression parser::"
msgstr ""
"A maioria dos escapes padrão suportados por literais de string Python também "
"são aceitos pelo analisador sintático de expressão regular:"

#: ../../library/re.rst:421
msgid ""
"(Note that ``\\b`` is used to represent word boundaries, and means "
"\"backspace\" only inside character classes.)"
msgstr ""
"(Observe que ``\\b`` é usado para representar limites de palavras e "
"significa fazer \"backspace\" apenas dentro das classes de caracteres.)"

#: ../../library/re.rst:424
msgid ""
"Octal escapes are included in a limited form: If the first digit is a 0, or "
"if there are three octal digits, it is considered an octal escape. "
"Otherwise, it is a group reference.  As for string literals, octal escapes "
"are always at most three digits in length."
msgstr ""

#: ../../library/re.rst:433
msgid "Mastering Regular Expressions"
msgstr ""

#: ../../library/re.rst:432
msgid ""
"Book on regular expressions by Jeffrey Friedl, published by O'Reilly.  The "
"second edition of the book no longer covers Python at all, but the first "
"edition covered writing good regular expression patterns in great detail."
msgstr ""

#: ../../library/re.rst:441
msgid "Module Contents"
msgstr "Conteúdo do Módulo"

#: ../../library/re.rst:443
msgid ""
"The module defines several functions, constants, and an exception. Some of "
"the functions are simplified versions of the full featured methods for "
"compiled regular expressions.  Most non-trivial applications always use the "
"compiled form."
msgstr ""
"O módulo define várias funções, constantes e uma exceção. Algumas das "
"funções são versões simplificadas dos métodos completos para expressões "
"regulares compiladas. A maioria dos aplicativos não triviais sempre usa a "
"forma compilada."

#: ../../library/re.rst:451
msgid ""
"Compile a regular expression pattern into a regular expression object, which "
"can be used for matching using its :func:`~RegexObject.match` and :func:"
"`~RegexObject.search` methods, described below."
msgstr ""

#: ../../library/re.rst:455
msgid ""
"The expression's behaviour can be modified by specifying a *flags* value. "
"Values can be any of the following variables, combined using bitwise OR (the "
"``|`` operator)."
msgstr ""
"O comportamento da expressão pode ser modificado especificando um valor "
"*flags*. Os valores podem ser qualquer uma das seguintes variáveis, "
"correspondidas usando OU bit a bit (o operador ``|``)."

#: ../../library/re.rst:459
msgid "The sequence ::"
msgstr "A sequência ::"

#: ../../library/re.rst:464
msgid "is equivalent to ::"
msgstr "é equivalente a::"

#: ../../library/re.rst:468
msgid ""
"but using :func:`re.compile` and saving the resulting regular expression "
"object for reuse is more efficient when the expression will be used several "
"times in a single program."
msgstr ""
"mas usar :func:`re.compile` e salvar o objeto de expressão regular "
"resultante para reutilização é mais eficiente quando a expressão será usada "
"várias vezes em um único programa."

#: ../../library/re.rst:474
msgid ""
"The compiled versions of the most recent patterns passed to :func:`re."
"match`, :func:`re.search` or :func:`re.compile` are cached, so programs that "
"use only a few regular expressions at a time needn't worry about compiling "
"regular expressions."
msgstr ""

#: ../../library/re.rst:482
msgid "Display debug information about compiled expression."
msgstr "Exibe informações de depuração sobre a expressão compilada."

#: ../../library/re.rst:488
msgid ""
"Perform case-insensitive matching; expressions like ``[A-Z]`` will match "
"lowercase letters, too.  This is not affected by the current locale.  To get "
"this effect on non-ASCII Unicode characters such as ``ü`` and ``Ü``, add "
"the :const:`UNICODE` flag."
msgstr ""

#: ../../library/re.rst:497
msgid ""
"Make ``\\w``, ``\\W``, ``\\b``, ``\\B``, ``\\s`` and ``\\S`` dependent on "
"the current locale."
msgstr ""

#: ../../library/re.rst:504
msgid ""
"When specified, the pattern character ``'^'`` matches at the beginning of "
"the string and at the beginning of each line (immediately following each "
"newline); and the pattern character ``'$'`` matches at the end of the string "
"and at the end of each line (immediately preceding each newline).  By "
"default, ``'^'`` matches only at the beginning of the string, and ``'$'`` "
"only at the end of the string and immediately before the newline (if any) at "
"the end of the string."
msgstr ""
"Quando especificado, o caractere padrão ``'^'`` corresponde ao início da "
"string e ao início de cada linha (imediatamente após cada nova linha); e o "
"caractere padrão ``'$'`` corresponde ao final da string e ao final de cada "
"linha (imediatamente antes de cada nova linha). Por padrão, ``'^'`` "
"corresponde apenas no início da string, e ``'$'`` apenas no final da string "
"e imediatamente antes da nova linha (se houver) no final da string."

#: ../../library/re.rst:515
msgid ""
"Make the ``'.'`` special character match any character at all, including a "
"newline; without this flag, ``'.'`` will match anything *except* a newline."
msgstr ""
"Faz o caractere especial ``'.'`` corresponder com qualquer caractere que "
"seja, incluindo uma nova linha; sem este sinalizador, ``'.'`` irá "
"corresponder a qualquer coisa, *exceto* uma nova linha."

#: ../../library/re.rst:522
msgid ""
"Make the ``\\w``, ``\\W``, ``\\b``, ``\\B``, ``\\d``, ``\\D``, ``\\s`` and "
"``\\S`` sequences dependent on the Unicode character properties database. "
"Also enables non-ASCII matching for :const:`IGNORECASE`."
msgstr ""

#: ../../library/re.rst:532
msgid ""
"This flag allows you to write regular expressions that look nicer and are "
"more readable by allowing you to visually separate logical sections of the "
"pattern and add comments. Whitespace within the pattern is ignored, except "
"when in a character class, or when preceded by an unescaped backslash, or "
"within tokens like ``*?``, ``(?:`` or ``(?P<...>``. When a line contains a "
"``#`` that is not in a character class and is not preceded by an unescaped "
"backslash, all characters from the leftmost such ``#`` through the end of "
"the line are ignored."
msgstr ""
"Este sinalizador permite que você escreva expressões regulares que parecem "
"mais agradáveis e são mais legíveis, permitindo que você separe visualmente "
"seções lógicas do padrão e adicione comentários. O espaço em branco dentro "
"do padrão é ignorado, exceto quando em uma classe de caractere, ou quando "
"precedido por uma contrabarra sem escape, ou dentro de tokens como ``*?``, "
"``(?:`` ou ``(?P<...>``. Quando uma linha contém um ``#`` que não está em "
"uma classe de caractere e não é precedido por uma contrabarra sem escape, "
"todos os caracteres da extremidade esquerda, como ``#`` até o final da linha "
"são ignorados."

#: ../../library/re.rst:541
msgid ""
"This means that the two following regular expression objects that match a "
"decimal number are functionally equal::"
msgstr ""
"Isso significa que os dois seguintes objetos de expressão regular que "
"correspondem a um número decimal são funcionalmente iguais::"

#: ../../library/re.rst:552
msgid ""
"Scan through *string* looking for the first location where the regular "
"expression *pattern* produces a match, and return a corresponding :class:"
"`MatchObject` instance. Return ``None`` if no position in the string matches "
"the pattern; note that this is different from finding a zero-length match at "
"some point in the string."
msgstr ""

#: ../../library/re.rst:561
msgid ""
"If zero or more characters at the beginning of *string* match the regular "
"expression *pattern*, return a corresponding :class:`MatchObject` instance. "
"Return ``None`` if the string does not match the pattern; note that this is "
"different from a zero-length match."
msgstr ""

#: ../../library/re.rst:566
msgid ""
"Note that even in :const:`MULTILINE` mode, :func:`re.match` will only match "
"at the beginning of the string and not at the beginning of each line."
msgstr ""
"Observe que mesmo no modo :const:`MULTILINE`, :func:`re.match` irá "
"corresponder apenas no início da string e não no início de cada linha."

#: ../../library/re.rst:569
msgid ""
"If you want to locate a match anywhere in *string*, use :func:`search` "
"instead (see also :ref:`search-vs-match`)."
msgstr ""
"Se você quiser localizar uma correspondência em qualquer lugar em *string*, "
"use :func:`search` (veja também :ref:`search-vs-match`)."

#: ../../library/re.rst:575
msgid ""
"Split *string* by the occurrences of *pattern*.  If capturing parentheses "
"are used in *pattern*, then the text of all groups in the pattern are also "
"returned as part of the resulting list. If *maxsplit* is nonzero, at most "
"*maxsplit* splits occur, and the remainder of the string is returned as the "
"final element of the list.  (Incompatibility note: in the original Python "
"1.5 release, *maxsplit* was ignored.  This has been fixed in later releases.)"
msgstr ""

#: ../../library/re.rst:591
msgid ""
"If there are capturing groups in the separator and it matches at the start "
"of the string, the result will start with an empty string.  The same holds "
"for the end of the string:"
msgstr ""

#: ../../library/re.rst:598
msgid ""
"That way, separator components are always found at the same relative indices "
"within the result list (e.g., if there's one capturing group in the "
"separator, the 0th, the 2nd and so forth)."
msgstr ""

#: ../../library/re.rst:602
msgid ""
"Note that *split* will never split a string on an empty pattern match. For "
"example:"
msgstr ""

#: ../../library/re.rst:610 ../../library/re.rst:632 ../../library/re.rst:645
#: ../../library/re.rst:695 ../../library/re.rst:704
msgid "Added the optional flags argument."
msgstr "Adicionado o argumento de sinalizadores opcionais."

#: ../../library/re.rst:617
msgid ""
"Return all non-overlapping matches of *pattern* in *string*, as a list of "
"strings.  The *string* is scanned left-to-right, and matches are returned in "
"the order found.  If one or more groups are present in the pattern, return a "
"list of groups; this will be a list of tuples if the pattern has more than "
"one group.  Empty matches are included in the result."
msgstr ""
"Retorna todas as correspondências não sobrepostas de padrão *pattern* na "
"*string*, como uma lista de strings. A *string* é verificada da esquerda "
"para a direita e as correspondências são retornadas na ordem encontrada. Se "
"um ou mais grupos estiverem presentes no padrão, retorna uma lista de "
"grupos; esta será uma lista de tuplas se o padrão tiver mais de um grupo. "
"Correspondências vazias são incluídas no resultado."

#: ../../library/re.rst:625
msgid ""
"Due to the limitation of the current implementation the character following "
"an empty match is not included in a next match, so ``findall(r'^|\\w+', 'two "
"words')`` returns ``['', 'wo', 'words']`` (note missed \"t\").  This is "
"changed in Python 3.7."
msgstr ""

#: ../../library/re.rst:638
msgid ""
"Return an :term:`iterator` yielding :class:`MatchObject` instances over all "
"non-overlapping matches for the RE *pattern* in *string*.  The *string* is "
"scanned left-to-right, and matches are returned in the order found.  Empty "
"matches are included in the result.  See also the note about :func:`findall`."
msgstr ""

#: ../../library/re.rst:651
msgid ""
"Return the string obtained by replacing the leftmost non-overlapping "
"occurrences of *pattern* in *string* by the replacement *repl*.  If the "
"pattern isn't found, *string* is returned unchanged.  *repl* can be a string "
"or a function; if it is a string, any backslash escapes in it are "
"processed.  That is, ``\\n`` is converted to a single newline character, "
"``\\r`` is converted to a carriage return, and so forth.  Unknown escapes "
"such as ``\\j`` are left alone.  Backreferences, such as ``\\6``, are "
"replaced with the substring matched by group 6 in the pattern. For example:"
msgstr ""

#: ../../library/re.rst:665
msgid ""
"If *repl* is a function, it is called for every non-overlapping occurrence "
"of *pattern*.  The function takes a single match object argument, and "
"returns the replacement string.  For example:"
msgstr ""

#: ../../library/re.rst:677
msgid "The pattern may be a string or an RE object."
msgstr ""

#: ../../library/re.rst:679
msgid ""
"The optional argument *count* is the maximum number of pattern occurrences "
"to be replaced; *count* must be a non-negative integer.  If omitted or zero, "
"all occurrences will be replaced. Empty matches for the pattern are replaced "
"only when not adjacent to a previous match, so ``sub('x*', '-', 'abc')`` "
"returns ``'-a-b-c-'``."
msgstr ""

#: ../../library/re.rst:685
msgid ""
"In string-type *repl* arguments, in addition to the character escapes and "
"backreferences described above, ``\\g<name>`` will use the substring matched "
"by the group named ``name``, as defined by the ``(?P<name>...)`` syntax. "
"``\\g<number>`` uses the corresponding group number; ``\\g<2>`` is therefore "
"equivalent to ``\\2``, but isn't ambiguous in a replacement such as "
"``\\g<2>0``.  ``\\20`` would be interpreted as a reference to group 20, not "
"a reference to group 2 followed by the literal character ``'0'``.  The "
"backreference ``\\g<0>`` substitutes in the entire substring matched by the "
"RE."
msgstr ""
"Em argumentos *repl* do tipo string, além dos escapes de caractere e "
"retrovisores descritos acima, ``\\g<nome>`` usará a substring correspondida "
"pelo grupo denominado ``nome``, conforme definido pela sintaxe ``(?"
"P<nome>...)``. ``\\g<número>`` usa o número do grupo correspondente; "
"``\\g<2>`` é portanto equivalente a ``\\2``, mas não é ambíguo em uma "
"substituição como ``\\g<2>0``. ``\\20`` seria interpretado como uma "
"referência ao grupo 20, não uma referência ao grupo 2 seguida pelo caractere "
"literal ``'0'``. O retrovisor ``\\g6`` substitui em toda a substring "
"correspondida pela ER."

#: ../../library/re.rst:701
msgid ""
"Perform the same operation as :func:`sub`, but return a tuple ``(new_string, "
"number_of_subs_made)``."
msgstr ""
"Executa a mesma operação como :func:`sub`, mas retorna uma tupla "
"``(new_string, number_of_subs_made)``."

#: ../../library/re.rst:710
msgid ""
"Escape all the characters in *pattern* except ASCII letters and numbers. "
"This is useful if you want to match an arbitrary literal string that may "
"have regular expression metacharacters in it.  For example::"
msgstr ""

#: ../../library/re.rst:728
msgid "Clear the regular expression cache."
msgstr "Limpa o cache de expressão regular."

#: ../../library/re.rst:733
msgid ""
"Exception raised when a string passed to one of the functions here is not a "
"valid regular expression (for example, it might contain unmatched "
"parentheses) or when some other error occurs during compilation or "
"matching.  It is never an error if a string contains no match for a pattern."
msgstr ""

#: ../../library/re.rst:742
msgid "Regular Expression Objects"
msgstr "Objetos expressão regular"

#: ../../library/re.rst:746
msgid ""
"The :class:`RegexObject` class supports the following methods and attributes:"
msgstr ""

#: ../../library/re.rst:750
msgid ""
"Scan through *string* looking for a location where this regular expression "
"produces a match, and return a corresponding :class:`MatchObject` instance. "
"Return ``None`` if no position in the string matches the pattern; note that "
"this is different from finding a zero-length match at some point in the "
"string."
msgstr ""

#: ../../library/re.rst:755
msgid ""
"The optional second parameter *pos* gives an index in the string where the "
"search is to start; it defaults to ``0``.  This is not completely equivalent "
"to slicing the string; the ``'^'`` pattern character matches at the real "
"beginning of the string and at positions just after a newline, but not "
"necessarily at the index where the search is to start."
msgstr ""
"O segundo parâmetro opcional *pos* fornece um índice na string onde a "
"pesquisa deve começar; o padrão é ``0``. Isso não é totalmente equivalente a "
"fatiar a string; o caractere padrão ``'^'`` corresponde no início real da "
"string e nas posições logo após uma nova linha, mas não necessariamente no "
"índice onde a pesquisa deve começar."

#: ../../library/re.rst:761
msgid ""
"The optional parameter *endpos* limits how far the string will be searched; "
"it will be as if the string is *endpos* characters long, so only the "
"characters from *pos* to ``endpos - 1`` will be searched for a match.  If "
"*endpos* is less than *pos*, no match will be found, otherwise, if *rx* is a "
"compiled regular expression object, ``rx.search(string, 0, 50)`` is "
"equivalent to ``rx.search(string[:50], 0)``."
msgstr ""

#: ../../library/re.rst:776
msgid ""
"If zero or more characters at the *beginning* of *string* match this regular "
"expression, return a corresponding :class:`MatchObject` instance.  Return "
"``None`` if the string does not match the pattern; note that this is "
"different from a zero-length match."
msgstr ""

#: ../../library/re.rst:781
msgid ""
"The optional *pos* and *endpos* parameters have the same meaning as for the :"
"meth:`~RegexObject.search` method."
msgstr ""

#: ../../library/re.rst:789
msgid ""
"If you want to locate a match anywhere in *string*, use :meth:`~RegexObject."
"search` instead (see also :ref:`search-vs-match`)."
msgstr ""

#: ../../library/re.rst:795
msgid "Identical to the :func:`split` function, using the compiled pattern."
msgstr "Idêntico à função :func:`split`, usando o padrão compilado."

#: ../../library/re.rst:800
msgid ""
"Similar to the :func:`findall` function, using the compiled pattern, but "
"also accepts optional *pos* and *endpos* parameters that limit the search "
"region like for :meth:`match`."
msgstr ""

#: ../../library/re.rst:807
msgid ""
"Similar to the :func:`finditer` function, using the compiled pattern, but "
"also accepts optional *pos* and *endpos* parameters that limit the search "
"region like for :meth:`match`."
msgstr ""

#: ../../library/re.rst:814
msgid "Identical to the :func:`sub` function, using the compiled pattern."
msgstr "Idêntico à função :func:`sub`, usando o padrão compilado."

#: ../../library/re.rst:819
msgid "Identical to the :func:`subn` function, using the compiled pattern."
msgstr "Idêntico à função :func:`subn`, usando o padrão compilado."

#: ../../library/re.rst:824
msgid ""
"The regex matching flags.  This is a combination of the flags given to :func:"
"`.compile` and any ``(?...)`` inline flags in the pattern."
msgstr ""

#: ../../library/re.rst:830
msgid "The number of capturing groups in the pattern."
msgstr "O número de grupos de captura no padrão."

#: ../../library/re.rst:835
msgid ""
"A dictionary mapping any symbolic group names defined by ``(?P<id>)`` to "
"group numbers.  The dictionary is empty if no symbolic groups were used in "
"the pattern."
msgstr ""
"Um dicionário que mapeia qualquer nome de grupo simbólico definido por ``(?"
"P<id>)`` para números de grupo. O dicionário estará vazio se nenhum grupo "
"simbólico for usado no padrão."

#: ../../library/re.rst:842
msgid "The pattern string from which the RE object was compiled."
msgstr ""

#: ../../library/re.rst:848
msgid "Match Objects"
msgstr "Objetos correspondência"

#: ../../library/re.rst:852
msgid ""
"Match objects always have a boolean value of ``True``. Since :meth:`~regex."
"match` and :meth:`~regex.search` return ``None`` when there is no match, you "
"can test whether there was a match with a simple ``if`` statement::"
msgstr ""

#: ../../library/re.rst:861
msgid "Match objects support the following methods and attributes:"
msgstr ""
"Os objetos correspondência oferecem suporte aos seguintes métodos e "
"atributos:"

#: ../../library/re.rst:866
msgid ""
"Return the string obtained by doing backslash substitution on the template "
"string *template*, as done by the :meth:`~RegexObject.sub` method.  Escapes "
"such as ``\\n`` are converted to the appropriate characters, and numeric "
"backreferences (``\\1``, ``\\2``) and named backreferences (``\\g<1>``, "
"``\\g<name>``) are replaced by the contents of the corresponding group."
msgstr ""

#: ../../library/re.rst:875
msgid ""
"Returns one or more subgroups of the match.  If there is a single argument, "
"the result is a single string; if there are multiple arguments, the result "
"is a tuple with one item per argument. Without arguments, *group1* defaults "
"to zero (the whole match is returned). If a *groupN* argument is zero, the "
"corresponding return value is the entire matching string; if it is in the "
"inclusive range [1..99], it is the string matching the corresponding "
"parenthesized group.  If a group number is negative or larger than the "
"number of groups defined in the pattern, an :exc:`IndexError` exception is "
"raised. If a group is contained in a part of the pattern that did not match, "
"the corresponding result is ``None``. If a group is contained in a part of "
"the pattern that matched multiple times, the last match is returned."
msgstr ""

#: ../../library/re.rst:897
msgid ""
"If the regular expression uses the ``(?P<name>...)`` syntax, the *groupN* "
"arguments may also be strings identifying groups by their group name.  If a "
"string argument is not used as a group name in the pattern, an :exc:"
"`IndexError` exception is raised."
msgstr ""
"Se a expressão regular usa a sintaxe ``(?P<name>...)``, os argumentos "
"*groupN* também podem ser strings que identificam grupos por seus nomes de "
"grupo. Se um argumento string não for usado como um nome de grupo no padrão, "
"uma exceção :exc:`IndexError` é levantada."

#: ../../library/re.rst:902
msgid "A moderately complicated example:"
msgstr ""

#: ../../library/re.rst:910
msgid "Named groups can also be referred to by their index:"
msgstr "Grupos nomeados podem também ser referenciados por seus índices:"

#: ../../library/re.rst:917
msgid "If a group matches multiple times, only the last match is accessible:"
msgstr ""

#: ../../library/re.rst:926
msgid ""
"Return a tuple containing all the subgroups of the match, from 1 up to "
"however many groups are in the pattern.  The *default* argument is used for "
"groups that did not participate in the match; it defaults to ``None``.  "
"(Incompatibility note: in the original Python 1.5 release, if the tuple was "
"one element long, a string would be returned instead.  In later versions "
"(from 1.5.1 on), a singleton tuple is returned in such cases.)"
msgstr ""

#: ../../library/re.rst:933
msgid "For example:"
msgstr "Por exemplo:"

#: ../../library/re.rst:939
msgid ""
"If we make the decimal place and everything after it optional, not all "
"groups might participate in the match.  These groups will default to "
"``None`` unless the *default* argument is given:"
msgstr ""

#: ../../library/re.rst:952
msgid ""
"Return a dictionary containing all the *named* subgroups of the match, keyed "
"by the subgroup name.  The *default* argument is used for groups that did "
"not participate in the match; it defaults to ``None``.  For example:"
msgstr ""

#: ../../library/re.rst:964
msgid ""
"Return the indices of the start and end of the substring matched by *group*; "
"*group* defaults to zero (meaning the whole matched substring). Return "
"``-1`` if *group* exists but did not contribute to the match.  For a match "
"object *m*, and a group *g* that did contribute to the match, the substring "
"matched by group *g* (equivalent to ``m.group(g)``) is ::"
msgstr ""
"Retorna os índices de início e fim da substring correspondidos pelo grupo "
"*group*; *group* tem como padrão  zero (o que significa que toda a substring "
"é correspondida). Retorna ``-1`` se *group* existe, mas não contribuiu para "
"a correspondência. Para um objeto correspondência *m* e um grupo *g* que "
"contribuiu para a correspondência, a substring correspondida pelo grupo *g* "
"(equivalente a ``m.group(g)``) é ::"

#: ../../library/re.rst:972
msgid ""
"Note that ``m.start(group)`` will equal ``m.end(group)`` if *group* matched "
"a null string.  For example, after ``m = re.search('b(c?)', 'cba')``, ``m."
"start(0)`` is 1, ``m.end(0)`` is 2, ``m.start(1)`` and ``m.end(1)`` are both "
"2, and ``m.start(2)`` raises an :exc:`IndexError` exception."
msgstr ""
"Observe que ``m.start(group)`` será igual a ``m.end(group)`` se *group* "
"correspondeu a uma string nula. Por exemplo, após ``m = re.search('b(c?)', "
"'cba')``, ``m.start(0)`` é 1, ``m.end(0)`` é 2, ``m.start(1)`` e ``m."
"end(1)`` são 2, e ``m.start(2)`` levanta uma exceção :exc:`IndexError`."

#: ../../library/re.rst:977
msgid "An example that will remove *remove_this* from email addresses:"
msgstr ""

#: ../../library/re.rst:987
msgid ""
"For :class:`MatchObject` *m*, return the 2-tuple ``(m.start(group), m."
"end(group))``. Note that if *group* did not contribute to the match, this is "
"``(-1, -1)``.  *group* defaults to zero, the entire match."
msgstr ""

#: ../../library/re.rst:994
msgid ""
"The value of *pos* which was passed to the :meth:`~RegexObject.search` or :"
"meth:`~RegexObject.match` method of the :class:`RegexObject`.  This is the "
"index into the string at which the RE engine started looking for a match."
msgstr ""

#: ../../library/re.rst:1001
msgid ""
"The value of *endpos* which was passed to the :meth:`~RegexObject.search` "
"or :meth:`~RegexObject.match` method of the :class:`RegexObject`.  This is "
"the index into the string beyond which the RE engine will not go."
msgstr ""

#: ../../library/re.rst:1008
msgid ""
"The integer index of the last matched capturing group, or ``None`` if no "
"group was matched at all. For example, the expressions ``(a)b``, ``((a)"
"(b))``, and ``((ab))`` will have ``lastindex == 1`` if applied to the string "
"``'ab'``, while the expression ``(a)(b)`` will have ``lastindex == 2``, if "
"applied to the same string."
msgstr ""
"O índice em número inteiro do último grupo de captura correspondido, ou "
"``None`` se nenhum grupo foi correspondido. Por exemplo, as expressões "
"``(a)b``, ``((a)(b))`` e ``((ab))`` terão ``lastindex == 1`` se aplicadas à "
"string ``'ab'``, enquanto a expressão ``(a)(b)`` terá ``lastindex == 2``, se "
"aplicada à mesma string."

#: ../../library/re.rst:1017
msgid ""
"The name of the last matched capturing group, or ``None`` if the group "
"didn't have a name, or if no group was matched at all."
msgstr ""
"O nome do último grupo de captura correspondido, ou ``None`` se o grupo não "
"tinha um nome, ou se nenhum grupo foi correspondido."

#: ../../library/re.rst:1023
msgid ""
"The regular expression object whose :meth:`~RegexObject.match` or :meth:"
"`~RegexObject.search` method produced this :class:`MatchObject` instance."
msgstr ""

#: ../../library/re.rst:1030
msgid ""
"The string passed to :meth:`~RegexObject.match` or :meth:`~RegexObject."
"search`."
msgstr ""

#: ../../library/re.rst:1035
msgid "Examples"
msgstr "Exemplos"

#: ../../library/re.rst:1039
msgid "Checking For a Pair"
msgstr ""

#: ../../library/re.rst:1041
msgid ""
"In this example, we'll use the following helper function to display match "
"objects a little more gracefully:"
msgstr ""

#: ../../library/re.rst:1051
msgid ""
"Suppose you are writing a poker program where a player's hand is represented "
"as a 5-character string with each character representing a card, \"a\" for "
"ace, \"k\" for king, \"q\" for queen, \"j\" for jack, \"t\" for 10, and "
"\"2\" through \"9\" representing the card with that value."
msgstr ""
"Suponha que você esteja escrevendo um programa de pôquer onde a mão de um "
"jogador é representada como uma string de 5 caracteres com cada caractere "
"representando uma carta, \"a\" para ás, \"k\" para rei, \"q\" para dama, "
"\"j\" para valete, \"t\" para 10 e \"2\" a \"9\" representando a carta com "
"esse valor."

#: ../../library/re.rst:1056
msgid "To see if a given string is a valid hand, one could do the following:"
msgstr ""

#: ../../library/re.rst:1066
msgid ""
"That last hand, ``\"727ak\"``, contained a pair, or two of the same valued "
"cards. To match this with a regular expression, one could use backreferences "
"as such:"
msgstr ""

#: ../../library/re.rst:1076
msgid ""
"To find out what card the pair consists of, one could use the :meth:"
"`~MatchObject.group` method of :class:`MatchObject` in the following manner:"
msgstr ""

#: ../../library/re.rst:1097
msgid "Simulating scanf()"
msgstr "Simulando scanf()"

#: ../../library/re.rst:1101
msgid ""
"Python does not currently have an equivalent to :c:func:`scanf`.  Regular "
"expressions are generally more powerful, though also more verbose, than :c:"
"func:`scanf` format strings.  The table below offers some more-or-less "
"equivalent mappings between :c:func:`scanf` format tokens and regular "
"expressions."
msgstr ""
"Python atualmente não possui um equivalente a :c:func:`scanf`. Expressões "
"regulares são geralmente mais poderosas, embora também mais detalhadas, do "
"que strings de formato :c:func:`scanf`. A tabela abaixo oferece alguns "
"mapeamentos mais ou menos equivalentes entre os tokens de formato :c:func:"
"`scanf` e expressões regulares."

#: ../../library/re.rst:1108
msgid ":c:func:`scanf` Token"
msgstr "Token :c:func:`scanf`"

#: ../../library/re.rst:1108
msgid "Regular Expression"
msgstr "Expressão regular"

#: ../../library/re.rst:1110
msgid "``%c``"
msgstr "``%c``"

#: ../../library/re.rst:1110
msgid "``.``"
msgstr "``.``"

#: ../../library/re.rst:1112
msgid "``%5c``"
msgstr "``%5c``"

#: ../../library/re.rst:1112
msgid "``.{5}``"
msgstr "``.{5}``"

#: ../../library/re.rst:1114
msgid "``%d``"
msgstr "``%d``"

#: ../../library/re.rst:1114
msgid "``[-+]?\\d+``"
msgstr "``[-+]?\\d+``"

#: ../../library/re.rst:1116
msgid "``%e``, ``%E``, ``%f``, ``%g``"
msgstr "``%e``, ``%E``, ``%f``, ``%g``"

#: ../../library/re.rst:1116
msgid "``[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?``"
msgstr "``[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?``"

#: ../../library/re.rst:1118
msgid "``%i``"
msgstr "``%i``"

#: ../../library/re.rst:1118
msgid "``[-+]?(0[xX][\\dA-Fa-f]+|0[0-7]*|\\d+)``"
msgstr "``[-+]?(0[xX][\\dA-Fa-f]+|0[0-7]*|\\d+)``"

#: ../../library/re.rst:1120
msgid "``%o``"
msgstr "``%o``"

#: ../../library/re.rst:1120
msgid "``[-+]?[0-7]+``"
msgstr "``[-+]?[0-7]+``"

#: ../../library/re.rst:1122
msgid "``%s``"
msgstr "``%s``"

#: ../../library/re.rst:1122
msgid "``\\S+``"
msgstr "``\\S+``"

#: ../../library/re.rst:1124
msgid "``%u``"
msgstr "``%u``"

#: ../../library/re.rst:1124
msgid "``\\d+``"
msgstr "``\\d+``"

#: ../../library/re.rst:1126
msgid "``%x``, ``%X``"
msgstr "``%x``, ``%X``"

#: ../../library/re.rst:1126
msgid "``[-+]?(0[xX])?[\\dA-Fa-f]+``"
msgstr "``[-+]?(0[xX])?[\\dA-Fa-f]+``"

#: ../../library/re.rst:1129
msgid "To extract the filename and numbers from a string like ::"
msgstr "Para extrair um nome de arquivo e números de uma string como :: "

#: ../../library/re.rst:1133
msgid "you would use a :c:func:`scanf` format like ::"
msgstr "você usaria um formato de :c:func:`scanf` como ::"

#: ../../library/re.rst:1137
msgid "The equivalent regular expression would be ::"
msgstr "A expressão regular equivalente seria ::"

#: ../../library/re.rst:1145
msgid "search() vs. match()"
msgstr "search() vs. match()"

#: ../../library/re.rst:1149
msgid ""
"Python offers two different primitive operations based on regular "
"expressions: :func:`re.match` checks for a match only at the beginning of "
"the string, while :func:`re.search` checks for a match anywhere in the "
"string (this is what Perl does by default)."
msgstr ""
"Python oferece duas operações primitivas diferentes baseadas em expressões "
"regulares: :func:`re.match` verifica se há uma correspondência apenas no "
"início da string, enquanto :func:`re.search` verifica se há uma "
"correspondência em qualquer lugar da string (isto é o que o Perl faz por "
"padrão)."

#: ../../library/re.rst:1154
msgid "For example::"
msgstr "Por exemplo::"

#: ../../library/re.rst:1160
msgid ""
"Regular expressions beginning with ``'^'`` can be used with :func:`search` "
"to restrict the match at the beginning of the string::"
msgstr ""
"Expressões regulares começando com ``'^'`` podem ser usadas com :func:"
"`search` para restringir a correspondência no início da string::"

#: ../../library/re.rst:1168
msgid ""
"Note however that in :const:`MULTILINE` mode :func:`match` only matches at "
"the beginning of the string, whereas using :func:`search` with a regular "
"expression beginning with ``'^'`` will match at the beginning of each line."
msgstr ""

#: ../../library/re.rst:1178
msgid "Making a Phonebook"
msgstr "Criando uma lista telefônica"

#: ../../library/re.rst:1180
msgid ""
":func:`split` splits a string into a list delimited by the passed pattern.  "
"The method is invaluable for converting textual data into data structures "
"that can be easily read and modified by Python as demonstrated in the "
"following example that creates a phonebook."
msgstr ""
":func:`split` divide uma string em uma lista delimitada pelo padrão passado. "
"O método é inestimável para converter dados textuais em estruturas de dados "
"que podem ser facilmente lidas e modificadas pelo Python, conforme "
"demonstrado no exemplo a seguir que cria uma lista telefônica."

#: ../../library/re.rst:1185
msgid ""
"First, here is the input.  Normally it may come from a file, here we are "
"using triple-quoted string syntax:"
msgstr ""

#: ../../library/re.rst:1196
msgid ""
"The entries are separated by one or more newlines. Now we convert the string "
"into a list with each nonempty line having its own entry:"
msgstr ""
"As entradas são separadas por uma ou mais novas linhas. Agora, convertemos a "
"string em uma lista com cada linha não vazia tendo sua própria entrada:"

#: ../../library/re.rst:1209
msgid ""
"Finally, split each entry into a list with first name, last name, telephone "
"number, and address.  We use the ``maxsplit`` parameter of :func:`split` "
"because the address has spaces, our splitting pattern, in it:"
msgstr ""
"Finalmente, divida cada entrada em uma lista com nome, sobrenome, número de "
"telefone e endereço. Usamos o parâmetro ``maxsplit`` de :func:`split` porque "
"o endereço contém espaços, nosso padrão de divisão:"

#: ../../library/re.rst:1222
msgid ""
"The ``:?`` pattern matches the colon after the last name, so that it does "
"not occur in the result list.  With a ``maxsplit`` of ``4``, we could "
"separate the house number from the street name:"
msgstr ""
"O padrão ``:?`` corresponde ao caractere de dois pontos após o sobrenome, de "
"modo que não ocorre na lista de resultados. Com um ``maxsplit`` de ``4``, "
"podemos separar o número da casa do nome da rua:"

#: ../../library/re.rst:1237
msgid "Text Munging"
msgstr "Manipulação de texto"

#: ../../library/re.rst:1239
msgid ""
":func:`sub` replaces every occurrence of a pattern with a string or the "
"result of a function.  This example demonstrates using :func:`sub` with a "
"function to \"munge\" text, or randomize the order of all the characters in "
"each word of a sentence except for the first and last characters::"
msgstr ""
":func:`sub` substitui cada ocorrência de um padrão por uma string ou o "
"resultado de uma função. Este exemplo demonstra o uso de :func:`sub` com uma "
"função para manipular o texto ou aleatorizar a ordem de todos os caracteres "
"em cada palavra de uma frase, exceto o primeiro e o último caracteres::"

#: ../../library/re.rst:1256
msgid "Finding all Adverbs"
msgstr "Encontrando todos os advérbios"

#: ../../library/re.rst:1258
msgid ""
":func:`findall` matches *all* occurrences of a pattern, not just the first "
"one as :func:`search` does.  For example, if a writer wanted to find all of "
"the adverbs in some text, they might use :func:`findall` in the following "
"manner:"
msgstr ""

#: ../../library/re.rst:1269
msgid "Finding all Adverbs and their Positions"
msgstr "Encontrando todos os advérbios e suas posições"

#: ../../library/re.rst:1271
msgid ""
"If one wants more information about all matches of a pattern than the "
"matched text, :func:`finditer` is useful as it provides instances of :class:"
"`MatchObject` instead of strings.  Continuing with the previous example, if "
"a writer wanted to find all of the adverbs *and their positions* in some "
"text, they would use :func:`finditer` in the following manner:"
msgstr ""

#: ../../library/re.rst:1285
msgid "Raw String Notation"
msgstr "Notação de string bruta"

#: ../../library/re.rst:1287
msgid ""
"Raw string notation (``r\"text\"``) keeps regular expressions sane.  Without "
"it, every backslash (``'\\'``) in a regular expression would have to be "
"prefixed with another one to escape it.  For example, the two following "
"lines of code are functionally identical:"
msgstr ""

#: ../../library/re.rst:1297
msgid ""
"When one wants to match a literal backslash, it must be escaped in the "
"regular expression.  With raw string notation, this means ``r\"\\\\\"``.  "
"Without raw string notation, one must use ``\"\\\\\\\\\"``, making the "
"following lines of code functionally identical:"
msgstr ""
