# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2020-02-29 09:30+0000\n"
"Last-Translator: Marco Rougeth <marco@rougeth.com>\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/"
"python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../library/xml.etree.elementtree.rst:2
msgid ":mod:`xml.etree.ElementTree` --- The ElementTree XML API"
msgstr "API XML ElementTree"

#: ../../library/xml.etree.elementtree.rst:11
msgid "**Source code:** :source:`Lib/xml/etree/ElementTree.py`"
msgstr "**Código Fonte:** :source:`Lib/xml/etree/ElementTree.py`"

#: ../../library/xml.etree.elementtree.rst:15
msgid ""
"The :class:`Element` type is a flexible container object, designed to store "
"hierarchical data structures in memory.  The type can be described as a "
"cross between a list and a dictionary."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:22
msgid ""
"The :mod:`xml.etree.ElementTree` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data "
"see :ref:`xml-vulnerabilities`."
msgstr ""
"O módulo :mod:`xml.etree.cElementTree` não é seguro contra dados "
"maliciosamente construídos. Se você precisa analisar dados não-confiáveis ou "
"não-autenticados seja  :ref:`xml-vulnerabilities`."

#: ../../library/xml.etree.elementtree.rst:27
msgid "Each element has a number of properties associated with it:"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:29
msgid ""
"a tag which is a string identifying what kind of data this element "
"represents (the element type, in other words)."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:32
msgid "a number of attributes, stored in a Python dictionary."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:34
msgid "a text string."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:36
msgid "an optional tail string."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:38
msgid "a number of child elements, stored in a Python sequence"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:40
msgid ""
"To create an element instance, use the :class:`Element` constructor or the :"
"func:`SubElement` factory function."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:43
msgid ""
"The :class:`ElementTree` class can be used to wrap an element structure, and "
"convert it from and to XML."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:46
msgid ""
"A C implementation of this API is available as :mod:`xml.etree.cElementTree`."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:48
msgid ""
"See http://effbot.org/zone/element-index.htm for tutorials and links to "
"other docs.  Fredrik Lundh's page is also the location of the development "
"version of the xml.etree.ElementTree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:52
msgid ""
"The ElementTree API is updated to 1.3.  For more information, see "
"`Introducing ElementTree 1.3 <http://effbot.org/zone/elementtree-13-intro."
"htm>`_."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:58
msgid "Tutorial"
msgstr "Tutorial"

#: ../../library/xml.etree.elementtree.rst:60
msgid ""
"This is a short tutorial for using :mod:`xml.etree.ElementTree` (``ET`` in "
"short).  The goal is to demonstrate some of the building blocks and basic "
"concepts of the module."
msgstr ""
"Esse é um tutorial curto para usar :mod:`xml.etree.ElementTree` (``ET`` na "
"versão resumida). O objetivo é demonstrar alguns conceitos básicos e trechos "
"de códigos do módulo."

#: ../../library/xml.etree.elementtree.rst:65
msgid "XML tree and elements"
msgstr "XML tree e elementos"

#: ../../library/xml.etree.elementtree.rst:67
msgid ""
"XML is an inherently hierarchical data format, and the most natural way to "
"represent it is with a tree.  ``ET`` has two classes for this purpose - :"
"class:`ElementTree` represents the whole XML document as a tree, and :class:"
"`Element` represents a single node in this tree.  Interactions with the "
"whole document (reading and writing to/from files) are usually done on the :"
"class:`ElementTree` level.  Interactions with a single XML element and its "
"sub-elements are done on the :class:`Element` level."
msgstr ""
"XML é um formato de dados estritamento hierárquico, e a maneira mais natural "
"de representá-lo é como uma árvore. ``ET`` possui duas classes para esse "
"propósito - :class:`ElementTree` representa todo o documento XML como uma "
"árvore e :class:`Element` representa um único nó desta árvore. Interações "
"com o documento inteiro (ler e escrever de/para arquivos) são frequentemente "
"feitos em nível de :class:`ElementTree`. Interações com um único elemento "
"XML e seus subelementos são feitos a nível de :class:`Element` ."

#: ../../library/xml.etree.elementtree.rst:78
msgid "Parsing XML"
msgstr "Analisar XML"

#: ../../library/xml.etree.elementtree.rst:80
msgid ""
"We'll be using the following XML document as the sample data for this "
"section:"
msgstr ""
"Nós utilizaremos o seguinte documento XML como exemplo de dados nessa seção:'"

#: ../../library/xml.etree.elementtree.rst:108
msgid ""
"We have a number of ways to import the data.  Reading the file from disk::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:114
msgid "Reading the data from a string::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:118
msgid ""
":func:`fromstring` parses XML from a string directly into an :class:"
"`Element`, which is the root element of the parsed tree.  Other parsing "
"functions may create an :class:`ElementTree`.  Check the documentation to be "
"sure."
msgstr ""
":func:`fromstring` obtém o XML de uma string e armazena em um :class:"
"`Element`, que será o elemento raiz dessa árvore. Outras funções de parsing "
"podem criar um  :class:`ElementTree`. Cheque a documentação para se "
"certificar sobre qual dado será retornado."

#: ../../library/xml.etree.elementtree.rst:122
msgid ""
"As an :class:`Element`, ``root`` has a tag and a dictionary of attributes::"
msgstr ""
"Assim como um :class:`Element`, os elementos raiz tem uma tag e um "
"dicionários de atributos:"

#: ../../library/xml.etree.elementtree.rst:129
msgid "It also has children nodes over which we can iterate::"
msgstr "Ele também tem nós filhos sobre os quais nós podemos iterar::"

#: ../../library/xml.etree.elementtree.rst:138
msgid "Children are nested, and we can access specific child nodes by index::"
msgstr ""
"Nós filhos são os mais próximos, e nós podemos especificá-los por índices::"

#: ../../library/xml.etree.elementtree.rst:144
msgid "Finding interesting elements"
msgstr "Encontrando elementos interessantes"

#: ../../library/xml.etree.elementtree.rst:146
msgid ""
":class:`Element` has some useful methods that help iterate recursively over "
"all the sub-tree below it (its children, their children, and so on).  For "
"example, :meth:`Element.iter`::"
msgstr ""
":class:`Element` possui alguns métodos úteis que ajudam a iterar "
"recursivamente sobre toda a subárvore abaixo dele (seus filhos, seus filhos "
"e assim por diante). Por exemplo, :meth:`Element.iter`::"

#: ../../library/xml.etree.elementtree.rst:159
msgid ""
":meth:`Element.findall` finds only elements with a tag which are direct "
"children of the current element.  :meth:`Element.find` finds the *first* "
"child with a particular tag, and :attr:`Element.text` accesses the element's "
"text content.  :meth:`Element.get` accesses the element's attributes::"
msgstr ""
":meth:`Element.findall` encontra apenas elementos com uma tag que são filhos "
"diretos do elemento atual. :meth:`Element.find` encontra o *primeiro* filho "
"com uma tag específica, e :attr:`Element.text` acessa o conteúdo de texto do "
"elemento. :meth:`Element.get` acessa os atributos do elemento::"

#: ../../library/xml.etree.elementtree.rst:173
msgid ""
"More sophisticated specification of which elements to look for is possible "
"by using :ref:`XPath <elementtree-xpath>`."
msgstr ""
"Uma especificação mais sofisticada de quais elementos procurar é possível "
"usando :ref:`XPath <elementtree-xpath>`."

#: ../../library/xml.etree.elementtree.rst:177
msgid "Modifying an XML File"
msgstr "Modificando um arquivo XML"

#: ../../library/xml.etree.elementtree.rst:179
msgid ""
":class:`ElementTree` provides a simple way to build XML documents and write "
"them to files. The :meth:`ElementTree.write` method serves this purpose."
msgstr ""
":class:`ElementTree` fornece uma maneira simples de construir documentos XML "
"e escrevê-los em arquivos. O método :meth:`ElementTree.write` serve para "
"esse propósito."

#: ../../library/xml.etree.elementtree.rst:182
msgid ""
"Once created, an :class:`Element` object may be manipulated by directly "
"changing its fields (such as :attr:`Element.text`), adding and modifying "
"attributes (:meth:`Element.set` method), as well as adding new children (for "
"example with :meth:`Element.append`)."
msgstr ""
"Uma vez criado, um objeto :class:`Element` pode ser manipulado alterando "
"diretamente seus campos (como :attr:`Element.text`), adicionando e "
"modificando atributos (método :meth:`Element.set`), bem como como adicionar "
"novos filhos (por exemplo, com :meth:`Element.append`)."

#: ../../library/xml.etree.elementtree.rst:187
msgid ""
"Let's say we want to add one to each country's rank, and add an ``updated`` "
"attribute to the rank element::"
msgstr ""
"Digamos que queremos adicionar um à classificação de cada país e adicionar "
"um atributo ``updated`` ao elemento de classificação::"

#: ../../library/xml.etree.elementtree.rst:197
#: ../../library/xml.etree.elementtree.rst:235
msgid "Our XML now looks like this:"
msgstr "Nosso XML agora se parece com isto:"

#: ../../library/xml.etree.elementtree.rst:225
msgid ""
"We can remove elements using :meth:`Element.remove`.  Let's say we want to "
"remove all countries with a rank higher than 50::"
msgstr ""
"Podemos remover elementos usando :meth:`Element.remove`. Digamos que "
"queremos remover todos os países com classificação superior a 50::"

#: ../../library/xml.etree.elementtree.rst:257
msgid "Building XML documents"
msgstr "Construindo documentos XML"

#: ../../library/xml.etree.elementtree.rst:259
msgid ""
"The :func:`SubElement` function also provides a convenient way to create new "
"sub-elements for a given element::"
msgstr ""
"A função :func:`SubElement` também fornece uma maneira conveniente de criar "
"novos subelementos para um determinado elemento::"

#: ../../library/xml.etree.elementtree.rst:270
msgid "Parsing XML with Namespaces"
msgstr "Analisando XML com espaços de nomes"

#: ../../library/xml.etree.elementtree.rst:272
msgid ""
"If the XML input has `namespaces <https://en.wikipedia.org/wiki/"
"XML_namespace>`__, tags and attributes with prefixes in the form ``prefix:"
"sometag`` get expanded to ``{uri}sometag`` where the *prefix* is replaced by "
"the full *URI*. Also, if there is a `default namespace <https://www.w3.org/"
"TR/xml-names/#defaulting>`__, that full URI gets prepended to all of the non-"
"prefixed tags."
msgstr ""
"Se a entrada XML tiver `espaços de nomes <https://en.wikipedia.org/wiki/"
"XML_namespace>`__, tags e atributos com prefixos no formato ``prefixo:"
"algumatag`` serão expandidos para ``{uri}algumatag`` onde *prefixo* é "
"substituído pelo *URI* completo. Além disso, se houver um `espaço de nomes "
"padrão <https://www.w3.org/TR/xml-names/#defaulting>`__, esse URI completo "
"será anexado a todas as tags não prefixadas."

#: ../../library/xml.etree.elementtree.rst:280
msgid ""
"Here is an XML example that incorporates two namespaces, one with the prefix "
"\"fictional\" and the other serving as the default namespace:"
msgstr ""
"Aqui está um exemplo XML que incorpora dois espaços de nomes, um com o "
"prefixo \"fictional\" e outro servindo como espaço de nomes padrão:"

#: ../../library/xml.etree.elementtree.rst:301
msgid ""
"One way to search and explore this XML example is to manually add the URI to "
"every tag or attribute in the xpath of a :meth:`~Element.find` or :meth:"
"`~Element.findall`::"
msgstr ""
"Uma maneira de pesquisar e explorar este exemplo XML é adicionar manualmente "
"o URI a cada tag ou atributo no xpath de um :meth:`~Element.find` ou :meth:"
"`~Element.findall`::"

#: ../../library/xml.etree.elementtree.rst:313
msgid ""
"A better way to search the namespaced XML example is to create a dictionary "
"with your own prefixes and use those in the search functions::"
msgstr ""
"A melhor maneira de pesquisar o exemplo XML com espaço de nomes é criar um "
"dicionário com seus próprios prefixos e usá-los nas funções de pesquisa::"

#: ../../library/xml.etree.elementtree.rst:325
msgid "These two approaches both output::"
msgstr "Essas duas abordagens resultam no seguinte::"

#: ../../library/xml.etree.elementtree.rst:337
msgid "Additional resources"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:339
msgid ""
"See http://effbot.org/zone/element-index.htm for tutorials and links to "
"other docs."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:345
msgid "XPath support"
msgstr "Suporte a XPath"

#: ../../library/xml.etree.elementtree.rst:347
msgid ""
"This module provides limited support for `XPath expressions <https://www.w3."
"org/TR/xpath>`_ for locating elements in a tree.  The goal is to support a "
"small subset of the abbreviated syntax; a full XPath engine is outside the "
"scope of the module."
msgstr ""
"Este módulo fornece suporte limitado para `expressões XPath <https://www.w3."
"org/TR/xpath>`_ para localizar elementos em uma árvore. O objetivo é "
"oferecer suporte a um pequeno subconjunto da sintaxe abreviada; um mecanismo "
"XPath completo está fora do escopo do módulo."

#: ../../library/xml.etree.elementtree.rst:353
msgid "Example"
msgstr "Exemplo"

#: ../../library/xml.etree.elementtree.rst:355
msgid ""
"Here's an example that demonstrates some of the XPath capabilities of the "
"module.  We'll be using the ``countrydata`` XML document from the :ref:"
"`Parsing XML <elementtree-parsing-xml>` section::"
msgstr ""
"Aqui está um exemplo que demonstra alguns dos recursos XPath do módulo. "
"Estaremos usando o documento XML ``countrydata`` da seção :ref:`Analisando "
"XML <elementtree-parsing-xml>`::"

#: ../../library/xml.etree.elementtree.rst:380
msgid "Supported XPath syntax"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:385
msgid "Syntax"
msgstr "Sintaxe"

#: ../../library/xml.etree.elementtree.rst:385
msgid "Meaning"
msgstr "Significado"

#: ../../library/xml.etree.elementtree.rst:387
msgid "``tag``"
msgstr "``tag``"

#: ../../library/xml.etree.elementtree.rst:387
msgid ""
"Selects all child elements with the given tag. For example, ``spam`` selects "
"all child elements named ``spam``, and ``spam/egg`` selects all "
"grandchildren named ``egg`` in all children named ``spam``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:393
msgid "``*``"
msgstr "``*``"

#: ../../library/xml.etree.elementtree.rst:393
msgid ""
"Selects all child elements.  For example, ``*/egg`` selects all "
"grandchildren named ``egg``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:396
msgid "``.``"
msgstr "``.``"

#: ../../library/xml.etree.elementtree.rst:396
msgid ""
"Selects the current node.  This is mostly useful at the beginning of the "
"path, to indicate that it's a relative path."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:400
msgid "``//``"
msgstr "``//``"

#: ../../library/xml.etree.elementtree.rst:400
msgid ""
"Selects all subelements, on all levels beneath the current  element.  For "
"example, ``.//egg`` selects all ``egg`` elements in the entire tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:404
msgid "``..``"
msgstr "``..``"

#: ../../library/xml.etree.elementtree.rst:404
msgid "Selects the parent element."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:406
msgid "``[@attrib]``"
msgstr "``[@attrib]``"

#: ../../library/xml.etree.elementtree.rst:406
msgid "Selects all elements that have the given attribute."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:408
msgid "``[@attrib='value']``"
msgstr "``[@attrib='value']``"

#: ../../library/xml.etree.elementtree.rst:408
msgid ""
"Selects all elements for which the given attribute has the given value.  The "
"value cannot contain quotes."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:412
msgid "``[tag]``"
msgstr "``[tag]``"

#: ../../library/xml.etree.elementtree.rst:412
msgid ""
"Selects all elements that have a child named ``tag``.  Only immediate "
"children are supported."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:415
msgid "``[tag='text']``"
msgstr "``[tag='text']``"

#: ../../library/xml.etree.elementtree.rst:415
msgid ""
"Selects all elements that have a child named ``tag`` whose complete text "
"content, including descendants, equals the given ``text``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:419
msgid "``[position]``"
msgstr "``[position]``"

#: ../../library/xml.etree.elementtree.rst:419
msgid ""
"Selects all elements that are located at the given position.  The position "
"can be either an integer (1 is the first position), the expression "
"``last()`` (for the last position), or a position relative to the last "
"position (e.g. ``last()-1``)."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:426
msgid ""
"Predicates (expressions within square brackets) must be preceded by a tag "
"name, an asterisk, or another predicate.  ``position`` predicates must be "
"preceded by a tag name."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:431
msgid "Reference"
msgstr "Referência"

#: ../../library/xml.etree.elementtree.rst:436
msgid "Functions"
msgstr "Funções"

#: ../../library/xml.etree.elementtree.rst:441
msgid ""
"Comment element factory.  This factory function creates a special element "
"that will be serialized as an XML comment by the standard serializer.  The "
"comment string can be either a bytestring or a Unicode string.  *text* is a "
"string containing the comment string.  Returns an element instance "
"representing a comment."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:450
msgid ""
"Writes an element tree or element structure to sys.stdout.  This function "
"should be used for debugging only."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:453
msgid ""
"The exact output format is implementation dependent.  In this version, it's "
"written as an ordinary XML file."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:456
msgid "*elem* is an element tree or an individual element."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:461
msgid ""
"Parses an XML section from a string constant.  Same as :func:`XML`.  *text* "
"is a string containing XML data.  Returns an :class:`Element` instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:467
msgid ""
"Parses an XML document from a sequence of string fragments.  *sequence* is a "
"list or other sequence containing XML data fragments.  *parser* is an "
"optional parser instance.  If not given, the standard :class:`XMLParser` "
"parser is used.  Returns an :class:`Element` instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:477
msgid ""
"Checks if an object appears to be a valid element object.  *element* is an "
"element instance.  Returns a true value if this is an element object."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:483
msgid ""
"Parses an XML section into an element tree incrementally, and reports what's "
"going on to the user.  *source* is a filename or file object containing XML "
"data.  *events* is a list of events to report back.  If omitted, only "
"\"end\" events are reported.  *parser* is an optional parser instance.  If "
"not given, the standard :class:`XMLParser` parser is used.  *parser* is not "
"supported by ``cElementTree``. Returns an :term:`iterator` providing "
"``(event, elem)`` pairs."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:493
msgid ""
":func:`iterparse` only guarantees that it has seen the \">\" character of a "
"starting tag when it emits a \"start\" event, so the attributes are defined, "
"but the contents of the text and tail attributes are undefined at that "
"point.  The same applies to the element children; they may or may not be "
"present."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:499
msgid "If you need a fully populated element, look for \"end\" events instead."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:504
msgid ""
"Parses an XML section into an element tree.  *source* is a filename or file "
"object containing XML data.  *parser* is an optional parser instance.  If "
"not given, the standard :class:`XMLParser` parser is used.  Returns an :"
"class:`ElementTree` instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:512
msgid ""
"PI element factory.  This factory function creates a special element that "
"will be serialized as an XML processing instruction.  *target* is a string "
"containing the PI target.  *text* is a string containing the PI contents, if "
"given.  Returns an element instance, representing a processing instruction."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:520
msgid ""
"Registers a namespace prefix.  The registry is global, and any existing "
"mapping for either the given prefix or the namespace URI will be removed. "
"*prefix* is a namespace prefix.  *uri* is a namespace uri.  Tags and "
"attributes in this namespace will be serialized with the given prefix, if at "
"all possible."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:531
msgid ""
"Subelement factory.  This function creates an element instance, and appends "
"it to an existing element."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:534
msgid ""
"The element name, attribute names, and attribute values can be either "
"bytestrings or Unicode strings.  *parent* is the parent element.  *tag* is "
"the subelement name.  *attrib* is an optional dictionary, containing element "
"attributes.  *extra* contains additional attributes, given as keyword "
"arguments.  Returns an element instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:543
msgid ""
"Generates a string representation of an XML element, including all "
"subelements.  *element* is an :class:`Element` instance.  *encoding* [1]_ is "
"the output encoding (default is US-ASCII).  *method* is either ``\"xml\"``, "
"``\"html\"`` or ``\"text\"`` (default is ``\"xml\"``).  Returns an encoded "
"string containing the XML data."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:552
msgid ""
"Generates a string representation of an XML element, including all "
"subelements.  *element* is an :class:`Element` instance.  *encoding* [1]_ is "
"the output encoding (default is US-ASCII).   *method* is either ``\"xml\"``, "
"``\"html\"`` or ``\"text\"`` (default is ``\"xml\"``).  Returns a list of "
"encoded strings containing the XML data.  It does not guarantee any specific "
"sequence, except that ``\"\".join(tostringlist(element)) == "
"tostring(element)``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:565
msgid ""
"Parses an XML section from a string constant.  This function can be used to "
"embed \"XML literals\" in Python code.  *text* is a string containing XML "
"data.  *parser* is an optional parser instance.  If not given, the standard :"
"class:`XMLParser` parser is used.  Returns an :class:`Element` instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:573
msgid ""
"Parses an XML section from a string constant, and also returns a dictionary "
"which maps from element id:s to elements.  *text* is a string containing XML "
"data.  *parser* is an optional parser instance.  If not given, the standard :"
"class:`XMLParser` parser is used.  Returns a tuple containing an :class:"
"`Element` instance and a dictionary."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:583
msgid "Element Objects"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:587
msgid ""
"Element class.  This class defines the Element interface, and provides a "
"reference implementation of this interface."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:590
msgid ""
"The element name, attribute names, and attribute values can be either "
"bytestrings or Unicode strings.  *tag* is the element name.  *attrib* is an "
"optional dictionary, containing element attributes.  *extra* contains "
"additional attributes, given as keyword arguments."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:598
msgid ""
"A string identifying what kind of data this element represents (the element "
"type, in other words)."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:605
msgid ""
"These attributes can be used to hold additional data associated with the "
"element.  Their values are usually strings but may be any application-"
"specific object.  If the element is created from an XML file, the *text* "
"attribute holds either the text between the element's start tag and its "
"first child or end tag, or ``None``, and the *tail* attribute holds either "
"the text between the element's end tag and the next tag, or ``None``.  For "
"the XML data"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:617
msgid ""
"the *a* element has ``None`` for both *text* and *tail* attributes, the *b* "
"element has *text* ``\"1\"`` and *tail* ``\"4\"``, the *c* element has "
"*text* ``\"2\"`` and *tail* ``None``, and the *d* element has *text* "
"``None`` and *tail* ``\"3\"``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:622
msgid ""
"To collect the inner text of an element, see :meth:`itertext`, for example "
"``\"\".join(element.itertext())``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:625
msgid "Applications may store arbitrary objects in these attributes."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:630
msgid ""
"A dictionary containing the element's attributes.  Note that while the "
"*attrib* value is always a real mutable Python dictionary, an ElementTree "
"implementation may choose to use another internal representation, and create "
"the dictionary only if someone asks for it.  To take advantage of such "
"implementations, use the dictionary methods below whenever possible."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:636
msgid "The following dictionary-like methods work on the element attributes."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:641
msgid ""
"Resets an element.  This function removes all subelements, clears all "
"attributes, and sets the text and tail attributes to ``None``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:647
msgid "Gets the element attribute named *key*."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:649
msgid ""
"Returns the attribute value, or *default* if the attribute was not found."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:654
msgid ""
"Returns the element attributes as a sequence of (name, value) pairs.  The "
"attributes are returned in an arbitrary order."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:660
msgid ""
"Returns the elements attribute names as a list.  The names are returned in "
"an arbitrary order."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:666
msgid "Set the attribute *key* on the element to *value*."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:668
msgid "The following methods work on the element's children (subelements)."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:673
msgid ""
"Adds the element *subelement* to the end of this elements internal list of "
"subelements."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:679
msgid ""
"Appends *subelements* from a sequence object with zero or more elements. "
"Raises :exc:`AssertionError` if a subelement is not a valid object."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:687
msgid ""
"Finds the first subelement matching *match*.  *match* may be a tag name or "
"path.  Returns an element instance or ``None``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:693
msgid ""
"Finds all matching subelements, by tag name or path.  Returns a list "
"containing all matching elements in document order."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:699
msgid ""
"Finds text for the first subelement matching *match*.  *match* may be a tag "
"name or path.  Returns the text content of the first matching element, or "
"*default* if no element was found.  Note that if the matching element has no "
"text content an empty string is returned."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:707
msgid "Use ``list(elem)`` or iteration."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:713
msgid "Use method :meth:`Element.iter` instead."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:719
msgid "Inserts a subelement at the given position in this element."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:724
msgid ""
"Creates a tree :term:`iterator` with the current element as the root. The "
"iterator iterates over this element and all elements below it, in document "
"(depth first) order.  If *tag* is not ``None`` or ``'*'``, only elements "
"whose tag equals *tag* are returned from the iterator.  If the tree "
"structure is modified during iteration, the result is undefined."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:735
msgid ""
"Finds all matching subelements, by tag name or path.  Returns an iterable "
"yielding all matching elements in document order."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:743
msgid ""
"Creates a text iterator.  The iterator loops over this element and all "
"subelements, in document order, and returns all inner text."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:751
msgid ""
"Creates a new element object of the same type as this element.  Do not call "
"this method, use the :func:`SubElement` factory function instead."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:757
msgid ""
"Removes *subelement* from the element.  Unlike the find\\* methods this "
"method compares elements based on the instance identity, not on tag value or "
"contents."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:761
msgid ""
":class:`Element` objects also support the following sequence type methods "
"for working with subelements: :meth:`~object.__delitem__`, :meth:`~object."
"__getitem__`, :meth:`~object.__setitem__`, :meth:`~object.__len__`."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:766
msgid ""
"Caution: Elements with no subelements will test as ``False``.  This behavior "
"will change in future versions.  Use specific ``len(elem)`` or ``elem is "
"None`` test instead. ::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:782
msgid "ElementTree Objects"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:787
msgid ""
"ElementTree wrapper class.  This class represents an entire element "
"hierarchy, and adds some extra support for serialization to and from "
"standard XML."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:791
msgid ""
"*element* is the root element.  The tree is initialized with the contents of "
"the XML *file* if given."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:797
msgid ""
"Replaces the root element for this tree.  This discards the current contents "
"of the tree, and replaces it with the given element.  Use with care.  "
"*element* is an element instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:804
msgid "Same as :meth:`Element.find`, starting at the root of the tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:809
msgid "Same as :meth:`Element.findall`, starting at the root of the tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:814
msgid "Same as :meth:`Element.findtext`, starting at the root of the tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:819
msgid "Use method :meth:`ElementTree.iter` instead."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:825
msgid "Returns the root element for this tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:830
msgid ""
"Creates and returns a tree iterator for the root element.  The iterator "
"loops over all elements in this tree, in section order.  *tag* is the tag to "
"look for (default is to return all elements)."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:837
msgid ""
"Finds all matching subelements, by tag name or path.  Same as getroot()."
"iterfind(match). Returns an iterable yielding all matching elements in "
"document order."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:846
msgid ""
"Loads an external XML section into this element tree.  *source* is a file "
"name or file object.  *parser* is an optional parser instance.  If not "
"given, the standard XMLParser parser is used.  Returns the section root "
"element."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:855
msgid ""
"Writes the element tree to a file, as XML.  *file* is a file name, or a file "
"object opened for writing.  *encoding* [1]_ is the output encoding (default "
"is US-ASCII).  *xml_declaration* controls if an XML declaration should be "
"added to the file.  Use ``False`` for never, ``True`` for always, ``None`` "
"for only if not US-ASCII or UTF-8 (default is ``None``).  "
"*default_namespace* sets the default XML namespace (for \"xmlns\").  "
"*method* is either ``\"xml\"``, ``\"html\"`` or ``\"text\"`` (default is "
"``\"xml\"``).  Returns an encoded string."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:864
msgid "This is the XML file that is going to be manipulated::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:876
msgid ""
"Example of changing the attribute \"target\" of every link in first "
"paragraph::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:896
msgid "QName Objects"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:901
msgid ""
"QName wrapper.  This can be used to wrap a QName attribute value, in order "
"to get proper namespace handling on output.  *text_or_uri* is a string "
"containing the QName value, in the form {uri}local, or, if the tag argument "
"is given, the URI part of a QName.  If *tag* is given, the first argument is "
"interpreted as a URI, and this argument is interpreted as a local name. :"
"class:`QName` instances are opaque."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:912
msgid "TreeBuilder Objects"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:917
msgid ""
"Generic element structure builder.  This builder converts a sequence of "
"start, data, and end method calls to a well-formed element structure.  You "
"can use this class to build an element structure using a custom XML parser, "
"or a parser for some other XML-like format.  The *element_factory* is called "
"to create new :class:`Element` instances when given."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:926
msgid ""
"Flushes the builder buffers, and returns the toplevel document element.  "
"Returns an :class:`Element` instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:932
msgid ""
"Adds text to the current element.  *data* is a string.  This should be "
"either a bytestring, or a Unicode string."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:938
msgid ""
"Closes the current element.  *tag* is the element name.  Returns the closed "
"element."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:944
msgid ""
"Opens a new element.  *tag* is the element name.  *attrs* is a dictionary "
"containing element attributes.  Returns the opened element."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:948
msgid ""
"In addition, a custom :class:`TreeBuilder` object can provide the following "
"method:"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:953
msgid ""
"Handles a doctype declaration.  *name* is the doctype name.  *pubid* is the "
"public identifier.  *system* is the system identifier.  This method does not "
"exist on the default :class:`TreeBuilder` class."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:963
msgid "XMLParser Objects"
msgstr "Objetos XMLParser"

#: ../../library/xml.etree.elementtree.rst:968
msgid ""
":class:`Element` structure builder for XML source data, based on the expat "
"parser.  *html* are predefined HTML entities.  This flag is not supported by "
"the current implementation.  *target* is the target object.  If omitted, the "
"builder uses an instance of the standard TreeBuilder class.  *encoding* [1]_ "
"is optional.  If given, the value overrides the encoding specified in the "
"XML file."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:978
msgid "Finishes feeding data to the parser.  Returns an element structure."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:983
msgid ""
"Define the :meth:`TreeBuilder.doctype` method on a custom TreeBuilder target."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:990
msgid "Feeds data to the parser.  *data* is encoded data."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:992
msgid ""
":meth:`XMLParser.feed` calls *target*\\'s :meth:`start` method for each "
"opening tag, its :meth:`end` method for each closing tag, and data is "
"processed by method :meth:`data`.  :meth:`XMLParser.close` calls "
"*target*\\'s method :meth:`close`. :class:`XMLParser` can be used not only "
"for building a tree structure. This is an example of counting the maximum "
"depth of an XML file::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1033
msgid "Footnotes"
msgstr "Notas de Rodapé"

#: ../../library/xml.etree.elementtree.rst:1034
msgid ""
"The encoding string included in XML output should conform to the appropriate "
"standards.  For example, \"UTF-8\" is valid, but \"UTF8\" is not.  See "
"https://www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl and https://"
"www.iana.org/assignments/character-sets/character-sets.xhtml."
msgstr ""
