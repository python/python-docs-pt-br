# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Welington Carlos <wcarlos3@gmail.com>, 2021
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2021
# Leticia Portella <leportella@gmail.com>, 2021
# i17obot <i17obot@rougeth.com>, 2021
# Marco Rougeth <marco@rougeth.com>, 2021
# And Past <andrepgs@gmail.com>, 2021
# Ana Dulce Padovan Torres <anadulcepadovan@gmail.com>, 2021
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-11 14:21+0000\n"
"PO-Revision-Date: 2021-06-28 01:18+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/xml.etree.elementtree.rst:2
msgid ":mod:`!xml.etree.ElementTree` --- The ElementTree XML API"
msgstr ":mod:`!xml.etree.ElementTree` --- A API XML ElementTree"

#: ../../library/xml.etree.elementtree.rst:9
msgid "**Source code:** :source:`Lib/xml/etree/ElementTree.py`"
msgstr "**Código-fonte:** :source:`Lib/xml/etree/ElementTree.py`"

#: ../../library/xml.etree.elementtree.rst:13
msgid ""
"The :mod:`xml.etree.ElementTree` module implements a simple and efficient "
"API for parsing and creating XML data."
msgstr ""
"O módulo :mod:`xml.etree.ElementTree` implementa uma API simples e eficiente "
"para análise e criação de dados XML."

#: ../../library/xml.etree.elementtree.rst:16
msgid "This module will use a fast implementation whenever available."
msgstr "Este módulo usará uma implementação rápida sempre que disponível."

#: ../../library/xml.etree.elementtree.rst:19
msgid "The :mod:`!xml.etree.cElementTree` module is deprecated."
msgstr "O módulo :mod:`!xml.etree.cElementTree` foi descontinuado."

#: ../../library/xml.etree.elementtree.rst:25
msgid ""
"If you need to parse untrusted or unauthenticated data, see :ref:`xml-"
"security`."
msgstr ""
"Se você precisar analisar dados não confiáveis ou não autenticados, "
"consulte :ref:`xml-security`."

#: ../../library/xml.etree.elementtree.rst:29
msgid "Tutorial"
msgstr "Tutorial"

#: ../../library/xml.etree.elementtree.rst:31
msgid ""
"This is a short tutorial for using :mod:`xml.etree.ElementTree` (``ET`` in "
"short).  The goal is to demonstrate some of the building blocks and basic "
"concepts of the module."
msgstr ""
"Esse é um tutorial curto para usar :mod:`xml.etree.ElementTree` (``ET`` na "
"versão resumida). O objetivo é demonstrar alguns conceitos básicos e trechos "
"de códigos do módulo."

#: ../../library/xml.etree.elementtree.rst:36
msgid "XML tree and elements"
msgstr "Árvore e elementos XML"

#: ../../library/xml.etree.elementtree.rst:38
msgid ""
"XML is an inherently hierarchical data format, and the most natural way to "
"represent it is with a tree.  ``ET`` has two classes for this purpose - :"
"class:`ElementTree` represents the whole XML document as a tree, and :class:"
"`Element` represents a single node in this tree.  Interactions with the "
"whole document (reading and writing to/from files) are usually done on the :"
"class:`ElementTree` level.  Interactions with a single XML element and its "
"sub-elements are done on the :class:`Element` level."
msgstr ""
"XML é um formato de dados estritamente hierárquico, e a maneira mais natural "
"de representá-lo é como uma árvore. ``ET`` possui duas classes para esse "
"propósito - :class:`ElementTree` representa todo o documento XML como uma "
"árvore e :class:`Element` representa um único nó desta árvore. Interações "
"com o documento inteiro (ler e escrever de/para arquivos) são frequentemente "
"feitos em nível de :class:`ElementTree`. Interações com um único elemento "
"XML e seus subelementos são feitos a nível de :class:`Element` ."

#: ../../library/xml.etree.elementtree.rst:49
msgid "Parsing XML"
msgstr "Analisando XML"

#: ../../library/xml.etree.elementtree.rst:51
msgid ""
"We'll be using the fictive :file:`country_data.xml` XML document as the "
"sample data for this section:"
msgstr ""
"Usaremos o documento XML fictício :file:`country_data.xml` como dados de "
"amostra para esta seção:"

#: ../../library/xml.etree.elementtree.rst:53
msgid ""
"<?xml version=\"1.0\"?>\n"
"<data>\n"
"    <country name=\"Liechtenstein\">\n"
"        <rank>1</rank>\n"
"        <year>2008</year>\n"
"        <gdppc>141100</gdppc>\n"
"        <neighbor name=\"Austria\" direction=\"E\"/>\n"
"        <neighbor name=\"Switzerland\" direction=\"W\"/>\n"
"    </country>\n"
"    <country name=\"Singapore\">\n"
"        <rank>4</rank>\n"
"        <year>2011</year>\n"
"        <gdppc>59900</gdppc>\n"
"        <neighbor name=\"Malaysia\" direction=\"N\"/>\n"
"    </country>\n"
"    <country name=\"Panama\">\n"
"        <rank>68</rank>\n"
"        <year>2011</year>\n"
"        <gdppc>13600</gdppc>\n"
"        <neighbor name=\"Costa Rica\" direction=\"W\"/>\n"
"        <neighbor name=\"Colombia\" direction=\"E\"/>\n"
"    </country>\n"
"</data>"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:79
msgid "We can import this data by reading from a file::"
msgstr "Nós podemos importar esses dados lendo de um arquivo::"

#: ../../library/xml.etree.elementtree.rst:81
msgid ""
"import xml.etree.ElementTree as ET\n"
"tree = ET.parse('country_data.xml')\n"
"root = tree.getroot()"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:85
msgid "Or directly from a string::"
msgstr "Ou diretamente de uma string::"

#: ../../library/xml.etree.elementtree.rst:87
msgid "root = ET.fromstring(country_data_as_string)"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:89
msgid ""
":func:`fromstring` parses XML from a string directly into an :class:"
"`Element`, which is the root element of the parsed tree.  Other parsing "
"functions may create an :class:`ElementTree`.  Check the documentation to be "
"sure."
msgstr ""
":func:`fromstring` obtém o XML de uma string e armazena em um :class:"
"`Element`, que será o elemento raiz dessa árvore. Outras funções de análise "
"sintática podem criar um :class:`ElementTree`. Cheque a documentação para se "
"certificar sobre qual dado será retornado."

#: ../../library/xml.etree.elementtree.rst:93
msgid ""
"As an :class:`Element`, ``root`` has a tag and a dictionary of attributes::"
msgstr ""
"Assim como um :class:`Element`, ``root`` tem uma tag e um dicionário de "
"atributos::"

#: ../../library/xml.etree.elementtree.rst:95
msgid ""
">>> root.tag\n"
"'data'\n"
">>> root.attrib\n"
"{}"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:100
msgid "It also has children nodes over which we can iterate::"
msgstr "Ele também tem nós filhos sobre os quais nós podemos iterar::"

#: ../../library/xml.etree.elementtree.rst:102
msgid ""
">>> for child in root:\n"
"...     print(child.tag, child.attrib)\n"
"...\n"
"country {'name': 'Liechtenstein'}\n"
"country {'name': 'Singapore'}\n"
"country {'name': 'Panama'}"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:109
msgid "Children are nested, and we can access specific child nodes by index::"
msgstr ""
"Nós filhos são os mais próximos, e nós podemos acessar nós específicos por "
"índices::"

#: ../../library/xml.etree.elementtree.rst:111
msgid ""
">>> root[0][1].text\n"
"'2008'"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:117
msgid ""
"Not all elements of the XML input will end up as elements of the parsed "
"tree. Currently, this module skips over any XML comments, processing "
"instructions, and document type declarations in the input. Nevertheless, "
"trees built using this module's API rather than parsing from XML text can "
"have comments and processing instructions in them; they will be included "
"when generating XML output. A document type declaration may be accessed by "
"passing a custom :class:`TreeBuilder` instance to the :class:`XMLParser` "
"constructor."
msgstr ""
"Nem todos os elementos da entrada XML acabarão como elementos da árvore "
"analisada. Atualmente, este módulo ignora quaisquer comentários XML, "
"instruções de processamento e declarações de tipo de documento na entrada. "
"No entanto, árvores construídas usando a API deste módulo, em vez de serem "
"analisadas a partir de texto XML, podem conter comentários e instruções de "
"processamento; eles serão incluídos ao gerar a saída XML. Uma declaração de "
"tipo de documento pode ser acessada passando uma instância personalizada :"
"class:`TreeBuilder` para o construtor :class:`XMLParser`."

#: ../../library/xml.etree.elementtree.rst:131
msgid "Pull API for non-blocking parsing"
msgstr "A API de pull para análise sem bloqueio"

#: ../../library/xml.etree.elementtree.rst:133
msgid ""
"Most parsing functions provided by this module require the whole document to "
"be read at once before returning any result.  It is possible to use an :"
"class:`XMLParser` and feed data into it incrementally, but it is a push API "
"that calls methods on a callback target, which is too low-level and "
"inconvenient for most needs.  Sometimes what the user really wants is to be "
"able to parse XML incrementally, without blocking operations, while enjoying "
"the convenience of fully constructed :class:`Element` objects."
msgstr ""
"A maioria das funções de análise fornecidas por este módulo exigem que todo "
"o documento seja lido de uma só vez antes de retornar qualquer resultado. É "
"possível usar um :class:`XMLParser` e alimentar dados nele de forma "
"incremental, mas é uma API de push que chama métodos em um destino da função "
"de retorno, o que é de muito baixo nível e inconveniente para a maioria das "
"necessidades. Às vezes, o que o usuário realmente deseja é ser capaz de "
"analisar XML de forma incremental, sem operações bloqueantes, enquanto "
"desfruta da conveniência de objetos :class:`Element` totalmente construídos."

#: ../../library/xml.etree.elementtree.rst:141
msgid ""
"The most powerful tool for doing this is :class:`XMLPullParser`.  It does "
"not require a blocking read to obtain the XML data, and is instead fed with "
"data incrementally with :meth:`XMLPullParser.feed` calls.  To get the parsed "
"XML elements, call :meth:`XMLPullParser.read_events`.  Here is an example::"
msgstr ""
"A ferramenta mais poderosa para fazer isso é :class:`XMLPullParser`. Ela não "
"requer uma leitura bloqueante para obter os dados XML e, em vez disso, é "
"alimentada com dados de forma incremental com chamadas de :meth:"
"`XMLPullParser.feed`. Para obter os elementos XML analisados, chame :meth:"
"`XMLPullParser.read_events`. Aqui está um exemplo::"

#: ../../library/xml.etree.elementtree.rst:146
msgid ""
">>> parser = ET.XMLPullParser(['start', 'end'])\n"
">>> parser.feed('<mytag>sometext')\n"
">>> list(parser.read_events())\n"
"[('start', <Element 'mytag' at 0x7fa66db2be58>)]\n"
">>> parser.feed(' more text</mytag>')\n"
">>> for event, elem in parser.read_events():\n"
"...     print(event)\n"
"...     print(elem.tag, 'text=', elem.text)\n"
"...\n"
"end\n"
"mytag text= sometext more text"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:158
msgid ""
"The obvious use case is applications that operate in a non-blocking fashion "
"where the XML data is being received from a socket or read incrementally "
"from some storage device.  In such cases, blocking reads are unacceptable."
msgstr ""
"O caso de uso óbvio são aplicações que operam sem bloqueio, onde os dados "
"XML são recebidos de um soquete ou lidos de forma incremental de algum "
"dispositivo de armazenamento. Nesses casos, leituras bloqueantes são "
"inaceitáveis."

#: ../../library/xml.etree.elementtree.rst:162
msgid ""
"Because it's so flexible, :class:`XMLPullParser` can be inconvenient to use "
"for simpler use-cases.  If you don't mind your application blocking on "
"reading XML data but would still like to have incremental parsing "
"capabilities, take a look at :func:`iterparse`.  It can be useful when "
"you're reading a large XML document and don't want to hold it wholly in "
"memory."
msgstr ""
"Por ser tão flexível, :class:`XMLPullParser` pode ser inconveniente de usar "
"em casos de uso mais simples. Se você não se importa que sua aplicação "
"bloqueie a leitura de dados XML, mas ainda assim gostaria de ter recursos de "
"análise incremental, dê uma olhada em :func:`iterparse`. Pode ser útil "
"quando você está lendo um documento XML grande e não deseja mantê-lo "
"totalmente na memória."

#: ../../library/xml.etree.elementtree.rst:168
msgid ""
"Where *immediate* feedback through events is wanted, calling method :meth:"
"`XMLPullParser.flush` can help reduce delay; please make sure to study the "
"related security notes."
msgstr ""
"Onde o feedback *imediato* através de eventos é desejado, chamar o método :"
"meth:`XMLPullParser.flush` pode ajudar a reduzir o atraso; certifique-se de "
"estudar as notas de segurança relacionadas."

#: ../../library/xml.etree.elementtree.rst:174
msgid "Finding interesting elements"
msgstr "Encontrando elementos interessantes"

#: ../../library/xml.etree.elementtree.rst:176
msgid ""
":class:`Element` has some useful methods that help iterate recursively over "
"all the sub-tree below it (its children, their children, and so on).  For "
"example, :meth:`Element.iter`::"
msgstr ""
":class:`Element` possui alguns métodos úteis que ajudam a iterar "
"recursivamente sobre toda a subárvore abaixo dele (seus filhos, seus filhos "
"e assim por diante). Por exemplo, :meth:`Element.iter`::"

#: ../../library/xml.etree.elementtree.rst:180
msgid ""
">>> for neighbor in root.iter('neighbor'):\n"
"...     print(neighbor.attrib)\n"
"...\n"
"{'name': 'Austria', 'direction': 'E'}\n"
"{'name': 'Switzerland', 'direction': 'W'}\n"
"{'name': 'Malaysia', 'direction': 'N'}\n"
"{'name': 'Costa Rica', 'direction': 'W'}\n"
"{'name': 'Colombia', 'direction': 'E'}"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:189
msgid ""
":meth:`Element.findall` finds only elements with a tag which are direct "
"children of the current element.  :meth:`Element.find` finds the *first* "
"child with a particular tag, and :attr:`Element.text` accesses the element's "
"text content.  :meth:`Element.get` accesses the element's attributes::"
msgstr ""
":meth:`Element.findall` encontra apenas elementos com uma tag que são filhos "
"diretos do elemento atual. :meth:`Element.find` encontra o *primeiro* filho "
"com uma tag específica, e :attr:`Element.text` acessa o conteúdo de texto do "
"elemento. :meth:`Element.get` acessa os atributos do elemento::"

#: ../../library/xml.etree.elementtree.rst:194
msgid ""
">>> for country in root.findall('country'):\n"
"...     rank = country.find('rank').text\n"
"...     name = country.get('name')\n"
"...     print(name, rank)\n"
"...\n"
"Liechtenstein 1\n"
"Singapore 4\n"
"Panama 68"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:203
msgid ""
"More sophisticated specification of which elements to look for is possible "
"by using :ref:`XPath <elementtree-xpath>`."
msgstr ""
"Uma especificação mais sofisticada de quais elementos procurar é possível "
"usando :ref:`XPath <elementtree-xpath>`."

#: ../../library/xml.etree.elementtree.rst:207
msgid "Modifying an XML File"
msgstr "Modificando um arquivo XML"

#: ../../library/xml.etree.elementtree.rst:209
msgid ""
":class:`ElementTree` provides a simple way to build XML documents and write "
"them to files. The :meth:`ElementTree.write` method serves this purpose."
msgstr ""
":class:`ElementTree` fornece uma maneira simples de construir documentos XML "
"e escrevê-los em arquivos. O método :meth:`ElementTree.write` serve para "
"esse propósito."

#: ../../library/xml.etree.elementtree.rst:212
msgid ""
"Once created, an :class:`Element` object may be manipulated by directly "
"changing its fields (such as :attr:`Element.text`), adding and modifying "
"attributes (:meth:`Element.set` method), as well as adding new children (for "
"example with :meth:`Element.append`)."
msgstr ""
"Uma vez criado, um objeto :class:`Element` pode ser manipulado alterando "
"diretamente seus campos (como :attr:`Element.text`), adicionando e "
"modificando atributos (método :meth:`Element.set`), bem como como adicionar "
"novos filhos (por exemplo, com :meth:`Element.append`)."

#: ../../library/xml.etree.elementtree.rst:217
msgid ""
"Let's say we want to add one to each country's rank, and add an ``updated`` "
"attribute to the rank element::"
msgstr ""
"Digamos que queremos adicionar um à classificação de cada país e adicionar "
"um atributo ``updated`` ao elemento de classificação::"

#: ../../library/xml.etree.elementtree.rst:220
msgid ""
">>> for rank in root.iter('rank'):\n"
"...     new_rank = int(rank.text) + 1\n"
"...     rank.text = str(new_rank)\n"
"...     rank.set('updated', 'yes')\n"
"...\n"
">>> tree.write('output.xml')"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:227
#: ../../library/xml.etree.elementtree.rst:271
msgid "Our XML now looks like this:"
msgstr "Nosso XML agora se parece com isto:"

#: ../../library/xml.etree.elementtree.rst:229
msgid ""
"<?xml version=\"1.0\"?>\n"
"<data>\n"
"    <country name=\"Liechtenstein\">\n"
"        <rank updated=\"yes\">2</rank>\n"
"        <year>2008</year>\n"
"        <gdppc>141100</gdppc>\n"
"        <neighbor name=\"Austria\" direction=\"E\"/>\n"
"        <neighbor name=\"Switzerland\" direction=\"W\"/>\n"
"    </country>\n"
"    <country name=\"Singapore\">\n"
"        <rank updated=\"yes\">5</rank>\n"
"        <year>2011</year>\n"
"        <gdppc>59900</gdppc>\n"
"        <neighbor name=\"Malaysia\" direction=\"N\"/>\n"
"    </country>\n"
"    <country name=\"Panama\">\n"
"        <rank updated=\"yes\">69</rank>\n"
"        <year>2011</year>\n"
"        <gdppc>13600</gdppc>\n"
"        <neighbor name=\"Costa Rica\" direction=\"W\"/>\n"
"        <neighbor name=\"Colombia\" direction=\"E\"/>\n"
"    </country>\n"
"</data>"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:255
msgid ""
"We can remove elements using :meth:`Element.remove`.  Let's say we want to "
"remove all countries with a rank higher than 50::"
msgstr ""
"Podemos remover elementos usando :meth:`Element.remove`. Digamos que "
"queremos remover todos os países com classificação superior a 50::"

#: ../../library/xml.etree.elementtree.rst:258
msgid ""
">>> for country in root.findall('country'):\n"
"...     # using root.findall() to avoid removal during traversal\n"
"...     rank = int(country.find('rank').text)\n"
"...     if rank > 50:\n"
"...         root.remove(country)\n"
"...\n"
">>> tree.write('output.xml')"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:266
msgid ""
"Note that concurrent modification while iterating can lead to problems, just "
"like when iterating and modifying Python lists or dicts. Therefore, the "
"example first collects all matching elements with ``root.findall()``, and "
"only then iterates over the list of matches."
msgstr ""
"Observe que a modificação simultânea durante a iteração pode levar a "
"problemas, assim como ao iterar e modificar listas ou dicionários do Python. "
"Portanto, o exemplo primeiro coleta todos os elementos correspondentes com "
"``root.findall()``, e só então itera sobre a lista de correspondências."

#: ../../library/xml.etree.elementtree.rst:273
msgid ""
"<?xml version=\"1.0\"?>\n"
"<data>\n"
"    <country name=\"Liechtenstein\">\n"
"        <rank updated=\"yes\">2</rank>\n"
"        <year>2008</year>\n"
"        <gdppc>141100</gdppc>\n"
"        <neighbor name=\"Austria\" direction=\"E\"/>\n"
"        <neighbor name=\"Switzerland\" direction=\"W\"/>\n"
"    </country>\n"
"    <country name=\"Singapore\">\n"
"        <rank updated=\"yes\">5</rank>\n"
"        <year>2011</year>\n"
"        <gdppc>59900</gdppc>\n"
"        <neighbor name=\"Malaysia\" direction=\"N\"/>\n"
"    </country>\n"
"</data>"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:293
msgid "Building XML documents"
msgstr "Construindo documentos XML"

#: ../../library/xml.etree.elementtree.rst:295
msgid ""
"The :func:`SubElement` function also provides a convenient way to create new "
"sub-elements for a given element::"
msgstr ""
"A função :func:`SubElement` também fornece uma maneira conveniente de criar "
"novos subelementos para um determinado elemento::"

#: ../../library/xml.etree.elementtree.rst:298
msgid ""
">>> a = ET.Element('a')\n"
">>> b = ET.SubElement(a, 'b')\n"
">>> c = ET.SubElement(a, 'c')\n"
">>> d = ET.SubElement(c, 'd')\n"
">>> ET.dump(a)\n"
"<a><b /><c><d /></c></a>"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:306
msgid "Parsing XML with Namespaces"
msgstr "Analisando XML com espaços de nomes"

#: ../../library/xml.etree.elementtree.rst:308
msgid ""
"If the XML input has `namespaces <https://en.wikipedia.org/wiki/"
"XML_namespace>`__, tags and attributes with prefixes in the form ``prefix:"
"sometag`` get expanded to ``{uri}sometag`` where the *prefix* is replaced by "
"the full *URI*. Also, if there is a `default namespace <https://www.w3.org/"
"TR/xml-names/#defaulting>`__, that full URI gets prepended to all of the non-"
"prefixed tags."
msgstr ""
"Se a entrada XML tiver `espaços de nomes <https://en.wikipedia.org/wiki/"
"XML_namespace>`__, tags e atributos com prefixos no formato ``prefixo:"
"algumatag`` serão expandidos para ``{uri}algumatag`` onde *prefixo* é "
"substituído pelo *URI* completo. Além disso, se houver um `espaço de nomes "
"padrão <https://www.w3.org/TR/xml-names/#defaulting>`__, esse URI completo "
"será anexado a todas as tags não prefixadas."

#: ../../library/xml.etree.elementtree.rst:316
msgid ""
"Here is an XML example that incorporates two namespaces, one with the prefix "
"\"fictional\" and the other serving as the default namespace:"
msgstr ""
"Aqui está um exemplo XML que incorpora dois espaços de nomes, um com o "
"prefixo \"fictional\" e outro servindo como espaço de nomes padrão:"

#: ../../library/xml.etree.elementtree.rst:319
msgid ""
"<?xml version=\"1.0\"?>\n"
"<actors xmlns:fictional=\"http://characters.example.com\"\n"
"        xmlns=\"http://people.example.com\">\n"
"    <actor>\n"
"        <name>John Cleese</name>\n"
"        <fictional:character>Lancelot</fictional:character>\n"
"        <fictional:character>Archie Leach</fictional:character>\n"
"    </actor>\n"
"    <actor>\n"
"        <name>Eric Idle</name>\n"
"        <fictional:character>Sir Robin</fictional:character>\n"
"        <fictional:character>Gunther</fictional:character>\n"
"        <fictional:character>Commander Clement</fictional:character>\n"
"    </actor>\n"
"</actors>"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:337
msgid ""
"One way to search and explore this XML example is to manually add the URI to "
"every tag or attribute in the xpath of a :meth:`~Element.find` or :meth:"
"`~Element.findall`::"
msgstr ""
"Uma maneira de pesquisar e explorar este exemplo XML é adicionar manualmente "
"o URI a cada tag ou atributo no xpath de um :meth:`~Element.find` ou :meth:"
"`~Element.findall`::"

#: ../../library/xml.etree.elementtree.rst:341
msgid ""
"root = fromstring(xml_text)\n"
"for actor in root.findall('{http://people.example.com}actor'):\n"
"    name = actor.find('{http://people.example.com}name')\n"
"    print(name.text)\n"
"    for char in actor.findall('{http://characters.example.com}character'):\n"
"        print(' |-->', char.text)"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:348
msgid ""
"A better way to search the namespaced XML example is to create a dictionary "
"with your own prefixes and use those in the search functions::"
msgstr ""
"A melhor maneira de pesquisar o exemplo XML com espaço de nomes é criar um "
"dicionário com seus próprios prefixos e usá-los nas funções de pesquisa::"

#: ../../library/xml.etree.elementtree.rst:351
msgid ""
"ns = {'real_person': 'http://people.example.com',\n"
"      'role': 'http://characters.example.com'}\n"
"\n"
"for actor in root.findall('real_person:actor', ns):\n"
"    name = actor.find('real_person:name', ns)\n"
"    print(name.text)\n"
"    for char in actor.findall('role:character', ns):\n"
"        print(' |-->', char.text)"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:360
msgid "These two approaches both output::"
msgstr "Essas duas abordagens resultam no seguinte::"

#: ../../library/xml.etree.elementtree.rst:362
msgid ""
"John Cleese\n"
" |--> Lancelot\n"
" |--> Archie Leach\n"
"Eric Idle\n"
" |--> Sir Robin\n"
" |--> Gunther\n"
" |--> Commander Clement"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:374
msgid "XPath support"
msgstr "Suporte a XPath"

#: ../../library/xml.etree.elementtree.rst:376
msgid ""
"This module provides limited support for `XPath expressions <https://www.w3."
"org/TR/xpath>`_ for locating elements in a tree.  The goal is to support a "
"small subset of the abbreviated syntax; a full XPath engine is outside the "
"scope of the module."
msgstr ""
"Este módulo fornece suporte limitado para `expressões XPath <https://www.w3."
"org/TR/xpath>`_ para localizar elementos em uma árvore. O objetivo é "
"oferecer suporte a um pequeno subconjunto da sintaxe abreviada; um mecanismo "
"XPath completo está fora do escopo do módulo."

#: ../../library/xml.etree.elementtree.rst:382
#: ../../library/xml.etree.elementtree.rst:781
msgid "Example"
msgstr "Exemplo"

#: ../../library/xml.etree.elementtree.rst:384
msgid ""
"Here's an example that demonstrates some of the XPath capabilities of the "
"module.  We'll be using the ``countrydata`` XML document from the :ref:"
"`Parsing XML <elementtree-parsing-xml>` section::"
msgstr ""
"Aqui está um exemplo que demonstra alguns dos recursos XPath do módulo. "
"Estaremos usando o documento XML ``countrydata`` da seção :ref:`Analisando "
"XML <elementtree-parsing-xml>`::"

#: ../../library/xml.etree.elementtree.rst:388
msgid ""
"import xml.etree.ElementTree as ET\n"
"\n"
"root = ET.fromstring(countrydata)\n"
"\n"
"# Top-level elements\n"
"root.findall(\".\")\n"
"\n"
"# All 'neighbor' grand-children of 'country' children of the top-level\n"
"# elements\n"
"root.findall(\"./country/neighbor\")\n"
"\n"
"# Nodes with name='Singapore' that have a 'year' child\n"
"root.findall(\".//year/..[@name='Singapore']\")\n"
"\n"
"# 'year' nodes that are children of nodes with name='Singapore'\n"
"root.findall(\".//*[@name='Singapore']/year\")\n"
"\n"
"# All 'neighbor' nodes that are the second child of their parent\n"
"root.findall(\".//neighbor[2]\")"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:408
msgid ""
"For XML with namespaces, use the usual qualified ``{namespace}tag`` "
"notation::"
msgstr ""
"Para XML com espaços de nomes, use a notação qualificada usual ``{espaço-de-"
"nomes}tag``::"

#: ../../library/xml.etree.elementtree.rst:410
msgid ""
"# All dublin-core \"title\" tags in the document\n"
"root.findall(\".//{http://purl.org/dc/elements/1.1/}title\")"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:415
msgid "Supported XPath syntax"
msgstr "Підтримуваний синтаксис XPath"

#: ../../library/xml.etree.elementtree.rst:420
msgid "Syntax"
msgstr "Sintaxe"

#: ../../library/xml.etree.elementtree.rst:420
msgid "Meaning"
msgstr "Significado"

#: ../../library/xml.etree.elementtree.rst:422
msgid "``tag``"
msgstr "``tag``"

#: ../../library/xml.etree.elementtree.rst:422
msgid ""
"Selects all child elements with the given tag. For example, ``spam`` selects "
"all child elements named ``spam``, and ``spam/egg`` selects all "
"grandchildren named ``egg`` in all children named ``spam``.  ``{namespace}"
"*`` selects all tags in the given namespace, ``{*}spam`` selects tags named "
"``spam`` in any (or no) namespace, and ``{}*`` only selects tags that are "
"not in a namespace."
msgstr ""
"Вибирає всі дочірні елементи з заданим тегом. Наприклад, ``spam`` вибирає "
"всі дочірні елементи з іменем ``spam``, а ``spam/egg`` вибирає всіх онуків з "
"іменем ``egg`` у всіх дочірніх елементах з іменем ``spam``. ``{namespace}*`` "
"вибирає всі теги в заданому просторі імен, ``{*}spam`` вибирає теги з назвою "
"``spam`` у будь-якому просторі імен (або без нього), а ``{}*`` лише вибирає "
"теги, які не знаходяться в просторі імен."

#: ../../library/xml.etree.elementtree.rst:431
msgid "Support for star-wildcards was added."
msgstr "Додано підтримку символів підстановки зірок."

#: ../../library/xml.etree.elementtree.rst:434
msgid "``*``"
msgstr "``*``"

#: ../../library/xml.etree.elementtree.rst:434
msgid ""
"Selects all child elements, including comments and processing instructions.  "
"For example, ``*/egg`` selects all grandchildren named ``egg``."
msgstr ""
"Вибирає всі дочірні елементи, включаючи коментарі та інструкції з обробки. "
"Наприклад, ``*/egg`` вибирає всіх онуків з іменем ``egg``."

#: ../../library/xml.etree.elementtree.rst:438
msgid "``.``"
msgstr "``.``"

#: ../../library/xml.etree.elementtree.rst:438
msgid ""
"Selects the current node.  This is mostly useful at the beginning of the "
"path, to indicate that it's a relative path."
msgstr ""
"Вибирає поточний вузол. Це здебільшого корисно на початку шляху, щоб "
"вказати, що це відносний шлях."

#: ../../library/xml.etree.elementtree.rst:442
msgid "``//``"
msgstr "``//``"

#: ../../library/xml.etree.elementtree.rst:442
msgid ""
"Selects all subelements, on all levels beneath the current  element.  For "
"example, ``.//egg`` selects all ``egg`` elements in the entire tree."
msgstr ""
"Вибирає всі піделементи на всіх рівнях під поточним елементом. Наприклад, "
"``.//egg`` вибирає всі елементи ``egg`` у всьому дереві."

#: ../../library/xml.etree.elementtree.rst:446
msgid "``..``"
msgstr "``..``"

#: ../../library/xml.etree.elementtree.rst:446
msgid ""
"Selects the parent element.  Returns ``None`` if the path attempts to reach "
"the ancestors of the start element (the element ``find`` was called on)."
msgstr ""
"Вибирає батьківський елемент. Повертає ``None``, якщо шлях намагається "
"досягти предків початкового елемента (був викликаний елемент ``find``)."

#: ../../library/xml.etree.elementtree.rst:450
msgid "``[@attrib]``"
msgstr "``[@attrib]``"

#: ../../library/xml.etree.elementtree.rst:450
msgid "Selects all elements that have the given attribute."
msgstr "Вибирає всі елементи, які мають заданий атрибут."

#: ../../library/xml.etree.elementtree.rst:452
msgid "``[@attrib='value']``"
msgstr "``[@attrib='value']``"

#: ../../library/xml.etree.elementtree.rst:452
msgid ""
"Selects all elements for which the given attribute has the given value.  The "
"value cannot contain quotes."
msgstr ""
"Вибирає всі елементи, для яких даний атрибут має задане значення. Значення "
"не може містити лапки."

#: ../../library/xml.etree.elementtree.rst:456
msgid "``[@attrib!='value']``"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:456
msgid ""
"Selects all elements for which the given attribute does not have the given "
"value. The value cannot contain quotes."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:462
msgid "``[tag]``"
msgstr "``[tag]``"

#: ../../library/xml.etree.elementtree.rst:462
msgid ""
"Selects all elements that have a child named ``tag``.  Only immediate "
"children are supported."
msgstr ""
"Вибирає всі елементи, які мають дочірні елементи з іменем ``tag``. "
"Утримуються лише найближчі діти."

#: ../../library/xml.etree.elementtree.rst:465
msgid "``[.='text']``"
msgstr "``[.='text']``"

#: ../../library/xml.etree.elementtree.rst:465
msgid ""
"Selects all elements whose complete text content, including descendants, "
"equals the given ``text``."
msgstr ""
"Вибирає всі елементи, повний текстовий вміст яких, включаючи нащадків, "
"дорівнює заданому ``тексту``."

#: ../../library/xml.etree.elementtree.rst:470
msgid "``[.!='text']``"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:470
msgid ""
"Selects all elements whose complete text content, including descendants, "
"does not equal the given ``text``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:476
msgid "``[tag='text']``"
msgstr "``[tag='text']``"

#: ../../library/xml.etree.elementtree.rst:476
msgid ""
"Selects all elements that have a child named ``tag`` whose complete text "
"content, including descendants, equals the given ``text``."
msgstr ""
"Вибирає всі елементи, які мають дочірні елементи з назвою ``tag``, повний "
"текстовий вміст яких, включаючи нащадків, дорівнює заданому ``text``."

#: ../../library/xml.etree.elementtree.rst:480
msgid "``[tag!='text']``"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:480
msgid ""
"Selects all elements that have a child named ``tag`` whose complete text "
"content, including descendants, does not equal the given ``text``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:486
msgid "``[position]``"
msgstr "``[position]``"

#: ../../library/xml.etree.elementtree.rst:486
msgid ""
"Selects all elements that are located at the given position.  The position "
"can be either an integer (1 is the first position), the expression "
"``last()`` (for the last position), or a position relative to the last "
"position (e.g. ``last()-1``)."
msgstr ""
"Вибирає всі елементи, які розташовані на заданій позиції. Позиція може бути "
"цілим числом (1 — перша позиція), виразом ``last()`` (для останньої позиції) "
"або позицією відносно останньої позиції (наприклад, ``last()-1`` )."

#: ../../library/xml.etree.elementtree.rst:493
msgid ""
"Predicates (expressions within square brackets) must be preceded by a tag "
"name, an asterisk, or another predicate.  ``position`` predicates must be "
"preceded by a tag name."
msgstr ""
"Предикати (вирази в квадратних дужках) мають передувати назві тегу, зірочці "
"або іншому предикату. Предикатам ``position`` має передувати ім’я тегу."

#: ../../library/xml.etree.elementtree.rst:498
#: ../../library/xml.etree.elementtree.rst:833
msgid "Reference"
msgstr "Referência"

#: ../../library/xml.etree.elementtree.rst:503
#: ../../library/xml.etree.elementtree.rst:838
msgid "Functions"
msgstr "Funções"

#: ../../library/xml.etree.elementtree.rst:507
msgid "`C14N 2.0 <https://www.w3.org/TR/xml-c14n2/>`_ transformation function."
msgstr "`C14N 2.0 <https://www.w3.org/TR/xml-c14n2/>`_ функція перетворення."

#: ../../library/xml.etree.elementtree.rst:509
msgid ""
"Canonicalization is a way to normalise XML output in a way that allows byte-"
"by-byte comparisons and digital signatures.  It reduces the freedom that XML "
"serializers have and instead generates a more constrained XML "
"representation.  The main restrictions regard the placement of namespace "
"declarations, the ordering of attributes, and ignorable whitespace."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:515
msgid ""
"This function takes an XML data string (*xml_data*) or a file path or file-"
"like object (*from_file*) as input, converts it to the canonical form, and "
"writes it out using the *out* file(-like) object, if provided, or returns it "
"as a text string if not.  The output file receives text, not bytes.  It "
"should therefore be opened in text mode with ``utf-8`` encoding."
msgstr ""
"Ця функція приймає рядок XML-даних (*xml_data*) або шлях до файлу або "
"файлоподібний об’єкт (*from_file*) як вхідні дані, перетворює їх у канонічну "
"форму та записує за допомогою *out* file(-like) об’єкт, якщо він наданий, "
"або повертає його як текстовий рядок, якщо ні. Вихідний файл отримує текст, "
"а не байти. Тому його слід відкривати в текстовому режимі з кодуванням "
"``utf-8``."

#: ../../library/xml.etree.elementtree.rst:522
msgid "Typical uses::"
msgstr "Типове використання::"

#: ../../library/xml.etree.elementtree.rst:524
msgid ""
"xml_data = \"<root>...</root>\"\n"
"print(canonicalize(xml_data))\n"
"\n"
"with open(\"c14n_output.xml\", mode='w', encoding='utf-8') as out_file:\n"
"    canonicalize(xml_data, out=out_file)\n"
"\n"
"with open(\"c14n_output.xml\", mode='w', encoding='utf-8') as out_file:\n"
"    canonicalize(from_file=\"inputfile.xml\", out=out_file)"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:533
msgid "The configuration *options* are as follows:"
msgstr "*Параметри* конфігурації такі:"

#: ../../library/xml.etree.elementtree.rst:535
msgid "*with_comments*: set to true to include comments (default: false)"
msgstr ""
"*with_comments*: установіть значення true, щоб включити коментарі (за "
"замовчуванням: false)"

#: ../../library/xml.etree.elementtree.rst:536
msgid ""
"*strip_text*: set to true to strip whitespace before and after text content"
msgstr ""
"*strip_text*: установіть значення true, щоб видалити пробіли перед і після "
"текстового вмісту"

#: ../../library/xml.etree.elementtree.rst:537
#: ../../library/xml.etree.elementtree.rst:539
msgid "(default: false)"
msgstr "(за замовчуванням: false)"

#: ../../library/xml.etree.elementtree.rst:538
msgid ""
"*rewrite_prefixes*: set to true to replace namespace prefixes by "
"\"n{number}\""
msgstr ""
"*rewrite_prefixes*: встановлено значення true, щоб замінити префікси "
"простору імен на \"n{number}\""

#: ../../library/xml.etree.elementtree.rst:540
msgid "*qname_aware_tags*: a set of qname aware tag names in which prefixes"
msgstr "*qname_aware_tags*: набір імен тегів qname, у яких префікси"

#: ../../library/xml.etree.elementtree.rst:541
#: ../../library/xml.etree.elementtree.rst:543
msgid "should be replaced in text content (default: empty)"
msgstr "слід замінити в текстовому вмісті (за замовчуванням: пусто)"

#: ../../library/xml.etree.elementtree.rst:542
msgid ""
"*qname_aware_attrs*: a set of qname aware attribute names in which prefixes"
msgstr ""
"*qname_aware_attrs*: набір імен атрибутів, що підтримують qname, у яких "
"префікси"

#: ../../library/xml.etree.elementtree.rst:544
msgid "*exclude_attrs*: a set of attribute names that should not be serialised"
msgstr ""
"*exclude_attrs*: набір імен атрибутів, які не повинні бути серіалізовані"

#: ../../library/xml.etree.elementtree.rst:545
msgid "*exclude_tags*: a set of tag names that should not be serialised"
msgstr "*exclude_tags*: набір імен тегів, які не повинні бути серіалізовані"

#: ../../library/xml.etree.elementtree.rst:547
msgid ""
"In the option list above, \"a set\" refers to any collection or iterable of "
"strings, no ordering is expected."
msgstr ""
"У наведеному вище списку параметрів \"набір\" відноситься до будь-якої "
"колекції або ітерації рядків, упорядкування не очікується."

#: ../../library/xml.etree.elementtree.rst:555
msgid ""
"Comment element factory.  This factory function creates a special element "
"that will be serialized as an XML comment by the standard serializer.  The "
"comment string can be either a bytestring or a Unicode string.  *text* is a "
"string containing the comment string.  Returns an element instance "
"representing a comment."
msgstr ""
"Фабрика елементів коментарів. Ця фабрична функція створює спеціальний "
"елемент, який буде серіалізовано як коментар XML стандартним серіалізатором. "
"Рядок коментаря може бути байтовим рядком або рядком Unicode. *text* – це "
"рядок, що містить рядок коментаря. Повертає екземпляр елемента, що "
"представляє коментар."

#: ../../library/xml.etree.elementtree.rst:561
msgid ""
"Note that :class:`XMLParser` skips over comments in the input instead of "
"creating comment objects for them. An :class:`ElementTree` will only contain "
"comment nodes if they have been inserted into to the tree using one of the :"
"class:`Element` methods."
msgstr ""
"Зауважте, що :class:`XMLParser` пропускає коментарі у вхідних даних замість "
"того, щоб створювати для них об’єкти коментарів. :class:`ElementTree` "
"міститиме лише вузли коментарів, якщо вони були вставлені в дерево за "
"допомогою одного з методів :class:`Element`."

#: ../../library/xml.etree.elementtree.rst:568
msgid ""
"Writes an element tree or element structure to sys.stdout.  This function "
"should be used for debugging only."
msgstr ""
"Записує дерево елементів або структуру елементів у sys.stdout. Цю функцію "
"слід використовувати лише для налагодження."

#: ../../library/xml.etree.elementtree.rst:571
msgid ""
"The exact output format is implementation dependent.  In this version, it's "
"written as an ordinary XML file."
msgstr ""
"Точний вихідний формат залежить від реалізації. У цій версії він написаний "
"як звичайний файл XML."

#: ../../library/xml.etree.elementtree.rst:574
msgid "*elem* is an element tree or an individual element."
msgstr "*elem* — дерево елементів або окремий елемент."

#: ../../library/xml.etree.elementtree.rst:576
msgid ""
"The :func:`dump` function now preserves the attribute order specified by the "
"user."
msgstr ""
"Функція :func:`dump` тепер зберігає порядок атрибутів, указаний користувачем."

#: ../../library/xml.etree.elementtree.rst:583
msgid ""
"Parses an XML section from a string constant.  Same as :func:`XML`.  *text* "
"is a string containing XML data.  *parser* is an optional parser instance. "
"If not given, the standard :class:`XMLParser` parser is used. Returns an :"
"class:`Element` instance."
msgstr ""
"Розбирає розділ XML із константи рядка. Те саме, що :func:`XML`. *текст* — "
"це рядок, що містить дані XML. *parser* є необов’язковим екземпляром "
"парсера. Якщо не вказано, використовується стандартний аналізатор :class:"
"`XMLParser`. Повертає екземпляр :class:`Element`."

#: ../../library/xml.etree.elementtree.rst:591
msgid ""
"Parses an XML document from a sequence of string fragments.  *sequence* is a "
"list or other sequence containing XML data fragments.  *parser* is an "
"optional parser instance.  If not given, the standard :class:`XMLParser` "
"parser is used.  Returns an :class:`Element` instance."
msgstr ""
"Розбирає XML-документ із послідовності фрагментів рядків. *послідовність* — "
"це список або інша послідовність, що містить фрагменти даних XML. *parser* є "
"необов’язковим екземпляром парсера. Якщо не вказано, використовується "
"стандартний аналізатор :class:`XMLParser`. Повертає екземпляр :class:"
"`Element`."

#: ../../library/xml.etree.elementtree.rst:601
msgid ""
"Appends whitespace to the subtree to indent the tree visually. This can be "
"used to generate pretty-printed XML output. *tree* can be an Element or "
"ElementTree.  *space* is the whitespace string that will be inserted for "
"each indentation level, two space characters by default.  For indenting "
"partial subtrees inside of an already indented tree, pass the initial "
"indentation level as *level*."
msgstr ""
"До піддерева додає пробіли для візуального відступу дерева. Це можна "
"використати для генерації красивого друкованого виводу XML. *дерево* може "
"бути елементом або деревом елементів. *пробіл* — це пробільний рядок, який "
"буде вставлено для кожного рівня відступу, два символи пробілу за "
"замовчуванням. Для відступу часткових піддерев усередині дерева з відступами "
"передайте початковий рівень відступу як *level*."

#: ../../library/xml.etree.elementtree.rst:613
msgid ""
"Check if an object appears to be a valid element object.  *element* is an "
"element instance.  Return ``True`` if this is an element object."
msgstr ""
"Перевірте, чи об’єкт є дійсним об’єктом елемента. *element* — екземпляр "
"елемента. Повертає ``True``, якщо це об’єкт елемента."

#: ../../library/xml.etree.elementtree.rst:619
msgid ""
"Parses an XML section into an element tree incrementally, and reports what's "
"going on to the user.  *source* is a filename or :term:`file object` "
"containing XML data.  *events* is a sequence of events to report back.  The "
"supported events are the strings ``\"start\"``, ``\"end\"``, "
"``\"comment\"``, ``\"pi\"``, ``\"start-ns\"`` and ``\"end-ns\"`` (the \"ns\" "
"events are used to get detailed namespace information).  If *events* is "
"omitted, only ``\"end\"`` events are reported. *parser* is an optional "
"parser instance.  If not given, the standard :class:`XMLParser` parser is "
"used.  *parser* must be a subclass of :class:`XMLParser` and can only use "
"the default :class:`TreeBuilder` as a target. Returns an :term:`iterator` "
"providing ``(event, elem)`` pairs; it has a ``root`` attribute that "
"references the root element of the resulting XML tree once *source* is fully "
"read. The iterator has the :meth:`!close` method that closes the internal "
"file object if *source* is a filename."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:635
msgid ""
"Note that while :func:`iterparse` builds the tree incrementally, it issues "
"blocking reads on *source* (or the file it names).  As such, it's unsuitable "
"for applications where blocking reads can't be made.  For fully non-blocking "
"parsing, see :class:`XMLPullParser`."
msgstr ""
"Зауважте, що хоча :func:`iterparse` будує дерево поступово, він блокує "
"читання *source* (або файлу, який він називає). Таким чином, він не "
"підходить для додатків, де блокування зчитування неможливе. Повністю "
"неблокуючий аналіз див. :class:`XMLPullParser`."

#: ../../library/xml.etree.elementtree.rst:642
msgid ""
":func:`iterparse` only guarantees that it has seen the \">\" character of a "
"starting tag when it emits a \"start\" event, so the attributes are defined, "
"but the contents of the text and tail attributes are undefined at that "
"point.  The same applies to the element children; they may or may not be "
"present."
msgstr ""
":func:`iterparse` лише гарантує, що він побачив символ \">\" початкового "
"тегу, коли він випромінює подію \"start\", тому атрибути визначені, але "
"вміст атрибутів text і tail на цьому етапі не визначено . Те саме стосується "
"елемента діти; вони можуть бути або не бути присутніми."

#: ../../library/xml.etree.elementtree.rst:648
#: ../../library/xml.etree.elementtree.rst:1521
msgid "If you need a fully populated element, look for \"end\" events instead."
msgstr ""
"Якщо вам потрібен повністю заповнений елемент, шукайте події \"кінець\"."

#: ../../library/xml.etree.elementtree.rst:650
msgid "The *parser* argument."
msgstr "Аргумент *parser*."

#: ../../library/xml.etree.elementtree.rst:653
#: ../../library/xml.etree.elementtree.rst:1525
msgid "The ``comment`` and ``pi`` events were added."
msgstr "Додано події ``comment`` і ``pi``."

#: ../../library/xml.etree.elementtree.rst:656
msgid "Added the :meth:`!close` method."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:662
msgid ""
"Parses an XML section into an element tree.  *source* is a filename or file "
"object containing XML data.  *parser* is an optional parser instance.  If "
"not given, the standard :class:`XMLParser` parser is used.  Returns an :"
"class:`ElementTree` instance."
msgstr ""
"Розбирає розділ XML у дерево елементів. *джерело* — це ім’я файлу або об’єкт "
"файлу, що містить дані XML. *parser* є необов’язковим екземпляром парсера. "
"Якщо не вказано, використовується стандартний аналізатор :class:`XMLParser`. "
"Повертає екземпляр :class:`ElementTree`."

#: ../../library/xml.etree.elementtree.rst:670
msgid ""
"PI element factory.  This factory function creates a special element that "
"will be serialized as an XML processing instruction.  *target* is a string "
"containing the PI target.  *text* is a string containing the PI contents, if "
"given.  Returns an element instance, representing a processing instruction."
msgstr ""
"Завод ПІ-елементів. Ця фабрична функція створює спеціальний елемент, який "
"буде серіалізовано як інструкцію обробки XML. *target* — це рядок, що "
"містить ціль PI. *текст* — це рядок, що містить вміст PI, якщо його вказано. "
"Повертає екземпляр елемента, що представляє інструкцію обробки."

#: ../../library/xml.etree.elementtree.rst:675
msgid ""
"Note that :class:`XMLParser` skips over processing instructions in the input "
"instead of creating PI objects for them. An :class:`ElementTree` will only "
"contain processing instruction nodes if they have been inserted into to the "
"tree using one of the :class:`Element` methods."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:683
msgid ""
"Registers a namespace prefix.  The registry is global, and any existing "
"mapping for either the given prefix or the namespace URI will be removed. "
"*prefix* is a namespace prefix.  *uri* is a namespace uri.  Tags and "
"attributes in this namespace will be serialized with the given prefix, if at "
"all possible."
msgstr ""
"Реєструє префікс простору імен. Реєстр є глобальним, і будь-яке існуюче "
"відображення для заданого префікса або URI простору імен буде видалено. "
"*префікс* — це префікс простору імен. *uri* — це uri простору імен. Теги й "
"атрибути в цьому просторі імен будуть серіалізовані з заданим префіксом, "
"якщо це взагалі можливо."

#: ../../library/xml.etree.elementtree.rst:694
msgid ""
"Subelement factory.  This function creates an element instance, and appends "
"it to an existing element."
msgstr ""
"Піделементний завод. Ця функція створює екземпляр елемента та додає його до "
"існуючого елемента."

#: ../../library/xml.etree.elementtree.rst:697
msgid ""
"The element name, attribute names, and attribute values can be either "
"bytestrings or Unicode strings.  *parent* is the parent element.  *tag* is "
"the subelement name.  *attrib* is an optional dictionary, containing element "
"attributes.  *extra* contains additional attributes, given as keyword "
"arguments.  Returns an element instance."
msgstr ""
"Ім’я елемента, назви атрибутів і значення атрибутів можуть бути байтовими "
"рядками або рядками Unicode. *parent* є батьківським елементом. *тег* — це "
"назва піделемента. *attrib* — необов’язковий словник, що містить атрибути "
"елемента. *extra* містить додаткові атрибути, надані як аргументи ключових "
"слів. Повертає екземпляр елемента."

#: ../../library/xml.etree.elementtree.rst:708
msgid ""
"Generates a string representation of an XML element, including all "
"subelements.  *element* is an :class:`Element` instance.  *encoding* [1]_ is "
"the output encoding (default is US-ASCII).  Use ``encoding=\"unicode\"`` to "
"generate a Unicode string (otherwise, a bytestring is generated).  *method* "
"is either ``\"xml\"``, ``\"html\"`` or ``\"text\"`` (default is "
"``\"xml\"``). *xml_declaration*, *default_namespace* and "
"*short_empty_elements* has the same meaning as in :meth:`ElementTree.write`. "
"Returns an (optionally) encoded string containing the XML data."
msgstr ""
"Створює рядкове представлення елемента XML, включаючи всі піделементи. "
"*element* є екземпляром :class:`Element`. *кодування* [1]_ — вихідне "
"кодування (за замовчуванням — US-ASCII). Використовуйте "
"``encoding=\"unicode\"``, щоб створити рядок Юнікод (інакше буде згенеровано "
"байтовий рядок). *method* — це ``\"xml\"``, ``\"html\"`` або ``\"text\"`` "
"(за замовчуванням ``\"xml\"``). *xml_declaration*, *default_namespace* і "
"*short_empty_elements* мають те саме значення, що й у :meth:`ElementTree."
"write`. Повертає (необов’язково) закодований рядок, що містить дані XML."

#: ../../library/xml.etree.elementtree.rst:717
#: ../../library/xml.etree.elementtree.rst:744
#: ../../library/xml.etree.elementtree.rst:1198
msgid "Added the *short_empty_elements* parameter."
msgstr "Foi adicionado o parâmetro *short_empty_elements*."

#: ../../library/xml.etree.elementtree.rst:720
#: ../../library/xml.etree.elementtree.rst:747
msgid "Added the *xml_declaration* and *default_namespace* parameters."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:723
msgid ""
"The :func:`tostring` function now preserves the attribute order specified by "
"the user."
msgstr ""
"Функція :func:`tostring` тепер зберігає порядок атрибутів, указаний "
"користувачем."

#: ../../library/xml.etree.elementtree.rst:732
msgid ""
"Generates a string representation of an XML element, including all "
"subelements.  *element* is an :class:`Element` instance.  *encoding* [1]_ is "
"the output encoding (default is US-ASCII).  Use ``encoding=\"unicode\"`` to "
"generate a Unicode string (otherwise, a bytestring is generated).  *method* "
"is either ``\"xml\"``, ``\"html\"`` or ``\"text\"`` (default is "
"``\"xml\"``). *xml_declaration*, *default_namespace* and "
"*short_empty_elements* has the same meaning as in :meth:`ElementTree.write`. "
"Returns a list of (optionally) encoded strings containing the XML data. It "
"does not guarantee any specific sequence, except that ``b\"\"."
"join(tostringlist(element)) == tostring(element)``."
msgstr ""
"Створює рядкове представлення елемента XML, включаючи всі піделементи. "
"*element* є екземпляром :class:`Element`. *кодування* [1]_ — вихідне "
"кодування (за замовчуванням — US-ASCII). Використовуйте "
"``encoding=\"unicode\"``, щоб створити рядок Юнікод (інакше буде згенеровано "
"байтовий рядок). *method* — це ``\"xml\"``, ``\"html\"`` або ``\"text\"`` "
"(за замовчуванням ``\"xml\"``). *xml_declaration*, *default_namespace* і "
"*short_empty_elements* мають те саме значення, що й у :meth:`ElementTree."
"write`. Повертає список (необов’язково) закодованих рядків, що містять дані "
"XML. Це не гарантує жодної конкретної послідовності, за винятком того, що "
"``b\"\".join(tostringlist(element)) == tostring(element)``."

#: ../../library/xml.etree.elementtree.rst:750
msgid ""
"The :func:`tostringlist` function now preserves the attribute order "
"specified by the user."
msgstr ""
"Функція :func:`tostringlist` тепер зберігає порядок атрибутів, указаний "
"користувачем."

#: ../../library/xml.etree.elementtree.rst:757
msgid ""
"Parses an XML section from a string constant.  This function can be used to "
"embed \"XML literals\" in Python code.  *text* is a string containing XML "
"data.  *parser* is an optional parser instance.  If not given, the standard :"
"class:`XMLParser` parser is used.  Returns an :class:`Element` instance."
msgstr ""
"Розбирає розділ XML із константи рядка. Цю функцію можна використовувати для "
"вбудовування \"XML-літералів\" у код Python. *текст* — це рядок, що містить "
"дані XML. *parser* є необов’язковим екземпляром парсера. Якщо не вказано, "
"використовується стандартний аналізатор :class:`XMLParser`. Повертає "
"екземпляр :class:`Element`."

#: ../../library/xml.etree.elementtree.rst:765
msgid ""
"Parses an XML section from a string constant, and also returns a dictionary "
"which maps from element id:s to elements.  *text* is a string containing XML "
"data.  *parser* is an optional parser instance.  If not given, the standard :"
"class:`XMLParser` parser is used.  Returns a tuple containing an :class:"
"`Element` instance and a dictionary."
msgstr ""
"Розбирає розділ XML із константи рядка, а також повертає словник, який "
"відображає ідентифікатори елемента: елементи. *текст* — це рядок, що містить "
"дані XML. *parser* є необов’язковим екземпляром парсера. Якщо не вказано, "
"використовується стандартний аналізатор :class:`XMLParser`. Повертає кортеж, "
"що містить екземпляр :class:`Element` і словник."

#: ../../library/xml.etree.elementtree.rst:775
msgid "XInclude support"
msgstr "XInclude підтримка"

#: ../../library/xml.etree.elementtree.rst:777
msgid ""
"This module provides limited support for `XInclude directives <https://www."
"w3.org/TR/xinclude/>`_, via the :mod:`xml.etree.ElementInclude` helper "
"module.  This module can be used to insert subtrees and text strings into "
"element trees, based on information in the tree."
msgstr ""
"Цей модуль надає обмежену підтримку для `XInclude директив <https://www.w3."
"org/TR/xinclude/>`_ через допоміжний модуль :mod:`xml.etree.ElementInclude`. "
"Цей модуль можна використовувати для вставки піддерев і текстових рядків у "
"дерева елементів на основі інформації в дереві."

#: ../../library/xml.etree.elementtree.rst:783
msgid ""
"Here's an example that demonstrates use of the XInclude module. To include "
"an XML document in the current document, use the ``{http://www.w3.org/2001/"
"XInclude}include`` element and set the **parse** attribute to ``\"xml\"``, "
"and use the **href** attribute to specify the document to include."
msgstr ""
"Ось приклад, який демонструє використання модуля XInclude. Щоб включити XML-"
"документ у поточний документ, використовуйте елемент ``{http://www.w3."
"org/2001/XInclude}include`` і встановіть атрибут **parse** на ``\"xml\"`` і "
"використовуйте атрибут **href**, щоб указати документ, який потрібно "
"включити."

#: ../../library/xml.etree.elementtree.rst:785
msgid ""
"<?xml version=\"1.0\"?>\n"
"<document xmlns:xi=\"http://www.w3.org/2001/XInclude\">\n"
"  <xi:include href=\"source.xml\" parse=\"xml\" />\n"
"</document>"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:792
msgid ""
"By default, the **href** attribute is treated as a file name. You can use "
"custom loaders to override this behaviour. Also note that the standard "
"helper does not support XPointer syntax."
msgstr ""
"За замовчуванням атрибут **href** розглядається як ім’я файлу. Ви можете "
"використовувати спеціальні завантажувачі, щоб змінити цю поведінку. Також "
"зауважте, що стандартний помічник не підтримує синтаксис XPointer."

#: ../../library/xml.etree.elementtree.rst:794
msgid ""
"To process this file, load it as usual, and pass the root element to the :"
"mod:`xml.etree.ElementTree` module:"
msgstr ""
"Щоб обробити цей файл, завантажте його як зазвичай і передайте кореневий "
"елемент модулю :mod:`xml.etree.ElementTree`:"

#: ../../library/xml.etree.elementtree.rst:796
msgid ""
"from xml.etree import ElementTree, ElementInclude\n"
"\n"
"tree = ElementTree.parse(\"document.xml\")\n"
"root = tree.getroot()\n"
"\n"
"ElementInclude.include(root)"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:805
msgid ""
"The ElementInclude module replaces the ``{http://www.w3.org/2001/XInclude}"
"include`` element with the root element from the **source.xml** document. "
"The result might look something like this:"
msgstr ""
"Модуль ElementInclude замінює елемент ``{http://www.w3.org/2001/XInclude}"
"include`` на кореневий елемент із документа **source.xml**. Результат може "
"виглядати приблизно так:"

#: ../../library/xml.etree.elementtree.rst:807
msgid ""
"<document xmlns:xi=\"http://www.w3.org/2001/XInclude\">\n"
"  <para>This is a paragraph.</para>\n"
"</document>"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:813
msgid ""
"If the **parse** attribute is omitted, it defaults to \"xml\". The href "
"attribute is required."
msgstr ""
"Якщо атрибут **parse** пропущено, за замовчуванням він має значення \"xml\". "
"Потрібен атрибут href."

#: ../../library/xml.etree.elementtree.rst:815
msgid ""
"To include a text document, use the ``{http://www.w3.org/2001/XInclude}"
"include`` element, and set the **parse** attribute to \"text\":"
msgstr ""
"Щоб включити текстовий документ, використовуйте елемент ``{http://www.w3."
"org/2001/XInclude}include`` і встановіть атрибут **parse** на \"text\":"

#: ../../library/xml.etree.elementtree.rst:817
msgid ""
"<?xml version=\"1.0\"?>\n"
"<document xmlns:xi=\"http://www.w3.org/2001/XInclude\">\n"
"  Copyright (c) <xi:include href=\"year.txt\" parse=\"text\" />.\n"
"</document>"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:824
msgid "The result might look something like:"
msgstr "Результат може виглядати приблизно так:"

#: ../../library/xml.etree.elementtree.rst:826
msgid ""
"<document xmlns:xi=\"http://www.w3.org/2001/XInclude\">\n"
"  Copyright (c) 2003.\n"
"</document>"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:844
msgid ""
"Default loader. This default loader reads an included resource from disk. "
"*href* is a URL.  *parse* is for parse mode either \"xml\" or \"text\". "
"*encoding* is an optional text encoding.  If not given, encoding is "
"``utf-8``. Returns the expanded resource. If the parse mode is ``\"xml\"``, "
"this is an :class:`~xml.etree.ElementTree.Element` instance. If the parse "
"mode is ``\"text\"``, this is a string. If the loader fails, it can return "
"``None`` or raise an exception."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:855
msgid ""
"This function expands XInclude directives in-place in tree pointed by "
"*elem*. *elem* is either the root :class:`~xml.etree.ElementTree.Element` or "
"an :class:`~xml.etree.ElementTree.ElementTree` instance to find such "
"element. *loader* is an optional resource loader.  If omitted, it defaults "
"to :func:`default_loader`. If given, it should be a callable that implements "
"the same interface as :func:`default_loader`.  *base_url* is base URL of the "
"original file, to resolve relative include file references.  *max_depth* is "
"the maximum number of recursive inclusions.  Limited to reduce the risk of "
"malicious content explosion. Pass ``None`` to disable the limitation."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:865
msgid "Added the *base_url* and *max_depth* parameters."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:872
msgid "Element Objects"
msgstr "Об'єкти елементів"

#: ../../library/xml.etree.elementtree.rst:880
msgid ""
"Element class.  This class defines the Element interface, and provides a "
"reference implementation of this interface."
msgstr ""
"Клас елемента. Цей клас визначає інтерфейс Element і забезпечує еталонну "
"реалізацію цього інтерфейсу."

#: ../../library/xml.etree.elementtree.rst:883
msgid ""
"The element name, attribute names, and attribute values can be either "
"bytestrings or Unicode strings.  *tag* is the element name.  *attrib* is an "
"optional dictionary, containing element attributes.  *extra* contains "
"additional attributes, given as keyword arguments."
msgstr ""
"Ім’я елемента, назви атрибутів і значення атрибутів можуть бути байтовими "
"рядками або рядками Unicode. *тег* — це назва елемента. *attrib* — "
"необов’язковий словник, що містить атрибути елемента. *extra* містить "
"додаткові атрибути, надані як аргументи ключового слова."

#: ../../library/xml.etree.elementtree.rst:891
msgid ""
"A string identifying what kind of data this element represents (the element "
"type, in other words)."
msgstr ""
"Рядок, що визначає, який тип даних представляє цей елемент (іншими словами, "
"тип елемента)."

#: ../../library/xml.etree.elementtree.rst:898
msgid ""
"These attributes can be used to hold additional data associated with the "
"element.  Their values are usually strings but may be any application-"
"specific object.  If the element is created from an XML file, the *text* "
"attribute holds either the text between the element's start tag and its "
"first child or end tag, or ``None``, and the *tail* attribute holds either "
"the text between the element's end tag and the next tag, or ``None``.  For "
"the XML data"
msgstr ""
"Ці атрибути можна використовувати для зберігання додаткових даних, "
"пов’язаних з елементом. Їх значення зазвичай є рядками, але можуть бути будь-"
"якими об’єктами, що стосуються конкретної програми. Якщо елемент створено з "
"файлу XML, атрибут *text* містить або текст між початковим тегом елемента та "
"його першим дочірнім або кінцевим тегом, або ``None``, а атрибут *tail* "
"містить або текст між кінцевий тег елемента та наступний тег або ``None``. "
"Для даних XML"

#: ../../library/xml.etree.elementtree.rst:906
msgid "<a><b>1<c>2<d/>3</c></b>4</a>"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:910
msgid ""
"the *a* element has ``None`` for both *text* and *tail* attributes, the *b* "
"element has *text* ``\"1\"`` and *tail* ``\"4\"``, the *c* element has "
"*text* ``\"2\"`` and *tail* ``None``, and the *d* element has *text* "
"``None`` and *tail* ``\"3\"``."
msgstr ""
"елемент *a* має ``None`` як для атрибутів *text*, так і для *tail*, елемент "
"*b* має *text* ``\"1\"`` і *tail* ``\"4\"``, елемент *c* має *text* "
"``\"2\"`` і *tail* ``None``, а елемент *d* має *text* ``None`` і *tail* "
"``\"3\"``."

#: ../../library/xml.etree.elementtree.rst:915
msgid ""
"To collect the inner text of an element, see :meth:`itertext`, for example "
"``\"\".join(element.itertext())``."
msgstr ""
"Щоб зібрати внутрішній текст елемента, перегляньте :meth:`itertext`, "
"наприклад ``\"\".join(element.itertext())``."

#: ../../library/xml.etree.elementtree.rst:918
msgid "Applications may store arbitrary objects in these attributes."
msgstr "Програми можуть зберігати довільні об’єкти в цих атрибутах."

#: ../../library/xml.etree.elementtree.rst:923
msgid ""
"A dictionary containing the element's attributes.  Note that while the "
"*attrib* value is always a real mutable Python dictionary, an ElementTree "
"implementation may choose to use another internal representation, and create "
"the dictionary only if someone asks for it.  To take advantage of such "
"implementations, use the dictionary methods below whenever possible."
msgstr ""
"Словник, що містить атрибути елемента. Зауважте, що хоча значення *attrib* "
"завжди є справжнім змінним словником Python, реалізація ElementTree може "
"використовувати інше внутрішнє представлення та створювати словник, лише "
"якщо хтось про це попросить. Щоб скористатися перевагами таких реалізацій, "
"використовуйте наведені нижче методи словника, коли це можливо."

#: ../../library/xml.etree.elementtree.rst:929
msgid "The following dictionary-like methods work on the element attributes."
msgstr "Наступні методи, подібні до словника, працюють з атрибутами елемента."

#: ../../library/xml.etree.elementtree.rst:934
msgid ""
"Resets an element.  This function removes all subelements, clears all "
"attributes, and sets the text and tail attributes to ``None``."
msgstr ""
"Скидає елемент. Ця функція видаляє всі піделементи, очищає всі атрибути та "
"встановлює для атрибутів text і tail значення ``None``."

#: ../../library/xml.etree.elementtree.rst:940
msgid "Gets the element attribute named *key*."
msgstr "Отримує атрибут елемента з назвою *key*."

#: ../../library/xml.etree.elementtree.rst:942
msgid ""
"Returns the attribute value, or *default* if the attribute was not found."
msgstr "Повертає значення атрибута або *default*, якщо атрибут не знайдено."

#: ../../library/xml.etree.elementtree.rst:947
msgid ""
"Returns the element attributes as a sequence of (name, value) pairs.  The "
"attributes are returned in an arbitrary order."
msgstr ""
"Повертає атрибути елемента як послідовність пар (ім’я, значення). Атрибути "
"повертаються в довільному порядку."

#: ../../library/xml.etree.elementtree.rst:953
msgid ""
"Returns the elements attribute names as a list.  The names are returned in "
"an arbitrary order."
msgstr ""
"Повертає назви атрибутів елементів у вигляді списку. Імена повертаються в "
"довільному порядку."

#: ../../library/xml.etree.elementtree.rst:959
msgid "Set the attribute *key* on the element to *value*."
msgstr "Установіть для атрибута *key* елемента значення *value*."

#: ../../library/xml.etree.elementtree.rst:961
msgid "The following methods work on the element's children (subelements)."
msgstr "Наступні методи працюють над дочірніми елементами (піделементами)."

#: ../../library/xml.etree.elementtree.rst:966
msgid ""
"Adds the element *subelement* to the end of this element's internal list of "
"subelements.  Raises :exc:`TypeError` if *subelement* is not an :class:"
"`Element`."
msgstr ""
"Додає елемент *subelement* у кінець внутрішнього списку піделементів цього "
"елемента. Викликає :exc:`TypeError`, якщо *subelement* не є :class:`Element`."

#: ../../library/xml.etree.elementtree.rst:973
msgid ""
"Appends *subelements* from an iterable of elements. Raises :exc:`TypeError` "
"if a subelement is not an :class:`Element`."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:981
msgid ""
"Finds the first subelement matching *match*.  *match* may be a tag name or "
"a :ref:`path <elementtree-xpath>`.  Returns an element instance or "
"``None``.  *namespaces* is an optional mapping from namespace prefix to full "
"name.  Pass ``''`` as prefix to move all unprefixed tag names in the "
"expression into the given namespace."
msgstr ""
"Знаходить перший піделемент, що відповідає *match*. *match* може бути назвою "
"тегу або :ref:`шляхом <elementtree-xpath>`. Повертає екземпляр елемента або "
"``None``. *простори імен* — це необов’язкове відображення префікса простору "
"імен на повне ім’я. Передайте ``''`` як префікс, щоб перемістити всі імена "
"тегів без префіксів у виразі до вказаного простору імен."

#: ../../library/xml.etree.elementtree.rst:990
msgid ""
"Finds all matching subelements, by tag name or :ref:`path <elementtree-"
"xpath>`.  Returns a list containing all matching elements in document "
"order.  *namespaces* is an optional mapping from namespace prefix to full "
"name.  Pass ``''`` as prefix to move all unprefixed tag names in the "
"expression into the given namespace."
msgstr ""
"Знаходить усі відповідні піделементи за назвою тегу або :ref:`шляхом "
"<elementtree-xpath>`. Повертає список, що містить усі відповідні елементи в "
"порядку документа. *простори імен* — це необов’язкове відображення префікса "
"простору імен на повне ім’я. Передайте ``''`` як префікс, щоб перемістити "
"всі імена тегів без префіксів у виразі до вказаного простору імен."

#: ../../library/xml.etree.elementtree.rst:999
msgid ""
"Finds text for the first subelement matching *match*.  *match* may be a tag "
"name or a :ref:`path <elementtree-xpath>`.  Returns the text content of the "
"first matching element, or *default* if no element was found. Note that if "
"the matching element has no text content an empty string is returned. "
"*namespaces* is an optional mapping from namespace prefix to full name.  "
"Pass ``''`` as prefix to move all unprefixed tag names in the expression "
"into the given namespace."
msgstr ""
"Знаходить текст для першого піделемента, який відповідає *match*. *match* "
"може бути назвою тегу або :ref:`шляхом <elementtree-xpath>`. Повертає "
"текстовий вміст першого відповідного елемента або *за замовчуванням*, якщо "
"елемент не знайдено. Зауважте, що якщо відповідний елемент не має текстового "
"вмісту, повертається порожній рядок. *простори імен* — це необов’язкове "
"відображення префікса простору імен на повне ім’я. Передайте ``''`` як "
"префікс, щоб перемістити всі імена тегів без префіксів у виразі до вказаного "
"простору імен."

#: ../../library/xml.etree.elementtree.rst:1010
msgid ""
"Inserts *subelement* at the given position in this element.  Raises :exc:"
"`TypeError` if *subelement* is not an :class:`Element`."
msgstr ""
"Вставляє *піделемент* у задану позицію цього елемента. Викликає :exc:"
"`TypeError`, якщо *subelement* не є :class:`Element`."

#: ../../library/xml.etree.elementtree.rst:1016
msgid ""
"Creates a tree :term:`iterator` with the current element as the root. The "
"iterator iterates over this element and all elements below it, in document "
"(depth first) order.  If *tag* is not ``None`` or ``'*'``, only elements "
"whose tag equals *tag* are returned from the iterator.  If the tree "
"structure is modified during iteration, the result is undefined."
msgstr ""
"Створює дерево :term:`iterator` з поточним елементом як коренем. Ітератор "
"повторює цей елемент і всі елементи під ним у порядку документа (спочатку "
"глибина). Якщо *tag* не є ``None`` або ``'*'``, ітератор повертає лише "
"елементи, тег яких дорівнює *tag*. Якщо структуру дерева змінено під час "
"ітерації, результат буде невизначеним."

#: ../../library/xml.etree.elementtree.rst:1027
msgid ""
"Finds all matching subelements, by tag name or :ref:`path <elementtree-"
"xpath>`.  Returns an iterable yielding all matching elements in document "
"order. *namespaces* is an optional mapping from namespace prefix to full "
"name."
msgstr ""
"Знаходить усі відповідні піделементи за назвою тегу або :ref:`шляхом "
"<elementtree-xpath>`. Повертає iterable, що дає всі відповідні елементи в "
"порядку документа. *простори імен* — це необов’язкове відображення префікса "
"простору імен на повне ім’я."

#: ../../library/xml.etree.elementtree.rst:1038
msgid ""
"Creates a text iterator.  The iterator loops over this element and all "
"subelements, in document order, and returns all inner text."
msgstr ""
"Створює текстовий ітератор. Ітератор проходить по цьому елементу та всім "
"піделементам у порядку документа та повертає весь внутрішній текст."

#: ../../library/xml.etree.elementtree.rst:1046
msgid ""
"Creates a new element object of the same type as this element.  Do not call "
"this method, use the :func:`SubElement` factory function instead."
msgstr ""
"Створює новий об’єкт елемента того самого типу, що й цей елемент. Не "
"викликайте цей метод, замість цього використовуйте фабричну функцію :func:"
"`SubElement`."

#: ../../library/xml.etree.elementtree.rst:1052
msgid ""
"Removes *subelement* from the element.  Unlike the find\\* methods this "
"method compares elements based on the instance identity, not on tag value or "
"contents."
msgstr ""
"Видаляє *піделемент* з елемента. На відміну від методів find\\*, цей метод "
"порівнює елементи на основі ідентичності екземпляра, а не на основі значення "
"тегу чи вмісту."

#: ../../library/xml.etree.elementtree.rst:1056
msgid ""
":class:`Element` objects also support the following sequence type methods "
"for working with subelements: :meth:`~object.__delitem__`, :meth:`~object."
"__getitem__`, :meth:`~object.__setitem__`, :meth:`~object.__len__`."
msgstr ""
"Об’єкти :class:`Element` також підтримують такі методи типу послідовності "
"для роботи з піделементами: :meth:`~object.__delitem__`, :meth:`~object."
"__getitem__`, :meth:`~object.__setitem__`,  :meth:`~об’єкт.__len__`."

#: ../../library/xml.etree.elementtree.rst:1061
msgid ""
"Caution: Elements with no subelements will test as ``False``.  In a future "
"release of Python, all elements will test as ``True`` regardless of whether "
"subelements exist.  Instead, prefer explicit ``len(elem)`` or ``elem is not "
"None`` tests.::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1066
msgid ""
"element = root.find('foo')\n"
"\n"
"if not element:  # careful!\n"
"    print(\"element not found, or element has no subelements\")\n"
"\n"
"if element is None:\n"
"    print(\"element not found\")"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1074
msgid "Testing the truth value of an Element emits :exc:`DeprecationWarning`."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1077
msgid ""
"Prior to Python 3.8, the serialisation order of the XML attributes of "
"elements was artificially made predictable by sorting the attributes by "
"their name. Based on the now guaranteed ordering of dicts, this arbitrary "
"reordering was removed in Python 3.8 to preserve the order in which "
"attributes were originally parsed or created by user code."
msgstr ""
"До Python 3.8 порядок серіалізації XML-атрибутів елементів штучно робили "
"передбачуваним шляхом сортування атрибутів за їх назвою. Базуючись на тепер "
"гарантованому порядку диктовок, цей довільний порядок було вилучено в Python "
"3.8, щоб зберегти порядок, у якому атрибути були спочатку проаналізовані або "
"створені кодом користувача."

#: ../../library/xml.etree.elementtree.rst:1083
msgid ""
"In general, user code should try not to depend on a specific ordering of "
"attributes, given that the `XML Information Set <https://www.w3.org/TR/xml-"
"infoset/>`_ explicitly excludes the attribute order from conveying "
"information. Code should be prepared to deal with any ordering on input. In "
"cases where deterministic XML output is required, e.g. for cryptographic "
"signing or test data sets, canonical serialisation is available with the :"
"func:`canonicalize` function."
msgstr ""
"Загалом код користувача має намагатися не залежати від певного порядку "
"атрибутів, враховуючи, що `Набір інформації XML <https://www.w3.org/TR/xml-"
"infoset/>`_ явно виключає порядок атрибутів із передачі інформації. Код має "
"бути готовий до будь-якого впорядкування вхідних даних. У випадках, коли "
"потрібен детермінований вивід XML, напр. для криптографічного підпису або "
"тестових наборів даних доступна канонічна серіалізація за допомогою функції :"
"func:`canonicalize`."

#: ../../library/xml.etree.elementtree.rst:1091
msgid ""
"In cases where canonical output is not applicable but a specific attribute "
"order is still desirable on output, code should aim for creating the "
"attributes directly in the desired order, to avoid perceptual mismatches for "
"readers of the code. In cases where this is difficult to achieve, a recipe "
"like the following can be applied prior to serialisation to enforce an order "
"independently from the Element creation::"
msgstr ""
"У випадках, коли канонічний вивід незастосовний, але певний порядок "
"атрибутів все ще бажаний на виводі, код повинен прагнути створювати атрибути "
"безпосередньо в бажаному порядку, щоб уникнути невідповідності сприйняття "
"для читачів коду. У випадках, коли цього важко досягти, перед серіалізацією "
"можна застосувати такий рецепт, як наведений нижче, щоб забезпечити "
"виконання порядку незалежно від створення Елемента:"

#: ../../library/xml.etree.elementtree.rst:1098
msgid ""
"def reorder_attributes(root):\n"
"    for el in root.iter():\n"
"        attrib = el.attrib\n"
"        if len(attrib) > 1:\n"
"            # adjust attribute order, e.g. by sorting\n"
"            attribs = sorted(attrib.items())\n"
"            attrib.clear()\n"
"            attrib.update(attribs)"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1111
msgid "ElementTree Objects"
msgstr "Об’єкти ElementTree"

#: ../../library/xml.etree.elementtree.rst:1116
msgid ""
"ElementTree wrapper class.  This class represents an entire element "
"hierarchy, and adds some extra support for serialization to and from "
"standard XML."
msgstr ""
"Клас обгортки ElementTree. Цей клас представляє всю ієрархію елементів і "
"додає деяку додаткову підтримку для серіалізації в і з стандартного XML."

#: ../../library/xml.etree.elementtree.rst:1120
msgid ""
"*element* is the root element.  The tree is initialized with the contents of "
"the XML *file* if given."
msgstr ""
"*element* є кореневим елементом. Дерево ініціалізується вмістом *файлу* XML, "
"якщо його надано."

#: ../../library/xml.etree.elementtree.rst:1126
msgid ""
"Replaces the root element for this tree.  This discards the current contents "
"of the tree, and replaces it with the given element.  Use with care.  "
"*element* is an element instance."
msgstr ""
"Замінює кореневий елемент для цього дерева. Це відкидає поточний вміст "
"дерева та замінює його вказаним елементом. Використовуйте з обережністю. "
"*element* — екземпляр елемента."

#: ../../library/xml.etree.elementtree.rst:1133
msgid "Same as :meth:`Element.find`, starting at the root of the tree."
msgstr "Те саме, що :meth:`Element.find`, починаючи з кореня дерева."

#: ../../library/xml.etree.elementtree.rst:1138
msgid "Same as :meth:`Element.findall`, starting at the root of the tree."
msgstr "Те саме, що :meth:`Element.findall`, починаючи з кореня дерева."

#: ../../library/xml.etree.elementtree.rst:1143
msgid "Same as :meth:`Element.findtext`, starting at the root of the tree."
msgstr "Те саме, що :meth:`Element.findtext`, починаючи з кореня дерева."

#: ../../library/xml.etree.elementtree.rst:1148
msgid "Returns the root element for this tree."
msgstr "Повертає кореневий елемент для цього дерева."

#: ../../library/xml.etree.elementtree.rst:1153
msgid ""
"Creates and returns a tree iterator for the root element.  The iterator "
"loops over all elements in this tree, in section order.  *tag* is the tag to "
"look for (default is to return all elements)."
msgstr ""
"Створює та повертає ітератор дерева для кореневого елемента. Ітератор "
"перебирає всі елементи в цьому дереві в порядку секцій. *тег* — це тег, який "
"потрібно шукати (за замовчуванням повертаються всі елементи)."

#: ../../library/xml.etree.elementtree.rst:1160
msgid "Same as :meth:`Element.iterfind`, starting at the root of the tree."
msgstr "Те саме, що :meth:`Element.iterfind`, починаючи з кореня дерева."

#: ../../library/xml.etree.elementtree.rst:1167
msgid ""
"Loads an external XML section into this element tree.  *source* is a file "
"name or :term:`file object`.  *parser* is an optional parser instance. If "
"not given, the standard :class:`XMLParser` parser is used.  Returns the "
"section root element."
msgstr ""
"Завантажує зовнішній розділ XML у це дерево елементів. *джерело* — це ім’я "
"файлу або :term:`file object`. *parser* є необов’язковим екземпляром "
"парсера. Якщо не вказано, використовується стандартний аналізатор :class:"
"`XMLParser`. Повертає кореневий елемент розділу."

#: ../../library/xml.etree.elementtree.rst:1177
msgid ""
"Writes the element tree to a file, as XML.  *file* is a file name, or a :"
"term:`file object` opened for writing.  *encoding* [1]_ is the output "
"encoding (default is US-ASCII). *xml_declaration* controls if an XML "
"declaration should be added to the file.  Use ``False`` for never, ``True`` "
"for always, ``None`` for only if not US-ASCII or UTF-8 or Unicode (default "
"is ``None``). *default_namespace* sets the default XML namespace (for "
"\"xmlns\"). *method* is either ``\"xml\"``, ``\"html\"`` or ``\"text\"`` "
"(default is ``\"xml\"``). The keyword-only *short_empty_elements* parameter "
"controls the formatting of elements that contain no content.  If ``True`` "
"(the default), they are emitted as a single self-closed tag, otherwise they "
"are emitted as a pair of start/end tags."
msgstr ""
"Записує дерево елементів у файл як XML. *file* — це ім’я файлу або :term:"
"`file object`, відкритий для запису. *кодування* [1]_ — вихідне кодування "
"(за замовчуванням — US-ASCII). *xml_declaration* визначає, чи слід додавати "
"XML-декларацію до файлу. Використовуйте ``False`` для ніколи, ``True`` для "
"завжди, ``None`` тільки якщо не US-ASCII або UTF-8 або Unicode (за "
"замовчуванням ``None``). *default_namespace* встановлює простір імен XML за "
"умовчанням (для \"xmlns\"). *method* — це ``\"xml\"``, ``\"html\"`` або "
"``\"text\"`` (за замовчуванням ``\"xml\"``). Параметр "
"*short_empty_elements*, що містить лише ключове слово, керує форматуванням "
"елементів, які не містять вмісту. Якщо ``True`` (за замовчуванням), вони "
"випускаються як один самозакритий тег, інакше вони випускаються як пара "
"початкових/кінцевих тегів."

#: ../../library/xml.etree.elementtree.rst:1191
msgid ""
"The output is either a string (:class:`str`) or binary (:class:`bytes`). "
"This is controlled by the *encoding* argument.  If *encoding* is "
"``\"unicode\"``, the output is a string; otherwise, it's binary.  Note that "
"this may conflict with the type of *file* if it's an open :term:`file "
"object`; make sure you do not try to write a string to a binary stream and "
"vice versa."
msgstr ""
"Результатом буде рядок (:class:`str`) або двійковий (:class:`bytes`). Це "
"контролюється аргументом *encoding*. Якщо *кодування* є ``\"юнікодом\"``, "
"результатом є рядок; інакше це двійковий файл. Зауважте, що це може "
"конфліктувати з типом *file*, якщо це відкритий :term:`file object`; "
"переконайтеся, що ви не намагаєтесь записати рядок у двійковий потік і "
"навпаки."

#: ../../library/xml.etree.elementtree.rst:1201
msgid ""
"The :meth:`write` method now preserves the attribute order specified by the "
"user."
msgstr ""
"Метод :meth:`write` тепер зберігає порядок атрибутів, указаний користувачем."

#: ../../library/xml.etree.elementtree.rst:1206
msgid "This is the XML file that is going to be manipulated::"
msgstr "Це XML-файл, яким буде маніпулювати:"

#: ../../library/xml.etree.elementtree.rst:1208
msgid ""
"<html>\n"
"    <head>\n"
"        <title>Example page</title>\n"
"    </head>\n"
"    <body>\n"
"        <p>Moved to <a href=\"http://example.org/\">example.org</a>\n"
"        or <a href=\"http://example.com/\">example.com</a>.</p>\n"
"    </body>\n"
"</html>"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1218
msgid ""
"Example of changing the attribute \"target\" of every link in first "
"paragraph::"
msgstr "Приклад зміни атрибута \"target\" кожного посилання в першому абзаці::"

#: ../../library/xml.etree.elementtree.rst:1220
msgid ""
">>> from xml.etree.ElementTree import ElementTree\n"
">>> tree = ElementTree()\n"
">>> tree.parse(\"index.xhtml\")\n"
"<Element 'html' at 0xb77e6fac>\n"
">>> p = tree.find(\"body/p\")     # Finds first occurrence of tag p in body\n"
">>> p\n"
"<Element 'p' at 0xb77ec26c>\n"
">>> links = list(p.iter(\"a\"))   # Returns list of all links\n"
">>> links\n"
"[<Element 'a' at 0xb77ec2ac>, <Element 'a' at 0xb77ec1cc>]\n"
">>> for i in links:             # Iterates through all found links\n"
"...     i.attrib[\"target\"] = \"blank\"\n"
"...\n"
">>> tree.write(\"output.xhtml\")"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1238
msgid "QName Objects"
msgstr "Об'єкти QName"

#: ../../library/xml.etree.elementtree.rst:1243
msgid ""
"QName wrapper.  This can be used to wrap a QName attribute value, in order "
"to get proper namespace handling on output.  *text_or_uri* is a string "
"containing the QName value, in the form {uri}local, or, if the tag argument "
"is given, the URI part of a QName.  If *tag* is given, the first argument is "
"interpreted as a URI, and this argument is interpreted as a local name. :"
"class:`QName` instances are opaque."
msgstr ""
"Обгортка QName. Це можна використовувати для обгортання значення атрибута "
"QName, щоб отримати правильну обробку простору імен на виході. *text_or_uri* "
"— це рядок, що містить значення QName у формі {uri}local або, якщо вказано "
"аргумент тегу, частину URI QName. Якщо вказано *тег*, перший аргумент "
"інтерпретується як URI, а цей аргумент інтерпретується як локальне ім’я. "
"Екземпляри :class:`QName` є непрозорими."

#: ../../library/xml.etree.elementtree.rst:1255
msgid "TreeBuilder Objects"
msgstr "Об’єкти TreeBuilder"

#: ../../library/xml.etree.elementtree.rst:1261
msgid ""
"Generic element structure builder.  This builder converts a sequence of "
"start, data, end, comment and pi method calls to a well-formed element "
"structure.  You can use this class to build an element structure using a "
"custom XML parser, or a parser for some other XML-like format."
msgstr ""
"Загальний конструктор структур елемента. Цей конструктор перетворює "
"послідовність викликів методу початку, даних, кінця, коментаря та pi у добре "
"сформовану структуру елементів. Ви можете використовувати цей клас, щоб "
"побудувати структуру елемента за допомогою спеціального синтаксичного "
"аналізатора XML або іншого XML-подібного формату."

#: ../../library/xml.etree.elementtree.rst:1266
msgid ""
"*element_factory*, when given, must be a callable accepting two positional "
"arguments: a tag and a dict of attributes.  It is expected to return a new "
"element instance."
msgstr ""
"*element_factory*, якщо задано, має бути викликом, що приймає два позиційні "
"аргументи: тег і dict атрибутів. Очікується, що він поверне новий екземпляр "
"елемента."

#: ../../library/xml.etree.elementtree.rst:1270
msgid ""
"The *comment_factory* and *pi_factory* functions, when given, should behave "
"like the :func:`Comment` and :func:`ProcessingInstruction` functions to "
"create comments and processing instructions.  When not given, the default "
"factories will be used.  When *insert_comments* and/or *insert_pis* is true, "
"comments/pis will be inserted into the tree if they appear within the root "
"element (but not outside of it)."
msgstr ""
"Функції *comment_factory* і *pi_factory*, якщо їх надано, повинні поводитися "
"як функції :func:`Comment` і :func:`ProcessingInstruction` для створення "
"коментарів і інструкцій з обробки. Якщо не вказано, будуть використані "
"фабрики за замовчуванням. Якщо *insert_comments* і/або *insert_pis* має "
"значення true, коментарі/pis буде вставлено в дерево, якщо вони з’являться в "
"кореневому елементі (але не поза ним)."

#: ../../library/xml.etree.elementtree.rst:1279
msgid ""
"Flushes the builder buffers, and returns the toplevel document element.  "
"Returns an :class:`Element` instance."
msgstr ""
"Очищає буфери конструктора та повертає елемент документа верхнього рівня. "
"Повертає екземпляр :class:`Element`."

#: ../../library/xml.etree.elementtree.rst:1285
msgid ""
"Adds text to the current element.  *data* is a string.  This should be "
"either a bytestring, or a Unicode string."
msgstr ""
"Додає текст до поточного елемента. *data* — це рядок. Це має бути байтовий "
"рядок або рядок Unicode."

#: ../../library/xml.etree.elementtree.rst:1291
msgid ""
"Closes the current element.  *tag* is the element name.  Returns the closed "
"element."
msgstr ""
"Закриває поточний елемент. *тег* — це назва елемента. Повертає закритий "
"елемент."

#: ../../library/xml.etree.elementtree.rst:1297
msgid ""
"Opens a new element.  *tag* is the element name.  *attrs* is a dictionary "
"containing element attributes.  Returns the opened element."
msgstr ""
"Відкриває новий елемент. *тег* — це назва елемента. *attrs* — це словник, що "
"містить атрибути елементів. Повертає відкритий елемент."

#: ../../library/xml.etree.elementtree.rst:1303
msgid ""
"Creates a comment with the given *text*.  If ``insert_comments`` is true, "
"this will also add it to the tree."
msgstr ""
"Створює коментар із заданим *текстом*. Якщо ``insert_comments`` має значення "
"true, це також додасть його до дерева."

#: ../../library/xml.etree.elementtree.rst:1311
msgid ""
"Creates a process instruction with the given *target* name and *text*. If "
"``insert_pis`` is true, this will also add it to the tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1317
msgid ""
"In addition, a custom :class:`TreeBuilder` object can provide the following "
"methods:"
msgstr ""
"Крім того, спеціальний об’єкт :class:`TreeBuilder` може надавати такі методи:"

#: ../../library/xml.etree.elementtree.rst:1322
msgid ""
"Handles a doctype declaration.  *name* is the doctype name.  *pubid* is the "
"public identifier.  *system* is the system identifier.  This method does not "
"exist on the default :class:`TreeBuilder` class."
msgstr ""
"Обробляє оголошення doctype. *name* — це ім’я типу документа. *pubid* є "
"публічним ідентифікатором. *system* — це ідентифікатор системи. Цей метод не "
"існує в класі :class:`TreeBuilder` за замовчуванням."

#: ../../library/xml.etree.elementtree.rst:1330
msgid ""
"Is called whenever the parser encounters a new namespace declaration, before "
"the ``start()`` callback for the opening element that defines it. *prefix* "
"is ``''`` for the default namespace and the declared namespace prefix name "
"otherwise.  *uri* is the namespace URI."
msgstr ""
"Викликається кожного разу, коли синтаксичний аналізатор зустрічає нове "
"оголошення простору імен перед зворотним викликом ``start()`` для "
"початкового елемента, який його визначає. *префікс* — це ``''`` для простору "
"імен за замовчуванням, а в інших випадках – оголошене ім’я префікса простору "
"імен. *uri* — URI простору імен."

#: ../../library/xml.etree.elementtree.rst:1339
msgid ""
"Is called after the ``end()`` callback of an element that declared a "
"namespace prefix mapping, with the name of the *prefix* that went out of "
"scope."
msgstr ""
"Викликається після зворотного виклику ``end()`` елемента, який оголосив "
"відображення префікса простору імен, з назвою *префікса*, який вийшов за "
"межі області видимості."

#: ../../library/xml.etree.elementtree.rst:1351
msgid ""
"A `C14N 2.0 <https://www.w3.org/TR/xml-c14n2/>`_ writer.  Arguments are the "
"same as for the :func:`canonicalize` function.  This class does not build a "
"tree but translates the callback events directly into a serialised form "
"using the *write* function."
msgstr ""
"Письменник `C14N 2.0 <https://www.w3.org/TR/xml-c14n2/>`_. Аргументи такі ж, "
"як і для функції :func:`canonicalize`. Цей клас не створює дерево, а "
"перетворює події зворотного виклику безпосередньо в серіалізовану форму за "
"допомогою функції *write*."

#: ../../library/xml.etree.elementtree.rst:1362
msgid "XMLParser Objects"
msgstr "Objetos XMLParser"

#: ../../library/xml.etree.elementtree.rst:1367
msgid ""
"This class is the low-level building block of the module.  It uses :mod:`xml."
"parsers.expat` for efficient, event-based parsing of XML.  It can be fed XML "
"data incrementally with the :meth:`feed` method, and parsing events are "
"translated to a push API - by invoking callbacks on the *target* object.  If "
"*target* is omitted, the standard :class:`TreeBuilder` is used. If "
"*encoding* [1]_ is given, the value overrides the encoding specified in the "
"XML file."
msgstr ""
"Цей клас є будівельним блоком низького рівня модуля. Він використовує :mod:"
"`xml.parsers.expat` для ефективного аналізу XML на основі подій. Він може "
"передавати XML-дані поетапно за допомогою методу :meth:`feed`, а події "
"синтаксичного аналізу транслюються в push API шляхом виклику зворотних "
"викликів для об’єкта *target*. Якщо *target* опущено, використовується "
"стандартний :class:`TreeBuilder`. Якщо вказано *кодування* [1]_, значення "
"має перевагу над кодуванням, указаним у файлі XML."

#: ../../library/xml.etree.elementtree.rst:1375
msgid ""
"Parameters are now :ref:`keyword-only <keyword-only_parameter>`. The *html* "
"argument is no longer supported."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1382
msgid ""
"Finishes feeding data to the parser.  Returns the result of calling the "
"``close()`` method of the *target* passed during construction; by default, "
"this is the toplevel document element."
msgstr ""
"Завершує подачу даних до аналізатора. Повертає результат виклику методу "
"``close()`` *target*, переданого під час створення; за замовчуванням це "
"елемент документа верхнього рівня."

#: ../../library/xml.etree.elementtree.rst:1389
msgid "Feeds data to the parser.  *data* is encoded data."
msgstr "Подає дані в аналізатор. *data* — це закодовані дані."

#: ../../library/xml.etree.elementtree.rst:1394
#: ../../library/xml.etree.elementtree.rst:1472
msgid ""
"Triggers parsing of any previously fed unparsed data, which can be used to "
"ensure more immediate feedback, in particular with Expat >=2.6.0. The "
"implementation of :meth:`flush` temporarily disables reparse deferral with "
"Expat (if currently enabled) and triggers a reparse. Disabling reparse "
"deferral has security consequences; please see :meth:`xml.parsers.expat."
"xmlparser.SetReparseDeferralEnabled` for details."
msgstr ""
"Запускает анализ любых ранее переданных неразобранных данных, которые можно "
"использовать для обеспечения более немедленной обратной связи, в частности, "
"с Expat >=2.6.0. Реализация :meth:`flush` временно отключает отсрочку "
"повторной обработки с помощью Expat (если она включена в данный момент) и "
"запускает повторную обработку. Отключение отсрочки повторной обработки имеет "
"последствия для безопасности; подробности см. в :meth:`xml.parsers.expat."
"xmlparser.SetReparseDeferralEnabled`."

#: ../../library/xml.etree.elementtree.rst:1401
#: ../../library/xml.etree.elementtree.rst:1479
msgid ""
"Note that :meth:`flush` has been backported to some prior releases of "
"CPython as a security fix.  Check for availability of :meth:`flush` using :"
"func:`hasattr` if used in code running across a variety of Python versions."
msgstr ""
"Обратите внимание, что :meth:`flush` был перенесен в некоторые предыдущие "
"выпуски CPython в качестве исправления безопасности. Проверьте доступность :"
"meth:`flush` с помощью :func:`hasattr`, если он используется в коде, "
"работающем в различных версиях Python."

#: ../../library/xml.etree.elementtree.rst:1409
msgid ""
":meth:`XMLParser.feed` calls *target*\\'s ``start(tag, attrs_dict)`` method "
"for each opening tag, its ``end(tag)`` method for each closing tag, and data "
"is processed by method ``data(data)``.  For further supported callback "
"methods, see the :class:`TreeBuilder` class.  :meth:`XMLParser.close` calls "
"*target*\\'s method ``close()``. :class:`XMLParser` can be used not only for "
"building a tree structure. This is an example of counting the maximum depth "
"of an XML file::"
msgstr ""
":meth:`XMLParser.feed` викликає метод *target* ``start(tag, attrs_dict)`` "
"для кожного початкового тегу, його метод ``end(tag)`` для кожного "
"закриваючого тегу, і дані обробляються методом ``дані(дані)``. Інші "
"підтримувані методи зворотного виклику див. у класі :class:`TreeBuilder`. :"
"meth:`XMLParser.close` викликає метод *target* ``close()``. :class:"
"`XMLParser` можна використовувати не тільки для побудови деревовидної "
"структури. Це приклад підрахунку максимальної глибини файлу XML:"

#: ../../library/xml.etree.elementtree.rst:1417
msgid ""
">>> from xml.etree.ElementTree import XMLParser\n"
">>> class MaxDepth:                     # The target object of the parser\n"
"...     maxDepth = 0\n"
"...     depth = 0\n"
"...     def start(self, tag, attrib):   # Called for each opening tag.\n"
"...         self.depth += 1\n"
"...         if self.depth > self.maxDepth:\n"
"...             self.maxDepth = self.depth\n"
"...     def end(self, tag):             # Called for each closing tag.\n"
"...         self.depth -= 1\n"
"...     def data(self, data):\n"
"...         pass            # We do not need to do anything with data.\n"
"...     def close(self):    # Called when all data has been parsed.\n"
"...         return self.maxDepth\n"
"...\n"
">>> target = MaxDepth()\n"
">>> parser = XMLParser(target=target)\n"
">>> exampleXml = \"\"\"\n"
"... <a>\n"
"...   <b>\n"
"...   </b>\n"
"...   <b>\n"
"...     <c>\n"
"...       <d>\n"
"...       </d>\n"
"...     </c>\n"
"...   </b>\n"
"... </a>\"\"\"\n"
">>> parser.feed(exampleXml)\n"
">>> parser.close()\n"
"4"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1453
msgid "XMLPullParser Objects"
msgstr "Об’єкти XMLPullParser"

#: ../../library/xml.etree.elementtree.rst:1457
msgid ""
"A pull parser suitable for non-blocking applications.  Its input-side API is "
"similar to that of :class:`XMLParser`, but instead of pushing calls to a "
"callback target, :class:`XMLPullParser` collects an internal list of parsing "
"events and lets the user read from it. *events* is a sequence of events to "
"report back.  The supported events are the strings ``\"start\"``, "
"``\"end\"``, ``\"comment\"``, ``\"pi\"``, ``\"start-ns\"`` and ``\"end-"
"ns\"`` (the \"ns\" events are used to get detailed namespace information).  "
"If *events* is omitted, only ``\"end\"`` events are reported."
msgstr ""
"Синтаксичний аналізатор, що підходить для неблокуючих програм. Його API на "
"стороні введення схожий на API :class:`XMLParser`, але замість того, щоб "
"надсилати виклики до цілі зворотного виклику, :class:`XMLPullParser` збирає "
"внутрішній список подій аналізу та дозволяє користувачеві читати з нього. "
"*події* — це послідовність подій, про які потрібно повідомити. "
"Підтримуваними подіями є рядки ``\"start\"``, ``\"end\"``, ``\"comment\"``, "
"``\"pi\"``, ``\"start-ns\"`` і ``\"end-ns\"`` (події \"ns\" використовуються "
"для отримання детальної інформації про простір імен). Якщо *events* опущено, "
"повідомляються лише події ``\"end\"``."

#: ../../library/xml.etree.elementtree.rst:1468
msgid "Feed the given bytes data to the parser."
msgstr "Передайте надані дані в байтах аналізатору."

#: ../../library/xml.etree.elementtree.rst:1488
msgid ""
"Signal the parser that the data stream is terminated. Unlike :meth:"
"`XMLParser.close`, this method always returns :const:`None`. Any events not "
"yet retrieved when the parser is closed can still be read with :meth:"
"`read_events`."
msgstr ""
"Сигналізуйте синтаксичному аналізатору, що потік даних завершено. На відміну "
"від :meth:`XMLParser.close`, цей метод завжди повертає :const:`None`. Будь-"
"які події, які ще не були отримані, коли синтаксичний аналізатор закрито, "
"все ще можна прочитати за допомогою :meth:`read_events`."

#: ../../library/xml.etree.elementtree.rst:1495
msgid ""
"Return an iterator over the events which have been encountered in the data "
"fed to the parser.  The iterator yields ``(event, elem)`` pairs, where "
"*event* is a string representing the type of event (e.g. ``\"end\"``) and "
"*elem* is the encountered :class:`Element` object, or other context value as "
"follows."
msgstr ""
"Повертає ітератор над подіями, які зустрічаються в даних, переданих до "
"аналізатора. Ітератор видає пари ``(event, elem)``, де *event* — рядок, що "
"представляє тип події (наприклад, ``\"end\"``), а *elem* — це знайдений "
"об’єкт :class:`Element` або інше значення контексту, як показано нижче."

#: ../../library/xml.etree.elementtree.rst:1501
msgid "``start``, ``end``: the current Element."
msgstr "``start``, ``end``: поточний елемент."

#: ../../library/xml.etree.elementtree.rst:1502
msgid "``comment``, ``pi``: the current comment / processing instruction"
msgstr "``comment``, ``pi``: поточний коментар / інструкція обробки"

#: ../../library/xml.etree.elementtree.rst:1503
msgid ""
"``start-ns``: a tuple ``(prefix, uri)`` naming the declared namespace "
"mapping."
msgstr ""
"``start-ns``: кортеж ``(prefix, uri)``, який іменує оголошене відображення "
"простору імен."

#: ../../library/xml.etree.elementtree.rst:1505
msgid "``end-ns``: :const:`None` (this may change in a future version)"
msgstr "``end-ns``: :const:`None` (це може змінитися в наступній версії)"

#: ../../library/xml.etree.elementtree.rst:1507
msgid ""
"Events provided in a previous call to :meth:`read_events` will not be "
"yielded again.  Events are consumed from the internal queue only when they "
"are retrieved from the iterator, so multiple readers iterating in parallel "
"over iterators obtained from :meth:`read_events` will have unpredictable "
"results."
msgstr ""
"Події, надані в попередньому виклику :meth:`read_events`, не будуть видані "
"знову. Події споживаються з внутрішньої черги лише тоді, коли вони отримані "
"з ітератора, тому кілька читачів, які паралельно повторюють ітератори, "
"отримані з :meth:`read_events`, матимуть непередбачувані результати."

#: ../../library/xml.etree.elementtree.rst:1515
msgid ""
":class:`XMLPullParser` only guarantees that it has seen the \">\" character "
"of a starting tag when it emits a \"start\" event, so the attributes are "
"defined, but the contents of the text and tail attributes are undefined at "
"that point.  The same applies to the element children; they may or may not "
"be present."
msgstr ""
":class:`XMLPullParser` лише гарантує, що він побачив символ \">\" "
"початкового тегу, коли він випромінює подію \"start\", тому атрибути "
"визначені, але вміст атрибутів text і tail на той момент не визначено . Те "
"саме стосується елемента діти; вони можуть бути або не бути присутніми."

#: ../../library/xml.etree.elementtree.rst:1530
msgid "Exceptions"
msgstr "Exceções"

#: ../../library/xml.etree.elementtree.rst:1534
msgid ""
"XML parse error, raised by the various parsing methods in this module when "
"parsing fails.  The string representation of an instance of this exception "
"will contain a user-friendly error message.  In addition, it will have the "
"following attributes available:"
msgstr ""
"Помилка аналізу XML, викликана різними методами аналізу в цьому модулі, коли "
"аналіз не вдається. Рядкове представлення екземпляра цього винятку міститиме "
"зручне повідомлення про помилку. Крім того, він матиме такі доступні "
"атрибути:"

#: ../../library/xml.etree.elementtree.rst:1541
msgid ""
"A numeric error code from the expat parser. See the documentation of :mod:"
"`xml.parsers.expat` for the list of error codes and their meanings."
msgstr ""
"Числовий код помилки від аналізатора expat. Перегляньте документацію :mod:"
"`xml.parsers.expat`, щоб переглянути список кодів помилок та їх значення."

#: ../../library/xml.etree.elementtree.rst:1546
msgid ""
"A tuple of *line*, *column* numbers, specifying where the error occurred."
msgstr "Кортеж чисел *рядка*, *стовпця*, що вказує, де сталася помилка."

#: ../../library/xml.etree.elementtree.rst:1549
msgid "Footnotes"
msgstr "Notas de rodapé"

#: ../../library/xml.etree.elementtree.rst:1550
msgid ""
"The encoding string included in XML output should conform to the appropriate "
"standards.  For example, \"UTF-8\" is valid, but \"UTF8\" is not.  See "
"https://www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl and https://"
"www.iana.org/assignments/character-sets/character-sets.xhtml."
msgstr ""
"Рядок кодування, включений у вивід XML, має відповідати відповідним "
"стандартам. Наприклад, \"UTF-8\" дійсний, а \"UTF8\" – ні. Див. https://www."
"w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl і https://www.iana.org/"
"assignments/character-sets/character-sets.xhtml."
