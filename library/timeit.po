# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Raphael Mendonça, 2021
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2021
# i17obot <i17obot@rougeth.com>, 2021
# Adorilson Bezerra <adorilson@gmail.com>, 2023
# Leandro Cavalcante Damascena <leandro.damascena@gmail.com>, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# elielmartinsbr <elielmartinsbr@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-26 20:15+0000\n"
"PO-Revision-Date: 2021-06-28 01:15+0000\n"
"Last-Translator: elielmartinsbr <elielmartinsbr@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/timeit.rst:2
msgid ":mod:`!timeit` --- Measure execution time of small code snippets"
msgstr ""
":mod:`!timeit` --- Mede o tempo de execução de pequenos trechos de código"

#: ../../library/timeit.rst:7
msgid "**Source code:** :source:`Lib/timeit.py`"
msgstr "**Código-fonte:** :source:`Lib/timeit.py`"

#: ../../library/timeit.rst:15
msgid ""
"This module provides a simple way to time small bits of Python code. It has "
"both a :ref:`timeit-command-line-interface` as well as a :ref:`callable "
"<python-interface>` one.  It avoids a number of common traps for measuring "
"execution times. See also Tim Peters' introduction to the \"Algorithms\" "
"chapter in the second edition of *Python Cookbook*, published by O'Reilly."
msgstr ""
"Este módulo fornece uma maneira simples de cronometrar pequenos trechos do "
"código Python. Ele tem uma :ref:`timeit-command-line-interface` e um :ref:"
"`chamável <python-interface>`.  Ele evita uma série de armadilhas comuns "
"para medir os tempos de execução de um script. Veja também o capítulo "
"\"Algorithms\" de Tim Peters, na segunda edição do *Python Cookbook*, "
"publicado pela O'Reilly."

#: ../../library/timeit.rst:23
msgid "Basic Examples"
msgstr "Exemplos básicos"

#: ../../library/timeit.rst:25
msgid ""
"The following example shows how the :ref:`timeit-command-line-interface` can "
"be used to compare three different expressions:"
msgstr ""
"O exemplo a seguir mostra como a :ref:`timeit-command-line-interface` pode "
"ser usado para comparar três expressões diferentes:"

#: ../../library/timeit.rst:28
msgid ""
"$ python -m timeit \"'-'.join(str(n) for n in range(100))\"\n"
"10000 loops, best of 5: 30.2 usec per loop\n"
"$ python -m timeit \"'-'.join([str(n) for n in range(100)])\"\n"
"10000 loops, best of 5: 27.5 usec per loop\n"
"$ python -m timeit \"'-'.join(map(str, range(100)))\"\n"
"10000 loops, best of 5: 23.2 usec per loop"
msgstr ""

#: ../../library/timeit.rst:37
msgid "This can be achieved from the :ref:`python-interface` with::"
msgstr "Isso pode ser obtido da interface :ref:`python-interface` ::"

#: ../../library/timeit.rst:39
msgid ""
">>> import timeit\n"
">>> timeit.timeit('\"-\".join(str(n) for n in range(100))', number=10000)\n"
"0.3018611848820001\n"
">>> timeit.timeit('\"-\".join([str(n) for n in range(100)])', number=10000)\n"
"0.2727368790656328\n"
">>> timeit.timeit('\"-\".join(map(str, range(100)))', number=10000)\n"
"0.23702679807320237"
msgstr ""

#: ../../library/timeit.rst:47
msgid "A callable can also be passed from the :ref:`python-interface`::"
msgstr "Um chamável também pode ser passado para a :ref:`python-interface`::"

#: ../../library/timeit.rst:49
msgid ""
">>> timeit.timeit(lambda: \"-\".join(map(str, range(100))), number=10000)\n"
"0.19665591977536678"
msgstr ""

#: ../../library/timeit.rst:52
msgid ""
"Note however that :func:`.timeit` will automatically determine the number of "
"repetitions only when the command-line interface is used.  In the :ref:"
"`timeit-examples` section you can find more advanced examples."
msgstr ""
"Observe, entretanto, que :func:`.timeit` determinará automaticamente o "
"número de repetições somente quando a interface de linha de comando for "
"usada. Na seção :ref:`timeit-examples` você encontrará exemplos mais "
"avançados."

#: ../../library/timeit.rst:60
msgid "Python Interface"
msgstr "Interface em Python"

#: ../../library/timeit.rst:62
msgid "The module defines three convenience functions and a public class:"
msgstr "Este módulo define três funções e uma classe pública:"

#: ../../library/timeit.rst:67
msgid ""
"Create a :class:`Timer` instance with the given statement, *setup* code and "
"*timer* function and run its :meth:`.timeit` method with *number* "
"executions. The optional *globals* argument specifies a namespace in which "
"to execute the code."
msgstr ""
"Cria uma instância de :class:`Timer` com o código de *setup* e a função "
"*timer* função para executar o método :meth:`.timeit` com o total de "
"execuções informado em *number*. O argumento opcional *globals* especifica "
"um espaço de nomes no qual o código será executado."

#: ../../library/timeit.rst:72 ../../library/timeit.rst:83
#: ../../library/timeit.rst:122
msgid "The optional *globals* parameter was added."
msgstr "O parâmetro opcional *globals* foi adicionado."

#: ../../library/timeit.rst:78
msgid ""
"Create a :class:`Timer` instance with the given statement, *setup* code and "
"*timer* function and run its :meth:`.repeat` method with the given *repeat* "
"count and *number* executions.  The optional *globals* argument specifies a "
"namespace in which to execute the code."
msgstr ""
"Cria uma instância :class:`Timer` com a instrução fornecida, o código de "
"*setup* e a função *timer* e para executar o método :meth:`.repeat` com o "
"total de execuções informando em *repeat* e o *número* de execuções "
"fornecidos. O argumento opcional *globals* especifica um espaço de nomes no "
"qual executar o código."

#: ../../library/timeit.rst:86 ../../library/timeit.rst:183
msgid "Default value of *repeat* changed from 3 to 5."
msgstr "Valor padrão de *repetição* mudou de 3 para 5."

#: ../../library/timeit.rst:92
msgid ""
"The default timer, which is always time.perf_counter(), returns float "
"seconds. An alternative, time.perf_counter_ns, returns integer nanoseconds."
msgstr ""
"O cronômetro padrão, que é sempre time.perf_counter(), retorna segundos com "
"ponto flutuante. Uma alternativa, time.perf_counter_ns, retorna um inteiro "
"em nanossegundos."

#: ../../library/timeit.rst:95
msgid ":func:`time.perf_counter` is now the default timer."
msgstr ":func:`time.perf_counter` é o cronômetro padrão agora."

#: ../../library/timeit.rst:101
msgid "Class for timing execution speed of small code snippets."
msgstr ""
"Classe para cronometrar a velocidade de execução de pequenos trechos de "
"código."

#: ../../library/timeit.rst:103
msgid ""
"The constructor takes a statement to be timed, an additional statement used "
"for setup, and a timer function.  Both statements default to ``'pass'``; the "
"timer function is platform-dependent (see the module doc string). *stmt* and "
"*setup* may also contain multiple statements separated by ``;`` or newlines, "
"as long as they don't contain multi-line string literals.  The statement "
"will by default be executed within timeit's namespace; this behavior can be "
"controlled by passing a namespace to *globals*."
msgstr ""
"O construtor recebe uma instrução a ser cronometrada, uma instrução "
"adicional usada para configuração e uma função de timer. Ambas as instruções "
"têm como padrão ``'pass'``; a função de timer é dependente da plataforma "
"(veja a string do documento do módulo). *stmt* e *setup* também podem conter "
"múltiplas instruções separadas por ``;`` ou novas linhas, desde que não "
"contenham literais de string multilinhas. A instrução será, por padrão, "
"executada dentro do espaço de nomes do *timeit*; esse comportamento pode ser "
"controlado passando um espaço de nomes para *globals*."

#: ../../library/timeit.rst:111
msgid ""
"To measure the execution time of the first statement, use the :meth:`."
"timeit` method.  The :meth:`.repeat` and :meth:`.autorange` methods are "
"convenience methods to call :meth:`.timeit` multiple times."
msgstr ""
"Para medir o tempo de execução da primeira instrução use o método :meth:`."
"timeit`. Os métodos :meth:`.repeat` e :meth:`.autorange` são convenientes "
"para chamar :meth:`.timeit` várias vezes."

#: ../../library/timeit.rst:115
msgid ""
"The execution time of *setup* is excluded from the overall timed execution "
"run."
msgstr ""
"O tempo de execução de *setup* é excluído do tempo total de execução "
"cronometrado."

#: ../../library/timeit.rst:117
msgid ""
"The *stmt* and *setup* parameters can also take objects that are callable "
"without arguments.  This will embed calls to them in a timer function that "
"will then be executed by :meth:`.timeit`.  Note that the timing overhead is "
"a little larger in this case because of the extra function calls."
msgstr ""

#: ../../library/timeit.rst:127
msgid ""
"Time *number* executions of the main statement.  This executes the setup "
"statement once, and then returns the time it takes to execute the main "
"statement a number of times.  The default timer returns seconds as a float. "
"The argument is the number of times through the loop, defaulting to one "
"million.  The main statement, the setup statement and the timer function to "
"be used are passed to the constructor."
msgstr ""

#: ../../library/timeit.rst:136
msgid ""
"By default, :meth:`.timeit` temporarily turns off :term:`garbage collection` "
"during the timing.  The advantage of this approach is that it makes "
"independent timings more comparable.  The disadvantage is that GC may be an "
"important component of the performance of the function being measured.  If "
"so, GC can be re-enabled as the first statement in the *setup* string.  For "
"example::"
msgstr ""

#: ../../library/timeit.rst:143
msgid "timeit.Timer('for i in range(10): oct(i)', 'gc.enable()').timeit()"
msgstr ""

#: ../../library/timeit.rst:148
msgid "Automatically determine how many times to call :meth:`.timeit`."
msgstr "Determina automaticamente quantas vezes chamar :meth:`.timeit`."

#: ../../library/timeit.rst:150
msgid ""
"This is a convenience function that calls :meth:`.timeit` repeatedly so that "
"the total time >= 0.2 second, returning the eventual (number of loops, time "
"taken for that number of loops). It calls :meth:`.timeit` with increasing "
"numbers from the sequence 1, 2, 5, 10, 20, 50, ... until the time taken is "
"at least 0.2 seconds."
msgstr ""

#: ../../library/timeit.rst:156
msgid ""
"If *callback* is given and is not ``None``, it will be called after each "
"trial with two arguments: ``callback(number, time_taken)``."
msgstr ""
"Se *callback* for fornecido e não for ``None``, ele será chamado após cada "
"tentativa e tem dois argumento: ``callback(number, time_taken)``."

#: ../../library/timeit.rst:164
msgid "Call :meth:`.timeit` a few times."
msgstr "Chama :meth:`.timeit` algumas vezes."

#: ../../library/timeit.rst:166
msgid ""
"This is a convenience function that calls the :meth:`.timeit` repeatedly, "
"returning a list of results.  The first argument specifies how many times to "
"call :meth:`.timeit`.  The second argument specifies the *number* argument "
"for :meth:`.timeit`."
msgstr ""
"Esse é um função de conveniência que chama o :meth:`.timeit` repetidamente e "
"retorna uma lista de resultados.  O primeiro argumento especifica quantas "
"vezes deve chamar o :meth:`.timeit`.  O segundo argumento especifica o "
"argumento *number* para :meth:`.timeit`."

#: ../../library/timeit.rst:173
msgid ""
"It's tempting to calculate mean and standard deviation from the result "
"vector and report these.  However, this is not very useful. In a typical "
"case, the lowest value gives a lower bound for how fast your machine can run "
"the given code snippet; higher values in the result vector are typically not "
"caused by variability in Python's speed, but by other processes interfering "
"with your timing accuracy. So the :func:`min` of the result is probably the "
"only number you should be interested in.  After that, you should look at the "
"entire vector and apply common sense rather than statistics."
msgstr ""

#: ../../library/timeit.rst:189
msgid "Helper to print a traceback from the timed code."
msgstr "Função auxiliar para imprimir um traceback do código cronometrado."

#: ../../library/timeit.rst:191
msgid "Typical use::"
msgstr "Uso típico::"

#: ../../library/timeit.rst:193
msgid ""
"t = Timer(...)       # outside the try/except\n"
"try:\n"
"    t.timeit(...)    # or t.repeat(...)\n"
"except Exception:\n"
"    t.print_exc()"
msgstr ""

#: ../../library/timeit.rst:199
msgid ""
"The advantage over the standard traceback is that source lines in the "
"compiled template will be displayed.  The optional *file* argument directs "
"where the traceback is sent; it defaults to :data:`sys.stderr`."
msgstr ""
"A vantagem em relação ao traceback padrão é que as linhas de origem no "
"modelo compilado serão exibidas.  O argumento opcional *file* direciona para "
"onde o traceback é enviado; o padrão é :data:`sys.stderr`."

#: ../../library/timeit.rst:207
msgid "Command-Line Interface"
msgstr "Interface de Linha de Comando"

#: ../../library/timeit.rst:209
msgid ""
"When called as a program from the command line, the following form is used::"
msgstr ""
"Quando chamado como um programa a partir da linha de comando, as seguintes "
"opções estão disponíveis::"

#: ../../library/timeit.rst:211
msgid ""
"python -m timeit [-n N] [-r N] [-u U] [-s S] [-p] [-v] [-h] [statement ...]"
msgstr ""

#: ../../library/timeit.rst:213
msgid "Where the following options are understood:"
msgstr "As seguintes opções são permitidas"

#: ../../library/timeit.rst:219
msgid "how many times to execute 'statement'"
msgstr "Quantas vezes deve executar 'statement'"

#: ../../library/timeit.rst:223
msgid "how many times to repeat the timer (default 5)"
msgstr "Quantidade de vezes para repetir o cronômetro (o valor padrão é 5)"

#: ../../library/timeit.rst:227
msgid "statement to be executed once initially (default ``pass``)"
msgstr ""
"instrução a ser executada apenas uma vez e quando iniciada (padrão ``pass`` )"

#: ../../library/timeit.rst:231
msgid ""
"measure process time, not wallclock time, using :func:`time.process_time` "
"instead of :func:`time.perf_counter`, which is the default"
msgstr ""
"mede apenas o tempo de processamento, e não o tempo total de execução, "
"usando :func:`time.process_time` em vez de :func:`time.perf_counter`, que é "
"o padrão"

#: ../../library/timeit.rst:238
msgid ""
"specify a time unit for timer output; can select ``nsec``, ``usec``, "
"``msec``, or ``sec``"
msgstr ""
"especifique uma unidade de tempo para a saída do cronômetro; pode selecionar "
"``nsec``, ``usec``, ``msec``, ou ``sec``"

#: ../../library/timeit.rst:244
msgid "print raw timing results; repeat for more digits precision"
msgstr ""
"imprime resultados brutos de tempo; repetir para obter mais precisão de "
"dígitos"

#: ../../library/timeit.rst:248
msgid "print a short usage message and exit"
msgstr "imprime uma mensagem curta de uso e sai"

#: ../../library/timeit.rst:250
msgid ""
"A multi-line statement may be given by specifying each line as a separate "
"statement argument; indented lines are possible by enclosing an argument in "
"quotes and using leading spaces.  Multiple :option:`-s` options are treated "
"similarly."
msgstr ""

#: ../../library/timeit.rst:255
msgid ""
"If :option:`-n` is not given, a suitable number of loops is calculated by "
"trying increasing numbers from the sequence 1, 2, 5, 10, 20, 50, ... until "
"the total time is at least 0.2 seconds."
msgstr ""
"Se :option:`-n` não for informada, um número adequado de loops será "
"calculado tentando adicionar números numa sequência como 1, 2, 5, 10, 20, "
"50, ... até que o tempo total seja de pelo menos 0,2 segundos."

#: ../../library/timeit.rst:259
msgid ""
":func:`default_timer` measurements can be affected by other programs running "
"on the same machine, so the best thing to do when accurate timing is "
"necessary is to repeat the timing a few times and use the best time.  The :"
"option:`-r` option is good for this; the default of 5 repetitions is "
"probably enough in most cases.  You can use :func:`time.process_time` to "
"measure CPU time."
msgstr ""

#: ../../library/timeit.rst:267
msgid ""
"There is a certain baseline overhead associated with executing a pass "
"statement. The code here doesn't try to hide it, but you should be aware of "
"it.  The baseline overhead can be measured by invoking the program without "
"arguments, and it might differ between Python versions."
msgstr ""
"Há uma certa sobrecarga padrão associada à execução de uma instrução *pass*. "
"O código aqui não tenta ocultá-lo, mas você deve estar ciente disso.  A "
"sobrecarga padrão pode ser medida invocando pelo programa sem argumento, e "
"pode ser diferente entre diferentes versões Python."

#: ../../library/timeit.rst:276
msgid "Examples"
msgstr "Exemplos"

#: ../../library/timeit.rst:278
msgid ""
"It is possible to provide a setup statement that is executed only once at "
"the beginning:"
msgstr ""
"É possível fornecer uma instrução de configuração que é executada apenas uma "
"vez no início:"

#: ../../library/timeit.rst:280
msgid ""
"$ python -m timeit -s \"text = 'sample string'; char = 'g'\" \"char in "
"text\"\n"
"5000000 loops, best of 5: 0.0877 usec per loop\n"
"$ python -m timeit -s \"text = 'sample string'; char = 'g'\" \"text."
"find(char)\"\n"
"1000000 loops, best of 5: 0.342 usec per loop"
msgstr ""

#: ../../library/timeit.rst:287
msgid ""
"In the output, there are three fields. The loop count, which tells you how "
"many times the statement body was run per timing loop repetition. The "
"repetition count ('best of 5') which tells you how many times the timing "
"loop was repeated, and finally the time the statement body took on average "
"within the best repetition of the timing loop. That is, the time the fastest "
"repetition took divided by the loop count."
msgstr ""
"Na saída, existem três campos. A contagem de laços, que informa quantas "
"vezes o corpo da instrução foi executado por repetição do laço de "
"temporização. A contagem de repetições ('melhor de 5') que informa quantas "
"vezes o laço de temporização foi repetido e, finalmente, o tempo que o corpo "
"da instrução levou, em média, na melhor repetição do laço de temporização. "
"Ou seja, o tempo necessário para a repetição mais rápida dividido pela "
"contagem de interações."

#: ../../library/timeit.rst:296
msgid ""
">>> import timeit\n"
">>> timeit.timeit('char in text', setup='text = \"sample string\"; char = "
"\"g\"')\n"
"0.41440500499993504\n"
">>> timeit.timeit('text.find(char)', setup='text = \"sample string\"; char = "
"\"g\"')\n"
"1.7246671520006203"
msgstr ""

#: ../../library/timeit.rst:302
msgid "The same can be done using the :class:`Timer` class and its methods::"
msgstr "O mesmo pode ser feito usando a classe :class:`Timer` e seus métodos::"

#: ../../library/timeit.rst:304
msgid ""
">>> import timeit\n"
">>> t = timeit.Timer('char in text', setup='text = \"sample string\"; char = "
"\"g\"')\n"
">>> t.timeit()\n"
"0.3955516149999312\n"
">>> t.repeat()\n"
"[0.40183617287970225, 0.37027556854118704, 0.38344867356679524, "
"0.3712595970846668, 0.37866875250654886]"
msgstr ""

#: ../../library/timeit.rst:312
msgid ""
"The following examples show how to time expressions that contain multiple "
"lines. Here we compare the cost of using :func:`hasattr` vs. :keyword:`try`/:"
"keyword:`except` to test for missing and present object attributes:"
msgstr ""
"Os exemplos a seguir mostram como cronometrar expressões que contêm várias "
"linhas. Aqui comparamos o custo de usar :func:`hasattr` vs. :keyword:`try`/:"
"keyword:`except` para testar atributos de objetos presentes e ausentes:"

#: ../../library/timeit.rst:316
msgid ""
"$ python -m timeit \"try:\" \"  str.__bool__\" \"except AttributeError:\" "
"\"  pass\"\n"
"20000 loops, best of 5: 15.7 usec per loop\n"
"$ python -m timeit \"if hasattr(str, '__bool__'): pass\"\n"
"50000 loops, best of 5: 4.26 usec per loop\n"
"\n"
"$ python -m timeit \"try:\" \"  int.__bool__\" \"except AttributeError:\" "
"\"  pass\"\n"
"200000 loops, best of 5: 1.43 usec per loop\n"
"$ python -m timeit \"if hasattr(int, '__bool__'): pass\"\n"
"100000 loops, best of 5: 2.23 usec per loop"
msgstr ""

#: ../../library/timeit.rst:330
msgid ""
">>> import timeit\n"
">>> # attribute is missing\n"
">>> s = \"\"\"\\\n"
"... try:\n"
"...     str.__bool__\n"
"... except AttributeError:\n"
"...     pass\n"
"... \"\"\"\n"
">>> timeit.timeit(stmt=s, number=100000)\n"
"0.9138244460009446\n"
">>> s = \"if hasattr(str, '__bool__'): pass\"\n"
">>> timeit.timeit(stmt=s, number=100000)\n"
"0.5829014980008651\n"
">>>\n"
">>> # attribute is present\n"
">>> s = \"\"\"\\\n"
"... try:\n"
"...     int.__bool__\n"
"... except AttributeError:\n"
"...     pass\n"
"... \"\"\"\n"
">>> timeit.timeit(stmt=s, number=100000)\n"
"0.04215312199994514\n"
">>> s = \"if hasattr(int, '__bool__'): pass\"\n"
">>> timeit.timeit(stmt=s, number=100000)\n"
"0.08588060699912603"
msgstr ""

#: ../../library/timeit.rst:358
msgid ""
"To give the :mod:`timeit` module access to functions you define, you can "
"pass a *setup* parameter which contains an import statement::"
msgstr ""
"Para dar ao módulo :mod:`timeit` acesso as funções que você definiu, você "
"pode passar o parâmetro *setup*, que contém um instrução de importar::"

#: ../../library/timeit.rst:361
msgid ""
"def test():\n"
"    \"\"\"Stupid test function\"\"\"\n"
"    L = [i for i in range(100)]\n"
"\n"
"if __name__ == '__main__':\n"
"    import timeit\n"
"    print(timeit.timeit(\"test()\", setup=\"from __main__ import test\"))"
msgstr ""

#: ../../library/timeit.rst:369
msgid ""
"Another option is to pass :func:`globals` to the  *globals* parameter, which "
"will cause the code to be executed within your current global namespace.  "
"This can be more convenient than individually specifying imports::"
msgstr ""
"Outra opção é passar :func:`globals` para o parâmetro *globals*, o que fará "
"com que o código seja executado em seu espaço de nomes global. Isso pode ser "
"mais conveniente do que especificar individualmente imports::"

#: ../../library/timeit.rst:373
msgid ""
"def f(x):\n"
"    return x**2\n"
"def g(x):\n"
"    return x**4\n"
"def h(x):\n"
"    return x**8\n"
"\n"
"import timeit\n"
"print(timeit.timeit('[func(42) for func in (f,g,h)]', globals=globals()))"
msgstr ""

#: ../../library/timeit.rst:9
msgid "Benchmarking"
msgstr ""

#: ../../library/timeit.rst:9
msgid "Performance"
msgstr "Desempenho"
