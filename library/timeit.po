# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2017-10-09 19:02+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/"
"python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../library/timeit.rst:2
msgid ":mod:`timeit` --- Measure execution time of small code snippets"
msgstr ""

#: ../../library/timeit.rst:14
msgid "**Source code:** :source:`Lib/timeit.py`"
msgstr "**Código Fonte:** :source:`Lib/timeit.py`"

#: ../../library/timeit.rst:18
msgid ""
"This module provides a simple way to time small bits of Python code. It has "
"both a :ref:`timeit-command-line-interface` as well as a :ref:`callable "
"<python-interface>` one.  It avoids a number of common traps for measuring "
"execution times. See also Tim Peters' introduction to the \"Algorithms\" "
"chapter in the *Python Cookbook*, published by O'Reilly."
msgstr ""

#: ../../library/timeit.rst:26
msgid "Basic Examples"
msgstr "Exemplos básicos"

#: ../../library/timeit.rst:28
msgid ""
"The following example shows how the :ref:`timeit-command-line-interface` can "
"be used to compare three different expressions:"
msgstr ""
"O exemplo a seguir mostra como a :ref:`timeit-command-line-interface` pode "
"ser usado para comparar três expressões diferentes:"

#: ../../library/timeit.rst:40
msgid "This can be achieved from the :ref:`python-interface` with::"
msgstr "Isso pode ser obtido da interface :ref:`python-interface` ::"

#: ../../library/timeit.rst:50
msgid ""
"Note however that :mod:`timeit` will automatically determine the number of "
"repetitions only when the command-line interface is used.  In the :ref:"
"`timeit-examples` section you can find more advanced examples."
msgstr ""

#: ../../library/timeit.rst:58
msgid "Python Interface"
msgstr "Interface em Python"

#: ../../library/timeit.rst:60
msgid "The module defines three convenience functions and a public class:"
msgstr "Este módulo define três funções e uma classe pública:"

#: ../../library/timeit.rst:65
msgid ""
"Create a :class:`Timer` instance with the given statement, *setup* code and "
"*timer* function and run its :meth:`.timeit` method with *number* executions."
msgstr ""

#: ../../library/timeit.rst:73
msgid ""
"Create a :class:`Timer` instance with the given statement, *setup* code and "
"*timer* function and run its :meth:`.repeat` method with the given *repeat* "
"count and *number* executions."
msgstr ""

#: ../../library/timeit.rst:82
msgid ""
"Define a default timer, in a platform-specific manner.  On Windows, :func:"
"`time.clock` has microsecond granularity, but :func:`time.time`'s "
"granularity is 1/60th of a second.  On Unix, :func:`time.clock` has 1/100th "
"of a second granularity, and :func:`time.time` is much more precise.  On "
"either platform, :func:`default_timer` measures wall clock time, not the CPU "
"time.  This means that other processes running on the same computer may "
"interfere with the timing."
msgstr ""

#: ../../library/timeit.rst:93
msgid "Class for timing execution speed of small code snippets."
msgstr ""
"Classe para cronometrar a velocidade de execução de pequenos trechos de "
"código."

#: ../../library/timeit.rst:95
msgid ""
"The constructor takes a statement to be timed, an additional statement used "
"for setup, and a timer function.  Both statements default to ``'pass'``; the "
"timer function is platform-dependent (see the module doc string). *stmt* and "
"*setup* may also contain multiple statements separated by ``;`` or newlines, "
"as long as they don't contain multi-line string literals."
msgstr ""

#: ../../library/timeit.rst:101
msgid ""
"To measure the execution time of the first statement, use the :meth:`."
"timeit` method.  The :meth:`.repeat` method is a convenience to call :meth:`."
"timeit` multiple times and return a list of results."
msgstr ""

#: ../../library/timeit.rst:105
msgid ""
"The *stmt* and *setup* parameters can now also take objects that are "
"callable without arguments.  This will embed calls to them in a timer "
"function that will then be executed by :meth:`.timeit`.  Note that the "
"timing overhead is a little larger in this case because of the extra "
"function calls."
msgstr ""

#: ../../library/timeit.rst:115
msgid ""
"Time *number* executions of the main statement.  This executes the setup "
"statement once, and then returns the time it takes to execute the main "
"statement a number of times, measured in seconds as a float. The argument is "
"the number of times through the loop, defaulting to one million.  The main "
"statement, the setup statement and the timer function to be used are passed "
"to the constructor."
msgstr ""

#: ../../library/timeit.rst:124
msgid ""
"By default, :meth:`.timeit` temporarily turns off :term:`garbage collection` "
"during the timing.  The advantage of this approach is that it makes "
"independent timings more comparable.  This disadvantage is that GC may be an "
"important component of the performance of the function being measured.  If "
"so, GC can be re-enabled as the first statement in the *setup* string.  For "
"example::"
msgstr ""

#: ../../library/timeit.rst:136
msgid "Call :meth:`.timeit` a few times."
msgstr "Chama :meth:`.timeit` algumas vezes."

#: ../../library/timeit.rst:138
msgid ""
"This is a convenience function that calls the :meth:`.timeit` repeatedly, "
"returning a list of results.  The first argument specifies how many times to "
"call :meth:`.timeit`.  The second argument specifies the *number* argument "
"for :meth:`.timeit`."
msgstr ""
"Esse é um função de conveniência que chama o :meth:`.timeit` repetidamente e "
"retorna uma lista de resultados.  O primeiro argumento especifica quantas "
"vezes deve chamar o :meth:`.timeit`.  O segundo argumento especifica o "
"argumento *number* para :meth:`.timeit`."

#: ../../library/timeit.rst:145
msgid ""
"It's tempting to calculate mean and standard deviation from the result "
"vector and report these.  However, this is not very useful. In a typical "
"case, the lowest value gives a lower bound for how fast your machine can run "
"the given code snippet; higher values in the result vector are typically not "
"caused by variability in Python's speed, but by other processes interfering "
"with your timing accuracy. So the :func:`min` of the result is probably the "
"only number you should be interested in.  After that, you should look at the "
"entire vector and apply common sense rather than statistics."
msgstr ""

#: ../../library/timeit.rst:158
msgid "Helper to print a traceback from the timed code."
msgstr "Função auxiliar para imprimir um traceback do código cronometrado."

#: ../../library/timeit.rst:160
msgid "Typical use::"
msgstr "Uso típico::"

#: ../../library/timeit.rst:168
msgid ""
"The advantage over the standard traceback is that source lines in the "
"compiled template will be displayed. The optional *file* argument directs "
"where the traceback is sent; it defaults to :data:`sys.stderr`."
msgstr ""

#: ../../library/timeit.rst:176
msgid "Command-Line Interface"
msgstr "Interface de Linha de Comando"

#: ../../library/timeit.rst:178
msgid ""
"When called as a program from the command line, the following form is used::"
msgstr ""
"Quando chamado como um programa a partir da linha de comando, as seguintes "
"opções estão disponíveis::"

#: ../../library/timeit.rst:182
msgid "Where the following options are understood:"
msgstr "As seguintes opções são permitidas"

#: ../../library/timeit.rst:188
msgid "how many times to execute 'statement'"
msgstr "Quantas vezes deve executar 'statement'"

#: ../../library/timeit.rst:192
msgid "how many times to repeat the timer (default 3)"
msgstr ""

#: ../../library/timeit.rst:196
msgid "statement to be executed once initially (default ``pass``)"
msgstr ""
"instrução a ser executada apenas uma vez e quando iniciada (padrão ``pass`` )"

#: ../../library/timeit.rst:200
msgid "use :func:`time.time` (default on all platforms but Windows)"
msgstr ""

#: ../../library/timeit.rst:204
msgid "use :func:`time.clock` (default on Windows)"
msgstr ""

#: ../../library/timeit.rst:208
msgid "print raw timing results; repeat for more digits precision"
msgstr ""
"imprime resultados brutos de tempo; repetir para obter mais precisão de "
"dígitos"

#: ../../library/timeit.rst:212
msgid "print a short usage message and exit"
msgstr "imprime uma mensagem curta de uso e sai"

#: ../../library/timeit.rst:214
msgid ""
"A multi-line statement may be given by specifying each line as a separate "
"statement argument; indented lines are possible by enclosing an argument in "
"quotes and using leading spaces.  Multiple :option:`-s` options are treated "
"similarly."
msgstr ""

#: ../../library/timeit.rst:219
msgid ""
"If :option:`-n` is not given, a suitable number of loops is calculated by "
"trying successive powers of 10 until the total time is at least 0.2 seconds."
msgstr ""

#: ../../library/timeit.rst:222
msgid ""
":func:`default_timer` measurations can be affected by other programs running "
"on the same machine, so the best thing to do when accurate timing is "
"necessary is to repeat the timing a few times and use the best time.  The :"
"option:`-r` option is good for this; the default of 3 repetitions is "
"probably enough in most cases.  On Unix, you can use :func:`time.clock` to "
"measure CPU time."
msgstr ""

#: ../../library/timeit.rst:231
msgid ""
"There is a certain baseline overhead associated with executing a pass "
"statement. The code here doesn't try to hide it, but you should be aware of "
"it.  The baseline overhead can be measured by invoking the program without "
"arguments, and it might differ between Python versions.  Also, to fairly "
"compare older Python versions to Python 2.3, you may want to use Python's :"
"option:`!-O` option (see :ref:`Optimizations <using-on-optimizations>`) for "
"the older versions to avoid timing ``SET_LINENO`` instructions."
msgstr ""

#: ../../library/timeit.rst:243
msgid "Examples"
msgstr "Exemplos"

#: ../../library/timeit.rst:245
msgid ""
"It is possible to provide a setup statement that is executed only once at "
"the beginning:"
msgstr ""
"É possível fornecer uma instrução de configuração que é executada apenas uma "
"vez no início:"

#: ../../library/timeit.rst:262
msgid "The same can be done using the :class:`Timer` class and its methods::"
msgstr "O mesmo pode ser feito usando a classe :class:`Timer` e seus métodos::"

#: ../../library/timeit.rst:272
msgid ""
"The following examples show how to time expressions that contain multiple "
"lines. Here we compare the cost of using :func:`hasattr` vs. :keyword:`try`/:"
"keyword:`except` to test for missing and present object attributes:"
msgstr ""
"Os exemplos a seguir mostram como cronometrar expressões que contêm várias "
"linhas. Aqui comparamos o custo de usar :func:`hasattr` vs. :keyword:`try`/:"
"keyword:`except` para testar atributos de objetos presentes e ausentes:"

#: ../../library/timeit.rst:317
msgid ""
"To give the :mod:`timeit` module access to functions you define, you can "
"pass a *setup* parameter which contains an import statement::"
msgstr ""
"Para dar ao módulo :mod:`timeit` acesso as funções que você definiu, você "
"pode passar o parâmetro *setup*, que contém um instrução de importar::"
