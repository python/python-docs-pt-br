# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Raphael Mendonça, 2019
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:32+0000\n"
"Last-Translator: Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, "
"2019\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../library/timeit.rst:2
msgid ":mod:`timeit` --- Measure execution time of small code snippets"
msgstr ""

#: ../../library/timeit.rst:7
msgid "**Source code:** :source:`Lib/timeit.py`"
msgstr "**Código Fonte:** :source:`Lib/timeit.py`"

#: ../../library/timeit.rst:15
msgid ""
"This module provides a simple way to time small bits of Python code. It has "
"both a :ref:`timeit-command-line-interface` as well as a :ref:`callable "
"<python-interface>` one.  It avoids a number of common traps for measuring "
"execution times. See also Tim Peters' introduction to the \"Algorithms\" "
"chapter in the *Python Cookbook*, published by O'Reilly."
msgstr ""

#: ../../library/timeit.rst:23
msgid "Basic Examples"
msgstr "Exemplos básicos"

#: ../../library/timeit.rst:25
msgid ""
"The following example shows how the :ref:`timeit-command-line-interface` can "
"be used to compare three different expressions:"
msgstr ""
"O exemplo a seguir mostra como a :ref:`timeit-command-line-interface` pode "
"ser usado para comparar três expressões diferentes:"

#: ../../library/timeit.rst:37
msgid "This can be achieved from the :ref:`python-interface` with::"
msgstr "Isso pode ser obtido da interface :ref:`python-interface` ::"

#: ../../library/timeit.rst:48
msgid ""
"Note however that :mod:`timeit` will automatically determine the number of "
"repetitions only when the command-line interface is used.  In the :ref:"
"`timeit-examples` section you can find more advanced examples."
msgstr ""

#: ../../library/timeit.rst:56
msgid "Python Interface"
msgstr "Interface em Python"

#: ../../library/timeit.rst:58
msgid "The module defines three convenience functions and a public class:"
msgstr "Este módulo define três funções e uma classe pública:"

#: ../../library/timeit.rst:63
msgid ""
"Create a :class:`Timer` instance with the given statement, *setup* code and "
"*timer* function and run its :meth:`.timeit` method with *number* "
"executions. The optional *globals* argument specifies a namespace in which "
"to execute the code."
msgstr ""
"Cria uma instância de :class:`Timer` com o código de *setup* e a função "
"*timer* função para executar o método :meth:`.timeit` com o total de "
"execuções informado em *number*. O argumento opcional *globals* especifica "
"um espaço de nomes no qual o código será executado."

#: ../../library/timeit.rst:68 ../../library/timeit.rst:79
#: ../../library/timeit.rst:113
msgid "The optional *globals* parameter was added."
msgstr "O parâmetro opcional *globals* foi adicionado."

#: ../../library/timeit.rst:74
msgid ""
"Create a :class:`Timer` instance with the given statement, *setup* code and "
"*timer* function and run its :meth:`.repeat` method with the given *repeat* "
"count and *number* executions.  The optional *globals* argument specifies a "
"namespace in which to execute the code."
msgstr ""

#: ../../library/timeit.rst:84
msgid "The default timer, which is always :func:`time.perf_counter`."
msgstr ""

#: ../../library/timeit.rst:86
msgid ":func:`time.perf_counter` is now the default timer."
msgstr ":func:`time.perf_counter` é o cronômetro padrão agora."

#: ../../library/timeit.rst:92
msgid "Class for timing execution speed of small code snippets."
msgstr ""
"Classe para cronometrar a velocidade de execução de pequenos trechos de "
"código."

#: ../../library/timeit.rst:94
msgid ""
"The constructor takes a statement to be timed, an additional statement used "
"for setup, and a timer function.  Both statements default to ``'pass'``; the "
"timer function is platform-dependent (see the module doc string). *stmt* and "
"*setup* may also contain multiple statements separated by ``;`` or newlines, "
"as long as they don't contain multi-line string literals.  The statement "
"will by default be executed within timeit's namespace; this behavior can be "
"controlled by passing a namespace to *globals*."
msgstr ""

#: ../../library/timeit.rst:102
msgid ""
"To measure the execution time of the first statement, use the :meth:`."
"timeit` method.  The :meth:`.repeat` and :meth:`.autorange` methods are "
"convenience methods to call :meth:`.timeit` multiple times."
msgstr ""
"Para medir o tempo de execução da primeira instrução use o método :meth:`."
"timeit`. Os métodos :meth:`.repeat` e :meth:`.autorange` são convenientes "
"para chamar :meth:`.timeit` várias vezes."

#: ../../library/timeit.rst:106
msgid ""
"The execution time of *setup* is excluded from the overall timed execution "
"run."
msgstr ""
"O tempo de execução de *setup* é excluído do tempo total de execução "
"cronometrado."

#: ../../library/timeit.rst:108
msgid ""
"The *stmt* and *setup* parameters can also take objects that are callable "
"without arguments.  This will embed calls to them in a timer function that "
"will then be executed by :meth:`.timeit`.  Note that the timing overhead is "
"a little larger in this case because of the extra function calls."
msgstr ""

#: ../../library/timeit.rst:118
msgid ""
"Time *number* executions of the main statement.  This executes the setup "
"statement once, and then returns the time it takes to execute the main "
"statement a number of times, measured in seconds as a float. The argument is "
"the number of times through the loop, defaulting to one million.  The main "
"statement, the setup statement and the timer function to be used are passed "
"to the constructor."
msgstr ""

#: ../../library/timeit.rst:127
msgid ""
"By default, :meth:`.timeit` temporarily turns off :term:`garbage collection` "
"during the timing.  The advantage of this approach is that it makes "
"independent timings more comparable.  This disadvantage is that GC may be an "
"important component of the performance of the function being measured.  If "
"so, GC can be re-enabled as the first statement in the *setup* string.  For "
"example::"
msgstr ""

#: ../../library/timeit.rst:139
msgid "Automatically determine how many times to call :meth:`.timeit`."
msgstr "Determina automaticamente quantas vezes chamar :meth:`.timeit`."

#: ../../library/timeit.rst:141
msgid ""
"This is a convenience function that calls :meth:`.timeit` repeatedly so that "
"the total time >= 0.2 second, returning the eventual (number of loops, time "
"taken for that number of loops). It calls :meth:`.timeit` with *number* set "
"to successive powers of ten (10, 100, 1000, ...) up to a maximum of one "
"billion, until the time taken is at least 0.2 second, or the maximum is "
"reached."
msgstr ""

#: ../../library/timeit.rst:148
msgid ""
"If *callback* is given and is not ``None``, it will be called after each "
"trial with two arguments: ``callback(number, time_taken)``."
msgstr ""
"Se *callback* for fornecido e não for ``None``, ele será chamado após cada "
"tentativa e tem dois argumento: ``callback(number, time_taken)``."

#: ../../library/timeit.rst:156
msgid "Call :meth:`.timeit` a few times."
msgstr "Chama :meth:`.timeit` algumas vezes."

#: ../../library/timeit.rst:158
msgid ""
"This is a convenience function that calls the :meth:`.timeit` repeatedly, "
"returning a list of results.  The first argument specifies how many times to "
"call :meth:`.timeit`.  The second argument specifies the *number* argument "
"for :meth:`.timeit`."
msgstr ""
"Esse é um função de conveniência que chama o :meth:`.timeit` repetidamente e "
"retorna uma lista de resultados.  O primeiro argumento especifica quantas "
"vezes deve chamar o :meth:`.timeit`.  O segundo argumento especifica o "
"argumento *number* para :meth:`.timeit`."

#: ../../library/timeit.rst:165
msgid ""
"It's tempting to calculate mean and standard deviation from the result "
"vector and report these.  However, this is not very useful. In a typical "
"case, the lowest value gives a lower bound for how fast your machine can run "
"the given code snippet; higher values in the result vector are typically not "
"caused by variability in Python's speed, but by other processes interfering "
"with your timing accuracy. So the :func:`min` of the result is probably the "
"only number you should be interested in.  After that, you should look at the "
"entire vector and apply common sense rather than statistics."
msgstr ""

#: ../../library/timeit.rst:178
msgid "Helper to print a traceback from the timed code."
msgstr "Função auxiliar para imprimir um traceback do código cronometrado."

#: ../../library/timeit.rst:180
msgid "Typical use::"
msgstr "Uso típico::"

#: ../../library/timeit.rst:188
msgid ""
"The advantage over the standard traceback is that source lines in the "
"compiled template will be displayed.  The optional *file* argument directs "
"where the traceback is sent; it defaults to :data:`sys.stderr`."
msgstr ""
"A vantagem em relação ao traceback padrão é que as linhas de origem no "
"modelo compilado serão exibidas.  O argumento opcional *file* direciona para "
"onde o traceback é enviado; o padrão é :data:`sys.stderr`."

#: ../../library/timeit.rst:196
msgid "Command-Line Interface"
msgstr "Interface de Linha de Comando"

#: ../../library/timeit.rst:198
msgid ""
"When called as a program from the command line, the following form is used::"
msgstr ""
"Quando chamado como um programa a partir da linha de comando, as seguintes "
"opções estão disponíveis::"

#: ../../library/timeit.rst:202
msgid "Where the following options are understood:"
msgstr "As seguintes opções são permitidas"

#: ../../library/timeit.rst:208
msgid "how many times to execute 'statement'"
msgstr "Quantas vezes deve executar 'statement'"

#: ../../library/timeit.rst:212
msgid "how many times to repeat the timer (default 3)"
msgstr ""

#: ../../library/timeit.rst:216
msgid "statement to be executed once initially (default ``pass``)"
msgstr ""
"instrução a ser executada apenas uma vez e quando iniciada (padrão ``pass`` )"

#: ../../library/timeit.rst:220
msgid ""
"measure process time, not wallclock time, using :func:`time.process_time` "
"instead of :func:`time.perf_counter`, which is the default"
msgstr ""
"mede apenas o tempo de processamento, e não o tempo total de execução, "
"usando :func:`time.process_time` em vez de :func:`time.perf_counter`, que é "
"o padrão"

#: ../../library/timeit.rst:227
msgid "use :func:`time.time` (deprecated)"
msgstr ""

#: ../../library/timeit.rst:231
msgid "specify a time unit for timer output; can select usec, msec, or sec"
msgstr ""

#: ../../library/timeit.rst:237
msgid "use :func:`time.clock` (deprecated)"
msgstr ""

#: ../../library/timeit.rst:241
msgid "print raw timing results; repeat for more digits precision"
msgstr ""
"imprime resultados brutos de tempo; repetir para obter mais precisão de "
"dígitos"

#: ../../library/timeit.rst:245
msgid "print a short usage message and exit"
msgstr "imprime uma mensagem curta de uso e sai"

#: ../../library/timeit.rst:247
msgid ""
"A multi-line statement may be given by specifying each line as a separate "
"statement argument; indented lines are possible by enclosing an argument in "
"quotes and using leading spaces.  Multiple :option:`-s` options are treated "
"similarly."
msgstr ""

#: ../../library/timeit.rst:252
msgid ""
"If :option:`-n` is not given, a suitable number of loops is calculated by "
"trying successive powers of 10 until the total time is at least 0.2 seconds."
msgstr ""

#: ../../library/timeit.rst:255
msgid ""
":func:`default_timer` measurements can be affected by other programs running "
"on the same machine, so the best thing to do when accurate timing is "
"necessary is to repeat the timing a few times and use the best time.  The :"
"option:`-r` option is good for this; the default of 3 repetitions is "
"probably enough in most cases.  You can use :func:`time.process_time` to "
"measure CPU time."
msgstr ""

#: ../../library/timeit.rst:263
msgid ""
"There is a certain baseline overhead associated with executing a pass "
"statement. The code here doesn't try to hide it, but you should be aware of "
"it.  The baseline overhead can be measured by invoking the program without "
"arguments, and it might differ between Python versions."
msgstr ""
"Há uma certa sobrecarga padrão associada à execução de uma instrução *pass*. "
"O código aqui não tenta ocultá-lo, mas você deve estar ciente disso.  A "
"sobrecarga padrão pode ser medida invocando pelo programa sem argumento, e "
"pode ser diferente entre diferentes versões Python."

#: ../../library/timeit.rst:272
msgid "Examples"
msgstr "Exemplos"

#: ../../library/timeit.rst:274
msgid ""
"It is possible to provide a setup statement that is executed only once at "
"the beginning:"
msgstr ""
"É possível fornecer uma instrução de configuração que é executada apenas uma "
"vez no início:"

#: ../../library/timeit.rst:291
msgid "The same can be done using the :class:`Timer` class and its methods::"
msgstr "O mesmo pode ser feito usando a classe :class:`Timer` e seus métodos::"

#: ../../library/timeit.rst:301
msgid ""
"The following examples show how to time expressions that contain multiple "
"lines. Here we compare the cost of using :func:`hasattr` vs. :keyword:`try`/:"
"keyword:`except` to test for missing and present object attributes:"
msgstr ""
"Os exemplos a seguir mostram como cronometrar expressões que contêm várias "
"linhas. Aqui comparamos o custo de usar :func:`hasattr` vs. :keyword:`try`/:"
"keyword:`except` para testar atributos de objetos presentes e ausentes:"

#: ../../library/timeit.rst:347
msgid ""
"To give the :mod:`timeit` module access to functions you define, you can "
"pass a *setup* parameter which contains an import statement::"
msgstr ""
"Para dar ao módulo :mod:`timeit` acesso as funções que você definiu, você "
"pode passar o parâmetro *setup*, que contém um instrução de importar::"

#: ../../library/timeit.rst:358
msgid ""
"Another option is to pass :func:`globals` to the  *globals* parameter, which "
"will cause the code to be executed within your current global namespace.  "
"This can be more convenient than individually specifying imports::"
msgstr ""
"Outra opção é passar :func:`globals` para o parâmetro *globals*, o que fará "
"com que o código seja executado em seu espaço de nomes global. Isso pode ser "
"mais conveniente do que especificar individualmente imports::"
