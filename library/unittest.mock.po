# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-11 17:17+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/unittest.mock.rst:3
msgid ":mod:`unittest.mock` --- mock object library"
msgstr ":mod:`unittest.mock` --- biblioteca de objeto mock"

#: ../../library/unittest.mock.rst:13
msgid "**Source code:** :source:`Lib/unittest/mock.py`"
msgstr "**Código-fonte:** :source:`Lib/unittest/mock.py`"

#: ../../library/unittest.mock.rst:17
msgid ""
":mod:`unittest.mock` is a library for testing in Python. It allows you to "
"replace parts of your system under test with mock objects and make "
"assertions about how they have been used."
msgstr ""
":mod:`unittest.mock` é uma biblioteca para teste em Python. Que permite "
"substituir partes do seu sistema em teste por objetos simulados e fazer "
"afirmações sobre como elas foram usadas."

#: ../../library/unittest.mock.rst:21
msgid ""
":mod:`unittest.mock` provides a core :class:`Mock` class removing the need "
"to create a host of stubs throughout your test suite. After performing an "
"action, you can make assertions about which methods / attributes were used "
"and arguments they were called with. You can also specify return values and "
"set needed attributes in the normal way."
msgstr ""
":mod:`unittest.mock` fornece uma classe core :class:`Mock` removendo a "
"necessidade de criar uma série de stubs em todo o seu conjunto de testes. "
"Depois de executar uma ação, você pode fazer afirmações sobre quais "
"métodos / atributos foram usados e com quais argumentos foram chamados. Você "
"também pode especificar valores de retorno e definir os atributos "
"necessários da maneira normal."

#: ../../library/unittest.mock.rst:27
msgid ""
"Additionally, mock provides a :func:`patch` decorator that handles patching "
"module and class level attributes within the scope of a test, along with :"
"const:`sentinel` for creating unique objects. See the `quick guide`_ for "
"some examples of how to use :class:`Mock`, :class:`MagicMock` and :func:"
"`patch`."
msgstr ""
"Adicionalmente, o mock fornece um decorador :func:`patch` que lida com os "
"atributos do módulo de patch e do nível de classe no escopo de um teste, "
"junto com :const:`sentinel` para criar objetos únicos. Veja o `guia rápido`_ "
"para alguns exemplos de como usar :class:`Mock`, :class:`MagicMock` e :func:"
"`patch`."

#: ../../library/unittest.mock.rst:33
msgid ""
"Mock is designed for use with :mod:`unittest` and is based on the 'action -> "
"assertion' pattern instead of 'record -> replay' used by many mocking "
"frameworks."
msgstr ""
"Mock foi projetado para uso com :mod:`unittest` e é baseado no padrão 'ação -"
"> asserção' em vez de 'gravar -> reproduzir' usado por muitas estruturas de "
"simulação."

#: ../../library/unittest.mock.rst:37
msgid ""
"There is a backport of :mod:`unittest.mock` for earlier versions of Python, "
"available as `mock on PyPI <https://pypi.org/project/mock>`_."
msgstr ""
"Existe um backport de :mod:`unittest.mock` para versões anteriores do "
"Python, disponível como `mock no PyPI <https://pypi.org/project/mock>`_."

#: ../../library/unittest.mock.rst:42
msgid "Quick Guide"
msgstr "Guia Rápido"

#: ../../library/unittest.mock.rst:60
msgid ""
":class:`Mock` and :class:`MagicMock` objects create all attributes and "
"methods as you access them and store details of how they have been used. You "
"can configure them, to specify return values or limit what attributes are "
"available, and then make assertions about how they have been used:"
msgstr ""
"Os objetos :class:`Mock` e :class:`MagicMock` criam todos os atributos e "
"métodos à medida que você os acessa e armazena detalhes de como eles foram "
"usados. Você pode configurá-los, especificar valores de retorno ou limitar "
"quais atributos estão disponíveis e, em seguida, fazer afirmações sobre como "
"eles foram usados:"

#: ../../library/unittest.mock.rst:72
msgid ""
":attr:`side_effect` allows you to perform side effects, including raising an "
"exception when a mock is called:"
msgstr ""
":attr:`side_effect` permite que você execute efeitos colaterais, incluindo "
"levantar uma exceção quando um mock é chamado:"

#: ../../library/unittest.mock.rst:92
msgid ""
"Mock has many other ways you can configure it and control its behaviour. For "
"example the *spec* argument configures the mock to take its specification "
"from another object. Attempting to access attributes or methods on the mock "
"that don't exist on the spec will fail with an :exc:`AttributeError`."
msgstr ""
"O Mock tem muitas outras maneiras de configurá-lo e controlar seu "
"comportamento. Por exemplo, o argumento *spec* configura o mock para obter "
"sua especificação de outro objeto. Tentar acessar atributos ou métodos no "
"mock que não existem no spec falhará com um :exc:`AttributeError`."

#: ../../library/unittest.mock.rst:97
msgid ""
"The :func:`patch` decorator / context manager makes it easy to mock classes "
"or objects in a module under test. The object you specify will be replaced "
"with a mock (or other object) during the test and restored when the test "
"ends::"
msgstr ""
"O gerenciador de contexto / decorador :func:`patch` facilita a simulação de "
"classes ou objetos em um módulo em teste. O objeto que você especificar será "
"substituído por um mock (ou outro objeto) durante o teste e restaurado "
"quando o teste terminar::"

#: ../../library/unittest.mock.rst:116
msgid ""
"When you nest patch decorators the mocks are passed in to the decorated "
"function in the same order they applied (the normal *Python* order that "
"decorators are applied). This means from the bottom up, so in the example "
"above the mock for ``module.ClassName1`` is passed in first."
msgstr ""
"Quando você aninha decoradores de patches, as simulações são passadas para a "
"função decorada na mesma ordem em que foram aplicadas (a ordem normal "
"*Python* em que os decoradores são aplicados). Isso significa de baixo para "
"cima, portanto, no exemplo acima, a simulação para ``module.ClassName1`` é "
"passada primeiro."

#: ../../library/unittest.mock.rst:121
msgid ""
"With :func:`patch` it matters that you patch objects in the namespace where "
"they are looked up. This is normally straightforward, but for a quick guide "
"read :ref:`where to patch <where-to-patch>`."
msgstr ""
"Com :func:`patch`, é importante que você faça o patch de objetos no espaço "
"de nomes onde eles são procurados. Normalmente, isso é simples, mas para um "
"guia rápido, leia :ref:`onde fazer o patch <where-to-patch>`."

#: ../../library/unittest.mock.rst:125
msgid ""
"As well as a decorator :func:`patch` can be used as a context manager in a "
"with statement:"
msgstr ""
"Assim como um decorador :func:`patch` pode ser usado como um gerenciador de "
"contexto em uma instrução with:"

#: ../../library/unittest.mock.rst:135
msgid ""
"There is also :func:`patch.dict` for setting values in a dictionary just "
"during a scope and restoring the dictionary to its original state when the "
"test ends:"
msgstr ""
"Também existe :func:`patch.dict` para definir valores em um dicionário "
"apenas durante um escopo e restaurar o dicionário ao seu estado original "
"quando o teste termina:"

#: ../../library/unittest.mock.rst:146
msgid ""
"Mock supports the mocking of Python :ref:`magic methods <magic-methods>`. "
"The easiest way of using magic methods is with the :class:`MagicMock` class. "
"It allows you to do things like:"
msgstr ""
"Mock possui suporte a simulação de :ref:`métodos mágicos <magic-methods>` de "
"Python. A maneira mais fácil de usar métodos mágicos é com a classe :class:"
"`MagicMock`. Ele permite que você faça coisas como:"

#: ../../library/unittest.mock.rst:156
msgid ""
"Mock allows you to assign functions (or other Mock instances) to magic "
"methods and they will be called appropriately. The :class:`MagicMock` class "
"is just a Mock variant that has all of the magic methods pre-created for you "
"(well, all the useful ones anyway)."
msgstr ""
"Mock permite atribuir funções (ou outras instâncias do Mock) a métodos "
"mágicos e elas serão chamadas apropriadamente. A classe :class:`MagicMock` é "
"apenas uma variante do Mock que possui todos os métodos mágicos pré-criados "
"para você (bem, todos os úteis de qualquer maneira)."

#: ../../library/unittest.mock.rst:161
msgid ""
"The following is an example of using magic methods with the ordinary Mock "
"class:"
msgstr ""
"A seguir, é apresentado um exemplo do uso de métodos mágicos com a classe "
"Mock comum:"

#: ../../library/unittest.mock.rst:169
msgid ""
"For ensuring that the mock objects in your tests have the same api as the "
"objects they are replacing, you can use :ref:`auto-speccing <auto-"
"speccing>`. Auto-speccing can be done through the *autospec* argument to "
"patch, or the :func:`create_autospec` function. Auto-speccing creates mock "
"objects that have the same attributes and methods as the objects they are "
"replacing, and any functions and methods (including constructors) have the "
"same call signature as the real object."
msgstr ""
"Para garantir que os objetos mock em seus testes tenham a mesmo API que os "
"objetos que eles estão substituindo, você pode usar :ref:`especificação "
"automática <auto-speccing>`. A especificação automática pode ser feita por "
"meio do argumento *autospec* para fazer patch ou pela função :func:"
"`create_autospec`. A especificação automática cria objetos mock que têm os "
"mesmos atributos e métodos que os objetos que estão substituindo, e qualquer "
"funções e métodos (incluindo construtores) têm a mesma assinatura de chamada "
"que o objeto real."

#: ../../library/unittest.mock.rst:177
msgid ""
"This ensures that your mocks will fail in the same way as your production "
"code if they are used incorrectly:"
msgstr ""
"Isso garante que seus mocks falharão da mesma forma que o código de produção "
"se forem usados incorretamente:"

#: ../../library/unittest.mock.rst:193
msgid ""
":func:`create_autospec` can also be used on classes, where it copies the "
"signature of the ``__init__`` method, and on callable objects where it "
"copies the signature of the ``__call__`` method."
msgstr ""
":func:`create_autospec` também pode ser usada com classes, onde copia a "
"assinatura do método ``__init__``, e com objetos chamáveis onde copia a "
"assinatura do método ``__call__``."

#: ../../library/unittest.mock.rst:200
msgid "The Mock Class"
msgstr "A classe Mock"

#: ../../library/unittest.mock.rst:211
msgid ""
":class:`Mock` is a flexible mock object intended to replace the use of stubs "
"and test doubles throughout your code. Mocks are callable and create "
"attributes as new mocks when you access them [#]_. Accessing the same "
"attribute will always return the same mock. Mocks record how you use them, "
"allowing you to make assertions about what your code has done to them."
msgstr ""
":class:`Mock` é um objeto simulado flexível destinado a substituir o uso de "
"*stubs* e dublês de teste em todo o seu código. Os mocks são chamáveis e "
"cria atributos como novos mocks à medida que você os acessa [#]_. Acessar o "
"mesmo atributo sempre retorna o mesmo mock. Os mocks registram como você os "
"utiliza, permitindo que você faça asserções sobre o que o seu código fez com "
"eles."

#: ../../library/unittest.mock.rst:217
msgid ""
":class:`MagicMock` is a subclass of :class:`Mock` with all the magic methods "
"pre-created and ready to use. There are also non-callable variants, useful "
"when you are mocking out objects that aren't callable: :class:"
"`NonCallableMock` and :class:`NonCallableMagicMock`"
msgstr ""
":class:`MagicMock` é uma subclasse de :class:`Mock` com todos os métodos "
"mágicos pré-criados e prontos para uso. Existem também variantes não "
"chamáveis, úteis quando você está simulando objetos que não são chamáveis: :"
"class:`NonCallableMock` e :class:`NonCallableMagicMock`"

#: ../../library/unittest.mock.rst:222
msgid ""
"The :func:`patch` decorators makes it easy to temporarily replace classes in "
"a particular module with a :class:`Mock` object. By default :func:`patch` "
"will create a :class:`MagicMock` for you. You can specify an alternative "
"class of :class:`Mock` using the *new_callable* argument to :func:`patch`."
msgstr ""
"Декоратори :func:`patch` дозволяють легко тимчасово замінити класи в певному "
"модулі на об’єкт :class:`Mock`. За умовчанням :func:`patch` створить для "
"вас :class:`MagicMock`. Ви можете вказати альтернативний клас :class:`Mock` "
"за допомогою аргументу *new_callable* для :func:`patch`."

#: ../../library/unittest.mock.rst:230
msgid ""
"Create a new :class:`Mock` object. :class:`Mock` takes several optional "
"arguments that specify the behaviour of the Mock object:"
msgstr ""
"Створіть новий об’єкт :class:`Mock`. :class:`Mock` приймає кілька додаткових "
"аргументів, які визначають поведінку об’єкта Mock:"

#: ../../library/unittest.mock.rst:233
msgid ""
"*spec*: This can be either a list of strings or an existing object (a class "
"or instance) that acts as the specification for the mock object. If you pass "
"in an object then a list of strings is formed by calling dir on the object "
"(excluding unsupported magic attributes and methods). Accessing any "
"attribute not in this list will raise an :exc:`AttributeError`."
msgstr ""
"*spec*: це може бути або список рядків, або існуючий об’єкт (клас або "
"екземпляр), який діє як специфікація для макетного об’єкта. Якщо ви "
"передаєте об’єкт, тоді список рядків формується шляхом виклику dir для "
"об’єкта (за винятком непідтримуваних магічних атрибутів і методів). Доступ "
"до будь-якого атрибута, якого немає в цьому списку, викличе :exc:"
"`AttributeError`."

#: ../../library/unittest.mock.rst:239
msgid ""
"If *spec* is an object (rather than a list of strings) then :attr:`~instance."
"__class__` returns the class of the spec object. This allows mocks to pass :"
"func:`isinstance` tests."
msgstr ""
"Якщо *spec* є об’єктом (а не списком рядків), тоді :attr:`~instance."
"__class__` повертає клас специфікаційного об’єкта. Це дозволяє макетам "
"проходити тести :func:`isinstance`."

#: ../../library/unittest.mock.rst:243
msgid ""
"*spec_set*: A stricter variant of *spec*. If used, attempting to *set* or "
"get an attribute on the mock that isn't on the object passed as *spec_set* "
"will raise an :exc:`AttributeError`."
msgstr ""
"*spec_set*: суворіший варіант *spec*. У разі використання спроба "
"*встановити* або отримати атрибут у макеті, якого немає в об’єкті, "
"переданому як *spec_set*, викличе :exc:`AttributeError`."

#: ../../library/unittest.mock.rst:247
msgid ""
"*side_effect*: A function to be called whenever the Mock is called. See the :"
"attr:`~Mock.side_effect` attribute. Useful for raising exceptions or "
"dynamically changing return values. The function is called with the same "
"arguments as the mock, and unless it returns :data:`DEFAULT`, the return "
"value of this function is used as the return value."
msgstr ""
"*side_effect*: функція, яка викликається щоразу, коли викликається Mock. "
"Перегляньте атрибут :attr:`~Mock.side_effect`. Корисно для створення "
"винятків або динамічної зміни повернених значень. Функція викликається з "
"тими самими аргументами, що й макет, і якщо вона не повертає :data:"
"`DEFAULT`, значення, що повертається цією функцією, використовується як "
"значення, що повертається."

#: ../../library/unittest.mock.rst:253
msgid ""
"Alternatively *side_effect* can be an exception class or instance. In this "
"case the exception will be raised when the mock is called."
msgstr ""
"Крім того, *side_effect* може бути класом винятків або екземпляром. У цьому "
"випадку виняток буде викликано під час виклику макета."

#: ../../library/unittest.mock.rst:256
msgid ""
"If *side_effect* is an iterable then each call to the mock will return the "
"next value from the iterable."
msgstr ""
"Якщо *side_effect* є iterable, тоді кожен виклик mock повертатиме наступне "
"значення з iterable."

#: ../../library/unittest.mock.rst:259
msgid "A *side_effect* can be cleared by setting it to ``None``."
msgstr ""
"*Побічний_ефект* можна очистити, встановивши для нього значення ``None``."

#: ../../library/unittest.mock.rst:261
msgid ""
"*return_value*: The value returned when the mock is called. By default this "
"is a new Mock (created on first access). See the :attr:`return_value` "
"attribute."
msgstr ""
"*return_value*: значення, що повертається під час виклику макета. За "
"замовчуванням це новий макет (створений під час першого доступу). "
"Перегляньте атрибут :attr:`return_value`."

#: ../../library/unittest.mock.rst:265
msgid ""
"*unsafe*: By default, accessing any attribute with name starting with "
"*assert*, *assret*, *asert*, *aseert* or *assrt* will raise an :exc:"
"`AttributeError`. Passing ``unsafe=True`` will allow access to these "
"attributes."
msgstr ""

#: ../../library/unittest.mock.rst:272
msgid ""
"*wraps*: Item for the mock object to wrap. If *wraps* is not ``None`` then "
"calling the Mock will pass the call through to the wrapped object (returning "
"the real result). Attribute access on the mock will return a Mock object "
"that wraps the corresponding attribute of the wrapped object (so attempting "
"to access an attribute that doesn't exist will raise an :exc:"
"`AttributeError`)."
msgstr ""
"*wraps*: Елемент для обгортання фіктивного об’єкта. Якщо *wraps* не "
"``None``, тоді виклик Mock передасть виклик оберненому об’єкту (повертаючи "
"реальний результат). Доступ до атрибутів у макеті поверне об’єкт Mock, який "
"обгортає відповідний атрибут упакованого об’єкта (тому спроба отримати "
"доступ до атрибута, якого не існує, викличе :exc:`AttributeError`)."

#: ../../library/unittest.mock.rst:279
msgid ""
"If the mock has an explicit *return_value* set then calls are not passed to "
"the wrapped object and the *return_value* is returned instead."
msgstr ""
"Якщо макет має явний набір *return_value*, тоді виклики не передаються до "
"упакованого об’єкта, а замість нього повертається *return_value*."

#: ../../library/unittest.mock.rst:282
msgid ""
"*name*: If the mock has a name then it will be used in the repr of the mock. "
"This can be useful for debugging. The name is propagated to child mocks."
msgstr ""
"*ім’я*: якщо макет має ім’я, воно використовуватиметься у відтворенні "
"макета. Це може бути корисним для налагодження. Ім'я поширюється на дитячі "
"глузування."

#: ../../library/unittest.mock.rst:286
msgid ""
"Mocks can also be called with arbitrary keyword arguments. These will be "
"used to set attributes on the mock after it is created. See the :meth:"
"`configure_mock` method for details."
msgstr ""
"Mocks також можна викликати з довільними ключовими аргументами. Вони "
"використовуватимуться для встановлення атрибутів макета після його "
"створення. Дивіться метод :meth:`configure_mock` для отримання детальної "
"інформації."

#: ../../library/unittest.mock.rst:292
msgid "Assert that the mock was called at least once."
msgstr "Afirmar que o mock foi chamado pelo menos uma vez."

#: ../../library/unittest.mock.rst:303
msgid "Assert that the mock was called exactly once."
msgstr "Afirma que o mock foi chamado exatamente uma vez."

#: ../../library/unittest.mock.rst:321
msgid ""
"This method is a convenient way of asserting that the last call has been "
"made in a particular way:"
msgstr ""
"Цей метод є зручним способом підтвердження того, що останній виклик було "
"зроблено певним чином:"

#: ../../library/unittest.mock.rst:331
msgid ""
"Assert that the mock was called exactly once and that call was with the "
"specified arguments."
msgstr ""
"Стверджуйте, що макет був викликаний рівно один раз і цей виклик був із "
"зазначеними аргументами."

#: ../../library/unittest.mock.rst:346
msgid "assert the mock has been called with the specified arguments."
msgstr "стверджувати, що макет був викликаний із зазначеними аргументами."

#: ../../library/unittest.mock.rst:348
msgid ""
"The assert passes if the mock has *ever* been called, unlike :meth:"
"`assert_called_with` and :meth:`assert_called_once_with` that only pass if "
"the call is the most recent one, and in the case of :meth:"
"`assert_called_once_with` it must also be the only call."
msgstr ""
"Твердження проходить, якщо макет *колись* викликався, на відміну від :meth:"
"`assert_ called_with` і :meth:`assert_ called_once_with`, які проходять, "
"лише якщо виклик є останнім, і у випадку :meth:`assert_ called_once_with` це "
"також має бути єдиний виклик."

#: ../../library/unittest.mock.rst:361
msgid ""
"assert the mock has been called with the specified calls. The :attr:"
"`mock_calls` list is checked for the calls."
msgstr ""
"стверджувати, що макет було викликано за допомогою вказаних викликів. "
"Список :attr:`mock_calls` перевіряється на наявність викликів."

#: ../../library/unittest.mock.rst:364
msgid ""
"If *any_order* is false then the calls must be sequential. There can be "
"extra calls before or after the specified calls."
msgstr ""
"Якщо *any_order* має значення false, виклики мають бути послідовними. До або "
"після вказаних викликів можуть бути додаткові дзвінки."

#: ../../library/unittest.mock.rst:368
msgid ""
"If *any_order* is true then the calls can be in any order, but they must all "
"appear in :attr:`mock_calls`."
msgstr ""
"Якщо *any_order* має значення true, виклики можуть бути в будь-якому "
"порядку, але всі вони мають відображатися в :attr:`mock_calls`."

#: ../../library/unittest.mock.rst:383
msgid "Assert the mock was never called."
msgstr "Afirma que o mock nunca foi chamado."

#: ../../library/unittest.mock.rst:398
msgid "The reset_mock method resets all the call attributes on a mock object:"
msgstr "Метод reset_mock скидає всі атрибути виклику на макетному об’єкті:"

#: ../../library/unittest.mock.rst:408
msgid "Added two keyword-only arguments to the reset_mock function."
msgstr "Foram adicionados dois argumentos somente-nomeado à função reset_mock."

#: ../../library/unittest.mock.rst:411
msgid ""
"This can be useful where you want to make a series of assertions that reuse "
"the same object. Note that :meth:`reset_mock` *doesn't* clear the return "
"value, :attr:`side_effect` or any child attributes you have set using normal "
"assignment by default. In case you want to reset *return_value* or :attr:"
"`side_effect`, then pass the corresponding parameter as ``True``. Child "
"mocks and the return value mock (if any) are reset as well."
msgstr ""
"Це може бути корисним, якщо ви хочете зробити серію тверджень, які повторно "
"використовують той самий об’єкт. Зауважте, що :meth:`reset_mock` *не* очищає "
"повернуте значення, :attr:`side_effect` або будь-які дочірні атрибути, які "
"ви встановили за умовчанням за допомогою звичайного призначення. Якщо ви "
"хочете скинути *return_value* або :attr:`side_effect`, передайте відповідний "
"параметр як ``True``. Дочірні імітації та макет повертаного значення (якщо "
"є) також скидаються."

#: ../../library/unittest.mock.rst:419
msgid "*return_value*, and :attr:`side_effect` are keyword-only arguments."
msgstr "*return_value*, e :attr:`side_effect` são argumentos somente-nomeado."

#: ../../library/unittest.mock.rst:425
msgid ""
"Add a spec to a mock. *spec* can either be an object or a list of strings. "
"Only attributes on the *spec* can be fetched as attributes from the mock."
msgstr ""
"Додайте специфікацію до макета. *spec* може бути або об’єктом, або списком "
"рядків. Лише атрибути в *специфікації* можна отримати як атрибути з макета."

#: ../../library/unittest.mock.rst:429
msgid "If *spec_set* is true then only attributes on the spec can be set."
msgstr ""
"Якщо *spec_set* має значення true, можна встановити лише атрибути "
"специфікації."

#: ../../library/unittest.mock.rst:434
msgid ""
"Attach a mock as an attribute of this one, replacing its name and parent. "
"Calls to the attached mock will be recorded in the :attr:`method_calls` and :"
"attr:`mock_calls` attributes of this one."
msgstr ""
"Додайте макет як атрибут цього, замінивши його ім’я та батьківський елемент. "
"Виклики вкладеного макету будуть записані в атрибутах :attr:`method_calls` "
"і :attr:`mock_calls` цього."

#: ../../library/unittest.mock.rst:441
msgid "Set attributes on the mock through keyword arguments."
msgstr "Define atributos no mock por meio de argumentos nomeados."

#: ../../library/unittest.mock.rst:443
msgid ""
"Attributes plus return values and side effects can be set on child mocks "
"using standard dot notation and unpacking a dictionary in the method call:"
msgstr ""
"Атрибути плюс значення, що повертаються, і побічні ефекти можуть бути "
"встановлені на дочірніх моделях за допомогою стандартної нотації з крапками "
"та розпакування словника під час виклику методу:"

#: ../../library/unittest.mock.rst:457
msgid "The same thing can be achieved in the constructor call to mocks:"
msgstr "Те саме можна досягти у виклику конструктора mocks:"

#: ../../library/unittest.mock.rst:470
msgid ""
":meth:`configure_mock` exists to make it easier to do configuration after "
"the mock has been created."
msgstr ""
":meth:`configure_mock` існує, щоб полегшити налаштування після створення "
"макету."

#: ../../library/unittest.mock.rst:476
msgid ""
":class:`Mock` objects limit the results of ``dir(some_mock)`` to useful "
"results. For mocks with a *spec* this includes all the permitted attributes "
"for the mock."
msgstr ""
"Об’єкти :class:`Mock` обмежують результати ``dir(some_mock)`` корисними "
"результатами. Для макетів із *специфікацією* це включає всі дозволені "
"атрибути для макету."

#: ../../library/unittest.mock.rst:480
msgid ""
"See :data:`FILTER_DIR` for what this filtering does, and how to switch it "
"off."
msgstr ""
"Перегляньте :data:`FILTER_DIR`, щоб дізнатися, що робить це фільтрування та "
"як його вимкнути."

#: ../../library/unittest.mock.rst:486
msgid ""
"Create the child mocks for attributes and return value. By default child "
"mocks will be the same type as the parent. Subclasses of Mock may want to "
"override this to customize the way child mocks are made."
msgstr ""
"Створіть дочірні макети для атрибутів і повертайте значення. За "
"замовчуванням дочірні макети будуть того самого типу, що й батьківські. "
"Підкласи Mock можуть захотіти перевизначити це, щоб налаштувати спосіб "
"створення дочірніх моків."

#: ../../library/unittest.mock.rst:491
msgid ""
"For non-callable mocks the callable variant will be used (rather than any "
"custom subclass)."
msgstr ""
"Для макетів, які не підлягають виклику, використовуватиметься варіант, який "
"можна викликати (а не будь-який настроюваний підклас)."

#: ../../library/unittest.mock.rst:497
msgid "A boolean representing whether or not the mock object has been called:"
msgstr "Логічне значення, яке вказує, чи було викликано макетний об’єкт:"

#: ../../library/unittest.mock.rst:508
msgid "An integer telling you how many times the mock object has been called:"
msgstr ""
"Ціле число, яке повідомляє вам, скільки разів був викликаний макетний об’єкт:"

#: ../../library/unittest.mock.rst:520
msgid "Set this to configure the value returned by calling the mock:"
msgstr ""
"Встановіть це, щоб налаштувати значення, що повертається викликом mock:"

#: ../../library/unittest.mock.rst:527
msgid ""
"The default return value is a mock object and you can configure it in the "
"normal way:"
msgstr ""
"Типовим значенням, що повертається, є макет об’єкта, і ви можете налаштувати "
"його звичайним способом:"

#: ../../library/unittest.mock.rst:536
msgid ":attr:`return_value` can also be set in the constructor:"
msgstr ":attr:`return_value` também pode ser definido no construtor:"

#: ../../library/unittest.mock.rst:547
msgid ""
"This can either be a function to be called when the mock is called, an "
"iterable or an exception (class or instance) to be raised."
msgstr ""
"Może to być albo funkcja do wywołania, gdy wywoływany jest mock, iterable "
"lub wyjątek (klasa lub instancja) do rzucenia."

#: ../../library/unittest.mock.rst:550
msgid ""
"If you pass in a function it will be called with same arguments as the mock "
"and unless the function returns the :data:`DEFAULT` singleton the call to "
"the mock will then return whatever the function returns. If the function "
"returns :data:`DEFAULT` then the mock will return its normal value (from "
"the :attr:`return_value`)."
msgstr ""
"Jeśli przekażesz funkcję, zostanie ona wywołana z tymi samymi argumentami co "
"mock i dopóki funkcja nie zwróci singletona :data:`DEFAULT`, wywołanie mocka "
"będzie zwracać cokolwiek zwraca funkcja. Jeśli funkcja zwróci :data:"
"`DEFAULT`, to mock zwróci swoją normalną wartość (z :attr:`return_value`)."

#: ../../library/unittest.mock.rst:556
msgid ""
"If you pass in an iterable, it is used to retrieve an iterator which must "
"yield a value on every call.  This value can either be an exception instance "
"to be raised, or a value to be returned from the call to the mock (:data:"
"`DEFAULT` handling is identical to the function case)."
msgstr ""
"Jeśli przekażesz iterable, zostanie on użyty do pobrania iteratora, który "
"musi zwrócić wartość przy każdym wywołaniu. Wartość ta może być albo "
"instancją wyjątku, która ma być rzucony, albo wartością, która ma być "
"zwrócona z wywołania mocka (obsługa :data:`DEFAULT` jest identyczna do "
"przypadku funkcji)."

#: ../../library/unittest.mock.rst:561
msgid ""
"An example of a mock that raises an exception (to test exception handling of "
"an API):"
msgstr ""
"Приклад макету, який викликає виняткову ситуацію (для перевірки обробки "
"винятків API):"

#: ../../library/unittest.mock.rst:571
msgid "Using :attr:`side_effect` to return a sequence of values:"
msgstr "Usando :attr:`side_effect` para retornar um sequência de valores:"

#: ../../library/unittest.mock.rst:578
msgid "Using a callable:"
msgstr "Usando um chamável:"

#: ../../library/unittest.mock.rst:588
msgid ""
":attr:`side_effect` can be set in the constructor. Here's an example that "
"adds one to the value the mock is called with and returns it:"
msgstr ""
":attr:`side_effect` можна встановити в конструкторі. Ось приклад, який додає "
"одиницю до значення, з яким викликається макет, і повертає його:"

#: ../../library/unittest.mock.rst:598
msgid "Setting :attr:`side_effect` to ``None`` clears it:"
msgstr "Configuração :attr:`side_effect` para ``None`` limpa isso:"

#: ../../library/unittest.mock.rst:612
msgid ""
"This is either ``None`` (if the mock hasn't been called), or the arguments "
"that the mock was last called with. This will be in the form of a tuple: the "
"first member, which can also be accessed through the ``args`` property, is "
"any ordered arguments the mock was called with (or an empty tuple) and the "
"second member, which can also be accessed through the ``kwargs`` property, "
"is any keyword arguments (or an empty dictionary)."
msgstr ""
"Це або ``None`` (якщо макет не було викликано), або аргументи, з якими макет "
"було викликано востаннє. Це буде у формі кортежу: перший член, до якого "
"також можна отримати доступ через властивість ``args``, — це будь-які "
"впорядковані аргументи, з якими було викликано макет (або порожній кортеж), "
"а другий член, який може доступ також через властивість ``kwargs``, це будь-"
"які ключові аргументи (або порожній словник)."

#: ../../library/unittest.mock.rst:645
msgid ""
":attr:`call_args`, along with members of the lists :attr:`call_args_list`, :"
"attr:`method_calls` and :attr:`mock_calls` are :data:`call` objects. These "
"are tuples, so they can be unpacked to get at the individual arguments and "
"make more complex assertions. See :ref:`calls as tuples <calls-as-tuples>`."
msgstr ""
":attr:`call_args` разом із членами списків :attr:`call_args_list`, :attr:"
"`method_calls` і :attr:`mock_calls` є об’єктами :data:`call`. Це кортежі, "
"тому їх можна розпакувати, щоб отримати окремі аргументи та зробити "
"складніші твердження. Перегляньте :ref:`виклики як кортежі <calls-as-"
"tuples>`."

#: ../../library/unittest.mock.rst:651
msgid "Added ``args`` and ``kwargs`` properties."
msgstr "Adicionadas propriedades ``args`` e ``kwargs``."

#: ../../library/unittest.mock.rst:657
msgid ""
"This is a list of all the calls made to the mock object in sequence (so the "
"length of the list is the number of times it has been called). Before any "
"calls have been made it is an empty list. The :data:`call` object can be "
"used for conveniently constructing lists of calls to compare with :attr:"
"`call_args_list`."
msgstr ""
"Це список усіх послідовних викликів макетного об’єкта (тому довжина списку — "
"це кількість викликів до нього). До здійснення будь-яких викликів це "
"порожній список. Об’єкт :data:`call` можна використовувати для зручного "
"створення списків викликів для порівняння з :attr:`call_args_list`."

#: ../../library/unittest.mock.rst:673
msgid ""
"Members of :attr:`call_args_list` are :data:`call` objects. These can be "
"unpacked as tuples to get at the individual arguments. See :ref:`calls as "
"tuples <calls-as-tuples>`."
msgstr ""
"Члени :attr:`call_args_list` є об’єктами :data:`call`. Їх можна розпакувати "
"як кортежі, щоб отримати окремі аргументи. Перегляньте :ref:`виклики як "
"кортежі <calls-as-tuples>`."

#: ../../library/unittest.mock.rst:680
msgid ""
"As well as tracking calls to themselves, mocks also track calls to methods "
"and attributes, and *their* methods and attributes:"
msgstr ""
"Крім відстеження викликів самих себе, mocks також відстежують виклики "
"методів і атрибутів, а також *їх* методів і атрибутів:"

#: ../../library/unittest.mock.rst:691
msgid ""
"Members of :attr:`method_calls` are :data:`call` objects. These can be "
"unpacked as tuples to get at the individual arguments. See :ref:`calls as "
"tuples <calls-as-tuples>`."
msgstr ""
"Члени :attr:`method_calls` є об’єктами :data:`call`. Їх можна розпакувати як "
"кортежі, щоб отримати окремі аргументи. Перегляньте :ref:`виклики як кортежі "
"<calls-as-tuples>`."

#: ../../library/unittest.mock.rst:698
msgid ""
":attr:`mock_calls` records *all* calls to the mock object, its methods, "
"magic methods *and* return value mocks."
msgstr ""
":attr:`mock_calls` записує *всі* виклики макетного об’єкта, його методи, "
"чарівні методи *та* імітації значення, що повертається."

#: ../../library/unittest.mock.rst:716
msgid ""
"Members of :attr:`mock_calls` are :data:`call` objects. These can be "
"unpacked as tuples to get at the individual arguments. See :ref:`calls as "
"tuples <calls-as-tuples>`."
msgstr ""
"Члени :attr:`mock_calls` є об’єктами :data:`call`. Їх можна розпакувати як "
"кортежі, щоб отримати окремі аргументи. Перегляньте :ref:`виклики як кортежі "
"<calls-as-tuples>`."

#: ../../library/unittest.mock.rst:722
msgid ""
"The way :attr:`mock_calls` are recorded means that where nested calls are "
"made, the parameters of ancestor calls are not recorded and so will always "
"compare equal:"
msgstr ""
"Спосіб запису :attr:`mock_calls` означає, що там, де здійснюються вкладені "
"виклики, параметри викликів предків не записуються, тому порівняння завжди "
"буде рівним:"

#: ../../library/unittest.mock.rst:736
msgid ""
"Normally the :attr:`__class__` attribute of an object will return its type. "
"For a mock object with a :attr:`spec`, ``__class__`` returns the spec class "
"instead. This allows mock objects to pass :func:`isinstance` tests for the "
"object they are replacing / masquerading as:"
msgstr ""
"Зазвичай атрибут :attr:`__class__` об’єкта повертає його тип. Для фіктивного "
"об’єкта зі специфікацією :attr:`spec` ``__class__`` замість цього повертає "
"клас специфікації. Це дозволяє фіктивним об’єктам проходити тести :func:"
"`isinstance` для об’єкта, який вони замінюють/маскують під:"

#: ../../library/unittest.mock.rst:745
msgid ""
":attr:`__class__` is assignable to, this allows a mock to pass an :func:"
"`isinstance` check without forcing you to use a spec:"
msgstr ""
":attr:`__class__` можна призначити, це дозволяє макету проходити перевірку :"
"func:`isinstance`, не змушуючи вас використовувати специфікацію:"

#: ../../library/unittest.mock.rst:755
msgid ""
"A non-callable version of :class:`Mock`. The constructor parameters have the "
"same meaning of :class:`Mock`, with the exception of *return_value* and "
"*side_effect* which have no meaning on a non-callable mock."
msgstr ""
"Версія :class:`Mock`, яка не викликається. Параметри конструктора мають те "
"саме значення, що й :class:`Mock`, за винятком *return_value* і "
"*side_effect*, які не мають значення для макету, який не викликається."

#: ../../library/unittest.mock.rst:759
msgid ""
"Mock objects that use a class or an instance as a :attr:`spec` or :attr:"
"`spec_set` are able to pass :func:`isinstance` tests:"
msgstr ""
"Макетні об’єкти, які використовують клас або екземпляр як :attr:`spec` або :"
"attr:`spec_set`, можуть проходити :func:`isinstance` тести:"

#: ../../library/unittest.mock.rst:769
msgid ""
"The :class:`Mock` classes have support for mocking magic methods. See :ref:"
"`magic methods <magic-methods>` for the full details."
msgstr ""
"Класи :class:`Mock` підтримують методи насміхуватої магії. Дивіться :ref:"
"`магічні методи <magic-methods>` для повної інформації."

#: ../../library/unittest.mock.rst:772
msgid ""
"The mock classes and the :func:`patch` decorators all take arbitrary keyword "
"arguments for configuration. For the :func:`patch` decorators the keywords "
"are passed to the constructor of the mock being created. The keyword "
"arguments are for configuring attributes of the mock:"
msgstr ""
"Імітаційні класи та декоратори :func:`patch` приймають довільні ключові "
"аргументи для налаштування. Для декораторів :func:`patch` ключові слова "
"передаються до конструктора макета, який створюється. Ключові аргументи "
"призначені для налаштування атрибутів макета:"

#: ../../library/unittest.mock.rst:783
msgid ""
"The return value and side effect of child mocks can be set in the same way, "
"using dotted notation. As you can't use dotted names directly in a call you "
"have to create a dictionary and unpack it using ``**``:"
msgstr ""
"Повернене значення та побічний ефект дочірніх імітацій можна встановити "
"таким же чином, використовуючи позначення з крапками. Оскільки ви не можете "
"використовувати імена з крапками безпосередньо у виклику, вам потрібно "
"створити словник і розпакувати його за допомогою ``**``:"

#: ../../library/unittest.mock.rst:798
msgid ""
"A callable mock which was created with a *spec* (or a *spec_set*) will "
"introspect the specification object's signature when matching calls to the "
"mock.  Therefore, it can match the actual call's arguments regardless of "
"whether they were passed positionally or by name::"
msgstr ""
"Викликаний макет, створений за допомогою *spec* (або *spec_set*), перевіряє "
"підпис об’єкта специфікації під час зіставлення викликів з макетом. Таким "
"чином, він може відповідати фактичним аргументам виклику незалежно від того, "
"чи були вони передані позиційно чи за назвою::"

#: ../../library/unittest.mock.rst:811
msgid ""
"This applies to :meth:`~Mock.assert_called_with`, :meth:`~Mock."
"assert_called_once_with`, :meth:`~Mock.assert_has_calls` and :meth:`~Mock."
"assert_any_call`.  When :ref:`auto-speccing`, it will also apply to method "
"calls on the mock object."
msgstr ""
"Це стосується :meth:`~Mock.assert_ called_with`, :meth:`~Mock.assert_ "
"called_once_with`, :meth:`~Mock.assert_has_calls` і :meth:`~Mock."
"assert_any_call`. Коли :ref:`auto-speccing`, це також застосовуватиметься до "
"викликів методів фіктивного об’єкта."

#: ../../library/unittest.mock.rst:816
msgid "Added signature introspection on specced and autospecced mock objects."
msgstr ""
"Adicionada introspecção de assinatura em objetos mock especificados e auto-"
"especificados."

#: ../../library/unittest.mock.rst:822
msgid ""
"A mock intended to be used as a property, or other descriptor, on a class. :"
"class:`PropertyMock` provides :meth:`__get__` and :meth:`__set__` methods so "
"you can specify a return value when it is fetched."
msgstr ""

#: ../../library/unittest.mock.rst:826
msgid ""
"Fetching a :class:`PropertyMock` instance from an object calls the mock, "
"with no args. Setting it calls the mock with the value being set. ::"
msgstr ""
"Отримання екземпляра :class:`PropertyMock` з об’єкта викликає макет без "
"аргументів. Його встановлення викликає макет із встановленим значенням. ::"

#: ../../library/unittest.mock.rst:847
msgid ""
"Because of the way mock attributes are stored you can't directly attach a :"
"class:`PropertyMock` to a mock object. Instead you can attach it to the mock "
"type object::"
msgstr ""
"Через те, як зберігаються макетні атрибути, ви не можете безпосередньо "
"прикріпити :class:`PropertyMock` до макетного об’єкта. Замість цього ви "
"можете прикріпити його до об’єкта макетного типу::"

#: ../../library/unittest.mock.rst:861
msgid ""
"An asynchronous version of :class:`MagicMock`. The :class:`AsyncMock` object "
"will behave so the object is recognized as an async function, and the result "
"of a call is an awaitable."
msgstr ""
"Асинхронна версія :class:`MagicMock`. Об’єкт :class:`AsyncMock` "
"поводитиметься таким чином, що об’єкт розпізнається як асинхронна функція, а "
"результат виклику є очікуваним."

#: ../../library/unittest.mock.rst:871
msgid ""
"The result of ``mock()`` is an async function which will have the outcome of "
"``side_effect`` or ``return_value`` after it has been awaited:"
msgstr ""
"Результатом ``mock()`` є асинхронна функція, яка матиме результат "
"``side_effect`` або ``return_value`` після очікування:"

#: ../../library/unittest.mock.rst:874
msgid ""
"if ``side_effect`` is a function, the async function will return the result "
"of that function,"
msgstr ""
"якщо ``side_effect`` є функцією, асинхронна функція поверне результат цієї "
"функції,"

#: ../../library/unittest.mock.rst:876
msgid ""
"if ``side_effect`` is an exception, the async function will raise the "
"exception,"
msgstr "якщо ``side_effect`` є винятком, функція async викличе виняток,"

#: ../../library/unittest.mock.rst:878
msgid ""
"if ``side_effect`` is an iterable, the async function will return the next "
"value of the iterable, however, if the sequence of result is exhausted, "
"``StopAsyncIteration`` is raised immediately,"
msgstr ""
"якщо ``side_effect`` є ітерованим, функція async поверне наступне значення "
"ітерованого, однак, якщо послідовність результатів вичерпана, "
"``StopAsyncIteration`` викликається негайно,"

#: ../../library/unittest.mock.rst:881
msgid ""
"if ``side_effect`` is not defined, the async function will return the value "
"defined by ``return_value``, hence, by default, the async function returns a "
"new :class:`AsyncMock` object."
msgstr ""
"якщо ``side_effect`` не визначено, функція async поверне значення, визначене "
"``return_value``, отже, за замовчуванням функція async повертає новий "
"об’єкт :class:`AsyncMock`."

#: ../../library/unittest.mock.rst:886
msgid ""
"Setting the *spec* of a :class:`Mock` or :class:`MagicMock` to an async "
"function will result in a coroutine object being returned after calling."
msgstr ""
"Встановлення *специфікації* :class:`Mock` або :class:`MagicMock` на "
"асинхронну функцію призведе до повернення об’єкта співпрограми після виклику."

#: ../../library/unittest.mock.rst:898
msgid ""
"Setting the *spec* of a :class:`Mock`, :class:`MagicMock`, or :class:"
"`AsyncMock` to a class with asynchronous and synchronous functions will "
"automatically detect the synchronous functions and set them as :class:"
"`MagicMock` (if the parent mock is :class:`AsyncMock` or :class:`MagicMock`) "
"or :class:`Mock` (if the parent mock is :class:`Mock`). All asynchronous "
"functions will be :class:`AsyncMock`."
msgstr ""
"Встановлення *специфікації* :class:`Mock`, :class:`MagicMock` або :class:"
"`AsyncMock` для класу з асинхронними та синхронними функціями автоматично "
"визначить синхронні функції та встановить їх як :class:`MagicMock` (якщо "
"батьківським макетом є :class:`AsyncMock` або :class:`MagicMock`) або :class:"
"`Mock` (якщо батьківським макетом є :class:`Mock`). Усі асинхронні функції "
"будуть :class:`AsyncMock`."

#: ../../library/unittest.mock.rst:926
msgid ""
"Assert that the mock was awaited at least once. Note that this is separate "
"from the object having been called, the ``await`` keyword must be used:"
msgstr ""
"Стверджуйте, що макету чекали хоча б раз. Зауважте, що це окремо від "
"викликаного об’єкта, необхідно використовувати ключове слово ``await``:"

#: ../../library/unittest.mock.rst:945
msgid "Assert that the mock was awaited exactly once."
msgstr "Afirme que o mock foi aguardado exatamente uma vez."

#: ../../library/unittest.mock.rst:961
msgid "Assert that the last await was with the specified arguments."
msgstr ""
"Підтвердження того, що останнє очікування було з указаними аргументами."

#: ../../library/unittest.mock.rst:978
msgid ""
"Assert that the mock was awaited exactly once and with the specified "
"arguments."
msgstr ""
"Стверджуйте, що макет очікувався рівно один раз і з вказаними аргументами."

#: ../../library/unittest.mock.rst:995
msgid "Assert the mock has ever been awaited with the specified arguments."
msgstr ""
"Стверджуйте, що макет коли-небудь був очікуваний із зазначеними аргументами."

#: ../../library/unittest.mock.rst:1011
msgid ""
"Assert the mock has been awaited with the specified calls. The :attr:"
"`await_args_list` list is checked for the awaits."
msgstr ""
"Стверджувати, що макет очікувався з указаними викликами. Список :attr:"
"`await_args_list` перевіряється на наявність очікувань."

#: ../../library/unittest.mock.rst:1014
msgid ""
"If *any_order* is false then the awaits must be sequential. There can be "
"extra calls before or after the specified awaits."
msgstr ""
"Якщо *any_order* має значення false, очікування мають бути послідовними. "
"Можуть бути додаткові виклики до або після вказаних очікувань."

#: ../../library/unittest.mock.rst:1018
msgid ""
"If *any_order* is true then the awaits can be in any order, but they must "
"all appear in :attr:`await_args_list`."
msgstr ""
"Якщо *any_order* має значення true, очікування можуть бути в будь-якому "
"порядку, але всі вони мають відображатися в :attr:`await_args_list`."

#: ../../library/unittest.mock.rst:1038
msgid "Assert that the mock was never awaited."
msgstr "Afirma que o mock nunca foi aguardado."

#: ../../library/unittest.mock.rst:1045
msgid ""
"See :func:`Mock.reset_mock`. Also sets :attr:`await_count` to 0, :attr:"
"`await_args` to None, and clears the :attr:`await_args_list`."
msgstr ""
"Перегляньте :func:`Mock.reset_mock`. Також встановлює :attr:`await_count` на "
"0, :attr:`await_args` на None і очищає :attr:`await_args_list`."

#: ../../library/unittest.mock.rst:1050
msgid ""
"An integer keeping track of how many times the mock object has been awaited."
msgstr "Ціле число, яке відстежує, скільки разів очікувався макетний об’єкт."

#: ../../library/unittest.mock.rst:1065
msgid ""
"This is either ``None`` (if the mock hasn’t been awaited), or the arguments "
"that the mock was last awaited with. Functions the same as :attr:`Mock."
"call_args`."
msgstr ""
"Це або ``None`` (якщо макет не був очікуваний), або аргументи, з якими макет "
"було очікувано востаннє. Функціонує так само, як :attr:`Mock.call_args`."

#: ../../library/unittest.mock.rst:1083
msgid ""
"This is a list of all the awaits made to the mock object in sequence (so the "
"length of the list is the number of times it has been awaited). Before any "
"awaits have been made it is an empty list."
msgstr ""
"Це список усіх очікувань, зроблених для макетного об’єкта в послідовності "
"(тому довжина списку — це кількість разів, коли його очікували). Перш ніж "
"було зроблено будь-які очікування, це порожній список."

#: ../../library/unittest.mock.rst:1102
msgid "Calling"
msgstr "Fazendo chamadas"

#: ../../library/unittest.mock.rst:1104
msgid ""
"Mock objects are callable. The call will return the value set as the :attr:"
"`~Mock.return_value` attribute. The default return value is a new Mock "
"object; it is created the first time the return value is accessed (either "
"explicitly or by calling the Mock) - but it is stored and the same one "
"returned each time."
msgstr ""
"Фіктивні об'єкти можна викликати. Виклик поверне значення, встановлене як "
"атрибут :attr:`~Mock.return_value`. Типовим значенням, що повертається, є "
"новий об’єкт Mock; воно створюється під час першого доступу до значення, що "
"повертається (явним чином або шляхом виклику Mock), але воно зберігається й "
"кожного разу повертається те саме."

#: ../../library/unittest.mock.rst:1110
msgid ""
"Calls made to the object will be recorded in the attributes like :attr:"
"`~Mock.call_args` and :attr:`~Mock.call_args_list`."
msgstr ""
"Виклики, здійснені до об’єкта, будуть записані в такі атрибути, як :attr:"
"`~Mock.call_args` і :attr:`~Mock.call_args_list`."

#: ../../library/unittest.mock.rst:1113
msgid ""
"If :attr:`~Mock.side_effect` is set then it will be called after the call "
"has been recorded, so if :attr:`side_effect` raises an exception the call is "
"still recorded."
msgstr ""
"Якщо встановлено :attr:`~Mock.side_effect`, він буде викликаний після запису "
"виклику, отже, якщо :attr:`side_effect` викликає виняток, виклик усе одно "
"записується."

#: ../../library/unittest.mock.rst:1117
msgid ""
"The simplest way to make a mock raise an exception when called is to make :"
"attr:`~Mock.side_effect` an exception class or instance:"
msgstr ""
"Найпростіший спосіб змусити макет викликати виняток під час виклику — це "
"зробити :attr:`~Mock.side_effect` класом або екземпляром виключення:"

#: ../../library/unittest.mock.rst:1135
msgid ""
"If :attr:`side_effect` is a function then whatever that function returns is "
"what calls to the mock return. The :attr:`side_effect` function is called "
"with the same arguments as the mock. This allows you to vary the return "
"value of the call dynamically, based on the input:"
msgstr ""
"Якщо :attr:`side_effect` є функцією, то те, що повертає ця функція, викликає "
"імітацію повернення. Функція :attr:`side_effect` викликається з тими самими "
"аргументами, що й макет. Це дозволяє динамічно змінювати значення, що "
"повертається викликом, на основі вхідних даних:"

#: ../../library/unittest.mock.rst:1151
msgid ""
"If you want the mock to still return the default return value (a new mock), "
"or any set return value, then there are two ways of doing this. Either "
"return :attr:`mock.return_value` from inside :attr:`side_effect`, or return :"
"data:`DEFAULT`:"
msgstr ""
"Якщо ви хочете, щоб макет усе ще повертав типове значення, що повертається "
"(новий макет), або будь-яке встановлене повертається значення, то є два "
"способи зробити це. Або поверніть :attr:`mock.return_value` зсередини :attr:"
"`side_effect`, або поверніть :data:`DEFAULT`:"

#: ../../library/unittest.mock.rst:1170
msgid ""
"To remove a :attr:`side_effect`, and return to the default behaviour, set "
"the :attr:`side_effect` to ``None``:"
msgstr ""
"Щоб видалити :attr:`side_effect` і повернутися до типової поведінки, "
"установіть :attr:`side_effect` значення ``None``:"

#: ../../library/unittest.mock.rst:1184
msgid ""
"The :attr:`side_effect` can also be any iterable object. Repeated calls to "
"the mock will return values from the iterable (until the iterable is "
"exhausted and a :exc:`StopIteration` is raised):"
msgstr ""
":attr:`side_effect` також може бути будь-яким ітерованим об’єктом. Повторні "
"виклики mock повертатимуть значення з iterable (поки iterable не буде "
"вичерпано та не буде викликано :exc:`StopIteration`):"

#: ../../library/unittest.mock.rst:1200
msgid ""
"If any members of the iterable are exceptions they will be raised instead of "
"returned::"
msgstr ""
"Якщо будь-які члени iterable є винятками, вони будуть викликані замість "
"повернення::"

#: ../../library/unittest.mock.rst:1218
msgid "Deleting Attributes"
msgstr "Deletando Atributos"

#: ../../library/unittest.mock.rst:1220
msgid ""
"Mock objects create attributes on demand. This allows them to pretend to be "
"objects of any type."
msgstr ""
"Макетні об’єкти створюють атрибути на вимогу. Це дозволяє їм видавати себе "
"за об’єкти будь-якого типу."

#: ../../library/unittest.mock.rst:1223
msgid ""
"You may want a mock object to return ``False`` to a :func:`hasattr` call, or "
"raise an :exc:`AttributeError` when an attribute is fetched. You can do this "
"by providing an object as a :attr:`spec` for a mock, but that isn't always "
"convenient."
msgstr ""
"Ви можете захотіти, щоб імітаційний об’єкт повертав ``False`` виклику :func:"
"`hasattr` або викликав :exc:`AttributeError`, коли атрибут отримується. Ви "
"можете зробити це, надавши об’єкт як :attr:`spec` для макету, але це не "
"завжди зручно."

#: ../../library/unittest.mock.rst:1227
msgid ""
"You \"block\" attributes by deleting them. Once deleted, accessing an "
"attribute will raise an :exc:`AttributeError`."
msgstr ""
"Ви \"блокуєте\" атрибути, видаляючи їх. Після видалення доступ до атрибута "
"викличе :exc:`AttributeError`."

#: ../../library/unittest.mock.rst:1244
msgid "Mock names and the name attribute"
msgstr "Nomes de Mock e o atributo *name*"

#: ../../library/unittest.mock.rst:1246
msgid ""
"Since \"name\" is an argument to the :class:`Mock` constructor, if you want "
"your mock object to have a \"name\" attribute you can't just pass it in at "
"creation time. There are two alternatives. One option is to use :meth:`~Mock."
"configure_mock`::"
msgstr ""
"Оскільки \"name\" є аргументом конструктора :class:`Mock`, якщо ви хочете, "
"щоб ваш макетний об’єкт мав атрибут \"name\", ви не можете просто передати "
"його під час створення. Є дві альтернативи. Одним із варіантів є "
"використання :meth:`~Mock.configure_mock`::"

#: ../../library/unittest.mock.rst:1256
msgid ""
"A simpler option is to simply set the \"name\" attribute after mock "
"creation::"
msgstr ""
"Простішим варіантом є просто встановити атрибут \"name\" після створення "
"макета::"

#: ../../library/unittest.mock.rst:1263
msgid "Attaching Mocks as Attributes"
msgstr "Anexando Mocks como Atributos"

#: ../../library/unittest.mock.rst:1265
msgid ""
"When you attach a mock as an attribute of another mock (or as the return "
"value) it becomes a \"child\" of that mock. Calls to the child are recorded "
"in the :attr:`~Mock.method_calls` and :attr:`~Mock.mock_calls` attributes of "
"the parent. This is useful for configuring child mocks and then attaching "
"them to the parent, or for attaching mocks to a parent that records all "
"calls to the children and allows you to make assertions about the order of "
"calls between mocks:"
msgstr ""
"Коли ви додаєте макет як атрибут іншого макету (або як значення, що "
"повертається), він стає \"дочірнім\" для цього макету. Виклики дочірнього "
"елемента записуються в атрибутах :attr:`~Mock.method_calls` і :attr:`~Mock."
"mock_calls` батьківського. Це корисно для конфігурації дочірніх імітацій, а "
"потім прикріплення їх до батьківського, або для прикріплення імітацій до "
"батьківського, який записує всі виклики до нащадків і дозволяє вам робити "
"твердження щодо порядку викликів між імітаціями:"

#: ../../library/unittest.mock.rst:1283
msgid ""
"The exception to this is if the mock has a name. This allows you to prevent "
"the \"parenting\" if for some reason you don't want it to happen."
msgstr ""
"Винятком є випадки, коли макет має назву. Це дозволяє запобігти "
"\"батьківству\", якщо з якихось причин ви цього не хочете."

#: ../../library/unittest.mock.rst:1294
msgid ""
"Mocks created for you by :func:`patch` are automatically given names. To "
"attach mocks that have names to a parent you use the :meth:`~Mock."
"attach_mock` method::"
msgstr ""
"Макети, створені для вас :func:`patch`, автоматично отримують імена. Щоб "
"приєднати імена до батьківського елемента, ви використовуєте метод :meth:"
"`~Mock.attach_mock`::"

#: ../../library/unittest.mock.rst:1312
msgid ""
"The only exceptions are magic methods and attributes (those that have "
"leading and trailing double underscores). Mock doesn't create these but "
"instead raises an :exc:`AttributeError`. This is because the interpreter "
"will often implicitly request these methods, and gets *very* confused to get "
"a new Mock object when it expects a magic method. If you need magic method "
"support see :ref:`magic methods <magic-methods>`."
msgstr ""
"Єдиний виняток становлять магічні методи та атрибути (ті, що мають на "
"початку та в кінці подвійне підкреслення). Mock не створює їх, а натомість "
"викликає :exc:`AttributeError`. Це пояснюється тим, що інтерпретатор часто "
"неявно запитує ці методи і *дуже* плутається, коли отримує новий об’єкт "
"Mock, коли очікує чарівний метод. Якщо вам потрібна підтримка магічних "
"методів, перегляньте :ref:`магічні методи <magic-methods>`."

#: ../../library/unittest.mock.rst:1321
msgid "The patchers"
msgstr "Os criadores de patches"

#: ../../library/unittest.mock.rst:1323
msgid ""
"The patch decorators are used for patching objects only within the scope of "
"the function they decorate. They automatically handle the unpatching for "
"you, even if exceptions are raised. All of these functions can also be used "
"in with statements or as class decorators."
msgstr ""
"Декоратори латок використовуються для латання об’єктів лише в межах функції, "
"яку вони декорують. Вони автоматично виконують видалення виправлень за вас, "
"навіть якщо виникають винятки. Усі ці функції також можна використовувати в "
"операторах або як декоратори класів."

#: ../../library/unittest.mock.rst:1330
msgid "patch"
msgstr "patch"

#: ../../library/unittest.mock.rst:1334
msgid ""
"The key is to do the patching in the right namespace. See the section `where "
"to patch`_."
msgstr ""
"Головне — виконати виправлення у правильному просторі імен. Дивіться розділ "
"`where to patch`_."

#: ../../library/unittest.mock.rst:1338
msgid ""
":func:`patch` acts as a function decorator, class decorator or a context "
"manager. Inside the body of the function or with statement, the *target* is "
"patched with a *new* object. When the function/with statement exits the "
"patch is undone."
msgstr ""
":func:`patch` діє як декоратор функції, декоратор класу або менеджер "
"контексту. Усередині тіла функції або оператора *ціль* додається до *нового* "
"об’єкта. Коли оператор function/with завершує роботу, патч скасовується."

#: ../../library/unittest.mock.rst:1343
msgid ""
"If *new* is omitted, then the target is replaced with an :class:`AsyncMock` "
"if the patched object is an async function or a :class:`MagicMock` "
"otherwise. If :func:`patch` is used as a decorator and *new* is omitted, the "
"created mock is passed in as an extra argument to the decorated function. "
"If :func:`patch` is used as a context manager the created mock is returned "
"by the context manager."
msgstr ""
"Якщо *new* пропущено, ціль замінюється на :class:`AsyncMock`, якщо "
"виправлений об’єкт є асинхронною функцією, або :class:`MagicMock` інакше. "
"Якщо :func:`patch` використовується як декоратор, а *new* опущено, створений "
"макет передається як додатковий аргумент до декорованої функції. Якщо :func:"
"`patch` використовується як менеджер контексту, створений макет повертається "
"менеджером контексту."

#: ../../library/unittest.mock.rst:1351
msgid ""
"*target* should be a string in the form ``'package.module.ClassName'``. The "
"*target* is imported and the specified object replaced with the *new* "
"object, so the *target* must be importable from the environment you are "
"calling :func:`patch` from. The target is imported when the decorated "
"function is executed, not at decoration time."
msgstr ""
"*ціль* має бути рядком у формі ``'package.module.ClassName``. *Ціль* "
"імпортується, а вказаний об’єкт замінюється на *новий* об’єкт, тому *ціль* "
"має бути імпортованою із середовища, з якого ви викликаєте :func:`patch`. "
"Ціль імпортується під час виконання декорованої функції, а не під час "
"декорування."

#: ../../library/unittest.mock.rst:1357
msgid ""
"The *spec* and *spec_set* keyword arguments are passed to the :class:"
"`MagicMock` if patch is creating one for you."
msgstr ""
"Ключові аргументи *spec* і *spec_set* передаються в :class:`MagicMock`, якщо "
"patch створює його для вас."

#: ../../library/unittest.mock.rst:1360
msgid ""
"In addition you can pass ``spec=True`` or ``spec_set=True``, which causes "
"patch to pass in the object being mocked as the spec/spec_set object."
msgstr ""
"Крім того, ви можете передати ``spec=True`` або ``spec_set=True``, що "
"спричиняє передачу латки в об’єкті, який імітується, як об’єкт spec/spec_set."

#: ../../library/unittest.mock.rst:1363
msgid ""
"*new_callable* allows you to specify a different class, or callable object, "
"that will be called to create the *new* object. By default :class:"
"`AsyncMock` is used for async functions and :class:`MagicMock` for the rest."
msgstr ""
"*new_callable* дозволяє вказати інший клас або викликаний об’єкт, який буде "
"викликано для створення *нового* об’єкта. За замовчуванням :class:"
"`AsyncMock` використовується для асинхронних функцій, а :class:`MagicMock` "
"для решти."

#: ../../library/unittest.mock.rst:1367
msgid ""
"A more powerful form of *spec* is *autospec*. If you set ``autospec=True`` "
"then the mock will be created with a spec from the object being replaced. "
"All attributes of the mock will also have the spec of the corresponding "
"attribute of the object being replaced. Methods and functions being mocked "
"will have their arguments checked and will raise a :exc:`TypeError` if they "
"are called with the wrong signature. For mocks replacing a class, their "
"return value (the 'instance') will have the same spec as the class. See the :"
"func:`create_autospec` function and :ref:`auto-speccing`."
msgstr ""
"Більш потужною формою *spec* є *autospec*. Якщо ви встановите "
"``autospec=True``, макет буде створено зі специфікацією об’єкта, який "
"замінюється. Усі атрибути макета також матимуть специфікацію відповідного "
"атрибута об’єкта, який замінюється. Методи та функції, які знущаються, "
"перевірятимуть аргументи та викличуть :exc:`TypeError`, якщо вони викликані "
"з неправильним підписом. Для моків, які замінюють клас, їх значення, що "
"повертається (\"екземпляр\") матиме ту саму специфікацію, що й клас. "
"Перегляньте функцію :func:`create_autospec` і :ref:`auto-speccing`."

#: ../../library/unittest.mock.rst:1377
msgid ""
"Instead of ``autospec=True`` you can pass ``autospec=some_object`` to use an "
"arbitrary object as the spec instead of the one being replaced."
msgstr ""
"Замість ``autospec=True`` ви можете передати ``autospec=some_object``, щоб "
"використовувати довільний об’єкт як специфікацію замість того, що "
"замінюється."

#: ../../library/unittest.mock.rst:1380
msgid ""
"By default :func:`patch` will fail to replace attributes that don't exist. "
"If you pass in ``create=True``, and the attribute doesn't exist, patch will "
"create the attribute for you when the patched function is called, and delete "
"it again after the patched function has exited. This is useful for writing "
"tests against attributes that your production code creates at runtime. It is "
"off by default because it can be dangerous. With it switched on you can "
"write passing tests against APIs that don't actually exist!"
msgstr ""
"За замовчуванням :func:`patch` не зможе замінити атрибути, яких не існує. "
"Якщо ви передаєте ``create=True``, а атрибут не існує, patch створить "
"атрибут для вас під час виклику виправленої функції та видалить його знову "
"після завершення виправленої функції. Це корисно для написання тестів щодо "
"атрибутів, які ваш робочий код створює під час виконання. За умовчанням його "
"вимкнено, оскільки це може бути небезпечно. Якщо його ввімкнути, ви можете "
"писати тести проходження проти API, яких насправді не існує!"

#: ../../library/unittest.mock.rst:1390
msgid ""
"If you are patching builtins in a module then you don't need to pass "
"``create=True``, it will be added by default."
msgstr ""
"Якщо ви виправляєте вбудовані компоненти в модулі, вам не потрібно "
"передавати ``create=True``, він буде доданий за замовчуванням."

#: ../../library/unittest.mock.rst:1394
msgid ""
"Patch can be used as a :class:`TestCase` class decorator. It works by "
"decorating each test method in the class. This reduces the boilerplate code "
"when your test methods share a common patchings set. :func:`patch` finds "
"tests by looking for method names that start with ``patch.TEST_PREFIX``. By "
"default this is ``'test'``, which matches the way :mod:`unittest` finds "
"tests. You can specify an alternative prefix by setting ``patch."
"TEST_PREFIX``."
msgstr ""
"Патч можна використовувати як декоратор класу :class:`TestCase`. Він працює, "
"прикрашаючи кожен метод тестування в класі. Це зменшує шаблонний код, коли "
"ваші методи тестування мають загальний набір виправлень. :func:`patch` "
"знаходить тести, шукаючи назви методів, які починаються з ``patch."
"TEST_PREFIX``. За замовчуванням це ``'test'``, що відповідає способу, яким :"
"mod:`unittest` знаходить тести. Ви можете вказати альтернативний префікс, "
"встановивши ``patch.TEST_PREFIX``."

#: ../../library/unittest.mock.rst:1401
msgid ""
"Patch can be used as a context manager, with the with statement. Here the "
"patching applies to the indented block after the with statement. If you use "
"\"as\" then the patched object will be bound to the name after the \"as\"; "
"very useful if :func:`patch` is creating a mock object for you."
msgstr ""
"Патч можна використовувати як менеджер контексту за допомогою оператора "
"with. Тут виправлення застосовується до блоку з відступом після оператора "
"with. Якщо ви використовуєте \"as\", тоді виправлений об’єкт буде "
"прив’язаний до імені після \"as\"; дуже корисно, якщо :func:`patch` створює "
"для вас макет об’єкта."

#: ../../library/unittest.mock.rst:1406
msgid ""
":func:`patch` takes arbitrary keyword arguments. These will be passed to :"
"class:`AsyncMock` if the patched object is asynchronous, to :class:"
"`MagicMock` otherwise or to *new_callable* if specified."
msgstr ""
":func:`patch` приймає довільні ключові аргументи. Вони будуть передані до :"
"class:`AsyncMock`, якщо виправлений об’єкт є асинхронним, до :class:"
"`MagicMock` інакше або до *new_callable*, якщо вказано."

#: ../../library/unittest.mock.rst:1410
msgid ""
"``patch.dict(...)``, ``patch.multiple(...)`` and ``patch.object(...)`` are "
"available for alternate use-cases."
msgstr ""
"``patch.dict(...)``, ``patch.multiple(...)`` e ``patch.object(...)`` estão "
"disponíveis para casos de uso alternativos."

#: ../../library/unittest.mock.rst:1413
msgid ""
":func:`patch` as function decorator, creating the mock for you and passing "
"it into the decorated function::"
msgstr ""
":func:`patch` як декоратор функції, створює макет для вас і передає його в "
"декоровану функцію::"

#: ../../library/unittest.mock.rst:1423
msgid ""
"Patching a class replaces the class with a :class:`MagicMock` *instance*. If "
"the class is instantiated in the code under test then it will be the :attr:"
"`~Mock.return_value` of the mock that will be used."
msgstr ""
"Виправлення класу замінює клас на *екземпляр* :class:`MagicMock`. Якщо "
"екземпляр класу створено в тестованому коді, тоді використовуватиметься :"
"attr:`~Mock.return_value` макету."

#: ../../library/unittest.mock.rst:1427
msgid ""
"If the class is instantiated multiple times you could use :attr:`~Mock."
"side_effect` to return a new mock each time. Alternatively you can set the "
"*return_value* to be anything you want."
msgstr ""
"Якщо екземпляр класу створюється кілька разів, ви можете використовувати :"
"attr:`~Mock.side_effect`, щоб щоразу повертати новий макет. Крім того, ви "
"можете встановити *return_value* як будь-яке значення."

#: ../../library/unittest.mock.rst:1431
msgid ""
"To configure return values on methods of *instances* on the patched class "
"you must do this on the :attr:`return_value`. For example::"
msgstr ""
"Щоб налаштувати значення, що повертаються для методів *екземплярів* у "
"виправленому класі, ви повинні зробити це в :attr:`return_value`. Наприклад::"

#: ../../library/unittest.mock.rst:1445
msgid ""
"If you use *spec* or *spec_set* and :func:`patch` is replacing a *class*, "
"then the return value of the created mock will have the same spec. ::"
msgstr ""
"Якщо ви використовуєте *spec* або *spec_set* і :func:`patch` замінює *клас*, "
"тоді значення, що повертається створеним макетом, матиме ту саму "
"специфікацію. ::"

#: ../../library/unittest.mock.rst:1455
msgid ""
"The *new_callable* argument is useful where you want to use an alternative "
"class to the default :class:`MagicMock` for the created mock. For example, "
"if you wanted a :class:`NonCallableMock` to be used::"
msgstr ""
"Аргумент *new_callable* корисний, якщо ви хочете використовувати клас, "
"альтернативний типовому :class:`MagicMock` для створеного макету. Наприклад, "
"якщо ви хочете використовувати :class:`NonCallableMock`:"

#: ../../library/unittest.mock.rst:1468
msgid ""
"Another use case might be to replace an object with an :class:`io.StringIO` "
"instance::"
msgstr ""
"Іншим варіантом використання може бути заміна об’єкта екземпляром :class:`io."
"StringIO`::"

#: ../../library/unittest.mock.rst:1481
msgid ""
"When :func:`patch` is creating a mock for you, it is common that the first "
"thing you need to do is to configure the mock. Some of that configuration "
"can be done in the call to patch. Any arbitrary keywords you pass into the "
"call will be used to set attributes on the created mock::"
msgstr ""
"Коли :func:`patch` створює для вас макет, зазвичай перше, що вам потрібно "
"зробити, це налаштувати макет. Частину цієї конфігурації можна виконати під "
"час виклику patch. Будь-які довільні ключові слова, які ви передаєте у "
"виклик, використовуватимуться для встановлення атрибутів створеного mock::"

#: ../../library/unittest.mock.rst:1493
msgid ""
"As well as attributes on the created mock attributes, like the :attr:`~Mock."
"return_value` and :attr:`~Mock.side_effect`, of child mocks can also be "
"configured. These aren't syntactically valid to pass in directly as keyword "
"arguments, but a dictionary with these as keys can still be expanded into a :"
"func:`patch` call using ``**``::"
msgstr ""
"Крім атрибутів у створених макетних атрибутах, таких як :attr:`~Mock."
"return_value` і :attr:`~Mock.side_effect`, дочірніх макетів також можна "
"налаштувати. Вони не є синтаксично дійсними для безпосередньої передачі як "
"аргументи ключового слова, але словник із ними як ключами все одно можна "
"розгорнути у виклик :func:`patch` за допомогою ``**``::"

#: ../../library/unittest.mock.rst:1509
msgid ""
"By default, attempting to patch a function in a module (or a method or an "
"attribute in a class) that does not exist will fail with :exc:"
"`AttributeError`::"
msgstr ""
"За замовчуванням спроба виправити функцію в модулі (або метод чи атрибут у "
"класі), який не існує, закінчиться помилкою з :exc:`AttributeError`::"

#: ../../library/unittest.mock.rst:1521
msgid ""
"but adding ``create=True`` in the call to :func:`patch` will make the "
"previous example work as expected::"
msgstr ""
"але додавання ``create=True`` до виклику :func:`patch` змусить попередній "
"приклад працювати належним чином::"

#: ../../library/unittest.mock.rst:1532
msgid ""
":func:`patch` now returns an :class:`AsyncMock` if the target is an async "
"function."
msgstr ""
":func:`patch` тепер повертає :class:`AsyncMock`, якщо метою є асинхронна "
"функція."

#: ../../library/unittest.mock.rst:1536
msgid "patch.object"
msgstr "patch.object"

#: ../../library/unittest.mock.rst:1540
msgid ""
"patch the named member (*attribute*) on an object (*target*) with a mock "
"object."
msgstr ""
"заправити названий член (*атрибут*) на об’єкті (*ціль*) за допомогою "
"макетного об’єкта."

#: ../../library/unittest.mock.rst:1543
msgid ""
":func:`patch.object` can be used as a decorator, class decorator or a "
"context manager. Arguments *new*, *spec*, *create*, *spec_set*, *autospec* "
"and *new_callable* have the same meaning as for :func:`patch`. Like :func:"
"`patch`, :func:`patch.object` takes arbitrary keyword arguments for "
"configuring the mock object it creates."
msgstr ""
":func:`patch.object` можна використовувати як декоратор, декоратор класу або "
"менеджер контексту. Аргументи *new*, *spec*, *create*, *spec_set*, "
"*autospec* і *new_callable* мають те саме значення, що й для :func:`patch`. "
"Подібно до :func:`patch`, :func:`patch.object` приймає довільні ключові "
"аргументи для налаштування макетного об’єкта, який він створює."

#: ../../library/unittest.mock.rst:1549
msgid ""
"When used as a class decorator :func:`patch.object` honours ``patch."
"TEST_PREFIX`` for choosing which methods to wrap."
msgstr ""
"При використанні як декоратора класу :func:`patch.object` враховує ``patch."
"TEST_PREFIX`` для вибору методів для обгортання."

#: ../../library/unittest.mock.rst:1552
msgid ""
"You can either call :func:`patch.object` with three arguments or two "
"arguments. The three argument form takes the object to be patched, the "
"attribute name and the object to replace the attribute with."
msgstr ""
"Ви можете викликати :func:`patch.object` з трьома або двома аргументами. "
"Форма з трьома аргументами містить об’єкт, який потрібно виправити, ім’я "
"атрибута та об’єкт, на який потрібно замінити атрибут."

#: ../../library/unittest.mock.rst:1556
msgid ""
"When calling with the two argument form you omit the replacement object, and "
"a mock is created for you and passed in as an extra argument to the "
"decorated function:"
msgstr ""
"Під час виклику з формою з двома аргументами ви пропускаєте об’єкт заміни, і "
"для вас створюється макет, який передається як додатковий аргумент до "
"декорованої функції:"

#: ../../library/unittest.mock.rst:1567
msgid ""
"*spec*, *create* and the other arguments to :func:`patch.object` have the "
"same meaning as they do for :func:`patch`."
msgstr ""
"*spec*, *create* та інші аргументи для :func:`patch.object` мають те саме "
"значення, що й для :func:`patch`."

#: ../../library/unittest.mock.rst:1572
msgid "patch.dict"
msgstr "patch.dict"

#: ../../library/unittest.mock.rst:1576
msgid ""
"Patch a dictionary, or dictionary like object, and restore the dictionary to "
"its original state after the test."
msgstr ""
"Виправте словник або об’єкт, схожий на словник, і відновіть словник до "
"початкового стану після тесту."

#: ../../library/unittest.mock.rst:1579
msgid ""
"*in_dict* can be a dictionary or a mapping like container. If it is a "
"mapping then it must at least support getting, setting and deleting items "
"plus iterating over keys."
msgstr ""
"*in_dict* може бути словником або контейнером, схожим на відображення. Якщо "
"це відображення, то воно повинно принаймні підтримувати отримання, "
"встановлення та видалення елементів, а також ітерацію по ключах."

#: ../../library/unittest.mock.rst:1583
msgid ""
"*in_dict* can also be a string specifying the name of the dictionary, which "
"will then be fetched by importing it."
msgstr ""
"*in_dict* також може бути рядком, що визначає назву словника, який потім "
"буде отримано шляхом його імпорту."

#: ../../library/unittest.mock.rst:1586
msgid ""
"*values* can be a dictionary of values to set in the dictionary. *values* "
"can also be an iterable of ``(key, value)`` pairs."
msgstr ""
"*values* може бути словником значень для встановлення в словнику. *значення* "
"також можуть бути повторюваними парами ``(ключ, значення)``."

#: ../../library/unittest.mock.rst:1589
msgid ""
"If *clear* is true then the dictionary will be cleared before the new values "
"are set."
msgstr ""
"Якщо *clear* має значення true, словник буде очищено перед встановленням "
"нових значень."

#: ../../library/unittest.mock.rst:1592
msgid ""
":func:`patch.dict` can also be called with arbitrary keyword arguments to "
"set values in the dictionary."
msgstr ""
":func:`patch.dict` також можна викликати з довільними ключовими аргументами "
"для встановлення значень у словнику."

#: ../../library/unittest.mock.rst:1597
msgid ""
":func:`patch.dict` now returns the patched dictionary when used as a context "
"manager."
msgstr ""
":func:`patch.dict` тепер повертає виправлений словник, коли використовується "
"як менеджер контексту."

#: ../../library/unittest.mock.rst:1600
msgid ""
":func:`patch.dict` can be used as a context manager, decorator or class "
"decorator:"
msgstr ""
":func:`patch.dict` можна використовувати як контекстний менеджер, декоратор "
"або декоратор класу:"

#: ../../library/unittest.mock.rst:1610
msgid ""
"When used as a class decorator :func:`patch.dict` honours ``patch."
"TEST_PREFIX`` (default to ``'test'``) for choosing which methods to wrap:"
msgstr ""
"Коли використовується як декоратор класу, :func:`patch.dict` враховує "
"``patch.TEST_PREFIX`` (за замовчуванням ``'test'``) для вибору методів для "
"обгортання:"

#: ../../library/unittest.mock.rst:1621
msgid ""
"If you want to use a different prefix for your test, you can inform the "
"patchers of the different prefix by setting ``patch.TEST_PREFIX``. For more "
"details about how to change the value of see :ref:`test-prefix`."
msgstr ""
"Якщо ви хочете використовувати інший префікс для свого тесту, ви можете "
"повідомити патчерів про інший префікс, встановивши ``patch.TEST_PREFIX``. "
"Докладніше про те, як змінити значення див. :ref:`test-prefix`."

#: ../../library/unittest.mock.rst:1625
msgid ""
":func:`patch.dict` can be used to add members to a dictionary, or simply let "
"a test change a dictionary, and ensure the dictionary is restored when the "
"test ends."
msgstr ""
":func:`patch.dict` можна використовувати для додавання членів до словника "
"або просто дозволити тесту змінити словник і переконатися, що словник буде "
"відновлено після завершення тесту."

#: ../../library/unittest.mock.rst:1646
msgid ""
"Keywords can be used in the :func:`patch.dict` call to set values in the "
"dictionary:"
msgstr ""
"Ключові слова можна використовувати у виклику :func:`patch.dict` для "
"встановлення значень у словнику:"

#: ../../library/unittest.mock.rst:1656
msgid ""
":func:`patch.dict` can be used with dictionary like objects that aren't "
"actually dictionaries. At the very minimum they must support item getting, "
"setting, deleting and either iteration or membership test. This corresponds "
"to the magic methods :meth:`__getitem__`, :meth:`__setitem__`, :meth:"
"`__delitem__` and either :meth:`__iter__` or :meth:`__contains__`."
msgstr ""

#: ../../library/unittest.mock.rst:1685
msgid "patch.multiple"
msgstr "patch.multiple"

#: ../../library/unittest.mock.rst:1689
msgid ""
"Perform multiple patches in a single call. It takes the object to be patched "
"(either as an object or a string to fetch the object by importing) and "
"keyword arguments for the patches::"
msgstr ""
"Виконайте кілька патчів за один виклик. Він приймає об’єкт, який потрібно "
"виправити (або як об’єкт, або рядок для отримання об’єкта шляхом імпорту), а "
"також ключові аргументи для патчів::"

#: ../../library/unittest.mock.rst:1696
msgid ""
"Use :data:`DEFAULT` as the value if you want :func:`patch.multiple` to "
"create mocks for you. In this case the created mocks are passed into a "
"decorated function by keyword, and a dictionary is returned when :func:"
"`patch.multiple` is used as a context manager."
msgstr ""
"Використовуйте :data:`DEFAULT` як значення, якщо ви хочете, щоб :func:`patch."
"multiple` створював для вас макети. У цьому випадку створені макети "
"передаються в декоровану функцію за ключовим словом, а словник повертається, "
"коли :func:`patch.multiple` використовується як менеджер контексту."

#: ../../library/unittest.mock.rst:1701
msgid ""
":func:`patch.multiple` can be used as a decorator, class decorator or a "
"context manager. The arguments *spec*, *spec_set*, *create*, *autospec* and "
"*new_callable* have the same meaning as for :func:`patch`. These arguments "
"will be applied to *all* patches done by :func:`patch.multiple`."
msgstr ""
":func:`patch.multiple` можна використовувати як декоратор, декоратор класу "
"або менеджер контексту. Аргументи *spec*, *spec_set*, *create*, *autospec* і "
"*new_callable* мають те саме значення, що й для :func:`patch`. Ці аргументи "
"будуть застосовані до *всіх* патчів, створених :func:`patch.multiple`."

#: ../../library/unittest.mock.rst:1706
msgid ""
"When used as a class decorator :func:`patch.multiple` honours ``patch."
"TEST_PREFIX`` for choosing which methods to wrap."
msgstr ""
"При використанні як декоратор класу :func:`patch.multiple` враховує ``patch."
"TEST_PREFIX`` для вибору методів для обгортання."

#: ../../library/unittest.mock.rst:1709
msgid ""
"If you want :func:`patch.multiple` to create mocks for you, then you can "
"use :data:`DEFAULT` as the value. If you use :func:`patch.multiple` as a "
"decorator then the created mocks are passed into the decorated function by "
"keyword. ::"
msgstr ""
"Якщо ви хочете, щоб :func:`patch.multiple` створював для вас макети, ви "
"можете використовувати :data:`DEFAULT` як значення. Якщо ви використовуєте :"
"func:`patch.multiple` як декоратор, тоді створені макети передаються в "
"декоровану функцію за ключовим словом. ::"

#: ../../library/unittest.mock.rst:1723
msgid ""
":func:`patch.multiple` can be nested with other ``patch`` decorators, but "
"put arguments passed by keyword *after* any of the standard arguments "
"created by :func:`patch`::"
msgstr ""
":func:`patch.multiple` можна вкладати в інші декоратори ``patch``, але "
"розміщувати аргументи, передані ключовим словом *після* будь-яких "
"стандартних аргументів, створених :func:`patch`::"

#: ../../library/unittest.mock.rst:1735
msgid ""
"If :func:`patch.multiple` is used as a context manager, the value returned "
"by the context manager is a dictionary where created mocks are keyed by "
"name::"
msgstr ""
"Якщо :func:`patch.multiple` використовується як менеджер контексту, "
"значення, яке повертає менеджер контексту, є словником, у якому створені "
"макети вказуються за назвою::"

#: ../../library/unittest.mock.rst:1749
msgid "patch methods: start and stop"
msgstr "métodos do patch: *start* e *stop*"

#: ../../library/unittest.mock.rst:1751
msgid ""
"All the patchers have :meth:`start` and :meth:`stop` methods. These make it "
"simpler to do patching in ``setUp`` methods or where you want to do multiple "
"patches without nesting decorators or with statements."
msgstr ""
"Усі патчери мають методи :meth:`start` і :meth:`stop`. Це спрощує виконання "
"виправлень у методах ``setUp`` або там, де потрібно виконати кілька латок "
"без декораторів вкладення або за допомогою операторів."

#: ../../library/unittest.mock.rst:1755
msgid ""
"To use them call :func:`patch`, :func:`patch.object` or :func:`patch.dict` "
"as normal and keep a reference to the returned ``patcher`` object. You can "
"then call :meth:`start` to put the patch in place and :meth:`stop` to undo "
"it."
msgstr ""
"Щоб використати їх, викличте :func:`patch`, :func:`patch.object` або :func:"
"`patch.dict` як зазвичай і збережіть посилання на повернутий об’єкт "
"``patcher``. Потім ви можете викликати :meth:`start`, щоб поставити патч на "
"місце, і :meth:`stop`, щоб скасувати його."

#: ../../library/unittest.mock.rst:1759
msgid ""
"If you are using :func:`patch` to create a mock for you then it will be "
"returned by the call to ``patcher.start``. ::"
msgstr ""
"Якщо ви використовуєте :func:`patch` для створення макету, його буде "
"повернено викликом ``patcher.start``. ::"

#: ../../library/unittest.mock.rst:1773
msgid ""
"A typical use case for this might be for doing multiple patches in the "
"``setUp`` method of a :class:`TestCase`::"
msgstr ""
"Типовим випадком використання для цього може бути виконання кількох патчів у "
"методі ``setUp`` :class:`TestCase`::"

#: ../../library/unittest.mock.rst:1795
msgid ""
"If you use this technique you must ensure that the patching is \"undone\" by "
"calling ``stop``. This can be fiddlier than you might think, because if an "
"exception is raised in the ``setUp`` then ``tearDown`` is not called. :meth:"
"`unittest.TestCase.addCleanup` makes this easier::"
msgstr ""
"Якщо ви використовуєте цю техніку, ви повинні переконатися, що виправлення "
"\"скасовано\", викликавши ``stop``. Це може бути складніше, ніж ви могли б "
"подумати, оскільки якщо в ``setUp`` виникає виняток, ``tearDown`` не "
"викликається. :meth:`unittest.TestCase.addCleanup` полегшує це::"

#: ../../library/unittest.mock.rst:1810
msgid ""
"As an added bonus you no longer need to keep a reference to the ``patcher`` "
"object."
msgstr ""
"Як додатковий бонус, вам більше не потрібно зберігати посилання на об’єкт "
"``patcher``."

#: ../../library/unittest.mock.rst:1813
msgid ""
"It is also possible to stop all patches which have been started by using :"
"func:`patch.stopall`."
msgstr ""
"Також можна зупинити всі запущені латки за допомогою :func:`patch.stopall`."

#: ../../library/unittest.mock.rst:1818
msgid "Stop all active patches. Only stops patches started with ``start``."
msgstr "Зупинити всі активні патчі. Зупиняє лише патчі, розпочаті з ``start``."

#: ../../library/unittest.mock.rst:1824
msgid "patch builtins"
msgstr "patch de embutidos"

#: ../../library/unittest.mock.rst:1825
msgid ""
"You can patch any builtins within a module. The following example patches "
"builtin :func:`ord`::"
msgstr ""
"Ви можете виправляти будь-які вбудовані компоненти в модулі. Наступні "
"приклади патчів вбудовані в :func:`ord`::"

#: ../../library/unittest.mock.rst:1840
msgid "TEST_PREFIX"
msgstr "TEST_PREFIX"

#: ../../library/unittest.mock.rst:1842
msgid ""
"All of the patchers can be used as class decorators. When used in this way "
"they wrap every test method on the class. The patchers recognise methods "
"that start with ``'test'`` as being test methods. This is the same way that "
"the :class:`unittest.TestLoader` finds test methods by default."
msgstr ""
"Усі патчери можна використовувати як декоратори класів. При такому "
"використанні вони загортають кожен тестовий метод у клас. Патчери "
"розпізнають методи, які починаються з ``'test'``, як методи тестування. "
"Таким же чином :class:`unittest.TestLoader` знаходить тестові методи за "
"замовчуванням."

#: ../../library/unittest.mock.rst:1847
msgid ""
"It is possible that you want to use a different prefix for your tests. You "
"can inform the patchers of the different prefix by setting ``patch."
"TEST_PREFIX``::"
msgstr ""
"Можливо, ви хочете використовувати інший префікс для своїх тестів. Ви можете "
"повідомити патчерів про інший префікс, встановивши ``patch.TEST_PREFIX``::"

#: ../../library/unittest.mock.rst:1870
msgid "Nesting Patch Decorators"
msgstr "Aninhando Decoradores Patch"

#: ../../library/unittest.mock.rst:1872
msgid ""
"If you want to perform multiple patches then you can simply stack up the "
"decorators."
msgstr ""
"Якщо ви хочете виконати кілька патчів, ви можете просто скласти декоратори."

#: ../../library/unittest.mock.rst:1875
msgid "You can stack up multiple patch decorators using this pattern:"
msgstr ""
"Ви можете скласти кілька декораторів патчів, використовуючи цей шаблон:"

#: ../../library/unittest.mock.rst:1891
msgid ""
"Note that the decorators are applied from the bottom upwards. This is the "
"standard way that Python applies decorators. The order of the created mocks "
"passed into your test function matches this order."
msgstr ""
"Зверніть увагу, що декоратори наносяться знизу вгору. Це стандартний спосіб, "
"у який Python застосовує декоратори. Порядок створених макетів, переданих у "
"вашу тестову функцію, відповідає цьому порядку."

#: ../../library/unittest.mock.rst:1899
msgid "Where to patch"
msgstr "Onde fazer patch"

#: ../../library/unittest.mock.rst:1901
msgid ""
":func:`patch` works by (temporarily) changing the object that a *name* "
"points to with another one. There can be many names pointing to any "
"individual object, so for patching to work you must ensure that you patch "
"the name used by the system under test."
msgstr ""
":func:`patch` працює, (тимчасово) змінюючи об’єкт, на який вказує *ім’я*, на "
"інший. Може бути багато імен, які вказують на будь-який окремий об’єкт, "
"тому, щоб виправлення працювало, ви повинні переконатися, що ви виправляєте "
"ім’я, яке використовує тестована система."

#: ../../library/unittest.mock.rst:1906
msgid ""
"The basic principle is that you patch where an object is *looked up*, which "
"is not necessarily the same place as where it is defined. A couple of "
"examples will help to clarify this."
msgstr ""
"Основний принцип полягає в тому, що ви виправляєте там, де об’єкт "
"*переглядається*, що не обов’язково є тим самим місцем, де він визначений. "
"Кілька прикладів допоможуть прояснити це."

#: ../../library/unittest.mock.rst:1910
msgid ""
"Imagine we have a project that we want to test with the following structure::"
msgstr ""
"Уявіть, що у нас є проект, який ми хочемо перевірити з такою структурою:"

#: ../../library/unittest.mock.rst:1919
msgid ""
"Now we want to test ``some_function`` but we want to mock out ``SomeClass`` "
"using :func:`patch`. The problem is that when we import module b, which we "
"will have to do then it imports ``SomeClass`` from module a. If we use :func:"
"`patch` to mock out ``a.SomeClass`` then it will have no effect on our test; "
"module b already has a reference to the *real* ``SomeClass`` and it looks "
"like our patching had no effect."
msgstr ""
"Тепер ми хочемо протестувати ``some_function``, але ми хочемо змакувати "
"``SomeClass`` за допомогою :func:`patch`. Проблема полягає в тому, що коли "
"ми імпортуємо модуль b, що нам доведеться зробити, він імпортує "
"``SomeClass`` з модуля a. Якщо ми використовуємо :func:`patch` для імітації "
"``a.SomeClass``, то це не вплине на наш тест; модуль b уже містить посилання "
"на *справжній* ``SomeClass``, і, схоже, наше виправлення не мало ефекту."

#: ../../library/unittest.mock.rst:1926
msgid ""
"The key is to patch out ``SomeClass`` where it is used (or where it is "
"looked up). In this case ``some_function`` will actually look up "
"``SomeClass`` in module b, where we have imported it. The patching should "
"look like::"
msgstr ""
"Головне – виправити ``SomeClass`` там, де він використовується (або де його "
"шукають). У цьому випадку ``some_function`` фактично шукатиме ``SomeClass`` "
"у модулі b, куди ми його імпортували. Виправлення має виглядати:"

#: ../../library/unittest.mock.rst:1932
msgid ""
"However, consider the alternative scenario where instead of ``from a import "
"SomeClass`` module b does ``import a`` and ``some_function`` uses ``a."
"SomeClass``. Both of these import forms are common. In this case the class "
"we want to patch is being looked up in the module and so we have to patch "
"``a.SomeClass`` instead::"
msgstr ""
"Однак розглянемо альтернативний сценарій, де замість ``from a import "
"SomeClass`` модуль b виконує ``імпорт a``, а ``some_function`` використовує "
"``a.SomeClass``. Обидві ці форми імпорту поширені. У цьому випадку клас, "
"який ми хочемо виправити, шукається в модулі, тому ми повинні замість цього "
"виправити ``a.SomeClass``::"

#: ../../library/unittest.mock.rst:1941
msgid "Patching Descriptors and Proxy Objects"
msgstr "Виправлення дескрипторів і проксі-об’єктів"

#: ../../library/unittest.mock.rst:1943
msgid ""
"Both patch_ and patch.object_ correctly patch and restore descriptors: class "
"methods, static methods and properties. You should patch these on the "
"*class* rather than an instance. They also work with *some* objects that "
"proxy attribute access, like the `django settings object <https://web."
"archive.org/web/20200603181648/http://www.voidspace.org.uk/python/weblog/"
"arch_d7_2010_12_04.shtml#e1198>`_."
msgstr ""
"И patch_, и patch.object_ корректно исправляют и восстанавливают "
"дескрипторы: методы класса, статические методы и свойства. Вам следует "
"исправлять их в *классе*, а не в экземпляре. Они также работают с "
"*некоторыми* объектами, которые имеют доступ к атрибутам прокси, например, с "
"объектом настроек django <https://web.archive.org/web/20200603181648/http://"
"www.voidspace.org.uk/python/weblog/ Arch_d7_2010_12_04.shtml#e1198>`_."

#: ../../library/unittest.mock.rst:1951
msgid "MagicMock and magic method support"
msgstr "Підтримка MagicMock і магічного методу"

#: ../../library/unittest.mock.rst:1956
msgid "Mocking Magic Methods"
msgstr "Simulando Métodos Mágicos"

#: ../../library/unittest.mock.rst:1958
msgid ""
":class:`Mock` supports mocking the Python protocol methods, also known as "
"\"magic methods\". This allows mock objects to replace containers or other "
"objects that implement Python protocols."
msgstr ""

#: ../../library/unittest.mock.rst:1962
msgid ""
"Because magic methods are looked up differently from normal methods [#]_, "
"this support has been specially implemented. This means that only specific "
"magic methods are supported. The supported list includes *almost* all of "
"them. If there are any missing that you need please let us know."
msgstr ""
"Оскільки магічні методи шукаються інакше, ніж звичайні методи [#]_, цю "
"підтримку було реалізовано спеціально. Це означає, що підтримуються лише "
"певні магічні методи. Список підтримуваних включає *майже* всі з них. Якщо "
"вам бракує чогось, повідомте нам."

#: ../../library/unittest.mock.rst:1967
msgid ""
"You mock magic methods by setting the method you are interested in to a "
"function or a mock instance. If you are using a function then it *must* take "
"``self`` as the first argument [#]_."
msgstr ""
"Ви імітуєте магічні методи, встановлюючи для методу, який вас цікавить, "
"функцію або імітаційний екземпляр. Якщо ви використовуєте функцію, вона "
"*має* приймати ``self`` як перший аргумент [#]_."

#: ../../library/unittest.mock.rst:1990
msgid ""
"One use case for this is for mocking objects used as context managers in a :"
"keyword:`with` statement:"
msgstr ""
"Одним із варіантів використання цього є знущання над об’єктами, що "
"використовуються як менеджери контексту в операторі :keyword:`with`:"

#: ../../library/unittest.mock.rst:2002
msgid ""
"Calls to magic methods do not appear in :attr:`~Mock.method_calls`, but they "
"are recorded in :attr:`~Mock.mock_calls`."
msgstr ""
"Виклики магічних методів не відображаються в :attr:`~Mock.method_calls`, але "
"вони записуються в :attr:`~Mock.mock_calls`."

#: ../../library/unittest.mock.rst:2007
msgid ""
"If you use the *spec* keyword argument to create a mock then attempting to "
"set a magic method that isn't in the spec will raise an :exc:"
"`AttributeError`."
msgstr ""
"Якщо ви використовуєте аргумент ключового слова *spec* для створення макета, "
"тоді спроба встановити магічний метод, якого немає в специфікації, призведе "
"до появи :exc:`AttributeError`."

#: ../../library/unittest.mock.rst:2010
msgid "The full list of supported magic methods is:"
msgstr "A lista completa de métodos mágicos compatíveis é:"

#: ../../library/unittest.mock.rst:2012
msgid "``__hash__``, ``__sizeof__``, ``__repr__`` and ``__str__``"
msgstr "``__hash__``, ``__sizeof__``, ``__repr__`` e ``__str__``"

#: ../../library/unittest.mock.rst:2013
msgid "``__dir__``, ``__format__`` and ``__subclasses__``"
msgstr "``__dir__``, ``__format__`` e ``__subclasses__``"

#: ../../library/unittest.mock.rst:2014
msgid "``__round__``, ``__floor__``, ``__trunc__`` and ``__ceil__``"
msgstr "``__round__``, ``__floor__``, ``__trunc__`` e ``__ceil__``"

#: ../../library/unittest.mock.rst:2015
msgid ""
"Comparisons: ``__lt__``, ``__gt__``, ``__le__``, ``__ge__``, ``__eq__`` and "
"``__ne__``"
msgstr ""
"Comparações: ``__lt__``, ``__gt__``, ``__le__``, ``__ge__``, ``__eq__`` e "
"``__ne__``"

#: ../../library/unittest.mock.rst:2017
msgid ""
"Container methods: ``__getitem__``, ``__setitem__``, ``__delitem__``, "
"``__contains__``, ``__len__``, ``__iter__``, ``__reversed__`` and "
"``__missing__``"
msgstr ""
"Методи контейнерів: ``__getitem__``, ``__setitem__``, ``__delitem__``, "
"``__contains__``, ``__len__``, ``__iter__``, ``__reversed__`` і "
"``__missing__``"

#: ../../library/unittest.mock.rst:2020
msgid ""
"Context manager: ``__enter__``, ``__exit__``, ``__aenter__`` and "
"``__aexit__``"
msgstr ""
"Gerenciador de contexto: ``__enter__``, ``__exit__``, ``__aenter__`` e "
"``__aexit__``"

#: ../../library/unittest.mock.rst:2021
msgid "Unary numeric methods: ``__neg__``, ``__pos__`` and ``__invert__``"
msgstr "Métodos numéricos unários: ``__neg__``, ``__pos__`` e ``__invert__``"

#: ../../library/unittest.mock.rst:2022
msgid ""
"The numeric methods (including right hand and in-place variants): "
"``__add__``, ``__sub__``, ``__mul__``, ``__matmul__``, ``__div__``, "
"``__truediv__``, ``__floordiv__``, ``__mod__``, ``__divmod__``, "
"``__lshift__``, ``__rshift__``, ``__and__``, ``__xor__``, ``__or__``, and "
"``__pow__``"
msgstr ""

#: ../../library/unittest.mock.rst:2026
msgid ""
"Numeric conversion methods: ``__complex__``, ``__int__``, ``__float__`` and "
"``__index__``"
msgstr ""
"Métodos de conversão numérica: ``__complex__``, ``__int__``, ``__float__`` e "
"``__index__``"

#: ../../library/unittest.mock.rst:2028
msgid "Descriptor methods: ``__get__``, ``__set__`` and ``__delete__``"
msgstr "Métodos descritores: ``__get__``, ``__set__`` e ``__delete__``"

#: ../../library/unittest.mock.rst:2029
msgid ""
"Pickling: ``__reduce__``, ``__reduce_ex__``, ``__getinitargs__``, "
"``__getnewargs__``, ``__getstate__`` and ``__setstate__``"
msgstr ""
"Pickling: ``__reduce__``, ``__reduce_ex__``, ``__getinitargs__``, "
"``__getnewargs__``, ``__getstate__`` e ``__setstate__``"

#: ../../library/unittest.mock.rst:2031
msgid "File system path representation: ``__fspath__``"
msgstr "Представлення шляху файлової системи: ``__fspath__``"

#: ../../library/unittest.mock.rst:2032
msgid "Asynchronous iteration methods: ``__aiter__`` and ``__anext__``"
msgstr "Métodos de iteração assíncrona: ``__aiter__`` e ``__anext__``"

#: ../../library/unittest.mock.rst:2034
msgid "Added support for :func:`os.PathLike.__fspath__`."
msgstr "Adicionado suporte para :func:`os.PathLike.__fspath__`."

#: ../../library/unittest.mock.rst:2037
msgid ""
"Added support for ``__aenter__``, ``__aexit__``, ``__aiter__`` and "
"``__anext__``."
msgstr ""
"Adicionado suporte para ``__aenter__``, ``__aexit__``, ``__aiter__`` e "
"``__anext__``."

#: ../../library/unittest.mock.rst:2041
msgid ""
"The following methods exist but are *not* supported as they are either in "
"use by mock, can't be set dynamically, or can cause problems:"
msgstr ""
"Наступні методи існують, але *не* підтримуються, оскільки вони або "
"використовуються макетом, не можуть бути встановлені динамічно або можуть "
"спричиняти проблеми:"

#: ../../library/unittest.mock.rst:2044
msgid "``__getattr__``, ``__setattr__``, ``__init__`` and ``__new__``"
msgstr "``__getattr__``, ``__setattr__``, ``__init__`` e ``__new__``"

#: ../../library/unittest.mock.rst:2045
msgid ""
"``__prepare__``, ``__instancecheck__``, ``__subclasscheck__``, ``__del__``"
msgstr ""
"``__prepare__``, ``__instancecheck__``, ``__subclasscheck__``, ``__del__``"

#: ../../library/unittest.mock.rst:2050
msgid "Magic Mock"
msgstr "Magic Mock"

#: ../../library/unittest.mock.rst:2052
msgid ""
"There are two ``MagicMock`` variants: :class:`MagicMock` and :class:"
"`NonCallableMagicMock`."
msgstr ""
"Existem duas variantes de ``MagicMock``: :class:`MagicMock` e :class:"
"`NonCallableMagicMock`."

#: ../../library/unittest.mock.rst:2057
msgid ""
"``MagicMock`` is a subclass of :class:`Mock` with default implementations of "
"most of the magic methods. You can use ``MagicMock`` without having to "
"configure the magic methods yourself."
msgstr ""

#: ../../library/unittest.mock.rst:2061
msgid "The constructor parameters have the same meaning as for :class:`Mock`."
msgstr "Параметри конструктора мають те саме значення, що й для :class:`Mock`."

#: ../../library/unittest.mock.rst:2063
msgid ""
"If you use the *spec* or *spec_set* arguments then *only* magic methods that "
"exist in the spec will be created."
msgstr ""
"Якщо ви використовуєте аргументи *spec* або *spec_set*, тоді будуть створені "
"*лише* магічні методи, які існують у специфікації."

#: ../../library/unittest.mock.rst:2069
msgid "A non-callable version of :class:`MagicMock`."
msgstr "Uma versão não-chamável de :class:`MagicMock`."

#: ../../library/unittest.mock.rst:2071
msgid ""
"The constructor parameters have the same meaning as for :class:`MagicMock`, "
"with the exception of *return_value* and *side_effect* which have no meaning "
"on a non-callable mock."
msgstr ""
"Параметри конструктора мають те саме значення, що й для :class:`MagicMock`, "
"за винятком *return_value* і *side_effect*, які не мають значення для "
"макету, який не викликається."

#: ../../library/unittest.mock.rst:2075
msgid ""
"The magic methods are setup with :class:`MagicMock` objects, so you can "
"configure them and use them in the usual way:"
msgstr ""
"Магічні методи встановлюються за допомогою об’єктів :class:`MagicMock`, тож "
"ви можете налаштувати їх і використовувати у звичайний спосіб:"

#: ../../library/unittest.mock.rst:2085
msgid ""
"By default many of the protocol methods are required to return objects of a "
"specific type. These methods are preconfigured with a default return value, "
"so that they can be used without you having to do anything if you aren't "
"interested in the return value. You can still *set* the return value "
"manually if you want to change the default."
msgstr ""
"За замовчуванням багато методів протоколу потрібні для повернення об’єктів "
"певного типу. Ці методи попередньо налаштовані зі значенням, що повертається "
"за замовчуванням, тому їх можна використовувати без необхідності робити будь-"
"які дії, якщо ви не зацікавлені у значенні, що повертається. Ви все ще "
"можете *встановити* значення, що повертається, вручну, якщо ви хочете "
"змінити значення за замовчуванням."

#: ../../library/unittest.mock.rst:2091
msgid "Methods and their defaults:"
msgstr "Métodos e seus padrões:"

#: ../../library/unittest.mock.rst:2093
msgid "``__lt__``: ``NotImplemented``"
msgstr "``__lt__``: ``NotImplemented``"

#: ../../library/unittest.mock.rst:2094
msgid "``__gt__``: ``NotImplemented``"
msgstr "``__gt__``: ``NotImplemented``"

#: ../../library/unittest.mock.rst:2095
msgid "``__le__``: ``NotImplemented``"
msgstr "``__le__``: ``NotImplemented``"

#: ../../library/unittest.mock.rst:2096
msgid "``__ge__``: ``NotImplemented``"
msgstr "``__ge__``: ``NotImplemented``"

#: ../../library/unittest.mock.rst:2097
msgid "``__int__``: ``1``"
msgstr "``__int__``: ``1``"

#: ../../library/unittest.mock.rst:2098
msgid "``__contains__``: ``False``"
msgstr "``__contains__``: ``False``"

#: ../../library/unittest.mock.rst:2099
msgid "``__len__``: ``0``"
msgstr "``__len__``: ``0``"

#: ../../library/unittest.mock.rst:2100
msgid "``__iter__``: ``iter([])``"
msgstr "``__iter__``: ``iter([])``"

#: ../../library/unittest.mock.rst:2101
msgid "``__exit__``: ``False``"
msgstr "``__exit__``: ``False``"

#: ../../library/unittest.mock.rst:2102
msgid "``__aexit__``: ``False``"
msgstr "``__aexit__``: ``False``"

#: ../../library/unittest.mock.rst:2103
msgid "``__complex__``: ``1j``"
msgstr "``__complex__``: ``1j``"

#: ../../library/unittest.mock.rst:2104
msgid "``__float__``: ``1.0``"
msgstr "``__float__``: ``1.0``"

#: ../../library/unittest.mock.rst:2105
msgid "``__bool__``: ``True``"
msgstr "``__bool__``: ``True``"

#: ../../library/unittest.mock.rst:2106
msgid "``__index__``: ``1``"
msgstr "``__index__``: ``1``"

#: ../../library/unittest.mock.rst:2107
msgid "``__hash__``: default hash for the mock"
msgstr "``__hash__``: hash padrão para o mock"

#: ../../library/unittest.mock.rst:2108
msgid "``__str__``: default str for the mock"
msgstr "``__str__``: *str* padrão para o mock"

#: ../../library/unittest.mock.rst:2109
msgid "``__sizeof__``: default sizeof for the mock"
msgstr "``__sizeof__``: *sizeof* padrão para o mock"

#: ../../library/unittest.mock.rst:2111
msgid "For example:"
msgstr "Por exemplo:"

#: ../../library/unittest.mock.rst:2123
msgid ""
"The two equality methods, :meth:`__eq__` and :meth:`__ne__`, are special. "
"They do the default equality comparison on identity, using the :attr:`~Mock."
"side_effect` attribute, unless you change their return value to return "
"something else::"
msgstr ""

#: ../../library/unittest.mock.rst:2137
msgid ""
"The return value of :meth:`MagicMock.__iter__` can be any iterable object "
"and isn't required to be an iterator:"
msgstr ""
"Повернене значення :meth:`MagicMock.__iter__` може бути будь-яким ітерованим "
"об’єктом і не обов’язково бути ітератором:"

#: ../../library/unittest.mock.rst:2147
msgid ""
"If the return value *is* an iterator, then iterating over it once will "
"consume it and subsequent iterations will result in an empty list:"
msgstr ""
"Якщо значення, що повертається, *є* ітератором, одноразове повторення над "
"ним споживатиме його, а наступні ітерації призведуть до порожнього списку:"

#: ../../library/unittest.mock.rst:2156
msgid ""
"``MagicMock`` has all of the supported magic methods configured except for "
"some of the obscure and obsolete ones. You can still set these up if you "
"want."
msgstr ""
"У ``MagicMock`` налаштовано всі підтримувані магічні методи, за винятком "
"деяких незрозумілих і застарілих. Ви все ще можете налаштувати їх, якщо "
"хочете."

#: ../../library/unittest.mock.rst:2159
msgid ""
"Magic methods that are supported but not setup by default in ``MagicMock`` "
"are:"
msgstr ""
"Магічні методи, які підтримуються, але не налаштовані за замовчуванням у "
"``MagicMock``:"

#: ../../library/unittest.mock.rst:2161
msgid "``__subclasses__``"
msgstr "``__subclasses__``"

#: ../../library/unittest.mock.rst:2162
msgid "``__dir__``"
msgstr "``__dir__``"

#: ../../library/unittest.mock.rst:2163
msgid "``__format__``"
msgstr "``__format__``"

#: ../../library/unittest.mock.rst:2164
msgid "``__get__``, ``__set__`` and ``__delete__``"
msgstr "``__get__``, ``__set__`` e ``__delete__``"

#: ../../library/unittest.mock.rst:2165
msgid "``__reversed__`` and ``__missing__``"
msgstr "``__reversed__`` e ``__missing__``"

#: ../../library/unittest.mock.rst:2166
msgid ""
"``__reduce__``, ``__reduce_ex__``, ``__getinitargs__``, ``__getnewargs__``, "
"``__getstate__`` and ``__setstate__``"
msgstr ""
"``__reduce__``, ``__reduce_ex__``, ``__getinitargs__``, ``__getnewargs__``, "
"``__getstate__`` e ``__setstate__``"

#: ../../library/unittest.mock.rst:2168
msgid "``__getformat__`` and ``__setformat__``"
msgstr ""

#: ../../library/unittest.mock.rst:2172
msgid ""
"Magic methods *should* be looked up on the class rather than the instance. "
"Different versions of Python are inconsistent about applying this rule. The "
"supported protocol methods should work with all supported versions of Python."
msgstr ""
"Чарівні методи *слід* шукати в класі, а не в екземплярі. Різні версії Python "
"несумісні щодо застосування цього правила. Підтримувані методи протоколу "
"мають працювати з усіма підтримуваними версіями Python."

#: ../../library/unittest.mock.rst:2176
msgid ""
"The function is basically hooked up to the class, but each ``Mock`` instance "
"is kept isolated from the others."
msgstr ""
"Функція в основному підключена до класу, але кожен екземпляр ``Mock`` "
"зберігається ізольованим від інших."

#: ../../library/unittest.mock.rst:2181
msgid "Helpers"
msgstr "Ajudantes"

#: ../../library/unittest.mock.rst:2184
msgid "sentinel"
msgstr "sentinel"

#: ../../library/unittest.mock.rst:2188
msgid ""
"The ``sentinel`` object provides a convenient way of providing unique "
"objects for your tests."
msgstr ""
"Об’єкт ``sentinel`` забезпечує зручний спосіб надання унікальних об’єктів "
"для ваших тестів."

#: ../../library/unittest.mock.rst:2191
msgid ""
"Attributes are created on demand when you access them by name. Accessing the "
"same attribute will always return the same object. The objects returned have "
"a sensible repr so that test failure messages are readable."
msgstr ""
"Атрибути створюються на вимогу, коли ви отримуєте доступ до них за іменем. "
"Доступ до того самого атрибуту завжди повертатиме той самий об’єкт. "
"Повернуті об’єкти мають розумне відображення, тому повідомлення про помилку "
"тесту можна прочитати."

#: ../../library/unittest.mock.rst:2195
msgid ""
"The ``sentinel`` attributes now preserve their identity when they are :mod:"
"`copied <copy>` or :mod:`pickled <pickle>`."
msgstr ""
"Атрибути ``sentinel`` тепер зберігають свою ідентичність, коли їх :mod:"
"`скопіюють <copy>` або :mod:`маринують <pickle>`."

#: ../../library/unittest.mock.rst:2199
msgid ""
"Sometimes when testing you need to test that a specific object is passed as "
"an argument to another method, or returned. It can be common to create named "
"sentinel objects to test this. :data:`sentinel` provides a convenient way of "
"creating and testing the identity of objects like this."
msgstr ""
"Іноді під час тестування вам потрібно перевірити, чи певний об’єкт "
"передається як аргумент до іншого методу або повертається. Для перевірки "
"цього може бути звичайним створення іменованих дозорних об’єктів. :data:"
"`sentinel` забезпечує зручний спосіб створення та перевірки ідентичності "
"таких об’єктів."

#: ../../library/unittest.mock.rst:2204
msgid ""
"In this example we monkey patch ``method`` to return ``sentinel."
"some_object``:"
msgstr ""
"У цьому прикладі ми використовуємо ``method`` для повернення ``sentinel."
"some_object``:"

#: ../../library/unittest.mock.rst:2216
msgid "DEFAULT"
msgstr "DEFAULT"

#: ../../library/unittest.mock.rst:2221
msgid ""
"The :data:`DEFAULT` object is a pre-created sentinel (actually ``sentinel."
"DEFAULT``). It can be used by :attr:`~Mock.side_effect` functions to "
"indicate that the normal return value should be used."
msgstr ""
"Об’єкт :data:`DEFAULT` є попередньо створеним дозорним (насправді ``sentinel."
"DEFAULT``). Його можна використовувати функціями :attr:`~Mock.side_effect`, "
"щоб вказати, що потрібно використовувати звичайне повертане значення."

#: ../../library/unittest.mock.rst:2227
msgid "call"
msgstr "chamada"

#: ../../library/unittest.mock.rst:2231
msgid ""
":func:`call` is a helper object for making simpler assertions, for comparing "
"with :attr:`~Mock.call_args`, :attr:`~Mock.call_args_list`, :attr:`~Mock."
"mock_calls` and :attr:`~Mock.method_calls`. :func:`call` can also be used "
"with :meth:`~Mock.assert_has_calls`."
msgstr ""
":func:`call` — це допоміжний об’єкт для створення простіших тверджень, для "
"порівняння з :attr:`~Mock.call_args`, :attr:`~Mock.call_args_list`, :attr:"
"`~Mock.mock_calls` і :attr:`~Mock.method_calls`. :func:`call` також можна "
"використовувати з :meth:`~Mock.assert_has_calls`."

#: ../../library/unittest.mock.rst:2244
msgid ""
"For a call object that represents multiple calls, :meth:`call_list` returns "
"a list of all the intermediate calls as well as the final call."
msgstr ""
"Для об’єкта виклику, який представляє кілька викликів, :meth:`call_list` "
"повертає список усіх проміжних викликів, а також остаточний виклик."

#: ../../library/unittest.mock.rst:2248
msgid ""
"``call_list`` is particularly useful for making assertions on \"chained "
"calls\". A chained call is multiple calls on a single line of code. This "
"results in multiple entries in :attr:`~Mock.mock_calls` on a mock. Manually "
"constructing the sequence of calls can be tedious."
msgstr ""
"``call_list`` особливо корисний для створення тверджень щодо \"ланцюжкових "
"викликів\". Зв’язаний виклик — це кілька викликів в одному рядку коду. Це "
"призводить до кількох записів у :attr:`~Mock.mock_calls` на макеті. Побудова "
"послідовності викликів вручну може бути виснажливою."

#: ../../library/unittest.mock.rst:2253
msgid ""
":meth:`~call.call_list` can construct the sequence of calls from the same "
"chained call:"
msgstr ""
":meth:`~call.call_list` може побудувати послідовність викликів з одного "
"ланцюжкового виклику:"

#: ../../library/unittest.mock.rst:2270
msgid ""
"A ``call`` object is either a tuple of (positional args, keyword args) or "
"(name, positional args, keyword args) depending on how it was constructed. "
"When you construct them yourself this isn't particularly interesting, but "
"the ``call`` objects that are in the :attr:`Mock.call_args`, :attr:`Mock."
"call_args_list` and :attr:`Mock.mock_calls` attributes can be introspected "
"to get at the individual arguments they contain."
msgstr ""
"Об’єкт ``виклику`` є або кортежем (позиційні аргументи, аргументи ключового "
"слова) або (ім’я, позиційні аргументи, аргументи ключового слова) залежно "
"від того, як він був створений. Коли ви створюєте їх самостійно, це не "
"особливо цікаво, але об’єкти ``call``, які знаходяться в :attr:`Mock."
"call_args`, :attr:`Mock.call_args_list` і :attr:`Mock.mock_calls` атрибути "
"можна перевірити, щоб отримати окремі аргументи, які вони містять."

#: ../../library/unittest.mock.rst:2277
msgid ""
"The ``call`` objects in :attr:`Mock.call_args` and :attr:`Mock."
"call_args_list` are two-tuples of (positional args, keyword args) whereas "
"the ``call`` objects in :attr:`Mock.mock_calls`, along with ones you "
"construct yourself, are three-tuples of (name, positional args, keyword "
"args)."
msgstr ""
"Об’єкти ``call`` у :attr:`Mock.call_args` і :attr:`Mock.call_args_list` є "
"двома кортежами (позиційні аргументи, аргументи ключового слова), тоді як "
"об’єкти ``call`` у :attr:`Mock.mock_calls` разом із тими, які ви створюєте "
"самостійно, складаються з трьох кортежів (ім’я, позиційні аргументи, "
"аргументи ключового слова)."

#: ../../library/unittest.mock.rst:2282
msgid ""
"You can use their \"tupleness\" to pull out the individual arguments for "
"more complex introspection and assertions. The positional arguments are a "
"tuple (an empty tuple if there are no positional arguments) and the keyword "
"arguments are a dictionary:"
msgstr ""
"Ви можете використовувати їх \"кортеж\", щоб отримати окремі аргументи для "
"більш складного самоаналізу та тверджень. Позиційні аргументи — це кортеж "
"(порожній кортеж, якщо позиційних аргументів немає), а ключові аргументи — "
"це словник:"

#: ../../library/unittest.mock.rst:2315
msgid "create_autospec"
msgstr "create_autospec"

#: ../../library/unittest.mock.rst:2319
msgid ""
"Create a mock object using another object as a spec. Attributes on the mock "
"will use the corresponding attribute on the *spec* object as their spec."
msgstr ""
"Створіть макет об’єкта, використовуючи інший об’єкт як специфікацію. "
"Атрибути на макеті використовуватимуть відповідний атрибут об’єкта *spec* як "
"свою специфікацію."

#: ../../library/unittest.mock.rst:2323
msgid ""
"Functions or methods being mocked will have their arguments checked to "
"ensure that they are called with the correct signature."
msgstr ""
"Аргументи функцій або методів, які висміюються, перевірятимуть, щоб "
"переконатися, що вони викликаються з правильною сигнатурою."

#: ../../library/unittest.mock.rst:2326
msgid ""
"If *spec_set* is ``True`` then attempting to set attributes that don't exist "
"on the spec object will raise an :exc:`AttributeError`."
msgstr ""
"Якщо *spec_set* має значення ``True``, тоді спроба встановити атрибути, яких "
"не існує в об’єкті специфікації, призведе до появи :exc:`AttributeError`."

#: ../../library/unittest.mock.rst:2329
msgid ""
"If a class is used as a spec then the return value of the mock (the instance "
"of the class) will have the same spec. You can use a class as the spec for "
"an instance object by passing ``instance=True``. The returned mock will only "
"be callable if instances of the mock are callable."
msgstr ""
"Якщо клас використовується як специфікація, тоді значення, що повертається "
"mock (екземпляр класу), матиме ту саму специфікацію. Ви можете "
"використовувати клас як специфікацію для об’єкта екземпляра, передавши "
"``instance=True``. Повернений макет можна буде викликати, лише якщо його "
"екземпляри можна викликати."

#: ../../library/unittest.mock.rst:2334
msgid ""
":func:`create_autospec` also takes arbitrary keyword arguments that are "
"passed to the constructor of the created mock."
msgstr ""
":func:`create_autospec` також приймає довільні ключові аргументи, які "
"передаються конструктору створеного макету."

#: ../../library/unittest.mock.rst:2337
msgid ""
"See :ref:`auto-speccing` for examples of how to use auto-speccing with :func:"
"`create_autospec` and the *autospec* argument to :func:`patch`."
msgstr ""
"Перегляньте :ref:`auto-speccing` для прикладів використання автоматичної "
"специфікації з :func:`create_autospec` і аргументом *autospec* для :func:"
"`patch`."

#: ../../library/unittest.mock.rst:2343
msgid ""
":func:`create_autospec` now returns an :class:`AsyncMock` if the target is "
"an async function."
msgstr ""
":func:`create_autospec` тепер повертає :class:`AsyncMock`, якщо метою є "
"асинхронна функція."

#: ../../library/unittest.mock.rst:2348
msgid "ANY"
msgstr "ANY"

#: ../../library/unittest.mock.rst:2352
msgid ""
"Sometimes you may need to make assertions about *some* of the arguments in a "
"call to mock, but either not care about some of the arguments or want to "
"pull them individually out of :attr:`~Mock.call_args` and make more complex "
"assertions on them."
msgstr ""
"Іноді вам може знадобитися зробити твердження щодо *деяких* аргументів у "
"виклику mock, але ви або не дбаєте про деякі з аргументів, або хочете "
"вилучити їх окремо з :attr:`~Mock.call_args` і зробити складнішими "
"твердження на них."

#: ../../library/unittest.mock.rst:2357
msgid ""
"To ignore certain arguments you can pass in objects that compare equal to "
"*everything*. Calls to :meth:`~Mock.assert_called_with` and :meth:`~Mock."
"assert_called_once_with` will then succeed no matter what was passed in."
msgstr ""
"Щоб ігнорувати певні аргументи, ви можете передати об’єкти, порівняння яких "
"дорівнює *всему*. Виклики :meth:`~Mock.assert_ called_with` і :meth:`~Mock."
"assert_ called_once_with` будуть успішними незалежно від того, що було "
"передано."

#: ../../library/unittest.mock.rst:2366
msgid ""
":data:`ANY` can also be used in comparisons with call lists like :attr:"
"`~Mock.mock_calls`:"
msgstr ""
":data:`ANY` також можна використовувати для порівняння зі списками викликів, "
"наприклад :attr:`~Mock.mock_calls`:"

#: ../../library/unittest.mock.rst:2379
msgid "FILTER_DIR"
msgstr "FILTER_DIR"

#: ../../library/unittest.mock.rst:2383
msgid ""
":data:`FILTER_DIR` is a module level variable that controls the way mock "
"objects respond to :func:`dir` (only for Python 2.6 or more recent). The "
"default is ``True``, which uses the filtering described below, to only show "
"useful members. If you dislike this filtering, or need to switch it off for "
"diagnostic purposes, then set ``mock.FILTER_DIR = False``."
msgstr ""

#: ../../library/unittest.mock.rst:2389
msgid ""
"With filtering on, ``dir(some_mock)`` shows only useful attributes and will "
"include any dynamically created attributes that wouldn't normally be shown. "
"If the mock was created with a *spec* (or *autospec* of course) then all the "
"attributes from the original are shown, even if they haven't been accessed "
"yet:"
msgstr ""
"Якщо фільтрацію ввімкнено, ``dir(some_mock)`` показує лише корисні атрибути "
"та включатиме будь-які динамічно створені атрибути, які зазвичай не "
"відображаються. Якщо макет було створено за допомогою *spec* (або "
"*autospec*, звичайно), тоді відображаються всі атрибути з оригіналу, навіть "
"якщо до них ще не було доступу:"

#: ../../library/unittest.mock.rst:2416
msgid ""
"Many of the not-very-useful (private to :class:`Mock` rather than the thing "
"being mocked) underscore and double underscore prefixed attributes have been "
"filtered from the result of calling :func:`dir` on a :class:`Mock`. If you "
"dislike this behaviour you can switch it off by setting the module level "
"switch :data:`FILTER_DIR`:"
msgstr ""
"Багато з не дуже корисних (приватних для :class:`Mock`, а не для того, що "
"висміюється) атрибутів підкреслення та подвійного підкреслення з префіксом "
"було відфільтровано з результату виклику :func:`dir` на :class:`Mock`. Якщо "
"вам не подобається така поведінка, ви можете вимкнути її, встановивши "
"перемикач рівня модуля :data:`FILTER_DIR`:"

#: ../../library/unittest.mock.rst:2437
msgid ""
"Alternatively you can just use ``vars(my_mock)`` (instance members) and "
"``dir(type(my_mock))`` (type members) to bypass the filtering irrespective "
"of :data:`mock.FILTER_DIR`."
msgstr ""

#: ../../library/unittest.mock.rst:2443
msgid "mock_open"
msgstr "mock_open"

#: ../../library/unittest.mock.rst:2447
msgid ""
"A helper function to create a mock to replace the use of :func:`open`. It "
"works for :func:`open` called directly or used as a context manager."
msgstr ""
"Допоміжна функція для створення макету замість використання :func:`open`. Це "
"працює для :func:`open`, що викликається безпосередньо або використовується "
"як контекстний менеджер."

#: ../../library/unittest.mock.rst:2450
msgid ""
"The *mock* argument is the mock object to configure. If ``None`` (the "
"default) then a :class:`MagicMock` will be created for you, with the API "
"limited to methods or attributes available on standard file handles."
msgstr ""
"Аргумент *mock* є макетним об’єктом для налаштування. Якщо ``None`` (за "
"замовчуванням), тоді для вас буде створено :class:`MagicMock` з API, "
"обмеженим методами чи атрибутами, доступними для стандартних дескрипторів "
"файлів."

#: ../../library/unittest.mock.rst:2454
msgid ""
"*read_data* is a string for the :meth:`~io.IOBase.read`, :meth:`~io.IOBase."
"readline`, and :meth:`~io.IOBase.readlines` methods of the file handle to "
"return.  Calls to those methods will take data from *read_data* until it is "
"depleted.  The mock of these methods is pretty simplistic: every time the "
"*mock* is called, the *read_data* is rewound to the start.  If you need more "
"control over the data that you are feeding to the tested code you will need "
"to customize this mock for yourself.  When that is insufficient, one of the "
"in-memory filesystem packages on `PyPI <https://pypi.org>`_ can offer a "
"realistic filesystem for testing."
msgstr ""
"*read_data* — це рядок для методів :meth:`~io.IOBase.read`, :meth:`~io."
"IOBase.readline` і :meth:`~io.IOBase.readlines` дескриптора файлу "
"повернення. Виклики цих методів братимуть дані з *read_data*, доки вони не "
"будуть вичерпані. Макет цих методів досить простий: щоразу, коли "
"викликається *mock*, *read_data* перемотується на початок. Якщо вам потрібен "
"більший контроль над даними, які ви подаєте до перевіреного коду, вам "
"потрібно буде налаштувати цей макет під себе. Якщо цього недостатньо, один "
"із пакетів файлової системи в пам’яті на `PyPI <https://pypi.org>`_ може "
"запропонувати реалістичну файлову систему для тестування."

#: ../../library/unittest.mock.rst:2464
msgid ""
"Added :meth:`~io.IOBase.readline` and :meth:`~io.IOBase.readlines` support. "
"The mock of :meth:`~io.IOBase.read` changed to consume *read_data* rather "
"than returning it on each call."
msgstr ""
"Додано підтримку :meth:`~io.IOBase.readline` і :meth:`~io.IOBase.readlines`. "
"Макет :meth:`~io.IOBase.read` змінено, щоб споживати *read_data*, а не "
"повертати їх під час кожного виклику."

#: ../../library/unittest.mock.rst:2469
msgid "*read_data* is now reset on each call to the *mock*."
msgstr "*read_data* тепер скидається під час кожного виклику *mock*."

#: ../../library/unittest.mock.rst:2472
msgid ""
"Added :meth:`__iter__` to implementation so that iteration (such as in for "
"loops) correctly consumes *read_data*."
msgstr ""

#: ../../library/unittest.mock.rst:2476
msgid ""
"Using :func:`open` as a context manager is a great way to ensure your file "
"handles are closed properly and is becoming common::"
msgstr ""
"Використання :func:`open` як контекстного менеджера є чудовим способом "
"переконатися, що ваші дескриптори файлів закриті належним чином, і стає "
"поширеним::"

#: ../../library/unittest.mock.rst:2482
msgid ""
"The issue is that even if you mock out the call to :func:`open` it is the "
"*returned object* that is used as a context manager (and has :meth:"
"`__enter__` and :meth:`__exit__` called)."
msgstr ""

#: ../../library/unittest.mock.rst:2486
msgid ""
"Mocking context managers with a :class:`MagicMock` is common enough and "
"fiddly enough that a helper function is useful. ::"
msgstr ""
"Знущання над контекстними менеджерами за допомогою :class:`MagicMock` є "
"досить поширеним і досить складним, щоб допоміжна функція була корисною. ::"

#: ../../library/unittest.mock.rst:2503
msgid "And for reading files::"
msgstr "E para ler arquivos::"

#: ../../library/unittest.mock.rst:2516
msgid "Autospeccing"
msgstr "Especificação automática"

#: ../../library/unittest.mock.rst:2518
msgid ""
"Autospeccing is based on the existing :attr:`spec` feature of mock. It "
"limits the api of mocks to the api of an original object (the spec), but it "
"is recursive (implemented lazily) so that attributes of mocks only have the "
"same api as the attributes of the spec. In addition mocked functions / "
"methods have the same call signature as the original so they raise a :exc:"
"`TypeError` if they are called incorrectly."
msgstr ""
"Автоматична специфікація базується на існуючій функції :attr:`spec` mock. "
"Він обмежує API mocks до API оригінального об’єкта (специфікації), але він є "
"рекурсивним (реалізується ліниво), тому атрибути mocks мають лише той самий "
"API, що й атрибути специфікації. Крім того, імітовані функції/методи мають "
"таку саму сигнатуру виклику, як і оригінальні, тому вони викликають :exc:"
"`TypeError`, якщо їх викликають неправильно."

#: ../../library/unittest.mock.rst:2525
msgid "Before I explain how auto-speccing works, here's why it is needed."
msgstr ""
"Перш ніж пояснювати, як працює автоматична специфікація, ось чому вона "
"потрібна."

#: ../../library/unittest.mock.rst:2527
msgid ""
":class:`Mock` is a very powerful and flexible object, but it suffers from "
"two flaws when used to mock out objects from a system under test. One of "
"these flaws is specific to the :class:`Mock` api and the other is a more "
"general problem with using mock objects."
msgstr ""
":class:`Mock` є дуже потужним і гнучким об'єктом, але він страждає від двох "
"недоліків, коли використовується для імітації об'єктів із системи, що "
"тестується. Одна з цих недоліків є специфічною для API :class:`Mock`, а інша "
"є більш загальною проблемою використання фіктивних об’єктів."

#: ../../library/unittest.mock.rst:2532
msgid ""
"First the problem specific to :class:`Mock`. :class:`Mock` has two assert "
"methods that are extremely handy: :meth:`~Mock.assert_called_with` and :meth:"
"`~Mock.assert_called_once_with`."
msgstr ""
"Спочатку проблема, специфічна для :class:`Mock`. :class:`Mock` має два "
"надзвичайно зручні методи підтвердження: :meth:`~Mock.assert_ called_with` "
"і :meth:`~Mock.assert_ called_once_with`."

#: ../../library/unittest.mock.rst:2545
msgid ""
"Because mocks auto-create attributes on demand, and allow you to call them "
"with arbitrary arguments, if you misspell one of these assert methods then "
"your assertion is gone:"
msgstr ""
"Оскільки висміює автоматичне створення атрибутів на вимогу та дозволяє "
"викликати їх із довільними аргументами, якщо ви неправильно напишете один із "
"цих методів assert, ваше твердження зникне:"

#: ../../library/unittest.mock.rst:2555
msgid "Your tests can pass silently and incorrectly because of the typo."
msgstr "Ваші тести можуть проходити мовчки та неправильно через помилку."

#: ../../library/unittest.mock.rst:2557
msgid ""
"The second issue is more general to mocking. If you refactor some of your "
"code, rename members and so on, any tests for code that is still using the "
"*old api* but uses mocks instead of the real objects will still pass. This "
"means your tests can all pass even though your code is broken."
msgstr ""
"Друге питання стосується насмішок. Якщо ви переробите частину свого коду, "
"перейменуєте члени тощо, будь-які тести для коду, який все ще використовує "
"*старий api*, але використовує імітації замість реальних об’єктів, усе одно "
"пройдуть. Це означає, що всі ваші тести можуть пройти, навіть якщо ваш код "
"зламано."

#: ../../library/unittest.mock.rst:2562
msgid ""
"Note that this is another reason why you need integration tests as well as "
"unit tests. Testing everything in isolation is all fine and dandy, but if "
"you don't test how your units are \"wired together\" there is still lots of "
"room for bugs that tests might have caught."
msgstr ""
"Зауважте, що це ще одна причина, чому вам потрібні інтеграційні тести, а "
"також модульні тести. Тестувати все ізольовано — це чудово, але якщо ви не "
"перевірятимете, як ваші пристрої \"з’єднані між собою\", все ще є багато "
"місця для помилок, які могли виявити тести."

#: ../../library/unittest.mock.rst:2567
msgid ""
":mod:`mock` already provides a feature to help with this, called speccing. "
"If you use a class or instance as the :attr:`spec` for a mock then you can "
"only access attributes on the mock that exist on the real class:"
msgstr ""
":mod:`mock` вже надає функцію, яка допоможе з цим, яка називається "
"специфікація. Якщо ви використовуєте клас або екземпляр як :attr:`spec` для "
"макету, ви зможете отримати доступ лише до тих атрибутів макета, які існують "
"у реальному класі:"

#: ../../library/unittest.mock.rst:2578
msgid ""
"The spec only applies to the mock itself, so we still have the same issue "
"with any methods on the mock:"
msgstr ""
"Специфікація стосується лише самого макету, тому ми все ще маємо ту саму "
"проблему з будь-якими методами на макеті:"

#: ../../library/unittest.mock.rst:2587
msgid ""
"Auto-speccing solves this problem. You can either pass ``autospec=True`` to :"
"func:`patch` / :func:`patch.object` or use the :func:`create_autospec` "
"function to create a mock with a spec. If you use the ``autospec=True`` "
"argument to :func:`patch` then the object that is being replaced will be "
"used as the spec object. Because the speccing is done \"lazily\" (the spec "
"is created as attributes on the mock are accessed) you can use it with very "
"complex or deeply nested objects (like modules that import modules that "
"import modules) without a big performance hit."
msgstr ""
"Автоматична специфікація вирішує цю проблему. Ви можете передати "
"``autospec=True`` в :func:`patch` / :func:`patch.object` або використати "
"функцію :func:`create_autospec`, щоб створити макет зі специфікацією. Якщо "
"ви використовуєте аргумент ``autospec=True`` для :func:`patch`, тоді об’єкт, "
"який замінюється, використовуватиметься як об’єкт специфікації. Оскільки "
"специфікація виконується \"ліниво\" (специфікація створюється під час "
"доступу до атрибутів макету), ви можете використовувати її з дуже складними "
"або глибоко вкладеними об’єктами (як-от модулі, які імпортують модулі, які "
"імпортують модулі) без значного зниження продуктивності."

#: ../../library/unittest.mock.rst:2596
msgid "Here's an example of it in use::"
msgstr "Aqui está um exemplo disso em uso::"

#: ../../library/unittest.mock.rst:2606
msgid ""
"You can see that :class:`request.Request` has a spec. :class:`request."
"Request` takes two arguments in the constructor (one of which is *self*). "
"Here's what happens if we try to call it incorrectly::"
msgstr ""
"Ви бачите, що :class:`request.Request` має специфікацію. :class:`request."
"Request` приймає два аргументи в конструкторі (один з яких *self*). Ось що "
"станеться, якщо ми спробуємо викликати його неправильно:"

#: ../../library/unittest.mock.rst:2615
msgid ""
"The spec also applies to instantiated classes (i.e. the return value of "
"specced mocks)::"
msgstr ""
"Специфікація також стосується екземплярів класів (тобто значення, що "
"повертається specced mocks):"

#: ../../library/unittest.mock.rst:2622
msgid ""
":class:`Request` objects are not callable, so the return value of "
"instantiating our mocked out :class:`request.Request` is a non-callable "
"mock. With the spec in place any typos in our asserts will raise the correct "
"error::"
msgstr ""
"Об’єкти :class:`Request` не можна викликати, тому значення, що повертається "
"при створенні екземпляра нашого :class:`request.Request` є макетом, який не "
"можна викликати. Якщо специфікація на місці, будь-які друкарські помилки в "
"наших твердженнях викличуть правильну помилку::"

#: ../../library/unittest.mock.rst:2634
msgid ""
"In many cases you will just be able to add ``autospec=True`` to your "
"existing :func:`patch` calls and then be protected against bugs due to typos "
"and api changes."
msgstr ""
"У багатьох випадках ви просто зможете додати ``autospec=True`` до наявних "
"викликів :func:`patch` і тоді захистити себе від помилок через помилки друку "
"та зміни API."

#: ../../library/unittest.mock.rst:2638
msgid ""
"As well as using *autospec* through :func:`patch` there is a :func:"
"`create_autospec` for creating autospecced mocks directly:"
msgstr ""
"Окрім використання *autospec* через :func:`patch`, існує :func:"
"`create_autospec` для безпосереднього створення автоспецованих макетів:"

#: ../../library/unittest.mock.rst:2646
msgid ""
"This isn't without caveats and limitations however, which is why it is not "
"the default behaviour. In order to know what attributes are available on the "
"spec object, autospec has to introspect (access attributes) the spec. As you "
"traverse attributes on the mock a corresponding traversal of the original "
"object is happening under the hood. If any of your specced objects have "
"properties or descriptors that can trigger code execution then you may not "
"be able to use autospec. On the other hand it is much better to design your "
"objects so that introspection is safe [#]_."
msgstr ""
"Однак це не без застережень і обмежень, тому це не типова поведінка. Щоб "
"дізнатися, які атрибути доступні для об’єкта специфікації, autospec має "
"перевірити специфікацію (отримати доступ до атрибутів). Коли ви обходите "
"атрибути на макеті, відповідний обхід оригінального об’єкта відбувається під "
"капотом. Якщо будь-який з ваших специфікованих об’єктів має властивості або "
"дескриптори, які можуть ініціювати виконання коду, можливо, ви не зможете "
"використовувати автоспец. З іншого боку, набагато краще проектувати ваші "
"об’єкти так, щоб самоаналіз був безпечним [#]_."

#: ../../library/unittest.mock.rst:2655
msgid ""
"A more serious problem is that it is common for instance attributes to be "
"created in the :meth:`__init__` method and not to exist on the class at all. "
"*autospec* can't know about any dynamically created attributes and restricts "
"the api to visible attributes. ::"
msgstr ""

#: ../../library/unittest.mock.rst:2672
msgid ""
"There are a few different ways of resolving this problem. The easiest, but "
"not necessarily the least annoying, way is to simply set the required "
"attributes on the mock after creation. Just because *autospec* doesn't allow "
"you to fetch attributes that don't exist on the spec it doesn't prevent you "
"setting them::"
msgstr ""
"Існує кілька способів вирішення цієї проблеми. Найпростіший, але не "
"обов’язково найменш дратуючий спосіб – це просто встановити необхідні "
"атрибути на макет після створення. Просто тому, що *autospec* не дозволяє "
"отримати атрибути, яких немає в специфікації, це не заважає вам налаштувати "
"їх::"

#: ../../library/unittest.mock.rst:2683
msgid ""
"There is a more aggressive version of both *spec* and *autospec* that *does* "
"prevent you setting non-existent attributes. This is useful if you want to "
"ensure your code only *sets* valid attributes too, but obviously it prevents "
"this particular scenario:"
msgstr ""
"Існує більш агресивна версія як *spec*, так і *autospec*, яка *не* запобігає "
"встановленню неіснуючих атрибутів. Це корисно, якщо ви хочете, щоб ваш код "
"також *встановлював* дійсні атрибути, але, очевидно, це запобігає цьому "
"конкретному сценарію:"

#: ../../library/unittest.mock.rst:2696
msgid ""
"Probably the best way of solving the problem is to add class attributes as "
"default values for instance members initialised in :meth:`__init__`. Note "
"that if you are only setting default attributes in :meth:`__init__` then "
"providing them via class attributes (shared between instances of course) is "
"faster too. e.g."
msgstr ""

#: ../../library/unittest.mock.rst:2706
msgid ""
"This brings up another issue. It is relatively common to provide a default "
"value of ``None`` for members that will later be an object of a different "
"type. ``None`` would be useless as a spec because it wouldn't let you access "
"*any* attributes or methods on it. As ``None`` is *never* going to be useful "
"as a spec, and probably indicates a member that will normally of some other "
"type, autospec doesn't use a spec for members that are set to ``None``. "
"These will just be ordinary mocks (well - MagicMocks):"
msgstr ""
"Це породжує іншу проблему. Відносно поширеним є надання значення за "
"замовчуванням ``None`` для членів, які пізніше будуть об’єктом іншого типу. "
"``None`` буде марним як специфікація, тому що це не дозволить вам отримати "
"доступ до *будь-яких* атрибутів або методів на ньому. Оскільки ``None`` "
"*ніколи* не буде корисним як специфікація, і, ймовірно, вказує на член, який "
"зазвичай буде іншого типу, autospec не використовує специфікацію для членів, "
"для яких встановлено ``None``. Це будуть просто звичайні макети (добре - "
"MagicMocks):"

#: ../../library/unittest.mock.rst:2721
msgid ""
"If modifying your production classes to add defaults isn't to your liking "
"then there are more options. One of these is simply to use an instance as "
"the spec rather than the class. The other is to create a subclass of the "
"production class and add the defaults to the subclass without affecting the "
"production class. Both of these require you to use an alternative object as "
"the spec. Thankfully :func:`patch` supports this - you can simply pass the "
"alternative object as the *autospec* argument::"
msgstr ""
"Якщо вам не до вподоби модифікація виробничих класів для додавання значень "
"за замовчуванням, тоді є більше варіантів. Одним із них є просто "
"використання екземпляра як специфікації, а не класу. Інший полягає у "
"створенні підкласу виробничого класу та додаванні стандартних значень до "
"підкласу, не впливаючи на виробничий клас. Обидва вони вимагають "
"використання альтернативного об’єкта як специфікації. На щастя, :func:"
"`patch` підтримує це — ви можете просто передати альтернативний об’єкт як "
"аргумент *autospec*::"

#: ../../library/unittest.mock.rst:2742
msgid ""
"This only applies to classes or already instantiated objects. Calling a "
"mocked class to create a mock instance *does not* create a real instance. It "
"is only attribute lookups - along with calls to :func:`dir` - that are done."
msgstr ""
"Це стосується лише класів або вже створених об’єктів. Виклик фіктивного "
"класу для створення фальшивого екземпляра *не* створює справжній екземпляр. "
"Виконуються лише пошуки атрибутів разом із викликами :func:`dir`."

#: ../../library/unittest.mock.rst:2747
msgid "Sealing mocks"
msgstr "Vedando mocks"

#: ../../library/unittest.mock.rst:2756
msgid ""
"Seal will disable the automatic creation of mocks when accessing an "
"attribute of the mock being sealed or any of its attributes that are already "
"mocks recursively."
msgstr ""
"Seal вимкне автоматичне створення макетів під час доступу до атрибута "
"макету, який запечатується, або будь-якого з його атрибутів, які вже є "
"макетами рекурсивно."

#: ../../library/unittest.mock.rst:2759
msgid ""
"If a mock instance with a name or a spec is assigned to an attribute it "
"won't be considered in the sealing chain. This allows one to prevent seal "
"from fixing part of the mock object. ::"
msgstr ""
"Якщо атрибуту присвоєно макет екземпляра з іменем або специфікацією, він не "
"враховуватиметься в ланцюжку запечатування. Це дозволяє запобігти фіксації "
"пломбою частини фіктивного об'єкта. ::"
