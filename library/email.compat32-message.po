# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-11 15:45+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/email.compat32-message.rst:4
msgid ""
":mod:`email.message.Message`: Representing an email message using the :data:"
"`~email.policy.compat32` API"
msgstr ""
":mod:`email.message.Message`: Представлення повідомлення електронної пошти "
"за допомогою API :data:`~email.policy.compat32`"

#: ../../library/email.compat32-message.rst:13
msgid ""
"The :class:`Message` class is very similar to the :class:`~email.message."
"EmailMessage` class, without the methods added by that class, and with the "
"default behavior of certain other methods being slightly different.  We also "
"document here some methods that, while supported by the :class:`~email."
"message.EmailMessage` class, are not recommended unless you are dealing with "
"legacy code."
msgstr ""
"Клас :class:`Message` дуже схожий на клас :class:`~email.message."
"EmailMessage`, але без методів, доданих цим класом, і з поведінкою за "
"замовчуванням деяких інших методів дещо іншою. Ми також документуємо тут "
"деякі методи, які, хоча й підтримуються класом :class:`~email.message."
"EmailMessage`, не рекомендуються, якщо ви не маєте справу зі застарілим "
"кодом."

#: ../../library/email.compat32-message.rst:20
msgid "The philosophy and structure of the two classes is otherwise the same."
msgstr "Філософія та структура двох класів є однаковими."

#: ../../library/email.compat32-message.rst:22
msgid ""
"This document describes the behavior under the default (for :class:"
"`Message`) policy :attr:`~email.policy.Compat32`.  If you are going to use "
"another policy, you should be using the :class:`~email.message.EmailMessage` "
"class instead."
msgstr ""
"Цей документ описує поведінку за умовчанням (для :class:`Message`) політики :"
"attr:`~email.policy.Compat32`. Якщо ви збираєтеся використовувати іншу "
"політику, замість неї слід використовувати клас :class:`~email.message."
"EmailMessage`."

#: ../../library/email.compat32-message.rst:26
msgid ""
"An email message consists of *headers* and a *payload*.  Headers must be :"
"rfc:`5322` style names and values, where the field name and value are "
"separated by a colon.  The colon is not part of either the field name or the "
"field value.  The payload may be a simple text message, or a binary object, "
"or a structured sequence of sub-messages each with their own set of headers "
"and their own payload.  The latter type of payload is indicated by the "
"message having a MIME type such as :mimetype:`multipart/\\*` or :mimetype:"
"`message/rfc822`."
msgstr ""
"Повідомлення електронної пошти складається з *заголовків* і *корисного "
"навантаження*. Заголовки мають бути в стилі :rfc:`5322` імен і значень, де "
"назва поля та значення розділені двокрапкою. Двокрапка не є частиною ані "
"імені поля, ані значення поля. Корисне навантаження може бути простим "
"текстовим повідомленням, або двійковим об’єктом, або структурованою "
"послідовністю підповідомлень, кожне з яких має власний набір заголовків і "
"власне корисне навантаження. Останній тип корисного навантаження вказується "
"повідомленням, що має тип MIME, наприклад :mimetype:`multipart/\\*` або :"
"mimetype:`message/rfc822`."

#: ../../library/email.compat32-message.rst:35
msgid ""
"The conceptual model provided by a :class:`Message` object is that of an "
"ordered dictionary of headers with additional methods for accessing both "
"specialized information from the headers, for accessing the payload, for "
"generating a serialized version of the message, and for recursively walking "
"over the object tree.  Note that duplicate headers are supported but special "
"methods must be used to access them."
msgstr ""
"Концептуальна модель, яку забезпечує об’єкт :class:`Message`, — це "
"впорядкований словник заголовків із додатковими методами для доступу до "
"спеціалізованої інформації із заголовків, для доступу до корисного "
"навантаження, для генерації серіалізованої версії повідомлення та для "
"рекурсивного проходячи по дереву предметів. Зауважте, що дублікати "
"заголовків підтримуються, але для доступу до них потрібно використовувати "
"спеціальні методи."

#: ../../library/email.compat32-message.rst:42
msgid ""
"The :class:`Message` pseudo-dictionary is indexed by the header names, which "
"must be ASCII values.  The values of the dictionary are strings that are "
"supposed to contain only ASCII characters; there is some special handling "
"for non-ASCII input, but it doesn't always produce the correct results.  "
"Headers are stored and returned in case-preserving form, but field names are "
"matched case-insensitively.  There may also be a single envelope header, "
"also known as the *Unix-From* header or the ``From_`` header.  The *payload* "
"is either a string or bytes, in the case of simple message objects, or a "
"list of :class:`Message` objects, for MIME container documents (e.g. :"
"mimetype:`multipart/\\*` and :mimetype:`message/rfc822`)."
msgstr ""
"Псевдословник :class:`Message` індексується іменами заголовків, які мають "
"бути значеннями ASCII. Значення словника - це рядки, які мають містити лише "
"символи ASCII; існує певна особлива обробка для вводу не-ASCII, але вона не "
"завжди дає правильні результати. Заголовки зберігаються та повертаються у "
"формі зі збереженням регістру, але імена полів зіставляються без урахування "
"регістру. Також може бути єдиний заголовок конверта, також відомий як "
"заголовок *Unix-From* або заголовок ``From_``. *Корисне навантаження* — це "
"або рядок, або байти, у випадку простих об’єктів повідомлення, або список "
"об’єктів :class:`Message` для документів-контейнерів MIME (наприклад, :"
"mimetype:`multipart/\\*` і :mimetype:`повідомлення/rfc822`)."

#: ../../library/email.compat32-message.rst:53
msgid "Here are the methods of the :class:`Message` class:"
msgstr "Ось методи класу :class:`Message`:"

#: ../../library/email.compat32-message.rst:58
msgid ""
"If *policy* is specified (it must be an instance of a :mod:`~email.policy` "
"class) use the rules it specifies to update and serialize the representation "
"of the message.  If *policy* is not set, use the :class:`compat32 <email."
"policy.Compat32>` policy, which maintains backward compatibility with the "
"Python 3.2 version of the email package.  For more information see the :mod:"
"`~email.policy` documentation."
msgstr ""
"Якщо вказано *policy* (вона має бути екземпляром класу :mod:`~email."
"policy`), використовуйте вказані в ньому правила для оновлення та "
"серіалізації представлення повідомлення. Якщо *policy* не встановлено, "
"використовуйте політику :class:`compat32 <email.policy.Compat32>`, яка "
"підтримує зворотну сумісність із версією пакета електронної пошти Python "
"3.2. Для отримання додаткової інформації дивіться документацію :mod:`~email."
"policy`."

#: ../../library/email.compat32-message.rst:65
msgid "The *policy* keyword argument was added."
msgstr "Додано аргумент ключового слова *policy*."

#: ../../library/email.compat32-message.rst:70
msgid ""
"Return the entire message flattened as a string.  When optional *unixfrom* "
"is true, the envelope header is included in the returned string. *unixfrom* "
"defaults to ``False``.  For backward compatibility reasons, *maxheaderlen* "
"defaults to ``0``, so if you want a different value you must override it "
"explicitly (the value specified for *max_line_length* in the policy will be "
"ignored by this method).  The *policy* argument may be used to override the "
"default policy obtained from the message instance. This can be used to "
"control some of the formatting produced by the method, since the specified "
"*policy* will be passed to the ``Generator``."
msgstr ""
"Повернути все повідомлення зведеним у вигляді рядка. Якщо необов’язковий "
"параметр *unixfrom* має значення true, заголовок конверта включається до "
"поверненого рядка. *unixfrom* за умовчанням має значення ``False``. З "
"міркувань зворотної сумісності *maxheaderlen* за замовчуванням має значення "
"``0``, тому, якщо ви бажаєте інше значення, ви повинні його явно змінити "
"(значення, указане для *max_line_length* у політиці, ігноруватиметься цим "
"методом). Аргумент *policy* можна використовувати для заміни політики за "
"замовчуванням, отриманої з екземпляра повідомлення. Це можна використовувати "
"для керування частиною форматування, створеного методом, оскільки вказану "
"*політику* буде передано ``генератору``."

#: ../../library/email.compat32-message.rst:80
#: ../../library/email.compat32-message.rst:122
msgid ""
"Flattening the message may trigger changes to the :class:`Message` if "
"defaults need to be filled in to complete the transformation to a string "
"(for example, MIME boundaries may be generated or modified)."
msgstr ""
"Зведення повідомлення може викликати зміни в :class:`Message`, якщо для "
"завершення перетворення в рядок необхідно вказати значення за замовчуванням "
"(наприклад, можуть бути створені або змінені межі MIME)."

#: ../../library/email.compat32-message.rst:84
msgid ""
"Note that this method is provided as a convenience and may not always format "
"the message the way you want.  For example, by default it does not do the "
"mangling of lines that begin with ``From`` that is required by the Unix mbox "
"format.  For more flexibility, instantiate a :class:`~email.generator."
"Generator` instance and use its :meth:`~email.generator.Generator.flatten` "
"method directly.  For example::"
msgstr ""
"Обратите внимание, что этот метод предоставляется для удобства и не всегда "
"может форматировать сообщение так, как вы хотите. Например, по умолчанию он "
"не выполняет искажение строк, начинающихся с ``From``, как того требует "
"формат Unix mbox. Для большей гибкости создайте экземпляр :class:`~email."
"generator.Generator` и используйте его метод :meth:`~email.generator."
"Generator.flatten` напрямую. Например::"

#: ../../library/email.compat32-message.rst:91
msgid ""
"from io import StringIO\n"
"from email.generator import Generator\n"
"fp = StringIO()\n"
"g = Generator(fp, mangle_from_=True, maxheaderlen=60)\n"
"g.flatten(msg)\n"
"text = fp.getvalue()"
msgstr ""
"from io import StringIO\n"
"from email.generator import Generator\n"
"fp = StringIO()\n"
"g = Generator(fp, mangle_from_=True, maxheaderlen=60)\n"
"g.flatten(msg)\n"
"text = fp.getvalue()"

#: ../../library/email.compat32-message.rst:98
msgid ""
"If the message object contains binary data that is not encoded according to "
"RFC standards, the non-compliant data will be replaced by unicode \"unknown "
"character\" code points.  (See also :meth:`.as_bytes` and :class:`~email."
"generator.BytesGenerator`.)"
msgstr ""
"Якщо об’єкт повідомлення містить двійкові дані, які не закодовані відповідно "
"до стандартів RFC, невідповідні дані буде замінено кодовими точками Unicode "
"\"невідомий символ\". (Див. також :meth:`.as_bytes` і :class:`~email."
"generator.BytesGenerator`.)"

#: ../../library/email.compat32-message.rst:103
msgid "the *policy* keyword argument was added."
msgstr "було додано аргумент ключового слова *policy*."

#: ../../library/email.compat32-message.rst:108
msgid ""
"Equivalent to :meth:`.as_string`.  Allows ``str(msg)`` to produce a string "
"containing the formatted message."
msgstr ""
"Эквивалент :meth:`.as_string`. Позволяет ``str(msg)`` создавать строку, "
"содержащую форматированное сообщение."

#: ../../library/email.compat32-message.rst:114
msgid ""
"Return the entire message flattened as a bytes object.  When optional "
"*unixfrom* is true, the envelope header is included in the returned string.  "
"*unixfrom* defaults to ``False``.  The *policy* argument may be used to "
"override the default policy obtained from the message instance. This can be "
"used to control some of the formatting produced by the method, since the "
"specified *policy* will be passed to the ``BytesGenerator``."
msgstr ""
"Повертає все повідомлення зведене як об’єкт bytes. Якщо необов’язковий "
"параметр *unixfrom* має значення true, заголовок конверта включається до "
"поверненого рядка. *unixfrom* за умовчанням має значення ``False``. Аргумент "
"*policy* можна використовувати для заміни політики за замовчуванням, "
"отриманої з екземпляра повідомлення. Це можна використовувати для керування "
"частиною форматування, створеного методом, оскільки вказану *політику* буде "
"передано до ``BytesGenerator``."

#: ../../library/email.compat32-message.rst:126
msgid ""
"Note that this method is provided as a convenience and may not always format "
"the message the way you want.  For example, by default it does not do the "
"mangling of lines that begin with ``From`` that is required by the Unix mbox "
"format.  For more flexibility, instantiate a :class:`~email.generator."
"BytesGenerator` instance and use its :meth:`~email.generator.BytesGenerator."
"flatten` method directly. For example::"
msgstr ""
"Обратите внимание, что этот метод предоставляется для удобства и не всегда "
"может форматировать сообщение так, как вы хотите. Например, по умолчанию он "
"не выполняет искажение строк, начинающихся с ``From``, как того требует "
"формат Unix mbox. Для большей гибкости создайте экземпляр :class:`~email."
"generator.BytesGenerator` и используйте его метод :meth:`~email.generator."
"BytesGenerator.flatten` напрямую. Например::"

#: ../../library/email.compat32-message.rst:134
msgid ""
"from io import BytesIO\n"
"from email.generator import BytesGenerator\n"
"fp = BytesIO()\n"
"g = BytesGenerator(fp, mangle_from_=True, maxheaderlen=60)\n"
"g.flatten(msg)\n"
"text = fp.getvalue()"
msgstr ""
"from io import BytesIO\n"
"from email.generator import BytesGenerator\n"
"fp = BytesIO()\n"
"g = BytesGenerator(fp, mangle_from_=True, maxheaderlen=60)\n"
"g.flatten(msg)\n"
"text = fp.getvalue()"

#: ../../library/email.compat32-message.rst:146
msgid ""
"Equivalent to :meth:`.as_bytes`.  Allows ``bytes(msg)`` to produce a bytes "
"object containing the formatted message."
msgstr ""
"Эквивалент :meth:`.as_bytes`. Позволяет ``bytes(msg)`` создавать объект "
"bytes, содержащий форматированное сообщение."

#: ../../library/email.compat32-message.rst:154
msgid ""
"Return ``True`` if the message's payload is a list of sub-\\ :class:"
"`Message` objects, otherwise return ``False``.  When :meth:`is_multipart` "
"returns ``False``, the payload should be a string object (which might be a "
"CTE encoded binary payload).  (Note that :meth:`is_multipart` returning "
"``True`` does not necessarily mean that \"msg.get_content_maintype() == "
"'multipart'\" will return the ``True``. For example, ``is_multipart`` will "
"return ``True`` when the :class:`Message` is of type ``message/rfc822``.)"
msgstr ""
"Повертає ``True``, якщо корисним навантаженням повідомлення є список sub-\\ :"
"class:`Message` об’єктів, інакше повертає ``False``. Коли :meth:"
"`is_multipart` повертає ``False``, корисним навантаженням має бути рядковий "
"об’єкт (який може бути двійковим навантаженням у кодуванні CTE). (Зауважте, "
"що :meth:`is_multipart`, що повертає ``True``, не обов’язково означає, що "
"\"msg.get_content_maintype() == 'multipart'\" поверне ``True``. Наприклад, "
"``is_multipart`` буде повертає ``True``, якщо :class:`Message` має тип "
"``message/rfc822``.)"

#: ../../library/email.compat32-message.rst:166
msgid ""
"Set the message's envelope header to *unixfrom*, which should be a string."
msgstr ""
"Встановіть заголовок конверта повідомлення на *unixfrom*, який має бути "
"рядком."

#: ../../library/email.compat32-message.rst:171
msgid ""
"Return the message's envelope header.  Defaults to ``None`` if the envelope "
"header was never set."
msgstr ""
"Повернути заголовок конверта повідомлення. За замовчуванням ``None``, якщо "
"заголовок конверта ніколи не встановлювався."

#: ../../library/email.compat32-message.rst:177
msgid ""
"Add the given *payload* to the current payload, which must be ``None`` or a "
"list of :class:`Message` objects before the call. After the call, the "
"payload will always be a list of :class:`Message` objects.  If you want to "
"set the payload to a scalar object (e.g. a string), use :meth:`set_payload` "
"instead."
msgstr ""
"Додайте вказане *корисне навантаження* до поточного корисного навантаження, "
"яке має бути ``None`` або список об’єктів :class:`Message` перед викликом. "
"Після виклику корисним навантаженням завжди буде список об’єктів :class:"
"`Message`. Якщо ви хочете встановити корисне навантаження на скалярний "
"об’єкт (наприклад, рядок), замість цього використовуйте :meth:`set_payload`."

#: ../../library/email.compat32-message.rst:183
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by :meth:`~email.message.EmailMessage."
"set_content` and the related ``make`` and ``add`` methods."
msgstr ""

#: ../../library/email.compat32-message.rst:191
msgid ""
"Return the current payload, which will be a list of :class:`Message` objects "
"when :meth:`is_multipart` is ``True``, or a string when :meth:`is_multipart` "
"is ``False``.  If the payload is a list and you mutate the list object, you "
"modify the message's payload in place."
msgstr ""
"Повертає поточне корисне навантаження, яке буде списком об’єктів :class:"
"`Message`, якщо :meth:`is_multipart` має значення ``True``, або рядок, коли :"
"meth:`is_multipart` має значення ``False``. Якщо корисним навантаженням є "
"список, і ви змінюєте об’єкт списку, ви змінюєте корисне навантаження "
"повідомлення на місці."

#: ../../library/email.compat32-message.rst:196
msgid ""
"With optional argument *i*, :meth:`get_payload` will return the *i*-th "
"element of the payload, counting from zero, if :meth:`is_multipart` is "
"``True``.  An :exc:`IndexError` will be raised if *i* is less than 0 or "
"greater than or equal to the number of items in the payload.  If the payload "
"is a string (i.e.  :meth:`is_multipart` is ``False``) and *i* is given, a :"
"exc:`TypeError` is raised."
msgstr ""
"З необов’язковим аргументом *i* :meth:`get_payload` поверне *i*-й елемент "
"корисного навантаження, починаючи з нуля, якщо :meth:`is_multipart` має "
"значення ``True``. Помилка :exc:`IndexError` буде викликана, якщо *i* менше "
"за 0 або більше або дорівнює кількості елементів у корисному навантаженні. "
"Якщо корисне навантаження є рядком (тобто :meth:`is_multipart` має значення "
"``False``) і задано *i*, виникає :exc:`TypeError`."

#: ../../library/email.compat32-message.rst:203
msgid ""
"Optional *decode* is a flag indicating whether the payload should be decoded "
"or not, according to the :mailheader:`Content-Transfer-Encoding` header. "
"When ``True`` and the message is not a multipart, the payload will be "
"decoded if this header's value is ``quoted-printable`` or ``base64``. If "
"some other encoding is used, or :mailheader:`Content-Transfer-Encoding` "
"header is missing, the payload is returned as-is (undecoded).  In all cases "
"the returned value is binary data.  If the message is a multipart and the "
"*decode* flag is ``True``, then ``None`` is returned.  If the payload is "
"base64 and it was not perfectly formed (missing padding, characters outside "
"the base64 alphabet), then an appropriate defect will be added to the "
"message's defect property (:class:`~email.errors.InvalidBase64PaddingDefect` "
"or :class:`~email.errors.InvalidBase64CharactersDefect`, respectively)."
msgstr ""
"Необов’язковий *decode* — це прапорець, який вказує, чи слід декодувати "
"корисне навантаження чи ні, відповідно до заголовка :mailheader:`Content-"
"Transfer-Encoding`. Якщо значення ``True`` і повідомлення не складається з "
"кількох частин, корисне навантаження буде декодовано, якщо значенням цього "
"заголовка є ``quoted-printable`` або ``base64``. Якщо використовується інше "
"кодування або відсутній заголовок :mailheader:`Content-Transfer-Encoding`, "
"корисне навантаження повертається як є (недекодоване). У всіх випадках "
"повертається двійкове значення. Якщо повідомлення складається з кількох "
"частин і прапорець *decode* має значення ``True``, тоді повертається "
"``None``. Якщо корисне навантаження є base64 і воно не було ідеально "
"сформоване (відсутнє заповнення, символи поза алфавітом base64), тоді до "
"властивості дефекту повідомлення буде додано відповідний дефект (:class:"
"`~email.errors.InvalidBase64PaddingDefect` або :class:`~email.errors."
"InvalidBase64CharactersDefect` відповідно)."

#: ../../library/email.compat32-message.rst:217
msgid ""
"When *decode* is ``False`` (the default) the body is returned as a string "
"without decoding the :mailheader:`Content-Transfer-Encoding`.  However, for "
"a :mailheader:`Content-Transfer-Encoding` of 8bit, an attempt is made to "
"decode the original bytes using the ``charset`` specified by the :mailheader:"
"`Content-Type` header, using the ``replace`` error handler. If no "
"``charset`` is specified, or if the ``charset`` given is not recognized by "
"the email package, the body is decoded using the default ASCII charset."
msgstr ""
"Якщо *decode* має значення ``False`` (за замовчуванням), тіло повертається "
"як рядок без декодування :mailheader:`Content-Transfer-Encoding`. Однак для :"
"mailheader:`Content-Transfer-Encoding` 8 біт робиться спроба декодувати "
"оригінальні байти за допомогою ``charset``, визначеного заголовком :"
"mailheader:`Content-Type`, використовуючи обробник помилок ``replace``. Якщо "
"``charset`` не вказано, або якщо наданий ``набір символів`` не розпізнається "
"пакетом електронної пошти, тіло декодується за допомогою набору символів "
"ASCII за замовчуванням."

#: ../../library/email.compat32-message.rst:226
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by :meth:`~email.message.EmailMessage."
"get_content` and :meth:`~email.message.EmailMessage.iter_parts`."
msgstr ""
"Esse é um método legado. Na classe :class:`~email.emailmessage.EmailMessage` "
"sua funcionalidade é substituída por :meth:`~email.message.EmailMessage."
"get_content` e :meth:`~email.message.EmailMessage.iter_parts`."

#: ../../library/email.compat32-message.rst:234
msgid ""
"Set the entire message object's payload to *payload*.  It is the client's "
"responsibility to ensure the payload invariants.  Optional *charset* sets "
"the message's default character set; see :meth:`set_charset` for details."
msgstr ""
"Встановіть корисне навантаження всього об’єкта повідомлення на *корисне "
"навантаження*. Клієнт відповідає за забезпечення інваріантів корисного "
"навантаження. Додатковий *charset* встановлює стандартний набір символів "
"повідомлення; подробиці див. :meth:`set_charset`."

#: ../../library/email.compat32-message.rst:238
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by :meth:`~email.message.EmailMessage."
"set_content`."
msgstr ""

#: ../../library/email.compat32-message.rst:245
msgid ""
"Set the character set of the payload to *charset*, which can either be a :"
"class:`~email.charset.Charset` instance (see :mod:`email.charset`), a string "
"naming a character set, or ``None``.  If it is a string, it will be "
"converted to a :class:`~email.charset.Charset` instance.  If *charset* is "
"``None``, the ``charset`` parameter will be removed from the :mailheader:"
"`Content-Type` header (the message will not be otherwise modified).  "
"Anything else will generate a :exc:`TypeError`."
msgstr ""
"Встановіть набір символів корисного навантаження на *charset*, який може "
"бути екземпляром :class:`~email.charset.Charset` (див. :mod:`email."
"charset`), рядком із назвою набору символів або ``Жодного``. Якщо це рядок, "
"його буде перетворено на екземпляр :class:`~email.charset.Charset`. Якщо "
"*charset* має значення ``None``, параметр ``charset`` буде видалено із "
"заголовка :mailheader:`Content-Type` (повідомлення не буде іншим чином "
"змінено). Усе інше створить :exc:`TypeError`."

#: ../../library/email.compat32-message.rst:253
msgid ""
"If there is no existing :mailheader:`MIME-Version` header one will be "
"added.  If there is no existing :mailheader:`Content-Type` header, one will "
"be added with a value of :mimetype:`text/plain`.  Whether the :mailheader:"
"`Content-Type` header already exists or not, its ``charset`` parameter will "
"be set to *charset.output_charset*.   If *charset.input_charset* and "
"*charset.output_charset* differ, the payload will be re-encoded to the "
"*output_charset*.  If there is no existing :mailheader:`Content-Transfer-"
"Encoding` header, then the payload will be transfer-encoded, if needed, "
"using the specified :class:`~email.charset.Charset`, and a header with the "
"appropriate value will be added.  If a :mailheader:`Content-Transfer-"
"Encoding` header already exists, the payload is assumed to already be "
"correctly encoded using that :mailheader:`Content-Transfer-Encoding` and is "
"not modified."
msgstr ""
"Якщо немає існуючого заголовка :mailheader:`MIME-Version`, буде додано один. "
"Якщо немає заголовка :mailheader:`Content-Type`, його буде додано зі "
"значенням :mimetype:`text/plain`. Незалежно від того, чи існує заголовок :"
"mailheader:`Content-Type`, його параметр ``charset`` буде встановлено на "
"*charset.output_charset*. Якщо *charset.input_charset* і *charset."
"output_charset* відрізняються, корисне навантаження буде перекодовано в "
"*output_charset*. Якщо немає існуючого заголовка :mailheader:`Content-"
"Transfer-Encoding`, то корисне навантаження буде закодовано за потреби за "
"допомогою вказаного :class:`~email.charset.Charset` і заголовка з "
"відповідним буде додано значення. Якщо заголовок :mailheader:`Content-"
"Transfer-Encoding` вже існує, вважається, що корисне навантаження вже "
"правильно закодовано за допомогою цього :mailheader:`Content-Transfer-"
"Encoding` і не змінюється."

#: ../../library/email.compat32-message.rst:267
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by the *charset* parameter of the :meth:"
"`email.emailmessage.EmailMessage.set_content` method."
msgstr ""

#: ../../library/email.compat32-message.rst:275
msgid ""
"Return the :class:`~email.charset.Charset` instance associated with the "
"message's payload."
msgstr ""
"Повертає екземпляр :class:`~email.charset.Charset`, пов’язаний із корисним "
"навантаженням повідомлення."

#: ../../library/email.compat32-message.rst:278
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class it always returns ``None``."
msgstr ""

#: ../../library/email.compat32-message.rst:283
msgid ""
"The following methods implement a mapping-like interface for accessing the "
"message's :rfc:`2822` headers.  Note that there are some semantic "
"differences between these methods and a normal mapping (i.e. dictionary) "
"interface.  For example, in a dictionary there are no duplicate keys, but "
"here there may be duplicate message headers.  Also, in dictionaries there is "
"no guaranteed order to the keys returned by :meth:`keys`, but in a :class:"
"`Message` object, headers are always returned in the order they appeared in "
"the original message, or were added to the message later.  Any header "
"deleted and then re-added are always appended to the end of the header list."
msgstr ""
"Наступні методи реалізують схожий на відображення інтерфейс для доступу до "
"заголовків повідомлення :rfc:`2822`. Зверніть увагу, що існують деякі "
"семантичні відмінності між цими методами та інтерфейсом звичайного "
"відображення (тобто словника). Наприклад, у словнику немає дублікатів "
"ключів, але тут можуть бути дублікати заголовків повідомлень. Крім того, у "
"словниках немає гарантованого порядку ключів, які повертає :meth:`keys`, але "
"в об’єкті :class:`Message` заголовки завжди повертаються в тому порядку, в "
"якому вони з’являлися у вихідному повідомленні або були додані до "
"повідомлення пізніше. Будь-який видалений і потім знову доданий заголовок "
"завжди додається в кінець списку заголовків."

#: ../../library/email.compat32-message.rst:293
msgid ""
"These semantic differences are intentional and are biased toward maximal "
"convenience."
msgstr ""
"Ці семантичні відмінності є навмисними та спрямовані на максимальну "
"зручність."

#: ../../library/email.compat32-message.rst:296
msgid ""
"Note that in all cases, any envelope header present in the message is not "
"included in the mapping interface."
msgstr ""
"Зауважте, що в усіх випадках будь-який заголовок конверта, присутній у "
"повідомленні, не включається в інтерфейс зіставлення."

#: ../../library/email.compat32-message.rst:299
msgid ""
"In a model generated from bytes, any header values that (in contravention of "
"the RFCs) contain non-ASCII bytes will, when retrieved through this "
"interface, be represented as :class:`~email.header.Header` objects with a "
"charset of ``unknown-8bit``."
msgstr ""
"В модели, сгенерированной из байтов, любые значения заголовков, которые (в "
"нарушение RFC) содержат байты, отличные от ASCII, при получении через этот "
"интерфейс будут представлены как объекты :class:`~email.header.Header` с "
"кодировкой ``неизвестный-8бит``."

#: ../../library/email.compat32-message.rst:307
msgid "Return the total number of headers, including duplicates."
msgstr "Повертає загальну кількість заголовків, включаючи дублікати."

#: ../../library/email.compat32-message.rst:312
msgid ""
"Return ``True`` if the message object has a field named *name*. Matching is "
"done case-insensitively and *name* should not include the trailing colon. "
"Used for the ``in`` operator, e.g.::"
msgstr ""
"Повертає ``True``, якщо об’єкт повідомлення має поле з назвою *name*. "
"Зіставлення виконується без урахування регістру, і *ім’я* не повинно містити "
"двокрапку в кінці. Використовується для оператора ``in``, наприклад::"

#: ../../library/email.compat32-message.rst:316
msgid ""
"if 'message-id' in myMessage:\n"
"   print('Message-ID:', myMessage['message-id'])"
msgstr ""
"if 'message-id' in myMessage:\n"
"   print('Message-ID:', myMessage['message-id'])"

#: ../../library/email.compat32-message.rst:322
msgid ""
"Return the value of the named header field.  *name* should not include the "
"colon field separator.  If the header is missing, ``None`` is returned; a :"
"exc:`KeyError` is never raised."
msgstr ""
"Повертає значення названого поля заголовка. *ім’я* не повинно включати "
"двокрапку-роздільник полів. Якщо заголовок відсутній, повертається ``None``; "
"a :exc:`KeyError` ніколи не виникає."

#: ../../library/email.compat32-message.rst:326
msgid ""
"Note that if the named field appears more than once in the message's "
"headers, exactly which of those field values will be returned is undefined.  "
"Use the :meth:`get_all` method to get the values of all the extant named "
"headers."
msgstr ""
"Зауважте, що якщо назване поле з’являється більше одного разу в заголовках "
"повідомлення, яке саме значення полів буде повернуто, не визначено. "
"Використовуйте метод :meth:`get_all`, щоб отримати значення всіх наявних "
"іменованих заголовків."

#: ../../library/email.compat32-message.rst:334
msgid ""
"Add a header to the message with field name *name* and value *val*.  The "
"field is appended to the end of the message's existing fields."
msgstr ""
"Додайте до повідомлення заголовок із назвою поля *name* і значенням *val*. "
"Поле додається в кінці існуючих полів повідомлення."

#: ../../library/email.compat32-message.rst:337
msgid ""
"Note that this does *not* overwrite or delete any existing header with the "
"same name.  If you want to ensure that the new header is the only one "
"present in the message with field name *name*, delete the field first, e.g.::"
msgstr ""
"Зауважте, що це *не* перезаписує та не видаляє будь-який існуючий заголовок "
"із такою ж назвою. Якщо ви хочете переконатися, що новий заголовок є єдиним "
"у повідомленні з назвою поля *name*, спочатку видаліть це поле, наприклад::"

#: ../../library/email.compat32-message.rst:341
msgid ""
"del msg['subject']\n"
"msg['subject'] = 'Python roolz!'"
msgstr ""
"del msg['subject']\n"
"msg['subject'] = 'Python roolz!'"

#: ../../library/email.compat32-message.rst:347
msgid ""
"Delete all occurrences of the field with name *name* from the message's "
"headers.  No exception is raised if the named field isn't present in the "
"headers."
msgstr ""
"Видалити всі входження поля з назвою *ім’я* із заголовків повідомлення. "
"Жодного винятку не створюється, якщо назване поле відсутнє в заголовках."

#: ../../library/email.compat32-message.rst:354
msgid "Return a list of all the message's header field names."
msgstr "Повертає список імен усіх полів заголовка повідомлення."

#: ../../library/email.compat32-message.rst:359
msgid "Return a list of all the message's field values."
msgstr "Повертає список усіх значень полів повідомлення."

#: ../../library/email.compat32-message.rst:364
msgid ""
"Return a list of 2-tuples containing all the message's field headers and "
"values."
msgstr ""
"Повертає список із двох кортежів, що містить усі заголовки та значення полів "
"повідомлення."

#: ../../library/email.compat32-message.rst:370
msgid ""
"Return the value of the named header field.  This is identical to :meth:"
"`~object.__getitem__` except that optional *failobj* is returned if the "
"named header is missing (defaults to ``None``)."
msgstr ""
"Верните значение именованного поля заголовка. Это идентично :meth:`~object."
"__getitem__`, за исключением того, что необязательный *failobj* "
"возвращается, если именованный заголовок отсутствует (по умолчанию ``None``)."

#: ../../library/email.compat32-message.rst:374
msgid "Here are some additional useful methods:"
msgstr "Ось кілька додаткових корисних методів:"

#: ../../library/email.compat32-message.rst:379
msgid ""
"Return a list of all the values for the field named *name*. If there are no "
"such named headers in the message, *failobj* is returned (defaults to "
"``None``)."
msgstr ""
"Повертає список усіх значень для поля з назвою *name*. Якщо в повідомленні "
"немає таких іменованих заголовків, повертається *failobj* (за замовчуванням "
"``None``)."

#: ../../library/email.compat32-message.rst:386
msgid ""
"Extended header setting.  This method is similar to :meth:`__setitem__` "
"except that additional header parameters can be provided as keyword "
"arguments.  *_name* is the header field to add and *_value* is the *primary* "
"value for the header."
msgstr ""
"Розширене налаштування заголовка. Цей метод подібний до :meth:`__setitem__` "
"за винятком того, що додаткові параметри заголовка можуть бути надані як "
"аргументи ключового слова. *_name* — це поле заголовка, яке потрібно додати, "
"а *_value* — це *основне* значення для заголовка."

#: ../../library/email.compat32-message.rst:391
msgid ""
"For each item in the keyword argument dictionary *_params*, the key is taken "
"as the parameter name, with underscores converted to dashes (since dashes "
"are illegal in Python identifiers).  Normally, the parameter will be added "
"as ``key=\"value\"`` unless the value is ``None``, in which case only the "
"key will be added.  If the value contains non-ASCII characters, it can be "
"specified as a three tuple in the format ``(CHARSET, LANGUAGE, VALUE)``, "
"where ``CHARSET`` is a string naming the charset to be used to encode the "
"value, ``LANGUAGE`` can usually be set to ``None`` or the empty string (see :"
"rfc:`2231` for other possibilities), and ``VALUE`` is the string value "
"containing non-ASCII code points.  If a three tuple is not passed and the "
"value contains non-ASCII characters, it is automatically encoded in :rfc:"
"`2231` format using a ``CHARSET`` of ``utf-8`` and a ``LANGUAGE`` of "
"``None``."
msgstr ""
"Для кожного елемента в словнику аргументів ключових слів *_params* ключ "
"береться як ім’я параметра, а символи підкреслення перетворюються на тире "
"(оскільки тире заборонені в ідентифікаторах Python). Зазвичай параметр буде "
"додано як ``key=\"value\"``, якщо значення не буде ``None``, у цьому випадку "
"буде додано лише ключ. Якщо значення містить символи, відмінні від ASCII, "
"його можна вказати як трикортеж у форматі ``(НАБІР СИМВОЛІВ, МОВА, "
"ЗНАЧЕННЯ)``, де ``НАБІР СИГНАЛОВ`` – це рядок із назвою набору символів, "
"який буде використано для кодування значення ``LANGUAGE`` зазвичай можна "
"встановити на ``None`` або порожній рядок (перегляньте :rfc:`2231` для інших "
"можливостей), а ``VALUE`` є значенням рядка, що містить кодові точки не-"
"ASCII . Якщо три кортежу не передано і значення містить символи, відмінні "
"від ASCII, воно автоматично кодується у форматі :rfc:`2231` з використанням "
"``CHARSET`` ``utf-8`` і ``LANGUAGE`` з ``Жодного``."

#: ../../library/email.compat32-message.rst:405
msgid "Here's an example::"
msgstr "Aqui está um exemplo::"

#: ../../library/email.compat32-message.rst:407
msgid "msg.add_header('Content-Disposition', 'attachment', filename='bud.gif')"
msgstr ""
"msg.add_header('Content-Disposition', 'attachment', filename='bud.gif')"

#: ../../library/email.compat32-message.rst:409
msgid "This will add a header that looks like ::"
msgstr "Це додасть заголовок, який виглядає так::"

#: ../../library/email.compat32-message.rst:411
msgid "Content-Disposition: attachment; filename=\"bud.gif\""
msgstr "Content-Disposition: attachment; filename=\"bud.gif\""

#: ../../library/email.compat32-message.rst:413
msgid "An example with non-ASCII characters::"
msgstr "Um exemplo com caracteres não-ASCII::"

#: ../../library/email.compat32-message.rst:415
msgid ""
"msg.add_header('Content-Disposition', 'attachment',\n"
"               filename=('iso-8859-1', '', 'Fußballer.ppt'))"
msgstr ""
"msg.add_header('Content-Disposition', 'attachment',\n"
"               filename=('iso-8859-1', '', 'Fußballer.ppt'))"

#: ../../library/email.compat32-message.rst:418
msgid "Which produces ::"
msgstr "Que produz ::"

#: ../../library/email.compat32-message.rst:420
msgid ""
"Content-Disposition: attachment; filename*=\"iso-8859-1''Fu%DFballer.ppt\""
msgstr ""
"Content-Disposition: attachment; filename*=\"iso-8859-1''Fu%DFballer.ppt\""

#: ../../library/email.compat32-message.rst:425
msgid ""
"Replace a header.  Replace the first header found in the message that "
"matches *_name*, retaining header order and field name case.  If no matching "
"header was found, a :exc:`KeyError` is raised."
msgstr ""
"Замінити заголовок. Замініть перший знайдений у повідомленні заголовок, який "
"відповідає *_name*, зберігаючи порядок заголовків і регістр імені поля. Якщо "
"відповідного заголовка не знайдено, виникає :exc:`KeyError`."

#: ../../library/email.compat32-message.rst:432
msgid ""
"Return the message's content type.  The returned string is coerced to lower "
"case of the form :mimetype:`maintype/subtype`.  If there was no :mailheader:"
"`Content-Type` header in the message the default type as given by :meth:"
"`get_default_type` will be returned.  Since according to :rfc:`2045`, "
"messages always have a default type, :meth:`get_content_type` will always "
"return a value."
msgstr ""
"Повернути тип вмісту повідомлення. Повернений рядок приводиться до нижнього "
"регістру у формі :mimetype:`maintype/subtype`. Якщо в повідомленні не було "
"заголовка :mailheader:`Content-Type`, буде повернено тип за замовчуванням, "
"заданий :meth:`get_default_type`. Оскільки відповідно до :rfc:`2045` "
"повідомлення завжди мають тип за замовчуванням, :meth:`get_content_type` "
"завжди повертатиме значення."

#: ../../library/email.compat32-message.rst:439
msgid ""
":rfc:`2045` defines a message's default type to be :mimetype:`text/plain` "
"unless it appears inside a :mimetype:`multipart/digest` container, in which "
"case it would be :mimetype:`message/rfc822`.  If the :mailheader:`Content-"
"Type` header has an invalid type specification, :rfc:`2045` mandates that "
"the default type be :mimetype:`text/plain`."
msgstr ""
":rfc:`2045` визначає тип повідомлення за замовчуванням як :mimetype:`text/"
"plain`, якщо воно не з’являється всередині контейнера :mimetype:`multipart/"
"digest`, у такому випадку це буде :mimetype:`message/rfc822` . Якщо "
"заголовок :mailheader:`Content-Type` має недійсну специфікацію типу, :rfc:"
"`2045` вимагає, щоб типовим типом був :mimetype:`text/plain`."

#: ../../library/email.compat32-message.rst:448
msgid ""
"Return the message's main content type.  This is the :mimetype:`maintype` "
"part of the string returned by :meth:`get_content_type`."
msgstr ""
"Повернути основний тип вмісту повідомлення. Це :mimetype:`maintype` частина "
"рядка, яку повертає :meth:`get_content_type`."

#: ../../library/email.compat32-message.rst:454
msgid ""
"Return the message's sub-content type.  This is the :mimetype:`subtype` part "
"of the string returned by :meth:`get_content_type`."
msgstr ""
"Повернути тип підвмісту повідомлення. Це :mimetype:`subtype` частина рядка, "
"яку повертає :meth:`get_content_type`."

#: ../../library/email.compat32-message.rst:460
msgid ""
"Return the default content type.  Most messages have a default content type "
"of :mimetype:`text/plain`, except for messages that are subparts of :"
"mimetype:`multipart/digest` containers.  Such subparts have a default "
"content type of :mimetype:`message/rfc822`."
msgstr ""
"Повернути типовий тип вмісту. Більшість повідомлень мають стандартний тип "
"вмісту :mimetype:`text/plain`, за винятком повідомлень, які є підчастинами "
"контейнерів :mimetype:`multipart/digest`. Такі підчастини мають типовий тип "
"вмісту :mimetype:`message/rfc822`."

#: ../../library/email.compat32-message.rst:468
msgid ""
"Set the default content type.  *ctype* should either be :mimetype:`text/"
"plain` or :mimetype:`message/rfc822`, although this is not enforced.  The "
"default content type is not stored in the :mailheader:`Content-Type` header."
msgstr ""
"Встановіть тип вмісту за замовчуванням. *ctype* має бути :mimetype:`text/"
"plain` або :mimetype:`message/rfc822`, хоча це не обов’язково. Стандартний "
"тип вмісту не зберігається в заголовку :mailheader:`Content-Type`."

#: ../../library/email.compat32-message.rst:476
msgid ""
"Return the message's :mailheader:`Content-Type` parameters, as a list. The "
"elements of the returned list are 2-tuples of key/value pairs, as split on "
"the ``'='`` sign.  The left hand side of the ``'='`` is the key, while the "
"right hand side is the value.  If there is no ``'='`` sign in the parameter "
"the value is the empty string, otherwise the value is as described in :meth:"
"`get_param` and is unquoted if optional *unquote* is ``True`` (the default)."
msgstr ""
"Повернути параметри :mailheader:`Content-Type` повідомлення у вигляді "
"списку. Елементи повернутого списку — це 2-кортежі пар ключ/значення, "
"розділені знаком ``'='``. Ліва сторона ``'='`` є ключем, а права частина - "
"значенням. Якщо в параметрі немає знака ``'='``, значенням є порожній рядок, "
"інакше значення відповідає опису в :meth:`get_param` і не береться в лапки, "
"якщо необов’язковий *unquote* має значення ``True`` ( за замовчуванням)."

#: ../../library/email.compat32-message.rst:484
msgid ""
"Optional *failobj* is the object to return if there is no :mailheader:"
"`Content-Type` header.  Optional *header* is the header to search instead "
"of :mailheader:`Content-Type`."
msgstr ""
"Необов’язковий *failobj* — це об’єкт, який повертається, якщо немає "
"заголовка :mailheader:`Content-Type`. Додатковий *header* – це заголовок для "
"пошуку замість :mailheader:`Content-Type`."

#: ../../library/email.compat32-message.rst:488
#: ../../library/email.compat32-message.rst:526
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by the *params* property of the "
"individual header objects returned by the header access methods."
msgstr ""

#: ../../library/email.compat32-message.rst:496
msgid ""
"Return the value of the :mailheader:`Content-Type` header's parameter "
"*param* as a string.  If the message has no :mailheader:`Content-Type` "
"header or if there is no such parameter, then *failobj* is returned "
"(defaults to ``None``)."
msgstr ""
"Повертає значення параметра *param* заголовка :mailheader:`Content-Type` у "
"вигляді рядка. Якщо повідомлення не має заголовка :mailheader:`Content-Type` "
"або немає такого параметра, повертається *failobj* (за замовчуванням "
"``None``)."

#: ../../library/email.compat32-message.rst:501
msgid ""
"Optional *header* if given, specifies the message header to use instead of :"
"mailheader:`Content-Type`."
msgstr ""
"Необов’язковий *заголовок*, якщо задано, визначає заголовок повідомлення, "
"який слід використовувати замість :mailheader:`Content-Type`."

#: ../../library/email.compat32-message.rst:504
msgid ""
"Parameter keys are always compared case insensitively.  The return value can "
"either be a string, or a 3-tuple if the parameter was :rfc:`2231` encoded.  "
"When it's a 3-tuple, the elements of the value are of the form ``(CHARSET, "
"LANGUAGE, VALUE)``.  Note that both ``CHARSET`` and ``LANGUAGE`` can be "
"``None``, in which case you should consider ``VALUE`` to be encoded in the "
"``us-ascii`` charset.  You can usually ignore ``LANGUAGE``."
msgstr ""
"Ключі параметрів завжди порівнюються без урахування регістру. Значення, що "
"повертається, може бути рядком або кортежем із трьох, якщо параметр було "
"закодовано :rfc:`2231`. Якщо це 3-кортеж, елементи значення мають форму "
"``(НАБІР СИМВОЛІВ, МОВА, ЗНАЧЕННЯ)``. Зауважте, що як для ``CHARSET``, так і "
"для ``LANGUAGE`` може бути ``None``, у цьому випадку вам слід вважати, що "
"``VALUE`` закодовано в ``us-ascii``. Зазвичай ви можете ігнорувати "
"``LANGUAGE``."

#: ../../library/email.compat32-message.rst:512
msgid ""
"If your application doesn't care whether the parameter was encoded as in :"
"rfc:`2231`, you can collapse the parameter value by calling :func:`email."
"utils.collapse_rfc2231_value`, passing in the return value from :meth:"
"`get_param`.  This will return a suitably decoded Unicode string when the "
"value is a tuple, or the original string unquoted if it isn't.  For example::"
msgstr ""
"Якщо вашій програмі байдуже, чи був параметр закодований як у :rfc:`2231`, "
"ви можете згорнути значення параметра, викликавши :func:`email.utils."
"collapse_rfc2231_value`, передавши значення, що повертається з :meth:"
"`get_param`. Це поверне відповідним чином декодований рядок Unicode, якщо "
"значення є кортежем, або оригінальний рядок без лапок, якщо це не так. "
"Наприклад::"

#: ../../library/email.compat32-message.rst:519
msgid ""
"rawparam = msg.get_param('foo')\n"
"param = email.utils.collapse_rfc2231_value(rawparam)"
msgstr ""
"rawparam = msg.get_param('foo')\n"
"param = email.utils.collapse_rfc2231_value(rawparam)"

#: ../../library/email.compat32-message.rst:522
msgid ""
"In any case, the parameter value (either the returned string, or the "
"``VALUE`` item in the 3-tuple) is always unquoted, unless *unquote* is set "
"to ``False``."
msgstr ""
"У будь-якому випадку значення параметра (або повернений рядок, або елемент "
"``VALUE`` у 3-кортежі) завжди не береться в лапки, якщо для *unquote* не "
"встановлено значення ``False``."

#: ../../library/email.compat32-message.rst:535
msgid ""
"Set a parameter in the :mailheader:`Content-Type` header.  If the parameter "
"already exists in the header, its value will be replaced with *value*.  If "
"the :mailheader:`Content-Type` header as not yet been defined for this "
"message, it will be set to :mimetype:`text/plain` and the new parameter "
"value will be appended as per :rfc:`2045`."
msgstr ""
"Установіть параметр у заголовку :mailheader:`Content-Type`. Якщо параметр "
"уже існує в заголовку, його значення буде замінено на *value*. Якщо "
"заголовок :mailheader:`Content-Type` ще не визначено для цього повідомлення, "
"для нього буде встановлено значення :mimetype:`text/plain`, а нове значення "
"параметра буде додано відповідно до :rfc:`2045`."

#: ../../library/email.compat32-message.rst:541
msgid ""
"Optional *header* specifies an alternative header to :mailheader:`Content-"
"Type`, and all parameters will be quoted as necessary unless optional "
"*requote* is ``False`` (the default is ``True``)."
msgstr ""
"Необов’язковий *header* визначає альтернативний заголовок :mailheader:"
"`Content-Type`, і всі параметри будуть взяті в лапки, якщо необов’язковий "
"*requote* не має значення ``False`` (за замовчуванням це ``True``)."

#: ../../library/email.compat32-message.rst:545
msgid ""
"If optional *charset* is specified, the parameter will be encoded according "
"to :rfc:`2231`. Optional *language* specifies the RFC 2231 language, "
"defaulting to the empty string.  Both *charset* and *language* should be "
"strings."
msgstr ""
"Якщо вказано необов’язковий *charset*, параметр буде закодовано відповідно "
"до :rfc:`2231`. Необов’язкова *мова* вказує мову RFC 2231, за умовчанням "
"порожній рядок. І *charset*, і *language* мають бути рядками."

#: ../../library/email.compat32-message.rst:550
msgid ""
"If *replace* is ``False`` (the default) the header is moved to the end of "
"the list of headers.  If *replace* is ``True``, the header will be updated "
"in place."
msgstr ""
"Якщо *replace* має значення ``False`` (за замовчуванням), заголовок "
"переміщується в кінець списку заголовків. Якщо *replace* має значення "
"``True``, заголовок буде оновлено на місці."

#: ../../library/email.compat32-message.rst:554
msgid "``replace`` keyword was added."
msgstr "Palavra-chave ``replace`` foi adicionada."

#: ../../library/email.compat32-message.rst:559
msgid ""
"Remove the given parameter completely from the :mailheader:`Content-Type` "
"header.  The header will be re-written in place without the parameter or its "
"value.  All values will be quoted as necessary unless *requote* is ``False`` "
"(the default is ``True``).  Optional *header* specifies an alternative to :"
"mailheader:`Content-Type`."
msgstr ""
"Повністю вилучіть вказаний параметр із заголовка :mailheader:`Content-Type`. "
"Заголовок буде перезаписано на місці без параметра чи його значення. Усі "
"значення будуть взяті в лапки за необхідності, якщо *requote* не має "
"значення ``False`` (за замовчуванням ``True``). Необов’язковий *заголовок* "
"визначає альтернативу :mailheader:`Content-Type`."

#: ../../library/email.compat32-message.rst:568
msgid ""
"Set the main type and subtype for the :mailheader:`Content-Type` header. "
"*type* must be a string in the form :mimetype:`maintype/subtype`, otherwise "
"a :exc:`ValueError` is raised."
msgstr ""
"Встановіть основний тип і підтип для заголовка :mailheader:`Content-Type`. "
"*type* має бути рядком у формі :mimetype:`maintype/subtype`, інакше виникає :"
"exc:`ValueError`."

#: ../../library/email.compat32-message.rst:572
msgid ""
"This method replaces the :mailheader:`Content-Type` header, keeping all the "
"parameters in place.  If *requote* is ``False``, this leaves the existing "
"header's quoting as is, otherwise the parameters will be quoted (the "
"default)."
msgstr ""
"Цей метод замінює заголовок :mailheader:`Content-Type`, зберігаючи всі "
"параметри на місці. Якщо *requote* має значення ``False``, це залишає "
"існуючі лапки заголовка як є, інакше параметри будуть взяті в лапки (за "
"замовчуванням)."

#: ../../library/email.compat32-message.rst:577
msgid ""
"An alternative header can be specified in the *header* argument. When the :"
"mailheader:`Content-Type` header is set a :mailheader:`MIME-Version` header "
"is also added."
msgstr ""
"Альтернативний заголовок можна вказати в аргументі *header*. Коли "
"встановлено заголовок :mailheader:`Content-Type`, також додається заголовок :"
"mailheader:`MIME-Version`."

#: ../../library/email.compat32-message.rst:581
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by the ``make_`` and ``add_`` methods."
msgstr ""

#: ../../library/email.compat32-message.rst:588
msgid ""
"Return the value of the ``filename`` parameter of the :mailheader:`Content-"
"Disposition` header of the message.  If the header does not have a "
"``filename`` parameter, this method falls back to looking for the ``name`` "
"parameter on the :mailheader:`Content-Type` header.  If neither is found, or "
"the header is missing, then *failobj* is returned. The returned string will "
"always be unquoted as per :func:`email.utils.unquote`."
msgstr ""
"Повертає значення параметра ``filename`` заголовка :mailheader:`Content-"
"Disposition` повідомлення. Якщо заголовок не має параметра ``filename``, цей "
"метод повертається до пошуку параметра ``name`` у заголовку :mailheader:"
"`Content-Type`. Якщо нічого не знайдено або відсутній заголовок, "
"повертається *failobj*. Повернений рядок завжди буде без лапок відповідно "
"до :func:`email.utils.unquote`."

#: ../../library/email.compat32-message.rst:599
msgid ""
"Return the value of the ``boundary`` parameter of the :mailheader:`Content-"
"Type` header of the message, or *failobj* if either the header is missing, "
"or has no ``boundary`` parameter.  The returned string will always be "
"unquoted as per :func:`email.utils.unquote`."
msgstr ""
"Повертає значення параметра ``boundary`` заголовка :mailheader:`Content-"
"Type` повідомлення або *failobj*, якщо заголовок відсутній або не має "
"параметра ``boundary``. Повернений рядок завжди буде без лапок відповідно "
"до :func:`email.utils.unquote`."

#: ../../library/email.compat32-message.rst:607
msgid ""
"Set the ``boundary`` parameter of the :mailheader:`Content-Type` header to "
"*boundary*.  :meth:`set_boundary` will always quote *boundary* if "
"necessary.  A :exc:`~email.errors.HeaderParseError` is raised if the message "
"object has no :mailheader:`Content-Type` header."
msgstr ""
"Установіть для параметра ``boundary`` заголовка :mailheader:`Content-Type` "
"значення *boundary*. :meth:`set_boundary` завжди братиме *boundary* у лапки, "
"якщо необхідно. Помилка :exc:`~email.errors.HeaderParseError` виникає, якщо "
"об’єкт повідомлення не має заголовка :mailheader:`Content-Type`."

#: ../../library/email.compat32-message.rst:612
msgid ""
"Note that using this method is subtly different than deleting the old :"
"mailheader:`Content-Type` header and adding a new one with the new boundary "
"via :meth:`add_header`, because :meth:`set_boundary` preserves the order of "
"the :mailheader:`Content-Type` header in the list of headers. However, it "
"does *not* preserve any continuation lines which may have been present in "
"the original :mailheader:`Content-Type` header."
msgstr ""
"Зауважте, що використання цього методу дещо відрізняється від видалення "
"старого заголовка :mailheader:`Content-Type` і додавання нового з новою "
"межею за допомогою :meth:`add_header`, оскільки :meth:`set_boundary` "
"зберігає порядок заголовок :mailheader:`Content-Type` у списку заголовків. "
"Однак він *не* зберігає будь-які рядки продовження, які могли бути "
"присутніми в оригінальному заголовку :mailheader:`Content-Type`."

#: ../../library/email.compat32-message.rst:622
msgid ""
"Return the ``charset`` parameter of the :mailheader:`Content-Type` header, "
"coerced to lower case.  If there is no :mailheader:`Content-Type` header, or "
"if that header has no ``charset`` parameter, *failobj* is returned."
msgstr ""
"Повертає параметр ``charset`` заголовка :mailheader:`Content-Type` у "
"нижньому регістрі. Якщо немає заголовка :mailheader:`Content-Type` або цей "
"заголовок не має параметра ``charset``, повертається *failobj*."

#: ../../library/email.compat32-message.rst:626
msgid ""
"Note that this method differs from :meth:`get_charset` which returns the :"
"class:`~email.charset.Charset` instance for the default encoding of the "
"message body."
msgstr ""
"Зауважте, що цей метод відрізняється від :meth:`get_charset`, який повертає "
"екземпляр :class:`~email.charset.Charset` для стандартного кодування тіла "
"повідомлення."

#: ../../library/email.compat32-message.rst:632
msgid ""
"Return a list containing the character set names in the message.  If the "
"message is a :mimetype:`multipart`, then the list will contain one element "
"for each subpart in the payload, otherwise, it will be a list of length 1."
msgstr ""
"Повернути список із назвами наборів символів у повідомленні. Якщо "
"повідомлення є :mimetype:`multipart`, тоді список міститиме один елемент для "
"кожної підчастини в корисному навантаженні, інакше це буде список довжиною 1."

#: ../../library/email.compat32-message.rst:636
msgid ""
"Each item in the list will be a string which is the value of the ``charset`` "
"parameter in the :mailheader:`Content-Type` header for the represented "
"subpart.  However, if the subpart has no :mailheader:`Content-Type` header, "
"no ``charset`` parameter, or is not of the :mimetype:`text` main MIME type, "
"then that item in the returned list will be *failobj*."
msgstr ""
"Кожен елемент у списку буде рядком, який є значенням параметра ``charset`` у "
"заголовку :mailheader:`Content-Type` для представленої підчастини. Однак, "
"якщо підчастина не має заголовка :mailheader:`Content-Type`, параметра "
"``charset`` або не належить до основного типу MIME :mimetype:`text`, тоді "
"цей елемент у списку, що повертається, буде *failobj*."

#: ../../library/email.compat32-message.rst:646
msgid ""
"Return the lowercased value (without parameters) of the message's :"
"mailheader:`Content-Disposition` header if it has one, or ``None``.  The "
"possible values for this method are *inline*, *attachment* or ``None`` if "
"the message follows :rfc:`2183`."
msgstr ""
"Повертає значення в нижньому регістрі (без параметрів) заголовка "
"повідомлення :mailheader:`Content-Disposition`, якщо воно є, або ``None``. "
"Можливі значення для цього методу: *inline*, *attachment* або ``None``, якщо "
"повідомлення слідує за :rfc:`2183`."

#: ../../library/email.compat32-message.rst:655
msgid ""
"The :meth:`walk` method is an all-purpose generator which can be used to "
"iterate over all the parts and subparts of a message object tree, in depth-"
"first traversal order.  You will typically use :meth:`walk` as the iterator "
"in a ``for`` loop; each iteration returns the next subpart."
msgstr ""
"Метод :meth:`walk` — це універсальний генератор, який можна використовувати "
"для перебору всіх частин і підчастин дерева об’єктів повідомлення в порядку "
"проходження спочатку в глибину. Ви зазвичай використовуєте :meth:`walk` як "
"ітератор у циклі ``for``; кожна ітерація повертає наступну підчастину."

#: ../../library/email.compat32-message.rst:660
msgid ""
"Here's an example that prints the MIME type of every part of a multipart "
"message structure:"
msgstr ""
"Ось приклад, який друкує тип MIME кожної частини структури повідомлення, що "
"складається з кількох частин:"

#: ../../library/email.compat32-message.rst:674
msgid ""
">>> for part in msg.walk():\n"
"...     print(part.get_content_type())\n"
"multipart/report\n"
"text/plain\n"
"message/delivery-status\n"
"text/plain\n"
"text/plain\n"
"message/rfc822\n"
"text/plain"
msgstr ""
">>> for part in msg.walk():\n"
"...     print(part.get_content_type())\n"
"multipart/report\n"
"text/plain\n"
"message/delivery-status\n"
"text/plain\n"
"text/plain\n"
"message/rfc822\n"
"text/plain"

#: ../../library/email.compat32-message.rst:686
msgid ""
"``walk`` iterates over the subparts of any part where :meth:`is_multipart` "
"returns ``True``, even though ``msg.get_content_maintype() == 'multipart'`` "
"may return ``False``.  We can see this in our example by making use of the "
"``_structure`` debug helper function:"
msgstr ""
"``walk`` повторює підчастини будь-якої частини, де :meth:`is_multipart` "
"повертає ``True``, навіть якщо ``msg.get_content_maintype() == 'multipart'`` "
"може повернути ``False``. Ми можемо побачити це в нашому прикладі, "
"використовуючи допоміжну функцію налагодження ``_structure``:"

#: ../../library/email.compat32-message.rst:692
msgid ""
">>> for part in msg.walk():\n"
"...     print(part.get_content_maintype() == 'multipart',\n"
"...           part.is_multipart())\n"
"True True\n"
"False False\n"
"False True\n"
"False False\n"
"False False\n"
"False True\n"
"False False\n"
">>> _structure(msg)\n"
"multipart/report\n"
"    text/plain\n"
"    message/delivery-status\n"
"        text/plain\n"
"        text/plain\n"
"    message/rfc822\n"
"        text/plain"
msgstr ""
">>> for part in msg.walk():\n"
"...     print(part.get_content_maintype() == 'multipart',\n"
"...           part.is_multipart())\n"
"True True\n"
"False False\n"
"False True\n"
"False False\n"
"False False\n"
"False True\n"
"False False\n"
">>> _structure(msg)\n"
"multipart/report\n"
"    text/plain\n"
"    message/delivery-status\n"
"        text/plain\n"
"        text/plain\n"
"    message/rfc822\n"
"        text/plain"

#: ../../library/email.compat32-message.rst:713
msgid ""
"Here the ``message`` parts are not ``multiparts``, but they do contain "
"subparts. ``is_multipart()`` returns ``True`` and ``walk`` descends into the "
"subparts."
msgstr ""
"Тут частини ``message`` не є ``multiparts``, але вони містять підчастини. "
"``is_multipart()`` повертає ``True`` і ``walk`` спускається до підчастин."

#: ../../library/email.compat32-message.rst:718
msgid ""
":class:`Message` objects can also optionally contain two instance "
"attributes, which can be used when generating the plain text of a MIME "
"message."
msgstr ""
"Об’єкти :class:`Message` також можуть додатково містити два атрибути "
"екземпляра, які можна використовувати під час генерації простого тексту "
"повідомлення MIME."

#: ../../library/email.compat32-message.rst:724
msgid ""
"The format of a MIME document allows for some text between the blank line "
"following the headers, and the first multipart boundary string. Normally, "
"this text is never visible in a MIME-aware mail reader because it falls "
"outside the standard MIME armor.  However, when viewing the raw text of the "
"message, or when viewing the message in a non-MIME aware reader, this text "
"can become visible."
msgstr ""
"Формат документа MIME допускає деякий текст між порожнім рядком після "
"заголовків і першим обмежувальним рядком із складених частин. Зазвичай цей "
"текст ніколи не відображається в програмі читання пошти з підтримкою MIME, "
"оскільки він виходить за межі стандартної броні MIME. Однак під час "
"перегляду необробленого тексту повідомлення або під час перегляду "
"повідомлення в програмі читання, яка не підтримує MIME, цей текст може стати "
"видимим."

#: ../../library/email.compat32-message.rst:731
msgid ""
"The *preamble* attribute contains this leading extra-armor text for MIME "
"documents.  When the :class:`~email.parser.Parser` discovers some text after "
"the headers but before the first boundary string, it assigns this text to "
"the message's *preamble* attribute.  When the :class:`~email.generator."
"Generator` is writing out the plain text representation of a MIME message, "
"and it finds the message has a *preamble* attribute, it will write this text "
"in the area between the headers and the first boundary.  See :mod:`email."
"parser` and :mod:`email.generator` for details."
msgstr ""
"Атрибут *преамбула* містить цей провідний додатковий текст для документів "
"MIME. Коли :class:`~email.parser.Parser` виявляє текст після заголовків, але "
"перед першим обмежувальним рядком, він призначає цей текст атрибуту "
"*преамбула* повідомлення. Коли :class:`~email.generator.Generator` записує "
"звичайне текстове представлення повідомлення MIME і виявляє, що повідомлення "
"має атрибут *преамбула*, він записує цей текст у область між заголовками та "
"перша межа. Перегляньте :mod:`email.parser` і :mod:`email.generator` для "
"деталей."

#: ../../library/email.compat32-message.rst:741
msgid ""
"Note that if the message object has no preamble, the *preamble* attribute "
"will be ``None``."
msgstr ""
"Зауважте, що якщо об’єкт повідомлення не має преамбули, атрибут *preamble* "
"матиме значення ``None``."

#: ../../library/email.compat32-message.rst:747
msgid ""
"The *epilogue* attribute acts the same way as the *preamble* attribute, "
"except that it contains text that appears between the last boundary and the "
"end of the message."
msgstr ""
"Атрибут *epilogue* діє так само, як і атрибут *preamble*, за винятком того, "
"що він містить текст, який з’являється між останньою межею та кінцем "
"повідомлення."

#: ../../library/email.compat32-message.rst:751
msgid ""
"You do not need to set the epilogue to the empty string in order for the :"
"class:`~email.generator.Generator` to print a newline at the end of the file."
msgstr ""
"Вам не потрібно встановлювати епілог порожнім рядком, щоб :class:`~email."
"generator.Generator` друкував новий рядок у кінці файлу."

#: ../../library/email.compat32-message.rst:758
msgid ""
"The *defects* attribute contains a list of all the problems found when "
"parsing this message.  See :mod:`email.errors` for a detailed description of "
"the possible parsing defects."
msgstr ""
"Атрибут *defects* містить список усіх проблем, виявлених під час аналізу "
"цього повідомлення. Перегляньте :mod:`email.errors` для детального опису "
"можливих дефектів аналізу."
