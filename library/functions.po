# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Risaffi <erikrisaffi@gmail.com>, 2018
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2020-01-23 07:57+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/"
"python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../library/functions.rst:5 ../../library/functions.rst:11
msgid "Built-in Functions"
msgstr "Funções Built-in"

#: ../../library/functions.rst:7
msgid ""
"The Python interpreter has a number of functions built into it that are "
"always available.  They are listed here in alphabetical order."
msgstr ""

#: ../../library/functions.rst:13
msgid ":func:`abs`"
msgstr ":func:`abs`"

#: ../../library/functions.rst:13
msgid ":func:`divmod`"
msgstr ":func:`divmod`"

#: ../../library/functions.rst:13
msgid ":func:`input`"
msgstr ":func:`input`"

#: ../../library/functions.rst:13
msgid ":func:`open`"
msgstr ":func:`open`"

#: ../../library/functions.rst:13
msgid ":func:`staticmethod`"
msgstr ":func:`staticmethod`"

#: ../../library/functions.rst:14
msgid ":func:`all`"
msgstr ":func:`all`"

#: ../../library/functions.rst:14
msgid ":func:`enumerate`"
msgstr ":func:`enumerate`"

#: ../../library/functions.rst:14
msgid ":func:`int`"
msgstr ":func:`int`"

#: ../../library/functions.rst:14
msgid ":func:`ord`"
msgstr ":func:`ord`"

#: ../../library/functions.rst:14
msgid ":func:`str`"
msgstr ""

#: ../../library/functions.rst:15
msgid ":func:`any`"
msgstr ":func:`any`"

#: ../../library/functions.rst:15
msgid ":func:`eval`"
msgstr ":func:`eval`"

#: ../../library/functions.rst:15
msgid ":func:`isinstance`"
msgstr ":func:`isinstance`"

#: ../../library/functions.rst:15
msgid ":func:`pow`"
msgstr ":func:`pow`"

#: ../../library/functions.rst:15
msgid ":func:`sum`"
msgstr ":func:`sum`"

#: ../../library/functions.rst:16
msgid ":func:`basestring`"
msgstr ""

#: ../../library/functions.rst:16
msgid ":func:`execfile`"
msgstr ""

#: ../../library/functions.rst:16
msgid ":func:`issubclass`"
msgstr ":func:`issubclass`"

#: ../../library/functions.rst:16
msgid ":func:`print`"
msgstr ":func:`print`"

#: ../../library/functions.rst:16
msgid ":func:`super`"
msgstr ":func:`super`"

#: ../../library/functions.rst:17
msgid ":func:`bin`"
msgstr ":func:`bin`"

#: ../../library/functions.rst:17
msgid ":func:`file`"
msgstr ""

#: ../../library/functions.rst:17
msgid ":func:`iter`"
msgstr ":func:`iter`"

#: ../../library/functions.rst:17
msgid ":func:`property`"
msgstr ":func:`property`"

#: ../../library/functions.rst:17
msgid ":func:`tuple`"
msgstr ""

#: ../../library/functions.rst:18
msgid ":func:`bool`"
msgstr ":func:`bool`"

#: ../../library/functions.rst:18
msgid ":func:`filter`"
msgstr ":func:`filter`"

#: ../../library/functions.rst:18
msgid ":func:`len`"
msgstr ":func:`len`"

#: ../../library/functions.rst:18
msgid ":func:`range`"
msgstr ""

#: ../../library/functions.rst:18
msgid ":func:`type`"
msgstr ":func:`type`"

#: ../../library/functions.rst:19
msgid ":func:`bytearray`"
msgstr ":func:`bytearray`"

#: ../../library/functions.rst:19
msgid ":func:`float`"
msgstr ":func:`float`"

#: ../../library/functions.rst:19
msgid "|func-list|_"
msgstr "|func-list|_"

#: ../../library/functions.rst:19
msgid ":func:`raw_input`"
msgstr ""

#: ../../library/functions.rst:19
msgid ":func:`unichr`"
msgstr ""

#: ../../library/functions.rst:20
msgid ":func:`callable`"
msgstr ":func:`callable`"

#: ../../library/functions.rst:20
msgid ":func:`format`"
msgstr ":func:`format`"

#: ../../library/functions.rst:20
msgid ":func:`locals`"
msgstr ":func:`locals`"

#: ../../library/functions.rst:20
msgid ":func:`reduce`"
msgstr ""

#: ../../library/functions.rst:20
msgid ":func:`unicode`"
msgstr ""

#: ../../library/functions.rst:21
msgid ":func:`chr`"
msgstr ":func:`chr`"

#: ../../library/functions.rst:21
msgid "|func-frozenset|_"
msgstr "|func-frozenset|_"

#: ../../library/functions.rst:21
msgid ":func:`long`"
msgstr ""

#: ../../library/functions.rst:21
msgid ":func:`reload`"
msgstr ""

#: ../../library/functions.rst:21
msgid ":func:`vars`"
msgstr ":func:`vars`"

#: ../../library/functions.rst:22
msgid ":func:`classmethod`"
msgstr ":func:`classmethod`"

#: ../../library/functions.rst:22
msgid ":func:`getattr`"
msgstr ":func:`getattr`"

#: ../../library/functions.rst:22
msgid ":func:`map`"
msgstr ":func:`map`"

#: ../../library/functions.rst:22
msgid "|func-repr|_"
msgstr ""

#: ../../library/functions.rst:22
msgid ":func:`xrange`"
msgstr ""

#: ../../library/functions.rst:23
msgid ":func:`cmp`"
msgstr ""

#: ../../library/functions.rst:23
msgid ":func:`globals`"
msgstr ":func:`globals`"

#: ../../library/functions.rst:23
msgid ":func:`max`"
msgstr ":func:`max`"

#: ../../library/functions.rst:23
msgid ":func:`reversed`"
msgstr ":func:`reversed`"

#: ../../library/functions.rst:23
msgid ":func:`zip`"
msgstr ":func:`zip`"

#: ../../library/functions.rst:24
msgid ":func:`compile`"
msgstr ":func:`compile`"

#: ../../library/functions.rst:24
msgid ":func:`hasattr`"
msgstr ":func:`hasattr`"

#: ../../library/functions.rst:24
msgid "|func-memoryview|_"
msgstr "|func-memoryview|_"

#: ../../library/functions.rst:24
msgid ":func:`round`"
msgstr ":func:`round`"

#: ../../library/functions.rst:24
msgid ":func:`__import__`"
msgstr ":func:`__import__`"

#: ../../library/functions.rst:25
msgid ":func:`complex`"
msgstr ":func:`complex`"

#: ../../library/functions.rst:25
msgid ":func:`hash`"
msgstr ":func:`hash`"

#: ../../library/functions.rst:25
msgid ":func:`min`"
msgstr ":func:`min`"

#: ../../library/functions.rst:25
msgid "|func-set|_"
msgstr "|func-set|_"

#: ../../library/functions.rst:26
msgid ":func:`delattr`"
msgstr ":func:`delattr`"

#: ../../library/functions.rst:26
msgid ":func:`help`"
msgstr ":func:`help`"

#: ../../library/functions.rst:26
msgid ":func:`next`"
msgstr ":func:`next`"

#: ../../library/functions.rst:26
msgid ":func:`setattr`"
msgstr ":func:`setattr`"

#: ../../library/functions.rst:27
msgid "|func-dict|_"
msgstr "|func-dict|_"

#: ../../library/functions.rst:27
msgid ":func:`hex`"
msgstr ":func:`hex`"

#: ../../library/functions.rst:27
msgid ":func:`object`"
msgstr ":func:`object`"

#: ../../library/functions.rst:27
msgid ":func:`slice`"
msgstr ":func:`slice`"

#: ../../library/functions.rst:28
msgid ":func:`dir`"
msgstr ":func:`dir`"

#: ../../library/functions.rst:28
msgid ":func:`id`"
msgstr ":func:`id`"

#: ../../library/functions.rst:28
msgid ":func:`oct`"
msgstr ":func:`oct`"

#: ../../library/functions.rst:28
msgid ":func:`sorted`"
msgstr ":func:`sorted`"

#: ../../library/functions.rst:31
msgid ""
"In addition, there are other four built-in functions that are no longer "
"considered essential: :func:`apply`, :func:`buffer`, :func:`coerce`, and :"
"func:`intern`.  They are documented in the :ref:`non-essential-built-in-"
"funcs` section."
msgstr ""

#: ../../library/functions.rst:49
msgid ""
"Return the absolute value of a number.  The argument may be a plain or long "
"integer or a floating point number.  If the argument is a complex number, "
"its magnitude is returned."
msgstr ""

#: ../../library/functions.rst:56
msgid ""
"Return ``True`` if all elements of the *iterable* are true (or if the "
"iterable is empty).  Equivalent to::"
msgstr ""
"Retorna ``True`` se todos os elementos de *iterable* são verdadeiros (ou se "
"*iterable* estiver vazio). Equivalente a:"

#: ../../library/functions.rst:70
msgid ""
"Return ``True`` if any element of the *iterable* is true.  If the iterable "
"is empty, return ``False``.  Equivalent to::"
msgstr ""
"Retorna ``True`` se qualquer elemento de *iterable* for verdadeiros. Se "
"*iterable* estiver vazio, retorna ``False``.  Equivalente a::"

#: ../../library/functions.rst:84
msgid ""
"This abstract type is the superclass for :class:`str` and :class:`unicode`. "
"It cannot be called or instantiated, but it can be used to test whether an "
"object is an instance of :class:`str` or :class:`unicode`. ``isinstance(obj, "
"basestring)`` is equivalent to ``isinstance(obj, (str, unicode))``."
msgstr ""

#: ../../library/functions.rst:94
msgid ""
"Convert an integer number to a binary string. The result is a valid Python "
"expression.  If *x* is not a Python :class:`int` object, it has to define "
"an :meth:`__index__` method that returns an integer."
msgstr ""
"Converte um número inteiro para uma string binária. O resultado é uma "
"expressão Python válida. Se *x* não é um objeto Python  :class:`int`, ele "
"tem que definir um método :meth:`__index__` que retorna um inteiro."

#: ../../library/functions.rst:103
msgid ""
"Return a Boolean value, i.e. one of ``True`` or ``False``.  *x* is converted "
"using the standard truth testing procedure.  If *x* is false or omitted, "
"this returns :const:`False`; otherwise it returns :const:`True`. :class:"
"`bool` is also a class, which is a subclass of :class:`int`. Class :class:"
"`bool` cannot be subclassed further.  Its only instances are :const:`False` "
"and :const:`True`."
msgstr ""

#: ../../library/functions.rst:114
msgid "If no argument is given, this function returns :const:`False`."
msgstr ""

#: ../../library/functions.rst:120
msgid ""
"Return a new array of bytes.  The :class:`bytearray` class is a mutable "
"sequence of integers in the range 0 <= x < 256.  It has most of the usual "
"methods of mutable sequences, described in :ref:`typesseq-mutable`, as well "
"as most methods that the :class:`str` type has, see :ref:`string-methods`."
msgstr ""

#: ../../library/functions.rst:125
msgid ""
"The optional *source* parameter can be used to initialize the array in a few "
"different ways:"
msgstr ""
"O parãmetro opcional *source* pode ser usado para inicializar o vetor de "
"algumas maneiras diferentes: "

#: ../../library/functions.rst:128
msgid ""
"If it is *unicode*, you must also give the *encoding* (and optionally, "
"*errors*) parameters; :func:`bytearray` then converts the unicode to bytes "
"using :meth:`unicode.encode`."
msgstr ""

#: ../../library/functions.rst:132
msgid ""
"If it is an *integer*, the array will have that size and will be initialized "
"with null bytes."
msgstr ""
"Se é um *integer*, o array terá esse tamanho e será inicializado com bytes "
"nulos."

#: ../../library/functions.rst:135
msgid ""
"If it is an object conforming to the *buffer* interface, a read-only buffer "
"of the object will be used to initialize the bytes array."
msgstr ""
"Se é um objeto em conformidade com a interface *buffer*, um buffer de objeto "
"somente leitura será usado para inicializar o vetor de bytes."

#: ../../library/functions.rst:138
msgid ""
"If it is an *iterable*, it must be an iterable of integers in the range ``0 "
"<= x < 256``, which are used as the initial contents of the array."
msgstr ""
"Se é um *iterável*, deve ser um iterável de inteiros no intervalo ``0 <= x < "
"256``, que serão usados como o conteúdo inicial do vetor."

#: ../../library/functions.rst:141
msgid "Without an argument, an array of size 0 is created."
msgstr "Sem argumentos, um vetor de tamanho 0 é criado."

#: ../../library/functions.rst:148
msgid ""
"Return :const:`True` if the *object* argument appears callable, :const:"
"`False` if not.  If this returns true, it is still possible that a call "
"fails, but if it is false, calling *object* will never succeed.  Note that "
"classes are callable (calling a class returns a new instance); class "
"instances are callable if they have a :meth:`__call__` method."
msgstr ""

#: ../../library/functions.rst:158
msgid ""
"Return a string of one character whose ASCII code is the integer *i*.  For "
"example, ``chr(97)`` returns the string ``'a'``. This is the inverse of :"
"func:`ord`.  The argument must be in the range [0..255], inclusive; :exc:"
"`ValueError` will be raised if *i* is outside that range. See also :func:"
"`unichr`."
msgstr ""

#: ../../library/functions.rst:167
msgid "Return a class method for *function*."
msgstr ""

#: ../../library/functions.rst:169
msgid ""
"A class method receives the class as implicit first argument, just like an "
"instance method receives the instance. To declare a class method, use this "
"idiom::"
msgstr ""
"Um método de classe recebe a classe como primeiro argumento implícito, "
"exatamente como uma método de instância recebe a instância. Para declarar um "
"método de classe, faça dessa forma::"

#: ../../library/functions.rst:178
msgid ""
"The ``@classmethod`` form is a function :term:`decorator` -- see :ref:"
"`function` for details."
msgstr ""
"O termo ``@classmethod`` é uma função :term:`decorator<decoradora>` -- veja :"
"ref:`function` para detalhes."

#: ../../library/functions.rst:181
msgid ""
"A class method can be called either on the class (such as ``C.f()``) or on "
"an instance (such as ``C().f()``).  The instance is ignored except for its "
"class. If a class method is called for a derived class, the derived class "
"object is passed as the implied first argument."
msgstr ""
"Um método de classe pode ser chamado tanto da classe (como em ``C.f()``) "
"quanto da instância (como em ``C().f()``).  A instância é ignorada, exceto "
"por sua classe.  Se um método de classe é chamado por uma classe derivada, o "
"objeto da classe derivada é passado como primeiro argumento implícito."

#: ../../library/functions.rst:186
msgid ""
"Class methods are different than C++ or Java static methods. If you want "
"those, see :func:`staticmethod`."
msgstr ""
"Métodos de classe são diferentes de métodos estáticos em C++ ou Java. Se "
"você quer saber desses, veja :func:`staticmethod`."

#: ../../library/functions.rst:189
msgid "For more information on class methods, see :ref:`types`."
msgstr "Para mais informações sobre métodos de classe, veja :ref:`types`."

#: ../../library/functions.rst:193 ../../library/functions.rst:1368
msgid "Function decorator syntax added."
msgstr ""

#: ../../library/functions.rst:199
msgid ""
"Compare the two objects *x* and *y* and return an integer according to the "
"outcome.  The return value is negative if ``x < y``, zero if ``x == y`` and "
"strictly positive if ``x > y``."
msgstr ""

#: ../../library/functions.rst:206
msgid ""
"Compile the *source* into a code or AST object.  Code objects can be "
"executed by an :keyword:`exec` statement or evaluated by a call to :func:"
"`eval`. *source* can either be a Unicode string, a *Latin-1* encoded string "
"or an AST object. Refer to the :mod:`ast` module documentation for "
"information on how to work with AST objects."
msgstr ""

#: ../../library/functions.rst:213
msgid ""
"The *filename* argument should give the file from which the code was read; "
"pass some recognizable value if it wasn't read from a file (``'<string>'`` "
"is commonly used)."
msgstr ""
"O argumento *filename* deve ser o arquivo de onde o código será lido; passe "
"algum valor reconhecível se isso não foi lido de um arquivo (``'<string>'`` "
"é comumente usado)."

#: ../../library/functions.rst:217
msgid ""
"The *mode* argument specifies what kind of code must be compiled; it can be "
"``'exec'`` if *source* consists of a sequence of statements, ``'eval'`` if "
"it consists of a single expression, or ``'single'`` if it consists of a "
"single interactive statement (in the latter case, expression statements that "
"evaluate to something other than ``None`` will be printed)."
msgstr ""
"O argumento *mode* especifica qual o tipo de código deve ser compilado; pode "
"ser ``'exec'`` se *source* consiste de uma sequência de instruções, "
"``'eval'`` se consiste de uma única expressão, ou ``'single'`` se consiste "
"de uma única instrução interativa (neste último caso, instruções que são "
"avaliadas para alguma coisa diferente de ``None`` serão exibidas)."

#: ../../library/functions.rst:223
msgid ""
"The optional arguments *flags* and *dont_inherit* control which future "
"statements (see :pep:`236`) affect the compilation of *source*.  If neither "
"is present (or both are zero) the code is compiled with those future "
"statements that are in effect in the code that is calling :func:`compile`.  "
"If the *flags* argument is given and *dont_inherit* is not (or is zero) then "
"the future statements specified by the *flags* argument are used in addition "
"to those that would be used anyway. If *dont_inherit* is a non-zero integer "
"then the *flags* argument is it -- the future statements in effect around "
"the call to compile are ignored."
msgstr ""

#: ../../library/functions.rst:233
msgid ""
"Future statements are specified by bits which can be bitwise ORed together "
"to specify multiple statements.  The bitfield required to specify a given "
"feature can be found as the :attr:`~__future__._Feature.compiler_flag` "
"attribute on the :class:`~__future__._Feature` instance in the :mod:"
"`__future__` module."
msgstr ""
"Instruções futuras são especificadas por bits, assim pode ocorrer uma "
"operação *OU* bit a bit para especificar múltiplas instruções.  O "
"sinalizador necessário para especificar um dado recurso pode ser encontrada "
"no atributo  :attr:`~__future__._Feature.compiler_flag` na instância :class:"
"`~__future__._Feature` do módulo :mod:`__future__` module."

#: ../../library/functions.rst:238
msgid ""
"This function raises :exc:`SyntaxError` if the compiled source is invalid, "
"and :exc:`TypeError` if the source contains null bytes."
msgstr ""

#: ../../library/functions.rst:241
msgid ""
"If you want to parse Python code into its AST representation, see :func:`ast."
"parse`."
msgstr ""
"Se você quer analisar código Python em sua representação AST, veja :func:"
"`ast.parse`."

#: ../../library/functions.rst:246
msgid ""
"When compiling a string with multi-line code in ``'single'`` or ``'eval'`` "
"mode, input must be terminated by at least one newline character.  This is "
"to facilitate detection of incomplete and complete statements in the :mod:"
"`code` module."
msgstr ""
"Quando compilindo uma string com código multi-linhas em modo ``'single'`` ou "
"``'eval'``, entrada deve ser terminada por ao menos um caractere de nova "
"linhas. Isso é para facilitar a detecção de instruções completas e "
"incompletas no módulo :mod:`code`."

#: ../../library/functions.rst:253
msgid ""
"It is possible to crash the Python interpreter with a sufficiently large/"
"complex string when compiling to an AST object due to stack depth "
"limitations in Python's AST compiler."
msgstr ""
"É possível quebrar o interpretador Python com uma string suficiente grande/"
"complexa quando compilando para uma objeto AST, devido limitações do tamanho "
"da pilha no compilador AST do Python."

#: ../../library/functions.rst:257
msgid "The *flags* and *dont_inherit* arguments were added."
msgstr ""

#: ../../library/functions.rst:260
msgid "Support for compiling AST objects."
msgstr ""

#: ../../library/functions.rst:263
msgid ""
"Allowed use of Windows and Mac newlines.  Also input in ``'exec'`` mode does "
"not have to end in a newline anymore."
msgstr ""

#: ../../library/functions.rst:270
msgid ""
"Return a complex number with the value *real* + *imag*\\*1j or convert a "
"string or number to a complex number.  If the first parameter is a string, "
"it will be interpreted as a complex number and the function must be called "
"without a second parameter.  The second parameter can never be a string. "
"Each argument may be any numeric type (including complex). If *imag* is "
"omitted, it defaults to zero and the function serves as a numeric conversion "
"function like :func:`int`, :func:`long` and :func:`float`.  If both "
"arguments are omitted, returns ``0j``."
msgstr ""

#: ../../library/functions.rst:280
msgid ""
"When converting from a string, the string must not contain whitespace around "
"the central ``+`` or ``-`` operator.  For example, ``complex('1+2j')`` is "
"fine, but ``complex('1 + 2j')`` raises :exc:`ValueError`."
msgstr ""
"Quando convertendo a partir de uma string, a string não pode conter espaços "
"em branco em torno  ``+`` central ou do  operador ``-``.  Por exemplo, "
"``complex('1+2j')`` funciona, mas ``complex('1 + 2j')`` levanta :exc:"
"`ValueError`."

#: ../../library/functions.rst:285
msgid "The complex type is described in :ref:`typesnumeric`."
msgstr "O tipo complexo está descrito em :ref:`typesnumeric`."

#: ../../library/functions.rst:290
msgid ""
"This is a relative of :func:`setattr`.  The arguments are an object and a "
"string.  The string must be the name of one of the object's attributes.  The "
"function deletes the named attribute, provided the object allows it.  For "
"example, ``delattr(x, 'foobar')`` is equivalent to ``del x.foobar``."
msgstr ""
"Essa função está relacionada com :func:`setattr`.  Os argumentos são um "
"objeto e uma string. A string deve ser o nome de um dos atributos do objeto. "
"A função remove o atributo indicado, desde que o objeto permita. Por "
"exemplo, ``delattr(x, 'foobar')`` é equivalente a ``del x.foobar``."

#: ../../library/functions.rst:302
msgid ""
"Create a new dictionary.  The :class:`dict` object is the dictionary class. "
"See :class:`dict` and :ref:`typesmapping` for documentation about this class."
msgstr ""
"Cria um novo dicionário. O objeto :class:`dict` é a classe do dicionário. "
"Veja :class:`dict` e :ref:`typesmapping` para documentação sobre esta classe."

#: ../../library/functions.rst:305
msgid ""
"For other containers see the built-in :class:`list`, :class:`set`, and :"
"class:`tuple` classes, as well as the :mod:`collections` module."
msgstr ""
"Para outros contêineres, consulte as classes internas :class:`list`, :class:"
"`set` e :class:`tuple`, bem como o módulo :mod:`collections`."

#: ../../library/functions.rst:311
msgid ""
"Without arguments, return the list of names in the current local scope.  "
"With an argument, attempt to return a list of valid attributes for that "
"object."
msgstr ""
"Sem argumentos, retorne a lista de nomes no escopo local atual. Com um "
"argumento, tente retornar uma lista de atributos válidos para esse objeto."

#: ../../library/functions.rst:314
msgid ""
"If the object has a method named :meth:`__dir__`, this method will be called "
"and must return the list of attributes. This allows objects that implement a "
"custom :func:`__getattr__` or :func:`__getattribute__` function to customize "
"the way :func:`dir` reports their attributes."
msgstr ""
"Se o objeto tiver um método chamado :meth:`__dir__`, esse método será "
"chamado e deve retornar a lista de atributos. Isso permite que objetos que "
"implementam uma função personalizada :func:`__getattr__` ou :func:"
"`__getattribute__` personalizem a maneira :func:`dir` relata seus atributos."

#: ../../library/functions.rst:319
msgid ""
"If the object does not provide :meth:`__dir__`, the function tries its best "
"to gather information from the object's :attr:`~object.__dict__` attribute, "
"if defined, and from its type object.  The resulting list is not necessarily "
"complete, and may be inaccurate when the object has a custom :func:"
"`__getattr__`."
msgstr ""
"Se o objeto não fornecer :meth:`__dir__`, a função tentará o melhor possível "
"para coletar informações do atributo :attr:`~object.__dict__` do objeto, se "
"definido, e do seu objeto de tipo. A lista resultante não está "
"necessariamente completa e pode ser imprecisa quando o objeto possui um :"
"func:`__getattr__` personalizado."

#: ../../library/functions.rst:324
msgid ""
"The default :func:`dir` mechanism behaves differently with different types "
"of objects, as it attempts to produce the most relevant, rather than "
"complete, information:"
msgstr ""
"O mecanismo padrão :func:`dir` se comporta de maneira diferente com "
"diferentes tipos de objetos, pois tenta produzir as informações mais "
"relevantes e não completas:"

#: ../../library/functions.rst:328
msgid ""
"If the object is a module object, the list contains the names of the "
"module's attributes."
msgstr ""
"Se o objeto for um objeto de módulo, a lista conterá os nomes dos atributos "
"do módulo."

#: ../../library/functions.rst:331
msgid ""
"If the object is a type or class object, the list contains the names of its "
"attributes, and recursively of the attributes of its bases."
msgstr ""
"Se o objeto for um objeto de tipo ou classe, a lista conterá os nomes de "
"seus atributos e recursivamente os atributos de suas bases."

#: ../../library/functions.rst:334
msgid ""
"Otherwise, the list contains the object's attributes' names, the names of "
"its class's attributes, and recursively of the attributes of its class's "
"base classes."
msgstr ""
"Caso contrário, a lista conterá os nomes dos atributos do objeto, os nomes "
"dos atributos da classe e recursivamente os atributos das classes base da "
"classe."

#: ../../library/functions.rst:338
msgid "The resulting list is sorted alphabetically.  For example:"
msgstr "A lista resultante é alfabeticamente ordenada. Por exemplo:"

#: ../../library/functions.rst:356
msgid ""
"Because :func:`dir` is supplied primarily as a convenience for use at an "
"interactive prompt, it tries to supply an interesting set of names more than "
"it tries to supply a rigorously or consistently defined set of names, and "
"its detailed behavior may change across releases.  For example, metaclass "
"attributes are not in the result list when the argument is a class."
msgstr ""
"Como :func:`dir` é fornecido principalmente como uma conveniência para uso "
"em um prompt interativo, ele tenta fornecer um conjunto interessante de "
"nomes mais do que tenta fornecer um conjunto de nomes definido de forma "
"rigorosa ou consistente, e seu comportamento detalhado pode mudar nos "
"lançamentos. Por exemplo, os atributos de metaclasse não estão na lista de "
"resultados quando o argumento é uma classe."

#: ../../library/functions.rst:365
msgid ""
"Take two (non complex) numbers as arguments and return a pair of numbers "
"consisting of their quotient and remainder when using long division.  With "
"mixed operand types, the rules for binary arithmetic operators apply.  For "
"plain and long integers, the result is the same as ``(a // b, a % b)``. For "
"floating point numbers the result is ``(q, a % b)``, where *q* is usually "
"``math.floor(a / b)`` but may be 1 less than that.  In any case ``q * b + a "
"% b`` is very close to *a*, if ``a % b`` is non-zero it has the same sign as "
"*b*, and ``0 <= abs(a % b) < abs(b)``."
msgstr ""

#: ../../library/functions.rst:374
msgid "Using :func:`divmod` with complex numbers is deprecated."
msgstr ""

#: ../../library/functions.rst:380
msgid ""
"Return an enumerate object. *sequence* must be a sequence, an :term:"
"`iterator`, or some other object which supports iteration.  The :meth:`!"
"next` method of the iterator returned by :func:`enumerate` returns a tuple "
"containing a count (from *start* which defaults to 0) and the values "
"obtained from iterating over *sequence*::"
msgstr ""

#: ../../library/functions.rst:392
msgid "Equivalent to::"
msgstr "Equivalente a::"

#: ../../library/functions.rst:401
msgid "The *start* parameter was added."
msgstr ""

#: ../../library/functions.rst:407
msgid ""
"The arguments are a Unicode or *Latin-1* encoded string and optional globals "
"and locals.  If provided, *globals* must be a dictionary. If provided, "
"*locals* can be any mapping object."
msgstr ""

#: ../../library/functions.rst:411 ../../library/functions.rst:459
msgid "formerly *locals* was required to be a dictionary."
msgstr ""

#: ../../library/functions.rst:414
msgid ""
"The *expression* argument is parsed and evaluated as a Python expression "
"(technically speaking, a condition list) using the *globals* and *locals* "
"dictionaries as global and local namespace.  If the *globals* dictionary is "
"present and lacks '__builtins__', the current globals are copied into "
"*globals* before *expression* is parsed.  This means that *expression* "
"normally has full access to the standard :mod:`__builtin__` module and "
"restricted environments are propagated.  If the *locals* dictionary is "
"omitted it defaults to the *globals* dictionary.  If both dictionaries are "
"omitted, the expression is executed in the environment where :func:`eval` is "
"called.  The return value is the result of the evaluated expression. Syntax "
"errors are reported as exceptions.  Example:"
msgstr ""

#: ../../library/functions.rst:429
msgid ""
"This function can also be used to execute arbitrary code objects (such as "
"those created by :func:`compile`).  In this case pass a code object instead "
"of a string.  If the code object has been compiled with ``'exec'`` as the "
"*mode* argument, :func:`eval`\\'s return value will be ``None``."
msgstr ""
"Esta função também pode ser usada para executar objetos de código "
"arbitrários (como os criados por :func:`compile`). Nesse caso, passe um "
"objeto de código em vez de uma string. Se o objeto de código foi compilado "
"com ``'exec'`` como o argumento *mode*, o valor de retorno de :func:`eval` "
"será` `None``."

#: ../../library/functions.rst:434
msgid ""
"Hints: dynamic execution of statements is supported by the :keyword:`exec` "
"statement.  Execution of statements from a file is supported by the :func:"
"`execfile` function.  The :func:`globals` and :func:`locals` functions "
"returns the current global and local dictionary, respectively, which may be "
"useful to pass around for use by :func:`eval` or :func:`execfile`."
msgstr ""

#: ../../library/functions.rst:440
msgid ""
"See :func:`ast.literal_eval` for a function that can safely evaluate strings "
"with expressions containing only literals."
msgstr ""
"Veja :func:`ast.literal_eval` para uma função que pode avaliar com segurança "
"strings com expressões contendo apenas literais."

#: ../../library/functions.rst:446
msgid ""
"This function is similar to the :keyword:`exec` statement, but parses a file "
"instead of a string.  It is different from the :keyword:`import` statement "
"in that it does not use the module administration --- it reads the file "
"unconditionally and does not create a new module. [#]_"
msgstr ""

#: ../../library/functions.rst:451
msgid ""
"The arguments are a file name and two optional dictionaries.  The file is "
"parsed and evaluated as a sequence of Python statements (similarly to a "
"module) using the *globals* and *locals* dictionaries as global and local "
"namespace. If provided, *locals* can be any mapping object.  Remember that "
"at module level, globals and locals are the same dictionary. If two separate "
"objects are passed as *globals* and *locals*, the code will be executed as "
"if it were embedded in a class definition."
msgstr ""

#: ../../library/functions.rst:462
msgid ""
"If the *locals* dictionary is omitted it defaults to the *globals* "
"dictionary. If both dictionaries are omitted, the expression is executed in "
"the environment where :func:`execfile` is called.  The return value is "
"``None``."
msgstr ""

#: ../../library/functions.rst:468
msgid ""
"The default *locals* act as described for function :func:`locals` below: "
"modifications to the default *locals* dictionary should not be attempted.  "
"Pass an explicit *locals* dictionary if you need to see effects of the code "
"on *locals* after function :func:`execfile` returns.  :func:`execfile` "
"cannot be used reliably to modify a function's locals."
msgstr ""

#: ../../library/functions.rst:477
msgid ""
"Constructor function for the :class:`file` type, described further in "
"section :ref:`bltin-file-objects`.  The constructor's arguments are the same "
"as those of the :func:`open` built-in function described below."
msgstr ""

#: ../../library/functions.rst:481
msgid ""
"When opening a file, it's preferable to use :func:`open` instead of  "
"invoking this constructor directly.  :class:`file` is more suited to type "
"testing (for example, writing ``isinstance(f, file)``)."
msgstr ""

#: ../../library/functions.rst:490
msgid ""
"Construct a list from those elements of *iterable* for which *function* "
"returns true.  *iterable* may be either a sequence, a container which "
"supports iteration, or an iterator.  If *iterable* is a string or a tuple, "
"the result also has that type; otherwise it is always a list.  If *function* "
"is ``None``, the identity function is assumed, that is, all elements of "
"*iterable* that are false are removed."
msgstr ""

#: ../../library/functions.rst:497
msgid ""
"Note that ``filter(function, iterable)`` is equivalent to ``[item for item "
"in iterable if function(item)]`` if function is not ``None`` and ``[item for "
"item in iterable if item]`` if function is ``None``."
msgstr ""

#: ../../library/functions.rst:501
msgid ""
"See :func:`itertools.ifilter` and :func:`itertools.ifilterfalse` for "
"iterator versions of this function, including a variation that filters for "
"elements where the *function* returns false."
msgstr ""

#: ../../library/functions.rst:508
msgid "Return a floating point number constructed from a number or string *x*."
msgstr ""
"Retorna um número de ponto flutuante construído a partir de um número ou "
"string * x *."

#: ../../library/functions.rst:510
msgid ""
"If the argument is a string, it must contain a possibly signed decimal or "
"floating point number, possibly embedded in whitespace. The argument may "
"also be [+|-]nan or [+|-]inf. Otherwise, the argument may be a plain or long "
"integer or a floating point number, and a floating point number with the "
"same value (within Python's floating point precision) is returned.  If no "
"argument is given, returns ``0.0``."
msgstr ""

#: ../../library/functions.rst:524
msgid ""
"When passing in a string, values for NaN and Infinity may be returned, "
"depending on the underlying C library.  Float accepts the strings nan, inf "
"and -inf for NaN and positive or negative infinity. The case and a leading + "
"are ignored as well as a leading - is ignored for NaN. Float always "
"represents NaN and infinity as nan, inf or -inf."
msgstr ""

#: ../../library/functions.rst:530
msgid "The float type is described in :ref:`typesnumeric`."
msgstr "O tipo float é descrito em :ref:`typesnumeric`."

#: ../../library/functions.rst:539
msgid ""
"Convert a *value* to a \"formatted\" representation, as controlled by "
"*format_spec*.  The interpretation of *format_spec* will depend on the type "
"of the *value* argument, however there is a standard formatting syntax that "
"is used by most built-in types: :ref:`formatspec`."
msgstr ""
"Converte um valor *value* em uma representação \"formatada\", como "
"controlado por *format_spec*. A interpretação de *format_spec* dependerá do "
"tipo do argumento *value*, no entanto, há uma sintaxe de formatação padrão "
"usada pela maioria dos tipos embutidos: :ref:`formspecpec`."

#: ../../library/functions.rst:546
msgid ""
"``format(value, format_spec)`` merely calls ``value."
"__format__(format_spec)``."
msgstr ""

#: ../../library/functions.rst:556
msgid ""
"Return a new :class:`frozenset` object, optionally with elements taken from "
"*iterable*.  ``frozenset`` is a built-in class.  See :class:`frozenset` and :"
"ref:`types-set` for documentation about this class."
msgstr ""
"Devolve um novo objeto :class:`frozenset`, opcionalmente com elementos "
"obtidos de *iterable*.  ``frozenset`` é uma classe embutida.  Veja :class:"
"`frozenset` e :ref:`types-set` para documentação sobre essas classes."

#: ../../library/functions.rst:560
msgid ""
"For other containers see the built-in :class:`set`, :class:`list`, :class:"
"`tuple`, and :class:`dict` classes, as well as the :mod:`collections` module."
msgstr ""
"Para outros containers veja as classes embutidas :class:`set`, :class:"
"`list`, :class:`tuple`, e :class:`dict`, bem como o módulo :mod:"
"`collections`."

#: ../../library/functions.rst:569
msgid ""
"Return the value of the named attribute of *object*.  *name* must be a "
"string. If the string is the name of one of the object's attributes, the "
"result is the value of that attribute.  For example, ``getattr(x, "
"'foobar')`` is equivalent to ``x.foobar``.  If the named attribute does not "
"exist, *default* is returned if provided, otherwise :exc:`AttributeError` is "
"raised."
msgstr ""
"Devolve o valor do atributo *name* de *object*.  *name* deve ser uma string. "
"Se a string é o nome de um dos atributos do objeto, o resultado é o valor de "
"tal atributo.  Por exempleo, ``getattr(x, 'foobar')`` é equivalente a ``x."
"foobar``.  Se o atributo não existir, *default* é devolvido se tiver sido "
"fornecido, caso contrário é levantada a exceção :exc:`AttributeError`."

#: ../../library/functions.rst:578
msgid ""
"Return a dictionary representing the current global symbol table. This is "
"always the dictionary of the current module (inside a function or method, "
"this is the module where it is defined, not the module from which it is "
"called)."
msgstr ""
"Devolve um dicionário representando a tabela de símbolos global atual. É "
"sempre o dicionário do módulo atual (dentro de uma função ou método, é o "
"módulo onde está definido, não o módulo do qual é chamado)."

#: ../../library/functions.rst:585
msgid ""
"The arguments are an object and a string.  The result is ``True`` if the "
"string is the name of one of the object's attributes, ``False`` if not. "
"(This is implemented by calling ``getattr(object, name)`` and seeing whether "
"it raises an exception or not.)"
msgstr ""

#: ../../library/functions.rst:593
msgid ""
"Return the hash value of the object (if it has one).  Hash values are "
"integers. They are used to quickly compare dictionary keys during a "
"dictionary lookup. Numeric values that compare equal have the same hash "
"value (even if they are of different types, as is the case for 1 and 1.0)."
msgstr ""

#: ../../library/functions.rst:601
msgid ""
"Invoke the built-in help system.  (This function is intended for interactive "
"use.)  If no argument is given, the interactive help system starts on the "
"interpreter console.  If the argument is a string, then the string is looked "
"up as the name of a module, function, class, method, keyword, or "
"documentation topic, and a help page is printed on the console.  If the "
"argument is any other kind of object, a help page on the object is generated."
msgstr ""
"Invoca o sistema de ajuda embutido. (Esta função é destinada para uso "
"interativo.) Se nenhum argumento é passado, o sistema interativo de ajuda "
"inicia no interpretador do console. Se o argumento é uma string, então a "
"string é pesquisada como o nome de um módulo, função, classe, metódo, "
"palavra-chave, ou tópico de documentação, e a página de ajuda é exibida no "
"console. Se o argumento é qualquer outro tipo de objeto, uma página de ajuda "
"para o objeto é gerada."

#: ../../library/functions.rst:608
msgid ""
"This function is added to the built-in namespace by the :mod:`site` module."
msgstr ""
"Esta função é adicionada ao espaço de nomes embutido pelo módulo :mod:`site`."

#: ../../library/functions.rst:615
msgid ""
"Convert an integer number (of any size) to a lowercase hexadecimal string "
"prefixed with \"0x\", for example:"
msgstr ""

#: ../../library/functions.rst:625
msgid ""
"If x is not a Python :class:`int` or :class:`long` object, it has to define "
"a __hex__() method that returns a string."
msgstr ""

#: ../../library/functions.rst:628
msgid ""
"See also :func:`int` for converting a hexadecimal string to an integer using "
"a base of 16."
msgstr ""
"Veja também :func:`int` para converter uma string hexadecimal para um "
"inteiro usando a base 16."

#: ../../library/functions.rst:633
msgid ""
"To obtain a hexadecimal string representation for a float, use the :meth:"
"`float.hex` method."
msgstr ""
"Para obter uma string hexadecimal de um ponto flutuante, use o método :meth:"
"`float.hex`."

#: ../../library/functions.rst:636 ../../library/functions.rst:877
msgid "Formerly only returned an unsigned literal."
msgstr ""

#: ../../library/functions.rst:642
msgid ""
"Return the \"identity\" of an object.  This is an integer (or long integer) "
"which is guaranteed to be unique and constant for this object during its "
"lifetime. Two objects with non-overlapping lifetimes may have the same :func:"
"`id` value."
msgstr ""

#: ../../library/functions.rst:652
msgid "Equivalent to ``eval(raw_input(prompt))``."
msgstr ""

#: ../../library/functions.rst:654
msgid ""
"This function does not catch user errors. If the input is not syntactically "
"valid, a :exc:`SyntaxError` will be raised. Other exceptions may be raised "
"if there is an error during evaluation."
msgstr ""

#: ../../library/functions.rst:658
msgid ""
"If the :mod:`readline` module was loaded, then :func:`input` will use it to "
"provide elaborate line editing and history features."
msgstr ""
"Se o módulo :mod:`readline` foi carregado, então :func:`input` usará ele "
"para prover edição de linhas elaboradas e funcionalidades de histórico."

#: ../../library/functions.rst:661
msgid ""
"Consider using the :func:`raw_input` function for general input from users."
msgstr ""

#: ../../library/functions.rst:667
msgid ""
"Return an integer object constructed from a number or string *x*, or return "
"``0`` if no arguments are given.  If *x* is a number, it can be a plain "
"integer, a long integer, or a floating point number.  If *x* is floating "
"point, the conversion truncates towards zero.  If the argument is outside "
"the integer range, the function returns a long object instead."
msgstr ""

#: ../../library/functions.rst:673
msgid ""
"If *x* is not a number or if *base* is given, then *x* must be a string or "
"Unicode object representing an :ref:`integer literal <integers>` in radix "
"*base*.  Optionally, the literal can be preceded by ``+`` or ``-`` (with no "
"space in between) and surrounded by whitespace.  A base-n literal consists "
"of the digits 0 to n-1, with ``a`` to ``z`` (or ``A`` to ``Z``) having "
"values 10 to 35.  The default *base* is 10. The allowed values are 0 and "
"2--36. Base-2, -8, and -16 literals can be optionally prefixed with ``0b``/"
"``0B``, ``0o``/``0O``/``0``, or ``0x``/``0X``, as with integer literals in "
"code. Base 0 means to interpret the string exactly as an integer literal, so "
"that the actual base is 2, 8, 10, or 16."
msgstr ""

#: ../../library/functions.rst:685
msgid "The integer type is described in :ref:`typesnumeric`."
msgstr "O tipo inteiro é descrito em :ref:`typesnumeric`."

#: ../../library/functions.rst:690
msgid ""
"Return true if the *object* argument is an instance of the *classinfo* "
"argument, or of a (direct, indirect or :term:`virtual <abstract base "
"class>`) subclass thereof.  Also return true if *classinfo* is a type object "
"(new-style class) and *object* is an object of that type or of a (direct, "
"indirect or :term:`virtual <abstract base class>`) subclass thereof.  If "
"*object* is not a class instance or an object of the given type, the "
"function always returns false. If *classinfo* is a tuple of class or type "
"objects (or recursively, other such tuples), return true if *object* is an "
"instance of any of the classes or types.  If *classinfo* is not a class, "
"type, or tuple of classes, types, and such tuples, a :exc:`TypeError` "
"exception is raised."
msgstr ""

#: ../../library/functions.rst:702 ../../library/functions.rst:714
msgid "Support for a tuple of type information was added."
msgstr ""

#: ../../library/functions.rst:708
msgid ""
"Return true if *class* is a subclass (direct, indirect or :term:`virtual "
"<abstract base class>`) of *classinfo*.  A class is considered a subclass of "
"itself. *classinfo* may be a tuple of class objects, in which case every "
"entry in *classinfo* will be checked. In any other case, a :exc:`TypeError` "
"exception is raised."
msgstr ""

#: ../../library/functions.rst:720
msgid ""
"Return an :term:`iterator` object.  The first argument is interpreted very "
"differently depending on the presence of the second argument. Without a "
"second argument, *o* must be a collection object which supports the "
"iteration protocol (the :meth:`__iter__` method), or it must support the "
"sequence protocol (the :meth:`__getitem__` method with integer arguments "
"starting at ``0``).  If it does not support either of those protocols, :exc:"
"`TypeError` is raised. If the second argument, *sentinel*, is given, then "
"*o* must be a callable object.  The iterator created in this case will call "
"*o* with no arguments for each call to its :meth:`~iterator.next` method; if "
"the value returned is equal to *sentinel*, :exc:`StopIteration` will be "
"raised, otherwise the value will be returned."
msgstr ""

#: ../../library/functions.rst:731
msgid ""
"One useful application of the second form of :func:`iter` is to read lines "
"of a file until a certain line is reached.  The following example reads a "
"file until the :meth:`~io.TextIOBase.readline` method returns an empty "
"string::"
msgstr ""

#: ../../library/functions.rst:744
msgid ""
"Return the length (the number of items) of an object.  The argument may be a "
"sequence (such as a string, bytes, tuple, list, or range) or a collection "
"(such as a dictionary, set, or frozen set)."
msgstr ""
"Retorna o comprimento (o número de itens) de um objeto. O argumento pode ser "
"uma sequência (tal como uma string, bytes, tupla, lista, ou range) ou uma "
"coleção (tal como um dicionário, conjunto, ou conjunto imutável)."

#: ../../library/functions.rst:753
msgid ""
"Return a list whose items are the same and in the same order as *iterable*'s "
"items.  *iterable* may be either a sequence, a container that supports "
"iteration, or an iterator object.  If *iterable* is already a list, a copy "
"is made and returned, similar to ``iterable[:]``.  For instance, "
"``list('abc')`` returns ``['a', 'b', 'c']`` and ``list( (1, 2, 3) )`` "
"returns ``[1, 2, 3]``.  If no argument is given, returns a new empty list, "
"``[]``."
msgstr ""

#: ../../library/functions.rst:760
msgid ""
":class:`list` is a mutable sequence type, as documented in :ref:`typesseq`. "
"For other containers see the built in :class:`dict`, :class:`set`, and :"
"class:`tuple` classes, and the :mod:`collections` module."
msgstr ""

#: ../../library/functions.rst:767
msgid ""
"Update and return a dictionary representing the current local symbol table. "
"Free variables are returned by :func:`locals` when it is called in function "
"blocks, but not in class blocks."
msgstr ""

#: ../../library/functions.rst:773
msgid ""
"The contents of this dictionary should not be modified; changes may not "
"affect the values of local and free variables used by the interpreter."
msgstr ""
"O conteúdo deste dicionário não deve ser modificado; As alterações podem não "
"afetar os valores das variáveis ​​locais e livres usadas pelo intérprete."

#: ../../library/functions.rst:780
msgid ""
"Return a long integer object constructed from a string or number *x*. If the "
"argument is a string, it must contain a possibly signed number of arbitrary "
"size, possibly embedded in whitespace. The *base* argument is interpreted in "
"the same way as for :func:`int`, and may only be given when *x* is a string. "
"Otherwise, the argument may be a plain or long integer or a floating point "
"number, and a long integer with the same value is returned.    Conversion of "
"floating point numbers to integers truncates (towards zero).  If no "
"arguments are given, returns ``0L``."
msgstr ""

#: ../../library/functions.rst:789
msgid "The long type is described in :ref:`typesnumeric`."
msgstr ""

#: ../../library/functions.rst:794
msgid ""
"Apply *function* to every item of *iterable* and return a list of the "
"results. If additional *iterable* arguments are passed, *function* must take "
"that many arguments and is applied to the items from all iterables in "
"parallel.  If one iterable is shorter than another it is assumed to be "
"extended with ``None`` items.  If *function* is ``None``, the identity "
"function is assumed; if there are multiple arguments, :func:`map` returns a "
"list consisting of tuples containing the corresponding items from all "
"iterables (a kind of transpose operation).  The *iterable* arguments may be "
"a sequence  or any iterable object; the result is always a list."
msgstr ""

#: ../../library/functions.rst:808
msgid ""
"Return the largest item in an iterable or the largest of two or more "
"arguments."
msgstr ""
"Retorna o maior item em um iterável ou o maior de dois ou mais argumentos."

#: ../../library/functions.rst:811
msgid ""
"If one positional argument is provided, *iterable* must be a non-empty "
"iterable (such as a non-empty string, tuple or list).  The largest item in "
"the iterable is returned.  If two or more positional arguments are provided, "
"the largest of the positional arguments is returned."
msgstr ""

#: ../../library/functions.rst:816
msgid ""
"The optional *key* argument specifies a one-argument ordering function like "
"that used for :meth:`list.sort`.  The *key* argument, if supplied, must be "
"in keyword form (for example, ``max(a,b,c,key=func)``)."
msgstr ""

#: ../../library/functions.rst:820 ../../library/functions.rst:846
msgid "Added support for the optional *key* argument."
msgstr ""

#: ../../library/functions.rst:827
msgid ""
"Return a \"memory view\" object created from the given argument.  See :ref:"
"`typememoryview` for more information."
msgstr ""
"Retorna um objeto de \"visão da memória\" criado a partir do argumento "
"fornecido. Veja :ref:`typememoryview` para mais informações."

#: ../../library/functions.rst:834
msgid ""
"Return the smallest item in an iterable or the smallest of two or more "
"arguments."
msgstr ""
"Retorna o menor item de um iterável ou o menor de dois ou mais argumentos."

#: ../../library/functions.rst:837
msgid ""
"If one positional argument is provided, *iterable* must be a non-empty "
"iterable (such as a non-empty string, tuple or list).  The smallest item in "
"the iterable is returned.  If two or more positional arguments are provided, "
"the smallest of the positional arguments is returned."
msgstr ""

#: ../../library/functions.rst:842
msgid ""
"The optional *key* argument specifies a one-argument ordering function like "
"that used for :meth:`list.sort`.  The *key* argument, if supplied, must be "
"in keyword form (for example, ``min(a,b,c,key=func)``)."
msgstr ""

#: ../../library/functions.rst:852
msgid ""
"Retrieve the next item from the *iterator* by calling its :meth:`~iterator."
"next` method.  If *default* is given, it is returned if the iterator is "
"exhausted, otherwise :exc:`StopIteration` is raised."
msgstr ""

#: ../../library/functions.rst:861
msgid ""
"Return a new featureless object.  :class:`object` is a base for all new "
"style classes.  It has the methods that are common to all instances of new "
"style classes."
msgstr ""

#: ../../library/functions.rst:867
msgid ""
"This function does not accept any arguments. Formerly, it accepted arguments "
"but ignored them."
msgstr ""

#: ../../library/functions.rst:874
msgid ""
"Convert an integer number (of any size) to an octal string.  The result is a "
"valid Python expression."
msgstr ""

#: ../../library/functions.rst:883
msgid ""
"Open a file, returning an object of the :class:`file` type described in "
"section :ref:`bltin-file-objects`.  If the file cannot be opened, :exc:"
"`IOError` is raised.  When opening a file, it's preferable to use :func:"
"`open` instead of invoking the :class:`file` constructor directly."
msgstr ""

#: ../../library/functions.rst:888
msgid ""
"The first two arguments are the same as for ``stdio``'s :c:func:`fopen`: "
"*name* is the file name to be opened, and *mode* is a string indicating how "
"the file is to be opened."
msgstr ""

#: ../../library/functions.rst:892
msgid ""
"The most commonly-used values of *mode* are ``'r'`` for reading, ``'w'`` for "
"writing (truncating the file if it already exists), and ``'a'`` for "
"appending (which on *some* Unix systems means that *all* writes append to "
"the end of the file regardless of the current seek position).  If *mode* is "
"omitted, it defaults to ``'r'``.  The default is to use text mode, which may "
"convert ``'\\n'`` characters to a platform-specific representation on "
"writing and back on reading.  Thus, when opening a binary file, you should "
"append ``'b'`` to the *mode* value to open the file in binary mode, which "
"will improve portability.  (Appending ``'b'`` is useful even on systems that "
"don't treat binary and text files differently, where it serves as "
"documentation.)  See below for more possible values of *mode*."
msgstr ""

#: ../../library/functions.rst:910
msgid ""
"The optional *buffering* argument specifies the file's desired buffer size: "
"0 means unbuffered, 1 means line buffered, any other positive value means "
"use a buffer of (approximately) that size (in bytes).  A negative "
"*buffering* means to use the system default, which is usually line buffered "
"for tty devices and fully buffered for other files.  If omitted, the system "
"default is used. [#]_"
msgstr ""

#: ../../library/functions.rst:916
msgid ""
"Modes ``'r+'``, ``'w+'`` and ``'a+'`` open the file for updating (reading "
"and writing); note that ``'w+'`` truncates the file.  Append ``'b'`` to the "
"mode to open the file in binary mode, on systems that differentiate between "
"binary and text files; on systems that don't have this distinction, adding "
"the ``'b'`` has no effect."
msgstr ""

#: ../../library/functions.rst:924
msgid ""
"In addition to the standard :c:func:`fopen` values *mode* may be ``'U'`` or "
"``'rU'``.  Python is usually built with :term:`universal newlines` support; "
"supplying ``'U'`` opens the file as a text file, but lines may be terminated "
"by any of the following: the Unix end-of-line convention ``'\\n'``,  the "
"Macintosh convention ``'\\r'``, or the Windows convention ``'\\r\\n'``. All "
"of these external representations are seen as ``'\\n'`` by the Python "
"program. If Python is built without universal newlines support a *mode* with "
"``'U'`` is the same as normal text mode.  Note that file objects so opened "
"also have an attribute called :attr:`newlines` which has a value of ``None`` "
"(if no newlines have yet been seen), ``'\\n'``, ``'\\r'``, ``'\\r\\n'``, or "
"a tuple containing all the newline types seen."
msgstr ""

#: ../../library/functions.rst:936
msgid ""
"Python enforces that the mode, after stripping ``'U'``, begins with ``'r'``, "
"``'w'`` or ``'a'``."
msgstr ""

#: ../../library/functions.rst:939
msgid ""
"Python provides many file handling modules including :mod:`fileinput`, :mod:"
"`os`, :mod:`os.path`, :mod:`tempfile`, and :mod:`shutil`."
msgstr ""

#: ../../library/functions.rst:943
msgid "Restriction on first letter of mode string introduced."
msgstr ""

#: ../../library/functions.rst:949
msgid ""
"Given a string of length one, return an integer representing the Unicode "
"code point of the character when the argument is a unicode object, or the "
"value of the byte when the argument is an 8-bit string. For example, "
"``ord('a')`` returns the integer ``97``, ``ord(u'\\u2020')`` returns "
"``8224``.  This is the inverse of :func:`chr` for 8-bit strings and of :func:"
"`unichr` for unicode objects.  If a unicode argument is given and Python was "
"built with UCS2 Unicode, then the character's code point must be in the "
"range [0..65535] inclusive; otherwise the string length is two, and a :exc:"
"`TypeError` will be raised."
msgstr ""

#: ../../library/functions.rst:961
msgid ""
"Return *x* to the power *y*; if *z* is present, return *x* to the power *y*, "
"modulo *z* (computed more efficiently than ``pow(x, y) % z``). The two-"
"argument form ``pow(x, y)`` is equivalent to using the power operator: "
"``x**y``."
msgstr ""

#: ../../library/functions.rst:965
msgid ""
"The arguments must have numeric types.  With mixed operand types, the "
"coercion rules for binary arithmetic operators apply.  For int and long int "
"operands, the result has the same type as the operands (after coercion) "
"unless the second argument is negative; in that case, all arguments are "
"converted to float and a float result is delivered.  For example, ``10**2`` "
"returns ``100``, but ``10**-2`` returns ``0.01``.  (This last feature was "
"added in Python 2.2.  In Python 2.1 and before, if both arguments were of "
"integer types and the second argument was negative, an exception was "
"raised.) If the second argument is negative, the third argument must be "
"omitted. If *z* is present, *x* and *y* must be of integer types, and *y* "
"must be non-negative.  (This restriction was added in Python 2.2.  In Python "
"2.1 and before, floating 3-argument ``pow()`` returned platform-dependent "
"results depending on floating-point rounding accidents.)"
msgstr ""

#: ../../library/functions.rst:982
msgid ""
"Print *objects* to the stream *file*, separated by *sep* and followed by "
"*end*.  *sep*, *end* and *file*, if present, must be given as keyword "
"arguments."
msgstr ""

#: ../../library/functions.rst:986
msgid ""
"All non-keyword arguments are converted to strings like :func:`str` does and "
"written to the stream, separated by *sep* and followed by *end*.  Both *sep* "
"and *end* must be strings; they can also be ``None``, which means to use the "
"default values.  If no *objects* are given, :func:`print` will just write "
"*end*."
msgstr ""
"Todos os argumentos que não são nomeados são convertidos em strings como :"
"func:`str` faz e gravados no fluxo, separados por *sep* e seguidos por "
"*end*. *sep* e *end* devem ser strings; eles também podem ser ``None``, o "
"que significa usar os valores padrão. Se nenhum *object* for fornecido, :"
"func:`print` escreverá apenas *end*."

#: ../../library/functions.rst:992
msgid ""
"The *file* argument must be an object with a ``write(string)`` method; if it "
"is not present or ``None``, :data:`sys.stdout` will be used.  Output "
"buffering is determined by *file*.  Use ``file.flush()`` to ensure, for "
"instance, immediate appearance on a screen."
msgstr ""

#: ../../library/functions.rst:999
msgid ""
"This function is not normally available as a built-in since the name "
"``print`` is recognized as the :keyword:`print` statement.  To disable the "
"statement and use the :func:`print` function, use this future statement at "
"the top of your module::"
msgstr ""

#: ../../library/functions.rst:1011
msgid ""
"Return a property attribute for :term:`new-style class`\\es (classes that "
"derive from :class:`object`)."
msgstr ""

#: ../../library/functions.rst:1014
msgid ""
"*fget* is a function for getting an attribute value.  *fset* is a function "
"for setting an attribute value. *fdel* is a function for deleting an "
"attribute value.  And *doc* creates a docstring for the attribute."
msgstr ""
"*fget* é uma função para obter o valor de um atributo. *fset* é uma função "
"para definir um valor para um atributo. *fdel* é uma função para deletar um "
"valor de um atributo. E *doc* cria um docstring para um atributo."

#: ../../library/functions.rst:1018
msgid "A typical use is to define a managed attribute ``x``::"
msgstr "Um uso comum é para definir um atributo gerenciável ``x``::"

#: ../../library/functions.rst:1035
msgid ""
"If *c* is an instance of *C*, ``c.x`` will invoke the getter, ``c.x = "
"value`` will invoke the setter and ``del c.x`` the deleter."
msgstr ""
"Se *c* é uma instância de *C*, ``c.x`` irá invocar o método getter, ``c.x = "
"value`` irá invocar o método setter, e ``del c.x`` o médodo deleter."

#: ../../library/functions.rst:1038
msgid ""
"If given, *doc* will be the docstring of the property attribute. Otherwise, "
"the property will copy *fget*'s docstring (if it exists).  This makes it "
"possible to create read-only properties easily using :func:`property` as a :"
"term:`decorator`::"
msgstr ""
"Se fornecido, *doc* será a docstring do atributo property attribute. "
"Otherwise, the property will copy *fget*'s docstring (if it exists).  This "
"makes it possible to create read-only properties easily using :func:"
"`property` as a :term:`decorator`::"

#: ../../library/functions.rst:1051
msgid ""
"The ``@property`` decorator turns the :meth:`voltage` method into a "
"\"getter\" for a read-only attribute with the same name, and it sets the "
"docstring for *voltage* to \"Get the current voltage.\""
msgstr ""
"O decorador ``@property`` transforma o método :meth:`voltage` em um "
"\"getter\" para um atributo somente leitura com o mesmo nome, e define a "
"docstring de *voltage* para \"Get the current voltage.\""

#: ../../library/functions.rst:1055
msgid ""
"A property object has :attr:`~property.getter`, :attr:`~property.setter`, "
"and :attr:`~property.deleter` methods usable as decorators that create a "
"copy of the property with the corresponding accessor function set to the "
"decorated function.  This is best explained with an example::"
msgstr ""
"Um objeto property possui métodos :attr:`~property.getter`, :attr:`~property."
"setter`, e :attr:`~property.deleter` usáveis como decoradores, que criam uma "
"cópia da property com o assessor correspondente a função definida para a "
"função com decorador. Isso é explicado melhor com um exemplo::"

#: ../../library/functions.rst:1077
msgid ""
"This code is exactly equivalent to the first example.  Be sure to give the "
"additional functions the same name as the original property (``x`` in this "
"case.)"
msgstr ""
"Esse código é exatamente equivalente ao primeiro exemplo. Tenha certeza de "
"nas funções adicionais usar o mesmo nome que a property original (``x`` "
"neste caso)."

#: ../../library/functions.rst:1081
msgid ""
"The returned property object also has the attributes ``fget``, ``fset``, and "
"``fdel`` corresponding to the constructor arguments."
msgstr ""
"O objeto property retornado também tem os atributos ``fget``, ``fset``, e "
"``fdel`` correspondendo aos argumentos do construtor."

#: ../../library/functions.rst:1086
msgid "Use *fget*'s docstring if no *doc* given."
msgstr ""

#: ../../library/functions.rst:1089
msgid "The ``getter``, ``setter``, and ``deleter`` attributes were added."
msgstr ""

#: ../../library/functions.rst:1096
msgid ""
"This is a versatile function to create lists containing arithmetic "
"progressions. It is most often used in :keyword:`for` loops.  The arguments "
"must be plain integers.  If the *step* argument is omitted, it defaults to "
"``1``.  If the *start* argument is omitted, it defaults to ``0``.  The full "
"form returns a list of plain integers ``[start, start + step, start + 2 * "
"step, ...]``.  If *step* is positive, the last element is the largest "
"``start + i * step`` less than *stop*; if *step* is negative, the last "
"element is the smallest ``start + i * step`` greater than *stop*.  *step* "
"must not be zero (or else :exc:`ValueError` is raised).  Example:"
msgstr ""

#: ../../library/functions.rst:1124
msgid ""
"If the *prompt* argument is present, it is written to standard output "
"without a trailing newline.  The function then reads a line from input, "
"converts it to a string (stripping a trailing newline), and returns that. "
"When EOF is read, :exc:`EOFError` is raised. Example::"
msgstr ""

#: ../../library/functions.rst:1134
msgid ""
"If the :mod:`readline` module was loaded, then :func:`raw_input` will use it "
"to provide elaborate line editing and history features."
msgstr ""

#: ../../library/functions.rst:1140
msgid ""
"Apply *function* of two arguments cumulatively to the items of *iterable*, "
"from left to right, so as to reduce the iterable to a single value.  For "
"example, ``reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])`` calculates "
"``((((1+2)+3)+4)+5)``. The left argument, *x*, is the accumulated value and "
"the right argument, *y*, is the update value from the *iterable*.  If the "
"optional *initializer* is present, it is placed before the items of the "
"iterable in the calculation, and serves as a default when the iterable is "
"empty.  If *initializer* is not given and *iterable* contains only one item, "
"the first item is returned. Roughly equivalent to::"
msgstr ""

#: ../../library/functions.rst:1164
msgid ""
"Reload a previously imported *module*.  The argument must be a module "
"object, so it must have been successfully imported before.  This is useful "
"if you have edited the module source file using an external editor and want "
"to try out the new version without leaving the Python interpreter.  The "
"return value is the module object (the same as the *module* argument)."
msgstr ""

#: ../../library/functions.rst:1170
msgid "When ``reload(module)`` is executed:"
msgstr ""

#: ../../library/functions.rst:1172
msgid ""
"Python modules' code is recompiled and the module-level code reexecuted, "
"defining a new set of objects which are bound to names in the module's "
"dictionary.  The ``init`` function of extension modules is not called a "
"second time."
msgstr ""

#: ../../library/functions.rst:1177
msgid ""
"As with all other objects in Python the old objects are only reclaimed after "
"their reference counts drop to zero."
msgstr ""
"Tal como acontece com todos os outros objetos em Python, os objetos antigos "
"só são recuperados depois que suas contagens de referências caem para zero."

#: ../../library/functions.rst:1180
msgid ""
"The names in the module namespace are updated to point to any new or changed "
"objects."
msgstr ""
"Os nomes no espaço de nomes do módulo são atualizados para apontar para "
"quaisquer objetos novos ou alterados."

#: ../../library/functions.rst:1183
msgid ""
"Other references to the old objects (such as names external to the module) "
"are not rebound to refer to the new objects and must be updated in each "
"namespace where they occur if that is desired."
msgstr ""
"Outras referências aos objetos antigos (como nomes externos ao módulo) não "
"são religadas para se referir aos novos objetos e devem ser atualizadas em "
"cada espaço de nomes onde ocorrem, se isso for desejado."

#: ../../library/functions.rst:1187
msgid "There are a number of other caveats:"
msgstr "Existem várias outras ressalvas:"

#: ../../library/functions.rst:1189
msgid ""
"When a module is reloaded, its dictionary (containing the module's global "
"variables) is retained.  Redefinitions of names will override the old "
"definitions, so this is generally not a problem.  If the new version of a "
"module does not define a name that was defined by the old version, the old "
"definition remains.  This feature can be used to the module's advantage if "
"it maintains a global table or cache of objects --- with a :keyword:`try` "
"statement it can test for the table's presence and skip its initialization "
"if desired::"
msgstr ""
"Quando um módulo é recarregado, seu dicionário (contendo as variáveis "
"globais do módulo) é retido. As redefinições de nomes vão substituir as "
"definições antigas, portanto isso geralmente não é um problema. Se a nova "
"versão de um módulo não definir um nome definido pela versão antiga, a "
"definição antiga permanecerá. Este recurso pode ser usado para vantagem do "
"módulo se ele mantiver uma tabela global ou cache de objetos -- com uma "
"instrução :keyword:`try` ele pode testar a presença da tabela e pular sua "
"inicialização se desejar::"

#: ../../library/functions.rst:1202
msgid ""
"It is generally not very useful to reload built-in or dynamically loaded "
"modules.  Reloading :mod:`sys`, :mod:`__main__`, :mod:`builtins` and other "
"key modules is not recommended.  In many cases extension modules are not "
"designed to be initialized more than once, and may fail in arbitrary ways "
"when reloaded."
msgstr ""
"Geralmente não é muito útil recarregar módulos embutidos ou carregados "
"dinamicamente. Recarregar :mod:`sys`, :mod:`__main__`, :mod:`builtins` e "
"outros módulos principais não é recomendado. Em muitos casos, os módulos de "
"extensão não são projetados para serem inicializados mais de uma vez e podem "
"falhar de maneiras arbitrárias quando recarregados."

#: ../../library/functions.rst:1208
msgid ""
"If a module imports objects from another module using :keyword:`from` ... :"
"keyword:`import` ..., calling :func:`reload` for the other module does not "
"redefine the objects imported from it --- one way around this is to re-"
"execute the :keyword:`from` statement, another is to use :keyword:`import` "
"and qualified names (*module*.*name*) instead."
msgstr ""

#: ../../library/functions.rst:1214
msgid ""
"If a module instantiates instances of a class, reloading the module that "
"defines the class does not affect the method definitions of the instances "
"--- they continue to use the old class definition.  The same is true for "
"derived classes."
msgstr ""
"Se um módulo instancia instâncias de uma classe, recarregar o módulo que "
"define a classe não afeta as definições de método das instâncias -- elas "
"continuam a usar a definição de classe antiga. O mesmo se aplica às classes "
"derivadas."

#: ../../library/functions.rst:1222
msgid ""
"Return a string containing a printable representation of an object.  This is "
"the same value yielded by conversions (reverse quotes).  It is sometimes "
"useful to be able to access this operation as an ordinary function.  For "
"many types, this function makes an attempt to return a string that would "
"yield an object with the same value when passed to :func:`eval`, otherwise "
"the representation is a string enclosed in angle brackets that contains the "
"name of the type of the object together with additional information often "
"including the name and address of the object.  A class can control what this "
"function returns for its instances by defining a :meth:`__repr__` method."
msgstr ""

#: ../../library/functions.rst:1235
msgid ""
"Return a reverse :term:`iterator`.  *seq* must be an object which has a :"
"meth:`__reversed__` method or supports the sequence protocol (the :meth:"
"`__len__` method and the :meth:`__getitem__` method with integer arguments "
"starting at ``0``)."
msgstr ""
"Retorna um :term:`iterador <iterator>` reverso. *seq* deve ser um objeto que "
"possui o método :meth:`__reversed__` ou suporta o protocolo de sequência (o "
"método :meth:`__len__` e o método :meth:`__len__` e o método :meth:"
"`__getitem__` com argumentos inteiros começando em ``0``)."

#: ../../library/functions.rst:1242
msgid "Added the possibility to write a custom :meth:`__reversed__` method."
msgstr ""

#: ../../library/functions.rst:1248
msgid ""
"Return the floating point value *number* rounded to *ndigits* digits after "
"the decimal point.  If *ndigits* is omitted, it defaults to zero. The result "
"is a floating point number.  Values are rounded to the closest multiple of "
"10 to the power minus *ndigits*; if two multiples are equally close, "
"rounding is done away from 0 (so, for example, ``round(0.5)`` is ``1.0`` and "
"``round(-0.5)`` is ``-1.0``)."
msgstr ""

#: ../../library/functions.rst:1258
msgid ""
"The behavior of :func:`round` for floats can be surprising: for example, "
"``round(2.675, 2)`` gives ``2.67`` instead of the expected ``2.68``. This is "
"not a bug: it's a result of the fact that most decimal fractions can't be "
"represented exactly as a float.  See :ref:`tut-fp-issues` for more "
"information."
msgstr ""
"O comportamento de :func:`round` para pontos flutuantes pode ser "
"surpreendente: por exemplo, ``round(2.675, 2)`` fornece ``2.67`` em vez do "
"esperado ``2.68``. Isso não é um bug: é resultado do fato de que a maioria "
"das frações decimais não pode ser representada exatamente como um ponto "
"flutuante. Veja :ref:`tut-fp-issues` para mais informações."

#: ../../library/functions.rst:1269
msgid ""
"Return a new :class:`set` object, optionally with elements taken from "
"*iterable*.  ``set`` is a built-in class.  See :class:`set` and :ref:`types-"
"set` for documentation about this class."
msgstr ""
"Retorna um novo objeto :class:`set`, opcionalmente com elementos retirados "
"de *iterable*. ``set`` é uma classe embutida. Veja :class:`set` e :ref:"
"`types-set` para documentação sobre esta classe."

#: ../../library/functions.rst:1273
msgid ""
"For other containers see the built-in :class:`frozenset`, :class:`list`, :"
"class:`tuple`, and :class:`dict` classes, as well as the :mod:`collections` "
"module."
msgstr ""
"Para outros contêineres, consulte as classes embutidas :class:`frozenset`, :"
"class:`list`, :class:`tuple` e :class:`dict`, bem como o módulo :mod:"
"`collections`."

#: ../../library/functions.rst:1282
msgid ""
"This is the counterpart of :func:`getattr`.  The arguments are an object, a "
"string and an arbitrary value.  The string may name an existing attribute or "
"a new attribute.  The function assigns the value to the attribute, provided "
"the object allows it.  For example, ``setattr(x, 'foobar', 123)`` is "
"equivalent to ``x.foobar = 123``."
msgstr ""
"Esta é a contrapartida de :func:`getattr`. Os argumentos são um objeto, uma "
"string e um valor arbitrário. A string pode nomear um atributo existente ou "
"um novo atributo. A função atribui o valor ao atributo, desde que o objeto "
"permita. Por exemplo, ``setattr(x, 'foobar', 123)`` é equivalente a ``x."
"foobar = 123``."

#: ../../library/functions.rst:1294
msgid ""
"Return a :term:`slice` object representing the set of indices specified by "
"``range(start, stop, step)``.  The *start* and *step* arguments default to "
"``None``.  Slice objects have read-only data attributes :attr:`~slice."
"start`, :attr:`~slice.stop` and :attr:`~slice.step` which merely return the "
"argument values (or their default).  They have no other explicit "
"functionality; however they are used by Numerical Python and other third "
"party extensions. Slice objects are also generated when extended indexing "
"syntax is used.  For example: ``a[start:stop:step]`` or ``a[start:stop, "
"i]``.  See :func:`itertools.islice` for an alternate version that returns an "
"iterator."
msgstr ""
"Retorna um objeto :term:`slice` representando o conjunto de índices "
"especificado por ``range(start, stop, step)``. Os argumentos *start* e "
"*step* são padronizados como ``None``. Os objetos de  têm atributos de dados "
"somente leitura :attr:`~slice.start`, :attr:`~slice.stop` e :attr:`~slice."
"step`, que meramente retornam os valores do argumento (ou o padrão). Eles "
"não têm outra funcionalidade explícita; no entanto, eles são usados pelo "
"Python numérico e outras extensões de terceiros. Os objetos slice também são "
"gerados quando a sintaxe de indexação estendida é usada. Por exemplo: "
"``a[start:stop:step]`` ou ``a[start:stop, i]``. Veja :func:`itertools."
"islice` para uma versão alternativa que retorna um iterador."

#: ../../library/functions.rst:1307
msgid "Return a new sorted list from the items in *iterable*."
msgstr "Retorna uma nova lista classificada dos itens em *iterable*."

#: ../../library/functions.rst:1309
msgid ""
"The optional arguments *cmp*, *key*, and *reverse* have the same meaning as "
"those for the :meth:`list.sort` method (described in section :ref:`typesseq-"
"mutable`)."
msgstr ""

#: ../../library/functions.rst:1313
msgid ""
"*cmp* specifies a custom comparison function of two arguments (iterable "
"elements) which should return a negative, zero or positive number depending "
"on whether the first argument is considered smaller than, equal to, or "
"larger than the second argument: ``cmp=lambda x,y: cmp(x.lower(), y."
"lower())``.  The default value is ``None``."
msgstr ""

#: ../../library/functions.rst:1319
msgid ""
"*key* specifies a function of one argument that is used to extract a "
"comparison key from each list element: ``key=str.lower``.  The default value "
"is ``None`` (compare the elements directly)."
msgstr ""

#: ../../library/functions.rst:1323
msgid ""
"*reverse* is a boolean value.  If set to ``True``, then the list elements "
"are sorted as if each comparison were reversed."
msgstr ""
"*reverse* é um valor booleano.  Se definido igual a ``True``, então os "
"elementos da lista são classificados como se cada comparação fosse reversa."

#: ../../library/functions.rst:1326
msgid ""
"In general, the *key* and *reverse* conversion processes are much faster "
"than specifying an equivalent *cmp* function.  This is because *cmp* is "
"called multiple times for each list element while *key* and *reverse* touch "
"each element only once.  Use :func:`functools.cmp_to_key` to convert an old-"
"style *cmp* function to a *key* function."
msgstr ""

#: ../../library/functions.rst:1332
msgid ""
"The built-in :func:`sorted` function is guaranteed to be stable. A sort is "
"stable if it guarantees not to change the relative order of elements that "
"compare equal --- this is helpful for sorting in multiple passes (for "
"example, sort by department, then by salary grade)."
msgstr ""
"A função embutida :func:`sorted` é garantida como estável. Uma ordem é "
"estável se garantir não alterar a ordem relativa dos elementos que se "
"comparam da mesma forma --- isso é útil para ordenar em várias passagens "
"(por exemplo, ordenar por departamento e depois por nível de salário)."

#: ../../library/functions.rst:1337
msgid ""
"For sorting examples and a brief sorting tutorial, see :ref:`sortinghowto`."
msgstr ""
"Para selecionar exemplos e um breve tutorial de classificação, veja: ref: "
"`sortinghowto`."

#: ../../library/functions.rst:1344
msgid "Return a static method for *function*."
msgstr ""

#: ../../library/functions.rst:1346
msgid ""
"A static method does not receive an implicit first argument. To declare a "
"static method, use this idiom::"
msgstr ""
"Um método estático não recebe um primeiro argumento implícito. Para declarar "
"um método estático, use este idioma::"

#: ../../library/functions.rst:1354
msgid ""
"The ``@staticmethod`` form is a function :term:`decorator` -- see :ref:"
"`function` for details."
msgstr ""
"A forma ``@staticmethod`` é uma função de :term:`decorator` -- veja :ref:"
"`function` para detalhes."

#: ../../library/functions.rst:1357
msgid ""
"A static method can be called either on the class (such as ``C.f()``) or on "
"an instance (such as ``C().f()``)."
msgstr ""
"Um método estático pode ser chamado na classe (tal como ``C.f()``) ou em uma "
"instância (tal como ``C().f()``)."

#: ../../library/functions.rst:1360
msgid ""
"Static methods in Python are similar to those found in Java or C++. Also "
"see :func:`classmethod` for a variant that is useful for creating alternate "
"class constructors."
msgstr ""
"Métodos estáticos em Python são similares àqueles encontrados em Java ou C+"
"+. Veja também :func:`classmethod` para uma variante útil na criação de "
"construtores de classe alternativos."

#: ../../library/functions.rst:1364
msgid "For more information on static methods, see :ref:`types`."
msgstr "Para mais informações sobre métodos estáticos, consulte :ref:`types`."

#: ../../library/functions.rst:1374
msgid ""
"Return a string containing a nicely printable representation of an object.  "
"For strings, this returns the string itself.  The difference with "
"``repr(object)`` is that ``str(object)`` does not always attempt to return a "
"string that is acceptable to :func:`eval`; its goal is to return a printable "
"string.  If no argument is given, returns the empty string, ``''``."
msgstr ""

#: ../../library/functions.rst:1380
msgid ""
"For more information on strings see :ref:`typesseq` which describes sequence "
"functionality (strings are sequences), and also the string-specific methods "
"described in the :ref:`string-methods` section. To output formatted strings "
"use template strings or the ``%`` operator described in the :ref:`string-"
"formatting` section. In addition see the :ref:`stringservices` section. See "
"also :func:`unicode`."
msgstr ""

#: ../../library/functions.rst:1390
msgid ""
"Sums *start* and the items of an *iterable* from left to right and returns "
"the total.  *start* defaults to ``0``. The *iterable*'s items are normally "
"numbers, and the start value is not allowed to be a string."
msgstr ""

#: ../../library/functions.rst:1394
msgid ""
"For some use cases, there are good alternatives to :func:`sum`. The "
"preferred, fast way to concatenate a sequence of strings is by calling ``''."
"join(sequence)``.  To add floating point values with extended precision, "
"see :func:`math.fsum`\\.  To concatenate a series of iterables, consider "
"using :func:`itertools.chain`."
msgstr ""
"Para alguns casos de uso, existem boas alternativas para :func:`sum`. A "
"maneira rápida e preferida de concatenar uma sequência de strings é chamando "
"``''.join(sequence)``. Para adicionar valores de ponto flutuante com "
"precisão estendida, consulte :func:`math.fsum`. Para concatenar uma série de "
"iteráveis, considere usar :func:`itertools.chain`."

#: ../../library/functions.rst:1405
msgid ""
"Return a proxy object that delegates method calls to a parent or sibling "
"class of *type*.  This is useful for accessing inherited methods that have "
"been overridden in a class. The search order is same as that used by :func:"
"`getattr` except that the *type* itself is skipped."
msgstr ""

#: ../../library/functions.rst:1410
msgid ""
"The :attr:`~class.__mro__` attribute of the *type* lists the method "
"resolution search order used by both :func:`getattr` and :func:`super`.  The "
"attribute is dynamic and can change whenever the inheritance hierarchy is "
"updated."
msgstr ""

#: ../../library/functions.rst:1415
msgid ""
"If the second argument is omitted, the super object returned is unbound.  If "
"the second argument is an object, ``isinstance(obj, type)`` must be true.  "
"If the second argument is a type, ``issubclass(type2, type)`` must be true "
"(this is useful for classmethods)."
msgstr ""
"Se o segundo argumento for omitido, o objeto super retornado é desacoplado. "
"Se o segundo argumento é um objeto, ``isinstance(obj, type)`` deve ser "
"verdadeiro. Se o segundo argumento é um tipo, ``issubclass(type2, type)`` "
"deve ser verdadeiro (isto é útil para classmethods)."

#: ../../library/functions.rst:1421
msgid ":func:`super` only works for :term:`new-style class`\\es."
msgstr ""

#: ../../library/functions.rst:1423
msgid ""
"There are two typical use cases for *super*.  In a class hierarchy with "
"single inheritance, *super* can be used to refer to parent classes without "
"naming them explicitly, thus making the code more maintainable.  This use "
"closely parallels the use of *super* in other programming languages."
msgstr ""
"Existem dois casos de uso típicos para *super*. Em uma hierarquia de classes "
"com herança única, *super* pode ser usado para se referir a classes-pai sem "
"nomeá-las explicitamente, tornando o código mais sustentável. Esse uso é "
"paralelo ao uso de *super* em outras linguagens de programação."

#: ../../library/functions.rst:1428
msgid ""
"The second use case is to support cooperative multiple inheritance in a "
"dynamic execution environment.  This use case is unique to Python and is not "
"found in statically compiled languages or languages that only support single "
"inheritance.  This makes it possible to implement \"diamond diagrams\" where "
"multiple base classes implement the same method.  Good design dictates that "
"this method have the same calling signature in every case (because the order "
"of calls is determined at runtime, because that order adapts to changes in "
"the class hierarchy, and because that order can include sibling classes that "
"are unknown prior to runtime)."
msgstr ""
"O segundo caso de uso é oferecer suporte à herança múltipla cooperativa em "
"um ambiente de execução dinâmica. Esse caso de uso é exclusivo do Python e "
"não é encontrado em idiomas ou linguagens compiladas estaticamente que "
"suportam apenas herança única. Isso torna possível implementar \"diagramas "
"em losango\", onde várias classes base implementam o mesmo método. Um bom "
"design determina que esse método tenha a mesma assinatura de chamada em "
"todos os casos (porque a ordem das chamadas é determinada em tempo de "
"execução, porque essa ordem se adapta às alterações na hierarquia de classes "
"e porque essa ordem pode incluir classes de irmãos desconhecidas antes do "
"tempo de execução)."

#: ../../library/functions.rst:1438
msgid "For both use cases, a typical superclass call looks like this::"
msgstr ""
"Nos dois casos de uso, uma chamada típica de superclasse se parece com isso::"

#: ../../library/functions.rst:1444
msgid ""
"Note that :func:`super` is implemented as part of the binding process for "
"explicit dotted attribute lookups such as ``super().__getitem__(name)``. It "
"does so by implementing its own :meth:`__getattribute__` method for "
"searching classes in a predictable order that supports cooperative multiple "
"inheritance. Accordingly, :func:`super` is undefined for implicit lookups "
"using statements or operators such as ``super()[name]``."
msgstr ""
"Observe que :func:`super` é implementada como parte do processo de "
"vinculação para procura explícita de atributos com ponto, tal como ``super()."
"__getitem__(nome)``. Ela faz isso implementando seu próprio método :meth:"
"`__getattribute__` para pesquisar classes em uma ordem predizível que possui "
"suporte a herança múltipla cooperativa. Logo, :func:`super` não é definida "
"para procuras implícitas usando instruções ou operadores como ``super()"
"[name]``."

#: ../../library/functions.rst:1451
msgid ""
"Also note that :func:`super` is not limited to use inside methods.  The two "
"argument form specifies the arguments exactly and makes the appropriate "
"references."
msgstr ""

#: ../../library/functions.rst:1455
msgid ""
"For practical suggestions on how to design cooperative classes using :func:"
"`super`, see `guide to using super() <https://rhettinger.wordpress."
"com/2011/05/26/super-considered-super/>`_."
msgstr ""
"Para sugestões práticas sobre como projetar classes cooperativas usando :"
"func:`super`, consulte o `guia para uso de super() <https://rhettinger."
"wordpress.com/2011/05/26/super-considered-super/>`_."

#: ../../library/functions.rst:1464
msgid ""
"Return a tuple whose items are the same and in the same order as "
"*iterable*'s items.  *iterable* may be a sequence, a container that supports "
"iteration, or an iterator object. If *iterable* is already a tuple, it is "
"returned unchanged. For instance, ``tuple('abc')`` returns ``('a', 'b', "
"'c')`` and ``tuple([1, 2, 3])`` returns ``(1, 2, 3)``.  If no argument is "
"given, returns a new empty tuple, ``()``."
msgstr ""

#: ../../library/functions.rst:1471
msgid ""
":class:`tuple` is an immutable sequence type, as documented in :ref:"
"`typesseq`. For other containers see the built in :class:`dict`, :class:"
"`list`, and :class:`set` classes, and the :mod:`collections` module."
msgstr ""

#: ../../library/functions.rst:1481
msgid ""
"With one argument, return the type of an *object*.  The return value is a "
"type object.  The :func:`isinstance` built-in function is recommended for "
"testing the type of an object."
msgstr ""

#: ../../library/functions.rst:1485
msgid ""
"With three arguments, return a new type object.  This is essentially a "
"dynamic form of the :keyword:`class` statement. The *name* string is the "
"class name and becomes the :attr:`~definition.__name__` attribute; the "
"*bases* tuple itemizes the base classes and becomes the :attr:`~class."
"__bases__` attribute; and the *dict* dictionary is the namespace containing "
"definitions for class body and becomes the :attr:`~object.__dict__`  "
"attribute.  For example, the following two statements create identical :"
"class:`type` objects:"
msgstr ""

#: ../../library/functions.rst:1503
msgid ""
"Return the Unicode string of one character whose Unicode code is the integer "
"*i*.  For example, ``unichr(97)`` returns the string ``u'a'``.  This is the "
"inverse of :func:`ord` for Unicode strings.  The valid range for the "
"argument depends how Python was configured -- it may be either UCS2 "
"[0..0xFFFF] or UCS4 [0..0x10FFFF]. :exc:`ValueError` is raised otherwise. "
"For ASCII and 8-bit strings see :func:`chr`."
msgstr ""

#: ../../library/functions.rst:1516
msgid ""
"Return the Unicode string version of *object* using one of the following "
"modes:"
msgstr ""

#: ../../library/functions.rst:1518
msgid ""
"If *encoding* and/or *errors* are given, ``unicode()`` will decode the "
"object which can either be an 8-bit string or a character buffer using the "
"codec for *encoding*. The *encoding* parameter is a string giving the name "
"of an encoding; if the encoding is not known, :exc:`LookupError` is raised. "
"Error handling is done according to *errors*; this specifies the treatment "
"of characters which are invalid in the input encoding.  If *errors* is "
"``'strict'`` (the default), a :exc:`ValueError` is raised on errors, while a "
"value of ``'ignore'`` causes errors to be silently ignored, and a value of "
"``'replace'`` causes the official Unicode replacement character, ``U+FFFD``, "
"to be used to replace input characters which cannot be decoded.  See also "
"the :mod:`codecs` module."
msgstr ""

#: ../../library/functions.rst:1529
msgid ""
"If no optional parameters are given, ``unicode()`` will mimic the behaviour "
"of ``str()`` except that it returns Unicode strings instead of 8-bit "
"strings. More precisely, if *object* is a Unicode string or subclass it will "
"return that Unicode string without any additional decoding applied."
msgstr ""

#: ../../library/functions.rst:1534
msgid ""
"For objects which provide a :meth:`__unicode__` method, it will call this "
"method without arguments to create a Unicode string. For all other objects, "
"the 8-bit string version or representation is requested and then converted "
"to a Unicode string using the codec for the default encoding in ``'strict'`` "
"mode."
msgstr ""

#: ../../library/functions.rst:1539
msgid ""
"For more information on Unicode strings see :ref:`typesseq` which describes "
"sequence functionality (Unicode strings are sequences), and also the string-"
"specific methods described in the :ref:`string-methods` section. To output "
"formatted strings use template strings or the ``%`` operator described in "
"the :ref:`string-formatting` section. In addition see the :ref:"
"`stringservices` section. See also :func:`str`."
msgstr ""

#: ../../library/functions.rst:1548
msgid "Support for :meth:`__unicode__` added."
msgstr ""

#: ../../library/functions.rst:1554
msgid ""
"Return the :attr:`~object.__dict__` attribute for a module, class, instance, "
"or any other object with a :attr:`~object.__dict__` attribute."
msgstr ""
"Retorna o atributo :attr:`~object.__dict__` para um módulo, classe, "
"instância, or qualquer outro objeto com um atributo :attr:`~object.__dict__`."

#: ../../library/functions.rst:1557
msgid ""
"Objects such as modules and instances have an updateable :attr:`~object."
"__dict__` attribute; however, other objects may have write restrictions on "
"their :attr:`~object.__dict__` attributes (for example, new-style classes "
"use a dictproxy to prevent direct dictionary updates)."
msgstr ""

#: ../../library/functions.rst:1562
msgid ""
"Without an argument, :func:`vars` acts like :func:`locals`.  Note, the "
"locals dictionary is only useful for reads since updates to the locals "
"dictionary are ignored."
msgstr ""
"Sem um argumento, :func:`vars` funciona como :func:`locals`. Perceba que, o "
"dicionário locals é apenas útil para leitura, pelo fato de alterações no "
"dicionário locals serem ignoradas."

#: ../../library/functions.rst:1570
msgid ""
"This function is very similar to :func:`range`, but returns an :ref:`xrange "
"object <typesseq-xrange>` instead of a list.  This is an opaque sequence "
"type which yields the same values as the corresponding list, without "
"actually storing them all simultaneously. The advantage of :func:`xrange` "
"over :func:`range` is minimal (since :func:`xrange` still has to create the "
"values when asked for them) except when a very large range is used on a "
"memory-starved machine or when all of the range's elements are never used "
"(such as when the loop is usually terminated with :keyword:`break`).  For "
"more information on xrange objects, see :ref:`typesseq-xrange` and :ref:"
"`typesseq`."
msgstr ""

#: ../../library/functions.rst:1583
msgid ""
":func:`xrange` is intended to be simple and fast.  Implementations may "
"impose restrictions to achieve this.  The C implementation of Python "
"restricts all arguments to native C longs (\"short\" Python integers), and "
"also requires that the number of elements fit in a native C long.  If a "
"larger range is needed, an alternate version can be crafted using the :mod:"
"`itertools` module: ``islice(count(start, step), (stop-"
"start+step-1+2*(step<0))//step)``."
msgstr ""

#: ../../library/functions.rst:1594
msgid ""
"This function returns a list of tuples, where the *i*-th tuple contains the "
"*i*-th element from each of the argument sequences or iterables. The "
"returned list is truncated in length to the length of the shortest argument "
"sequence. When there are multiple arguments which are all of the same "
"length, :func:`zip` is similar to :func:`map` with an initial argument of "
"``None``. With a single sequence argument, it returns a list of 1-tuples. "
"With no arguments, it returns an empty list."
msgstr ""

#: ../../library/functions.rst:1602
msgid ""
"The left-to-right evaluation order of the iterables is guaranteed. This "
"makes possible an idiom for clustering a data series into n-length groups "
"using ``zip(*[iter(s)]*n)``."
msgstr ""

#: ../../library/functions.rst:1606
msgid ""
":func:`zip` in conjunction with the ``*`` operator can be used to unzip a "
"list::"
msgstr ""
":func:`zip` em conjunto com o operador ``*`` pode ser usado para "
"descompactar uma lista::"

#: ../../library/functions.rst:1620
msgid ""
"Formerly, :func:`zip` required at least one argument and ``zip()`` raised a :"
"exc:`TypeError` instead of returning an empty list."
msgstr ""

#: ../../library/functions.rst:1633
msgid ""
"This is an advanced function that is not needed in everyday Python "
"programming, unlike :func:`importlib.import_module`."
msgstr ""
"Esta é uma função avançada que não é necessária na programação diária do "
"Python, ao contrário de :func:`importlib.import_module`."

#: ../../library/functions.rst:1636
msgid ""
"This function is invoked by the :keyword:`import` statement.  It can be "
"replaced (by importing the :mod:`__builtin__` module and assigning to "
"``__builtin__.__import__``) in order to change semantics of the :keyword:"
"`import` statement, but nowadays it is usually simpler to use import hooks "
"(see :pep:`302`).  Direct use of :func:`__import__` is rare, except in cases "
"where you want to import a module whose name is only known at runtime."
msgstr ""

#: ../../library/functions.rst:1643
msgid ""
"The function imports the module *name*, potentially using the given "
"*globals* and *locals* to determine how to interpret the name in a package "
"context. The *fromlist* gives the names of objects or submodules that should "
"be imported from the module given by *name*.  The standard implementation "
"does not use its *locals* argument at all, and uses its *globals* only to "
"determine the package context of the :keyword:`import` statement."
msgstr ""
"A função importa o módulo *name*, potencialmente usando os dados *globals* e "
"*locals* para determinar como interpretar o nome em um contexto de pacote. O "
"*fromlist* fornece os nomes de objetos ou submódulos que devem ser "
"importados do módulo, fornecidos por *name*. A implementação padrão não usa "
"seu argumento *locals* e usa seus *globals* apenas para determinar o "
"contexto do pacote da instrução :keyword:`import`."

#: ../../library/functions.rst:1650
msgid ""
"*level* specifies whether to use absolute or relative imports.  The default "
"is ``-1`` which indicates both absolute and relative imports will be "
"attempted.  ``0`` means only perform absolute imports.  Positive values for "
"*level* indicate the number of parent directories to search relative to the "
"directory of the module calling :func:`__import__`."
msgstr ""

#: ../../library/functions.rst:1656
msgid ""
"When the *name* variable is of the form ``package.module``, normally, the "
"top-level package (the name up till the first dot) is returned, *not* the "
"module named by *name*.  However, when a non-empty *fromlist* argument is "
"given, the module named by *name* is returned."
msgstr ""
"Quando a variável *name* está no formato ``package.module``, normalmente, o "
"pacote de nível superior (o nome até o primeiro ponto) é retornado, *não* o "
"módulo nomeado por *name*. No entanto, quando um argumento *fromlist* não "
"vazio é fornecido, o módulo nomeado por *name* é retornado."

#: ../../library/functions.rst:1661
msgid ""
"For example, the statement ``import spam`` results in bytecode resembling "
"the following code::"
msgstr ""
"Por exemplo, a instrução ``importar spam`` resulta em bytecode semelhante ao "
"seguinte código::"

#: ../../library/functions.rst:1666
msgid "The statement ``import spam.ham`` results in this call::"
msgstr "A instrução ``import spam.ham`` resulta nesta chamada::"

#: ../../library/functions.rst:1670
msgid ""
"Note how :func:`__import__` returns the toplevel module here because this is "
"the object that is bound to a name by the :keyword:`import` statement."
msgstr ""
"Observe como :func:`__import__` retorna o módulo de nível superior aqui, "
"porque este é o objeto vinculado a um nome pela instrução :keyword:`import`."

#: ../../library/functions.rst:1673
msgid ""
"On the other hand, the statement ``from spam.ham import eggs, sausage as "
"saus`` results in ::"
msgstr ""
"Por outro lado, a instrução ``from spam.ham import eggs, sausage as saus'' "
"resulta em ::"

#: ../../library/functions.rst:1680
msgid ""
"Here, the ``spam.ham`` module is returned from :func:`__import__`.  From "
"this object, the names to import are retrieved and assigned to their "
"respective names."
msgstr ""
"Aqui, o módulo ``spam.ham`` é retornado de :func:`__import__`. A partir "
"desse objeto, os nomes a serem importados são recuperados e atribuídos aos "
"seus respectivos nomes."

#: ../../library/functions.rst:1684
msgid ""
"If you simply want to import a module (potentially within a package) by "
"name, use :func:`importlib.import_module`."
msgstr ""
"Se você simplesmente deseja importar um módulo (potencialmente dentro de um "
"pacote) pelo nome, use :func:`importlib.import_module`."

#: ../../library/functions.rst:1688
msgid "The level parameter was added."
msgstr ""

#: ../../library/functions.rst:1691
msgid "Keyword support for parameters was added."
msgstr ""

#: ../../library/functions.rst:1700
msgid "Non-essential Built-in Functions"
msgstr ""

#: ../../library/functions.rst:1702
msgid ""
"There are several built-in functions that are no longer essential to learn, "
"know or use in modern Python programming.  They have been kept here to "
"maintain backwards compatibility with programs written for older versions of "
"Python."
msgstr ""

#: ../../library/functions.rst:1706
msgid ""
"Python programmers, trainers, students and book writers should feel free to "
"bypass these functions without concerns about missing something important."
msgstr ""

#: ../../library/functions.rst:1712
msgid ""
"The *function* argument must be a callable object (a user-defined or built-"
"in function or method, or a class object) and the *args* argument must be a "
"sequence.  The *function* is called with *args* as the argument list; the "
"number of arguments is the length of the tuple. If the optional *keywords* "
"argument is present, it must be a dictionary whose keys are strings.  It "
"specifies keyword arguments to be added to the end of the argument list. "
"Calling :func:`apply` is different from just calling ``function(args)``, "
"since in that case there is always exactly one argument.  The use of :func:"
"`apply` is equivalent to ``function(*args, **keywords)``."
msgstr ""

#: ../../library/functions.rst:1722
msgid ""
"Use ``function(*args, **keywords)`` instead of ``apply(function, args, "
"keywords)`` (see :ref:`tut-unpacking-arguments`)."
msgstr ""

#: ../../library/functions.rst:1729
msgid ""
"The *object* argument must be an object that supports the buffer call "
"interface (such as strings, arrays, and buffers).  A new buffer object will "
"be created which references the *object* argument. The buffer object will be "
"a slice from the beginning of *object* (or from the specified *offset*). The "
"slice will extend to the end of *object* (or will have a length given by the "
"*size* argument)."
msgstr ""

#: ../../library/functions.rst:1739
msgid ""
"Return a tuple consisting of the two numeric arguments converted to a common "
"type, using the same rules as used by arithmetic operations. If coercion is "
"not possible, raise :exc:`TypeError`."
msgstr ""

#: ../../library/functions.rst:1746
msgid ""
"Enter *string* in the table of \"interned\" strings and return the interned "
"string -- which is *string* itself or a copy. Interning strings is useful to "
"gain a little performance on dictionary lookup -- if the keys in a "
"dictionary are interned, and the lookup key is interned, the key comparisons "
"(after hashing) can be done by a pointer compare instead of a string "
"compare.  Normally, the names used in Python programs are automatically "
"interned, and the dictionaries used to hold module, class or instance "
"attributes have interned keys."
msgstr ""
"Insere *string* na tabela de strings \"internalizadas\" e retorna a string "
"internalizada -- que é a própria *string* ou uma cópia. Strings "
"internalizadas são úteis para obter um pouco de desempenho na pesquisa de "
"dicionário -- se as chaves em um dicionário foram internalizadas, e a chave "
"de pesquisa para internalizada, já que comparações de chaves (após o hash) "
"podem ser feitas por uma comparação de ponteiros em vez de uma comparação de "
"strings. Normalmente, os nomes usados ​​em programas Python são internalizados "
"automaticamente, e os dicionários usados ​​para armazenar atributos de módulo, "
"classe ou instância têm chaves internalizadas."

#: ../../library/functions.rst:1754
msgid ""
"Interned strings are not immortal (like they used to be in Python 2.2 and "
"before); you must keep a reference to the return value of :func:`intern` "
"around to benefit from it."
msgstr ""

#: ../../library/functions.rst:1760
msgid "Footnotes"
msgstr "Notas de Rodapé"

#: ../../library/functions.rst:1761
msgid ""
"It is used relatively rarely so does not warrant being made into a statement."
msgstr ""

#: ../../library/functions.rst:1763
msgid ""
"Specifying a buffer size currently has no effect on systems that don't have :"
"c:func:`setvbuf`.  The interface to specify the buffer size is not done "
"using a method that calls :c:func:`setvbuf`, because that may dump core when "
"called after any I/O has been performed, and there's no reliable way to "
"determine whether this is the case."
msgstr ""

#: ../../library/functions.rst:1769
msgid ""
"In the current implementation, local variable bindings cannot normally be "
"affected this way, but variables retrieved from other scopes (such as "
"modules) can be.  This may change."
msgstr ""
