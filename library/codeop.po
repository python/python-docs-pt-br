# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# i17obot <i17obot@rougeth.com>, 2021
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-25 14:19+0000\n"
"PO-Revision-Date: 2021-06-28 00:56+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/codeop.rst:2
msgid ":mod:`!codeop` --- Compile Python code"
msgstr ":mod:`!codeop` --- Compila código Python"

#: ../../library/codeop.rst:10
msgid "**Source code:** :source:`Lib/codeop.py`"
msgstr "**Código-fonte:** :source:`Lib/codeop.py`"

#: ../../library/codeop.rst:14
msgid ""
"The :mod:`codeop` module provides utilities upon which the Python read-eval-"
"print loop can be emulated, as is done in the :mod:`code` module.  As a "
"result, you probably don't want to use the module directly; if you want to "
"include such a loop in your program you probably want to use the :mod:`code` "
"module instead."
msgstr ""
"O módulo :mod:`codeop` fornece utilitários sobre os quais o loop de leitura-"
"execução-exibição do Python pode ser emulado, como é feito no módulo :mod:"
"`code`. Como resultado, você provavelmente não deseja usar o módulo "
"diretamente; se você deseja incluir tal loop em seu programa, você "
"provavelmente deseja usar o módulo :mod:`code`."

#: ../../library/codeop.rst:20
msgid "There are two parts to this job:"
msgstr "Há duas partes para esta tarefa:"

#: ../../library/codeop.rst:22
msgid ""
"Being able to tell if a line of input completes a Python statement: in "
"short, telling whether to print '``>>>``' or '``...``' next."
msgstr ""
"Ser capaz de dizer se uma linha de entrada completa uma instrução Python: em "
"suma, dizer se deve exibir '``>>>``' ou '``...``' em seguida."

#: ../../library/codeop.rst:25
msgid ""
"Remembering which future statements the user has entered, so subsequent "
"input can be compiled with these in effect."
msgstr ""
"Lembrar quais instruções futuras o usuário inseriu, para que as entradas "
"subsequentes possam ser compiladas com essas declarações em vigor."

#: ../../library/codeop.rst:28
msgid ""
"The :mod:`codeop` module provides a way of doing each of these things, and a "
"way of doing them both."
msgstr ""
"O módulo :mod:`codeop` fornece uma maneira de fazer cada uma dessas coisas e "
"uma maneira de fazer as duas coisas."

#: ../../library/codeop.rst:31
msgid "To do just the former:"
msgstr "Para fazer apenas a primeira:"

#: ../../library/codeop.rst:35
msgid ""
"Tries to compile *source*, which should be a string of Python code and "
"return a code object if *source* is valid Python code.  In that case, the "
"filename attribute of the code object will be *filename*, which defaults to "
"``'<input>'``.  Returns ``None`` if *source* is *not* valid Python code, but "
"is a prefix of valid Python code."
msgstr ""
"Tenta compilar *source*, que deve ser uma string de código Python e retornar "
"um objeto código se *source* for um código Python válido. Nesse caso, o "
"atributo de nome de arquivo do objeto código será *filename*, cujo padrão é "
"``'<input>'``. Retorna ``None`` se *source* *não* é um código Python válido, "
"mas é um prefixo de código Python válido."

#: ../../library/codeop.rst:41
msgid ""
"If there is a problem with *source*, an exception will be raised. :exc:"
"`SyntaxError` is raised if there is invalid Python syntax, and :exc:"
"`OverflowError` or :exc:`ValueError` if there is an invalid literal."
msgstr ""
"Se houver um problema com *source*, uma exceção será levantada. :exc:"
"`SyntaxError` é levantada se houver sintaxe Python inválida, e :exc:"
"`OverflowError` ou :exc:`ValueError` se houver um literal inválido."

#: ../../library/codeop.rst:45
msgid ""
"The *symbol* argument determines whether *source* is compiled as a statement "
"(``'single'``, the default), as a sequence of :term:`statement` (``'exec'``) "
"or as an :term:`expression` (``'eval'``).  Any other value will cause :exc:"
"`ValueError` to be raised."
msgstr ""
"O argumento *symbol* determina se *source* é compilado como uma instrução "
"(``'single'``, o padrão), como uma sequência de :term:`instruções "
"<instrução>` (``'exec'``) ou como uma :term:`expressão <expression>` "
"(``'eval'``). Qualquer outro valor fará com que :exc:`ValueError` seja "
"levantada."

#: ../../library/codeop.rst:52
msgid ""
"It is possible (but not likely) that the parser stops parsing with a "
"successful outcome before reaching the end of the source; in this case, "
"trailing symbols may be ignored instead of causing an error.  For example, a "
"backslash followed by two newlines may be followed by arbitrary garbage. "
"This will be fixed once the API for the parser is better."
msgstr ""
"É possível (mas não provável) que o analisador sintático pare de analisar "
"com um resultado bem-sucedido antes de chegar ao final da fonte; neste caso, "
"os símbolos finais podem ser ignorados em vez de causar um erro. Por "
"exemplo, uma barra invertida seguida por duas novas linhas pode ser seguida "
"por lixo arbitrário. Isso será corrigido quando a API para o analisador for "
"melhor."

#: ../../library/codeop.rst:61
msgid ""
"Instances of this class have :meth:`~object.__call__` methods identical in "
"signature to the built-in function :func:`compile`, but with the difference "
"that if the instance compiles program text containing a :mod:`__future__` "
"statement, the instance 'remembers' and compiles all subsequent program "
"texts with the statement in force."
msgstr ""
"Instâncias desta classe têm métodos :meth:`~object.__call__` idênticos em "
"assinatura à função embutida :func:`compile`, mas com a diferença de que se "
"a instância compilar o texto do programa contendo uma instrução :mod:"
"`__future__`, a instância se \"lembra\" e compila todos os textos de "
"programa subsequentes com a instrução em vigor."

#: ../../library/codeop.rst:70
msgid ""
"Instances of this class have :meth:`~object.__call__` methods identical in "
"signature to :func:`compile_command`; the difference is that if the instance "
"compiles program text containing a :mod:`__future__` statement, the instance "
"'remembers' and compiles all subsequent program texts with the statement in "
"force."
msgstr ""
"Instâncias desta classe têm métodos :meth:`~object.__call__` idênticos em "
"assinatura a :func:`compile_command`; a diferença é que se a instância "
"compila o texto do programa contendo uma instrução :mod:`__future__`, a "
"instância se \"lembra\" e compila todos os textos do programa subsequentes "
"com a instrução em vigor."
