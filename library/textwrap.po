# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2019-06-30 08:01+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/"
"python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../library/textwrap.rst:2
msgid ":mod:`textwrap` --- Text wrapping and filling"
msgstr ""

#: ../../library/textwrap.rst:11
msgid "**Source code:** :source:`Lib/textwrap.py`"
msgstr "**Código Fonte:** :source:`Lib/textwrap.py`"

#: ../../library/textwrap.rst:15
msgid ""
"The :mod:`textwrap` module provides two convenience functions, :func:`wrap` "
"and :func:`fill`, as well as :class:`TextWrapper`, the class that does all "
"the work, and a utility function  :func:`dedent`.  If you're just wrapping "
"or filling one or two  text strings, the convenience functions should be "
"good enough; otherwise,  you should use an instance of :class:`TextWrapper` "
"for efficiency."
msgstr ""

#: ../../library/textwrap.rst:23
msgid ""
"Wraps the single paragraph in *text* (a string) so every line is at most "
"*width* characters long.  Returns a list of output lines, without final "
"newlines."
msgstr ""
"Quebra do parágrafo único em *text* (uma string) para que cada linha tenha "
"no máximo *width* caracteres. Retorna uma lista de linhas de saída, sem "
"novas linhas ao final."

#: ../../library/textwrap.rst:26
msgid ""
"Optional keyword arguments correspond to the instance attributes of :class:"
"`TextWrapper`, documented below.  *width* defaults to ``70``."
msgstr ""

#: ../../library/textwrap.rst:29
msgid ""
"See the :meth:`TextWrapper.wrap` method for additional details on how :func:"
"`wrap` behaves."
msgstr ""
"Veja o método :meth:`TextWrapper.wrap` para detalhes adicionais sobre como :"
"func:`wrap` se comporta."

#: ../../library/textwrap.rst:35
msgid ""
"Wraps the single paragraph in *text*, and returns a single string containing "
"the wrapped paragraph.  :func:`fill` is shorthand for  ::"
msgstr ""
"Quebra o parágrafo único em *text* e retorna uma única string contendo o "
"parágrafo quebrado. :func:`fill` é uma abreviação de ::"

#: ../../library/textwrap.rst:40
msgid ""
"In particular, :func:`fill` accepts exactly the same keyword arguments as :"
"func:`wrap`."
msgstr ""
"Em particular, :func:`fill` aceita exatamente os mesmos argumentos nomeados "
"que :func:`wrap`."

#: ../../library/textwrap.rst:43
msgid ""
"Both :func:`wrap` and :func:`fill` work by creating a :class:`TextWrapper` "
"instance and calling a single method on it.  That instance is not reused, so "
"for applications that wrap/fill many text strings, it will be more efficient "
"for you to create your own :class:`TextWrapper` object."
msgstr ""

#: ../../library/textwrap.rst:48
msgid ""
"Text is preferably wrapped on whitespaces and right after the hyphens in "
"hyphenated words; only then will long words be broken if necessary, unless :"
"attr:`TextWrapper.break_long_words` is set to false."
msgstr ""
"O texto é preferencialmente colocado em espaços em branco e logo após os "
"hífens nas palavras hifenizadas; somente então palavras longas serão "
"quebradas se necessário, a menos que :attr:`TextWrapper.break_long_words` "
"seja definido como falso."

#: ../../library/textwrap.rst:52
msgid ""
"An additional utility function, :func:`dedent`, is provided to remove "
"indentation from strings that have unwanted whitespace to the left of the "
"text."
msgstr ""

#: ../../library/textwrap.rst:58
msgid "Remove any common leading whitespace from every line in *text*."
msgstr ""
"Remove qualquer espaço em branco inicial em comum de toda linha em *text*."

#: ../../library/textwrap.rst:60
msgid ""
"This can be used to make triple-quoted strings line up with the left edge of "
"the display, while still presenting them in the source code in indented form."
msgstr ""
"Isso pode ser usado para alinhar strings entre aspas triplas com a borda "
"esquerda da tela, enquanto ainda as apresenta no código-fonte em formato com "
"indentação."

#: ../../library/textwrap.rst:63
msgid ""
"Note that tabs and spaces are both treated as whitespace, but they are not "
"equal: the lines ``\"  hello\"`` and ``\"\\thello\"`` are considered to have "
"no common leading whitespace.  (This behaviour is new in Python 2.5; older "
"versions of this module incorrectly expanded tabs before searching for "
"common leading whitespace.)"
msgstr ""

#: ../../library/textwrap.rst:69
msgid ""
"Lines containing only whitespace are ignored in the input and normalized to "
"a single newline character in the output."
msgstr ""
"Linhas contendo apenas espaços em branco são ignoradas na entrada e "
"normalizadas para um único caractere de nova linha na saída."

#: ../../library/textwrap.rst:72
msgid "For example::"
msgstr "Por exemplo::"

#: ../../library/textwrap.rst:86
msgid ""
"The :class:`TextWrapper` constructor accepts a number of optional keyword "
"arguments.  Each argument corresponds to one instance attribute, so for "
"example ::"
msgstr ""

#: ../../library/textwrap.rst:92
msgid "is the same as  ::"
msgstr "é o mesmo que ::"

#: ../../library/textwrap.rst:97
msgid ""
"You can re-use the same :class:`TextWrapper` object many times, and you can "
"change any of its options through direct assignment to instance attributes "
"between uses."
msgstr ""

#: ../../library/textwrap.rst:101
msgid ""
"The :class:`TextWrapper` instance attributes (and keyword arguments to the "
"constructor) are as follows:"
msgstr ""
"Os atributos de instância :class:`TextWrapper` (e argumentos nomeados para o "
"construtor) são os seguintes:"

#: ../../library/textwrap.rst:107
msgid ""
"(default: ``70``) The maximum length of wrapped lines.  As long as there are "
"no individual words in the input text longer than :attr:`width`, :class:"
"`TextWrapper` guarantees that no output line will be longer than :attr:"
"`width` characters."
msgstr ""
"(padrão: ``70``) O comprimento máximo das linhas quebradas. Contanto que não "
"existam palavras individuais no texto de entrada maiores que :attr:`width`, :"
"class:`TextWrapper` garante que nenhuma linha de saída será maior que :attr:"
"`width` caracteres."

#: ../../library/textwrap.rst:115
msgid ""
"(default: ``True``) If true, then all tab characters in *text* will be "
"expanded to spaces using the :meth:`expandtabs` method of *text*."
msgstr ""

#: ../../library/textwrap.rst:121
msgid ""
"(default: ``True``) If true, after tab expansion but before wrapping, the :"
"meth:`wrap` method will replace each whitespace character with a single "
"space.  The whitespace characters replaced are as follows: tab, newline, "
"vertical tab, formfeed, and carriage return (``'\\t\\n\\v\\f\\r'``)."
msgstr ""
"(padrão: ``True``) Se verdadeiro, após a expansão da tabulação, mas antes da "
"quebra, o método :meth:`wrap` substituirá cada caractere de espaço em branco "
"por um único espaço. Os caracteres de espaço em branco substituídos são os "
"seguintes: tabulação, nova linha, tabulação vertical, feed de formulário e "
"retorno de carro (``'\\t\\n\\v\\f\\r'``)."

#: ../../library/textwrap.rst:129
msgid ""
"If :attr:`expand_tabs` is false and :attr:`replace_whitespace` is true, each "
"tab character will be replaced by a single space, which is *not* the same as "
"tab expansion."
msgstr ""
"Se :attr:`expand_tabs` for falso e :attr:`replace_whitespace` for "
"verdadeiro, cada caractere de tabulação será substituído por um único "
"espaço, que *não* é o mesmo que expansão de tabulação."

#: ../../library/textwrap.rst:135
msgid ""
"If :attr:`replace_whitespace` is false, newlines may appear in the middle of "
"a line and cause strange output. For this reason, text should be split into "
"paragraphs (using :meth:`str.splitlines` or similar) which are wrapped "
"separately."
msgstr ""
"Se :attr:`replace_whitespace` for falso, novas linhas podem aparecer no meio "
"de uma linha e causar uma saída estranha. Por esta razão, o texto deve ser "
"dividido em parágrafos (usando :meth:`str.splitlines` ou similar) que são "
"agrupados separadamente."

#: ../../library/textwrap.rst:143
msgid ""
"(default: ``True``) If true, whitespace at the beginning and ending of every "
"line (after wrapping but before indenting) is dropped. Whitespace at the "
"beginning of the paragraph, however, is not dropped if non-whitespace "
"follows it.  If whitespace being dropped takes up an entire line, the whole "
"line is dropped."
msgstr ""
"(padrão: ``True``) Se verdadeiro, os espaços em branco no início e no final "
"de cada linha (após quebra automática, mas antes do recuo) são eliminados. O "
"espaço em branco no início do parágrafo, entretanto, não será eliminado se "
"não houver espaço em branco após ele. Se o espaço em branco eliminado ocupar "
"uma linha inteira, a linha inteira será eliminada."

#: ../../library/textwrap.rst:149
msgid "Whitespace was always dropped in earlier versions."
msgstr ""

#: ../../library/textwrap.rst:155
msgid ""
"(default: ``''``) String that will be prepended to the first line of wrapped "
"output.  Counts towards the length of the first line.  The empty string is "
"not indented."
msgstr ""
"(padrão: ``''``) String que será anexada à primeira linha da saída com "
"quebra de linha. Conta para o comprimento da primeira linha. A string vazia "
"não recebe indentação."

#: ../../library/textwrap.rst:162
msgid ""
"(default: ``''``) String that will be prepended to all lines of wrapped "
"output except the first.  Counts towards the length of each line except the "
"first."
msgstr ""
"(padrão: ``''``) String que será anexada a todas as linhas da saída com "
"quebra de linha, exceto a primeira. Conta para o comprimento de cada linha, "
"exceto a primeira."

#: ../../library/textwrap.rst:169
msgid ""
"(default: ``False``) If true, :class:`TextWrapper` attempts to detect "
"sentence endings and ensure that sentences are always separated by exactly "
"two spaces.  This is generally desired for text in a monospaced font. "
"However, the sentence detection algorithm is imperfect: it assumes that a "
"sentence ending consists of a lowercase letter followed by one of ``'.'``, "
"``'!'``, or ``'?'``, possibly followed by one of ``'\"'`` or ``\"'\"``, "
"followed by a space.  One problem with this is algorithm is that it is "
"unable to detect the difference between \"Dr.\" in ::"
msgstr ""

#: ../../library/textwrap.rst:180
msgid "and \"Spot.\" in ::"
msgstr "e \"Spot.\" em ::"

#: ../../library/textwrap.rst:184
msgid ":attr:`fix_sentence_endings` is false by default."
msgstr ":attr:`fix_sentence_endings` é falso por padrão"

#: ../../library/textwrap.rst:186
msgid ""
"Since the sentence detection algorithm relies on ``string.lowercase`` for "
"the definition of \"lowercase letter,\" and a convention of using two spaces "
"after a period to separate sentences on the same line, it is specific to "
"English-language texts."
msgstr ""

#: ../../library/textwrap.rst:194
msgid ""
"(default: ``True``) If true, then words longer than :attr:`width` will be "
"broken in order to ensure that no lines are longer than :attr:`width`.  If "
"it is false, long words will not be broken, and some lines may be longer "
"than :attr:`width`.  (Long words will be put on a line by themselves, in "
"order to minimize the amount by which :attr:`width` is exceeded.)"
msgstr ""
"(padrão: ``True``) Se verdadeiro, palavras maiores que :attr:`width` serão "
"quebradas para garantir que nenhuma linha seja maior que :attr:`width`. Se "
"for falso, palavras longas não serão quebradas e algumas linhas poderão ser "
"maiores que :attr:`width`. (Palavras longas serão colocadas sozinhas em uma "
"linha, a fim de minimizar o valor pelo qual :attr:`width` é excedido.)"

#: ../../library/textwrap.rst:203
msgid ""
"(default: ``True``) If true, wrapping will occur preferably on whitespaces "
"and right after hyphens in compound words, as it is customary in English. If "
"false, only whitespaces will be considered as potentially good places for "
"line breaks, but you need to set :attr:`break_long_words` to false if you "
"want truly insecable words.  Default behaviour in previous versions was to "
"always allow breaking hyphenated words."
msgstr ""
"(padrão: ``True``) Se verdadeiro, a quebra ocorrerá preferencialmente em "
"espaços em branco e logo após hífens em palavras compostas, como é habitual "
"em inglês. Se for falso, apenas os espaços em branco serão considerados "
"locais potencialmente bons para quebras de linha, mas você precisa definir :"
"attr:`break_long_words` como falso se quiser palavras verdadeiramente "
"inseparáveis. O comportamento padrão nas versões anteriores era sempre "
"permitir a quebra de palavras hifenizadas."

#: ../../library/textwrap.rst:213
msgid ""
":class:`TextWrapper` also provides two public methods, analogous to the "
"module-level convenience functions:"
msgstr ""

#: ../../library/textwrap.rst:218
msgid ""
"Wraps the single paragraph in *text* (a string) so every line is at most :"
"attr:`width` characters long.  All wrapping options are taken from instance "
"attributes of the :class:`TextWrapper` instance.  Returns a list of output "
"lines, without final newlines.  If the wrapped output has no content, the "
"returned list is empty."
msgstr ""
"Quebra o parágrafo único em *text* (uma string) para que cada linha tenha no "
"máximo :attr:`width` caracteres. Todas as opções de quebra de linha são "
"obtidas dos atributos da instância :class:`TextWrapper`. Retorna uma lista "
"de linhas de saída, sem novas linhas finais. Se a saída agrupada não tiver "
"conteúdo, a lista retornada estará vazia."

#: ../../library/textwrap.rst:227
msgid ""
"Wraps the single paragraph in *text*, and returns a single string containing "
"the wrapped paragraph."
msgstr ""
"Quebra o parágrafo único em *text* e retorna uma única string contendo o "
"parágrafo quebrado."
