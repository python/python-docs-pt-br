# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-12 10:23+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/typing.rst:3
msgid ":mod:`typing` --- Support for type hints"
msgstr ":mod:`typing` --- Suporte para dicas de tipo"

#: ../../library/typing.rst:10
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr "**Código-fonte:** :source:`Lib/typing.py`"

#: ../../library/typing.rst:14
msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as type checkers, IDEs, linters, "
"etc."
msgstr ""
"O tempo de execução do Python não força anotações de tipos de variáveis e "
"funções. Elas podem ser usadas por ferramentas de terceiros como "
"verificadores de tipo, IDEs, linters, etc."

#: ../../library/typing.rst:20
msgid ""
"This module provides runtime support for type hints. The most fundamental "
"support consists of the types :data:`Any`, :data:`Union`, :data:`Callable`, :"
"class:`TypeVar`, and :class:`Generic`. For a full specification, please see :"
"pep:`484`. For a simplified introduction to type hints, see :pep:`483`."
msgstr ""

#: ../../library/typing.rst:26
msgid ""
"The function below takes and returns a string and is annotated as follows::"
msgstr ""
"A função abaixo recebe e retorna uma string e é anotada como a seguir::"

#: ../../library/typing.rst:31
msgid ""
"In the function ``greeting``, the argument ``name`` is expected to be of "
"type :class:`str` and the return type :class:`str`. Subtypes are accepted as "
"arguments."
msgstr ""
"Na função ``greeting``, é esperado que o argumento ``name`` seja do tipo :"
"class:`str` e o retorno do tipo :class:`str`. Subtipos são aceitos como "
"argumentos."

#: ../../library/typing.rst:35
msgid ""
"New features are frequently added to the ``typing`` module. The "
"`typing_extensions <https://pypi.org/project/typing-extensions/>`_ package "
"provides backports of these new features to older versions of Python."
msgstr ""
"Novos recursos são frequentemente adicionados ao módulo ``typing``. O pacote "
"`typing_extensions <https://pypi.org/project/typing-extensions/>`_ provê "
"suporte retroativo a estes novos recursos em versões anteriores do Python."

#: ../../library/typing.rst:41
msgid ""
"For a quick overview of type hints, refer to `this cheat sheet <https://mypy."
"readthedocs.io/en/stable/cheat_sheet_py3.html>`_."
msgstr ""

#: ../../library/typing.rst:44
msgid ""
"The \"Type System Reference\" section of https://mypy.readthedocs.io/ -- "
"since the Python typing system is standardised via PEPs, this reference "
"should broadly apply to most Python type checkers, although some parts may "
"still be specific to mypy."
msgstr ""

#: ../../library/typing.rst:49
msgid ""
"The documentation at https://typing.readthedocs.io/ serves as useful "
"reference for type system features, useful typing related tools and typing "
"best practices."
msgstr ""

#: ../../library/typing.rst:55
msgid "Relevant PEPs"
msgstr "PEPs Relevantes"

#: ../../library/typing.rst:57
msgid ""
"Since the initial introduction of type hints in :pep:`484` and :pep:`483`, a "
"number of PEPs have modified and enhanced Python's framework for type "
"annotations. These include:"
msgstr ""

#: ../../library/typing.rst:62
msgid ":pep:`526`: Syntax for Variable Annotations"
msgstr ":pep:`526`: Sintaxe para Anotações de Variável"

#: ../../library/typing.rst:62
msgid ""
"*Introducing* syntax for annotating variables outside of function "
"definitions, and :data:`ClassVar`"
msgstr ""
"\"Introduzindo\" sintaxe para anotar variáveis fora de definições de funções "
"e :data:`ClassVar`."

#: ../../library/typing.rst:65
msgid ":pep:`544`: Protocols: Structural subtyping (static duck typing)"
msgstr ""

#: ../../library/typing.rst:65
msgid ""
"*Introducing* :class:`Protocol` and the :func:"
"`@runtime_checkable<runtime_checkable>` decorator"
msgstr ""
"*Introduzindo* :class:`Protocol` e o decorador :func:"
"`@runtime_checkable<runtime_checkable>`."

#: ../../library/typing.rst:68
msgid ":pep:`585`: Type Hinting Generics In Standard Collections"
msgstr ""

#: ../../library/typing.rst:68
msgid ""
"*Introducing* :class:`types.GenericAlias` and the ability to use standard "
"library classes as :ref:`generic types<types-genericalias>`"
msgstr ""

#: ../../library/typing.rst:70
msgid ":pep:`586`: Literal Types"
msgstr ":pep:`586`: Tipos literais"

#: ../../library/typing.rst:71
msgid "*Introducing* :data:`Literal`"
msgstr "*Introduzindo* :data:`Literal`"

#: ../../library/typing.rst:72
msgid ""
":pep:`589`: TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys"
msgstr ""

#: ../../library/typing.rst:73
msgid "*Introducing* :class:`TypedDict`"
msgstr ""

#: ../../library/typing.rst:74
msgid ":pep:`591`: Adding a final qualifier to typing"
msgstr ":pep:`591`: Adicionando um qualificador final para escrita"

#: ../../library/typing.rst:75
msgid "*Introducing* :data:`Final` and the :func:`@final<final>` decorator"
msgstr ""

#: ../../library/typing.rst:76
msgid ":pep:`593`: Flexible function and variable annotations"
msgstr ""

#: ../../library/typing.rst:77
msgid "*Introducing* :data:`Annotated`"
msgstr ""

#: ../../library/typing.rst:80
msgid ":pep:`604`: Allow writing union types as ``X | Y``"
msgstr ""

#: ../../library/typing.rst:79
msgid ""
"*Introducing* :data:`types.UnionType` and the ability to use the binary-or "
"operator ``|`` to signify a :ref:`union of types<types-union>`"
msgstr ""

#: ../../library/typing.rst:82
msgid ":pep:`612`: Parameter Specification Variables"
msgstr ""

#: ../../library/typing.rst:83
msgid "*Introducing* :class:`ParamSpec` and :data:`Concatenate`"
msgstr ""

#: ../../library/typing.rst:84
msgid ":pep:`613`: Explicit Type Aliases"
msgstr ""

#: ../../library/typing.rst:85
msgid "*Introducing* :data:`TypeAlias`"
msgstr ""

#: ../../library/typing.rst:87
msgid ":pep:`647`: User-Defined Type Guards"
msgstr ""

#: ../../library/typing.rst:87
msgid "*Introducing* :data:`TypeGuard`"
msgstr ""

#: ../../library/typing.rst:92
msgid "Type aliases"
msgstr "Apelidos de tipo"

#: ../../library/typing.rst:94
msgid ""
"A type alias is defined by assigning the type to the alias. In this example, "
"``Vector`` and ``list[float]`` will be treated as interchangeable synonyms::"
msgstr ""
"Um apelido de tipo é definido ao atribuir o tipo ao apelido. Nesse exemplo, "
"``Vector`` e ``list[float]`` serão tratados como sinônimos intercambiáveis::"

#: ../../library/typing.rst:105
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr ""
"Apelidos de tipo são úteis para simplificar assinaturas de tipo complexas. "
"Por exemplo::"

#: ../../library/typing.rst:123
msgid ""
"Note that ``None`` as a type hint is a special case and is replaced by "
"``type(None)``."
msgstr ""
"Note que ``None`` como uma dica de tipo é um caso especial e é substituído "
"por ``type(None)``."

#: ../../library/typing.rst:129
msgid "NewType"
msgstr "NewType"

#: ../../library/typing.rst:131
msgid "Use the :class:`NewType` helper to create distinct types::"
msgstr "Utilize o auxiliar :class:`NewType` para criar tipos únicos::"

#: ../../library/typing.rst:138
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr ""
"O verificador de tipo estático tratará o novo tipo como se fosse uma "
"subclasse do tipo original. Isso é útil para ajudar a encontrar erros de "
"lógica::"

#: ../../library/typing.rst:150
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent "
"you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""
"Você ainda pode executar todas as operações ``int`` em uma variável do tipo "
"``UserId``, mas o resultado sempre será do tipo ``int``. Isso permite que "
"você passe um ``UserId`` em qualquer ocasião que ``int`` possa ser esperado, "
"mas previne que você acidentalmente crie um ``UserId`` de uma forma "
"inválida::"

#: ../../library/typing.rst:158
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime, the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a callable that immediately returns whatever parameter you pass "
"it. That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce much overhead beyond that of a regular function call."
msgstr ""
"Note que essas verificações são aplicadas apenas pelo verificador de tipo "
"estático. Em tempo de execução, a instrução ``Derived = NewType('Derived', "
"Base)`` irá tornar ``Derived`` um chamável que retornará imediatamente "
"qualquer parâmetro que você passar. Isso significa que a expressão "
"``Derived(some_value)`` não cria uma nova classe ou introduz sobrecarga além "
"de uma chamada regular de função.instrução"

#: ../../library/typing.rst:164
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr ""
"Mais precisamente, a expressão ``some_value is Derived(some_value)`` é "
"sempre verdadeira em tempo de execução."

#: ../../library/typing.rst:167
msgid "It is invalid to create a subtype of ``Derived``::"
msgstr "É inválido criar um subtipo de ``Derived``::"

#: ../../library/typing.rst:176
msgid ""
"However, it is possible to create a :class:`NewType` based on a 'derived' "
"``NewType``::"
msgstr ""
"No entanto, é possível criar um :class:`NewType` baseado em um 'derivado' "
"``NewType``::"

#: ../../library/typing.rst:184
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr "e a verificação de tipos para ``ProUserId`` funcionará como esperado."

#: ../../library/typing.rst:186
msgid "See :pep:`484` for more details."
msgstr "Veja :pep:`484` para mais detalhes."

#: ../../library/typing.rst:190
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to "
"one another. Doing ``Alias = Original`` will make the static type checker "
"treat ``Alias`` as being *exactly equivalent* to ``Original`` in all cases. "
"This is useful when you want to simplify complex type signatures."
msgstr ""
"Relembre que o uso de um apelido de tipo declara que dois tipos serão "
"*equivalentes* entre si. Efetuar ``Alias = Original`` irá fazer o "
"verificador de tipo estático tratar ``Alias`` como sendo *exatamente "
"equivalente* a ``Original`` em todos os casos. Isso é útil quando você "
"deseja simplificar assinaturas de tipo complexas."

#: ../../library/typing.rst:195
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""
"Em contraste, ``NewType`` declara que um tipo será *subtipo* de outro. "
"Efetuando ``Derived = NewType('Derived', Original)`` irá fazer o verificador "
"de tipo estático tratar ``Derived`` como uma *subclasse* de ``Original``, o "
"que significa que um valor do tipo ``Original`` não pode ser utilizado onde "
"um valor do tipo ``Derived`` é esperado. Isso é útil quando você deseja "
"evitar erros de lógica com custo mínimo de tempo de execução."

#: ../../library/typing.rst:204
msgid ""
"``NewType`` is now a class rather than a function.  There is some additional "
"runtime cost when calling ``NewType`` over a regular function.  However, "
"this cost will be reduced in 3.11.0."
msgstr ""
"``NewType`` é agora uma classe ao invés de uma função.  Há algum custo "
"adicional de tempo de execução ao chamar ``NewType`` ao invés de uma função "
"regular.  Entretanto, esse custo será reduzido na 3.11.0."

#: ../../library/typing.rst:211
msgid "Callable"
msgstr "Callable"

#: ../../library/typing.rst:213
msgid ""
"Frameworks expecting callback functions of specific signatures might be type "
"hinted using ``Callable[[Arg1Type, Arg2Type], ReturnType]``."
msgstr ""
"Frameworks que esperam funções de retorno com assinaturas específicas podem "
"ter seus tipos indicados usando ``Callable[[Arg1Type, Arg2Type], "
"ReturnType]``."

#: ../../library/typing.rst:216 ../../library/typing.rst:1031
#: ../../library/typing.rst:2286
msgid "For example::"
msgstr "Por exemplo::"

#: ../../library/typing.rst:231
msgid ""
"It is possible to declare the return type of a callable without specifying "
"the call signature by substituting a literal ellipsis for the list of "
"arguments in the type hint: ``Callable[..., ReturnType]``."
msgstr ""
"É possível declarar o tipo de retorno de um chamável sem especificar a "
"assinatura da chamada, substituindo por reticências literais a lista de "
"argumentos na dica de tipo: ``Callable[..., ReturnType]``."

#: ../../library/typing.rst:235 ../../library/typing.rst:722
msgid ""
"Callables which take other callables as arguments may indicate that their "
"parameter types are dependent on each other using :class:`ParamSpec`. "
"Additionally, if that callable adds or removes arguments from other "
"callables, the :data:`Concatenate` operator may be used.  They take the form "
"``Callable[ParamSpecVariable, ReturnType]`` and "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` respectively."
msgstr ""
"Chamáveis que recebem outros chamáveis como argumentos podem indicar que "
"seus tipos de parâmetro dependem uns dos outros usando :class:`ParamSpec`. "
"Além disso, se esse chamável adiciona ou remove argumentos de outros "
"chamáveis, o operador :data:`Concatenate` pode ser usado.  Eles assumem a "
"forma de ``Callable[ParamSpecVariable, ReturnType]`` e "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]``, respectivamente."

#: ../../library/typing.rst:243 ../../library/typing.rst:734
msgid ""
"``Callable`` now supports :class:`ParamSpec` and :data:`Concatenate`. See :"
"pep:`612` for more details."
msgstr ""
"``Callable`` agora oferece suporte a :class:`ParamSpec` e :data:"
"`Concatenate`. Veja :pep:`612` para mais detalhes."

#: ../../library/typing.rst:248
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provides "
"examples of usage in ``Callable``."
msgstr ""
"A documentação para :class:`ParamSpec` e :class:`Concatenate` contém "
"exemplos de uso em ``Callable``."

#: ../../library/typing.rst:254
msgid "Generics"
msgstr "Genéricos"

#: ../../library/typing.rst:256
msgid ""
"Since type information about objects kept in containers cannot be statically "
"inferred in a generic way, abstract base classes have been extended to "
"support subscription to denote expected types for container elements."
msgstr ""

#: ../../library/typing.rst:267
msgid ""
"Generics can be parameterized by using a factory available in typing called :"
"class:`TypeVar`."
msgstr ""

#: ../../library/typing.rst:283
msgid "User-defined generic types"
msgstr "Tipos genéricos definidos pelo usuário"

#: ../../library/typing.rst:285
msgid "A user-defined class can be defined as a generic class."
msgstr ""
"Uma classe definida pelo usuário pode ser definica como uma classe genérica."

#: ../../library/typing.rst:311
msgid ""
"``Generic[T]`` as a base class defines that the class ``LoggedVar`` takes a "
"single type parameter ``T`` . This also makes ``T`` valid as a type within "
"the class body."
msgstr ""

#: ../../library/typing.rst:315
msgid ""
"The :class:`Generic` base class defines :meth:`~object.__class_getitem__` so "
"that ``LoggedVar[T]`` is valid as a type::"
msgstr ""

#: ../../library/typing.rst:324
msgid ""
"A generic type can have any number of type variables. All varieties of :"
"class:`TypeVar` are permissible as parameters for a generic type::"
msgstr ""
"Um tipo genérico pode ter qualquer número de tipos de variáveis. Todas as "
"variedades de :class:`TypeVar` são permitidas como parâmetros para um tipo "
"genérico::"

#: ../../library/typing.rst:336
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ""
"Cada tipo dos argumentos para :class:`Generic` devem ser distintos. Assim, "
"os seguintes exemplos são inválidos::"

#: ../../library/typing.rst:347
msgid "You can use multiple inheritance with :class:`Generic`::"
msgstr ""

#: ../../library/typing.rst:357
msgid ""
"When inheriting from generic classes, some type variables could be fixed::"
msgstr ""

#: ../../library/typing.rst:367
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr "Neste caso ``MyDict`` possui um único parâmetro, ``T``."

#: ../../library/typing.rst:369
msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any` "
"for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``::"
msgstr ""

#: ../../library/typing.rst:377
msgid "User defined generic type aliases are also supported. Examples::"
msgstr ""

#: ../../library/typing.rst:394
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ":class:`Generic` não possui mais uma metaclasse personalizada."

#: ../../library/typing.rst:397
msgid ""
"User-defined generics for parameter expressions are also supported via "
"parameter specification variables in the form ``Generic[P]``.  The behavior "
"is consistent with type variables' described above as parameter "
"specification variables are treated by the typing module as a specialized "
"type variable.  The one exception to this is that a list of types can be "
"used to substitute a :class:`ParamSpec`::"
msgstr ""

#: ../../library/typing.rst:414
msgid ""
"Furthermore, a generic with only one parameter specification variable will "
"accept parameter lists in the forms ``X[[Type1, Type2, ...]]`` and also "
"``X[Type1, Type2, ...]`` for aesthetic reasons.  Internally, the latter is "
"converted to the former, so the following are equivalent::"
msgstr ""

#: ../../library/typing.rst:426
msgid ""
"Do note that generics with :class:`ParamSpec` may not have correct "
"``__parameters__`` after substitution in some cases because they are "
"intended primarily for static type checking."
msgstr ""

#: ../../library/typing.rst:430
msgid ""
":class:`Generic` can now be parameterized over parameter expressions. See :"
"class:`ParamSpec` and :pep:`612` for more details."
msgstr ""
":class:`Generic` agora pode ser parametrizado através de expressões de "
"parâmetros. Veja :class:`ParamSpec` e :pep:`612` para mais detalhes."

#: ../../library/typing.rst:434
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the typing module are :"
"term:`hashable` and comparable for equality."
msgstr ""
"Uma classe genérica definida pelo usuário pode ter ABCs como classes base "
"sem conflito de metaclasse. Não há suporte a metaclasses genéricas. O "
"resultado da parametrização de genéricos é armazenado em cache, e a maioria "
"dos tipos no módulo typing são :term:`hasheáveis <hasheável>` e comparáveis "
"em termos de igualdade."

#: ../../library/typing.rst:441
msgid "The :data:`Any` type"
msgstr "O tipo :data:`Any`"

#: ../../library/typing.rst:443
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""
"Um tipo especial de tipo é :data:`Any`. Um verificador de tipo estático "
"tratará cada tipo como sendo compatível com :data:`Any` e :data:`Any` como "
"sendo compatível com todos os tipos."

#: ../../library/typing.rst:447
msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type :data:`Any` and assign it to any variable::"
msgstr ""
"Isso significa que é possível realizar qualquer operação ou chamada de "
"método sobre um valor do tipo :data:`Any` e atribuí-lo a qualquer variável::"

#: ../../library/typing.rst:465
msgid ""
"Notice that no type checking is performed when assigning a value of type :"
"data:`Any` to a more precise type. For example, the static type checker did "
"not report an error when assigning ``a`` to ``s`` even though ``s`` was "
"declared to be of type :class:`str` and receives an :class:`int` value at "
"runtime!"
msgstr ""
"Observe que nenhuma verificação de tipo é realizada ao atribuir um valor do "
"tipo :data:`Any` a um tipo mais preciso. Por exemplo, o verificador de tipo "
"estático não relatou um erro ao atribuir ``a`` a ``s`` mesmo que ``s`` tenha "
"sido declarado como sendo do tipo :class:`str` e receba um valor :class:"
"`int` em tempo de execução!"

#: ../../library/typing.rst:471
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr ""
"Além disso, todas as funções sem um tipo de retorno ou tipos de parâmetro "
"terão como padrão implicitamente o uso de :data:`Any`::"

#: ../../library/typing.rst:484
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr ""
"Este comportamento permite que :data:`Any` seja usado como uma *saída de "
"emergência* quando você precisar misturar código tipado dinamicamente e "
"estaticamente."

#: ../../library/typing.rst:487
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However, "
"unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""
"Compare o comportamento de :data:`Any` com o comportamento de :class:"
"`object`. Semelhante a :data:`Any`, todo tipo é um subtipo de :class:"
"`object`. No entanto, ao contrário de :data:`Any`, o inverso não é "
"verdadeiro: :class:`object` *não* é um subtipo de qualquer outro tipo."

#: ../../library/typing.rst:492
msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using "
"it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""
"Isso significa que quando o tipo de um valor é :class:`object`, um "
"verificador de tipo rejeitará quase todas as operações nele, e atribuí-lo a "
"uma variável (ou usá-la como valor de retorno) de um tipo mais especializado "
"é um tipo erro. Por exemplo::"

#: ../../library/typing.rst:514
msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe "
"manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr ""
"Use :class:`object` para indicar que um valor pode ser de qualquer tipo de "
"maneira segura. Use :data:`Any` para indicar que um valor é tipado "
"dinamicamente."

#: ../../library/typing.rst:519
msgid "Nominal vs structural subtyping"
msgstr "Subtipagem nominal vs estrutural"

#: ../../library/typing.rst:521
msgid ""
"Initially :pep:`484` defined the Python static type system as using *nominal "
"subtyping*. This means that a class ``A`` is allowed where a class ``B`` is "
"expected if and only if ``A`` is a subclass of ``B``."
msgstr ""
"Inicialmente a :pep:`484` definiu o sistema de tipos estáticos do Python "
"como usando *subtipagem nominal*. Isto significa que uma classe ``A`` é "
"permitida onde uma classe ``B`` é esperada se e somente se ``A`` for uma "
"subclasse de ``B``."

#: ../../library/typing.rst:525
msgid ""
"This requirement previously also applied to abstract base classes, such as :"
"class:`~collections.abc.Iterable`. The problem with this approach is that a "
"class had to be explicitly marked to support them, which is unpythonic and "
"unlike what one would normally do in idiomatic dynamically typed Python "
"code. For example, this conforms to :pep:`484`::"
msgstr ""
"Este requisito anteriormente também se aplicava a classes base abstratas, "
"como :class:`~collections.abc.Iterable`. O problema com essa abordagem é que "
"uma classe teve que ser marcada explicitamente para suportá-los, o que não é "
"pythônico e diferente do que normalmente seria feito em código Python de "
"tipo dinamicamente idiomático. Por exemplo, isso está em conformidade com :"
"pep:`484`::"

#: ../../library/typing.rst:538
msgid ""
":pep:`544` allows to solve this problem by allowing users to write the above "
"code without explicit base classes in the class definition, allowing "
"``Bucket`` to be implicitly considered a subtype of both ``Sized`` and "
"``Iterable[int]`` by static type checkers. This is known as *structural "
"subtyping* (or static duck-typing)::"
msgstr ""
":pep:`544` permite resolver este problema permitindo que os usuários "
"escrevam o código acima sem classes base explícitas na definição de classe, "
"permitindo que ``Bucket`` seja implicitamente considerado um subtipo de "
"``Sized`` e ``Iterable[int]`` por verificador de tipo estático. Isso é "
"conhecido como *subtipagem estrutural* (ou tipagem pato estática)::"

#: ../../library/typing.rst:554
msgid ""
"Moreover, by subclassing a special class :class:`Protocol`, a user can "
"define new custom protocols to fully enjoy structural subtyping (see "
"examples below)."
msgstr ""
"Além disso, ao criar uma subclasse de uma classe especial :class:`Protocol`, "
"um usuário pode definir novos protocolos personalizados para aproveitar ao "
"máximo a subtipagem estrutural (veja exemplos abaixo)."

#: ../../library/typing.rst:559
msgid "Module contents"
msgstr "Conteúdo do módulo"

#: ../../library/typing.rst:561
msgid "The module defines the following classes, functions and decorators."
msgstr ""

#: ../../library/typing.rst:565
msgid ""
"This module defines several types that are subclasses of pre-existing "
"standard library classes which also extend :class:`Generic` to support type "
"variables inside ``[]``. These types became redundant in Python 3.9 when the "
"corresponding pre-existing classes were enhanced to support ``[]``."
msgstr ""

#: ../../library/typing.rst:571
msgid ""
"The redundant types are deprecated as of Python 3.9 but no deprecation "
"warnings will be issued by the interpreter. It is expected that type "
"checkers will flag the deprecated types when the checked program targets "
"Python 3.9 or newer."
msgstr ""

#: ../../library/typing.rst:576
msgid ""
"The deprecated types will be removed from the :mod:`typing` module in the "
"first Python version released 5 years after the release of Python 3.9.0. See "
"details in :pep:`585`—*Type Hinting Generics In Standard Collections*."
msgstr ""

#: ../../library/typing.rst:582
msgid "Special typing primitives"
msgstr "Tipos primitivos especiais"

#: ../../library/typing.rst:585
msgid "Special types"
msgstr "Tipos especiais"

#: ../../library/typing.rst:587
msgid "These can be used as types in annotations and do not support ``[]``."
msgstr ""

#: ../../library/typing.rst:591
msgid "Special type indicating an unconstrained type."
msgstr "Tipo especial que indica um tipo irrestrito."

#: ../../library/typing.rst:593
msgid "Every type is compatible with :data:`Any`."
msgstr "Todos os tipos são compatíveis com :data:`Any`."

#: ../../library/typing.rst:594
msgid ":data:`Any` is compatible with every type."
msgstr ":data:`Any` é compatível com todos os tipos."

#: ../../library/typing.rst:598
msgid "Special type indicating that a function never returns. For example::"
msgstr ""

#: ../../library/typing.rst:611
msgid ""
"Special annotation for explicitly declaring a :ref:`type alias <type-"
"aliases>`. For example::"
msgstr ""

#: ../../library/typing.rst:618
msgid "See :pep:`613` for more details about explicit type aliases."
msgstr ""

#: ../../library/typing.rst:623
msgid "Special forms"
msgstr "Formas especiais"

#: ../../library/typing.rst:625
msgid ""
"These can be used as types in annotations using ``[]``, each having a unique "
"syntax."
msgstr ""

#: ../../library/typing.rst:629
msgid ""
"Tuple type; ``Tuple[X, Y]`` is the type of a tuple of two items with the "
"first item of type X and the second of type Y. The type of the empty tuple "
"can be written as ``Tuple[()]``."
msgstr ""

#: ../../library/typing.rst:633
msgid ""
"Example: ``Tuple[T1, T2]`` is a tuple of two elements corresponding to type "
"variables T1 and T2.  ``Tuple[int, float, str]`` is a tuple of an int, a "
"float and a string."
msgstr ""

#: ../../library/typing.rst:637
msgid ""
"To specify a variable-length tuple of homogeneous type, use literal "
"ellipsis, e.g. ``Tuple[int, ...]``. A plain :data:`Tuple` is equivalent to "
"``Tuple[Any, ...]``, and in turn to :class:`tuple`."
msgstr ""

#: ../../library/typing.rst:641
msgid ""
":class:`builtins.tuple <tuple>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.tuple <tuple>` agora oferece suporte a subscrição (``[]``). "
"Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:647
msgid ""
"Union type; ``Union[X, Y]`` is equivalent to ``X | Y`` and means either X or "
"Y."
msgstr ""
"Tipo de união;  ``Union[X, Y]`` é equivalente a ``X | Y`` e significa X ou Y."

#: ../../library/typing.rst:649
msgid ""
"To define a union, use e.g. ``Union[int, str]`` or the shorthand ``int | "
"str``. Using that shorthand is recommended. Details:"
msgstr ""
"Para definir uma união, use, por exemplo. ``Union[int, str]`` ou a "
"abreviatura ``int | str``. Usar essa abreviação é recomendado. Detalhes:"

#: ../../library/typing.rst:651
msgid "The arguments must be types and there must be at least one."
msgstr "Os argumentos devem ser tipos e deve haver pelo menos um."

#: ../../library/typing.rst:653
msgid "Unions of unions are flattened, e.g.::"
msgstr "As uniões de uniões são achatadas, por exemplo::"

#: ../../library/typing.rst:657
msgid "Unions of a single argument vanish, e.g.::"
msgstr "As uniões de um único argumento desaparecem, por exemplo::"

#: ../../library/typing.rst:661
msgid "Redundant arguments are skipped, e.g.::"
msgstr "Argumento redundantes são pulados, e.g.::"

#: ../../library/typing.rst:665
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr "Ao comparar uniões, a ordem de argumentos é ignorada. Por exemplo::"

#: ../../library/typing.rst:669
msgid "You cannot subclass or instantiate a ``Union``."
msgstr "Você não pode estender ou instanciar uma ``Union``"

#: ../../library/typing.rst:671
msgid "You cannot write ``Union[X][Y]``."
msgstr "Você não pode escrever ``Union[X][Y]``."

#: ../../library/typing.rst:673
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr "Não remova subclasses explícitas de uniões em tempo de execução."

#: ../../library/typing.rst:676
msgid ""
"Unions can now be written as ``X | Y``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""
"Uniões agora podem ser escritas com ``X | Y``. Veja :ref:`expressões de "
"união de tipos <types-union>`."

#: ../../library/typing.rst:682
msgid "Optional type."
msgstr ""

#: ../../library/typing.rst:684
msgid "``Optional[X]`` is equivalent to ``X | None`` (or ``Union[X, None]``)."
msgstr "``Optional[X]`` equivale a ``X | None`` (ou ``Union[X, None]``)."

#: ../../library/typing.rst:686
msgid ""
"Note that this is not the same concept as an optional argument, which is one "
"that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""
"Note que isso não é o mesmo conceito de um argumento opcional, que possui um "
"valor por padrão. Um argumento opcional com padrão não requer o qualificador "
"``Optional`` em sua anotação de tipo só por ser opcional. Por exemplo::"

#: ../../library/typing.rst:694
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr ""
"Por outro lado, se um valor explícito de ``None`` for permitido, o uso de "
"``Optional`` é apropriado, seja o argumento opcional ou não. Por exemplo::"

#: ../../library/typing.rst:701
msgid ""
"Optional can now be written as ``X | None``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""
"Optional agora pode ser escrito como ``X | None``. Veja :ref:`expressões de "
"união de tipos<types-union>`."

#: ../../library/typing.rst:707
msgid "Callable type; ``Callable[[int], str]`` is a function of (int) -> str."
msgstr ""

#: ../../library/typing.rst:709
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types or an ellipsis; the return type must be a single type."
msgstr ""

#: ../../library/typing.rst:714
msgid ""
"There is no syntax to indicate optional or keyword arguments; such function "
"types are rarely used as callback types. ``Callable[..., ReturnType]`` "
"(literal ellipsis) can be used to type hint a callable taking any number of "
"arguments and returning ``ReturnType``.  A plain :data:`Callable` is "
"equivalent to ``Callable[..., Any]``, and in turn to :class:`collections.abc."
"Callable`."
msgstr ""

#: ../../library/typing.rst:730
msgid ""
":class:`collections.abc.Callable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Callable` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:739
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provide "
"examples of usage with ``Callable``."
msgstr ""

#: ../../library/typing.rst:744
msgid ""
"Used with :data:`Callable` and :class:`ParamSpec` to type annotate a higher "
"order callable which adds, removes, or transforms parameters of another "
"callable.  Usage is in the form ``Concatenate[Arg1Type, Arg2Type, ..., "
"ParamSpecVariable]``. ``Concatenate`` is currently only valid when used as "
"the first argument to a :data:`Callable`. The last parameter to "
"``Concatenate`` must be a :class:`ParamSpec`."
msgstr ""

#: ../../library/typing.rst:751
msgid ""
"For example, to annotate a decorator ``with_lock`` which provides a :class:"
"`threading.Lock` to the decorated function,  ``Concatenate`` can be used to "
"indicate that ``with_lock`` expects a callable which takes in a ``Lock`` as "
"the first argument, and returns a callable with a different type signature.  "
"In this case, the :class:`ParamSpec` indicates that the returned callable's "
"parameter types are dependent on the parameter types of the callable being "
"passed in::"
msgstr ""
"Por exemplo, para anotar um decorador ``with_lock`` que oferece uma "
"instância de :class:`threading.Lock` para a função decorada, ``Concatenate`` "
"pode ser usado para indicar que ``with_lock`` espera um chamável cujo "
"primeiro argumento tem tipo ``Lock``, e retorna um chamável com uma "
"assinatura de tipos diferente. Neste caso, o :class:`ParamSpec` indica que "
"os tipos dos parâmetros do chamável retornado dependem dos tipos dos "
"parâmetros do chamável de entrada::"

#: ../../library/typing.rst:790 ../../library/typing.rst:1276
msgid ""
":pep:`612` -- Parameter Specification Variables (the PEP which introduced "
"``ParamSpec`` and ``Concatenate``)."
msgstr ""

#: ../../library/typing.rst:792
msgid ":class:`ParamSpec` and :class:`Callable`."
msgstr ""

#: ../../library/typing.rst:797
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``Type[C]`` may accept values that are "
"classes themselves -- specifically, it will accept the *class object* of "
"``C``. For example::"
msgstr ""

#: ../../library/typing.rst:806
msgid "Note that ``Type[C]`` is covariant::"
msgstr ""

#: ../../library/typing.rst:818
msgid ""
"The fact that ``Type[C]`` is covariant implies that all subclasses of ``C`` "
"should implement the same constructor signature and class method signatures "
"as ``C``. The type checker should flag violations of this, but should also "
"allow constructor calls in subclasses that match the constructor calls in "
"the indicated base class. How the type checker is required to handle this "
"particular case may change in future revisions of :pep:`484`."
msgstr ""

#: ../../library/typing.rst:826
msgid ""
"The only legal parameters for :class:`Type` are classes, :data:`Any`, :ref:"
"`type variables <generics>`, and unions of any of these types. For example::"
msgstr ""

#: ../../library/typing.rst:832
msgid ""
"``Type[Any]`` is equivalent to ``Type`` which in turn is equivalent to "
"``type``, which is the root of Python's metaclass hierarchy."
msgstr ""

#: ../../library/typing.rst:837
msgid ""
":class:`builtins.type <type>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.type <type>` agora oferece suporte a subscrição (``[]``). "
"Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:843
msgid ""
"A type that can be used to indicate to type checkers that the corresponding "
"variable or function parameter has a value equivalent to the provided "
"literal (or one of several literals). For example::"
msgstr ""

#: ../../library/typing.rst:857
msgid ""
"``Literal[...]`` cannot be subclassed. At runtime, an arbitrary value is "
"allowed as type argument to ``Literal[...]``, but type checkers may impose "
"restrictions. See :pep:`586` for more details about literal types."
msgstr ""
"``Literal[...]`` não é subclasse. Em tempo de execução, permite-se um valor "
"arbitrário como argumento de tipo para ``Literal[...]``, mas verificadores "
"de tipo podem impor restrições. Veja :pep:`586` para mais detalhes sobre "
"tipos literais."

#: ../../library/typing.rst:863
msgid ""
"``Literal`` now de-duplicates parameters.  Equality comparisons of "
"``Literal`` objects are no longer order dependent. ``Literal`` objects will "
"now raise a :exc:`TypeError` exception during equality comparisons if one of "
"their parameters are not :term:`hashable`."
msgstr ""
"``Literal`` agora remove parâmetros duplicados. Comparações de igualdade "
"entre objetos ``Literal`` não dependem da ordem. Objetos ``Literal`` agora "
"levantam uma exceção :exc:`TypeError` durante comparações de igualdade se um "
"de seus parâmetros não for :term:`hasheável<hashable>`."

#: ../../library/typing.rst:871
msgid "Special type construct to mark class variables."
msgstr "Uma construção especial de tipagem para marcar variáveis de classe."

#: ../../library/typing.rst:873
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr ""
"Como introduzido na :pep:`526`, uma variável cuja anotação de tipo tem um "
"invólucro ClassVar indica que um dado atributo deve ser usado como uma "
"variável de classe, e que ele não deve ser definido em instâncias dessa "
"classe. Modo de usar::"

#: ../../library/typing.rst:881
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ""
":data:`ClassVar` aceita apenas tipos e não pode ser subscrita posteriormente."

#: ../../library/typing.rst:883
msgid ""
":data:`ClassVar` is not a class itself, and should not be used with :func:"
"`isinstance` or :func:`issubclass`. :data:`ClassVar` does not change Python "
"runtime behavior, but it can be used by third-party type checkers. For "
"example, a type checker might flag the following code as an error::"
msgstr ""
":data:`ClassVar` não é uma classe, e não deve ser usada com :func:"
"`isinstance` ou :func:`issubclass`. :data:`ClassVar` não muda com o "
"comportamento do Python em tempo de execução, mas pode ser usada por "
"verificadores de tipos de terceiros. Por exemplo, um verificador de tipos "
"pode sinalizar que o seguinte código é errado::"

#: ../../library/typing.rst:897
msgid ""
"A special typing construct to indicate to type checkers that a name cannot "
"be re-assigned or overridden in a subclass. For example::"
msgstr ""

#: ../../library/typing.rst:909 ../../library/typing.rst:2181
msgid ""
"There is no runtime checking of these properties. See :pep:`591` for more "
"details."
msgstr ""
"Não há verificação em tempo de execução dessas propriedades. Veja :pep:`591` "
"para mais detalhes."

#: ../../library/typing.rst:916
msgid ""
"A type, introduced in :pep:`593` (``Flexible function and variable "
"annotations``), to decorate existing types with context-specific metadata "
"(possibly multiple pieces of it, as ``Annotated`` is variadic). "
"Specifically, a type ``T`` can be annotated with metadata ``x`` via the "
"typehint ``Annotated[T, x]``. This metadata can be used for either static "
"analysis or at runtime. If a library (or tool) encounters a typehint "
"``Annotated[T, x]`` and has no special logic for metadata ``x``, it should "
"ignore it and simply treat the type as ``T``. Unlike the ``no_type_check`` "
"functionality that currently exists in the ``typing`` module which "
"completely disables typechecking annotations on a function or a class, the "
"``Annotated`` type allows for both static typechecking of ``T`` (which can "
"safely ignore ``x``) together with runtime access to ``x`` within a specific "
"application."
msgstr ""

#: ../../library/typing.rst:930
msgid ""
"Ultimately, the responsibility of how to interpret the annotations (if at "
"all) is the responsibility of the tool or library encountering the "
"``Annotated`` type. A tool or library encountering an ``Annotated`` type can "
"scan through the annotations to determine if they are of interest (e.g., "
"using ``isinstance()``)."
msgstr ""

#: ../../library/typing.rst:936
msgid ""
"When a tool or a library does not support annotations or encounters an "
"unknown annotation it should just ignore it and treat annotated type as the "
"underlying type."
msgstr ""

#: ../../library/typing.rst:940
msgid ""
"It's up to the tool consuming the annotations to decide whether the client "
"is allowed to have several annotations on one type and how to merge those "
"annotations."
msgstr ""

#: ../../library/typing.rst:944
msgid ""
"Since the ``Annotated`` type allows you to put several annotations of the "
"same (or different) type(s) on any node, the tools or libraries consuming "
"those annotations are in charge of dealing with potential duplicates. For "
"example, if you are doing value range analysis you might allow this::"
msgstr ""

#: ../../library/typing.rst:953
msgid ""
"Passing ``include_extras=True`` to :func:`get_type_hints` lets one access "
"the extra annotations at runtime."
msgstr ""

#: ../../library/typing.rst:956
msgid "The details of the syntax:"
msgstr ""

#: ../../library/typing.rst:958
msgid "The first argument to ``Annotated`` must be a valid type"
msgstr "O primeiro argumento de ``Annotated`` deve ser um tipo válido"

#: ../../library/typing.rst:960
msgid ""
"Multiple type annotations are supported (``Annotated`` supports variadic "
"arguments)::"
msgstr ""

#: ../../library/typing.rst:965
msgid ""
"``Annotated`` must be called with at least two arguments "
"( ``Annotated[int]`` is not valid)"
msgstr ""

#: ../../library/typing.rst:968
msgid ""
"The order of the annotations is preserved and matters for equality checks::"
msgstr ""

#: ../../library/typing.rst:975
msgid ""
"Nested ``Annotated`` types are flattened, with metadata ordered starting "
"with the innermost annotation::"
msgstr ""

#: ../../library/typing.rst:982
msgid "Duplicated annotations are not removed::"
msgstr ""

#: ../../library/typing.rst:988
msgid "``Annotated`` can be used with nested and generic aliases::"
msgstr ""

#: ../../library/typing.rst:1001
msgid ""
"Special typing form used to annotate the return type of a user-defined type "
"guard function.  ``TypeGuard`` only accepts a single type argument. At "
"runtime, functions marked this way should return a boolean."
msgstr ""

#: ../../library/typing.rst:1005
msgid ""
"``TypeGuard`` aims to benefit *type narrowing* -- a technique used by static "
"type checkers to determine a more precise type of an expression within a "
"program's code flow.  Usually type narrowing is done by analyzing "
"conditional code flow and applying the narrowing to a block of code.  The "
"conditional expression here is sometimes referred to as a \"type guard\"::"
msgstr ""

#: ../../library/typing.rst:1020
msgid ""
"Sometimes it would be convenient to use a user-defined boolean function as a "
"type guard.  Such a function should use ``TypeGuard[...]`` as its return "
"type to alert static type checkers to this intention."
msgstr ""

#: ../../library/typing.rst:1024
msgid ""
"Using  ``-> TypeGuard`` tells the static type checker that for a given "
"function:"
msgstr ""
"Usar ``-> TypeGuard`` informa ao verificador de tipo estático que, para uma "
"determinada função:"

#: ../../library/typing.rst:1027
msgid "The return value is a boolean."
msgstr "O valor de retorno é um booleano."

#: ../../library/typing.rst:1028
msgid ""
"If the return value is ``True``, the type of its argument is the type inside "
"``TypeGuard``."
msgstr ""
"Se o valor de retorno for ``True``, o tipo de seu argumento é o tipo dentro "
"de ``TypeGuard``."

#: ../../library/typing.rst:1045
msgid ""
"If ``is_str_list`` is a class or instance method, then the type in "
"``TypeGuard`` maps to the type of the second parameter after ``cls`` or "
"``self``."
msgstr ""

#: ../../library/typing.rst:1049
msgid ""
"In short, the form ``def foo(arg: TypeA) -> TypeGuard[TypeB]: ...``, means "
"that if ``foo(arg)`` returns ``True``, then ``arg`` narrows from ``TypeA`` "
"to ``TypeB``."
msgstr ""

#: ../../library/typing.rst:1055
msgid ""
"``TypeB`` need not be a narrower form of ``TypeA`` -- it can even be a wider "
"form. The main reason is to allow for things like narrowing ``List[object]`` "
"to ``List[str]`` even though the latter is not a subtype of the former, "
"since ``List`` is invariant. The responsibility of writing type-safe type "
"guards is left to the user."
msgstr ""

#: ../../library/typing.rst:1061
msgid ""
"``TypeGuard`` also works with type variables.  See :pep:`647` for more "
"details."
msgstr ""

#: ../../library/typing.rst:1067
msgid "Building generic types"
msgstr ""

#: ../../library/typing.rst:1069
msgid ""
"These are not used in annotations. They are building blocks for creating "
"generic types."
msgstr ""

#: ../../library/typing.rst:1073
msgid "Abstract base class for generic types."
msgstr "Classe base abstrata para tipos genéricos"

#: ../../library/typing.rst:1075
msgid ""
"A generic type is typically declared by inheriting from an instantiation of "
"this class with one or more type variables. For example, a generic mapping "
"type might be defined as::"
msgstr ""

#: ../../library/typing.rst:1084
msgid "This class can then be used as follows::"
msgstr "Esta classe pode ser utilizada como segue::"

#: ../../library/typing.rst:1097
msgid "Type variable."
msgstr "Tipo variável."

#: ../../library/typing.rst:1099 ../../library/typing.rst:1205
#: ../../library/typing.rst:1398
msgid "Usage::"
msgstr "Uso::"

#: ../../library/typing.rst:1105
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function definitions.  See :class:`Generic` for more information on generic "
"types.  Generic functions work as follows::"
msgstr ""

#: ../../library/typing.rst:1125
msgid ""
"Note that type variables can be *bound*, *constrained*, or neither, but "
"cannot be both bound *and* constrained."
msgstr ""

#: ../../library/typing.rst:1128
msgid ""
"Constrained type variables and bound type variables have different semantics "
"in several important ways. Using a *constrained* type variable means that "
"the ``TypeVar`` can only ever be solved as being exactly one of the "
"constraints given::"
msgstr ""

#: ../../library/typing.rst:1138
msgid ""
"Using a *bound* type variable, however, means that the ``TypeVar`` will be "
"solved using the most specific type possible::"
msgstr ""

#: ../../library/typing.rst:1149
msgid ""
"Type variables can be bound to concrete types, abstract types (ABCs or "
"protocols), and even unions of types::"
msgstr ""

#: ../../library/typing.rst:1155
msgid ""
"Bound type variables are particularly useful for annotating :func:"
"`classmethods <classmethod>` that serve as alternative constructors. In the "
"following example (by `Raymond Hettinger <https://www.youtube.com/watch?"
"v=HTLu2DFOdTg>`_), the type variable ``C`` is bound to the ``Circle`` class "
"through the use of a forward reference. Using this type variable to annotate "
"the ``with_circumference`` classmethod, rather than hardcoding the return "
"type as ``Circle``, means that a type checker can correctly infer the return "
"type even if the method is called on a subclass::"
msgstr ""

#: ../../library/typing.rst:1193
msgid ""
"At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`.  In general, :"
"func:`isinstance` and :func:`issubclass` should not be used with types."
msgstr ""

#: ../../library/typing.rst:1196
msgid ""
"Type variables may be marked covariant or contravariant by passing "
"``covariant=True`` or ``contravariant=True``.  See :pep:`484` for more "
"details.  By default, type variables are invariant."
msgstr ""

#: ../../library/typing.rst:1202
msgid ""
"Parameter specification variable.  A specialized version of :class:`type "
"variables <TypeVar>`."
msgstr ""

#: ../../library/typing.rst:1209
msgid ""
"Parameter specification variables exist primarily for the benefit of static "
"type checkers.  They are used to forward the parameter types of one callable "
"to another callable -- a pattern commonly found in higher order functions "
"and decorators.  They are only valid when used in ``Concatenate``, or as the "
"first argument to ``Callable``, or as parameters for user-defined Generics.  "
"See :class:`Generic` for more information on generic types."
msgstr ""
"Variáveis de especificação de parâmetro existem principalmente para o "
"benefício de verificadores de tipo estático. São usadas para encaminhar os "
"tipos de parâmetros de um chamável para outro chamável -- um padrão "
"comumente encontrado em funções e decoradores de ordem superior. Só são "
"válidas quando usados em ``Concatenate``, ou como o primeiro argumento para "
"``Callable``, ou como parâmetro para genéricos definidos pelo usuário. "
"Consulte :class:`Generic` para obter mais informações sobre tipos genéricos."

#: ../../library/typing.rst:1216
msgid ""
"For example, to add basic logging to a function, one can create a decorator "
"``add_logging`` to log function calls.  The parameter specification variable "
"tells the type checker that the callable passed into the decorator and the "
"new callable returned by it have inter-dependent type parameters::"
msgstr ""
"Por exemplo, para adicionar um registro básico de eventos a uma função, é "
"possível criar um decorador ``add_logging`` para registrar chamadas de "
"função. A variável de especificação de parâmetro informa ao verificador de "
"tipos que o chamável passado para o decorador e o novo chamável retornado "
"por ele têm parâmetros de tipo interdependentes::"

#: ../../library/typing.rst:1240
msgid ""
"Without ``ParamSpec``, the simplest way to annotate this previously was to "
"use a :class:`TypeVar` with bound ``Callable[..., Any]``.  However this "
"causes two problems:"
msgstr ""

#: ../../library/typing.rst:1244
msgid ""
"The type checker can't type check the ``inner`` function because ``*args`` "
"and ``**kwargs`` have to be typed :data:`Any`."
msgstr ""
"O verificador de tipos não consegue verificar a função ``inner``, porque "
"``*args`` e ``**kwargs`` precisam ter tipo :data:`Any`."

#: ../../library/typing.rst:1246
msgid ""
":func:`~cast` may be required in the body of the ``add_logging`` decorator "
"when returning the ``inner`` function, or the static type checker must be "
"told to ignore the ``return inner``."
msgstr ""
":func:`~cast` pode ser exigida no corpo do decorador ``add_logging`` ao "
"retornar a função ``inner``, ou o verificador de tipo estático deverá ser "
"instruído a ignorar o ``return inner``."

#: ../../library/typing.rst:1253
msgid ""
"Since ``ParamSpec`` captures both positional and keyword parameters, ``P."
"args`` and ``P.kwargs`` can be used to split a ``ParamSpec`` into its "
"components.  ``P.args`` represents the tuple of positional parameters in a "
"given call and should only be used to annotate ``*args``.  ``P.kwargs`` "
"represents the mapping of keyword parameters to their values in a given "
"call, and should be only be used to annotate ``**kwargs``.  Both attributes "
"require the annotated parameter to be in scope. At runtime, ``P.args`` and "
"``P.kwargs`` are instances respectively of :class:`ParamSpecArgs` and :class:"
"`ParamSpecKwargs`."
msgstr ""
"Como ``ParamSpec`` capturar tanto parâmetros posicionais quanto parâmetros "
"nomeados, ``P.args`` e ``P.kwargs`` podem ser usados para dividir um "
"``ParamSpec`` em seus componentes. ``P.args`` representa a tupla de "
"parâmetros posicionais em uma determinada chamada e só deve ser usada para "
"anotar ``*args``. ``P.kwargs`` representa o mapeamento de parâmetros "
"nomeados para seus valores em uma determinada chamada, e só deve ser usado "
"para anotar ``**kwargs``. Ambos os atributos exigem que o parâmetro anotado "
"esteja em escopo. Em tempo de execução, ``P.args`` e ``P.kwargs`` são "
"instâncias, respectivamente, de :class:`ParamSpecArgs` e :class:"
"`ParamSpecKwargs`."

#: ../../library/typing.rst:1263
msgid ""
"Parameter specification variables created with ``covariant=True`` or "
"``contravariant=True`` can be used to declare covariant or contravariant "
"generic types.  The ``bound`` argument is also accepted, similar to :class:"
"`TypeVar`.  However the actual semantics of these keywords are yet to be "
"decided."
msgstr ""
"Variáveis de especificação de parâmetros criadas com ``covariant=True`` ou "
"``contravariant=True`` podem ser usadas para declarar tipos genéricos "
"covariantes ou contravariantes. O argumento ``bound`` também é aceito, "
"semelhante ao :class:`TypeVar`. Porém, a semântica real dessas palavras "
"reservadas ainda não foi decidida."

#: ../../library/typing.rst:1272
msgid ""
"Only parameter specification variables defined in global scope can be "
"pickled."
msgstr ""
"Somente variáveis de especificação de parâmetro definidas em escopo global "
"podem ser serializadas com pickle."

#: ../../library/typing.rst:1278
msgid ":class:`Callable` and :class:`Concatenate`."
msgstr ""

#: ../../library/typing.rst:1283
msgid ""
"Arguments and keyword arguments attributes of a :class:`ParamSpec`. The ``P."
"args`` attribute of a ``ParamSpec`` is an instance of ``ParamSpecArgs``, and "
"``P.kwargs`` is an instance of ``ParamSpecKwargs``. They are intended for "
"runtime introspection and have no special meaning to static type checkers."
msgstr ""
"Tipos dos argumentos e dos argumentos nomeados de um :class:`ParamSpec`. O "
"atributo ``P.args`` de um ``ParamSpec`` é uma instância de "
"``ParamSpecArgs``, e o atributo ``P.kwargs`` é uma instância de "
"``ParamSpecKwargs``. São destinados à introspecção em tempo de execução, e "
"não têm nenhum significado especial para o verificador de tipo estático."

#: ../../library/typing.rst:1288
msgid ""
"Calling :func:`get_origin` on either of these objects will return the "
"original ``ParamSpec``::"
msgstr ""

#: ../../library/typing.rst:1300
msgid ""
"``AnyStr`` is a :class:`constrained type variable <TypeVar>` defined as "
"``AnyStr = TypeVar('AnyStr', str, bytes)``."
msgstr ""

#: ../../library/typing.rst:1303
msgid ""
"It is meant to be used for functions that may accept any kind of string "
"without allowing different kinds of strings to mix. For example::"
msgstr ""

#: ../../library/typing.rst:1315
msgid ""
"Base class for protocol classes. Protocol classes are defined like this::"
msgstr ""

#: ../../library/typing.rst:1321
msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr ""
"Essas classes são usadas principalmente com verificadores de tipo estático "
"que reconhecem a subtipagem estrutural (tipagem pato estática). Por "
"exemplo,::"

#: ../../library/typing.rst:1333
msgid ""
"See :pep:`544` for more details. Protocol classes decorated with :func:"
"`runtime_checkable` (described later) act as simple-minded runtime protocols "
"that check only the presence of given attributes, ignoring their type "
"signatures."
msgstr ""
"Consulte a :pep:`544` para obter mais detalhes. Classes de protocolo "
"decoradas com :func:`runtime_checkable` (descritas posteriormente) funcionam "
"como protocolos em tempo de execução simples, somente verificando a presença "
"de determinados atributos, e ignorando suas assinaturas de tipo."

#: ../../library/typing.rst:1338
msgid "Protocol classes can be generic, for example::"
msgstr "Classes de protocolo podem ser genéricas. Por exemplo::"

#: ../../library/typing.rst:1348
msgid "Mark a protocol class as a runtime protocol."
msgstr "Marca uma classe de protocolo como um protocolo de tempo de execução."

#: ../../library/typing.rst:1350
msgid ""
"Such a protocol can be used with :func:`isinstance` and :func:`issubclass`. "
"This raises :exc:`TypeError` when applied to a non-protocol class.  This "
"allows a simple-minded structural check, very similar to \"one trick "
"ponies\" in :mod:`collections.abc` such as :class:`~collections.abc."
"Iterable`.  For example::"
msgstr ""

#: ../../library/typing.rst:1370
msgid ""
":func:`!runtime_checkable` will check only the presence of the required "
"methods or attributes, not their type signatures or types. For example, :"
"class:`ssl.SSLObject` is a class, therefore it passes an :func:`issubclass` "
"check against :data:`Callable`.  However, the ``ssl.SSLObject.__init__`` "
"method exists only to raise a :exc:`TypeError` with a more informative "
"message, therefore making it impossible to call (instantiate) :class:`ssl."
"SSLObject`."
msgstr ""

#: ../../library/typing.rst:1381
msgid ""
"An :func:`isinstance` check against a runtime-checkable protocol can be "
"surprisingly slow compared to an ``isinstance()`` check against a non-"
"protocol class. Consider using alternative idioms such as :func:`hasattr` "
"calls for structural checks in performance-sensitive code."
msgstr ""
"A verificação :func:`isinstance` sobre um protocolo verificável em tempo de "
"execução pode ser surpreendentemente lenta se comparada a uma verificação "
"``isinstance()`` sobre outros tipos de classe. Considere usar expressões "
"alternativas, como chamar a função :func:`hasattr` para realizar "
"verificações estruturais em código sensível a desempenho."

#: ../../library/typing.rst:1390
msgid "Other special directives"
msgstr "Outras diretivas especiais"

#: ../../library/typing.rst:1392
msgid ""
"These are not used in annotations. They are building blocks for declaring "
"types."
msgstr ""

#: ../../library/typing.rst:1396
msgid "Typed version of :func:`collections.namedtuple`."
msgstr "Versão tipada de :func:`collections.namedtuple`."

#: ../../library/typing.rst:1404
msgid "This is equivalent to::"
msgstr "Isso equivale a::"

#: ../../library/typing.rst:1408
msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr ""
"Para dar um valor padrão a um campo, você pode atribuir um valor a ele no "
"corpo da classe::"

#: ../../library/typing.rst:1417
msgid ""
"Fields with a default value must come after any fields without a default."
msgstr ""
"Campos com valores padrão devem vir depois de quaisquer campos sem valores "
"padrão."

#: ../../library/typing.rst:1419
msgid ""
"The resulting class has an extra attribute ``__annotations__`` giving a dict "
"that maps the field names to the field types.  (The field names are in the "
"``_fields`` attribute and the default values are in the ``_field_defaults`` "
"attribute, both of which are part of the :func:`~collections.namedtuple` "
"API.)"
msgstr ""
"A classe resultante tem um atributo extra ``__annotations__`` que fornece um "
"dicionário que mapeia os nomes de campos para os tipos de campos. (Os nomes "
"de campos estão no atributo ``_fields`` e os valores padrão estão no "
"atributo ``_field_defaults``, e ambos fazem parte da API de :func:"
"`~collections.namedtuple`.)"

#: ../../library/typing.rst:1425
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr "Subclasses de ``NamedTuple`` também podem ter docstrings e métodos::"

#: ../../library/typing.rst:1435
msgid "Backward-compatible usage::"
msgstr "Uso retrocompatível::"

#: ../../library/typing.rst:1439
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr "Adiciona suporte à sintaxe de anotação de variáveis da :pep:`526`."

#: ../../library/typing.rst:1442
msgid "Added support for default values, methods, and docstrings."
msgstr "Adiciona suporte a valores padrão, métodos, e docstrings."

#: ../../library/typing.rst:1445
msgid ""
"The ``_field_types`` and ``__annotations__`` attributes are now regular "
"dictionaries instead of instances of ``OrderedDict``."
msgstr ""
"Os atributos ``_field_types`` e ``__annotations__`` agora são dicionários "
"regulares em vez de instâncias de ``OrderedDict``."

#: ../../library/typing.rst:1449
msgid ""
"Removed the ``_field_types`` attribute in favor of the more standard "
"``__annotations__`` attribute which has the same information."
msgstr ""
"Remove o atributo ``_field_types`` em favor do atributo mais padrão "
"``__annotations__`` que tem as mesmas informações."

#: ../../library/typing.rst:1455
msgid ""
"A helper class to indicate a distinct type to a typechecker, see :ref:"
"`distinct`. At runtime it returns an object that returns its argument when "
"called. Usage::"
msgstr ""

#: ../../library/typing.rst:1465
msgid "``NewType`` is now a class rather than a function."
msgstr "``NewType`` agora é uma classe em vez de uma função."

#: ../../library/typing.rst:1470
msgid ""
"Special construct to add type hints to a dictionary. At runtime it is a "
"plain :class:`dict`."
msgstr ""
"Uma construção especial para adicionar dicas de tipo a um dicionário. Em "
"tempo de execução, é um simples :class:`dict`."

#: ../../library/typing.rst:1473
msgid ""
"``TypedDict`` declares a dictionary type that expects all of its instances "
"to have a certain set of keys, where each key is associated with a value of "
"a consistent type. This expectation is not checked at runtime but is only "
"enforced by type checkers. Usage::"
msgstr ""
"``TypedDict`` declara um tipo dicionário que espera que todas as suas "
"instâncias tenham um determinado conjunto de chaves, onde cada chave está "
"associada a um valor de um tipo consistente. Essa expectativa não é "
"verificada em tempo de execução, mas é imposta apenas por verificadores de "
"tipos. Modo de usar::"

#: ../../library/typing.rst:1489
msgid ""
"To allow using this feature with older versions of Python that do not "
"support :pep:`526`, ``TypedDict`` supports two additional equivalent "
"syntactic forms::"
msgstr ""

#: ../../library/typing.rst:1496
msgid ""
"The functional syntax should also be used when any of the keys are not "
"valid :ref:`identifiers <identifiers>`, for example because they are "
"keywords or contain hyphens. Example::"
msgstr ""

#: ../../library/typing.rst:1508
msgid ""
"By default, all keys must be present in a ``TypedDict``. It is possible to "
"override this by specifying totality. Usage::"
msgstr ""

#: ../../library/typing.rst:1516
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have any of the keys "
"omitted. A type checker is only expected to support a literal ``False`` or "
"``True`` as the value of the ``total`` argument. ``True`` is the default, "
"and makes all items defined in the class body required."
msgstr ""
"Isso significa que um ``Point2D`` ``TypedDict`` pode ter qualquer uma de "
"suas chaves omitidas. Espera-se que um verificador de tipos apenas permita "
"os literais ``False`` ou ``True`` como valores do argumento ``total``. "
"``True`` é o padrão, e todos os itens definidos no corpo da classe tornam-se "
"obrigatórios."

#: ../../library/typing.rst:1521
msgid ""
"It is possible for a ``TypedDict`` type to inherit from one or more other "
"``TypedDict`` types using the class-based syntax. Usage::"
msgstr ""
"É possível que um tipo ``TypedDict`` herde de um ou mais tipos ``TypedDict`` "
"usando a sintaxe baseada em classes. Modo de usar::"

#: ../../library/typing.rst:1528
msgid ""
"``Point3D`` has three items: ``x``, ``y`` and ``z``. It is equivalent to "
"this definition::"
msgstr ""
"``Point3D`` tem três itens: ``x``, ``y`` e ``z``. Equivale a esta definição::"

#: ../../library/typing.rst:1536
msgid ""
"A ``TypedDict`` cannot inherit from a non-\\ ``TypedDict`` class, notably "
"including :class:`Generic`. For example::"
msgstr ""

#: ../../library/typing.rst:1554
msgid ""
"A ``TypedDict`` can be introspected via annotations dicts (see :ref:"
"`annotations-howto` for more information on annotations best practices), :"
"attr:`__total__`, :attr:`__required_keys__`, and :attr:`__optional_keys__`."
msgstr ""
"Um ``TypedDict`` pode ser introspeccionado por meio de dicionários de "
"anotações (consulte :ref:`annotations-howto` para obter mais informações "
"sobre as melhores práticas de anotações), :attr:`__total__`, :attr:"
"`__required_keys__` e :attr:`__optional_keys__`."

#: ../../library/typing.rst:1560
msgid ""
"``Point2D.__total__`` gives the value of the ``total`` argument. Example::"
msgstr ""

#: ../../library/typing.rst:1580
msgid ""
"``Point2D.__required_keys__`` and ``Point2D.__optional_keys__`` return :"
"class:`frozenset` objects containing required and non-required keys, "
"respectively. Currently the only way to declare both required and non-"
"required keys in the same ``TypedDict`` is mixed inheritance, declaring a "
"``TypedDict`` with one value for the ``total`` argument and then inheriting "
"it from another ``TypedDict`` with a different value for ``total``. Usage::"
msgstr ""

#: ../../library/typing.rst:1602
msgid ""
"See :pep:`589` for more examples and detailed rules of using ``TypedDict``."
msgstr ""
"Consulte :pep:`589` para obter mais exemplos e regras detalhadas sobre o uso "
"de ``TypedDict``."

#: ../../library/typing.rst:1607
msgid "Generic concrete collections"
msgstr ""

#: ../../library/typing.rst:1610
msgid "Corresponding to built-in types"
msgstr ""

#: ../../library/typing.rst:1614
msgid ""
"A generic version of :class:`dict`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Mapping`."
msgstr ""

#: ../../library/typing.rst:1618
msgid "This type can be used as follows::"
msgstr ""

#: ../../library/typing.rst:1623
msgid ""
":class:`builtins.dict <dict>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.dict <dict>` agora oferece suporte a subscrição (``[]``). "
"Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1629
msgid ""
"Generic version of :class:`list`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Sequence` or :class:`Iterable`."
msgstr ""

#: ../../library/typing.rst:1634
msgid "This type may be used as follows::"
msgstr ""

#: ../../library/typing.rst:1644
msgid ""
":class:`builtins.list <list>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.list <list>` agora oferece suporte a subscrição (``[]``). "
"Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1650
msgid ""
"A generic version of :class:`builtins.set <set>`. Useful for annotating "
"return types. To annotate arguments it is preferred to use an abstract "
"collection type such as :class:`AbstractSet`."
msgstr ""

#: ../../library/typing.rst:1654
msgid ""
":class:`builtins.set <set>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.set <set>` agora oferece suporte a subscrição (``[]``). "
"Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1660
msgid "A generic version of :class:`builtins.frozenset <frozenset>`."
msgstr ""

#: ../../library/typing.rst:1662
msgid ""
":class:`builtins.frozenset <frozenset>` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.frozenset <frozenset>` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1667
msgid ":data:`Tuple` is a special form."
msgstr ""

#: ../../library/typing.rst:1670
msgid "Corresponding to types in :mod:`collections`"
msgstr ""

#: ../../library/typing.rst:1674
msgid "A generic version of :class:`collections.defaultdict`."
msgstr ""

#: ../../library/typing.rst:1678
msgid ""
":class:`collections.defaultdict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.defaultdict` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1684
msgid "A generic version of :class:`collections.OrderedDict`."
msgstr ""

#: ../../library/typing.rst:1688
msgid ""
":class:`collections.OrderedDict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.OrderedDict` agora oferece suporte a subscrição "
"(``[]``). consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1694
msgid "A generic version of :class:`collections.ChainMap`."
msgstr ""

#: ../../library/typing.rst:1699
msgid ""
":class:`collections.ChainMap` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.ChainMap` agora oferece suporte a subscrição (``[]``). "
"consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1705
msgid "A generic version of :class:`collections.Counter`."
msgstr ""

#: ../../library/typing.rst:1710
msgid ""
":class:`collections.Counter` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.Counter` agora oferece suporte a subscrição (``[]``). "
"consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1716
msgid "A generic version of :class:`collections.deque`."
msgstr ""

#: ../../library/typing.rst:1721
msgid ""
":class:`collections.deque` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.deque` agora oferece suporte a subscrição (``[]``). "
"Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1726
msgid "Other concrete types"
msgstr ""

#: ../../library/typing.rst:1732
msgid ""
"Generic type ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`."
msgstr ""
"O tipo genérico ``IO[AnyStr]`` e suas subclasses ``TextIO(IO[str])`` e "
"``BinaryIO(IO[bytes])`` representam os tipos de fluxos de E/S, como os "
"retornados por :func:`open`."

#: ../../library/typing.rst:1739
msgid ""
"The ``typing.io`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr ""

#: ../../library/typing.rst:1744
msgid ""
"These type aliases correspond to the return types from :func:`re.compile` "
"and :func:`re.match`.  These types (and the corresponding functions) are "
"generic in ``AnyStr`` and can be made specific by writing ``Pattern[str]``, "
"``Pattern[bytes]``, ``Match[str]``, or ``Match[bytes]``."
msgstr ""

#: ../../library/typing.rst:1754
msgid ""
"The ``typing.re`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr ""

#: ../../library/typing.rst:1755
msgid ""
"Classes ``Pattern`` and ``Match`` from :mod:`re` now support ``[]``. See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
"Classes ``Pattern`` e ``Match`` de :mod:`re` agora suporte ``[]``. Consulte :"
"pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1761
msgid ""
"``Text`` is an alias for ``str``. It is provided to supply a forward "
"compatible path for Python 2 code: in Python 2, ``Text`` is an alias for "
"``unicode``."
msgstr ""

#: ../../library/typing.rst:1765
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr ""
"Use ``Text`` para indicar que um valor deve conter uma string unicode de "
"forma compatível com Python 2 e Python 3::"

#: ../../library/typing.rst:1774
msgid "Abstract Base Classes"
msgstr "Classes Bases Abstratas"

#: ../../library/typing.rst:1777
msgid "Corresponding to collections in :mod:`collections.abc`"
msgstr ""

#: ../../library/typing.rst:1781
msgid "A generic version of :class:`collections.abc.Set`."
msgstr ""

#: ../../library/typing.rst:1783
msgid ""
":class:`collections.abc.Set` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Set` agora oferece suporte a subscrição (``[]``). "
"Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1789
msgid "A generic version of :class:`collections.abc.ByteString`."
msgstr ""

#: ../../library/typing.rst:1791
msgid ""
"This type represents the types :class:`bytes`, :class:`bytearray`, and :"
"class:`memoryview` of byte sequences."
msgstr ""
"Este tipo representa os tipos :class:`bytes`, :class:`bytearray` e :class:"
"`memoryview` de sequências de bytes."

#: ../../library/typing.rst:1794
msgid ""
"As a shorthand for this type, :class:`bytes` can be used to annotate "
"arguments of any of the types mentioned above."
msgstr ""

#: ../../library/typing.rst:1797
msgid ""
":class:`collections.abc.ByteString` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:1803
msgid "A generic version of :class:`collections.abc.Collection`"
msgstr ""

#: ../../library/typing.rst:1807
msgid ""
":class:`collections.abc.Collection` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Collection` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1813
msgid "A generic version of :class:`collections.abc.Container`."
msgstr ""

#: ../../library/typing.rst:1815
msgid ""
":class:`collections.abc.Container` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Container` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1821
msgid "A generic version of :class:`collections.abc.ItemsView`."
msgstr ""

#: ../../library/typing.rst:1823
msgid ""
":class:`collections.abc.ItemsView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ItemsView` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1829
msgid "A generic version of :class:`collections.abc.KeysView`."
msgstr ""

#: ../../library/typing.rst:1831
msgid ""
":class:`collections.abc.KeysView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.KeysView` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1837
msgid ""
"A generic version of :class:`collections.abc.Mapping`. This type can be used "
"as follows::"
msgstr ""

#: ../../library/typing.rst:1843
msgid ""
":class:`collections.abc.Mapping` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Mapping` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1849
msgid "A generic version of :class:`collections.abc.MappingView`."
msgstr ""

#: ../../library/typing.rst:1851
msgid ""
":class:`collections.abc.MappingView` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MappingView` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1857
msgid "A generic version of :class:`collections.abc.MutableMapping`."
msgstr ""

#: ../../library/typing.rst:1859
msgid ""
":class:`collections.abc.MutableMapping` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableMapping` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1866
msgid "A generic version of :class:`collections.abc.MutableSequence`."
msgstr ""

#: ../../library/typing.rst:1868
msgid ""
":class:`collections.abc.MutableSequence` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSequence` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1875
msgid "A generic version of :class:`collections.abc.MutableSet`."
msgstr ""

#: ../../library/typing.rst:1877
msgid ""
":class:`collections.abc.MutableSet` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSet` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1883
msgid "A generic version of :class:`collections.abc.Sequence`."
msgstr ""

#: ../../library/typing.rst:1885
msgid ""
":class:`collections.abc.Sequence` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Sequence` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1891
msgid "A generic version of :class:`collections.abc.ValuesView`."
msgstr ""

#: ../../library/typing.rst:1893
msgid ""
":class:`collections.abc.ValuesView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ValuesView` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1898
msgid "Corresponding to other types in :mod:`collections.abc`"
msgstr ""

#: ../../library/typing.rst:1902
msgid "A generic version of :class:`collections.abc.Iterable`."
msgstr ""

#: ../../library/typing.rst:1904
msgid ""
":class:`collections.abc.Iterable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterable` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1910
msgid "A generic version of :class:`collections.abc.Iterator`."
msgstr ""

#: ../../library/typing.rst:1912
msgid ""
":class:`collections.abc.Iterator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterator` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1918
msgid ""
"A generator can be annotated by the generic type ``Generator[YieldType, "
"SendType, ReturnType]``. For example::"
msgstr ""

#: ../../library/typing.rst:1927
msgid ""
"Note that unlike many other generics in the typing module, the ``SendType`` "
"of :class:`Generator` behaves contravariantly, not covariantly or "
"invariantly."
msgstr ""

#: ../../library/typing.rst:1931
msgid ""
"If your generator will only yield values, set the ``SendType`` and "
"``ReturnType`` to ``None``::"
msgstr ""

#: ../../library/typing.rst:1939
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``Iterable[YieldType]`` or ``Iterator[YieldType]``::"
msgstr ""

#: ../../library/typing.rst:1947
msgid ""
":class:`collections.abc.Generator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Generator` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1953
msgid "An alias to :class:`collections.abc.Hashable`."
msgstr ""

#: ../../library/typing.rst:1957
msgid "A generic version of :class:`collections.abc.Reversible`."
msgstr ""

#: ../../library/typing.rst:1959
msgid ""
":class:`collections.abc.Reversible` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Reversible` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1965
msgid "An alias to :class:`collections.abc.Sized`."
msgstr ""

#: ../../library/typing.rst:1968
msgid "Asynchronous programming"
msgstr ""

#: ../../library/typing.rst:1972
msgid ""
"A generic version of :class:`collections.abc.Coroutine`. The variance and "
"order of type variables correspond to those of :class:`Generator`, for "
"example::"
msgstr ""

#: ../../library/typing.rst:1984
msgid ""
":class:`collections.abc.Coroutine` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Coroutine` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:1990
msgid ""
"An async generator can be annotated by the generic type "
"``AsyncGenerator[YieldType, SendType]``. For example::"
msgstr ""

#: ../../library/typing.rst:1999
msgid ""
"Unlike normal generators, async generators cannot return a value, so there "
"is no ``ReturnType`` type parameter. As with :class:`Generator`, the "
"``SendType`` behaves contravariantly."
msgstr ""

#: ../../library/typing.rst:2003
msgid ""
"If your generator will only yield values, set the ``SendType`` to ``None``::"
msgstr ""

#: ../../library/typing.rst:2011
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``AsyncIterable[YieldType]`` or ``AsyncIterator[YieldType]``::"
msgstr ""

#: ../../library/typing.rst:2021
msgid ""
":class:`collections.abc.AsyncGenerator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncGenerator` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:2028
msgid "A generic version of :class:`collections.abc.AsyncIterable`."
msgstr "Uma versão genérica de :class:`collections.abc.AsyncIterable`."

#: ../../library/typing.rst:2032
msgid ""
":class:`collections.abc.AsyncIterable` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterable` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:2038
msgid "A generic version of :class:`collections.abc.AsyncIterator`."
msgstr ""

#: ../../library/typing.rst:2042
msgid ""
":class:`collections.abc.AsyncIterator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterator` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:2048
msgid "A generic version of :class:`collections.abc.Awaitable`."
msgstr ""

#: ../../library/typing.rst:2052
msgid ""
":class:`collections.abc.Awaitable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Awaitable` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:2058
msgid "Context manager types"
msgstr ""

#: ../../library/typing.rst:2062
msgid "A generic version of :class:`contextlib.AbstractContextManager`."
msgstr ""

#: ../../library/typing.rst:2067
msgid ""
":class:`contextlib.AbstractContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractContextManager` agora oferece suporte a "
"subscrição (``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:2074
msgid "A generic version of :class:`contextlib.AbstractAsyncContextManager`."
msgstr ""

#: ../../library/typing.rst:2079
msgid ""
":class:`contextlib.AbstractAsyncContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractAsyncContextManager` agora oferece suporte a "
"subscrição (``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:2085
msgid "Protocols"
msgstr "Protocolos"

#: ../../library/typing.rst:2087
msgid "These protocols are decorated with :func:`runtime_checkable`."
msgstr ""

#: ../../library/typing.rst:2091
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr ""
"Um ABC com um método abstrato ``__abs__`` que é covariante em seu tipo de "
"retorno."

#: ../../library/typing.rst:2096
msgid "An ABC with one abstract method ``__bytes__``."
msgstr "Um ABC com um método abstrato ``__bytes__``."

#: ../../library/typing.rst:2100
msgid "An ABC with one abstract method ``__complex__``."
msgstr "Um ABC com um método abstrato ``__complex__``."

#: ../../library/typing.rst:2104
msgid "An ABC with one abstract method ``__float__``."
msgstr "Um ABC com um método abstrato ``__float__``."

#: ../../library/typing.rst:2108
msgid "An ABC with one abstract method ``__index__``."
msgstr "Um ABC com um método abstrato ``__index__``."

#: ../../library/typing.rst:2114
msgid "An ABC with one abstract method ``__int__``."
msgstr "Um ABC com um método abstrato ``__int__``."

#: ../../library/typing.rst:2118
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr ""
"Uma ABC com um método abstrato ``__round__`` que é covariante em seu tipo de "
"retorno."

#: ../../library/typing.rst:2122
msgid "Functions and decorators"
msgstr "Funções e decoradores"

#: ../../library/typing.rst:2126
msgid "Cast a value to a type."
msgstr "Define um valor para um tipo."

#: ../../library/typing.rst:2128
msgid ""
"This returns the value unchanged.  To the type checker this signals that the "
"return value has the designated type, but at runtime we intentionally don't "
"check anything (we want this to be as fast as possible)."
msgstr ""
"Isso retorna o valor inalterado. Para o verificador de tipos, isso indica "
"que o valor de retorno tem o tipo designado, mas em tempo de execução não "
"verificamos nada intencionalmente (queremos que isso seja o mais rápido "
"possível)."

#: ../../library/typing.rst:2135
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one non-"
"``@overload``-decorated definition (for the same function/method). The "
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition, while the latter is used at runtime but should be ignored by a "
"type checker.  At runtime, calling a ``@overload``-decorated function "
"directly will raise :exc:`NotImplementedError`. An example of overload that "
"gives a more precise type than can be expressed using a union or a type "
"variable::"
msgstr ""

#: ../../library/typing.rst:2159
msgid ""
"See :pep:`484` for more details and comparison with other typing semantics."
msgstr ""
"Consulte :pep:`484` para mais detalhes e uma comparação com outras "
"semânticas de tipagem."

#: ../../library/typing.rst:2163
msgid ""
"A decorator to indicate to type checkers that the decorated method cannot be "
"overridden, and the decorated class cannot be subclassed. For example::"
msgstr ""

#: ../../library/typing.rst:2188
msgid "Decorator to indicate that annotations are not type hints."
msgstr "Decorador para indicar que anotações não são dicas de tipo."

#: ../../library/typing.rst:2190
msgid ""
"This works as class or function :term:`decorator`.  With a class, it applies "
"recursively to all methods defined in that class (but not to methods defined "
"in its superclasses or subclasses)."
msgstr ""

#: ../../library/typing.rst:2194
msgid "This mutates the function(s) in place."
msgstr ""

#: ../../library/typing.rst:2198
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr "Decorador para dar a outro decorador o efeito :func:`no_type_check`."

#: ../../library/typing.rst:2200
msgid ""
"This wraps the decorator with something that wraps the decorated function "
"in :func:`no_type_check`."
msgstr ""
"Isso envolve o decorador com algo que envolve a função decorada em :func:"
"`no_type_check`."

#: ../../library/typing.rst:2205
msgid "Decorator to mark a class or function to be unavailable at runtime."
msgstr ""

#: ../../library/typing.rst:2207
msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr ""

#: ../../library/typing.rst:2218
msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr ""
"Observe que retornar instâncias de classes privadas não é recomendado. "
"Normalmente, é preferível tornar essas classes públicas."

#: ../../library/typing.rst:2222
msgid "Introspection helpers"
msgstr ""

#: ../../library/typing.rst:2226
msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr ""
"Retorna um dicionário contendo dicas de tipo para uma função, método, módulo "
"ou objeto classe."

#: ../../library/typing.rst:2229
msgid ""
"This is often the same as ``obj.__annotations__``. In addition, forward "
"references encoded as string literals are handled by evaluating them in "
"``globals`` and ``locals`` namespaces. If necessary, ``Optional[t]`` is "
"added for function and method annotations if a default value equal to "
"``None`` is set. For a class ``C``, return a dictionary constructed by "
"merging all the ``__annotations__`` along ``C.__mro__`` in reverse order."
msgstr ""

#: ../../library/typing.rst:2237
msgid ""
"The function recursively replaces all ``Annotated[T, ...]`` with ``T``, "
"unless ``include_extras`` is set to ``True`` (see :class:`Annotated` for "
"more information). For example::"
msgstr ""

#: ../../library/typing.rst:2252
msgid ""
":func:`get_type_hints` does not work with imported :ref:`type aliases <type-"
"aliases>` that include forward references. Enabling postponed evaluation of "
"annotations (:pep:`563`) may remove the need for most forward references."
msgstr ""

#: ../../library/typing.rst:2257
msgid "Added ``include_extras`` parameter as part of :pep:`593`."
msgstr ""

#: ../../library/typing.rst:2263
msgid "Provide basic introspection for generic types and special typing forms."
msgstr ""

#: ../../library/typing.rst:2265
msgid ""
"For a typing object of the form ``X[Y, Z, ...]`` these functions return "
"``X`` and ``(Y, Z, ...)``. If ``X`` is a generic alias for a builtin or :mod:"
"`collections` class, it gets normalized to the original class. If ``X`` is a "
"union or :class:`Literal` contained in another generic type, the order of "
"``(Y, Z, ...)`` may be different from the order of the original arguments "
"``[Y, Z, ...]`` due to type caching. For unsupported objects return ``None`` "
"and ``()`` correspondingly. Examples::"
msgstr ""

#: ../../library/typing.rst:2284
msgid "Check if a type is a :class:`TypedDict`."
msgstr "Verifica se um tipo é um :class:`TypedDict`."

#: ../../library/typing.rst:2299
msgid ""
"A class used for internal typing representation of string forward "
"references. For example, ``List[\"SomeClass\"]`` is implicitly transformed "
"into ``List[ForwardRef(\"SomeClass\")]``.  This class should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""

#: ../../library/typing.rst:2305
msgid ""
":pep:`585` generic types such as ``list[\"SomeClass\"]`` will not be "
"implicitly transformed into ``list[ForwardRef(\"SomeClass\")]`` and thus "
"will not automatically resolve to ``list[SomeClass]``."
msgstr ""
"Tipos genéricos da :pep:`585` como ``list[\"SomeClass\"]`` não serão "
"transformados implicitamente em ``list[ForwardRef(\"SomeClass\")]`` e, "
"portanto, não serão resolvidos automaticamente para ``list[SomeClass]``."

#: ../../library/typing.rst:2312
msgid "Constant"
msgstr "Constante"

#: ../../library/typing.rst:2316
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It is ``False`` at runtime. Usage::"
msgstr ""

#: ../../library/typing.rst:2325
msgid ""
"The first type annotation must be enclosed in quotes, making it a \"forward "
"reference\", to hide the ``expensive_mod`` reference from the interpreter "
"runtime.  Type annotations for local variables are not evaluated, so the "
"second annotation does not need to be enclosed in quotes."
msgstr ""
"A primeira anotação de tipo deve ser colocada entre aspas, tornando-a uma "
"\"referência ao futuro\", para esconder do interpretador a referência ao "
"módulo ``expensive_mod``. As anotações de tipos em variáveis locais não são "
"avaliadas, então a segunda anotação não precisa ser colocada entre aspas."

#: ../../library/typing.rst:2332
msgid ""
"If ``from __future__ import annotations`` is used, annotations are not "
"evaluated at function definition time. Instead, they are stored as strings "
"in ``__annotations__``. This makes it unnecessary to use quotes around the "
"annotation (see :pep:`563`)."
msgstr ""
"Se ``from __future__ import annotations`` for usado, anotações não serão "
"avaliadas no momento de definição de funções. Em vez disso, elas são "
"armazenadas como string em ``__annotations__``. Isso torna desnecessário o "
"uso de aspas em anotações (consulte :pep:`563`)."
