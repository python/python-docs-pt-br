# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-08 15:21+0000\n"
"PO-Revision-Date: 2023-05-24 02:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/typing.rst:3
msgid ":mod:`typing` --- Support for type hints"
msgstr ":mod:`typing` --- Suporte para dicas de tipo"

#: ../../library/typing.rst:16
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr "**Código-fonte:** :source:`Lib/typing.py`"

#: ../../library/typing.rst:20
msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as :term:`type checkers <static "
"type checker>`, IDEs, linters, etc."
msgstr ""
"O tempo de execução do Python não força anotações de tipos de variáveis e "
"funções. Elas podem ser usadas por ferramentas de terceiros como :term:"
"`verificadores de tipo <static type checker>`, IDEs, linters, etc."

#: ../../library/typing.rst:26
msgid ""
"This module provides runtime support for type hints. For the original "
"specification of the typing system, see :pep:`484`. For a simplified "
"introduction to type hints, see :pep:`483`."
msgstr ""
"Este módulo oferece suporte para dicas de tipo ao ambiente de execução. Para "
"a especificação original de tipagem do sistema, veja :pep:`484`. Para uma "
"introdução simplificada as dicas de tipo, veja :pep:`483`."

#: ../../library/typing.rst:31
msgid ""
"The function below takes and returns a string and is annotated as follows::"
msgstr ""
"A função abaixo recebe e retorna uma string e é anotada como a seguir::"

#: ../../library/typing.rst:36
msgid ""
"In the function ``greeting``, the argument ``name`` is expected to be of "
"type :class:`str` and the return type :class:`str`. Subtypes are accepted as "
"arguments."
msgstr ""
"Na função ``greeting``, é esperado que o argumento ``name`` seja do tipo :"
"class:`str` e o retorno do tipo :class:`str`. Subtipos são aceitos como "
"argumentos."

#: ../../library/typing.rst:40
msgid ""
"New features are frequently added to the ``typing`` module. The "
"`typing_extensions <https://pypi.org/project/typing-extensions/>`_ package "
"provides backports of these new features to older versions of Python."
msgstr ""
"Novos recursos são frequentemente adicionados ao módulo ``typing``. O pacote "
"`typing_extensions <https://pypi.org/project/typing-extensions/>`_ provê "
"suporte retroativo a estes novos recursos em versões anteriores do Python."

#: ../../library/typing.rst:44
msgid ""
"For a summary of deprecated features and a deprecation timeline, please see "
"`Deprecation Timeline of Major Features`_."
msgstr ""
"Para ter um resumo dos recursos descontinuados e um cronograma de "
"descontinuação, por favor, veja  `Cronograma de Descontinuação dos "
"Principais Recursos`_."

#: ../../library/typing.rst:50
msgid ""
"`\"Typing cheat sheet\" <https://mypy.readthedocs.io/en/stable/"
"cheat_sheet_py3.html>`_"
msgstr ""
"`\"Guia rápido sobre Dicas de Tipo\" <https://mypy.readthedocs.io/en/stable/"
"cheat_sheet_py3.html>`_"

#: ../../library/typing.rst:50
msgid "A quick overview of type hints (hosted at the mypy docs)"
msgstr ""
"Uma visão geral das dicas de tipo (hospedado por mypy docs, em inglês)."

#: ../../library/typing.rst:55
msgid ""
"\"Type System Reference\" section of `the mypy docs <https://mypy."
"readthedocs.io/en/stable/index.html>`_"
msgstr ""
"\"Referência sobre Sistema de Tipo\" seção de `the mypy docs <https://mypy."
"readthedocs.io/en/stable/index.html>`_"

#: ../../library/typing.rst:53
msgid ""
"The Python typing system is standardised via PEPs, so this reference should "
"broadly apply to most Python type checkers. (Some parts may still be "
"specific to mypy.)"
msgstr ""
"O sistema de tipagem do Python é padronizado pelas PEPs, portanto esta  "
"referência deve se aplicar a maioria do verificadores de tipo do Python. "
"(Alguns trechos podem se referir especificamente ao mypy. Documento em "
"inglês)."

#: ../../library/typing.rst:59
msgid ""
"`\"Static Typing with Python\" <https://typing.readthedocs.io/en/latest/>`_"
msgstr ""
"`\"Tipagem Estática com Python\" <https://typing.readthedocs.io/en/latest/>`_"

#: ../../library/typing.rst:58
msgid ""
"Type-checker-agnostic documentation written by the community detailing type "
"system features, useful typing related tools and typing best practices."
msgstr ""
"Documentação independente de verificador de tipo escrita pela comunidade, "
"detalhando os recursos do sistema de tipo, ferramentas úteis de tipagem e "
"melhores práticas."

#: ../../library/typing.rst:65
msgid "Relevant PEPs"
msgstr "PEPs Relevantes"

#: ../../library/typing.rst:67
msgid ""
"Since the initial introduction of type hints in :pep:`484` and :pep:`483`, a "
"number of PEPs have modified and enhanced Python's framework for type "
"annotations:"
msgstr ""
"Desde a introdução das dicas de tipo nas  :pep:`484` e :pep:`483`, várias "
"PEPs tem modificado e aprimorado o framework do Python para anotações de "
"tipo:"

#: ../../library/typing.rst:77
msgid ":pep:`526`: Syntax for Variable Annotations"
msgstr ":pep:`526`: Sintaxe para Anotações de Variável"

#: ../../library/typing.rst:77
msgid ""
"*Introducing* syntax for annotating variables outside of function "
"definitions, and :data:`ClassVar`"
msgstr ""
"\"Introduzindo\" sintaxe para anotar variáveis fora de definições de funções "
"e :data:`ClassVar`."

#: ../../library/typing.rst:80
msgid ":pep:`544`: Protocols: Structural subtyping (static duck typing)"
msgstr ""

#: ../../library/typing.rst:80
msgid ""
"*Introducing* :class:`Protocol` and the :func:"
"`@runtime_checkable<runtime_checkable>` decorator"
msgstr ""
"*Introduzindo* :class:`Protocol` e o decorador :func:"
"`@runtime_checkable<runtime_checkable>`."

#: ../../library/typing.rst:83
msgid ":pep:`585`: Type Hinting Generics In Standard Collections"
msgstr ""

#: ../../library/typing.rst:83
msgid ""
"*Introducing* :class:`types.GenericAlias` and the ability to use standard "
"library classes as :ref:`generic types<types-genericalias>`"
msgstr ""

#: ../../library/typing.rst:85
msgid ":pep:`586`: Literal Types"
msgstr ":pep:`586`: Tipos literais"

#: ../../library/typing.rst:86
msgid "*Introducing* :data:`Literal`"
msgstr "*Introduzindo* :data:`Literal`"

#: ../../library/typing.rst:87
msgid ""
":pep:`589`: TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys"
msgstr ""

#: ../../library/typing.rst:88
msgid "*Introducing* :class:`TypedDict`"
msgstr ""

#: ../../library/typing.rst:89
msgid ":pep:`591`: Adding a final qualifier to typing"
msgstr ":pep:`591`: Adicionando um qualificador final para escrita"

#: ../../library/typing.rst:90
msgid "*Introducing* :data:`Final` and the :func:`@final<final>` decorator"
msgstr ""

#: ../../library/typing.rst:91
msgid ":pep:`593`: Flexible function and variable annotations"
msgstr ""

#: ../../library/typing.rst:92
msgid "*Introducing* :data:`Annotated`"
msgstr ""

#: ../../library/typing.rst:95
msgid ":pep:`604`: Allow writing union types as ``X | Y``"
msgstr ""

#: ../../library/typing.rst:94
msgid ""
"*Introducing* :data:`types.UnionType` and the ability to use the binary-or "
"operator ``|`` to signify a :ref:`union of types<types-union>`"
msgstr ""

#: ../../library/typing.rst:97
msgid ":pep:`612`: Parameter Specification Variables"
msgstr ""

#: ../../library/typing.rst:98
msgid "*Introducing* :class:`ParamSpec` and :data:`Concatenate`"
msgstr ""

#: ../../library/typing.rst:99
msgid ":pep:`613`: Explicit Type Aliases"
msgstr ""

#: ../../library/typing.rst:100
msgid "*Introducing* :data:`TypeAlias`"
msgstr ""

#: ../../library/typing.rst:101
msgid ":pep:`646`: Variadic Generics"
msgstr ""

#: ../../library/typing.rst:102
msgid "*Introducing* :data:`TypeVarTuple`"
msgstr ""

#: ../../library/typing.rst:103
msgid ":pep:`647`: User-Defined Type Guards"
msgstr ""

#: ../../library/typing.rst:104
msgid "*Introducing* :data:`TypeGuard`"
msgstr ""

#: ../../library/typing.rst:105
msgid ""
":pep:`655`: Marking individual TypedDict items as required or potentially "
"missing"
msgstr ""

#: ../../library/typing.rst:106
msgid "*Introducing* :data:`Required` and :data:`NotRequired`"
msgstr ""

#: ../../library/typing.rst:107
msgid ":pep:`673`: Self type"
msgstr ""

#: ../../library/typing.rst:108
msgid "*Introducing* :data:`Self`"
msgstr ""

#: ../../library/typing.rst:109
msgid ":pep:`675`: Arbitrary Literal String Type"
msgstr ""

#: ../../library/typing.rst:110
msgid "*Introducing* :data:`LiteralString`"
msgstr ""

#: ../../library/typing.rst:112
msgid ":pep:`681`: Data Class Transforms"
msgstr ""

#: ../../library/typing.rst:112
msgid ""
"*Introducing* the :func:`@dataclass_transform<dataclass_transform>` decorator"
msgstr ""

#: ../../library/typing.rst:122
msgid "Type aliases"
msgstr "Apelidos de tipo"

#: ../../library/typing.rst:124
msgid ""
"A type alias is defined by assigning the type to the alias. In this example, "
"``Vector`` and ``list[float]`` will be treated as interchangeable synonyms::"
msgstr ""

#: ../../library/typing.rst:135
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr ""
"Apelidos de tipo são úteis para simplificar assinaturas de tipo complexas. "
"Por exemplo::"

#: ../../library/typing.rst:153
msgid ""
"Type aliases may be marked with :data:`TypeAlias` to make it explicit that "
"the statement is a type alias declaration, not a normal variable assignment::"
msgstr ""

#: ../../library/typing.rst:163
msgid "NewType"
msgstr "NewType"

#: ../../library/typing.rst:165
msgid "Use the :class:`NewType` helper to create distinct types::"
msgstr "Utilize o auxiliar :class:`NewType` para criar tipos únicos::"

#: ../../library/typing.rst:172
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr ""
"O verificador de tipo estático tratará o novo tipo como se fosse uma "
"subclasse do tipo original. Isso é útil para ajudar a encontrar erros de "
"lógica::"

#: ../../library/typing.rst:184
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent "
"you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""
"Você ainda pode executar todas as operações ``int`` em uma variável do tipo "
"``UserId``, mas o resultado sempre será do tipo ``int``. Isso permite que "
"você passe um ``UserId`` em qualquer ocasião que ``int`` possa ser esperado, "
"mas previne que você acidentalmente crie um ``UserId`` de uma forma "
"inválida::"

#: ../../library/typing.rst:192
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime, the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a callable that immediately returns whatever parameter you pass "
"it. That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce much overhead beyond that of a regular function call."
msgstr ""
"Note que essas verificações são aplicadas apenas pelo verificador de tipo "
"estático. Em tempo de execução, a instrução ``Derived = NewType('Derived', "
"Base)`` irá tornar ``Derived`` um chamável que retornará imediatamente "
"qualquer parâmetro que você passar. Isso significa que a expressão "
"``Derived(some_value)`` não cria uma nova classe ou introduz sobrecarga além "
"de uma chamada regular de função.instrução"

#: ../../library/typing.rst:198
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr ""
"Mais precisamente, a expressão ``some_value is Derived(some_value)`` é "
"sempre verdadeira em tempo de execução."

#: ../../library/typing.rst:201
msgid "It is invalid to create a subtype of ``Derived``::"
msgstr "É inválido criar um subtipo de ``Derived``::"

#: ../../library/typing.rst:210
msgid ""
"However, it is possible to create a :class:`NewType` based on a 'derived' "
"``NewType``::"
msgstr ""
"No entanto, é possível criar um :class:`NewType` baseado em um 'derivado' "
"``NewType``::"

#: ../../library/typing.rst:218
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr "e a verificação de tipos para ``ProUserId`` funcionará como esperado."

#: ../../library/typing.rst:220
msgid "See :pep:`484` for more details."
msgstr "Veja :pep:`484` para mais detalhes."

#: ../../library/typing.rst:224
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to "
"one another. Doing ``Alias = Original`` will make the static type checker "
"treat ``Alias`` as being *exactly equivalent* to ``Original`` in all cases. "
"This is useful when you want to simplify complex type signatures."
msgstr ""

#: ../../library/typing.rst:229
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""
"Em contraste, ``NewType`` declara que um tipo será *subtipo* de outro. "
"Efetuando ``Derived = NewType('Derived', Original)`` irá fazer o verificador "
"de tipo estático tratar ``Derived`` como uma *subclasse* de ``Original``, o "
"que significa que um valor do tipo ``Original`` não pode ser utilizado onde "
"um valor do tipo ``Derived`` é esperado. Isso é útil quando você deseja "
"evitar erros de lógica com custo mínimo de tempo de execução."

#: ../../library/typing.rst:238
msgid ""
"``NewType`` is now a class rather than a function.  As a result, there is "
"some additional runtime cost when calling ``NewType`` over a regular "
"function."
msgstr ""
"``NewType`` agora é uma classe em vez de uma função. Consequentemente, "
"existem alguns custos em tempo de execução ao chamar ``NewType`` em vez de "
"uma função comum."

#: ../../library/typing.rst:243
msgid ""
"The performance of calling ``NewType`` has been restored to its level in "
"Python 3.9."
msgstr ""
"O desempenho de chamar ``NewType`` voltou ao mesmo nível da versão Python "
"3.9."

#: ../../library/typing.rst:250
msgid "Annotating callable objects"
msgstr "Anotações de objetos chamáveis"

#: ../../library/typing.rst:252
msgid ""
"Functions -- or other :term:`callable` objects -- can be annotated using :"
"class:`collections.abc.Callable` or :data:`typing.Callable`. "
"``Callable[[int], str]`` signifies a function that takes a single parameter "
"of type :class:`int` and returns a :class:`str`."
msgstr ""
"Funções -- ou outros objetos :term:`chamáveis <chamável>` -- podem ser "
"anotados utilizando-se :class:`collections.abc.Callable` ou :data:`typing."
"Callable`. ``Callable[[int], str]``. Significa uma função que recebe um "
"único parâmetro do tipo :class:`int`. e retorna um :class:`str`."

#: ../../library/typing.rst:257 ../../library/typing.rst:2726
msgid "For example:"
msgstr "Por exemplo:"

#: ../../library/typing.rst:275
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types, a :class:`ParamSpec`, :data:`Concatenate`, or an ellipsis. The return "
"type must be a single type."
msgstr ""
"A sintaxe da subscrição deve sempre ser usada com exatamente dois valores: "
"uma lista de argumentos e o tipo de retorno. A lista de argumentos deve ser "
"uma lista de tipos, um :class:`ParamSpec`, :data:`Concatenate`, ou "
"reticências. O tipo de retorno deve ser um único tipo."

#: ../../library/typing.rst:280
msgid ""
"If a literal ellipsis ``...`` is given as the argument list, it indicates "
"that a callable with any arbitrary parameter list would be acceptable:"
msgstr ""
"Se uma reticências literal ``...`` é passada no lugar de uma lista de "
"argumentos, ela indica que um chamável com uma lista de qualquer parâmetro "
"arbitrário seria aceita."

#: ../../library/typing.rst:292
msgid ""
"``Callable`` cannot express complex signatures such as functions that take a "
"variadic number of arguments, :ref:`overloaded functions <overload>`, or "
"functions that have keyword-only parameters. However, these signatures can "
"be expressed by defining a :class:`Protocol` class with a :meth:`~object."
"__call__` method:"
msgstr ""
"``Callable`` não pode representar assinaturas complexas, como funções que "
"aceitam um número variado de argumentos, :ref:`funções sobrecarregadas "
"<overload>`, or funções que recebem apenas parâmetros somente-nomeados. No "
"entanto, essas assinaturas podem ser expressas ao se definir uma  :class:"
"`Protocol` com um método :meth:`~object.__call__`:"

#: ../../library/typing.rst:319
msgid ""
"Callables which take other callables as arguments may indicate that their "
"parameter types are dependent on each other using :class:`ParamSpec`. "
"Additionally, if that callable adds or removes arguments from other "
"callables, the :data:`Concatenate` operator may be used.  They take the form "
"``Callable[ParamSpecVariable, ReturnType]`` and "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` respectively."
msgstr ""
"Chamáveis que recebem outros chamáveis como argumentos podem indicar que "
"seus tipos de parâmetro dependem uns dos outros usando :class:`ParamSpec`. "
"Além disso, se esse chamável adiciona ou remove argumentos de outros "
"chamáveis, o operador :data:`Concatenate` pode ser usado.  Eles assumem a "
"forma de ``Callable[ParamSpecVariable, ReturnType]`` e "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]``, respectivamente."

#: ../../library/typing.rst:327 ../../library/typing.rst:3250
msgid ""
"``Callable`` now supports :class:`ParamSpec` and :data:`Concatenate`. See :"
"pep:`612` for more details."
msgstr ""
"``Callable`` agora oferece suporte a :class:`ParamSpec` e :data:"
"`Concatenate`. Veja :pep:`612` para mais detalhes."

#: ../../library/typing.rst:332
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provides "
"examples of usage in ``Callable``."
msgstr ""
"A documentação para :class:`ParamSpec` e :class:`Concatenate` contém "
"exemplos de uso em ``Callable``."

#: ../../library/typing.rst:338
msgid "Generics"
msgstr "Genéricos"

#: ../../library/typing.rst:340
msgid ""
"Since type information about objects kept in containers cannot be statically "
"inferred in a generic way, many container classes in the standard library "
"support subscription to denote the expected types of container elements."
msgstr ""
"Como a informação de tipo sobre objetos mantidos em contêineres não pode ser "
"inferida estaticamente de uma maneira genérica, muitas classes de "
"contêineres na biblioteca padrão permitem usar subscrição para denotar o "
"tipo esperado dos elementos dos contêineres."

#: ../../library/typing.rst:357
msgid ""
"Generics can be parameterized by using a factory available in typing called :"
"class:`TypeVar`."
msgstr ""

#: ../../library/typing.rst:373
msgid "Annotating tuples"
msgstr "Anotando tuplas"

#: ../../library/typing.rst:375
msgid ""
"For most containers in Python, the typing system assumes that all elements "
"in the container will be of the same type. For example::"
msgstr ""
"Para a maior parte dos tipos containers em Python, o sistema de tipagem "
"presume que todos os elementos do contêiner são do mesmo tipo. Por exemplo::"

#: ../../library/typing.rst:390
msgid ""
":class:`list` only accepts one type argument, so a type checker would emit "
"an error on the ``y`` assignment above. Similarly, :class:`~collections.abc."
"Mapping` only accepts two type arguments: the first indicates the type of "
"the keys, and the second indicates the type of the values."
msgstr ""
":class:`list` aceita apenas um tipo de argumento, e assim o verificador de "
"tipos emitirá um erro na atribuição ``y`` acima. Da mesma forma, :class:"
"`~collections.abc.Mapping` aceita apenas dois tipos de argumento: O primeiro "
"indica o tipo das chaves, e o segundo indica o tipo dos valores."

#: ../../library/typing.rst:396
msgid ""
"Unlike most other Python containers, however, it is common in idiomatic "
"Python code for tuples to have elements which are not all of the same type. "
"For this reason, tuples are special-cased in Python's typing system. :class:"
"`tuple` accepts *any number* of type arguments::"
msgstr ""
"Ao contrário da maioria dos outros contêineres Python, é comum no código "
"Python idiomático que as tuplas tenham elementos que não sejam todos do "
"mesmo tipo. Por esse motivo, as tuplas têm um caso especial no sistema de "
"tipagem do Python. :class:`tuple` aceita *qualquer quantidade* de argumentos "
"de tipo::"

#: ../../library/typing.rst:412
msgid ""
"To denote a tuple which could be of *any* length, and in which all elements "
"are of the same type ``T``, use ``tuple[T, ...]``. To denote an empty tuple, "
"use ``tuple[()]``. Using plain ``tuple`` as an annotation is equivalent to "
"using ``tuple[Any, ...]``::"
msgstr ""
"Para indicar um tupla que pode ser de *qualquer* comprimento, e no qual "
"todos os elementos são do mesmo tipo ``T``, use ``tuple[T, ...]``. Para "
"denotar um tupla vazia, use ``tuple[()]``. Usando apenas ``tuple`` como "
"anotação, é equivalente a usar ``tuple[Any, ...]``::"

#: ../../library/typing.rst:435
msgid "The type of class objects"
msgstr "O tipo de objetos de classe"

#: ../../library/typing.rst:437
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``type[C]`` (or :class:`typing.Type[C] "
"<Type>`) may accept values that are classes themselves -- specifically, it "
"will accept the *class object* of ``C``. For example::"
msgstr ""
"Uma variável anotada com ``C`` pode aceitar um valor do tipo ``C``. Por "
"outro lado, uma variável anotada com ``type[C]`` (ou :class:`typing.Type[C] "
"<Type>`) pode aceitar valores que são classes -- especificamente, ela "
"aceitará o *objeto classe* de ``C``. Por exemplo::"

#: ../../library/typing.rst:447
msgid "Note that ``type[C]`` is covariant::"
msgstr "Observe que ``type[C]`` é covariante::"

#: ../../library/typing.rst:463
msgid ""
"The only legal parameters for :class:`type` are classes, :data:`Any`, :ref:"
"`type variables <generics>`, and unions of any of these types. For example::"
msgstr ""
"Os únicos parâmetros válidos para :class:`type` são classes, :data:`Any`, :"
"ref:`type variables <generics>` e uniões de qualquer um desses tipos. Por "
"exemplo::"

#: ../../library/typing.rst:475
msgid ""
"``type[Any]`` is equivalent to :class:`type`, which is the root of Python's :"
"ref:`metaclass hierarchy <metaclasses>`."
msgstr ""
"``type[Any]`` é equivalente a :class:`type`, que é a raiz da :ref:"
"`hierarquia de metaclasses <metaclasses>` do Python."

#: ../../library/typing.rst:481
msgid "User-defined generic types"
msgstr "Tipos genéricos definidos pelo usuário"

#: ../../library/typing.rst:483
msgid "A user-defined class can be defined as a generic class."
msgstr ""
"Uma classe definida pelo usuário pode ser definica como uma classe genérica."

#: ../../library/typing.rst:509
msgid ""
"``Generic[T]`` as a base class defines that the class ``LoggedVar`` takes a "
"single type parameter ``T`` . This also makes ``T`` valid as a type within "
"the class body."
msgstr ""

#: ../../library/typing.rst:513
msgid ""
"The :class:`Generic` base class defines :meth:`~object.__class_getitem__` so "
"that ``LoggedVar[T]`` is valid as a type::"
msgstr ""

#: ../../library/typing.rst:522
msgid ""
"A generic type can have any number of type variables. All varieties of :"
"class:`TypeVar` are permissible as parameters for a generic type::"
msgstr ""
"Um tipo genérico pode ter qualquer número de tipos de variáveis. Todas as "
"variedades de :class:`TypeVar` são permitidas como parâmetros para um tipo "
"genérico::"

#: ../../library/typing.rst:534
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ""
"Cada tipo dos argumentos para :class:`Generic` devem ser distintos. Assim, "
"os seguintes exemplos são inválidos::"

#: ../../library/typing.rst:545
msgid "You can use multiple inheritance with :class:`Generic`::"
msgstr ""

#: ../../library/typing.rst:555
msgid ""
"When inheriting from generic classes, some type parameters could be fixed::"
msgstr "Ao herdar das classes genérico, algun tipos podem ser fixos::"

#: ../../library/typing.rst:565
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr "Neste caso ``MyDict`` possui um único parâmetro, ``T``."

#: ../../library/typing.rst:567
msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any` "
"for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``:"
msgstr ""
"O uso de uma classe genérica sem especificar tipos pressupõe :data:`Any` "
"para cada posição. No exemplo a seguir, ``MyIterable`` não é genérico, mas "
"herda implicitamente de ``Iterable[Any]``:"

#: ../../library/typing.rst:578
msgid "User-defined generic type aliases are also supported. Examples::"
msgstr ""
"Também há suporte para tipos genéricos definidos pelo usuário. Exemplos::"

#: ../../library/typing.rst:595
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ":class:`Generic` não possui mais uma metaclasse personalizada."

#: ../../library/typing.rst:598
msgid ""
"User-defined generics for parameter expressions are also supported via "
"parameter specification variables in the form ``Generic[P]``.  The behavior "
"is consistent with type variables' described above as parameter "
"specification variables are treated by the typing module as a specialized "
"type variable.  The one exception to this is that a list of types can be "
"used to substitute a :class:`ParamSpec`::"
msgstr ""

#: ../../library/typing.rst:614
msgid ""
"Furthermore, a generic with only one parameter specification variable will "
"accept parameter lists in the forms ``X[[Type1, Type2, ...]]`` and also "
"``X[Type1, Type2, ...]`` for aesthetic reasons.  Internally, the latter is "
"converted to the former, so the following are equivalent::"
msgstr ""

#: ../../library/typing.rst:626
msgid ""
"Note that generics with :class:`ParamSpec` may not have correct "
"``__parameters__`` after substitution in some cases because they are "
"intended primarily for static type checking."
msgstr ""
"Observe que genéricos com :class:`ParamSpec` podem não ter "
"``__parameters__`` corretos após a substituição em alguns casos porque eles "
"são destinados principalmente à verificação de tipo estático."

#: ../../library/typing.rst:630
msgid ""
":class:`Generic` can now be parameterized over parameter expressions. See :"
"class:`ParamSpec` and :pep:`612` for more details."
msgstr ""
":class:`Generic` agora pode ser parametrizado através de expressões de "
"parâmetros. Veja :class:`ParamSpec` e :pep:`612` para mais detalhes."

#: ../../library/typing.rst:634
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the typing module are :"
"term:`hashable` and comparable for equality."
msgstr ""
"Uma classe genérica definida pelo usuário pode ter ABCs como classes base "
"sem conflito de metaclasse. Não há suporte a metaclasses genéricas. O "
"resultado da parametrização de genéricos é armazenado em cache, e a maioria "
"dos tipos no módulo typing são :term:`hasheáveis <hasheável>` e comparáveis "
"em termos de igualdade."

#: ../../library/typing.rst:641
msgid "The :data:`Any` type"
msgstr "O tipo :data:`Any`"

#: ../../library/typing.rst:643
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""
"Um tipo especial de tipo é :data:`Any`. Um verificador de tipo estático "
"tratará cada tipo como sendo compatível com :data:`Any` e :data:`Any` como "
"sendo compatível com todos os tipos."

#: ../../library/typing.rst:647
msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type :data:`Any` and assign it to any variable::"
msgstr ""
"Isso significa que é possível realizar qualquer operação ou chamada de "
"método sobre um valor do tipo :data:`Any` e atribuí-lo a qualquer variável::"

#: ../../library/typing.rst:665
msgid ""
"Notice that no type checking is performed when assigning a value of type :"
"data:`Any` to a more precise type. For example, the static type checker did "
"not report an error when assigning ``a`` to ``s`` even though ``s`` was "
"declared to be of type :class:`str` and receives an :class:`int` value at "
"runtime!"
msgstr ""
"Observe que nenhuma verificação de tipo é realizada ao atribuir um valor do "
"tipo :data:`Any` a um tipo mais preciso. Por exemplo, o verificador de tipo "
"estático não relatou um erro ao atribuir ``a`` a ``s`` mesmo que ``s`` tenha "
"sido declarado como sendo do tipo :class:`str` e receba um valor :class:"
"`int` em tempo de execução!"

#: ../../library/typing.rst:671
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr ""
"Além disso, todas as funções sem um tipo de retorno ou tipos de parâmetro "
"terão como padrão implicitamente o uso de :data:`Any`::"

#: ../../library/typing.rst:684
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr ""
"Este comportamento permite que :data:`Any` seja usado como uma *saída de "
"emergência* quando você precisar misturar código tipado dinamicamente e "
"estaticamente."

#: ../../library/typing.rst:687
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However, "
"unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""
"Compare o comportamento de :data:`Any` com o comportamento de :class:"
"`object`. Semelhante a :data:`Any`, todo tipo é um subtipo de :class:"
"`object`. No entanto, ao contrário de :data:`Any`, o inverso não é "
"verdadeiro: :class:`object` *não* é um subtipo de qualquer outro tipo."

#: ../../library/typing.rst:692
msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using "
"it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""
"Isso significa que quando o tipo de um valor é :class:`object`, um "
"verificador de tipo rejeitará quase todas as operações nele, e atribuí-lo a "
"uma variável (ou usá-la como valor de retorno) de um tipo mais especializado "
"é um tipo erro. Por exemplo::"

#: ../../library/typing.rst:714
msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe "
"manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr ""
"Use :class:`object` para indicar que um valor pode ser de qualquer tipo de "
"maneira segura. Use :data:`Any` para indicar que um valor é tipado "
"dinamicamente."

#: ../../library/typing.rst:719
msgid "Nominal vs structural subtyping"
msgstr "Subtipagem nominal vs estrutural"

#: ../../library/typing.rst:721
msgid ""
"Initially :pep:`484` defined the Python static type system as using *nominal "
"subtyping*. This means that a class ``A`` is allowed where a class ``B`` is "
"expected if and only if ``A`` is a subclass of ``B``."
msgstr ""
"Inicialmente a :pep:`484` definiu o sistema de tipos estáticos do Python "
"como usando *subtipagem nominal*. Isto significa que uma classe ``A`` é "
"permitida onde uma classe ``B`` é esperada se e somente se ``A`` for uma "
"subclasse de ``B``."

#: ../../library/typing.rst:725
msgid ""
"This requirement previously also applied to abstract base classes, such as :"
"class:`~collections.abc.Iterable`. The problem with this approach is that a "
"class had to be explicitly marked to support them, which is unpythonic and "
"unlike what one would normally do in idiomatic dynamically typed Python "
"code. For example, this conforms to :pep:`484`::"
msgstr ""
"Este requisito anteriormente também se aplicava a classes base abstratas, "
"como :class:`~collections.abc.Iterable`. O problema com essa abordagem é que "
"uma classe teve que ser marcada explicitamente para suportá-los, o que não é "
"pythônico e diferente do que normalmente seria feito em código Python de "
"tipo dinamicamente idiomático. Por exemplo, isso está em conformidade com :"
"pep:`484`::"

#: ../../library/typing.rst:738
msgid ""
":pep:`544` allows to solve this problem by allowing users to write the above "
"code without explicit base classes in the class definition, allowing "
"``Bucket`` to be implicitly considered a subtype of both ``Sized`` and "
"``Iterable[int]`` by static type checkers. This is known as *structural "
"subtyping* (or static duck-typing)::"
msgstr ""
":pep:`544` permite resolver este problema permitindo que os usuários "
"escrevam o código acima sem classes base explícitas na definição de classe, "
"permitindo que ``Bucket`` seja implicitamente considerado um subtipo de "
"``Sized`` e ``Iterable[int]`` por verificador de tipo estático. Isso é "
"conhecido como *subtipagem estrutural* (ou tipagem pato estática)::"

#: ../../library/typing.rst:754
msgid ""
"Moreover, by subclassing a special class :class:`Protocol`, a user can "
"define new custom protocols to fully enjoy structural subtyping (see "
"examples below)."
msgstr ""
"Além disso, ao criar uma subclasse de uma classe especial :class:`Protocol`, "
"um usuário pode definir novos protocolos personalizados para aproveitar ao "
"máximo a subtipagem estrutural (veja exemplos abaixo)."

#: ../../library/typing.rst:759
msgid "Module contents"
msgstr "Conteúdo do módulo"

#: ../../library/typing.rst:761
msgid ""
"The ``typing`` module defines the following classes, functions and "
"decorators."
msgstr ""
"O módulo ``typing`` define as seguintes classes, funções e decoracores."

#: ../../library/typing.rst:764
msgid "Special typing primitives"
msgstr "Tipos primitivos especiais"

#: ../../library/typing.rst:767
msgid "Special types"
msgstr "Tipos especiais"

#: ../../library/typing.rst:769
msgid ""
"These can be used as types in annotations. They do not support subscription "
"using ``[]``."
msgstr ""
"Eles podem ser usados como tipos em anotações. Eles não oferecem suporte a "
"subscrição usando ``[]``."

#: ../../library/typing.rst:774
msgid "Special type indicating an unconstrained type."
msgstr "Tipo especial que indica um tipo irrestrito."

#: ../../library/typing.rst:776
msgid "Every type is compatible with :data:`Any`."
msgstr "Todos os tipos são compatíveis com :data:`Any`."

#: ../../library/typing.rst:777
msgid ":data:`Any` is compatible with every type."
msgstr ":data:`Any` é compatível com todos os tipos."

#: ../../library/typing.rst:779
msgid ""
":data:`Any` can now be used as a base class. This can be useful for avoiding "
"type checker errors with classes that can duck type anywhere or are highly "
"dynamic."
msgstr ""
":data:`Any` agora pode ser usado como classe base. Isso pode ser útil para "
"evitar erros do verificador de tipo com classes que podem digitar em "
"qualquer lugar ou são altamente dinâmicas."

#: ../../library/typing.rst:786
msgid "A :ref:`constrained type variable <typing-constrained-typevar>`."
msgstr "Uma :ref:`variável de tipo restrito <typing-constrained-typevar>`."

#: ../../library/typing.rst:788
msgid "Definition::"
msgstr "Definição::"

#: ../../library/typing.rst:792
msgid ""
"``AnyStr`` is meant to be used for functions that may accept :class:`str` "
"or :class:`bytes` arguments but cannot allow the two to mix."
msgstr ""
"``AnyStr`` deve ser usado para funções que podem aceitar argumentos :class:"
"`str` ou :class:`bytes` mas não podem permitir que os dois se misturem."

#: ../../library/typing.rst:795 ../../library/typing.rst:886
#: ../../library/typing.rst:905 ../../library/typing.rst:962
#: ../../library/typing.rst:1121 ../../library/typing.rst:1178
#: ../../library/typing.rst:1386 ../../library/typing.rst:2566
msgid "For example::"
msgstr "Por exemplo::"

#: ../../library/typing.rst:804
msgid ""
"Note that, despite its name, ``AnyStr`` has nothing to do with the :class:"
"`Any` type, nor does it mean \"any string\". In particular, ``AnyStr`` and "
"``str | bytes`` are different from each other and have different use cases::"
msgstr ""
"Note que, apesar do nome, ``AnyStr`` não tem nada a ver com o tipo :class:"
"`Any`, nem significa \"qualquer string\". Em particular, ``AnyStr`` e ``str "
"| bytes`` são diferentes entre si e têm casos de uso diferentes::"

#: ../../library/typing.rst:821
msgid "Special type that includes only literal strings."
msgstr "Tipo especial que inclui apenas strings literais."

#: ../../library/typing.rst:823
msgid ""
"Any string literal is compatible with ``LiteralString``, as is another "
"``LiteralString``. However, an object typed as just ``str`` is not. A string "
"created by composing ``LiteralString``-typed objects is also acceptable as a "
"``LiteralString``."
msgstr ""
"Qualquer literal de string é compatível com ``LiteralString``, assim como "
"outro ``LiteralString``. Entretanto, um objeto digitado apenas ``str`` não "
"é. Uma string criada pela composição de objetos do tipo ``LiteralString`` "
"também é aceitável como uma ``LiteralString``."

#: ../../library/typing.rst:829
msgid "Example:"
msgstr "Exemplo:"

#: ../../library/typing.rst:845
msgid ""
"``LiteralString`` is useful for sensitive APIs where arbitrary user-"
"generated strings could generate problems. For example, the two cases above "
"that generate type checker errors could be vulnerable to an SQL injection "
"attack."
msgstr ""
"``LiteralString`` é útil para APIs sensíveis onde strings arbitrárias "
"geradas pelo usuário podem gerar problemas. Por exemplo, os dois casos acima "
"que geram erros no verificador de tipo podem ser vulneráveis a um ataque de "
"injeção de SQL."

#: ../../library/typing.rst:850
msgid "See :pep:`675` for more details."
msgstr "Veja :pep:`675` para mais detalhes."

#: ../../library/typing.rst:856
msgid ""
"The `bottom type <https://en.wikipedia.org/wiki/Bottom_type>`_, a type that "
"has no members."
msgstr ""

#: ../../library/typing.rst:859
msgid ""
"This can be used to define a function that should never be called, or a "
"function that never returns::"
msgstr ""

#: ../../library/typing.rst:879
msgid ""
"On older Python versions, :data:`NoReturn` may be used to express the same "
"concept. ``Never`` was added to make the intended meaning more explicit."
msgstr ""

#: ../../library/typing.rst:884
msgid "Special type indicating that a function never returns."
msgstr "Tipo especial indicando que uma função nunca retorna."

#: ../../library/typing.rst:893
msgid ""
"``NoReturn`` can also be used as a `bottom type <https://en.wikipedia.org/"
"wiki/Bottom_type>`_, a type that has no values. Starting in Python 3.11, "
"the :data:`Never` type should be used for this concept instead. Type "
"checkers should treat the two equivalently."
msgstr ""

#: ../../library/typing.rst:903
msgid "Special type to represent the current enclosed class."
msgstr "Tipo especial para representar a classe atual inclusa."

#: ../../library/typing.rst:919
msgid ""
"This annotation is semantically equivalent to the following, albeit in a "
"more succinct fashion::"
msgstr ""
"Esta anotação é semanticamente equivalente à seguinte, embora de forma mais "
"sucinta::"

#: ../../library/typing.rst:931
msgid ""
"In general, if something returns ``self``, as in the above examples, you "
"should use ``Self`` as the return annotation. If ``Foo.return_self`` was "
"annotated as returning ``\"Foo\"``, then the type checker would infer the "
"object returned from ``SubclassOfFoo.return_self`` as being of type ``Foo`` "
"rather than ``SubclassOfFoo``."
msgstr ""
"Em geral, se algo retorna ``self``, como nos exemplos acima, você deve usar "
"``Self`` como anotação de retorno. Se ``Foo.return_self`` foi anotado como "
"retornando ``\"Foo\"``, então o verificador de tipo inferiria o objeto "
"retornado de ``SubclassOfFoo.return_self`` como sendo do tipo ``Foo`` em vez "
"de ``SubclassOfFoo``."

#: ../../library/typing.rst:937
msgid "Other common use cases include:"
msgstr "Outros casos de uso comuns incluem:"

#: ../../library/typing.rst:939
msgid ""
":class:`classmethod`\\s that are used as alternative constructors and return "
"instances of the ``cls`` parameter."
msgstr ""
":class:`classmethod`\\s que são usados como construtores alternativos e "
"retornam instâncias do parâmetro ``cls``."

#: ../../library/typing.rst:941
msgid "Annotating an :meth:`~object.__enter__` method which returns self."
msgstr "Anotando um método :meth:`~object.__enter__` que retorna self."

#: ../../library/typing.rst:943
msgid ""
"You should not use ``Self`` as the return annotation if the method is not "
"guaranteed to return an instance of a subclass when the class is subclassed::"
msgstr ""
"Você não deveria usar ``Self`` como a anotação de retorno se não for "
"garantido que o método retorne uma instância de uma subclasse quando a "
"classe for subclassificada::"

#: ../../library/typing.rst:954
msgid "See :pep:`673` for more details."
msgstr "Veja :pep:`673` para mais detalhes."

#: ../../library/typing.rst:960
msgid ""
"Special annotation for explicitly declaring a :ref:`type alias <type-"
"aliases>`."
msgstr ""
"Anotações especiais para declarar explicitamente um :ref:`apelido de tipo "
"<type-aliases>`."

#: ../../library/typing.rst:968
msgid ""
"``TypeAlias`` is particularly useful for annotating aliases that make use of "
"forward references, as it can be hard for type checkers to distinguish these "
"from normal variable assignments:"
msgstr ""

#: ../../library/typing.rst:988
msgid "See :pep:`613` for more details."
msgstr "Veja :pep:`613` para mais detalhes."

#: ../../library/typing.rst:993
msgid "Special forms"
msgstr "Formas especiais"

#: ../../library/typing.rst:995
msgid ""
"These can be used as types in annotations. They all support subscription "
"using ``[]``, but each has a unique syntax."
msgstr ""
"Eles podem ser usados ​​como tipos em anotações. Todos eles oferecem suporte a "
"subscrição usando ``[]``, mas cada um tem uma sintaxe única."

#: ../../library/typing.rst:1000
msgid ""
"Union type; ``Union[X, Y]`` is equivalent to ``X | Y`` and means either X or "
"Y."
msgstr ""
"Tipo de união;  ``Union[X, Y]`` é equivalente a ``X | Y`` e significa X ou Y."

#: ../../library/typing.rst:1002
msgid ""
"To define a union, use e.g. ``Union[int, str]`` or the shorthand ``int | "
"str``. Using that shorthand is recommended. Details:"
msgstr ""
"Para definir uma união, use, por exemplo. ``Union[int, str]`` ou a "
"abreviatura ``int | str``. Usar essa abreviação é recomendado. Detalhes:"

#: ../../library/typing.rst:1004
msgid "The arguments must be types and there must be at least one."
msgstr "Os argumentos devem ser tipos e deve haver pelo menos um."

#: ../../library/typing.rst:1006
msgid "Unions of unions are flattened, e.g.::"
msgstr "As uniões de uniões são achatadas, por exemplo::"

#: ../../library/typing.rst:1010
msgid "Unions of a single argument vanish, e.g.::"
msgstr "As uniões de um único argumento desaparecem, por exemplo::"

#: ../../library/typing.rst:1014
msgid "Redundant arguments are skipped, e.g.::"
msgstr "Argumento redundantes são pulados, e.g.::"

#: ../../library/typing.rst:1018
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr "Ao comparar uniões, a ordem de argumentos é ignorada. Por exemplo::"

#: ../../library/typing.rst:1022
msgid "You cannot subclass or instantiate a ``Union``."
msgstr "Você não pode estender ou instanciar uma ``Union``"

#: ../../library/typing.rst:1024
msgid "You cannot write ``Union[X][Y]``."
msgstr "Você não pode escrever ``Union[X][Y]``."

#: ../../library/typing.rst:1026
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr "Não remova subclasses explícitas de uniões em tempo de execução."

#: ../../library/typing.rst:1029
msgid ""
"Unions can now be written as ``X | Y``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""
"Uniões agora podem ser escritas com ``X | Y``. Veja :ref:`expressões de "
"união de tipos <types-union>`."

#: ../../library/typing.rst:1035
msgid "``Optional[X]`` is equivalent to ``X | None`` (or ``Union[X, None]``)."
msgstr "``Optional[X]`` equivale a ``X | None`` (ou ``Union[X, None]``)."

#: ../../library/typing.rst:1037
msgid ""
"Note that this is not the same concept as an optional argument, which is one "
"that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""
"Note que isso não é o mesmo conceito de um argumento opcional, que possui um "
"valor por padrão. Um argumento opcional com padrão não requer o qualificador "
"``Optional`` em sua anotação de tipo só por ser opcional. Por exemplo::"

#: ../../library/typing.rst:1045
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr ""
"Por outro lado, se um valor explícito de ``None`` for permitido, o uso de "
"``Optional`` é apropriado, seja o argumento opcional ou não. Por exemplo::"

#: ../../library/typing.rst:1052
msgid ""
"Optional can now be written as ``X | None``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""
"Optional agora pode ser escrito como ``X | None``. Veja :ref:`expressões de "
"união de tipos<types-union>`."

#: ../../library/typing.rst:1058
msgid "Special form for annotating higher-order functions."
msgstr "Forma especial para anotar funções de ordem superior."

#: ../../library/typing.rst:1060
msgid ""
"``Concatenate`` can be used in conjunction with :ref:`Callable <annotating-"
"callables>` and :class:`ParamSpec` to annotate a higher-order callable which "
"adds, removes, or transforms parameters of another callable.  Usage is in "
"the form ``Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable]``. "
"``Concatenate`` is currently only valid when used as the first argument to "
"a :ref:`Callable <annotating-callables>`. The last parameter to "
"``Concatenate`` must be a :class:`ParamSpec` or ellipsis (``...``)."
msgstr ""
"``Concatenate`` pode ser usado em conjunção com :ref:`Callable <annotating-"
"callables>` e :class:`ParamSpec` para anotar um chamável de maior ordem que "
"adiciona, remove ou transforma parâmetros de outro chamável. Seu uso é feito "
"na forma ``Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable]``, "
"``Concatenate`` atualmente só é válido quando usado como primeiro argumento "
"de um :ref:`Callable <annotation-callables>`. O último parâmetro de "
"``Concatenate`` deve ser um :class:`ParamSpec` ou reticências (``...``)."

#: ../../library/typing.rst:1069
msgid ""
"For example, to annotate a decorator ``with_lock`` which provides a :class:"
"`threading.Lock` to the decorated function,  ``Concatenate`` can be used to "
"indicate that ``with_lock`` expects a callable which takes in a ``Lock`` as "
"the first argument, and returns a callable with a different type signature.  "
"In this case, the :class:`ParamSpec` indicates that the returned callable's "
"parameter types are dependent on the parameter types of the callable being "
"passed in::"
msgstr ""
"Por exemplo, para anotar um decorador ``with_lock`` que oferece uma "
"instância de :class:`threading.Lock` para a função decorada, ``Concatenate`` "
"pode ser usado para indicar que ``with_lock`` espera um chamável cujo "
"primeiro argumento tem tipo ``Lock``, e retorna um chamável com uma "
"assinatura de tipos diferente. Neste caso, o :class:`ParamSpec` indica que "
"os tipos dos parâmetros do chamável retornado dependem dos tipos dos "
"parâmetros do chamável de entrada::"

#: ../../library/typing.rst:1108 ../../library/typing.rst:1769
msgid ""
":pep:`612` -- Parameter Specification Variables (the PEP which introduced "
"``ParamSpec`` and ``Concatenate``)"
msgstr ""
":pep:`612` -- Variáveis de especificação de parâmetro (a PEP que introduz "
"``ParamSpec`` e ``Concatenate``)"

#: ../../library/typing.rst:1110
msgid ":class:`ParamSpec`"
msgstr ":class:`ParamSpec`"

#: ../../library/typing.rst:1111 ../../library/typing.rst:1772
msgid ":ref:`annotating-callables`"
msgstr ":ref:`annotating-callables`"

#: ../../library/typing.rst:1115
msgid "Special typing form to define \"literal types\"."
msgstr "Forma especial de tipagem para definir \"tipos literais\"."

#: ../../library/typing.rst:1117
msgid ""
"``Literal`` can be used to indicate to type checkers that the annotated "
"object has a value equivalent to one of the provided literals."
msgstr ""
"``Literal`` pode ser usado para indicar aos verificadores de tipo que o "
"objeto anotado tem valor equivalente a algum dos literais oferecidos."

#: ../../library/typing.rst:1133
msgid ""
"``Literal[...]`` cannot be subclassed. At runtime, an arbitrary value is "
"allowed as type argument to ``Literal[...]``, but type checkers may impose "
"restrictions. See :pep:`586` for more details about literal types."
msgstr ""
"``Literal[...]`` não é subclasse. Em tempo de execução, permite-se um valor "
"arbitrário como argumento de tipo para ``Literal[...]``, mas verificadores "
"de tipo podem impor restrições. Veja :pep:`586` para mais detalhes sobre "
"tipos literais."

#: ../../library/typing.rst:1139
msgid ""
"``Literal`` now de-duplicates parameters.  Equality comparisons of "
"``Literal`` objects are no longer order dependent. ``Literal`` objects will "
"now raise a :exc:`TypeError` exception during equality comparisons if one of "
"their parameters are not :term:`hashable`."
msgstr ""
"``Literal`` agora remove parâmetros duplicados. Comparações de igualdade "
"entre objetos ``Literal`` não dependem da ordem. Objetos ``Literal`` agora "
"levantam uma exceção :exc:`TypeError` durante comparações de igualdade se um "
"de seus parâmetros não for :term:`hasheável<hashable>`."

#: ../../library/typing.rst:1147
msgid "Special type construct to mark class variables."
msgstr "Uma construção especial de tipagem para marcar variáveis de classe."

#: ../../library/typing.rst:1149
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr ""
"Como introduzido na :pep:`526`, uma variável cuja anotação de tipo tem um "
"invólucro ClassVar indica que um dado atributo deve ser usado como uma "
"variável de classe, e que ele não deve ser definido em instâncias dessa "
"classe. Modo de usar::"

#: ../../library/typing.rst:1157
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ""
":data:`ClassVar` aceita apenas tipos e não pode ser subscrita posteriormente."

#: ../../library/typing.rst:1159
msgid ""
":data:`ClassVar` is not a class itself, and should not be used with :func:"
"`isinstance` or :func:`issubclass`. :data:`ClassVar` does not change Python "
"runtime behavior, but it can be used by third-party type checkers. For "
"example, a type checker might flag the following code as an error::"
msgstr ""
":data:`ClassVar` não é uma classe, e não deve ser usada com :func:"
"`isinstance` ou :func:`issubclass`. :data:`ClassVar` não muda com o "
"comportamento do Python em tempo de execução, mas pode ser usada por "
"verificadores de tipos de terceiros. Por exemplo, um verificador de tipos "
"pode sinalizar que o seguinte código é errado::"

#: ../../library/typing.rst:1173
msgid "Special typing construct to indicate final names to type checkers."
msgstr ""
"Uma construção especial de tipagem para indicar nomes finais a verificadores "
"de tipos"

#: ../../library/typing.rst:1175
msgid ""
"Final names cannot be reassigned in any scope. Final names declared in class "
"scopes cannot be overridden in subclasses."
msgstr ""
"Nomes finais não podem ser reatribuídos em qualquer escopo. Nomes finais "
"declarados em escopos de classe não podem ser substituídos em subclasses."

#: ../../library/typing.rst:1189 ../../library/typing.rst:2582
msgid ""
"There is no runtime checking of these properties. See :pep:`591` for more "
"details."
msgstr ""
"Não há verificação em tempo de execução dessas propriedades. Veja :pep:`591` "
"para mais detalhes."

#: ../../library/typing.rst:1196
msgid "Special typing construct to mark a :class:`TypedDict` key as required."
msgstr ""
"Uma construção especial de tipagem para marcar uma chave de :class:"
"`TypedDict` como necessária."

#: ../../library/typing.rst:1198
msgid ""
"This is mainly useful for ``total=False`` TypedDicts. See :class:`TypedDict` "
"and :pep:`655` for more details."
msgstr ""
"Isso é útil principalmente para TypedDicts com ``total=False``. Veja :class:"
"`TypedDict` e :pep:`655` para obter mais detalhes."

#: ../../library/typing.rst:1205
msgid ""
"Special typing construct to mark a :class:`TypedDict` key as potentially "
"missing."
msgstr ""
"Uma construção especial de tipagem para marcar uma chave de :class:"
"`TypedDict` como potencialmente ausente."

#: ../../library/typing.rst:1208
msgid "See :class:`TypedDict` and :pep:`655` for more details."
msgstr "Veja :class:`TypedDict` e :pep:`655` para obter mais detalhes."

#: ../../library/typing.rst:1214
msgid "Special typing form to add context-specific metadata to an annotation."
msgstr ""
"Forma especial de tipagem para adicionar metadados específicos de contexto "
"para uma anotação."

#: ../../library/typing.rst:1216
msgid ""
"Add metadata ``x`` to a given type ``T`` by using the annotation "
"``Annotated[T, x]``. Metadata added using ``Annotated`` can be used by "
"static analysis tools or at runtime. At runtime, the metadata is stored in "
"a :attr:`!__metadata__` attribute."
msgstr ""
"Adiciona metadados ``x`` a um determinado tipo ``T`` usando a anotação "
"``Annotated[T, x]``. Os metadados adicionados usando ``Annotated`` podem ser "
"usados por ferramentas de análise estática ou em tempo de execução. Em tempo "
"de execução, os metadados são armazenados em um atributo :attr:`!"
"__metadata__`."

#: ../../library/typing.rst:1221
msgid ""
"If a library or tool encounters an annotation ``Annotated[T, x]`` and has no "
"special logic for the metadata, it should ignore the metadata and simply "
"treat the annotation as ``T``. As such, ``Annotated`` can be useful for code "
"that wants to use annotations for purposes outside Python's static typing "
"system."
msgstr ""
"Se uma biblioteca ou ferramenta encontrar uma anotação ``Annotated[T, x]`` e "
"ela não tiver lógica especial para os metadados, ela deverá ignorar os "
"metadados e simplesmente tratar a anotação como ``T``. Dessa forma, "
"``Annotated`` pode ser útil em códigos que desejarem usar a anotação para "
"propósitos fora do sistema de tipagem estática do Python."

#: ../../library/typing.rst:1227
msgid ""
"Using ``Annotated[T, x]`` as an annotation still allows for static "
"typechecking of ``T``, as type checkers will simply ignore the metadata "
"``x``. In this way, ``Annotated`` differs from the :func:`@no_type_check "
"<no_type_check>` decorator, which can also be used for adding annotations "
"outside the scope of the typing system, but completely disables typechecking "
"for a function or class."
msgstr ""
"Usar ``Annotated[T, x]`` como um anotação ainda permite a verificação "
"estática do tipo de ``T``, pois os verificadores de tipo simplesmente "
"ignoram os metadados em ``x``. Dessa forma, o ``Annotated`` difere do "
"decorador :func:`@no_type_check <no_type_check>`, que também pode ser usado "
"para adicionar anotações fora do escopo do sistema de tipagem, mas desativa "
"completamente a verificação de tipos para uma função ou classe."

#: ../../library/typing.rst:1234
msgid ""
"The responsibility of how to interpret the metadata lies with the tool or "
"library encountering an ``Annotated`` annotation. A tool or library "
"encountering an ``Annotated`` type can scan through the metadata elements to "
"determine if they are of interest (e.g., using :func:`isinstance`)."
msgstr ""
"A responsabilidade de como interpretar os metadados é da ferramenta ou da "
"biblioteca que encontrar uma anotação ``Annotated``. Uma ferramenta ou "
"biblioteca que encontrar um tipo ``Annotated`` poderá examinar os elementos "
"de metadados para determinar se eles são de interesse (por exemplo, usando :"
"func:`isinstance`)."

#: ../../library/typing.rst:1242
msgid ""
"Here is an example of how you might use ``Annotated`` to add metadata to "
"type annotations if you were doing range analysis:"
msgstr ""
"Aqui está um exemplo de como você pode usar ``Annotated`` para adicionar "
"metadados a anotações de tipos se estiver fazendo uma análise de intervalos:"

#: ../../library/typing.rst:1255
msgid "Details of the syntax:"
msgstr "Detalhes da sintaxe:"

#: ../../library/typing.rst:1257
msgid "The first argument to ``Annotated`` must be a valid type"
msgstr "O primeiro argumento de ``Annotated`` deve ser um tipo válido"

#: ../../library/typing.rst:1259
msgid ""
"Multiple metadata elements can be supplied (``Annotated`` supports variadic "
"arguments)::"
msgstr ""
"Múltiplos elementos de metadados podem ser fornecidos (``Annotated`` dá "
"suporte a argumentos variádicos)::"

#: ../../library/typing.rst:1268
msgid ""
"It is up to the tool consuming the annotations to decide whether the client "
"is allowed to add multiple metadata elements to one annotation and how to "
"merge those annotations."
msgstr ""
"Cabe à ferramenta que consome as anotações decidir se o cliente tem "
"permissão de adicionar vários elementos de metadados a uma anotação e como "
"mesclar essas anotações."

#: ../../library/typing.rst:1272
msgid ""
"``Annotated`` must be subscripted with at least two arguments "
"( ``Annotated[int]`` is not valid)"
msgstr ""
"``Annotated`` deve ser subscrito com pelo menos dois argumentos "
"(``Annotated[int]`` é inválido)"

#: ../../library/typing.rst:1275
msgid ""
"The order of the metadata elements is preserved and matters for equality "
"checks::"
msgstr ""
"A ordem dos elementos de metadados é preservada e é importante em "
"verificações de igualdade::"

#: ../../library/typing.rst:1282
msgid ""
"Nested ``Annotated`` types are flattened. The order of the metadata elements "
"starts with the innermost annotation::"
msgstr ""
"Os tipos ``Annotated`` aninhados são achatados. A ordem dos elementos de "
"metadados começa com a anotação mais interna::"

#: ../../library/typing.rst:1289
msgid "Duplicated metadata elements are not removed::"
msgstr "Elementos duplicados de metadata não são removidos::"

#: ../../library/typing.rst:1295
msgid "``Annotated`` can be used with nested and generic aliases:"
msgstr ""
"``Annotated`` pode ser usado com apelidos aninhados e apelidos genéricos:"

#: ../../library/typing.rst:1308
msgid "``Annotated`` cannot be used with an unpacked :class:`TypeVarTuple`::"
msgstr ""
"``Annotated`` não pode ser usado com um :class:`TypeVarTuple` desempacotado::"

#: ../../library/typing.rst:1312
msgid "This would be equivalent to::"
msgstr "Isso deve equivaler a::"

#: ../../library/typing.rst:1316
msgid ""
"where ``T1``, ``T2``, etc. are :class:`TypeVars <TypeVar>`. This would be "
"invalid: only one type should be passed to Annotated."
msgstr ""
"onde ``T1``, ``T2``, etc. são :class:`TypeVars <TypeVar>`. Isso seria "
"inválido: somente um tipo deve ser passado para Annotated."

#: ../../library/typing.rst:1319
msgid ""
"By default, :func:`get_type_hints` strips the metadata from annotations. "
"Pass ``include_extras=True`` to have the metadata preserved:"
msgstr ""
"Por padrão, :func:`get_type_hints` retira os metadados de anotações. Passe "
"``include_extras=True`` para preservar os metadados:"

#: ../../library/typing.rst:1332
msgid ""
"At runtime, the metadata associated with an ``Annotated`` type can be "
"retrieved via the :attr:`!__metadata__` attribute:"
msgstr ""
"Em tempo de execução, os metadados associados a um tipo ``Annotated`` podem "
"ser recuperados por meio do atributo :attr:`!__metadata__`:"

#: ../../library/typing.rst:1346
msgid ":pep:`593` - Flexible function and variable annotations"
msgstr ":pep:`593` - Anotações flexíveis para funções e variáveis"

#: ../../library/typing.rst:1347
msgid "The PEP introducing ``Annotated`` to the standard library."
msgstr "A PEP que introduz ``Annotated`` à biblioteca padrão."

#: ../../library/typing.rst:1354
msgid "Special typing construct for marking user-defined type guard functions."
msgstr ""

#: ../../library/typing.rst:1356
msgid ""
"``TypeGuard`` can be used to annotate the return type of a user-defined type "
"guard function.  ``TypeGuard`` only accepts a single type argument. At "
"runtime, functions marked this way should return a boolean."
msgstr ""

#: ../../library/typing.rst:1360
msgid ""
"``TypeGuard`` aims to benefit *type narrowing* -- a technique used by static "
"type checkers to determine a more precise type of an expression within a "
"program's code flow.  Usually type narrowing is done by analyzing "
"conditional code flow and applying the narrowing to a block of code.  The "
"conditional expression here is sometimes referred to as a \"type guard\"::"
msgstr ""

#: ../../library/typing.rst:1375
msgid ""
"Sometimes it would be convenient to use a user-defined boolean function as a "
"type guard.  Such a function should use ``TypeGuard[...]`` as its return "
"type to alert static type checkers to this intention."
msgstr ""

#: ../../library/typing.rst:1379
msgid ""
"Using  ``-> TypeGuard`` tells the static type checker that for a given "
"function:"
msgstr ""
"Usar ``-> TypeGuard`` informa ao verificador de tipo estático que, para uma "
"determinada função:"

#: ../../library/typing.rst:1382
msgid "The return value is a boolean."
msgstr "O valor de retorno é um booleano."

#: ../../library/typing.rst:1383
msgid ""
"If the return value is ``True``, the type of its argument is the type inside "
"``TypeGuard``."
msgstr ""
"Se o valor de retorno for ``True``, o tipo de seu argumento é o tipo dentro "
"de ``TypeGuard``."

#: ../../library/typing.rst:1400
msgid ""
"If ``is_str_list`` is a class or instance method, then the type in "
"``TypeGuard`` maps to the type of the second parameter after ``cls`` or "
"``self``."
msgstr ""

#: ../../library/typing.rst:1404
msgid ""
"In short, the form ``def foo(arg: TypeA) -> TypeGuard[TypeB]: ...``, means "
"that if ``foo(arg)`` returns ``True``, then ``arg`` narrows from ``TypeA`` "
"to ``TypeB``."
msgstr ""

#: ../../library/typing.rst:1410
msgid ""
"``TypeB`` need not be a narrower form of ``TypeA`` -- it can even be a wider "
"form. The main reason is to allow for things like narrowing ``list[object]`` "
"to ``list[str]`` even though the latter is not a subtype of the former, "
"since ``list`` is invariant. The responsibility of writing type-safe type "
"guards is left to the user."
msgstr ""

#: ../../library/typing.rst:1416
msgid ""
"``TypeGuard`` also works with type variables.  See :pep:`647` for more "
"details."
msgstr ""

#: ../../library/typing.rst:1423
msgid "Typing operator to conceptually mark an object as having been unpacked."
msgstr ""
"Operador de tipagem para marcar conceitualmente um objeto como tendo sido "
"desempacotado."

#: ../../library/typing.rst:1425
msgid ""
"For example, using the unpack operator ``*`` on a :ref:`type variable tuple "
"<typevartuple>` is equivalent to using ``Unpack`` to mark the type variable "
"tuple as having been unpacked::"
msgstr ""

#: ../../library/typing.rst:1434
msgid ""
"In fact, ``Unpack`` can be used interchangeably with ``*`` in the context "
"of :class:`typing.TypeVarTuple <TypeVarTuple>` and :class:`builtins.tuple "
"<tuple>` types. You might see ``Unpack`` being used explicitly in older "
"versions of Python, where ``*`` couldn't be used in certain places::"
msgstr ""

#: ../../library/typing.rst:1451
msgid "Building generic types"
msgstr ""

#: ../../library/typing.rst:1453
msgid ""
"The following classes should not be used directly as annotations. Their "
"intended purpose is to be building blocks for creating generic types."
msgstr ""

#: ../../library/typing.rst:1459
msgid "Abstract base class for generic types."
msgstr "Classe base abstrata para tipos genéricos"

#: ../../library/typing.rst:1461
msgid ""
"A generic type is typically declared by inheriting from an instantiation of "
"this class with one or more type variables. For example, a generic mapping "
"type might be defined as::"
msgstr ""

#: ../../library/typing.rst:1470
msgid "This class can then be used as follows::"
msgstr "Esta classe pode ser utilizada como segue::"

#: ../../library/typing.rst:1485
msgid "Type variable."
msgstr "Tipo variável."

#: ../../library/typing.rst:1487 ../../library/typing.rst:1584
#: ../../library/typing.rst:1694 ../../library/typing.rst:1808
#: ../../library/typing.rst:1879 ../../library/typing.rst:2766
msgid "Usage::"
msgstr "Uso::"

#: ../../library/typing.rst:1493
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function and type alias definitions. See :class:`Generic` for more "
"information on generic types.  Generic functions work as follows::"
msgstr ""

#: ../../library/typing.rst:1514
msgid ""
"Note that type variables can be *bound*, *constrained*, or neither, but "
"cannot be both bound *and* constrained."
msgstr ""

#: ../../library/typing.rst:1517
msgid ""
"Type variables may be marked covariant or contravariant by passing "
"``covariant=True`` or ``contravariant=True``.  See :pep:`484` for more "
"details.  By default, type variables are invariant."
msgstr ""

#: ../../library/typing.rst:1521
msgid ""
"Bound type variables and constrained type variables have different semantics "
"in several important ways. Using a *bound* type variable means that the "
"``TypeVar`` will be solved using the most specific type possible::"
msgstr ""

#: ../../library/typing.rst:1536
msgid ""
"Type variables can be bound to concrete types, abstract types (ABCs or "
"protocols), and even unions of types::"
msgstr ""

#: ../../library/typing.rst:1544
msgid ""
"Using a *constrained* type variable, however, means that the ``TypeVar`` can "
"only ever be solved as being exactly one of the constraints given::"
msgstr ""

#: ../../library/typing.rst:1555
msgid "At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`."
msgstr "Em tempo de execução, ``isinstance(x, T)`` levantará :exc:`TypeError`."

#: ../../library/typing.rst:1559
msgid "The name of the type variable."
msgstr ""

#: ../../library/typing.rst:1563
msgid "Whether the type var has been marked as covariant."
msgstr ""

#: ../../library/typing.rst:1567
msgid "Whether the type var has been marked as contravariant."
msgstr ""

#: ../../library/typing.rst:1571
msgid "The bound of the type variable, if any."
msgstr ""

#: ../../library/typing.rst:1575
msgid "A tuple containing the constraints of the type variable, if any."
msgstr ""

#: ../../library/typing.rst:1581
msgid ""
"Type variable tuple. A specialized form of :ref:`type variable <typevar>` "
"that enables *variadic* generics."
msgstr ""

#: ../../library/typing.rst:1592
msgid ""
"A normal type variable enables parameterization with a single type. A type "
"variable tuple, in contrast, allows parameterization with an *arbitrary* "
"number of types by acting like an *arbitrary* number of type variables "
"wrapped in a tuple. For example::"
msgstr ""

#: ../../library/typing.rst:1614
msgid ""
"Note the use of the unpacking operator ``*`` in ``tuple[T, *Ts]``. "
"Conceptually, you can think of ``Ts`` as a tuple of type variables ``(T1, "
"T2, ...)``. ``tuple[T, *Ts]`` would then become ``tuple[T, *(T1, "
"T2, ...)]``, which is equivalent to ``tuple[T, T1, T2, ...]``. (Note that in "
"older versions of Python, you might see this written using :data:`Unpack "
"<Unpack>` instead, as ``Unpack[Ts]``.)"
msgstr ""

#: ../../library/typing.rst:1622
msgid ""
"Type variable tuples must *always* be unpacked. This helps distinguish type "
"variable tuples from normal type variables::"
msgstr ""

#: ../../library/typing.rst:1629
msgid ""
"Type variable tuples can be used in the same contexts as normal type "
"variables. For example, in class definitions, arguments, and return types::"
msgstr ""

#: ../../library/typing.rst:1638
msgid ""
"Type variable tuples can be happily combined with normal type variables:"
msgstr ""

#: ../../library/typing.rst:1657
msgid ""
"However, note that at most one type variable tuple may appear in a single "
"list of type arguments or type parameters::"
msgstr ""

#: ../../library/typing.rst:1664
msgid ""
"Finally, an unpacked type variable tuple can be used as the type annotation "
"of ``*args``::"
msgstr ""

#: ../../library/typing.rst:1674
msgid ""
"In contrast to non-unpacked annotations of ``*args`` - e.g. ``*args: int``, "
"which would specify that *all* arguments are ``int`` - ``*args: *Ts`` "
"enables reference to the types of the *individual* arguments in ``*args``. "
"Here, this allows us to ensure the types of the ``*args`` passed to "
"``call_soon`` match the types of the (positional) arguments of ``callback``."
msgstr ""
"Ao contrário do que acontece com anotações não desempacotadas de ``*args`` - "
"por exemplo, ``*args: int``, que especificaria que *todos* os argumentos são "
"``int`` -, ``*args: *Ts`` permite referenciar os tipos de cada argumento em "
"``*args`` *individualmente*. Isso nos permite garantir que os tipos em "
"``*args`` passados para ``call_soon`` correspondem aos tipos dos argumentos "
"(posicionais) de ``callback``."

#: ../../library/typing.rst:1681
msgid "See :pep:`646` for more details on type variable tuples."
msgstr ""

#: ../../library/typing.rst:1685
msgid "The name of the type variable tuple."
msgstr ""

#: ../../library/typing.rst:1691
msgid ""
"Parameter specification variable.  A specialized version of :ref:`type "
"variables <typevar>`."
msgstr ""

#: ../../library/typing.rst:1698
msgid ""
"Parameter specification variables exist primarily for the benefit of static "
"type checkers.  They are used to forward the parameter types of one callable "
"to another callable -- a pattern commonly found in higher order functions "
"and decorators.  They are only valid when used in ``Concatenate``, or as the "
"first argument to ``Callable``, or as parameters for user-defined Generics.  "
"See :class:`Generic` for more information on generic types."
msgstr ""
"Variáveis de especificação de parâmetro existem principalmente para o "
"benefício de verificadores de tipo estático. São usadas para encaminhar os "
"tipos de parâmetros de um chamável para outro chamável -- um padrão "
"comumente encontrado em funções e decoradores de ordem superior. Só são "
"válidas quando usados em ``Concatenate``, ou como o primeiro argumento para "
"``Callable``, ou como parâmetro para genéricos definidos pelo usuário. "
"Consulte :class:`Generic` para obter mais informações sobre tipos genéricos."

#: ../../library/typing.rst:1705
msgid ""
"For example, to add basic logging to a function, one can create a decorator "
"``add_logging`` to log function calls.  The parameter specification variable "
"tells the type checker that the callable passed into the decorator and the "
"new callable returned by it have inter-dependent type parameters::"
msgstr ""
"Por exemplo, para adicionar um registro básico de eventos a uma função, é "
"possível criar um decorador ``add_logging`` para registrar chamadas de "
"função. A variável de especificação de parâmetro informa ao verificador de "
"tipos que o chamável passado para o decorador e o novo chamável retornado "
"por ele têm parâmetros de tipo interdependentes::"

#: ../../library/typing.rst:1729
msgid ""
"Without ``ParamSpec``, the simplest way to annotate this previously was to "
"use a :class:`TypeVar` with bound ``Callable[..., Any]``.  However this "
"causes two problems:"
msgstr ""

#: ../../library/typing.rst:1733
msgid ""
"The type checker can't type check the ``inner`` function because ``*args`` "
"and ``**kwargs`` have to be typed :data:`Any`."
msgstr ""
"O verificador de tipos não consegue verificar a função ``inner``, porque "
"``*args`` e ``**kwargs`` precisam ter tipo :data:`Any`."

#: ../../library/typing.rst:1735
msgid ""
":func:`~cast` may be required in the body of the ``add_logging`` decorator "
"when returning the ``inner`` function, or the static type checker must be "
"told to ignore the ``return inner``."
msgstr ""
":func:`~cast` pode ser exigida no corpo do decorador ``add_logging`` ao "
"retornar a função ``inner``, ou o verificador de tipo estático deverá ser "
"instruído a ignorar o ``return inner``."

#: ../../library/typing.rst:1742
msgid ""
"Since ``ParamSpec`` captures both positional and keyword parameters, ``P."
"args`` and ``P.kwargs`` can be used to split a ``ParamSpec`` into its "
"components.  ``P.args`` represents the tuple of positional parameters in a "
"given call and should only be used to annotate ``*args``.  ``P.kwargs`` "
"represents the mapping of keyword parameters to their values in a given "
"call, and should be only be used to annotate ``**kwargs``.  Both attributes "
"require the annotated parameter to be in scope. At runtime, ``P.args`` and "
"``P.kwargs`` are instances respectively of :class:`ParamSpecArgs` and :class:"
"`ParamSpecKwargs`."
msgstr ""
"Como ``ParamSpec`` capturar tanto parâmetros posicionais quanto parâmetros "
"nomeados, ``P.args`` e ``P.kwargs`` podem ser usados para dividir um "
"``ParamSpec`` em seus componentes. ``P.args`` representa a tupla de "
"parâmetros posicionais em uma determinada chamada e só deve ser usada para "
"anotar ``*args``. ``P.kwargs`` representa o mapeamento de parâmetros "
"nomeados para seus valores em uma determinada chamada, e só deve ser usado "
"para anotar ``**kwargs``. Ambos os atributos exigem que o parâmetro anotado "
"esteja em escopo. Em tempo de execução, ``P.args`` e ``P.kwargs`` são "
"instâncias, respectivamente, de :class:`ParamSpecArgs` e :class:"
"`ParamSpecKwargs`."

#: ../../library/typing.rst:1754
msgid "The name of the parameter specification."
msgstr "O nome da especificação de parâmetros."

#: ../../library/typing.rst:1756
msgid ""
"Parameter specification variables created with ``covariant=True`` or "
"``contravariant=True`` can be used to declare covariant or contravariant "
"generic types.  The ``bound`` argument is also accepted, similar to :class:"
"`TypeVar`.  However the actual semantics of these keywords are yet to be "
"decided."
msgstr ""
"Variáveis de especificação de parâmetros criadas com ``covariant=True`` ou "
"``contravariant=True`` podem ser usadas para declarar tipos genéricos "
"covariantes ou contravariantes. O argumento ``bound`` também é aceito, "
"semelhante ao :class:`TypeVar`. Porém, a semântica real dessas palavras "
"reservadas ainda não foi decidida."

#: ../../library/typing.rst:1765
msgid ""
"Only parameter specification variables defined in global scope can be "
"pickled."
msgstr ""
"Somente variáveis de especificação de parâmetro definidas em escopo global "
"podem ser serializadas com pickle."

#: ../../library/typing.rst:1771
msgid ":data:`Concatenate`"
msgstr ":data:`Concatenate`"

#: ../../library/typing.rst:1777
msgid ""
"Arguments and keyword arguments attributes of a :class:`ParamSpec`. The ``P."
"args`` attribute of a ``ParamSpec`` is an instance of ``ParamSpecArgs``, and "
"``P.kwargs`` is an instance of ``ParamSpecKwargs``. They are intended for "
"runtime introspection and have no special meaning to static type checkers."
msgstr ""
"Tipos dos argumentos e dos argumentos nomeados de um :class:`ParamSpec`. O "
"atributo ``P.args`` de um ``ParamSpec`` é uma instância de "
"``ParamSpecArgs``, e o atributo ``P.kwargs`` é uma instância de "
"``ParamSpecKwargs``. São destinados à introspecção em tempo de execução, e "
"não têm nenhum significado especial para o verificador de tipo estático."

#: ../../library/typing.rst:1782
msgid ""
"Calling :func:`get_origin` on either of these objects will return the "
"original ``ParamSpec``:"
msgstr ""
"Chamar :func:`get_origin` em qualquer um desses objetos fará retornará o "
"``ParamSpec`` original:"

#: ../../library/typing.rst:1798
msgid "Other special directives"
msgstr "Outras diretivas especiais"

#: ../../library/typing.rst:1800
msgid ""
"These functions and classes should not be used directly as annotations. "
"Their intended purpose is to be building blocks for creating and declaring "
"types."
msgstr ""
"Essas funções e classes não devem ser usadas diretamente como anotações. O "
"objetivo é que sejam blocos de construção para criar e declarar tipos."

#: ../../library/typing.rst:1806
msgid "Typed version of :func:`collections.namedtuple`."
msgstr "Versão tipada de :func:`collections.namedtuple`."

#: ../../library/typing.rst:1814
msgid "This is equivalent to::"
msgstr "Isso equivale a::"

#: ../../library/typing.rst:1818
msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr ""
"Para dar um valor padrão a um campo, você pode atribuir um valor a ele no "
"corpo da classe::"

#: ../../library/typing.rst:1827
msgid ""
"Fields with a default value must come after any fields without a default."
msgstr ""
"Campos com valores padrão devem vir depois de quaisquer campos sem valores "
"padrão."

#: ../../library/typing.rst:1829
msgid ""
"The resulting class has an extra attribute ``__annotations__`` giving a dict "
"that maps the field names to the field types.  (The field names are in the "
"``_fields`` attribute and the default values are in the ``_field_defaults`` "
"attribute, both of which are part of the :func:`~collections.namedtuple` "
"API.)"
msgstr ""
"A classe resultante tem um atributo extra ``__annotations__`` que fornece um "
"dicionário que mapeia os nomes de campos para os tipos de campos. (Os nomes "
"de campos estão no atributo ``_fields`` e os valores padrão estão no "
"atributo ``_field_defaults``, e ambos fazem parte da API de :func:"
"`~collections.namedtuple`.)"

#: ../../library/typing.rst:1835
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr "Subclasses de ``NamedTuple`` também podem ter docstrings e métodos::"

#: ../../library/typing.rst:1845
msgid "``NamedTuple`` subclasses can be generic::"
msgstr "Subclasses de ``NamedTuple`` podem ser genéricas::"

#: ../../library/typing.rst:1851
msgid "Backward-compatible usage::"
msgstr "Uso retrocompatível::"

#: ../../library/typing.rst:1855
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr "Adiciona suporte à sintaxe de anotação de variáveis da :pep:`526`."

#: ../../library/typing.rst:1858
msgid "Added support for default values, methods, and docstrings."
msgstr "Adiciona suporte a valores padrão, métodos, e docstrings."

#: ../../library/typing.rst:1861
msgid ""
"The ``_field_types`` and ``__annotations__`` attributes are now regular "
"dictionaries instead of instances of ``OrderedDict``."
msgstr ""
"Os atributos ``_field_types`` e ``__annotations__`` agora são dicionários "
"regulares em vez de instâncias de ``OrderedDict``."

#: ../../library/typing.rst:1865
msgid ""
"Removed the ``_field_types`` attribute in favor of the more standard "
"``__annotations__`` attribute which has the same information."
msgstr ""
"Remove o atributo ``_field_types`` em favor do atributo mais padrão "
"``__annotations__`` que tem as mesmas informações."

#: ../../library/typing.rst:1869
msgid "Added support for generic namedtuples."
msgstr "Adicionado suporte a namedtuples genéricas."

#: ../../library/typing.rst:1874
msgid "Helper class to create low-overhead :ref:`distinct types <distinct>`."
msgstr ""

#: ../../library/typing.rst:1876
msgid ""
"A ``NewType`` is considered a distinct type by a typechecker. At runtime, "
"however, calling a ``NewType`` returns its argument unchanged."
msgstr ""
"Um tipo ``NewType`` é considerado um tipo distinto por um verificador de "
"tipos. Porém, em tempo de execução, chamar ``NewType`` retorna seu argumento "
"inalterado."

#: ../../library/typing.rst:1886
msgid "The module in which the new type is defined."
msgstr "O endereço módulo no qual o novo tipo é definido."

#: ../../library/typing.rst:1890
msgid "The name of the new type."
msgstr "O nome do novo tipo."

#: ../../library/typing.rst:1894
msgid "The type that the new type is based on."
msgstr "O tipo na qual o novo tipo é baseado."

#: ../../library/typing.rst:1898
msgid "``NewType`` is now a class rather than a function."
msgstr "``NewType`` agora é uma classe em vez de uma função."

#: ../../library/typing.rst:1903
msgid "Base class for protocol classes."
msgstr "Classe base para classes de protocolo."

#: ../../library/typing.rst:1905
msgid "Protocol classes are defined like this::"
msgstr "Classes de protocolo são definidas assim::"

#: ../../library/typing.rst:1911
msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr ""
"Essas classes são usadas principalmente com verificadores de tipo estático "
"que reconhecem a subtipagem estrutural (tipagem pato estática). Por "
"exemplo,::"

#: ../../library/typing.rst:1923
msgid ""
"See :pep:`544` for more details. Protocol classes decorated with :func:"
"`runtime_checkable` (described later) act as simple-minded runtime protocols "
"that check only the presence of given attributes, ignoring their type "
"signatures."
msgstr ""
"Consulte a :pep:`544` para obter mais detalhes. Classes de protocolo "
"decoradas com :func:`runtime_checkable` (descritas posteriormente) funcionam "
"como protocolos em tempo de execução simples, somente verificando a presença "
"de determinados atributos, e ignorando suas assinaturas de tipo."

#: ../../library/typing.rst:1928
msgid "Protocol classes can be generic, for example::"
msgstr "Classes de protocolo podem ser genéricas. Por exemplo::"

#: ../../library/typing.rst:1940
msgid "Mark a protocol class as a runtime protocol."
msgstr "Marca uma classe de protocolo como um protocolo de tempo de execução."

#: ../../library/typing.rst:1942
msgid ""
"Such a protocol can be used with :func:`isinstance` and :func:`issubclass`. "
"This raises :exc:`TypeError` when applied to a non-protocol class.  This "
"allows a simple-minded structural check, very similar to \"one trick "
"ponies\" in :mod:`collections.abc` such as :class:`~collections.abc."
"Iterable`.  For example::"
msgstr ""

#: ../../library/typing.rst:1962
msgid ""
":func:`!runtime_checkable` will check only the presence of the required "
"methods or attributes, not their type signatures or types. For example, :"
"class:`ssl.SSLObject` is a class, therefore it passes an :func:`issubclass` "
"check against :ref:`Callable <annotating-callables>`. However, the ``ssl."
"SSLObject.__init__`` method exists only to raise a :exc:`TypeError` with a "
"more informative message, therefore making it impossible to call "
"(instantiate) :class:`ssl.SSLObject`."
msgstr ""
":func:`!runtime_checkable` verificará apenas a presença dos métodos ou "
"atributos obrigatórios, em vez de tipos ou assinaturas de tipos. Por "
"exemplo, o :class:`ssl.SSLObject` é uma classe e, portanto, passa por uma "
"verificação :func:`issubclass` em relação ao :ref:`Callable <annotating-"
"callables>`. No entanto, o método ``ssl.SSLObject.__init__`` existe apenas "
"para levantar um :exc:`TypeError` com uma mensagem mais informativa, o que "
"impossibilita chamar (instanciar) o :class:`ssl.SSLObject`."

#: ../../library/typing.rst:1973
msgid ""
"An :func:`isinstance` check against a runtime-checkable protocol can be "
"surprisingly slow compared to an ``isinstance()`` check against a non-"
"protocol class. Consider using alternative idioms such as :func:`hasattr` "
"calls for structural checks in performance-sensitive code."
msgstr ""
"A verificação :func:`isinstance` sobre um protocolo verificável em tempo de "
"execução pode ser surpreendentemente lenta se comparada a uma verificação "
"``isinstance()`` sobre outros tipos de classe. Considere usar expressões "
"alternativas, como chamar a função :func:`hasattr` para realizar "
"verificações estruturais em código sensível a desempenho."

#: ../../library/typing.rst:1984
msgid ""
"Special construct to add type hints to a dictionary. At runtime it is a "
"plain :class:`dict`."
msgstr ""
"Uma construção especial para adicionar dicas de tipo a um dicionário. Em "
"tempo de execução, é um simples :class:`dict`."

#: ../../library/typing.rst:1987
msgid ""
"``TypedDict`` declares a dictionary type that expects all of its instances "
"to have a certain set of keys, where each key is associated with a value of "
"a consistent type. This expectation is not checked at runtime but is only "
"enforced by type checkers. Usage::"
msgstr ""
"``TypedDict`` declara um tipo dicionário que espera que todas as suas "
"instâncias tenham um determinado conjunto de chaves, onde cada chave está "
"associada a um valor de um tipo consistente. Essa expectativa não é "
"verificada em tempo de execução, mas é imposta apenas por verificadores de "
"tipos. Modo de usar::"

#: ../../library/typing.rst:2003
msgid ""
"To allow using this feature with older versions of Python that do not "
"support :pep:`526`, ``TypedDict`` supports two additional equivalent "
"syntactic forms:"
msgstr ""

#: ../../library/typing.rst:2007
msgid "Using a literal :class:`dict` as the second argument::"
msgstr "Utilizando um literal :class:`dict` como segundo argumento::"

#: ../../library/typing.rst:2011
msgid "Using keyword arguments::"
msgstr ""

#: ../../library/typing.rst:2018
msgid ""
"The keyword-argument syntax is deprecated in 3.11 and will be removed in "
"3.13. It may also be unsupported by static type checkers."
msgstr ""

#: ../../library/typing.rst:2019
msgid ""
"The functional syntax should also be used when any of the keys are not "
"valid :ref:`identifiers <identifiers>`, for example because they are "
"keywords or contain hyphens. Example::"
msgstr ""

#: ../../library/typing.rst:2031
msgid ""
"By default, all keys must be present in a ``TypedDict``. It is possible to "
"mark individual keys as non-required using :data:`NotRequired`::"
msgstr ""
"Por padrão, todas as chaves devem estar presentes em um ``TypedDict``. É "
"possível marcar chaves individuais como não obrigatórias usando :data:"
"`NotRequired`::"

#: ../../library/typing.rst:2042
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have the ``label`` key "
"omitted."
msgstr ""
"Isso significa que um ``TypedDict`` ``Point2D`` pode ter a chave ``label`` "
"omitida."

#: ../../library/typing.rst:2045
msgid ""
"It is also possible to mark all keys as non-required by default by "
"specifying a totality of ``False``::"
msgstr ""
"Também é possível marcar todas as chaves como não necessárias por padrão, "
"especificando a totalidade como ``False``::"

#: ../../library/typing.rst:2055
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have any of the keys "
"omitted. A type checker is only expected to support a literal ``False`` or "
"``True`` as the value of the ``total`` argument. ``True`` is the default, "
"and makes all items defined in the class body required."
msgstr ""
"Isso significa que um ``Point2D`` ``TypedDict`` pode ter qualquer uma de "
"suas chaves omitidas. Espera-se que um verificador de tipos apenas permita "
"os literais ``False`` ou ``True`` como valores do argumento ``total``. "
"``True`` é o padrão, e todos os itens definidos no corpo da classe tornam-se "
"obrigatórios."

#: ../../library/typing.rst:2060
msgid ""
"Individual keys of a ``total=False`` ``TypedDict`` can be marked as required "
"using :data:`Required`::"
msgstr ""
"As chaves individuais de um ``TypedDict`` com ``total=False`` podem ser "
"marcadas conforme necessário usando :data:`Required`::"

#: ../../library/typing.rst:2075
msgid ""
"It is possible for a ``TypedDict`` type to inherit from one or more other "
"``TypedDict`` types using the class-based syntax. Usage::"
msgstr ""
"É possível que um tipo ``TypedDict`` herde de um ou mais tipos ``TypedDict`` "
"usando a sintaxe baseada em classes. Modo de usar::"

#: ../../library/typing.rst:2082
msgid ""
"``Point3D`` has three items: ``x``, ``y`` and ``z``. It is equivalent to "
"this definition::"
msgstr ""
"``Point3D`` tem três itens: ``x``, ``y`` e ``z``. Equivale a esta definição::"

#: ../../library/typing.rst:2090
msgid ""
"A ``TypedDict`` cannot inherit from a non-\\ ``TypedDict`` class, except "
"for :class:`Generic`. For example::"
msgstr ""
"Um ``TypedDict`` não pode herdar de uma classe não ``TypedDict``, exceto :"
"class:`Generic`. Por exemplo::"

#: ../../library/typing.rst:2105
msgid "A ``TypedDict`` can be generic:"
msgstr ""

#: ../../library/typing.rst:2115
msgid ""
"A ``TypedDict`` can be introspected via annotations dicts (see :ref:"
"`annotations-howto` for more information on annotations best practices), :"
"attr:`__total__`, :attr:`__required_keys__`, and :attr:`__optional_keys__`."
msgstr ""
"Um ``TypedDict`` pode ser introspeccionado por meio de dicionários de "
"anotações (consulte :ref:`annotations-howto` para obter mais informações "
"sobre as melhores práticas de anotações), :attr:`__total__`, :attr:"
"`__required_keys__` e :attr:`__optional_keys__`."

#: ../../library/typing.rst:2121
msgid ""
"``Point2D.__total__`` gives the value of the ``total`` argument. Example:"
msgstr "``Point2D.__total__`` fornece o valor do argumento ``total``. Exemplo:"

#: ../../library/typing.rst:2137
msgid ""
"This attribute reflects *only* the value of the ``total`` argument to the "
"current ``TypedDict`` class, not whether the class is semantically total. "
"For example, a ``TypedDict`` with ``__total__`` set to True may have keys "
"marked with :data:`NotRequired`, or it may inherit from another "
"``TypedDict`` with ``total=False``. Therefore, it is generally better to "
"use :attr:`__required_keys__` and :attr:`__optional_keys__` for "
"introspection."
msgstr ""

#: ../../library/typing.rst:2150
msgid ""
"``Point2D.__required_keys__`` and ``Point2D.__optional_keys__`` return :"
"class:`frozenset` objects containing required and non-required keys, "
"respectively."
msgstr ""
"``Point2D.__required_keys__`` e ``Point2D.__optional_keys__`` retornam "
"objetos :class:`frozenset` contendo chaves obrigatórias e opcionais, "
"respectivamente."

#: ../../library/typing.rst:2153
msgid ""
"Keys marked with :data:`Required` will always appear in "
"``__required_keys__`` and keys marked with :data:`NotRequired` will always "
"appear in ``__optional_keys__``."
msgstr ""
"As chaves marcadas com :data:`Required` sempre aparecerão em "
"``__required_keys__`` e as chaves marcadas com :data:`NotRequired` sempre "
"aparecerão em ``__optional_keys__``."

#: ../../library/typing.rst:2156
msgid ""
"For backwards compatibility with Python 3.10 and below, it is also possible "
"to use inheritance to declare both required and non-required keys in the "
"same ``TypedDict`` . This is done by declaring a ``TypedDict`` with one "
"value for the ``total`` argument and then inheriting from it in another "
"``TypedDict`` with a different value for ``total``:"
msgstr ""
"Para manter a retrocompatibilidade com Python 3.10 e versões anteriores, "
"também é possível usar herança para declarar chaves obrigatórias e opcionais "
"no mesmo ``TypedDict``. Isso é feito declarando um ``TypedDict`` com um "
"valor para o argumento ``total`` e então herdando-a em outro ``TypedDict`` "
"usando um valor ``total`` diferente:"

#: ../../library/typing.rst:2181
msgid ""
"If ``from __future__ import annotations`` is used or if annotations are "
"given as strings, annotations are not evaluated when the ``TypedDict`` is "
"defined. Therefore, the runtime introspection that ``__required_keys__`` and "
"``__optional_keys__`` rely on may not work properly, and the values of the "
"attributes may be incorrect."
msgstr ""
"Se ``from __future__ import annotations`` for usado ou se anotações forem "
"fornecidas como strings, as anotações não serão avaliadas quando o "
"``TypedDict`` for definido. Portanto, a introspecção em tempo de execução da "
"qual ``__required_keys__`` e ``__optional_keys__`` dependem pode não "
"funcionar corretamente, e os valores dos atributos podem estar incorretos."

#: ../../library/typing.rst:2187
msgid ""
"See :pep:`589` for more examples and detailed rules of using ``TypedDict``."
msgstr ""
"Consulte :pep:`589` para obter mais exemplos e regras detalhadas sobre o uso "
"de ``TypedDict``."

#: ../../library/typing.rst:2191
msgid ""
"Added support for marking individual keys as :data:`Required` or :data:"
"`NotRequired`. See :pep:`655`."
msgstr ""
"Adicionado suporte para marcar chaves individuais como :data:`Required` ou :"
"data:`NotRequired`. Consulte :pep:`655`."

#: ../../library/typing.rst:2195
msgid "Added support for generic ``TypedDict``\\ s."
msgstr "Adicionado suporte para ``TypedDict``\\ s genéricos."

#: ../../library/typing.rst:2199
msgid "Protocols"
msgstr "Protocolos"

#: ../../library/typing.rst:2201
msgid ""
"The following protocols are provided by the typing module. All are decorated "
"with :func:`@runtime_checkable <runtime_checkable>`."
msgstr ""
"Os protocolos a seguir são fornecidos pelo módulo typing. Todos são "
"decorados com :func:`@runtime_checkable <runtime_checkable>`."

#: ../../library/typing.rst:2206
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr ""
"Um ABC com um método abstrato ``__abs__`` que é covariante em seu tipo de "
"retorno."

#: ../../library/typing.rst:2211
msgid "An ABC with one abstract method ``__bytes__``."
msgstr "Um ABC com um método abstrato ``__bytes__``."

#: ../../library/typing.rst:2215
msgid "An ABC with one abstract method ``__complex__``."
msgstr "Um ABC com um método abstrato ``__complex__``."

#: ../../library/typing.rst:2219
msgid "An ABC with one abstract method ``__float__``."
msgstr "Um ABC com um método abstrato ``__float__``."

#: ../../library/typing.rst:2223
msgid "An ABC with one abstract method ``__index__``."
msgstr "Um ABC com um método abstrato ``__index__``."

#: ../../library/typing.rst:2229
msgid "An ABC with one abstract method ``__int__``."
msgstr "Um ABC com um método abstrato ``__int__``."

#: ../../library/typing.rst:2233
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr ""
"Uma ABC com um método abstrato ``__round__`` que é covariante em seu tipo de "
"retorno."

#: ../../library/typing.rst:2237
msgid "ABCs for working with IO"
msgstr "ABCs para trabalhar com E/S"

#: ../../library/typing.rst:2243
msgid ""
"Generic type ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`."
msgstr ""
"O tipo genérico ``IO[AnyStr]`` e suas subclasses ``TextIO(IO[str])`` e "
"``BinaryIO(IO[bytes])`` representam os tipos de fluxos de E/S, como os "
"retornados por :func:`open`."

#: ../../library/typing.rst:2249
msgid "Functions and decorators"
msgstr "Funções e decoradores"

#: ../../library/typing.rst:2253
msgid "Cast a value to a type."
msgstr "Define um valor para um tipo."

#: ../../library/typing.rst:2255
msgid ""
"This returns the value unchanged.  To the type checker this signals that the "
"return value has the designated type, but at runtime we intentionally don't "
"check anything (we want this to be as fast as possible)."
msgstr ""
"Isso retorna o valor inalterado. Para o verificador de tipos, isso indica "
"que o valor de retorno tem o tipo designado, mas em tempo de execução não "
"verificamos nada intencionalmente (queremos que isso seja o mais rápido "
"possível)."

#: ../../library/typing.rst:2262
msgid ""
"Ask a static type checker to confirm that *val* has an inferred type of "
"*typ*."
msgstr ""
"Pede para um verificador de tipo estático confirmar se *val* tem tipo "
"inferido *typ*."

#: ../../library/typing.rst:2264
msgid ""
"At runtime this does nothing: it returns the first argument unchanged with "
"no checks or side effects, no matter the actual type of the argument."
msgstr ""
"Essa função faz nada em tempo de execução: ela retorna o primeiro argumento "
"inalterado, sem verificações ou efeitos colaterais, independentemente do "
"tipo real do argumento."

#: ../../library/typing.rst:2267
msgid ""
"When a static type checker encounters a call to ``assert_type()``, it emits "
"an error if the value is not of the specified type::"
msgstr ""
"Quando um verificador de tipo estático encontra uma chamada para "
"``assert_type()``, ele emite um erro se o valor não for do tipo "
"especificado::"

#: ../../library/typing.rst:2274
msgid ""
"This function is useful for ensuring the type checker's understanding of a "
"script is in line with the developer's intentions::"
msgstr ""
"Esse função é útil para garantir que o verificador de tipos entende um "
"script conforme as intenções do desenvolvedor::"

#: ../../library/typing.rst:2288
msgid ""
"Ask a static type checker to confirm that a line of code is unreachable."
msgstr ""
"Pede ao verificador de tipo estático para confirmar se uma linha de código é "
"inalcançável."

#: ../../library/typing.rst:2290
msgid "Example::"
msgstr "Exemplo::"

#: ../../library/typing.rst:2301
msgid ""
"Here, the annotations allow the type checker to infer that the last case can "
"never execute, because ``arg`` is either an :class:`int` or a :class:`str`, "
"and both options are covered by earlier cases."
msgstr ""
"Aqui, as anotações permitem que o verificador de tipos deduza que o último "
"caso nunca será executado, pois ``arg`` é um :class:`int` ou uma :class:"
"`str`, e ambas as opções são cobertas por casos anteriores."

#: ../../library/typing.rst:2306
msgid ""
"If a type checker finds that a call to ``assert_never()`` is reachable, it "
"will emit an error. For example, if the type annotation for ``arg`` was "
"instead ``int | str | float``, the type checker would emit an error pointing "
"out that ``unreachable`` is of type :class:`float`. For a call to "
"``assert_never`` to pass type checking, the inferred type of the argument "
"passed in must be the bottom type, :data:`Never`, and nothing else."
msgstr ""
"Se um verificador de tipos descobrir que uma chamada para ``assert_never()`` "
"é alcançável, ele emitirá um erro. por exemplo, se o anotação de tipo para "
"``arg`` fosse ``int | str | float``, o verificador de tipos emitiria um erro "
"indicando que ``unreachable`` é do tipo :class:`float`. Para que uma chamada "
"para ``assert_never`` passe verificação de tipos, o tipo inferido do "
"argumento passado deve ser o tipo inferior, :data:`Never`, e nada mais."

#: ../../library/typing.rst:2314
msgid "At runtime, this throws an exception when called."
msgstr "Em tempo de execução, essa função levanta uma exceção quando chamada."

#: ../../library/typing.rst:2317
msgid ""
"`Unreachable Code and Exhaustiveness Checking <https://typing.readthedocs.io/"
"en/latest/source/unreachable.html>`__ has more information about "
"exhaustiveness checking with static typing."
msgstr ""

#: ../../library/typing.rst:2325
msgid "Ask a static type checker to reveal the inferred type of an expression."
msgstr ""
"Pede para um verificador de tipo estático revelar o tipo inferido de uma "
"expressão."

#: ../../library/typing.rst:2327
msgid ""
"When a static type checker encounters a call to this function, it emits a "
"diagnostic with the inferred type of the argument. For example::"
msgstr ""
"Quando um verificador de tipo estático encontra uma chamada para essa "
"função, ele emite um diagnóstico com o tipo inferido do argumento. Por "
"exemplo::"

#: ../../library/typing.rst:2333
msgid ""
"This can be useful when you want to debug how your type checker handles a "
"particular piece of code."
msgstr ""
"Isso pode ser útil quando você deseja depurar como o verificador de tipos "
"lida com um determinado trecho de código."

#: ../../library/typing.rst:2336
msgid ""
"At runtime, this function prints the runtime type of its argument to :data:"
"`sys.stderr` and returns the argument unchanged (allowing the call to be "
"used within an expression)::"
msgstr ""
"Em tempo de execução, esta função envia o tipo de seu argumento para :data:"
"`sys.stderr` e retorna o argumento inalterado (permitindo que a chamada seja "
"usada em uma expressão)::"

#: ../../library/typing.rst:2343
msgid ""
"Note that the runtime type may be different from (more or less specific "
"than) the type statically inferred by a type checker."
msgstr ""
"Observe que o tipo em tempo de execução pode ser diferente (mais ou menos "
"específico) do tipo inferido estaticamente por um verificador de tipos."

#: ../../library/typing.rst:2346
msgid ""
"Most type checkers support ``reveal_type()`` anywhere, even if the name is "
"not imported from ``typing``. Importing the name from ``typing``, however, "
"allows your code to run without runtime errors and communicates intent more "
"clearly."
msgstr ""
"A maioria dos verificadores de tipos dá suporte a ``reveal_type()`` em "
"qualquer lugar, mesmo que o nome não seja importado de ``typing``. Porém, "
"importar o nome de ``typing`` permite que o código seja executado sem erros "
"em tempo de execução e comunica a intenção com mais clareza."

#: ../../library/typing.rst:2357
msgid ""
"Decorator to mark an object as providing :func:`dataclass <dataclasses."
"dataclass>`-like behavior."
msgstr ""
"Um decorador que marca um objeto como tendo comportamento similar a uma :"
"func:`dataclass <dataclasses.dataclass>`."

#: ../../library/typing.rst:2360
msgid ""
"``dataclass_transform`` may be used to decorate a class, metaclass, or a "
"function that is itself a decorator. The presence of "
"``@dataclass_transform()`` tells a static type checker that the decorated "
"object performs runtime \"magic\" that transforms a class in a similar way "
"to :func:`@dataclasses.dataclass <dataclasses.dataclass>`."
msgstr ""
"``dataclass_transform`` pode ser usado para decorar uma classe, metaclasse, "
"ou função decoradora. A presença de ``@dataclass_transform()`` informa a um "
"verificador de tipo estático que o objeto decorado executa \"mágica\" em "
"tempo de execução que transforma uma classe de maneira semelhante a :func:"
"`@dataclasses.dataclass <dataclasses.dataclass>`."

#: ../../library/typing.rst:2367
msgid "Example usage with a decorator function:"
msgstr "Exemplo de uso com a função decoradora:"

#: ../../library/typing.rst:2383
msgid "On a base class::"
msgstr "Em uma classe base::"

#: ../../library/typing.rst:2392
msgid "On a metaclass::"
msgstr "Em uma metaclasse::"

#: ../../library/typing.rst:2403
msgid ""
"The ``CustomerModel`` classes defined above will be treated by type checkers "
"similarly to classes created with :func:`@dataclasses.dataclass <dataclasses."
"dataclass>`. For example, type checkers will assume these classes have "
"``__init__`` methods that accept ``id`` and ``name``."
msgstr ""
"As classes ``CustomerModel`` definidas acima serão tratadas pelos "
"verificadores de tipos semelhantemente às classes criadas com :func:"
"`@dataclasses.dataclass <dataclasses.dataclass>`. Por exemplo, os "
"verificadores de tipo presumirão que essas classes têm métodos ``__init__`` "
"que aceitam ``id`` e ``name``."

#: ../../library/typing.rst:2409
msgid ""
"The decorated class, metaclass, or function may accept the following bool "
"arguments which type checkers will assume have the same effect as they would "
"have on the :func:`@dataclasses.dataclass<dataclasses.dataclass>` decorator: "
"``init``, ``eq``, ``order``, ``unsafe_hash``, ``frozen``, ``match_args``, "
"``kw_only``, and ``slots``. It must be possible for the value of these "
"arguments (``True`` or ``False``) to be statically evaluated."
msgstr ""
"A classe, metaclasse, ou função decorada pode aceitar os seguintes "
"argumentos booleanos tal que verificadores de tipo presumirão ter o mesmo "
"efeito que teriam no decorador :func:`@dataclasses.dataclass<dataclasses."
"dataclass>`: ``init``, ``eq``, ``order``, ``unsafe_hash``, ``frozen``, "
"``match_args``, ``kw_only``, e ``slots``. É necessário que o valor desses "
"argumentos (``True`` ou ``False``) seja avaliado estaticamente."

#: ../../library/typing.rst:2417
msgid ""
"The arguments to the ``dataclass_transform`` decorator can be used to "
"customize the default behaviors of the decorated class, metaclass, or "
"function:"
msgstr ""
"Os argumentos do decorador ``dataclass_transform`` podem ser usados para "
"personalizar os comportamentos padrão da classe, metaclasse, ou função "
"decorada:"

#: ../../library/typing.rst:0
msgid "Parameters"
msgstr "Parâmetros"

#: ../../library/typing.rst:2421
msgid ""
"Indicates whether the ``eq`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``True``."
msgstr ""
"Indica se o parâmetro ``eq`` é presumido como ``True`` ou ``False`` se for "
"omitido pelo chamador. O padrão é ``True``."

#: ../../library/typing.rst:2426
msgid ""
"Indicates whether the ``order`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""
"Indica se o parâmetro ``order`` é presumido como ``True`` ou ``False`` se "
"for omitido pelo chamador. O padrão é ``False``."

#: ../../library/typing.rst:2431
msgid ""
"Indicates whether the ``kw_only`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""
"Indica se o parâmetro ``kw_only`` é presumido como ``True`` ou ``False`` se "
"for omitido pelo chamador. O padrão é ``False``."

#: ../../library/typing.rst:2436
msgid ""
"Specifies a static list of supported classes or functions that describe "
"fields, similar to :func:`dataclasses.field`. Defaults to ``()``."
msgstr ""
"Especifica uma lista estática de classes ou funções compatíveis que "
"descrevem campos, semelhante a :func:`dataclasses.field`. O valor padrão é "
"``()``."

#: ../../library/typing.rst:2442
msgid ""
"Arbitrary other keyword arguments are accepted in order to allow for "
"possible future extensions."
msgstr ""
"Outros argumentos nomeados arbitrários são aceitos para permitir possíveis "
"futuras extensões."

#: ../../library/typing.rst:2446
msgid ""
"Type checkers recognize the following optional parameters on field "
"specifiers:"
msgstr ""
"Verificadores de tipo reconhecem os seguintes parâmetros opcionais em "
"especificadores de campos:"

#: ../../library/typing.rst:2449
msgid "**Recognised parameters for field specifiers**"
msgstr "**Parâmetros reconhecidos para especificadores de campos**"

#: ../../library/typing.rst:2453
msgid "Parameter name"
msgstr "Nome do parâmetro"

#: ../../library/typing.rst:2454
msgid "Description"
msgstr "Descrição"

#: ../../library/typing.rst:2455
msgid "``init``"
msgstr "``init``"

#: ../../library/typing.rst:2456
msgid ""
"Indicates whether the field should be included in the synthesized "
"``__init__`` method. If unspecified, ``init`` defaults to ``True``."
msgstr ""
"Indica se o campo deve ser incluído no método ``__init__`` sintetizado. Se "
"não for especificado, o valor padrão de ``init`` é ``True``."

#: ../../library/typing.rst:2459
msgid "``default``"
msgstr "``default``"

#: ../../library/typing.rst:2460
msgid "Provides the default value for the field."
msgstr "Fornece o valor padrão do campo."

#: ../../library/typing.rst:2461
msgid "``default_factory``"
msgstr "``default_factory``"

#: ../../library/typing.rst:2462
msgid ""
"Provides a runtime callback that returns the default value for the field. If "
"neither ``default`` nor ``default_factory`` are specified, the field is "
"assumed to have no default value and must be provided a value when the class "
"is instantiated."
msgstr ""
"Fornece uma função de retorno de tempo de execução que retorna o valor "
"padrão do campo. Se nem ``default`` nem ``default_factory`` forem "
"especificados, o campo é presumido como sem valor padrão e deverá receber um "
"valor quando a classe for instanciada."

#: ../../library/typing.rst:2467
msgid "``factory``"
msgstr "``factory``"

#: ../../library/typing.rst:2468
msgid "An alias for the ``default_factory`` parameter on field specifiers."
msgstr ""
"Um apelido para o parâmetro ``default_factory`` em especificadores de campos."

#: ../../library/typing.rst:2469
msgid "``kw_only``"
msgstr "``kw_only``"

#: ../../library/typing.rst:2470
msgid ""
"Indicates whether the field should be marked as keyword-only. If ``True``, "
"the field will be keyword-only. If ``False``, it will not be keyword-only. "
"If unspecified, the value of the ``kw_only`` parameter on the object "
"decorated with ``dataclass_transform`` will be used, or if that is "
"unspecified, the value of ``kw_only_default`` on ``dataclass_transform`` "
"will be used."
msgstr ""
"Indica se o campo deve ser marcado como somente-nomeado. Se verdadeiro, o "
"campo será somente-nomeado. Se falso, não será somente-nomeado. Se não for "
"especificado, será usado o valor do parâmetro ``kw_only`` do objeto decorado "
"com ``dataclass_transform`` ou, se este não for especificado, será usado o "
"valor de ``kw_only_default`` no ``dataclass_transform``."

#: ../../library/typing.rst:2476
msgid "``alias``"
msgstr "``alias``"

#: ../../library/typing.rst:2477
msgid ""
"Provides an alternative name for the field. This alternative name is used in "
"the synthesized ``__init__`` method."
msgstr ""
"Fornece um nome alternativo para o campo. Esse nome alternativo é usado no "
"método ``__init__`` sintetizado."

#: ../../library/typing.rst:2480
msgid ""
"At runtime, this decorator records its arguments in the "
"``__dataclass_transform__`` attribute on the decorated object. It has no "
"other runtime effect."
msgstr ""
"Em tempo de execução, esse decorador registra seu argumento no atributo "
"``__dataclass_transform__`` no objeto decorado. Ele não tem nenhum outro "
"efeito em tempo de execução."

#: ../../library/typing.rst:2484
msgid "See :pep:`681` for more details."
msgstr "Veja :pep:`681` para mais detalhes."

#: ../../library/typing.rst:2492
msgid "Decorator for creating overloaded functions and methods."
msgstr "Decorador para criar funções e métodos sobrecarregados."

#: ../../library/typing.rst:2494
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one non-"
"``@overload``-decorated definition (for the same function/method)."
msgstr ""
"O decorador ``@overload`` permite descrever funções e métodos com suporte a "
"várias combinações de tipos de argumento. Uma sequência de definições "
"decoradas com ``@overload`` deve preceder uma única definição não decorada "
"por ``@overload`` (para a mesma função/método)."

#: ../../library/typing.rst:2499
msgid ""
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition. The non-``@overload``-decorated definition, meanwhile, will be "
"used at runtime but should be ignored by a type checker.  At runtime, "
"calling an ``@overload``-decorated function directly will raise :exc:"
"`NotImplementedError`."
msgstr ""
"Definições decoradas com ``@overload`` são usadas somente para benefício do "
"verificador de tipos, já que serão sobrescritas por definições sem decoração "
"de ``@overload``. Enquanto isso, definições sem decoração de ``@overload`` "
"serão usadas em tempo de execução, mas devem ser ignoradas pelo verificador "
"de tipos. Em tempo de execução, chamar uma função decorada por ``@overload`` "
"diretamente levantará :exc:`NotImplementedError`."

#: ../../library/typing.rst:2507
msgid ""
"An example of overload that gives a more precise type than can be expressed "
"using a union or a type variable:"
msgstr ""

#: ../../library/typing.rst:2524
msgid ""
"See :pep:`484` for more details and comparison with other typing semantics."
msgstr ""
"Consulte :pep:`484` para mais detalhes e uma comparação com outras "
"semânticas de tipagem."

#: ../../library/typing.rst:2526
msgid ""
"Overloaded functions can now be introspected at runtime using :func:"
"`get_overloads`."
msgstr ""
"Funções sobrecarregadas agora podem ser introspeccionadas em tempo de "
"execução usando :func:`get_overloads`."

#: ../../library/typing.rst:2533
msgid ""
"Return a sequence of :func:`@overload <overload>`-decorated definitions for "
"*func*."
msgstr ""
"Retorna uma sequência de :func:`@overload <overload>` -definições decoradas "
"para *func*."

#: ../../library/typing.rst:2536
msgid ""
"*func* is the function object for the implementation of the overloaded "
"function. For example, given the definition of ``process`` in the "
"documentation for :func:`@overload <overload>`, ``get_overloads(process)`` "
"will return a sequence of three function objects for the three defined "
"overloads. If called on a function with no overloads, ``get_overloads()`` "
"returns an empty sequence."
msgstr ""
"*func* é o objeto função para a implementação da função sobrecarregada. Por "
"exemplo, dada a definição de ``process`` na documentação de :func:"
"`@sobrecarga <overload>` , ``get_overloads(process)`` retornará uma "
"sequência de três objetos função para as três sobrecargas definidas. Se for "
"chamada em uma função sem sobrecargas, ``get_overloads()`` retornará uma "
"sequência vazia."

#: ../../library/typing.rst:2543
msgid ""
"``get_overloads()`` can be used for introspecting an overloaded function at "
"runtime."
msgstr ""
"A função ``get_overloads()`` pode ser usada em tempo de execução para "
"introspecção de uma função sobrecarregada."

#: ../../library/typing.rst:2551
msgid "Clear all registered overloads in the internal registry."
msgstr "Apaga todas as sobrecargas registradas no registro interno."

#: ../../library/typing.rst:2553
msgid "This can be used to reclaim the memory used by the registry."
msgstr "Isso pode ser usado para recuperar a memória usada pelo registro."

#: ../../library/typing.rst:2560
msgid "Decorator to indicate final methods and final classes."
msgstr "Um decorador para indicar métodos e classes finais."

#: ../../library/typing.rst:2562
msgid ""
"Decorating a method with ``@final`` indicates to a type checker that the "
"method cannot be overridden in a subclass. Decorating a class with "
"``@final`` indicates that it cannot be subclassed."
msgstr ""
"Decorar um método com ``@final`` indica a um verificador de tipos que o "
"método não pode ser substituído em uma subclasse. Decorar uma classe com "
"``@final`` indica que ela não pode ser herdada."

#: ../../library/typing.rst:2587
msgid ""
"The decorator will now attempt to set a ``__final__`` attribute to ``True`` "
"on the decorated object. Thus, a check like ``if getattr(obj, \"__final__\", "
"False)`` can be used at runtime to determine whether an object ``obj`` has "
"been marked as final. If the decorated object does not support setting "
"attributes, the decorator returns the object unchanged without raising an "
"exception."
msgstr ""
"O decorador tentará definir um atributo ``__final__`` como ``True`` no "
"objeto decorado. Assim, uma verificação como ``if getattr(obj, "
"\"__final__\", False)`` pode ser usada em tempo de execução para determinar "
"se um objeto ``obj`` foi marcado como final. Se o objeto decorado dá suporte "
"a definição de atributos, o decorador retorna o objeto inalterado sem "
"levantar uma exceção."

#: ../../library/typing.rst:2598
msgid "Decorator to indicate that annotations are not type hints."
msgstr "Decorador para indicar que anotações não são dicas de tipo."

#: ../../library/typing.rst:2600
msgid ""
"This works as a class or function :term:`decorator`.  With a class, it "
"applies recursively to all methods and classes defined in that class (but "
"not to methods defined in its superclasses or subclasses). Type checkers "
"will ignore all annotations in a function or class with this decorator."
msgstr ""
"Isso funciona como :term:`decorator` de uma classe ou função. Com uma "
"classe, ele se aplica recursivamente a todos os métodos e classes definidos "
"nessa classe (mas não a métodos definidos em suas superclasses ou "
"subclasses). Os verificadores de tipos ignorarão todas as anotações em uma "
"função ou classe com este decorador."

#: ../../library/typing.rst:2606
msgid "``@no_type_check`` mutates the decorated object in place."
msgstr "``@no_type_check`` modifica o objeto decorado internamente."

#: ../../library/typing.rst:2610
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr "Decorador para dar a outro decorador o efeito :func:`no_type_check`."

#: ../../library/typing.rst:2612
msgid ""
"This wraps the decorator with something that wraps the decorated function "
"in :func:`no_type_check`."
msgstr ""
"Isso envolve o decorador com algo que envolve a função decorada em :func:"
"`no_type_check`."

#: ../../library/typing.rst:2617
msgid "Decorator to mark a class or function as unavailable at runtime."
msgstr ""
"Decorador para marcar uma classe ou função como indisponível em tempo de "
"execução."

#: ../../library/typing.rst:2619
msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr ""

#: ../../library/typing.rst:2630
msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr ""
"Observe que retornar instâncias de classes privadas não é recomendado. "
"Normalmente, é preferível tornar essas classes públicas."

#: ../../library/typing.rst:2634
msgid "Introspection helpers"
msgstr ""

#: ../../library/typing.rst:2638
msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr ""
"Retorna um dicionário contendo dicas de tipo para uma função, método, módulo "
"ou objeto classe."

#: ../../library/typing.rst:2641
msgid ""
"This is often the same as ``obj.__annotations__``. In addition, forward "
"references encoded as string literals are handled by evaluating them in "
"``globals`` and ``locals`` namespaces. For a class ``C``, return a "
"dictionary constructed by merging all the ``__annotations__`` along ``C."
"__mro__`` in reverse order."
msgstr ""

#: ../../library/typing.rst:2647
msgid ""
"The function recursively replaces all ``Annotated[T, ...]`` with ``T``, "
"unless ``include_extras`` is set to ``True`` (see :class:`Annotated` for "
"more information). For example:"
msgstr ""

#: ../../library/typing.rst:2664
msgid ""
":func:`get_type_hints` does not work with imported :ref:`type aliases <type-"
"aliases>` that include forward references. Enabling postponed evaluation of "
"annotations (:pep:`563`) may remove the need for most forward references."
msgstr ""

#: ../../library/typing.rst:2669
msgid ""
"Added ``include_extras`` parameter as part of :pep:`593`. See the "
"documentation on :data:`Annotated` for more information."
msgstr ""
"Adiciona o parâmetro ``include_extras`` como parte da :pep:`593`. Consulte a "
"documentação em :data:`Annotated` para obter mais informações."

#: ../../library/typing.rst:2673
msgid ""
"Previously, ``Optional[t]`` was added for function and method annotations if "
"a default value equal to ``None`` was set. Now the annotation is returned "
"unchanged."
msgstr ""
"Anteriormente, ``Optional[t]`` era adicionado a anotações de funções e "
"métodos se um valor padrão igual a ``None`` fosse definido. Agora, a "
"anotação é retornada inalterada."

#: ../../library/typing.rst:2680
msgid ""
"Get the unsubscripted version of a type: for a typing object of the form "
"``X[Y, Z, ...]`` return ``X``."
msgstr ""
"Obtenha o versão sem subscrição de um tipo: para um objeto cujo tipo tem a "
"forma ``X[Y, Z, ...]``, retorna ``X`` ."

#: ../../library/typing.rst:2683
msgid ""
"If ``X`` is a typing-module alias for a builtin or :mod:`collections` class, "
"it will be normalized to the original class. If ``X`` is an instance of :"
"class:`ParamSpecArgs` or :class:`ParamSpecKwargs`, return the underlying :"
"class:`ParamSpec`. Return ``None`` for unsupported objects."
msgstr ""
"Se ``X`` for um apelido do módulo typing para uma classe embutida ou classe "
"de :mod:`collections`, ele será normalizado para a classe original. Se ``X`` "
"for uma instância de :class:`ParamSpecArgs` ou :class:`ParamSpecKwargs`, "
"retorna o :class:`ParamSpec` subjacente. Retorna ``None`` para objetos "
"incompatíveis."

#: ../../library/typing.rst:2689 ../../library/typing.rst:2712
msgid "Examples:"
msgstr "Exemplos:"

#: ../../library/typing.rst:2704
msgid ""
"Get type arguments with all substitutions performed: for a typing object of "
"the form ``X[Y, Z, ...]`` return ``(Y, Z, ...)``."
msgstr ""
"Obtenha os argumentos de tipos com todas as substituições realizadas: para "
"um objeto cujo tipo tem a forma ``X[Y, Z, ...]``, retorna ``(Y, Z, ...)`` ."

#: ../../library/typing.rst:2707
msgid ""
"If ``X`` is a union or :class:`Literal` contained in another generic type, "
"the order of ``(Y, Z, ...)`` may be different from the order of the original "
"arguments ``[Y, Z, ...]`` due to type caching. Return ``()`` for unsupported "
"objects."
msgstr ""
"Se ``X`` for uma união ou um :class:`Literal`, e estiver contido em outro "
"tipo genérico, a ordem de ``(Y, Z, ...)`` poderá ser diferente da ordem dos "
"argumentos originais ``[Y, Z, ...]`` devido ao armazenamento dos tipos em "
"cache. Retorna ``()`` para objetos sem suporte."

#: ../../library/typing.rst:2724
msgid "Check if a type is a :class:`TypedDict`."
msgstr "Verifica se um tipo é um :class:`TypedDict`."

#: ../../library/typing.rst:2745
msgid ""
"Class used for internal typing representation of string forward references."
msgstr ""

#: ../../library/typing.rst:2747
msgid ""
"For example, ``List[\"SomeClass\"]`` is implicitly transformed into "
"``List[ForwardRef(\"SomeClass\")]``.  ``ForwardRef`` should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""
"Por exemplo, o tipo ``List[\"SomeClass\"]`` é implicitamente transformado em "
"``List[ForwardRef(\"SomeClass\")]``. ``ForwardRef`` não deve ser instanciado "
"por um usuário, mas pode ser usado por ferramentas de introspecção."

#: ../../library/typing.rst:2752
msgid ""
":pep:`585` generic types such as ``list[\"SomeClass\"]`` will not be "
"implicitly transformed into ``list[ForwardRef(\"SomeClass\")]`` and thus "
"will not automatically resolve to ``list[SomeClass]``."
msgstr ""
"Tipos genéricos da :pep:`585` como ``list[\"SomeClass\"]`` não serão "
"transformados implicitamente em ``list[ForwardRef(\"SomeClass\")]`` e, "
"portanto, não serão resolvidos automaticamente para ``list[SomeClass]``."

#: ../../library/typing.rst:2759
msgid "Constant"
msgstr "Constante"

#: ../../library/typing.rst:2763
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It is ``False`` at runtime."
msgstr ""
"Uma constante especial presumida ser ``True`` por verificadores de tipo "
"estático de terceiros. É ``False`` em tempo de execução."

#: ../../library/typing.rst:2774
msgid ""
"The first type annotation must be enclosed in quotes, making it a \"forward "
"reference\", to hide the ``expensive_mod`` reference from the interpreter "
"runtime.  Type annotations for local variables are not evaluated, so the "
"second annotation does not need to be enclosed in quotes."
msgstr ""
"A primeira anotação de tipo deve ser colocada entre aspas, tornando-a uma "
"\"referência ao futuro\", para esconder do interpretador a referência ao "
"módulo ``expensive_mod``. As anotações de tipos em variáveis locais não são "
"avaliadas, então a segunda anotação não precisa ser colocada entre aspas."

#: ../../library/typing.rst:2781
msgid ""
"If ``from __future__ import annotations`` is used, annotations are not "
"evaluated at function definition time. Instead, they are stored as strings "
"in ``__annotations__``. This makes it unnecessary to use quotes around the "
"annotation (see :pep:`563`)."
msgstr ""
"Se ``from __future__ import annotations`` for usado, anotações não serão "
"avaliadas no momento de definição de funções. Em vez disso, elas são "
"armazenadas como string em ``__annotations__``. Isso torna desnecessário o "
"uso de aspas em anotações (consulte :pep:`563`)."

#: ../../library/typing.rst:2793
msgid "Deprecated aliases"
msgstr "Apelidos descontinuados"

#: ../../library/typing.rst:2795
msgid ""
"This module defines several deprecated aliases to pre-existing standard "
"library classes. These were originally included in the typing module in "
"order to support parameterizing these generic classes using ``[]``. However, "
"the aliases became redundant in Python 3.9 when the corresponding pre-"
"existing classes were enhanced to support ``[]`` (see :pep:`585`)."
msgstr ""
"Este módulo define vários apelidos descontinuados de classes pré-existentes "
"da biblioteca padrão. Originalmente, elas eram incluídas no módulo typing "
"para permitir a parametrização dessas classes genéricas usand ``[]``. Porém, "
"os apelidos se tornaram redundantes no Python 3.9, quando as classes pré-"
"existentes correspondentes passaram a dar suporte a ``[]`` (consulte a :pep:"
"`585`)."

#: ../../library/typing.rst:2802
msgid ""
"The redundant types are deprecated as of Python 3.9. However, while the "
"aliases may be removed at some point, removal of these aliases is not "
"currently planned. As such, no deprecation warnings are currently issued by "
"the interpreter for these aliases."
msgstr ""
"Os tipos redundantes estão descontinuados desde Python 3.9. No entanto, "
"enquanto os apelidos podem ser removidos em algum momento, essa remoção "
"desses apelidos não está planejada. Assim, nenhum aviso de descontinuação "
"será enviado pelo interpretador para esses apelidos."

#: ../../library/typing.rst:2807
msgid ""
"If at some point it is decided to remove these deprecated aliases, a "
"deprecation warning will be issued by the interpreter for at least two "
"releases prior to removal. The aliases are guaranteed to remain in the "
"typing module without deprecation warnings until at least Python 3.14."
msgstr ""
"Se em algum momento decidirem remover esses apelidos descontinuados, o "
"interpretador emitirá um aviso de descontinuação por, no mínimo, duas "
"versões de lançamento antes da remoção. Os apelidos são garantidos a "
"permanecerem no módulo typing sem avisos de descontinuação até, no mínimo, "
"Python 3.14."

#: ../../library/typing.rst:2812
msgid ""
"Type checkers are encouraged to flag uses of the deprecated types if the "
"program they are checking targets a minimum Python version of 3.9 or newer."
msgstr ""
"Verificadores de tipos são encorajados a sinalizar o uso de tipos "
"descontinuados se o programa que estão verificando respeita uma versão "
"mínima de Python 3.9 ou mais nova."

#: ../../library/typing.rst:2818
msgid "Aliases to built-in types"
msgstr "Apelidos de tipos embutidos"

#: ../../library/typing.rst:2822
msgid "Deprecated alias to :class:`dict`."
msgstr "Apelido descontinuado de :class:`dict`."

#: ../../library/typing.rst:2824
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`Mapping` rather than to use :class:`dict` "
"or :class:`!typing.Dict`."
msgstr ""

#: ../../library/typing.rst:2828 ../../library/typing.rst:3065
msgid "This type can be used as follows::"
msgstr ""

#: ../../library/typing.rst:2833
msgid ""
":class:`builtins.dict <dict>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.dict <dict>` agora oferece suporte a subscrição (``[]``). "
"Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:2839
msgid "Deprecated alias to :class:`list`."
msgstr "Apelido descontinuado de :class:`list`."

#: ../../library/typing.rst:2841
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`Sequence` or :class:`Iterable` rather than "
"to use :class:`list` or :class:`!typing.List`."
msgstr ""

#: ../../library/typing.rst:2845
msgid "This type may be used as follows::"
msgstr ""

#: ../../library/typing.rst:2855
msgid ""
":class:`builtins.list <list>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.list <list>` agora oferece suporte a subscrição (``[]``). "
"Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:2861
msgid "Deprecated alias to :class:`builtins.set <set>`."
msgstr "Apelido descontinuado de :class:`builtins.set <set>`."

#: ../../library/typing.rst:2863
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`AbstractSet` rather than to use :class:`set` "
"or :class:`!typing.Set`."
msgstr ""

#: ../../library/typing.rst:2867
msgid ""
":class:`builtins.set <set>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.set <set>` agora oferece suporte a subscrição (``[]``). "
"Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:2873
msgid "Deprecated alias to :class:`builtins.frozenset <frozenset>`."
msgstr "Apelido descontinuado de :class:`builtins.frozenset <frozenset>`."

#: ../../library/typing.rst:2875
msgid ""
":class:`builtins.frozenset <frozenset>` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.frozenset <frozenset>` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:2882
msgid "Deprecated alias for :class:`tuple`."
msgstr "Apelido descontinuado para :class:`tuple`."

#: ../../library/typing.rst:2884
msgid ""
":class:`tuple` and ``Tuple`` are special-cased in the type system; see :ref:"
"`annotating-tuples` for more details."
msgstr ""
":class:`tuple` e ``Tuple`` são casos especiais no sistema de tipos; "
"consulte :ref:`annotating-tuples` para obter mais detalhes."

#: ../../library/typing.rst:2887
msgid ""
":class:`builtins.tuple <tuple>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.tuple <tuple>` agora oferece suporte a subscrição (``[]``). "
"Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:2893
msgid "Deprecated alias to :class:`type`."
msgstr "Apelido descontinuado de :class:`type`."

#: ../../library/typing.rst:2895
msgid ""
"See :ref:`type-of-class-objects` for details on using :class:`type` or "
"``typing.Type`` in type annotations."
msgstr ""
"Consulte :ref:`type-of-class-objects` para obter detalhes sobre como usar :"
"class:`type` ou ``typing.Type`` em anotações de tipos."

#: ../../library/typing.rst:2900
msgid ""
":class:`builtins.type <type>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.type <type>` agora oferece suporte a subscrição (``[]``). "
"Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:2907
msgid "Aliases to types in :mod:`collections`"
msgstr "Apelidos para tipos em :mod:`collections`"

#: ../../library/typing.rst:2911
msgid "Deprecated alias to :class:`collections.defaultdict`."
msgstr "Apelido descontinuado de :class:`collections.defaultdict`."

#: ../../library/typing.rst:2915
msgid ""
":class:`collections.defaultdict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.defaultdict` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:2921
msgid "Deprecated alias to :class:`collections.OrderedDict`."
msgstr "Apelido descontinuado de :class:`collections.OrderedDict`."

#: ../../library/typing.rst:2925
msgid ""
":class:`collections.OrderedDict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.OrderedDict` agora oferece suporte a subscrição "
"(``[]``). consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:2931
msgid "Deprecated alias to :class:`collections.ChainMap`."
msgstr "Apelido descontinuado de :class:`collections.ChainMap`."

#: ../../library/typing.rst:2935
msgid ""
":class:`collections.ChainMap` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.ChainMap` agora oferece suporte a subscrição (``[]``). "
"consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:2941
msgid "Deprecated alias to :class:`collections.Counter`."
msgstr "Apelido descontinuado de :class:`collections.Counter`."

#: ../../library/typing.rst:2945
msgid ""
":class:`collections.Counter` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.Counter` agora oferece suporte a subscrição (``[]``). "
"consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:2951
msgid "Deprecated alias to :class:`collections.deque`."
msgstr "Apelido descontinuado de :class:`collections.deque`."

#: ../../library/typing.rst:2955
msgid ""
":class:`collections.deque` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.deque` agora oferece suporte a subscrição (``[]``). "
"Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:2962
msgid "Aliases to other concrete types"
msgstr "Apelidos de outros tipos concretos"

#: ../../library/typing.rst:2967
msgid ""
"Deprecated aliases corresponding to the return types from :func:`re.compile` "
"and :func:`re.match`."
msgstr ""
"Apelidos descontinuados correspondem aos tipos de retorno de :func:`re."
"compile` e :func:`re.match`."

#: ../../library/typing.rst:2970
msgid ""
"These types (and the corresponding functions) are generic over :data:"
"`AnyStr`. ``Pattern`` can be specialised as ``Pattern[str]`` or "
"``Pattern[bytes]``; ``Match`` can be specialised as ``Match[str]`` or "
"``Match[bytes]``."
msgstr ""
"Esses tipos (e as funções correspondentes) são genéricas sobre :data:"
"`AnyStr`. ``Pattern`` pode ser especializado como ``Pattern[str]`` ou "
"``Pattern[bytes]``; ``Match`` pode ser especializado como ``Match[str]`` ou "
"``Match[bytes]``."

#: ../../library/typing.rst:2978
msgid ""
"The ``typing.re`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr ""

#: ../../library/typing.rst:2979
msgid ""
"Classes ``Pattern`` and ``Match`` from :mod:`re` now support ``[]``. See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
"Classes ``Pattern`` e ``Match`` de :mod:`re` agora suporte ``[]``. Consulte :"
"pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:2985
msgid "Deprecated alias for :class:`str`."
msgstr "Apelido descontinuado de :class:`str`."

#: ../../library/typing.rst:2987
msgid ""
"``Text`` is provided to supply a forward compatible path for Python 2 code: "
"in Python 2, ``Text`` is an alias for ``unicode``."
msgstr ""

#: ../../library/typing.rst:2991
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr ""
"Use ``Text`` para indicar que um valor deve conter uma string unicode de "
"forma compatível com Python 2 e Python 3::"

#: ../../library/typing.rst:2999
msgid ""
"Python 2 is no longer supported, and most type checkers also no longer "
"support type checking Python 2 code. Removal of the alias is not currently "
"planned, but users are encouraged to use :class:`str` instead of ``Text``."
msgstr ""
"Python 2 deixou de receber suporte, e a maioria dos verificadores de tipos "
"também não oferece suporte à verificação de tipos de código de Python 2. A "
"remoção do apelido não está planejada no momento, mas os usuários são "
"incentivados a usar :class:`str` em vez de ``Text``."

#: ../../library/typing.rst:3009
msgid "Aliases to container ABCs in :mod:`collections.abc`"
msgstr "Apelidos de contêineres ABC em :mod:`collections.abc`."

#: ../../library/typing.rst:3013
msgid "Deprecated alias to :class:`collections.abc.Set`."
msgstr "Apelido descontinuado de :class:`collections.abc.Set`."

#: ../../library/typing.rst:3015
msgid ""
":class:`collections.abc.Set` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Set` agora oferece suporte a subscrição (``[]``). "
"Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3021
msgid ""
"This type represents the types :class:`bytes`, :class:`bytearray`, and :"
"class:`memoryview` of byte sequences."
msgstr ""
"Este tipo representa os tipos :class:`bytes`, :class:`bytearray` e :class:"
"`memoryview` de sequências de bytes."

#: ../../library/typing.rst:3025
msgid ""
"Prefer ``typing_extensions.Buffer``, or a union like ``bytes | bytearray | "
"memoryview``."
msgstr ""

#: ../../library/typing.rst:3029
msgid "Deprecated alias to :class:`collections.abc.Collection`."
msgstr "Apelido descontinuado de :class:`collections.abc.Collection`."

#: ../../library/typing.rst:3033
msgid ""
":class:`collections.abc.Collection` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Collection` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3039
msgid "Deprecated alias to :class:`collections.abc.Container`."
msgstr "Apelido descontinuado de :class:`collections.abc.Container`."

#: ../../library/typing.rst:3041
msgid ""
":class:`collections.abc.Container` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Container` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3047
msgid "Deprecated alias to :class:`collections.abc.ItemsView`."
msgstr "Apelido descontinuado de :class:`collections.abc.ItemsView`."

#: ../../library/typing.rst:3049
msgid ""
":class:`collections.abc.ItemsView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ItemsView` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3055
msgid "Deprecated alias to :class:`collections.abc.KeysView`."
msgstr "Apelido descontinuado de :class:`collections.abc.KeysView`."

#: ../../library/typing.rst:3057
msgid ""
":class:`collections.abc.KeysView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.KeysView` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3063
msgid "Deprecated alias to :class:`collections.abc.Mapping`."
msgstr "Apelido descontinuado de :class:`collections.abc.Mapping`."

#: ../../library/typing.rst:3070
msgid ""
":class:`collections.abc.Mapping` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Mapping` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3076
msgid "Deprecated alias to :class:`collections.abc.MappingView`."
msgstr "Apelido descontinuado de :class:`collections.abc.MappingView`."

#: ../../library/typing.rst:3078
msgid ""
":class:`collections.abc.MappingView` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MappingView` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3084
msgid "Deprecated alias to :class:`collections.abc.MutableMapping`."
msgstr "Apelido descontinuado de :class:`collections.abc.MutableMapping`."

#: ../../library/typing.rst:3086
msgid ""
":class:`collections.abc.MutableMapping` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableMapping` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3093
msgid "Deprecated alias to :class:`collections.abc.MutableSequence`."
msgstr "Apelido descontinuado de :class:`collections.abc.MutableSequence`."

#: ../../library/typing.rst:3095
msgid ""
":class:`collections.abc.MutableSequence` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSequence` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3102
msgid "Deprecated alias to :class:`collections.abc.MutableSet`."
msgstr "Apelido descontinuado de :class:`collections.abc.MutableSet`."

#: ../../library/typing.rst:3104
msgid ""
":class:`collections.abc.MutableSet` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSet` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3110
msgid "Deprecated alias to :class:`collections.abc.Sequence`."
msgstr "Apelido descontinuado de :class:`collections.abc.Sequence`."

#: ../../library/typing.rst:3112
msgid ""
":class:`collections.abc.Sequence` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Sequence` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3118
msgid "Deprecated alias to :class:`collections.abc.ValuesView`."
msgstr "Apelido descontinuado de :class:`collections.abc.ValuesView`."

#: ../../library/typing.rst:3120
msgid ""
":class:`collections.abc.ValuesView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ValuesView` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3127
msgid "Aliases to asynchronous ABCs in :mod:`collections.abc`"
msgstr "Apelidos para ABCs assíncronas em :mod:`collections.abc`"

#: ../../library/typing.rst:3131
msgid "Deprecated alias to :class:`collections.abc.Coroutine`."
msgstr "Apelido descontinuado de :class:`collections.abc.Coroutine`."

#: ../../library/typing.rst:3133
msgid ""
"The variance and order of type variables correspond to those of :class:"
"`Generator`, for example::"
msgstr ""

#: ../../library/typing.rst:3144
msgid ""
":class:`collections.abc.Coroutine` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Coroutine` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3150
msgid "Deprecated alias to :class:`collections.abc.AsyncGenerator`."
msgstr "Apelido descontinuado de :class:`collections.abc.AsyncGenerator`."

#: ../../library/typing.rst:3152
msgid ""
"An async generator can be annotated by the generic type "
"``AsyncGenerator[YieldType, SendType]``. For example::"
msgstr ""

#: ../../library/typing.rst:3161
msgid ""
"Unlike normal generators, async generators cannot return a value, so there "
"is no ``ReturnType`` type parameter. As with :class:`Generator`, the "
"``SendType`` behaves contravariantly."
msgstr ""

#: ../../library/typing.rst:3165
msgid ""
"If your generator will only yield values, set the ``SendType`` to ``None``::"
msgstr ""

#: ../../library/typing.rst:3173
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``AsyncIterable[YieldType]`` or ``AsyncIterator[YieldType]``::"
msgstr ""

#: ../../library/typing.rst:3183
msgid ""
":class:`collections.abc.AsyncGenerator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncGenerator` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3190
msgid "Deprecated alias to :class:`collections.abc.AsyncIterable`."
msgstr "Apelido descontinuado de :class:`collections.abc.AsyncIterable`."

#: ../../library/typing.rst:3194
msgid ""
":class:`collections.abc.AsyncIterable` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterable` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3200
msgid "Deprecated alias to :class:`collections.abc.AsyncIterator`."
msgstr "Apelido descontinuado de :class:`collections.abc.AsyncIterator`."

#: ../../library/typing.rst:3204
msgid ""
":class:`collections.abc.AsyncIterator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterator` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3210
msgid "Deprecated alias to :class:`collections.abc.Awaitable`."
msgstr "Apelido descontinuado de :class:`collections.abc.Awaitable`."

#: ../../library/typing.rst:3214
msgid ""
":class:`collections.abc.Awaitable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Awaitable` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3221
msgid "Aliases to other ABCs in :mod:`collections.abc`"
msgstr "Apelidos para outros ABCs em :mod:`collections.abc`."

#: ../../library/typing.rst:3225
msgid "Deprecated alias to :class:`collections.abc.Iterable`."
msgstr "Apelido descontinuado de :class:`collections.abc.Iterable`."

#: ../../library/typing.rst:3227
msgid ""
":class:`collections.abc.Iterable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterable` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3233
msgid "Deprecated alias to :class:`collections.abc.Iterator`."
msgstr "Apelido descontinuado de :class:`collections.abc.Iterator`."

#: ../../library/typing.rst:3235
msgid ""
":class:`collections.abc.Iterator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterator` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3241
msgid "Deprecated alias to :class:`collections.abc.Callable`."
msgstr "Apelido descontinuado de :class:`collections.abc.Callable`."

#: ../../library/typing.rst:3243
msgid ""
"See :ref:`annotating-callables` for details on how to use :class:"
"`collections.abc.Callable` and ``typing.Callable`` in type annotations."
msgstr ""
"Veja :ref:`annotating-callables` para detalhes sobre como usar :class:"
"`collections.abc.Callable` e ``typing.Callable`` em anotações de tipo."

#: ../../library/typing.rst:3246
msgid ""
":class:`collections.abc.Callable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Callable` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3256
msgid "Deprecated alias to :class:`collections.abc.Generator`."
msgstr "Apelido descontinuado de :class:`collections.abc.Generator`."

#: ../../library/typing.rst:3258
msgid ""
"A generator can be annotated by the generic type ``Generator[YieldType, "
"SendType, ReturnType]``. For example::"
msgstr ""

#: ../../library/typing.rst:3267
msgid ""
"Note that unlike many other generics in the typing module, the ``SendType`` "
"of :class:`Generator` behaves contravariantly, not covariantly or "
"invariantly."
msgstr ""

#: ../../library/typing.rst:3271
msgid ""
"If your generator will only yield values, set the ``SendType`` and "
"``ReturnType`` to ``None``::"
msgstr ""

#: ../../library/typing.rst:3279
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``Iterable[YieldType]`` or ``Iterator[YieldType]``::"
msgstr ""

#: ../../library/typing.rst:3287
msgid ""
":class:`collections.abc.Generator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Generator` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3293
msgid "Alias to :class:`collections.abc.Hashable`."
msgstr ""

#: ../../library/typing.rst:3297
msgid "Deprecated alias to :class:`collections.abc.Reversible`."
msgstr "Apelido descontinuado de :class:`collections.abc.Reversible`."

#: ../../library/typing.rst:3299
msgid ""
":class:`collections.abc.Reversible` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Reversible` agora oferece suporte a subscrição "
"(``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3305
msgid "Alias to :class:`collections.abc.Sized`."
msgstr ""

#: ../../library/typing.rst:3310
msgid "Aliases to :mod:`contextlib` ABCs"
msgstr "Apelidos de ABCs da :mod:`contextlib`"

#: ../../library/typing.rst:3314
msgid "Deprecated alias to :class:`contextlib.AbstractContextManager`."
msgstr "Apelido descontinuado de :class:`contextlib.AbstractContextManager`."

#: ../../library/typing.rst:3318
msgid ""
":class:`contextlib.AbstractContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractContextManager` agora oferece suporte a "
"subscrição (``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3325
msgid "Deprecated alias to :class:`contextlib.AbstractAsyncContextManager`."
msgstr ""
"Apelido descontinuado de :class:`contextlib.AbstractAsyncContextManager`."

#: ../../library/typing.rst:3329
msgid ""
":class:`contextlib.AbstractAsyncContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractAsyncContextManager` agora oferece suporte a "
"subscrição (``[]``). Consulte :pep:`585` e :ref:`types-genericalias`."

#: ../../library/typing.rst:3335
msgid "Deprecation Timeline of Major Features"
msgstr "Cronograma de descontinuação dos principais recursos"

#: ../../library/typing.rst:3337
msgid ""
"Certain features in ``typing`` are deprecated and may be removed in a future "
"version of Python. The following table summarizes major deprecations for "
"your convenience. This is subject to change, and not all deprecations are "
"listed."
msgstr ""
"Alguns recursos em ``typing`` estão descontinuados e podem ser removidos em "
"uma versão futura de Python. A tabela a seguir resume as principais "
"descontinuações para sua conveniência. Ela está sujeita a alterações, e nem "
"todas as descontinuações estão listadas."

#: ../../library/typing.rst:3344
msgid "Feature"
msgstr "Recurso"

#: ../../library/typing.rst:3345
msgid "Deprecated in"
msgstr "Descontinuado em"

#: ../../library/typing.rst:3346
msgid "Projected removal"
msgstr "Remoção planejada"

#: ../../library/typing.rst:3347
msgid "PEP/issue"
msgstr "PEP/issue"

#: ../../library/typing.rst:3348
msgid "``typing.io`` and ``typing.re`` submodules"
msgstr ""

#: ../../library/typing.rst:3349
msgid "3.8"
msgstr "3.8"

#: ../../library/typing.rst:3350
msgid "3.13"
msgstr "3.13"

#: ../../library/typing.rst:3351
msgid ":issue:`38291`"
msgstr ":issue:`38291`"

#: ../../library/typing.rst:3352
msgid "``typing`` versions of standard collections"
msgstr "versões ``typing`` de coleções-padrão"

#: ../../library/typing.rst:3353 ../../library/typing.rst:3357
msgid "3.9"
msgstr "3.9"

#: ../../library/typing.rst:3354
msgid "Undecided (see :ref:`deprecated-typing-aliases` for more information)"
msgstr ""

#: ../../library/typing.rst:3355
msgid ":pep:`585`"
msgstr ":pep:`585`"

#: ../../library/typing.rst:3356
msgid ":class:`typing.ByteString`"
msgstr ":class:`typing.ByteString`"

#: ../../library/typing.rst:3358
msgid "3.14"
msgstr "3.14"

#: ../../library/typing.rst:3359
msgid ":gh:`91896`"
msgstr ":gh:`91896`"

#: ../../library/typing.rst:3360
msgid ":data:`typing.Text`"
msgstr ":data:`typing.Text`"

#: ../../library/typing.rst:3361
msgid "3.11"
msgstr "3.11"

#: ../../library/typing.rst:3362
msgid "Undecided"
msgstr "Não definido"

#: ../../library/typing.rst:3363
msgid ":gh:`92332`"
msgstr ":gh:`92332`"
