# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Augusta Carla Klug <augustaklug@gmail.com>, 2021
# Vinicius Gubiani Ferreira <vini.g.fer@gmail.com>, 2021
# Vitor Buxbaum Orlandi, 2021
# Italo Penaforte <italo.penaforte@gmail.com>, 2022
# Hildeberto Abreu Magalhães <hildeberto@gmail.com>, 2022
# Rodrigo Cândido, 2022
# Marco Rougeth <marco@rougeth.com>, 2023
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2023
# Danilo Lima <djkcond@gmail.com>, 2023
# i17obot <i17obot@rougeth.com>, 2023
# Cezar Peixeiro <czr-pxr@protonmail.com>, 2023
# Julio Biason, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-10 14:14+0000\n"
"PO-Revision-Date: 2021-06-28 01:16+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/typing.rst:3
msgid ":mod:`typing` --- Support for type hints"
msgstr ":mod:`typing` --- Suporte para dicas de tipo"

#: ../../library/typing.rst:16
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr "**Código-fonte:** :source:`Lib/typing.py`"

#: ../../library/typing.rst:20
msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as :term:`type checkers <static "
"type checker>`, IDEs, linters, etc."
msgstr ""
"O tempo de execução do Python não força anotações de tipos de variáveis e "
"funções. Elas podem ser usadas por ferramentas de terceiros como :term:"
"`verificadores de tipo <static type checker>`, IDEs, linters, etc."

#: ../../library/typing.rst:26
msgid "This module provides runtime support for type hints."
msgstr "Este módulo fornece suporte em tempo de execução para dicas de tipo."

#: ../../library/typing.rst:28
msgid "Consider the function below::"
msgstr "Considere a função abaixo::"

#: ../../library/typing.rst:33
msgid ""
"The function ``moon_weight`` takes an argument expected to be an instance "
"of :class:`float`, as indicated by the *type hint* ``earth_weight: float``. "
"The function is expected to return an instance of :class:`str`, as indicated "
"by the ``-> str`` hint."
msgstr ""
"A função ``moon_weight`` recebe um argumento que se espera ser uma instância "
"de :class:`float`, conforme indicado pela *dica de tipo* ``earth_weight: "
"float``. Espera-se que a função retorne uma instância de :class:`str`, "
"conforme indicado pela dica ``-> str``."

#: ../../library/typing.rst:37
msgid ""
"While type hints can be simple classes like :class:`float` or :class:`str`, "
"they can also be more complex. The :mod:`typing` module provides a "
"vocabulary of more advanced type hints."
msgstr ""
"Embora as dicas de tipo possam ser classes simples como :class:`float` ou :"
"class:`str`, elas também podem ser mais complexas. O módulo :mod:`typing` "
"fornece um vocabulário de dicas de tipo mais avançadas."

#: ../../library/typing.rst:41
msgid ""
"New features are frequently added to the ``typing`` module. The :pypi:"
"`typing_extensions` package provides backports of these new features to "
"older versions of Python."
msgstr ""
"Novos recursos são frequentemente adicionados ao módulo ``typing``. O "
"pacote :pypi:`typing_extensions` fornece backports desses novos recursos "
"para versões mais antigas do Python."

#: ../../library/typing.rst:47
msgid ""
"`\"Typing cheat sheet\" <https://mypy.readthedocs.io/en/stable/"
"cheat_sheet_py3.html>`_"
msgstr ""
"`\"Guia rápido sobre Dicas de Tipo\" <https://mypy.readthedocs.io/en/stable/"
"cheat_sheet_py3.html>`_"

#: ../../library/typing.rst:48
msgid "A quick overview of type hints (hosted at the mypy docs)"
msgstr ""
"Uma visão geral das dicas de tipo (hospedado por mypy docs, em inglês)."

#: ../../library/typing.rst:50
msgid ""
"\"Type System Reference\" section of `the mypy docs <https://mypy."
"readthedocs.io/en/stable/index.html>`_"
msgstr ""
"\"Referência sobre Sistema de Tipo\" seção de `the mypy docs <https://mypy."
"readthedocs.io/en/stable/index.html>`_"

#: ../../library/typing.rst:51
msgid ""
"The Python typing system is standardised via PEPs, so this reference should "
"broadly apply to most Python type checkers. (Some parts may still be "
"specific to mypy.)"
msgstr ""
"O sistema de tipagem do Python é padronizado pelas PEPs, portanto esta  "
"referência deve se aplicar a maioria do verificadores de tipo do Python. "
"(Alguns trechos podem se referir especificamente ao mypy. Documento em "
"inglês)."

#: ../../library/typing.rst:55
msgid ""
"`\"Static Typing with Python\" <https://typing.readthedocs.io/en/latest/>`_"
msgstr ""
"`\"Tipagem Estática com Python\" <https://typing.readthedocs.io/en/latest/>`_"

#: ../../library/typing.rst:56
msgid ""
"Type-checker-agnostic documentation written by the community detailing type "
"system features, useful typing related tools and typing best practices."
msgstr ""
"Documentação independente de verificador de tipo escrita pela comunidade, "
"detalhando os recursos do sistema de tipo, ferramentas úteis de tipagem e "
"melhores práticas."

#: ../../library/typing.rst:63
msgid "Specification for the Python Type System"
msgstr "Especificação para o sistema de tipos do Python"

#: ../../library/typing.rst:65
msgid ""
"The canonical, up-to-date specification of the Python type system can be "
"found at `\"Specification for the Python type system\" <https://typing."
"readthedocs.io/en/latest/spec/index.html>`_."
msgstr ""
"A especificação canônica e atualizada do sistema de tipos Python pode ser "
"encontrada em `\"Specification for the Python type system\" <https://typing."
"readthedocs.io/en/latest/spec/index.html>`_."

#: ../../library/typing.rst:71
msgid "Type aliases"
msgstr "Apelidos de tipo"

#: ../../library/typing.rst:73
msgid ""
"A type alias is defined using the :keyword:`type` statement, which creates "
"an instance of :class:`TypeAliasType`. In this example, ``Vector`` and "
"``list[float]`` will be treated equivalently by static type checkers::"
msgstr ""
"Um apelido de tipo é definido utilizando a instrução :keyword:`type`, que "
"por sua vez cria uma instância da classe :class:`TypeAliasType`. Neste "
"exemplo, ``Vector`` e ``list[float]`` serão tratados de maneira equivalente "
"pelos verificadores de tipo estático::"

#: ../../library/typing.rst:86
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr ""
"Apelidos de tipo são úteis para simplificar assinaturas de tipo complexas. "
"Por exemplo::"

#: ../../library/typing.rst:104
msgid ""
"The :keyword:`type` statement is new in Python 3.12. For backwards "
"compatibility, type aliases can also be created through simple assignment::"
msgstr ""
"A instrução :keyword:`type`  é nova no Python 3.12. Para compatibilidade "
"retroativa, apelidos de tipo também podem ser criados através da simples "
"atribuição::"

#: ../../library/typing.rst:109
msgid ""
"Or marked with :data:`TypeAlias` to make it explicit that this is a type "
"alias, not a normal variable assignment::"
msgstr ""
"Ou marcado com :data:`TypeAlias` para tornar explícito que se trata de um "
"apelido de tipo e não uma atribuição de variável comum::"

#: ../../library/typing.rst:119
msgid "NewType"
msgstr "NewType"

#: ../../library/typing.rst:121
msgid "Use the :class:`NewType` helper to create distinct types::"
msgstr "Utilize o auxiliar :class:`NewType` para criar tipos únicos::"

#: ../../library/typing.rst:128
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr ""
"O verificador de tipo estático tratará o novo tipo como se fosse uma "
"subclasse do tipo original. Isso é útil para ajudar a encontrar erros de "
"lógica::"

#: ../../library/typing.rst:140
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent "
"you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""
"Você ainda pode executar todas as operações ``int`` em uma variável do tipo "
"``UserId``, mas o resultado sempre será do tipo ``int``. Isso permite que "
"você passe um ``UserId`` em qualquer ocasião que ``int`` possa ser esperado, "
"mas previne que você acidentalmente crie um ``UserId`` de uma forma "
"inválida::"

#: ../../library/typing.rst:148
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime, the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a callable that immediately returns whatever parameter you pass "
"it. That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce much overhead beyond that of a regular function call."
msgstr ""
"Note que essas verificações são aplicadas apenas pelo verificador de tipo "
"estático. Em tempo de execução, a instrução ``Derived = NewType('Derived', "
"Base)`` irá tornar ``Derived`` um chamável que retornará imediatamente "
"qualquer parâmetro que você passar. Isso significa que a expressão "
"``Derived(some_value)`` não cria uma nova classe ou introduz sobrecarga além "
"de uma chamada regular de função.instrução"

#: ../../library/typing.rst:154
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr ""
"Mais precisamente, a expressão ``some_value is Derived(some_value)`` é "
"sempre verdadeira em tempo de execução."

#: ../../library/typing.rst:157
msgid "It is invalid to create a subtype of ``Derived``::"
msgstr "É inválido criar um subtipo de ``Derived``::"

#: ../../library/typing.rst:166
msgid ""
"However, it is possible to create a :class:`NewType` based on a 'derived' "
"``NewType``::"
msgstr ""
"No entanto, é possível criar um :class:`NewType` baseado em um 'derivado' "
"``NewType``::"

#: ../../library/typing.rst:174
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr "e a verificação de tipo para ``ProUserId`` funcionará como esperado."

#: ../../library/typing.rst:176
msgid "See :pep:`484` for more details."
msgstr "Veja :pep:`484` para mais detalhes."

#: ../../library/typing.rst:180
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to "
"one another. Doing ``type Alias = Original`` will make the static type "
"checker treat ``Alias`` as being *exactly equivalent* to ``Original`` in all "
"cases. This is useful when you want to simplify complex type signatures."
msgstr ""
"Lembre-se que o uso de um apelido de tipo declara que dois tipos serão "
"*equivalentes* entre si. Efetuar ``type Alias = Original`` fará o "
"verificador de tipo estático tratar ``Alias`` como sendo *exatamente "
"equivalente* a ``Original`` em todos os casos. Isso é útil quando você "
"deseja simplificar assinaturas de tipo complexas."

#: ../../library/typing.rst:185
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""
"Em contraste, ``NewType`` declara que um tipo será *subtipo* de outro. "
"Efetuando ``Derived = NewType('Derived', Original)`` irá fazer o verificador "
"de tipo estático tratar ``Derived`` como uma *subclasse* de ``Original``, o "
"que significa que um valor do tipo ``Original`` não pode ser utilizado onde "
"um valor do tipo ``Derived`` é esperado. Isso é útil quando você deseja "
"evitar erros de lógica com custo mínimo de tempo de execução."

#: ../../library/typing.rst:194
msgid ""
"``NewType`` is now a class rather than a function.  As a result, there is "
"some additional runtime cost when calling ``NewType`` over a regular "
"function."
msgstr ""
"``NewType`` é agora uma classe ao invés de uma função. Como consequência, "
"existem alguns custos em tempo de execução ao chamar  ``NewType`` ao invés "
"de uma função comum."

#: ../../library/typing.rst:199
msgid ""
"The performance of calling ``NewType`` has been restored to its level in "
"Python 3.9."
msgstr ""
"O desempenho de chamar ``NewType`` retornou ao mesmo nível da versão Python "
"3.9."

#: ../../library/typing.rst:206
msgid "Annotating callable objects"
msgstr "Anotações de objetos chamáveis"

#: ../../library/typing.rst:208
msgid ""
"Functions -- or other :term:`callable` objects -- can be annotated using :"
"class:`collections.abc.Callable` or :data:`typing.Callable`. "
"``Callable[[int], str]`` signifies a function that takes a single parameter "
"of type :class:`int` and returns a :class:`str`."
msgstr ""
"Funções -- ou outros objetos :term:`chamáveis <chamável>` -- podem ser "
"anotados utilizando-se :class:`collections.abc.Callable` ou :data:`typing."
"Callable`. ``Callable[[int], str]``. Significa uma função que recebe um "
"único parâmetro do tipo :class:`int`. e retorna um :class:`str`."

#: ../../library/typing.rst:213 ../../library/typing.rst:2829
#: ../../library/typing.rst:2973
msgid "For example:"
msgstr "Por exemplo:"

#: ../../library/typing.rst:231
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types, a :class:`ParamSpec`, :data:`Concatenate`, or an ellipsis. The return "
"type must be a single type."
msgstr ""
"A sintaxe da subscrição deve sempre ser usada com exatamente dois valores: "
"uma lista de argumentos e o tipo de retorno. A lista de argumentos deve ser "
"uma lista de tipos, um  :class:`ParamSpec`, :data:`Concatenate`, ou "
"reticências. O tipo de retorno deve ser um único tipo."

#: ../../library/typing.rst:236
msgid ""
"If a literal ellipsis ``...`` is given as the argument list, it indicates "
"that a callable with any arbitrary parameter list would be acceptable:"
msgstr ""
"Se uma reticências literal ``...`` é passada no lugar de uma lista de "
"argumentos, indica que um chamável com umas lista de qualquer parâmetro "
"arbitrário seria aceita."

#: ../../library/typing.rst:248
msgid ""
"``Callable`` cannot express complex signatures such as functions that take a "
"variadic number of arguments, :ref:`overloaded functions <overload>`, or "
"functions that have keyword-only parameters. However, these signatures can "
"be expressed by defining a :class:`Protocol` class with a :meth:`~object."
"__call__` method:"
msgstr ""
"``Callable`` não pode representar assinaturas complexas, como funções que "
"aceitam um número variado de argumentos, :ref:`funções sobrecarregadas "
"<overload>`, or funções que recebem apenas parâmetros somente-nomeados. No "
"entanto, essas assinaturas podem ser expressas ao se definir uma  :class:"
"`Protocol` com um método :meth:`~object.__call__`:"

#: ../../library/typing.rst:275
msgid ""
"Callables which take other callables as arguments may indicate that their "
"parameter types are dependent on each other using :class:`ParamSpec`. "
"Additionally, if that callable adds or removes arguments from other "
"callables, the :data:`Concatenate` operator may be used.  They take the form "
"``Callable[ParamSpecVariable, ReturnType]`` and "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` respectively."
msgstr ""
"Chamáveis que recebem outros chamáveis como argumentos podem indicar que "
"seus tipos de parâmetro são dependentes uns dos outros usando :class:"
"`ParamSpec`. Além disso, se esse chamável adiciona ou retira argumentos de "
"outros chamáveis, o operador :data:`Concatenate` pode ser usado.  Eles "
"assumem a forma de ``Callable[ParamSpecVariable, ReturnType]`` e "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]``, respectivamente."

#: ../../library/typing.rst:283 ../../library/typing.rst:3499
msgid ""
"``Callable`` now supports :class:`ParamSpec` and :data:`Concatenate`. See :"
"pep:`612` for more details."
msgstr ""
"``Callable`` agora oferece suporte a :class:`ParamSpec` e :data:"
"`Concatenate`. Veja :pep:`612` para mais detalhes."

#: ../../library/typing.rst:288
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provides "
"examples of usage in ``Callable``."
msgstr ""
"A documentação para :class:`ParamSpec` e :class:`Concatenate` contém "
"exemplos de uso em ``Callable``."

#: ../../library/typing.rst:294
msgid "Generics"
msgstr "Genéricos"

#: ../../library/typing.rst:296
msgid ""
"Since type information about objects kept in containers cannot be statically "
"inferred in a generic way, many container classes in the standard library "
"support subscription to denote the expected types of container elements."
msgstr ""
"Como a informação de tipo sobre objetos mantidos em contêineres não pode ser "
"inferida estaticamente de uma maneira genérica, muitas classes de contêiner "
"na biblioteca padrão suportam subscrição para denotar tipos esperados de "
"elementos de contêiner."

#: ../../library/typing.rst:313
msgid ""
"Generic functions and classes can be parameterized by using :ref:`type "
"parameter syntax <type-params>`::"
msgstr ""
"Funções e classes genéricas podem ser parametrizadas utilizando-se :ref:"
"`sintaxe do parâmetro de tipo <type-params>`::"

#: ../../library/typing.rst:321
msgid "Or by using the :class:`TypeVar` factory directly::"
msgstr "Ou utilizando a fábrica :class:`TypeVar` diretamente::"

#: ../../library/typing.rst:331
msgid "Syntactic support for generics is new in Python 3.12."
msgstr "O suporte sintático para genéricos é novo no Python 3.12."

#: ../../library/typing.rst:337
msgid "Annotating tuples"
msgstr "Anotando tuplas"

#: ../../library/typing.rst:339
msgid ""
"For most containers in Python, the typing system assumes that all elements "
"in the container will be of the same type. For example::"
msgstr ""
"Para a maior parte dos tipos containers em Python, o sistema de tipagem "
"presume que todos os elementos do contêiner são do mesmo tipo. Por exemplo::"

#: ../../library/typing.rst:354
msgid ""
":class:`list` only accepts one type argument, so a type checker would emit "
"an error on the ``y`` assignment above. Similarly, :class:`~collections.abc."
"Mapping` only accepts two type arguments: the first indicates the type of "
"the keys, and the second indicates the type of the values."
msgstr ""
":class:`list` aceita apenas um tipo de argumento, e assim o verificador de "
"tipos irá emitir um erro na atribuição ``y`` acima. Da mesma forma, :class:"
"`~collections.abc.Mapping` aceita apenas dois tipos de argumento: O primeiro "
"indica o tipo das chaves, e o segundo indica o tipo dos valores."

#: ../../library/typing.rst:360
msgid ""
"Unlike most other Python containers, however, it is common in idiomatic "
"Python code for tuples to have elements which are not all of the same type. "
"For this reason, tuples are special-cased in Python's typing system. :class:"
"`tuple` accepts *any number* of type arguments::"
msgstr ""
"Ao contrário da maioria dos outros contêineres Python, é comum no código "
"Python idiomático que as tuplas tenham elementos que não sejam todos do "
"mesmo tipo. Por esse motivo, as tuplas têm um caso especial no sistema de "
"tipagem do Python. :class:`tuple` aceita *qualquer número* do tipo "
"argumento::"

#: ../../library/typing.rst:376
msgid ""
"To denote a tuple which could be of *any* length, and in which all elements "
"are of the same type ``T``, use ``tuple[T, ...]``. To denote an empty tuple, "
"use ``tuple[()]``. Using plain ``tuple`` as an annotation is equivalent to "
"using ``tuple[Any, ...]``::"
msgstr ""
"Para indicar um tupla que pode ser de *qualquer* comprimento, e no qual "
"todos os elementos são do mesmo tipo ``T``, use ``tuple[T, ...]``. Para "
"denotar um tupla vazia, use ``tuple[()]``. Usando apenas ``tuple`` como "
"anotação, é equivalente a usar ``tuple[Any, ...]``::"

#: ../../library/typing.rst:399
msgid "The type of class objects"
msgstr "O tipo de objetos de classe"

#: ../../library/typing.rst:401
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``type[C]`` (or :class:`typing.Type[C] "
"<Type>`) may accept values that are classes themselves -- specifically, it "
"will accept the *class object* of ``C``. For example::"
msgstr ""
"Uma variável anotada com ``C`` pode aceitar um valor do tipo ``C``. Por "
"outro lado, uma variável anotada com ``type[C]`` (ou :class:`typing.Type[C] "
"<Type>`) pode aceitar valores que são classes -- especificamente, ela "
"aceitará o *objeto classe* de ``C``. Por exemplo::"

#: ../../library/typing.rst:411
msgid "Note that ``type[C]`` is covariant::"
msgstr "Observe que ``type[C]`` é covariante::"

#: ../../library/typing.rst:427
msgid ""
"The only legal parameters for :class:`type` are classes, :data:`Any`, :ref:"
"`type variables <generics>`, and unions of any of these types. For example::"
msgstr ""
"Os únicos parâmetros válidos para :class:`type` são classes, :data:`Any`, :"
"ref:`type variables <generics>` e uniões de qualquer um desses tipos. Por "
"exemplo::"

#: ../../library/typing.rst:439
msgid ""
"``type[Any]`` is equivalent to :class:`type`, which is the root of Python's :"
"ref:`metaclass hierarchy <metaclasses>`."
msgstr ""
"``type[Any]`` é equivalente a :class:`type`, que é a raiz da :ref:"
"`hierarquia de metaclasses <metaclasses>` do Python."

#: ../../library/typing.rst:445
msgid "User-defined generic types"
msgstr "Tipos genéricos definidos pelo usuário"

#: ../../library/typing.rst:447
msgid "A user-defined class can be defined as a generic class."
msgstr ""
"Uma classe definida pelo usuário pode ser definica como uma classe genérica."

#: ../../library/typing.rst:470
msgid ""
"This syntax indicates that the class ``LoggedVar`` is parameterised around a "
"single :ref:`type variable <typevar>` ``T`` . This also makes ``T`` valid as "
"a type within the class body."
msgstr ""
"Esta sintaxe indica que o classe ``LoggedVar`` é parametrizada em torno de "
"uma única  :ref:`type variable <typevar>` ``T``. Isso também torna ``T`` "
"válido como um tipo dentro do corpo da classe."

#: ../../library/typing.rst:474
msgid ""
"Generic classes implicitly inherit from :class:`Generic`. For compatibility "
"with Python 3.11 and lower, it is also possible to inherit explicitly from :"
"class:`Generic` to indicate a generic class::"
msgstr ""
"Classes genéricas implicitamente herdar de :class:`Generic`. Para "
"compatibilidade com Python 3.11 e versões inferiores, também é possível "
"herdar explicitamente de :class:`Generic` para indicar uma classe genérica::"

#: ../../library/typing.rst:485
msgid ""
"Generic classes have :meth:`~object.__class_getitem__` methods, meaning they "
"can be parameterised at runtime (e.g. ``LoggedVar[int]`` below)::"
msgstr ""
"Classes genéricas têm métodos :meth:`~object.__class_getitem__`, o que "
"significa que podem ser parametrizadas em tempo de execução (por exemplo, "
"``LoggedVar[int]`` abaixo)::"

#: ../../library/typing.rst:494
msgid ""
"A generic type can have any number of type variables. All varieties of :"
"class:`TypeVar` are permissible as parameters for a generic type::"
msgstr ""
"Um tipo genérico pode ter qualquer número de tipos de variáveis. Todas as "
"variedades de :class:`TypeVar` são permitidas como parâmetros para um tipo "
"genérico::"

#: ../../library/typing.rst:509
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ""
"Cada tipo dos argumentos para :class:`Generic` devem ser distintos. Assim, "
"os seguintes exemplos são inválidos::"

#: ../../library/typing.rst:523
msgid "Generic classes can also inherit from other classes::"
msgstr "Classes genéricas podem também herdar de outras classes::"

#: ../../library/typing.rst:530
msgid ""
"When inheriting from generic classes, some type parameters could be fixed::"
msgstr "Ao herdar das classes genérico, algun tipos podem ser fixos::"

#: ../../library/typing.rst:537
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr "Neste caso ``MyDict`` possui um único parâmetro, ``T``."

#: ../../library/typing.rst:539
msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any` "
"for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``:"
msgstr ""
"O uso de uma classe genérica sem especificar tipos pressupõe :data:`Any` "
"para cada posição. No exemplo a seguir, ``MyIterable`` não é genérico, mas "
"herda implicitamente de ``Iterable[Any]``:"

#: ../../library/typing.rst:550
msgid "User-defined generic type aliases are also supported. Examples::"
msgstr ""
"Também há suporte para tipos genéricos definidos pelo usuário. Exemplos::"

#: ../../library/typing.rst:565
msgid ""
"For backward compatibility, generic type aliases can also be created through "
"a simple assignment::"
msgstr ""
"Para compatibilidade retroativa, os apelidos para tipos genéricos também "
"podem ser criados por meio de um simples atribuição::"

#: ../../library/typing.rst:574
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ":class:`Generic` não possui mais uma metaclasse personalizada."

#: ../../library/typing.rst:577
msgid ""
"Syntactic support for generics and type aliases is new in version 3.12. "
"Previously, generic classes had to explicitly inherit from :class:`Generic` "
"or contain a type variable in one of their bases."
msgstr ""
"Suporte sintático para apelidos de tipo e genéricos é novo na versão 3.12. "
"Anteriormente, as classes genéricas precisavam explicitamente herdar de :"
"class:`Generic` ou conter um tipo de variável em uma de suas bases."

#: ../../library/typing.rst:582
msgid ""
"User-defined generics for parameter expressions are also supported via "
"parameter specification variables in the form ``[**P]``.  The behavior is "
"consistent with type variables' described above as parameter specification "
"variables are treated by the typing module as a specialized type variable.  "
"The one exception to this is that a list of types can be used to substitute "
"a :class:`ParamSpec`::"
msgstr ""
"Genéricos definidos pelo usuário para expressões de parâmetros também "
"oferecem suporte por meio de variáveis de especificação de parâmetros no "
"formato ``[**P]``. O comportamento é consistente com as variáveis de tipo "
"descritas acima, pois as variáveis de especificação de parâmetro são "
"tratadas pelo módulo typing como uma variável de tipo especializada. A única "
"exceção a isso é que uma lista de tipos pode ser usada para substituir um :"
"class:`ParamSpec`::"

#: ../../library/typing.rst:593
msgid ""
"Classes generic over a :class:`ParamSpec` can also be created using explicit "
"inheritance from :class:`Generic`. In this case, ``**`` is not used::"
msgstr ""
"Classes genéricas sobre um :class:`ParamSpec` também podem ser criadas "
"usando herança explícita de :class:`Generic`. Neste caso, ``**`` não é "
"usado::"

#: ../../library/typing.rst:603
msgid ""
"Another difference between :class:`TypeVar` and :class:`ParamSpec` is that a "
"generic with only one parameter specification variable will accept parameter "
"lists in the forms ``X[[Type1, Type2, ...]]`` and also ``X[Type1, "
"Type2, ...]`` for aesthetic reasons.  Internally, the latter is converted to "
"the former, so the following are equivalent::"
msgstr ""
"Outra diferença entre :class:`TypeVar` e :class:`ParamSpec` é que um "
"genérico com apenas uma variável de especificação de parâmetro aceitará "
"listas de parâmetros nos formatos ``X[[Type1, Type2, ...]]`` e também "
"``X[Type1, Type2, ...]`` por razões estéticas. Internamente, o último é "
"convertido no primeiro, portanto são equivalentes::"

#: ../../library/typing.rst:616
msgid ""
"Note that generics with :class:`ParamSpec` may not have correct "
"``__parameters__`` after substitution in some cases because they are "
"intended primarily for static type checking."
msgstr ""
"Observe que genéricos com :class:`ParamSpec` podem não ter "
"``__parameters__`` corretos após a substituição em alguns casos porque eles "
"são destinados principalmente à verificação de tipo estático."

#: ../../library/typing.rst:620
msgid ""
":class:`Generic` can now be parameterized over parameter expressions. See :"
"class:`ParamSpec` and :pep:`612` for more details."
msgstr ""
":class:`Generic` agora pode ser parametrizado através de expressões de "
"parâmetros. Veja :class:`ParamSpec` e :pep:`612` para mais detalhes."

#: ../../library/typing.rst:624
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the typing module are :"
"term:`hashable` and comparable for equality."
msgstr ""
"Uma classe genérica definida pelo usuário pode ter ABCs como classes base "
"sem conflito de metaclasse. Não há suporte a metaclasses genéricas. O "
"resultado da parametrização de genéricos é armazenado em cache, e a maioria "
"dos tipos no módulo typing são :term:`hasheáveis <hasheável>` e comparáveis "
"em termos de igualdade."

#: ../../library/typing.rst:631
msgid "The :data:`Any` type"
msgstr "O tipo :data:`Any`"

#: ../../library/typing.rst:633
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""
"Um tipo especial de tipo é :data:`Any`. Um verificador de tipo estático "
"tratará cada tipo como sendo compatível com :data:`Any` e :data:`Any` como "
"sendo compatível com todos os tipos."

#: ../../library/typing.rst:637
msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type :data:`Any` and assign it to any variable::"
msgstr ""
"Isso significa que é possível realizar qualquer operação ou chamada de "
"método sobre um valor do tipo :data:`Any` e atribuí-lo a qualquer variável::"

#: ../../library/typing.rst:655
msgid ""
"Notice that no type checking is performed when assigning a value of type :"
"data:`Any` to a more precise type. For example, the static type checker did "
"not report an error when assigning ``a`` to ``s`` even though ``s`` was "
"declared to be of type :class:`str` and receives an :class:`int` value at "
"runtime!"
msgstr ""
"Observe que nenhuma verificação de tipo é realizada ao atribuir um valor do "
"tipo :data:`Any` a um tipo mais preciso. Por exemplo, o verificador de tipo "
"estático não relatou um erro ao atribuir ``a`` a ``s`` mesmo que ``s`` tenha "
"sido declarado como sendo do tipo :class:`str` e receba um valor :class:"
"`int` em tempo de execução!"

#: ../../library/typing.rst:661
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr ""
"Além disso, todas as funções sem um tipo de retorno ou tipos de parâmetro "
"terão como padrão implicitamente o uso de :data:`Any`::"

#: ../../library/typing.rst:674
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr ""
"Este comportamento permite que :data:`Any` seja usado como uma *saída de "
"emergência* quando você precisar misturar código tipado dinamicamente e "
"estaticamente."

#: ../../library/typing.rst:677
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However, "
"unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""
"Compare o comportamento de :data:`Any` com o comportamento de :class:"
"`object`. Semelhante a :data:`Any`, todo tipo é um subtipo de :class:"
"`object`. No entanto, ao contrário de :data:`Any`, o inverso não é "
"verdadeiro: :class:`object` *não* é um subtipo de qualquer outro tipo."

#: ../../library/typing.rst:682
msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using "
"it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""
"Isso significa que quando o tipo de um valor é :class:`object`, um "
"verificador de tipo rejeitará quase todas as operações nele, e atribuí-lo a "
"uma variável (ou usá-la como valor de retorno) de um tipo mais especializado "
"é um tipo erro. Por exemplo::"

#: ../../library/typing.rst:704
msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe "
"manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr ""
"Use :class:`object` para indicar que um valor pode ser de qualquer tipo de "
"maneira segura. Use :data:`Any` para indicar que um valor é tipado "
"dinamicamente."

#: ../../library/typing.rst:709
msgid "Nominal vs structural subtyping"
msgstr "Subtipagem nominal vs estrutural"

#: ../../library/typing.rst:711
msgid ""
"Initially :pep:`484` defined the Python static type system as using *nominal "
"subtyping*. This means that a class ``A`` is allowed where a class ``B`` is "
"expected if and only if ``A`` is a subclass of ``B``."
msgstr ""
"Inicialmente a :pep:`484` definiu o sistema de tipos estáticos do Python "
"como usando *subtipagem nominal*. Isto significa que uma classe ``A`` é "
"permitida onde uma classe ``B`` é esperada se e somente se ``A`` for uma "
"subclasse de ``B``."

#: ../../library/typing.rst:715
msgid ""
"This requirement previously also applied to abstract base classes, such as :"
"class:`~collections.abc.Iterable`. The problem with this approach is that a "
"class had to be explicitly marked to support them, which is unpythonic and "
"unlike what one would normally do in idiomatic dynamically typed Python "
"code. For example, this conforms to :pep:`484`::"
msgstr ""
"Este requisito anteriormente também se aplicava a classes base abstratas, "
"como :class:`~collections.abc.Iterable`. O problema com essa abordagem é que "
"uma classe teve que ser marcada explicitamente para suportá-los, o que não é "
"pythônico e diferente do que normalmente seria feito em código Python de "
"tipo dinamicamente idiomático. Por exemplo, isso está em conformidade com :"
"pep:`484`::"

#: ../../library/typing.rst:728
msgid ""
":pep:`544` allows to solve this problem by allowing users to write the above "
"code without explicit base classes in the class definition, allowing "
"``Bucket`` to be implicitly considered a subtype of both ``Sized`` and "
"``Iterable[int]`` by static type checkers. This is known as *structural "
"subtyping* (or static duck-typing)::"
msgstr ""
":pep:`544` permite resolver este problema permitindo que os usuários "
"escrevam o código acima sem classes base explícitas na definição de classe, "
"permitindo que ``Bucket`` seja implicitamente considerado um subtipo de "
"``Sized`` e ``Iterable[int]`` por verificador de tipo estático. Isso é "
"conhecido como *subtipagem estrutural* (ou tipagem pato estática)::"

#: ../../library/typing.rst:744
msgid ""
"Moreover, by subclassing a special class :class:`Protocol`, a user can "
"define new custom protocols to fully enjoy structural subtyping (see "
"examples below)."
msgstr ""
"Além disso, ao criar uma subclasse de uma classe especial :class:`Protocol`, "
"um usuário pode definir novos protocolos personalizados para aproveitar ao "
"máximo a subtipagem estrutural (veja exemplos abaixo)."

#: ../../library/typing.rst:749
msgid "Module contents"
msgstr "Conteúdo do módulo"

#: ../../library/typing.rst:751
msgid ""
"The ``typing`` module defines the following classes, functions and "
"decorators."
msgstr ""
"O módulo ``typing`` define as seguintes classes, funções e decoracores."

#: ../../library/typing.rst:754
msgid "Special typing primitives"
msgstr "Tipos primitivos especiais"

#: ../../library/typing.rst:757
msgid "Special types"
msgstr "Tipos especiais"

#: ../../library/typing.rst:759
msgid ""
"These can be used as types in annotations. They do not support subscription "
"using ``[]``."
msgstr ""
"Eles podem ser usados como tipos em anotações. Eles não oferecem suporte a "
"subscrição usando ``[]``."

#: ../../library/typing.rst:764
msgid "Special type indicating an unconstrained type."
msgstr "Tipo especial que indica um tipo irrestrito."

#: ../../library/typing.rst:766
msgid "Every type is compatible with :data:`Any`."
msgstr "Todos os tipos são compatíveis com :data:`Any`."

#: ../../library/typing.rst:767
msgid ":data:`Any` is compatible with every type."
msgstr ":data:`Any` é compatível com todos os tipos."

#: ../../library/typing.rst:769
msgid ""
":data:`Any` can now be used as a base class. This can be useful for avoiding "
"type checker errors with classes that can duck type anywhere or are highly "
"dynamic."
msgstr ""
":data:`Any` agora pode ser usado como classe base. Isso pode ser útil para "
"evitar erros do verificador de tipo com classes que podem digitar em "
"qualquer lugar ou são altamente dinâmicas."

#: ../../library/typing.rst:776
msgid "A :ref:`constrained type variable <typing-constrained-typevar>`."
msgstr "Uma :ref:`variável de tipo restrito <typing-constrained-typevar>`."

#: ../../library/typing.rst:778
msgid "Definition::"
msgstr "Definição::"

#: ../../library/typing.rst:782
msgid ""
"``AnyStr`` is meant to be used for functions that may accept :class:`str` "
"or :class:`bytes` arguments but cannot allow the two to mix."
msgstr ""
"``AnyStr`` deve ser usado para funções que podem aceitar argumentos :class:"
"`str` ou :class:`bytes` mas não podem permitir que os dois se misturem."

#: ../../library/typing.rst:785 ../../library/typing.rst:893
#: ../../library/typing.rst:950 ../../library/typing.rst:1116
#: ../../library/typing.rst:1173 ../../library/typing.rst:1382
#: ../../library/typing.rst:2769
msgid "For example::"
msgstr "Por exemplo::"

#: ../../library/typing.rst:794
msgid ""
"Note that, despite its name, ``AnyStr`` has nothing to do with the :class:"
"`Any` type, nor does it mean \"any string\". In particular, ``AnyStr`` and "
"``str | bytes`` are different from each other and have different use cases::"
msgstr ""
"Note que, apesar do nome, ``AnyStr`` não tem nada a ver com o tipo :class:"
"`Any`, nem significa \"qualquer string\". Em particular, ``AnyStr`` e ``str "
"| bytes`` são diferentes entre si e têm casos de uso diferentes::"

#: ../../library/typing.rst:811
msgid "Special type that includes only literal strings."
msgstr "Tipo especial que inclui apenas strings literais."

#: ../../library/typing.rst:813
msgid ""
"Any string literal is compatible with ``LiteralString``, as is another "
"``LiteralString``. However, an object typed as just ``str`` is not. A string "
"created by composing ``LiteralString``-typed objects is also acceptable as a "
"``LiteralString``."
msgstr ""
"Qualquer literal de string é compatível com ``LiteralString``, assim como "
"outro ``LiteralString``. Entretanto, um objeto digitado apenas ``str`` não "
"é. Uma string criada pela composição de objetos do tipo ``LiteralString`` "
"também é aceitável como uma ``LiteralString``."

#: ../../library/typing.rst:819 ../../library/typing.rst:1897
msgid "Example:"
msgstr "Exemplo:"

#: ../../library/typing.rst:835
msgid ""
"``LiteralString`` is useful for sensitive APIs where arbitrary user-"
"generated strings could generate problems. For example, the two cases above "
"that generate type checker errors could be vulnerable to an SQL injection "
"attack."
msgstr ""
"``LiteralString`` é útil para APIs sensíveis onde strings arbitrárias "
"geradas pelo usuário podem gerar problemas. Por exemplo, os dois casos acima "
"que geram erros no verificador de tipo podem ser vulneráveis a um ataque de "
"injeção de SQL."

#: ../../library/typing.rst:840
msgid "See :pep:`675` for more details."
msgstr "Veja :pep:`675` para mais detalhes."

#: ../../library/typing.rst:847
msgid ""
":data:`!Never` and :data:`!NoReturn` represent the `bottom type <https://en."
"wikipedia.org/wiki/Bottom_type>`_, a type that has no members."
msgstr ""
":data:`!Never` e :data:`!NoReturn` representam o `tipo inferior <https://en."
"wikipedia.org/wiki/Bottom_type>`_, um tipo que não possui membros."

#: ../../library/typing.rst:851
msgid ""
"They can be used to indicate that a function never returns, such as :func:"
"`sys.exit`::"
msgstr ""
"Eles podem ser usados ​​para indicar que uma função nunca retorna, como :func:"
"`sys.exit`::"

#: ../../library/typing.rst:859
msgid ""
"Or to define a function that should never be called, as there are no valid "
"arguments, such as :func:`assert_never`::"
msgstr ""
"Ou para definir uma função que nunca deve ser chamada, pois não existem "
"argumentos válidos, como :func:`assert_never`::"

#: ../../library/typing.rst:878
msgid ""
":data:`!Never` and :data:`!NoReturn` have the same meaning in the type "
"system and static type checkers treat both equivalently."
msgstr ""
":data:`!Never` e :data:`!NoReturn` têm o mesmo significado no sistema de "
"tipos e os verificadores de tipo estático tratam ambos de forma equivalente."

#: ../../library/typing.rst:883
msgid "Added :data:`NoReturn`."
msgstr "Adicionado :data:`NoReturn`."

#: ../../library/typing.rst:887
msgid "Added :data:`Never`."
msgstr "Adicionado :data:`Never`."

#: ../../library/typing.rst:891
msgid "Special type to represent the current enclosed class."
msgstr "Tipo especial para representar a classe atual inclusa."

#: ../../library/typing.rst:907
msgid ""
"This annotation is semantically equivalent to the following, albeit in a "
"more succinct fashion::"
msgstr ""
"Esta anotação é semanticamente equivalente à seguinte, embora de forma mais "
"sucinta::"

#: ../../library/typing.rst:919
msgid ""
"In general, if something returns ``self``, as in the above examples, you "
"should use ``Self`` as the return annotation. If ``Foo.return_self`` was "
"annotated as returning ``\"Foo\"``, then the type checker would infer the "
"object returned from ``SubclassOfFoo.return_self`` as being of type ``Foo`` "
"rather than ``SubclassOfFoo``."
msgstr ""
"Em geral, se algo retorna ``self``, como nos exemplos acima, você deve usar "
"``Self`` como anotação de retorno. Se ``Foo.return_self`` foi anotado como "
"retornando ``\"Foo\"``, então o verificador de tipo inferiria o objeto "
"retornado de ``SubclassOfFoo.return_self`` como sendo do tipo ``Foo`` em vez "
"de ``SubclassOfFoo``."

#: ../../library/typing.rst:925
msgid "Other common use cases include:"
msgstr "Outros casos de uso comuns incluem:"

#: ../../library/typing.rst:927
msgid ""
":class:`classmethod`\\s that are used as alternative constructors and return "
"instances of the ``cls`` parameter."
msgstr ""
":class:`classmethod`\\s que são usados como construtores alternativos e "
"retornam instâncias do parâmetro ``cls``."

#: ../../library/typing.rst:929
msgid "Annotating an :meth:`~object.__enter__` method which returns self."
msgstr "Anotando um método :meth:`~object.__enter__` que retorna self."

#: ../../library/typing.rst:931
msgid ""
"You should not use ``Self`` as the return annotation if the method is not "
"guaranteed to return an instance of a subclass when the class is subclassed::"
msgstr ""
"Você não deveria usar ``Self`` como a anotação de retorno se não for "
"garantido que o método retorne uma instância de uma subclasse quando a "
"classe for subclassificada::"

#: ../../library/typing.rst:942
msgid "See :pep:`673` for more details."
msgstr "Veja :pep:`673` para mais detalhes."

#: ../../library/typing.rst:948
msgid ""
"Special annotation for explicitly declaring a :ref:`type alias <type-"
"aliases>`."
msgstr ""
"Anotações especiais para declarar explicitamente um :ref:`apelido de tipo "
"<type-aliases>`."

#: ../../library/typing.rst:956
msgid ""
"``TypeAlias`` is particularly useful on older Python versions for annotating "
"aliases that make use of forward references, as it can be hard for type "
"checkers to distinguish these from normal variable assignments:"
msgstr ""
"``TypeAlias`` é particularmente útil em versões mais antigas do Python para "
"anotar apelidos que fazem uso de referências futuras, pois pode ser difícil "
"para os verificadores de tipo distingui-los das atribuições normais de "
"variáveis:"

#: ../../library/typing.rst:976
msgid "See :pep:`613` for more details."
msgstr "Veja :pep:`613` para mais detalhes."

#: ../../library/typing.rst:980
msgid ""
":data:`TypeAlias` is deprecated in favor of the :keyword:`type` statement, "
"which creates instances of :class:`TypeAliasType` and which natively "
"supports forward references. Note that while :data:`TypeAlias` and :class:"
"`TypeAliasType` serve similar purposes and have similar names, they are "
"distinct and the latter is not the type of the former. Removal of :data:"
"`TypeAlias` is not currently planned, but users are encouraged to migrate "
"to :keyword:`type` statements."
msgstr ""
":data:`TypeAlias` foi descontinuado em favor da instrução :keyword:`type`, "
"que cria instâncias de :class:`TypeAliasType` e que oferece suporte a "
"nativamente referências futuras. Observe que embora :data:`TypeAlias` e :"
"class:`TypeAliasType` sirvam propósitos semelhantes e tenham nomes "
"semelhantes, eles são distintos e o último não é o tipo do primeiro. A "
"remoção de :data:`TypeAlias` não está planejada atualmente, mas os usuários "
"são encorajados a migrar para instruções :keyword:`type`."

#: ../../library/typing.rst:991
msgid "Special forms"
msgstr "Formas especiais"

#: ../../library/typing.rst:993
msgid ""
"These can be used as types in annotations. They all support subscription "
"using ``[]``, but each has a unique syntax."
msgstr ""
"Eles podem ser usados ​​como tipos em anotações. Todos eles oferecem suporte a "
"subscrição usando ``[]``, mas cada um tem uma sintaxe única."

#: ../../library/typing.rst:998
msgid ""
"Union type; ``Union[X, Y]`` is equivalent to ``X | Y`` and means either X or "
"Y."
msgstr ""
"Tipo de união;  ``Union[X, Y]`` é equivalente a ``X | Y`` e significa X ou Y."

#: ../../library/typing.rst:1000
msgid ""
"To define a union, use e.g. ``Union[int, str]`` or the shorthand ``int | "
"str``. Using that shorthand is recommended. Details:"
msgstr ""
"Para definir uma união, use, por exemplo. ``Union[int, str]`` ou a "
"abreviatura ``int | str``. Usar essa abreviação é recomendado. Detalhes:"

#: ../../library/typing.rst:1002
msgid "The arguments must be types and there must be at least one."
msgstr "Os argumentos devem ser tipos e deve haver pelo menos um."

#: ../../library/typing.rst:1004
msgid "Unions of unions are flattened, e.g.::"
msgstr "As uniões de uniões são achatadas, por exemplo::"

#: ../../library/typing.rst:1008
msgid "Unions of a single argument vanish, e.g.::"
msgstr "As uniões de um único argumento desaparecem, por exemplo::"

#: ../../library/typing.rst:1012
msgid "Redundant arguments are skipped, e.g.::"
msgstr "Argumento redundantes são pulados, e.g.::"

#: ../../library/typing.rst:1016
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr ""

#: ../../library/typing.rst:1020
msgid "You cannot subclass or instantiate a ``Union``."
msgstr "Você não pode estender ou instanciar uma ``Union``"

#: ../../library/typing.rst:1022
msgid "You cannot write ``Union[X][Y]``."
msgstr "Você não pode escrever ``Union[X][Y]``."

#: ../../library/typing.rst:1024
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr ""

#: ../../library/typing.rst:1027
msgid ""
"Unions can now be written as ``X | Y``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""

#: ../../library/typing.rst:1033
msgid "``Optional[X]`` is equivalent to ``X | None`` (or ``Union[X, None]``)."
msgstr ""

#: ../../library/typing.rst:1035
msgid ""
"Note that this is not the same concept as an optional argument, which is one "
"that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""

#: ../../library/typing.rst:1043
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr ""

#: ../../library/typing.rst:1050
msgid ""
"Optional can now be written as ``X | None``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""

#: ../../library/typing.rst:1056
msgid "Special form for annotating higher-order functions."
msgstr "Forma especial para anotar funções de ordem superior."

#: ../../library/typing.rst:1058
msgid ""
"``Concatenate`` can be used in conjunction with :ref:`Callable <annotating-"
"callables>` and :class:`ParamSpec` to annotate a higher-order callable which "
"adds, removes, or transforms parameters of another callable.  Usage is in "
"the form ``Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable]``. "
"``Concatenate`` is currently only valid when used as the first argument to "
"a :ref:`Callable <annotating-callables>`. The last parameter to "
"``Concatenate`` must be a :class:`ParamSpec` or ellipsis (``...``)."
msgstr ""

#: ../../library/typing.rst:1067
msgid ""
"For example, to annotate a decorator ``with_lock`` which provides a :class:"
"`threading.Lock` to the decorated function,  ``Concatenate`` can be used to "
"indicate that ``with_lock`` expects a callable which takes in a ``Lock`` as "
"the first argument, and returns a callable with a different type signature.  "
"In this case, the :class:`ParamSpec` indicates that the returned callable's "
"parameter types are dependent on the parameter types of the callable being "
"passed in::"
msgstr ""

#: ../../library/typing.rst:1103 ../../library/typing.rst:1865
msgid ""
":pep:`612` -- Parameter Specification Variables (the PEP which introduced "
"``ParamSpec`` and ``Concatenate``)"
msgstr ""

#: ../../library/typing.rst:1105
msgid ":class:`ParamSpec`"
msgstr ""

#: ../../library/typing.rst:1106 ../../library/typing.rst:1868
msgid ":ref:`annotating-callables`"
msgstr ""

#: ../../library/typing.rst:1110
msgid "Special typing form to define \"literal types\"."
msgstr ""

#: ../../library/typing.rst:1112
msgid ""
"``Literal`` can be used to indicate to type checkers that the annotated "
"object has a value equivalent to one of the provided literals."
msgstr ""

#: ../../library/typing.rst:1128
msgid ""
"``Literal[...]`` cannot be subclassed. At runtime, an arbitrary value is "
"allowed as type argument to ``Literal[...]``, but type checkers may impose "
"restrictions. See :pep:`586` for more details about literal types."
msgstr ""

#: ../../library/typing.rst:1134
msgid ""
"``Literal`` now de-duplicates parameters.  Equality comparisons of "
"``Literal`` objects are no longer order dependent. ``Literal`` objects will "
"now raise a :exc:`TypeError` exception during equality comparisons if one of "
"their parameters are not :term:`hashable`."
msgstr ""

#: ../../library/typing.rst:1142
msgid "Special type construct to mark class variables."
msgstr ""

#: ../../library/typing.rst:1144
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr ""

#: ../../library/typing.rst:1152
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ""

#: ../../library/typing.rst:1154
msgid ""
":data:`ClassVar` is not a class itself, and should not be used with :func:"
"`isinstance` or :func:`issubclass`. :data:`ClassVar` does not change Python "
"runtime behavior, but it can be used by third-party type checkers. For "
"example, a type checker might flag the following code as an error::"
msgstr ""

#: ../../library/typing.rst:1168
msgid "Special typing construct to indicate final names to type checkers."
msgstr ""

#: ../../library/typing.rst:1170
msgid ""
"Final names cannot be reassigned in any scope. Final names declared in class "
"scopes cannot be overridden in subclasses."
msgstr ""

#: ../../library/typing.rst:1184 ../../library/typing.rst:2785
msgid ""
"There is no runtime checking of these properties. See :pep:`591` for more "
"details."
msgstr ""

#: ../../library/typing.rst:1191
msgid "Special typing construct to mark a :class:`TypedDict` key as required."
msgstr ""

#: ../../library/typing.rst:1193
msgid ""
"This is mainly useful for ``total=False`` TypedDicts. See :class:`TypedDict` "
"and :pep:`655` for more details."
msgstr ""

#: ../../library/typing.rst:1200
msgid ""
"Special typing construct to mark a :class:`TypedDict` key as potentially "
"missing."
msgstr ""

#: ../../library/typing.rst:1203
msgid "See :class:`TypedDict` and :pep:`655` for more details."
msgstr ""

#: ../../library/typing.rst:1209
msgid "Special typing form to add context-specific metadata to an annotation."
msgstr ""

#: ../../library/typing.rst:1211
msgid ""
"Add metadata ``x`` to a given type ``T`` by using the annotation "
"``Annotated[T, x]``. Metadata added using ``Annotated`` can be used by "
"static analysis tools or at runtime. At runtime, the metadata is stored in "
"a :attr:`!__metadata__` attribute."
msgstr ""

#: ../../library/typing.rst:1216
msgid ""
"If a library or tool encounters an annotation ``Annotated[T, x]`` and has no "
"special logic for the metadata, it should ignore the metadata and simply "
"treat the annotation as ``T``. As such, ``Annotated`` can be useful for code "
"that wants to use annotations for purposes outside Python's static typing "
"system."
msgstr ""

#: ../../library/typing.rst:1222
msgid ""
"Using ``Annotated[T, x]`` as an annotation still allows for static "
"typechecking of ``T``, as type checkers will simply ignore the metadata "
"``x``. In this way, ``Annotated`` differs from the :func:`@no_type_check "
"<no_type_check>` decorator, which can also be used for adding annotations "
"outside the scope of the typing system, but completely disables typechecking "
"for a function or class."
msgstr ""

#: ../../library/typing.rst:1229
msgid ""
"The responsibility of how to interpret the metadata lies with the tool or "
"library encountering an ``Annotated`` annotation. A tool or library "
"encountering an ``Annotated`` type can scan through the metadata elements to "
"determine if they are of interest (e.g., using :func:`isinstance`)."
msgstr ""

#: ../../library/typing.rst:1237
msgid ""
"Here is an example of how you might use ``Annotated`` to add metadata to "
"type annotations if you were doing range analysis:"
msgstr ""

#: ../../library/typing.rst:1250
msgid "Details of the syntax:"
msgstr "Detalhes da sintaxe:"

#: ../../library/typing.rst:1252
msgid "The first argument to ``Annotated`` must be a valid type"
msgstr ""

#: ../../library/typing.rst:1254
msgid ""
"Multiple metadata elements can be supplied (``Annotated`` supports variadic "
"arguments)::"
msgstr ""

#: ../../library/typing.rst:1263
msgid ""
"It is up to the tool consuming the annotations to decide whether the client "
"is allowed to add multiple metadata elements to one annotation and how to "
"merge those annotations."
msgstr ""

#: ../../library/typing.rst:1267
msgid ""
"``Annotated`` must be subscripted with at least two arguments "
"( ``Annotated[int]`` is not valid)"
msgstr ""

#: ../../library/typing.rst:1270
msgid ""
"The order of the metadata elements is preserved and matters for equality "
"checks::"
msgstr ""

#: ../../library/typing.rst:1277
msgid ""
"Nested ``Annotated`` types are flattened. The order of the metadata elements "
"starts with the innermost annotation::"
msgstr ""

#: ../../library/typing.rst:1284
msgid "Duplicated metadata elements are not removed::"
msgstr "Elementos duplicados de metadata não são removidos::"

#: ../../library/typing.rst:1290
msgid "``Annotated`` can be used with nested and generic aliases:"
msgstr ""

#: ../../library/typing.rst:1304
msgid "``Annotated`` cannot be used with an unpacked :class:`TypeVarTuple`::"
msgstr ""

#: ../../library/typing.rst:1308
msgid "This would be equivalent to::"
msgstr "Isso deve ser equivalente a ::"

#: ../../library/typing.rst:1312
msgid ""
"where ``T1``, ``T2``, etc. are :class:`TypeVars <TypeVar>`. This would be "
"invalid: only one type should be passed to Annotated."
msgstr ""

#: ../../library/typing.rst:1315
msgid ""
"By default, :func:`get_type_hints` strips the metadata from annotations. "
"Pass ``include_extras=True`` to have the metadata preserved:"
msgstr ""

#: ../../library/typing.rst:1328
msgid ""
"At runtime, the metadata associated with an ``Annotated`` type can be "
"retrieved via the :attr:`!__metadata__` attribute:"
msgstr ""

#: ../../library/typing.rst:1342
msgid ":pep:`593` - Flexible function and variable annotations"
msgstr ""

#: ../../library/typing.rst:1343
msgid "The PEP introducing ``Annotated`` to the standard library."
msgstr ""

#: ../../library/typing.rst:1350
msgid "Special typing construct for marking user-defined type guard functions."
msgstr ""

#: ../../library/typing.rst:1352
msgid ""
"``TypeGuard`` can be used to annotate the return type of a user-defined type "
"guard function.  ``TypeGuard`` only accepts a single type argument. At "
"runtime, functions marked this way should return a boolean."
msgstr ""

#: ../../library/typing.rst:1356
msgid ""
"``TypeGuard`` aims to benefit *type narrowing* -- a technique used by static "
"type checkers to determine a more precise type of an expression within a "
"program's code flow.  Usually type narrowing is done by analyzing "
"conditional code flow and applying the narrowing to a block of code.  The "
"conditional expression here is sometimes referred to as a \"type guard\"::"
msgstr ""

#: ../../library/typing.rst:1371
msgid ""
"Sometimes it would be convenient to use a user-defined boolean function as a "
"type guard.  Such a function should use ``TypeGuard[...]`` as its return "
"type to alert static type checkers to this intention."
msgstr ""

#: ../../library/typing.rst:1375
msgid ""
"Using  ``-> TypeGuard`` tells the static type checker that for a given "
"function:"
msgstr ""

#: ../../library/typing.rst:1378
msgid "The return value is a boolean."
msgstr "O valor de retorno é um booleano."

#: ../../library/typing.rst:1379
msgid ""
"If the return value is ``True``, the type of its argument is the type inside "
"``TypeGuard``."
msgstr ""

#: ../../library/typing.rst:1396
msgid ""
"If ``is_str_list`` is a class or instance method, then the type in "
"``TypeGuard`` maps to the type of the second parameter after ``cls`` or "
"``self``."
msgstr ""

#: ../../library/typing.rst:1400
msgid ""
"In short, the form ``def foo(arg: TypeA) -> TypeGuard[TypeB]: ...``, means "
"that if ``foo(arg)`` returns ``True``, then ``arg`` narrows from ``TypeA`` "
"to ``TypeB``."
msgstr ""

#: ../../library/typing.rst:1406
msgid ""
"``TypeB`` need not be a narrower form of ``TypeA`` -- it can even be a wider "
"form. The main reason is to allow for things like narrowing ``list[object]`` "
"to ``list[str]`` even though the latter is not a subtype of the former, "
"since ``list`` is invariant. The responsibility of writing type-safe type "
"guards is left to the user."
msgstr ""

#: ../../library/typing.rst:1412
msgid ""
"``TypeGuard`` also works with type variables.  See :pep:`647` for more "
"details."
msgstr ""

#: ../../library/typing.rst:1419
msgid "Typing operator to conceptually mark an object as having been unpacked."
msgstr ""

#: ../../library/typing.rst:1421
msgid ""
"For example, using the unpack operator ``*`` on a :ref:`type variable tuple "
"<typevartuple>` is equivalent to using ``Unpack`` to mark the type variable "
"tuple as having been unpacked::"
msgstr ""

#: ../../library/typing.rst:1430
msgid ""
"In fact, ``Unpack`` can be used interchangeably with ``*`` in the context "
"of :class:`typing.TypeVarTuple <TypeVarTuple>` and :class:`builtins.tuple "
"<tuple>` types. You might see ``Unpack`` being used explicitly in older "
"versions of Python, where ``*`` couldn't be used in certain places::"
msgstr ""

#: ../../library/typing.rst:1444
msgid ""
"``Unpack`` can also be used along with :class:`typing.TypedDict` for typing "
"``**kwargs`` in a function signature::"
msgstr ""

#: ../../library/typing.rst:1457
msgid ""
"See :pep:`692` for more details on using ``Unpack`` for ``**kwargs`` typing."
msgstr ""

#: ../../library/typing.rst:1462
msgid "Building generic types and type aliases"
msgstr "Criando tipos genéricos e apelidos de tipo"

#: ../../library/typing.rst:1464
msgid ""
"The following classes should not be used directly as annotations. Their "
"intended purpose is to be building blocks for creating generic types and "
"type aliases."
msgstr ""

#: ../../library/typing.rst:1468
msgid ""
"These objects can be created through special syntax (:ref:`type parameter "
"lists <type-params>` and the :keyword:`type` statement). For compatibility "
"with Python 3.11 and earlier, they can also be created without the dedicated "
"syntax, as documented below."
msgstr ""

#: ../../library/typing.rst:1475
msgid "Abstract base class for generic types."
msgstr "Classe base abstrata para tipos genéricos"

#: ../../library/typing.rst:1477
msgid ""
"A generic type is typically declared by adding a list of type parameters "
"after the class name::"
msgstr ""

#: ../../library/typing.rst:1485
msgid ""
"Such a class implicitly inherits from ``Generic``. The runtime semantics of "
"this syntax are discussed in the :ref:`Language Reference <generic-classes>`."
msgstr ""

#: ../../library/typing.rst:1489
msgid "This class can then be used as follows::"
msgstr "Esta classe pode ser utilizada como segue::"

#: ../../library/typing.rst:1497
msgid ""
"Here the brackets after the function name indicate a :ref:`generic function "
"<generic-functions>`."
msgstr ""
"Aqui os colchetes depois no nome da função indica uma :ref:`função genérica "
"<generic-functions>`."

#: ../../library/typing.rst:1500
msgid ""
"For backwards compatibility, generic classes can also be declared by "
"explicitly inheriting from ``Generic``. In this case, the type parameters "
"must be declared separately::"
msgstr ""

#: ../../library/typing.rst:1517
msgid "Type variable."
msgstr "Tipo variável."

#: ../../library/typing.rst:1519
msgid ""
"The preferred way to construct a type variable is via the dedicated syntax "
"for :ref:`generic functions <generic-functions>`, :ref:`generic classes "
"<generic-classes>`, and :ref:`generic type aliases <generic-type-aliases>`::"
msgstr ""

#: ../../library/typing.rst:1527
msgid ""
"This syntax can also be used to create bound and constrained type variables::"
msgstr ""

#: ../../library/typing.rst:1537
msgid ""
"However, if desired, reusable type variables can also be constructed "
"manually, like so::"
msgstr ""

#: ../../library/typing.rst:1543
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function and type alias definitions. See :class:`Generic` for more "
"information on generic types.  Generic functions work as follows::"
msgstr ""

#: ../../library/typing.rst:1564
msgid ""
"Note that type variables can be *bound*, *constrained*, or neither, but "
"cannot be both bound *and* constrained."
msgstr ""

#: ../../library/typing.rst:1567
msgid ""
"The variance of type variables is inferred by type checkers when they are "
"created through the :ref:`type parameter syntax <type-params>` or when "
"``infer_variance=True`` is passed. Manually created type variables may be "
"explicitly marked covariant or contravariant by passing ``covariant=True`` "
"or ``contravariant=True``. By default, manually created type variables are "
"invariant. See :pep:`484` and :pep:`695` for more details."
msgstr ""

#: ../../library/typing.rst:1575
msgid ""
"Bound type variables and constrained type variables have different semantics "
"in several important ways. Using a *bound* type variable means that the "
"``TypeVar`` will be solved using the most specific type possible::"
msgstr ""

#: ../../library/typing.rst:1590
msgid ""
"Type variables can be bound to concrete types, abstract types (ABCs or "
"protocols), and even unions of types::"
msgstr ""

#: ../../library/typing.rst:1602
msgid ""
"Using a *constrained* type variable, however, means that the ``TypeVar`` can "
"only ever be solved as being exactly one of the constraints given::"
msgstr ""

#: ../../library/typing.rst:1613
msgid "At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`."
msgstr ""

#: ../../library/typing.rst:1617
msgid "The name of the type variable."
msgstr ""

#: ../../library/typing.rst:1621
msgid "Whether the type var has been explicitly marked as covariant."
msgstr ""

#: ../../library/typing.rst:1625
msgid "Whether the type var has been explicitly marked as contravariant."
msgstr ""

#: ../../library/typing.rst:1629
msgid ""
"Whether the type variable's variance should be inferred by type checkers."
msgstr ""

#: ../../library/typing.rst:1635
msgid "The bound of the type variable, if any."
msgstr ""

#: ../../library/typing.rst:1639
msgid ""
"For type variables created through :ref:`type parameter syntax <type-"
"params>`, the bound is evaluated only when the attribute is accessed, not "
"when the type variable is created (see :ref:`lazy-evaluation`)."
msgstr ""

#: ../../library/typing.rst:1645
msgid "A tuple containing the constraints of the type variable, if any."
msgstr ""

#: ../../library/typing.rst:1649
msgid ""
"For type variables created through :ref:`type parameter syntax <type-"
"params>`, the constraints are evaluated only when the attribute is accessed, "
"not when the type variable is created (see :ref:`lazy-evaluation`)."
msgstr ""

#: ../../library/typing.rst:1655
msgid ""
"Type variables can now be declared using the :ref:`type parameter <type-"
"params>` syntax introduced by :pep:`695`. The ``infer_variance`` parameter "
"was added."
msgstr ""

#: ../../library/typing.rst:1663
msgid ""
"Type variable tuple. A specialized form of :ref:`type variable <typevar>` "
"that enables *variadic* generics."
msgstr ""

#: ../../library/typing.rst:1666
msgid ""
"Type variable tuples can be declared in :ref:`type parameter lists <type-"
"params>` using a single asterisk (``*``) before the name::"
msgstr ""

#: ../../library/typing.rst:1672
msgid "Or by explicitly invoking the ``TypeVarTuple`` constructor::"
msgstr ""

#: ../../library/typing.rst:1680
msgid ""
"A normal type variable enables parameterization with a single type. A type "
"variable tuple, in contrast, allows parameterization with an *arbitrary* "
"number of types by acting like an *arbitrary* number of type variables "
"wrapped in a tuple. For example::"
msgstr ""

#: ../../library/typing.rst:1702
msgid ""
"Note the use of the unpacking operator ``*`` in ``tuple[T, *Ts]``. "
"Conceptually, you can think of ``Ts`` as a tuple of type variables ``(T1, "
"T2, ...)``. ``tuple[T, *Ts]`` would then become ``tuple[T, *(T1, "
"T2, ...)]``, which is equivalent to ``tuple[T, T1, T2, ...]``. (Note that in "
"older versions of Python, you might see this written using :data:`Unpack "
"<Unpack>` instead, as ``Unpack[Ts]``.)"
msgstr ""

#: ../../library/typing.rst:1710
msgid ""
"Type variable tuples must *always* be unpacked. This helps distinguish type "
"variable tuples from normal type variables::"
msgstr ""

#: ../../library/typing.rst:1717
msgid ""
"Type variable tuples can be used in the same contexts as normal type "
"variables. For example, in class definitions, arguments, and return types::"
msgstr ""

#: ../../library/typing.rst:1725
msgid ""
"Type variable tuples can be happily combined with normal type variables:"
msgstr ""

#: ../../library/typing.rst:1741
msgid ""
"However, note that at most one type variable tuple may appear in a single "
"list of type arguments or type parameters::"
msgstr ""

#: ../../library/typing.rst:1748
msgid ""
"Finally, an unpacked type variable tuple can be used as the type annotation "
"of ``*args``::"
msgstr ""

#: ../../library/typing.rst:1758
msgid ""
"In contrast to non-unpacked annotations of ``*args`` - e.g. ``*args: int``, "
"which would specify that *all* arguments are ``int`` - ``*args: *Ts`` "
"enables reference to the types of the *individual* arguments in ``*args``. "
"Here, this allows us to ensure the types of the ``*args`` passed to "
"``call_soon`` match the types of the (positional) arguments of ``callback``."
msgstr ""

#: ../../library/typing.rst:1765
msgid "See :pep:`646` for more details on type variable tuples."
msgstr ""

#: ../../library/typing.rst:1769
msgid "The name of the type variable tuple."
msgstr ""

#: ../../library/typing.rst:1775
msgid ""
"Type variable tuples can now be declared using the :ref:`type parameter "
"<type-params>` syntax introduced by :pep:`695`."
msgstr ""

#: ../../library/typing.rst:1780
msgid ""
"Parameter specification variable.  A specialized version of :ref:`type "
"variables <typevar>`."
msgstr ""

#: ../../library/typing.rst:1783
msgid ""
"In :ref:`type parameter lists <type-params>`, parameter specifications can "
"be declared with two asterisks (``**``)::"
msgstr ""

#: ../../library/typing.rst:1788
msgid ""
"For compatibility with Python 3.11 and earlier, ``ParamSpec`` objects can "
"also be created as follows::"
msgstr ""

#: ../../library/typing.rst:1793
msgid ""
"Parameter specification variables exist primarily for the benefit of static "
"type checkers.  They are used to forward the parameter types of one callable "
"to another callable -- a pattern commonly found in higher order functions "
"and decorators.  They are only valid when used in ``Concatenate``, or as the "
"first argument to ``Callable``, or as parameters for user-defined Generics.  "
"See :class:`Generic` for more information on generic types."
msgstr ""

#: ../../library/typing.rst:1800
msgid ""
"For example, to add basic logging to a function, one can create a decorator "
"``add_logging`` to log function calls.  The parameter specification variable "
"tells the type checker that the callable passed into the decorator and the "
"new callable returned by it have inter-dependent type parameters::"
msgstr ""

#: ../../library/typing.rst:1820
msgid ""
"Without ``ParamSpec``, the simplest way to annotate this previously was to "
"use a :class:`TypeVar` with bound ``Callable[..., Any]``.  However this "
"causes two problems:"
msgstr ""

#: ../../library/typing.rst:1824
msgid ""
"The type checker can't type check the ``inner`` function because ``*args`` "
"and ``**kwargs`` have to be typed :data:`Any`."
msgstr ""

#: ../../library/typing.rst:1826
msgid ""
":func:`~cast` may be required in the body of the ``add_logging`` decorator "
"when returning the ``inner`` function, or the static type checker must be "
"told to ignore the ``return inner``."
msgstr ""

#: ../../library/typing.rst:1833
msgid ""
"Since ``ParamSpec`` captures both positional and keyword parameters, ``P."
"args`` and ``P.kwargs`` can be used to split a ``ParamSpec`` into its "
"components.  ``P.args`` represents the tuple of positional parameters in a "
"given call and should only be used to annotate ``*args``.  ``P.kwargs`` "
"represents the mapping of keyword parameters to their values in a given "
"call, and should be only be used to annotate ``**kwargs``.  Both attributes "
"require the annotated parameter to be in scope. At runtime, ``P.args`` and "
"``P.kwargs`` are instances respectively of :class:`ParamSpecArgs` and :class:"
"`ParamSpecKwargs`."
msgstr ""

#: ../../library/typing.rst:1845
msgid "The name of the parameter specification."
msgstr ""

#: ../../library/typing.rst:1847
msgid ""
"Parameter specification variables created with ``covariant=True`` or "
"``contravariant=True`` can be used to declare covariant or contravariant "
"generic types.  The ``bound`` argument is also accepted, similar to :class:"
"`TypeVar`.  However the actual semantics of these keywords are yet to be "
"decided."
msgstr ""

#: ../../library/typing.rst:1857
msgid ""
"Parameter specifications can now be declared using the :ref:`type parameter "
"<type-params>` syntax introduced by :pep:`695`."
msgstr ""

#: ../../library/typing.rst:1861
msgid ""
"Only parameter specification variables defined in global scope can be "
"pickled."
msgstr ""

#: ../../library/typing.rst:1867
msgid ":data:`Concatenate`"
msgstr ""

#: ../../library/typing.rst:1873
msgid ""
"Arguments and keyword arguments attributes of a :class:`ParamSpec`. The ``P."
"args`` attribute of a ``ParamSpec`` is an instance of ``ParamSpecArgs``, and "
"``P.kwargs`` is an instance of ``ParamSpecKwargs``. They are intended for "
"runtime introspection and have no special meaning to static type checkers."
msgstr ""

#: ../../library/typing.rst:1878
msgid ""
"Calling :func:`get_origin` on either of these objects will return the "
"original ``ParamSpec``:"
msgstr ""

#: ../../library/typing.rst:1895
msgid "The type of type aliases created through the :keyword:`type` statement."
msgstr ""

#: ../../library/typing.rst:1909
msgid "The name of the type alias:"
msgstr ""

#: ../../library/typing.rst:1919
msgid "The module in which the type alias was defined::"
msgstr "O módulo na qual o apelido de tipo foi definido::"

#: ../../library/typing.rst:1927
msgid ""
"The type parameters of the type alias, or an empty tuple if the alias is not "
"generic:"
msgstr ""

#: ../../library/typing.rst:1941
msgid ""
"The type alias's value. This is :ref:`lazily evaluated <lazy-evaluation>`, "
"so names used in the definition of the alias are not resolved until the "
"``__value__`` attribute is accessed:"
msgstr ""

#: ../../library/typing.rst:1959
msgid "Other special directives"
msgstr "Outras diretivas especiais"

#: ../../library/typing.rst:1961
msgid ""
"These functions and classes should not be used directly as annotations. "
"Their intended purpose is to be building blocks for creating and declaring "
"types."
msgstr ""

#: ../../library/typing.rst:1967
msgid "Typed version of :func:`collections.namedtuple`."
msgstr ""

#: ../../library/typing.rst:1969 ../../library/typing.rst:2046
#: ../../library/typing.rst:3013
msgid "Usage::"
msgstr "Uso::"

#: ../../library/typing.rst:1975
msgid "This is equivalent to::"
msgstr "Isso equivale a::"

#: ../../library/typing.rst:1979
msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr ""

#: ../../library/typing.rst:1988
msgid ""
"Fields with a default value must come after any fields without a default."
msgstr ""

#: ../../library/typing.rst:1990
msgid ""
"The resulting class has an extra attribute ``__annotations__`` giving a dict "
"that maps the field names to the field types.  (The field names are in the "
"``_fields`` attribute and the default values are in the ``_field_defaults`` "
"attribute, both of which are part of the :func:`~collections.namedtuple` "
"API.)"
msgstr ""

#: ../../library/typing.rst:1996
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr ""

#: ../../library/typing.rst:2006
msgid "``NamedTuple`` subclasses can be generic::"
msgstr ""

#: ../../library/typing.rst:2012
msgid "Backward-compatible usage::"
msgstr ""

#: ../../library/typing.rst:2022
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr ""

#: ../../library/typing.rst:2025
msgid "Added support for default values, methods, and docstrings."
msgstr ""

#: ../../library/typing.rst:2028
msgid ""
"The ``_field_types`` and ``__annotations__`` attributes are now regular "
"dictionaries instead of instances of ``OrderedDict``."
msgstr ""

#: ../../library/typing.rst:2032
msgid ""
"Removed the ``_field_types`` attribute in favor of the more standard "
"``__annotations__`` attribute which has the same information."
msgstr ""

#: ../../library/typing.rst:2036
msgid "Added support for generic namedtuples."
msgstr ""

#: ../../library/typing.rst:2041
msgid "Helper class to create low-overhead :ref:`distinct types <distinct>`."
msgstr ""

#: ../../library/typing.rst:2043
msgid ""
"A ``NewType`` is considered a distinct type by a typechecker. At runtime, "
"however, calling a ``NewType`` returns its argument unchanged."
msgstr ""

#: ../../library/typing.rst:2053
msgid "The module in which the new type is defined."
msgstr ""

#: ../../library/typing.rst:2057
msgid "The name of the new type."
msgstr "O nome do novo tipo."

#: ../../library/typing.rst:2061
msgid "The type that the new type is based on."
msgstr "O tipo na qual o novo tipo é baseado."

#: ../../library/typing.rst:2065
msgid "``NewType`` is now a class rather than a function."
msgstr ""

#: ../../library/typing.rst:2070
msgid "Base class for protocol classes."
msgstr ""

#: ../../library/typing.rst:2072
msgid "Protocol classes are defined like this::"
msgstr ""

#: ../../library/typing.rst:2078
msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr ""

#: ../../library/typing.rst:2090
msgid ""
"See :pep:`544` for more details. Protocol classes decorated with :func:"
"`runtime_checkable` (described later) act as simple-minded runtime protocols "
"that check only the presence of given attributes, ignoring their type "
"signatures."
msgstr ""

#: ../../library/typing.rst:2095
msgid "Protocol classes can be generic, for example::"
msgstr ""

#: ../../library/typing.rst:2101
msgid ""
"In code that needs to be compatible with Python 3.11 or older, generic "
"Protocols can be written as follows::"
msgstr ""

#: ../../library/typing.rst:2114
msgid "Mark a protocol class as a runtime protocol."
msgstr ""

#: ../../library/typing.rst:2116
msgid ""
"Such a protocol can be used with :func:`isinstance` and :func:`issubclass`. "
"This raises :exc:`TypeError` when applied to a non-protocol class.  This "
"allows a simple-minded structural check, very similar to \"one trick "
"ponies\" in :mod:`collections.abc` such as :class:`~collections.abc."
"Iterable`.  For example::"
msgstr ""

#: ../../library/typing.rst:2136
msgid ""
":func:`!runtime_checkable` will check only the presence of the required "
"methods or attributes, not their type signatures or types. For example, :"
"class:`ssl.SSLObject` is a class, therefore it passes an :func:`issubclass` "
"check against :ref:`Callable <annotating-callables>`. However, the ``ssl."
"SSLObject.__init__`` method exists only to raise a :exc:`TypeError` with a "
"more informative message, therefore making it impossible to call "
"(instantiate) :class:`ssl.SSLObject`."
msgstr ""

#: ../../library/typing.rst:2147
msgid ""
"An :func:`isinstance` check against a runtime-checkable protocol can be "
"surprisingly slow compared to an ``isinstance()`` check against a non-"
"protocol class. Consider using alternative idioms such as :func:`hasattr` "
"calls for structural checks in performance-sensitive code."
msgstr ""

#: ../../library/typing.rst:2155
msgid ""
"The internal implementation of :func:`isinstance` checks against runtime-"
"checkable protocols now uses :func:`inspect.getattr_static` to look up "
"attributes (previously, :func:`hasattr` was used). As a result, some objects "
"which used to be considered instances of a runtime-checkable protocol may no "
"longer be considered instances of that protocol on Python 3.12+, and vice "
"versa. Most users are unlikely to be affected by this change."
msgstr ""

#: ../../library/typing.rst:2164
msgid ""
"The members of a runtime-checkable protocol are now considered \"frozen\" at "
"runtime as soon as the class has been created. Monkey-patching attributes "
"onto a runtime-checkable protocol will still work, but will have no impact "
"on :func:`isinstance` checks comparing objects to the protocol. See :ref:"
"`\"What's new in Python 3.12\" <whatsnew-typing-py312>` for more details."
msgstr ""

#: ../../library/typing.rst:2175
msgid ""
"Special construct to add type hints to a dictionary. At runtime it is a "
"plain :class:`dict`."
msgstr ""

#: ../../library/typing.rst:2178
msgid ""
"``TypedDict`` declares a dictionary type that expects all of its instances "
"to have a certain set of keys, where each key is associated with a value of "
"a consistent type. This expectation is not checked at runtime but is only "
"enforced by type checkers. Usage::"
msgstr ""

#: ../../library/typing.rst:2194
msgid ""
"To allow using this feature with older versions of Python that do not "
"support :pep:`526`, ``TypedDict`` supports two additional equivalent "
"syntactic forms:"
msgstr ""

#: ../../library/typing.rst:2198
msgid "Using a literal :class:`dict` as the second argument::"
msgstr "Utilizando um literal :class:`dict` como segundo argumento::"

#: ../../library/typing.rst:2202
msgid "Using keyword arguments::"
msgstr ""

#: ../../library/typing.rst:2209
msgid ""
"The keyword-argument syntax is deprecated in 3.11 and will be removed in "
"3.13. It may also be unsupported by static type checkers."
msgstr ""

#: ../../library/typing.rst:2210
msgid ""
"The functional syntax should also be used when any of the keys are not "
"valid :ref:`identifiers <identifiers>`, for example because they are "
"keywords or contain hyphens. Example::"
msgstr ""

#: ../../library/typing.rst:2222
msgid ""
"By default, all keys must be present in a ``TypedDict``. It is possible to "
"mark individual keys as non-required using :data:`NotRequired`::"
msgstr ""

#: ../../library/typing.rst:2233
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have the ``label`` key "
"omitted."
msgstr ""

#: ../../library/typing.rst:2236
msgid ""
"It is also possible to mark all keys as non-required by default by "
"specifying a totality of ``False``::"
msgstr ""

#: ../../library/typing.rst:2246
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have any of the keys "
"omitted. A type checker is only expected to support a literal ``False`` or "
"``True`` as the value of the ``total`` argument. ``True`` is the default, "
"and makes all items defined in the class body required."
msgstr ""

#: ../../library/typing.rst:2251
msgid ""
"Individual keys of a ``total=False`` ``TypedDict`` can be marked as required "
"using :data:`Required`::"
msgstr ""

#: ../../library/typing.rst:2266
msgid ""
"It is possible for a ``TypedDict`` type to inherit from one or more other "
"``TypedDict`` types using the class-based syntax. Usage::"
msgstr ""

#: ../../library/typing.rst:2273
msgid ""
"``Point3D`` has three items: ``x``, ``y`` and ``z``. It is equivalent to "
"this definition::"
msgstr ""

#: ../../library/typing.rst:2281
msgid ""
"A ``TypedDict`` cannot inherit from a non-\\ ``TypedDict`` class, except "
"for :class:`Generic`. For example::"
msgstr ""

#: ../../library/typing.rst:2296
msgid "A ``TypedDict`` can be generic::"
msgstr "Um ``TypedDict`` pode ser genérico::"

#: ../../library/typing.rst:2302
msgid ""
"To create a generic ``TypedDict`` that is compatible with Python 3.11 or "
"lower, inherit from :class:`Generic` explicitly:"
msgstr ""

#: ../../library/typing.rst:2313
msgid ""
"A ``TypedDict`` can be introspected via annotations dicts (see :ref:"
"`annotations-howto` for more information on annotations best practices), :"
"attr:`__total__`, :attr:`__required_keys__`, and :attr:`__optional_keys__`."
msgstr ""

#: ../../library/typing.rst:2319
msgid ""
"``Point2D.__total__`` gives the value of the ``total`` argument. Example:"
msgstr ""

#: ../../library/typing.rst:2335
msgid ""
"This attribute reflects *only* the value of the ``total`` argument to the "
"current ``TypedDict`` class, not whether the class is semantically total. "
"For example, a ``TypedDict`` with ``__total__`` set to ``True`` may have "
"keys marked with :data:`NotRequired`, or it may inherit from another "
"``TypedDict`` with ``total=False``. Therefore, it is generally better to "
"use :attr:`__required_keys__` and :attr:`__optional_keys__` for "
"introspection."
msgstr ""

#: ../../library/typing.rst:2348
msgid ""
"``Point2D.__required_keys__`` and ``Point2D.__optional_keys__`` return :"
"class:`frozenset` objects containing required and non-required keys, "
"respectively."
msgstr ""

#: ../../library/typing.rst:2351
msgid ""
"Keys marked with :data:`Required` will always appear in "
"``__required_keys__`` and keys marked with :data:`NotRequired` will always "
"appear in ``__optional_keys__``."
msgstr ""

#: ../../library/typing.rst:2354
msgid ""
"For backwards compatibility with Python 3.10 and below, it is also possible "
"to use inheritance to declare both required and non-required keys in the "
"same ``TypedDict`` . This is done by declaring a ``TypedDict`` with one "
"value for the ``total`` argument and then inheriting from it in another "
"``TypedDict`` with a different value for ``total``:"
msgstr ""

#: ../../library/typing.rst:2379
msgid ""
"If ``from __future__ import annotations`` is used or if annotations are "
"given as strings, annotations are not evaluated when the ``TypedDict`` is "
"defined. Therefore, the runtime introspection that ``__required_keys__`` and "
"``__optional_keys__`` rely on may not work properly, and the values of the "
"attributes may be incorrect."
msgstr ""

#: ../../library/typing.rst:2385
msgid ""
"See :pep:`589` for more examples and detailed rules of using ``TypedDict``."
msgstr ""

#: ../../library/typing.rst:2389
msgid ""
"Added support for marking individual keys as :data:`Required` or :data:"
"`NotRequired`. See :pep:`655`."
msgstr ""

#: ../../library/typing.rst:2393
msgid "Added support for generic ``TypedDict``\\ s."
msgstr "Adicionado suporte para ``TypedDict``\\ s genéricos."

#: ../../library/typing.rst:2397
msgid "Protocols"
msgstr "Protocolos"

#: ../../library/typing.rst:2399
msgid ""
"The following protocols are provided by the typing module. All are decorated "
"with :func:`@runtime_checkable <runtime_checkable>`."
msgstr ""

#: ../../library/typing.rst:2404
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr ""

#: ../../library/typing.rst:2409
msgid "An ABC with one abstract method ``__bytes__``."
msgstr ""

#: ../../library/typing.rst:2413
msgid "An ABC with one abstract method ``__complex__``."
msgstr ""

#: ../../library/typing.rst:2417
msgid "An ABC with one abstract method ``__float__``."
msgstr ""

#: ../../library/typing.rst:2421
msgid "An ABC with one abstract method ``__index__``."
msgstr ""

#: ../../library/typing.rst:2427
msgid "An ABC with one abstract method ``__int__``."
msgstr ""

#: ../../library/typing.rst:2431
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr ""

#: ../../library/typing.rst:2435
msgid "ABCs for working with IO"
msgstr "ABCs para trabalhar com IO"

#: ../../library/typing.rst:2441
msgid ""
"Generic type ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`."
msgstr ""

#: ../../library/typing.rst:2447
msgid "Functions and decorators"
msgstr "Funções e decoradores"

#: ../../library/typing.rst:2451
msgid "Cast a value to a type."
msgstr "Define um valor para um tipo."

#: ../../library/typing.rst:2453
msgid ""
"This returns the value unchanged.  To the type checker this signals that the "
"return value has the designated type, but at runtime we intentionally don't "
"check anything (we want this to be as fast as possible)."
msgstr ""

#: ../../library/typing.rst:2460
msgid ""
"Ask a static type checker to confirm that *val* has an inferred type of "
"*typ*."
msgstr ""

#: ../../library/typing.rst:2462
msgid ""
"At runtime this does nothing: it returns the first argument unchanged with "
"no checks or side effects, no matter the actual type of the argument."
msgstr ""

#: ../../library/typing.rst:2465
msgid ""
"When a static type checker encounters a call to ``assert_type()``, it emits "
"an error if the value is not of the specified type::"
msgstr ""

#: ../../library/typing.rst:2472
msgid ""
"This function is useful for ensuring the type checker's understanding of a "
"script is in line with the developer's intentions::"
msgstr ""

#: ../../library/typing.rst:2486
msgid ""
"Ask a static type checker to confirm that a line of code is unreachable."
msgstr ""

#: ../../library/typing.rst:2488
msgid "Example::"
msgstr "Exemplo::"

#: ../../library/typing.rst:2499
msgid ""
"Here, the annotations allow the type checker to infer that the last case can "
"never execute, because ``arg`` is either an :class:`int` or a :class:`str`, "
"and both options are covered by earlier cases."
msgstr ""

#: ../../library/typing.rst:2504
msgid ""
"If a type checker finds that a call to ``assert_never()`` is reachable, it "
"will emit an error. For example, if the type annotation for ``arg`` was "
"instead ``int | str | float``, the type checker would emit an error pointing "
"out that ``unreachable`` is of type :class:`float`. For a call to "
"``assert_never`` to pass type checking, the inferred type of the argument "
"passed in must be the bottom type, :data:`Never`, and nothing else."
msgstr ""

#: ../../library/typing.rst:2512
msgid "At runtime, this throws an exception when called."
msgstr ""

#: ../../library/typing.rst:2515
msgid ""
"`Unreachable Code and Exhaustiveness Checking <https://typing.readthedocs.io/"
"en/latest/source/unreachable.html>`__ has more information about "
"exhaustiveness checking with static typing."
msgstr ""

#: ../../library/typing.rst:2523
msgid "Ask a static type checker to reveal the inferred type of an expression."
msgstr ""

#: ../../library/typing.rst:2525
msgid ""
"When a static type checker encounters a call to this function, it emits a "
"diagnostic with the inferred type of the argument. For example::"
msgstr ""

#: ../../library/typing.rst:2531
msgid ""
"This can be useful when you want to debug how your type checker handles a "
"particular piece of code."
msgstr ""

#: ../../library/typing.rst:2534
msgid ""
"At runtime, this function prints the runtime type of its argument to :data:"
"`sys.stderr` and returns the argument unchanged (allowing the call to be "
"used within an expression)::"
msgstr ""

#: ../../library/typing.rst:2541
msgid ""
"Note that the runtime type may be different from (more or less specific "
"than) the type statically inferred by a type checker."
msgstr ""

#: ../../library/typing.rst:2544
msgid ""
"Most type checkers support ``reveal_type()`` anywhere, even if the name is "
"not imported from ``typing``. Importing the name from ``typing``, however, "
"allows your code to run without runtime errors and communicates intent more "
"clearly."
msgstr ""

#: ../../library/typing.rst:2555
msgid ""
"Decorator to mark an object as providing :func:`dataclass <dataclasses."
"dataclass>`-like behavior."
msgstr ""

#: ../../library/typing.rst:2558
msgid ""
"``dataclass_transform`` may be used to decorate a class, metaclass, or a "
"function that is itself a decorator. The presence of "
"``@dataclass_transform()`` tells a static type checker that the decorated "
"object performs runtime \"magic\" that transforms a class in a similar way "
"to :func:`@dataclasses.dataclass <dataclasses.dataclass>`."
msgstr ""

#: ../../library/typing.rst:2565
msgid "Example usage with a decorator function:"
msgstr ""

#: ../../library/typing.rst:2579
msgid "On a base class::"
msgstr ""

#: ../../library/typing.rst:2588
msgid "On a metaclass::"
msgstr ""

#: ../../library/typing.rst:2599
msgid ""
"The ``CustomerModel`` classes defined above will be treated by type checkers "
"similarly to classes created with :func:`@dataclasses.dataclass <dataclasses."
"dataclass>`. For example, type checkers will assume these classes have "
"``__init__`` methods that accept ``id`` and ``name``."
msgstr ""

#: ../../library/typing.rst:2605
msgid ""
"The decorated class, metaclass, or function may accept the following bool "
"arguments which type checkers will assume have the same effect as they would "
"have on the :func:`@dataclasses.dataclass<dataclasses.dataclass>` decorator: "
"``init``, ``eq``, ``order``, ``unsafe_hash``, ``frozen``, ``match_args``, "
"``kw_only``, and ``slots``. It must be possible for the value of these "
"arguments (``True`` or ``False``) to be statically evaluated."
msgstr ""

#: ../../library/typing.rst:2613
msgid ""
"The arguments to the ``dataclass_transform`` decorator can be used to "
"customize the default behaviors of the decorated class, metaclass, or "
"function:"
msgstr ""

#: ../../library/typing.rst:0
msgid "Parameters"
msgstr "Parâmetros"

#: ../../library/typing.rst:2617
msgid ""
"Indicates whether the ``eq`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``True``."
msgstr ""

#: ../../library/typing.rst:2622
msgid ""
"Indicates whether the ``order`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""

#: ../../library/typing.rst:2627
msgid ""
"Indicates whether the ``kw_only`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""

#: ../../library/typing.rst:2632
msgid ""
"Indicates whether the ``frozen`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``.  .. "
"versionadded:: 3.12"
msgstr ""

#: ../../library/typing.rst:2633
msgid ""
"Indicates whether the ``frozen`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""

#: ../../library/typing.rst:2639
msgid ""
"Specifies a static list of supported classes or functions that describe "
"fields, similar to :func:`dataclasses.field`. Defaults to ``()``."
msgstr ""

#: ../../library/typing.rst:2645
msgid ""
"Arbitrary other keyword arguments are accepted in order to allow for "
"possible future extensions."
msgstr ""

#: ../../library/typing.rst:2649
msgid ""
"Type checkers recognize the following optional parameters on field "
"specifiers:"
msgstr ""

#: ../../library/typing.rst:2652
msgid "**Recognised parameters for field specifiers**"
msgstr ""

#: ../../library/typing.rst:2656
msgid "Parameter name"
msgstr "Nome do parâmetro"

#: ../../library/typing.rst:2657
msgid "Description"
msgstr "Descrição"

#: ../../library/typing.rst:2658
msgid "``init``"
msgstr "``init``"

#: ../../library/typing.rst:2659
msgid ""
"Indicates whether the field should be included in the synthesized "
"``__init__`` method. If unspecified, ``init`` defaults to ``True``."
msgstr ""

#: ../../library/typing.rst:2662
msgid "``default``"
msgstr "``default``"

#: ../../library/typing.rst:2663
msgid "Provides the default value for the field."
msgstr ""

#: ../../library/typing.rst:2664
msgid "``default_factory``"
msgstr ""

#: ../../library/typing.rst:2665
msgid ""
"Provides a runtime callback that returns the default value for the field. If "
"neither ``default`` nor ``default_factory`` are specified, the field is "
"assumed to have no default value and must be provided a value when the class "
"is instantiated."
msgstr ""

#: ../../library/typing.rst:2670
msgid "``factory``"
msgstr ""

#: ../../library/typing.rst:2671
msgid "An alias for the ``default_factory`` parameter on field specifiers."
msgstr ""

#: ../../library/typing.rst:2672
msgid "``kw_only``"
msgstr "``kw_only``"

#: ../../library/typing.rst:2673
msgid ""
"Indicates whether the field should be marked as keyword-only. If ``True``, "
"the field will be keyword-only. If ``False``, it will not be keyword-only. "
"If unspecified, the value of the ``kw_only`` parameter on the object "
"decorated with ``dataclass_transform`` will be used, or if that is "
"unspecified, the value of ``kw_only_default`` on ``dataclass_transform`` "
"will be used."
msgstr ""

#: ../../library/typing.rst:2679
msgid "``alias``"
msgstr ""

#: ../../library/typing.rst:2680
msgid ""
"Provides an alternative name for the field. This alternative name is used in "
"the synthesized ``__init__`` method."
msgstr ""

#: ../../library/typing.rst:2683
msgid ""
"At runtime, this decorator records its arguments in the "
"``__dataclass_transform__`` attribute on the decorated object. It has no "
"other runtime effect."
msgstr ""

#: ../../library/typing.rst:2687
msgid "See :pep:`681` for more details."
msgstr "Veja :pep:`681` para mais detalhes."

#: ../../library/typing.rst:2695
msgid "Decorator for creating overloaded functions and methods."
msgstr ""

#: ../../library/typing.rst:2697
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one non-"
"``@overload``-decorated definition (for the same function/method)."
msgstr ""

#: ../../library/typing.rst:2702
msgid ""
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition. The non-``@overload``-decorated definition, meanwhile, will be "
"used at runtime but should be ignored by a type checker.  At runtime, "
"calling an ``@overload``-decorated function directly will raise :exc:"
"`NotImplementedError`."
msgstr ""

#: ../../library/typing.rst:2710
msgid ""
"An example of overload that gives a more precise type than can be expressed "
"using a union or a type variable:"
msgstr ""

#: ../../library/typing.rst:2727
msgid ""
"See :pep:`484` for more details and comparison with other typing semantics."
msgstr ""

#: ../../library/typing.rst:2729
msgid ""
"Overloaded functions can now be introspected at runtime using :func:"
"`get_overloads`."
msgstr ""

#: ../../library/typing.rst:2736
msgid ""
"Return a sequence of :func:`@overload <overload>`-decorated definitions for "
"*func*."
msgstr ""

#: ../../library/typing.rst:2739
msgid ""
"*func* is the function object for the implementation of the overloaded "
"function. For example, given the definition of ``process`` in the "
"documentation for :func:`@overload <overload>`, ``get_overloads(process)`` "
"will return a sequence of three function objects for the three defined "
"overloads. If called on a function with no overloads, ``get_overloads()`` "
"returns an empty sequence."
msgstr ""

#: ../../library/typing.rst:2746
msgid ""
"``get_overloads()`` can be used for introspecting an overloaded function at "
"runtime."
msgstr ""

#: ../../library/typing.rst:2754
msgid "Clear all registered overloads in the internal registry."
msgstr ""

#: ../../library/typing.rst:2756
msgid "This can be used to reclaim the memory used by the registry."
msgstr ""

#: ../../library/typing.rst:2763
msgid "Decorator to indicate final methods and final classes."
msgstr ""

#: ../../library/typing.rst:2765
msgid ""
"Decorating a method with ``@final`` indicates to a type checker that the "
"method cannot be overridden in a subclass. Decorating a class with "
"``@final`` indicates that it cannot be subclassed."
msgstr ""

#: ../../library/typing.rst:2790
msgid ""
"The decorator will now attempt to set a ``__final__`` attribute to ``True`` "
"on the decorated object. Thus, a check like ``if getattr(obj, \"__final__\", "
"False)`` can be used at runtime to determine whether an object ``obj`` has "
"been marked as final. If the decorated object does not support setting "
"attributes, the decorator returns the object unchanged without raising an "
"exception."
msgstr ""

#: ../../library/typing.rst:2801
msgid "Decorator to indicate that annotations are not type hints."
msgstr ""

#: ../../library/typing.rst:2803
msgid ""
"This works as a class or function :term:`decorator`.  With a class, it "
"applies recursively to all methods and classes defined in that class (but "
"not to methods defined in its superclasses or subclasses). Type checkers "
"will ignore all annotations in a function or class with this decorator."
msgstr ""

#: ../../library/typing.rst:2809
msgid "``@no_type_check`` mutates the decorated object in place."
msgstr ""

#: ../../library/typing.rst:2813
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr ""

#: ../../library/typing.rst:2815
msgid ""
"This wraps the decorator with something that wraps the decorated function "
"in :func:`no_type_check`."
msgstr ""

#: ../../library/typing.rst:2821
msgid ""
"Decorator to indicate that a method in a subclass is intended to override a "
"method or attribute in a superclass."
msgstr ""

#: ../../library/typing.rst:2824
msgid ""
"Type checkers should emit an error if a method decorated with ``@override`` "
"does not, in fact, override anything. This helps prevent bugs that may occur "
"when a base class is changed without an equivalent change to a child class."
msgstr ""

#: ../../library/typing.rst:2846
msgid "There is no runtime checking of this property."
msgstr ""

#: ../../library/typing.rst:2848
msgid ""
"The decorator will attempt to set an ``__override__`` attribute to ``True`` "
"on the decorated object. Thus, a check like ``if getattr(obj, "
"\"__override__\", False)`` can be used at runtime to determine whether an "
"object ``obj`` has been marked as an override.  If the decorated object does "
"not support setting attributes, the decorator returns the object unchanged "
"without raising an exception."
msgstr ""

#: ../../library/typing.rst:2855
msgid "See :pep:`698` for more details."
msgstr "Consulte :pep:`698` para obter mais detalhes."

#: ../../library/typing.rst:2862
msgid "Decorator to mark a class or function as unavailable at runtime."
msgstr ""

#: ../../library/typing.rst:2864
msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr ""

#: ../../library/typing.rst:2875
msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr ""

#: ../../library/typing.rst:2879
msgid "Introspection helpers"
msgstr ""

#: ../../library/typing.rst:2883
msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr ""

#: ../../library/typing.rst:2886
msgid ""
"This is often the same as ``obj.__annotations__``. In addition, forward "
"references encoded as string literals are handled by evaluating them in "
"``globals``, ``locals`` and (where applicable) :ref:`type parameter <type-"
"params>` namespaces. For a class ``C``, return a dictionary constructed by "
"merging all the ``__annotations__`` along ``C.__mro__`` in reverse order."
msgstr ""

#: ../../library/typing.rst:2894
msgid ""
"The function recursively replaces all ``Annotated[T, ...]`` with ``T``, "
"unless ``include_extras`` is set to ``True`` (see :class:`Annotated` for "
"more information). For example:"
msgstr ""

#: ../../library/typing.rst:2911
msgid ""
":func:`get_type_hints` does not work with imported :ref:`type aliases <type-"
"aliases>` that include forward references. Enabling postponed evaluation of "
"annotations (:pep:`563`) may remove the need for most forward references."
msgstr ""

#: ../../library/typing.rst:2916
msgid ""
"Added ``include_extras`` parameter as part of :pep:`593`. See the "
"documentation on :data:`Annotated` for more information."
msgstr ""

#: ../../library/typing.rst:2920
msgid ""
"Previously, ``Optional[t]`` was added for function and method annotations if "
"a default value equal to ``None`` was set. Now the annotation is returned "
"unchanged."
msgstr ""

#: ../../library/typing.rst:2927
msgid ""
"Get the unsubscripted version of a type: for a typing object of the form "
"``X[Y, Z, ...]`` return ``X``."
msgstr ""

#: ../../library/typing.rst:2930
msgid ""
"If ``X`` is a typing-module alias for a builtin or :mod:`collections` class, "
"it will be normalized to the original class. If ``X`` is an instance of :"
"class:`ParamSpecArgs` or :class:`ParamSpecKwargs`, return the underlying :"
"class:`ParamSpec`. Return ``None`` for unsupported objects."
msgstr ""

#: ../../library/typing.rst:2936 ../../library/typing.rst:2959
msgid "Examples:"
msgstr "Exemplos:"

#: ../../library/typing.rst:2951
msgid ""
"Get type arguments with all substitutions performed: for a typing object of "
"the form ``X[Y, Z, ...]`` return ``(Y, Z, ...)``."
msgstr ""

#: ../../library/typing.rst:2954
msgid ""
"If ``X`` is a union or :class:`Literal` contained in another generic type, "
"the order of ``(Y, Z, ...)`` may be different from the order of the original "
"arguments ``[Y, Z, ...]`` due to type caching. Return ``()`` for unsupported "
"objects."
msgstr ""

#: ../../library/typing.rst:2971
msgid "Check if a type is a :class:`TypedDict`."
msgstr ""

#: ../../library/typing.rst:2992
msgid ""
"Class used for internal typing representation of string forward references."
msgstr ""

#: ../../library/typing.rst:2994
msgid ""
"For example, ``List[\"SomeClass\"]`` is implicitly transformed into "
"``List[ForwardRef(\"SomeClass\")]``.  ``ForwardRef`` should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""

#: ../../library/typing.rst:2999
msgid ""
":pep:`585` generic types such as ``list[\"SomeClass\"]`` will not be "
"implicitly transformed into ``list[ForwardRef(\"SomeClass\")]`` and thus "
"will not automatically resolve to ``list[SomeClass]``."
msgstr ""

#: ../../library/typing.rst:3006
msgid "Constant"
msgstr "Constante"

#: ../../library/typing.rst:3010
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It is ``False`` at runtime."
msgstr ""

#: ../../library/typing.rst:3021
msgid ""
"The first type annotation must be enclosed in quotes, making it a \"forward "
"reference\", to hide the ``expensive_mod`` reference from the interpreter "
"runtime.  Type annotations for local variables are not evaluated, so the "
"second annotation does not need to be enclosed in quotes."
msgstr ""

#: ../../library/typing.rst:3028
msgid ""
"If ``from __future__ import annotations`` is used, annotations are not "
"evaluated at function definition time. Instead, they are stored as strings "
"in ``__annotations__``. This makes it unnecessary to use quotes around the "
"annotation (see :pep:`563`)."
msgstr ""

#: ../../library/typing.rst:3040
msgid "Deprecated aliases"
msgstr ""

#: ../../library/typing.rst:3042
msgid ""
"This module defines several deprecated aliases to pre-existing standard "
"library classes. These were originally included in the typing module in "
"order to support parameterizing these generic classes using ``[]``. However, "
"the aliases became redundant in Python 3.9 when the corresponding pre-"
"existing classes were enhanced to support ``[]`` (see :pep:`585`)."
msgstr ""

#: ../../library/typing.rst:3049
msgid ""
"The redundant types are deprecated as of Python 3.9. However, while the "
"aliases may be removed at some point, removal of these aliases is not "
"currently planned. As such, no deprecation warnings are currently issued by "
"the interpreter for these aliases."
msgstr ""

#: ../../library/typing.rst:3054
msgid ""
"If at some point it is decided to remove these deprecated aliases, a "
"deprecation warning will be issued by the interpreter for at least two "
"releases prior to removal. The aliases are guaranteed to remain in the "
"typing module without deprecation warnings until at least Python 3.14."
msgstr ""

#: ../../library/typing.rst:3059
msgid ""
"Type checkers are encouraged to flag uses of the deprecated types if the "
"program they are checking targets a minimum Python version of 3.9 or newer."
msgstr ""

#: ../../library/typing.rst:3065
msgid "Aliases to built-in types"
msgstr ""

#: ../../library/typing.rst:3069
msgid "Deprecated alias to :class:`dict`."
msgstr ""

#: ../../library/typing.rst:3071
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`Mapping` rather than to use :class:`dict` "
"or :class:`!typing.Dict`."
msgstr ""

#: ../../library/typing.rst:3075 ../../library/typing.rst:3314
msgid "This type can be used as follows::"
msgstr ""

#: ../../library/typing.rst:3080
msgid ""
":class:`builtins.dict <dict>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3086
msgid "Deprecated alias to :class:`list`."
msgstr ""

#: ../../library/typing.rst:3088
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`Sequence` or :class:`Iterable` rather than "
"to use :class:`list` or :class:`!typing.List`."
msgstr ""

#: ../../library/typing.rst:3092
msgid "This type may be used as follows::"
msgstr ""

#: ../../library/typing.rst:3100
msgid ""
":class:`builtins.list <list>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3106
msgid "Deprecated alias to :class:`builtins.set <set>`."
msgstr ""

#: ../../library/typing.rst:3108
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`AbstractSet` rather than to use :class:`set` "
"or :class:`!typing.Set`."
msgstr ""

#: ../../library/typing.rst:3112
msgid ""
":class:`builtins.set <set>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3118
msgid "Deprecated alias to :class:`builtins.frozenset <frozenset>`."
msgstr ""

#: ../../library/typing.rst:3120
msgid ""
":class:`builtins.frozenset <frozenset>` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3127
msgid "Deprecated alias for :class:`tuple`."
msgstr ""

#: ../../library/typing.rst:3129
msgid ""
":class:`tuple` and ``Tuple`` are special-cased in the type system; see :ref:"
"`annotating-tuples` for more details."
msgstr ""

#: ../../library/typing.rst:3132
msgid ""
":class:`builtins.tuple <tuple>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3138
msgid "Deprecated alias to :class:`type`."
msgstr ""

#: ../../library/typing.rst:3140
msgid ""
"See :ref:`type-of-class-objects` for details on using :class:`type` or "
"``typing.Type`` in type annotations."
msgstr ""

#: ../../library/typing.rst:3145
msgid ""
":class:`builtins.type <type>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3152
msgid "Aliases to types in :mod:`collections`"
msgstr ""

#: ../../library/typing.rst:3156
msgid "Deprecated alias to :class:`collections.defaultdict`."
msgstr ""

#: ../../library/typing.rst:3160
msgid ""
":class:`collections.defaultdict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3166
msgid "Deprecated alias to :class:`collections.OrderedDict`."
msgstr ""

#: ../../library/typing.rst:3170
msgid ""
":class:`collections.OrderedDict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3176
msgid "Deprecated alias to :class:`collections.ChainMap`."
msgstr ""

#: ../../library/typing.rst:3180
msgid ""
":class:`collections.ChainMap` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3186
msgid "Deprecated alias to :class:`collections.Counter`."
msgstr ""

#: ../../library/typing.rst:3190
msgid ""
":class:`collections.Counter` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3196
msgid "Deprecated alias to :class:`collections.deque`."
msgstr ""

#: ../../library/typing.rst:3200
msgid ""
":class:`collections.deque` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3207
msgid "Aliases to other concrete types"
msgstr ""

#: ../../library/typing.rst:3212
msgid ""
"The ``typing.io`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr ""

#: ../../library/typing.rst:3216
msgid ""
"Deprecated aliases corresponding to the return types from :func:`re.compile` "
"and :func:`re.match`."
msgstr ""

#: ../../library/typing.rst:3219
msgid ""
"These types (and the corresponding functions) are generic over :data:"
"`AnyStr`. ``Pattern`` can be specialised as ``Pattern[str]`` or "
"``Pattern[bytes]``; ``Match`` can be specialised as ``Match[str]`` or "
"``Match[bytes]``."
msgstr ""

#: ../../library/typing.rst:3227
msgid ""
"The ``typing.re`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr ""

#: ../../library/typing.rst:3228
msgid ""
"Classes ``Pattern`` and ``Match`` from :mod:`re` now support ``[]``. See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3234
msgid "Deprecated alias for :class:`str`."
msgstr ""

#: ../../library/typing.rst:3236
msgid ""
"``Text`` is provided to supply a forward compatible path for Python 2 code: "
"in Python 2, ``Text`` is an alias for ``unicode``."
msgstr ""

#: ../../library/typing.rst:3240
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr ""

#: ../../library/typing.rst:3248
msgid ""
"Python 2 is no longer supported, and most type checkers also no longer "
"support type checking Python 2 code. Removal of the alias is not currently "
"planned, but users are encouraged to use :class:`str` instead of ``Text``."
msgstr ""

#: ../../library/typing.rst:3258
msgid "Aliases to container ABCs in :mod:`collections.abc`"
msgstr ""

#: ../../library/typing.rst:3262
msgid "Deprecated alias to :class:`collections.abc.Set`."
msgstr ""

#: ../../library/typing.rst:3264
msgid ""
":class:`collections.abc.Set` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3270
msgid ""
"This type represents the types :class:`bytes`, :class:`bytearray`, and :"
"class:`memoryview` of byte sequences."
msgstr ""

#: ../../library/typing.rst:3274
msgid ""
"Prefer :class:`collections.abc.Buffer`, or a union like ``bytes | bytearray "
"| memoryview``."
msgstr ""

#: ../../library/typing.rst:3278
msgid "Deprecated alias to :class:`collections.abc.Collection`."
msgstr ""

#: ../../library/typing.rst:3282
msgid ""
":class:`collections.abc.Collection` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3288
msgid "Deprecated alias to :class:`collections.abc.Container`."
msgstr ""

#: ../../library/typing.rst:3290
msgid ""
":class:`collections.abc.Container` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3296
msgid "Deprecated alias to :class:`collections.abc.ItemsView`."
msgstr ""

#: ../../library/typing.rst:3298
msgid ""
":class:`collections.abc.ItemsView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3304
msgid "Deprecated alias to :class:`collections.abc.KeysView`."
msgstr ""

#: ../../library/typing.rst:3306
msgid ""
":class:`collections.abc.KeysView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3312
msgid "Deprecated alias to :class:`collections.abc.Mapping`."
msgstr ""

#: ../../library/typing.rst:3319
msgid ""
":class:`collections.abc.Mapping` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3325
msgid "Deprecated alias to :class:`collections.abc.MappingView`."
msgstr ""

#: ../../library/typing.rst:3327
msgid ""
":class:`collections.abc.MappingView` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3333
msgid "Deprecated alias to :class:`collections.abc.MutableMapping`."
msgstr ""

#: ../../library/typing.rst:3335
msgid ""
":class:`collections.abc.MutableMapping` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3342
msgid "Deprecated alias to :class:`collections.abc.MutableSequence`."
msgstr ""

#: ../../library/typing.rst:3344
msgid ""
":class:`collections.abc.MutableSequence` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3351
msgid "Deprecated alias to :class:`collections.abc.MutableSet`."
msgstr ""

#: ../../library/typing.rst:3353
msgid ""
":class:`collections.abc.MutableSet` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3359
msgid "Deprecated alias to :class:`collections.abc.Sequence`."
msgstr ""

#: ../../library/typing.rst:3361
msgid ""
":class:`collections.abc.Sequence` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3367
msgid "Deprecated alias to :class:`collections.abc.ValuesView`."
msgstr ""

#: ../../library/typing.rst:3369
msgid ""
":class:`collections.abc.ValuesView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3376
msgid "Aliases to asynchronous ABCs in :mod:`collections.abc`"
msgstr ""

#: ../../library/typing.rst:3380
msgid "Deprecated alias to :class:`collections.abc.Coroutine`."
msgstr ""

#: ../../library/typing.rst:3382
msgid ""
"The variance and order of type variables correspond to those of :class:"
"`Generator`, for example::"
msgstr ""

#: ../../library/typing.rst:3393
msgid ""
":class:`collections.abc.Coroutine` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3399
msgid "Deprecated alias to :class:`collections.abc.AsyncGenerator`."
msgstr ""

#: ../../library/typing.rst:3401
msgid ""
"An async generator can be annotated by the generic type "
"``AsyncGenerator[YieldType, SendType]``. For example::"
msgstr ""

#: ../../library/typing.rst:3410
msgid ""
"Unlike normal generators, async generators cannot return a value, so there "
"is no ``ReturnType`` type parameter. As with :class:`Generator`, the "
"``SendType`` behaves contravariantly."
msgstr ""

#: ../../library/typing.rst:3414
msgid ""
"If your generator will only yield values, set the ``SendType`` to ``None``::"
msgstr ""

#: ../../library/typing.rst:3422
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``AsyncIterable[YieldType]`` or ``AsyncIterator[YieldType]``::"
msgstr ""

#: ../../library/typing.rst:3432
msgid ""
":class:`collections.abc.AsyncGenerator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3439
msgid "Deprecated alias to :class:`collections.abc.AsyncIterable`."
msgstr ""

#: ../../library/typing.rst:3443
msgid ""
":class:`collections.abc.AsyncIterable` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3449
msgid "Deprecated alias to :class:`collections.abc.AsyncIterator`."
msgstr ""

#: ../../library/typing.rst:3453
msgid ""
":class:`collections.abc.AsyncIterator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3459
msgid "Deprecated alias to :class:`collections.abc.Awaitable`."
msgstr ""

#: ../../library/typing.rst:3463
msgid ""
":class:`collections.abc.Awaitable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3470
msgid "Aliases to other ABCs in :mod:`collections.abc`"
msgstr ""

#: ../../library/typing.rst:3474
msgid "Deprecated alias to :class:`collections.abc.Iterable`."
msgstr ""

#: ../../library/typing.rst:3476
msgid ""
":class:`collections.abc.Iterable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3482
msgid "Deprecated alias to :class:`collections.abc.Iterator`."
msgstr ""

#: ../../library/typing.rst:3484
msgid ""
":class:`collections.abc.Iterator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3490
msgid "Deprecated alias to :class:`collections.abc.Callable`."
msgstr ""

#: ../../library/typing.rst:3492
msgid ""
"See :ref:`annotating-callables` for details on how to use :class:"
"`collections.abc.Callable` and ``typing.Callable`` in type annotations."
msgstr ""

#: ../../library/typing.rst:3495
msgid ""
":class:`collections.abc.Callable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3505
msgid "Deprecated alias to :class:`collections.abc.Generator`."
msgstr ""

#: ../../library/typing.rst:3507
msgid ""
"A generator can be annotated by the generic type ``Generator[YieldType, "
"SendType, ReturnType]``. For example::"
msgstr ""

#: ../../library/typing.rst:3516
msgid ""
"Note that unlike many other generics in the typing module, the ``SendType`` "
"of :class:`Generator` behaves contravariantly, not covariantly or "
"invariantly."
msgstr ""

#: ../../library/typing.rst:3520
msgid ""
"If your generator will only yield values, set the ``SendType`` and "
"``ReturnType`` to ``None``::"
msgstr ""

#: ../../library/typing.rst:3528
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``Iterable[YieldType]`` or ``Iterator[YieldType]``::"
msgstr ""

#: ../../library/typing.rst:3536
msgid ""
":class:`collections.abc.Generator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3542
msgid "Deprecated alias to :class:`collections.abc.Hashable`."
msgstr ""

#: ../../library/typing.rst:3544
msgid "Use :class:`collections.abc.Hashable` directly instead."
msgstr ""

#: ../../library/typing.rst:3549
msgid "Deprecated alias to :class:`collections.abc.Reversible`."
msgstr ""

#: ../../library/typing.rst:3551
msgid ""
":class:`collections.abc.Reversible` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3557
msgid "Deprecated alias to :class:`collections.abc.Sized`."
msgstr ""

#: ../../library/typing.rst:3559
msgid "Use :class:`collections.abc.Sized` directly instead."
msgstr ""

#: ../../library/typing.rst:3565
msgid "Aliases to :mod:`contextlib` ABCs"
msgstr ""

#: ../../library/typing.rst:3569
msgid "Deprecated alias to :class:`contextlib.AbstractContextManager`."
msgstr ""

#: ../../library/typing.rst:3573
msgid ""
":class:`contextlib.AbstractContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3580
msgid "Deprecated alias to :class:`contextlib.AbstractAsyncContextManager`."
msgstr ""

#: ../../library/typing.rst:3584
msgid ""
":class:`contextlib.AbstractAsyncContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3590
msgid "Deprecation Timeline of Major Features"
msgstr "Cronograma de Descontinuação dos Principais Recursos"

#: ../../library/typing.rst:3592
msgid ""
"Certain features in ``typing`` are deprecated and may be removed in a future "
"version of Python. The following table summarizes major deprecations for "
"your convenience. This is subject to change, and not all deprecations are "
"listed."
msgstr ""

#: ../../library/typing.rst:3599
msgid "Feature"
msgstr ""

#: ../../library/typing.rst:3600
msgid "Deprecated in"
msgstr "Descontinuado em"

#: ../../library/typing.rst:3601
msgid "Projected removal"
msgstr ""

#: ../../library/typing.rst:3602
msgid "PEP/issue"
msgstr ""

#: ../../library/typing.rst:3603
msgid "``typing.io`` and ``typing.re`` submodules"
msgstr ""

#: ../../library/typing.rst:3604
msgid "3.8"
msgstr "3.8"

#: ../../library/typing.rst:3605
msgid "3.13"
msgstr "3.13"

#: ../../library/typing.rst:3606
msgid ":issue:`38291`"
msgstr ":issue:`38291`"

#: ../../library/typing.rst:3607
msgid "``typing`` versions of standard collections"
msgstr ""

#: ../../library/typing.rst:3608 ../../library/typing.rst:3612
msgid "3.9"
msgstr "3.9"

#: ../../library/typing.rst:3609
msgid "Undecided (see :ref:`deprecated-aliases` for more information)"
msgstr ""

#: ../../library/typing.rst:3610
msgid ":pep:`585`"
msgstr ":pep:`585`"

#: ../../library/typing.rst:3611
msgid ":class:`typing.ByteString`"
msgstr ""

#: ../../library/typing.rst:3613
msgid "3.14"
msgstr ""

#: ../../library/typing.rst:3614
msgid ":gh:`91896`"
msgstr ""

#: ../../library/typing.rst:3615
msgid ":data:`typing.Text`"
msgstr ""

#: ../../library/typing.rst:3616
msgid "3.11"
msgstr "3.11"

#: ../../library/typing.rst:3617 ../../library/typing.rst:3621
#: ../../library/typing.rst:3625
msgid "Undecided"
msgstr ""

#: ../../library/typing.rst:3618
msgid ":gh:`92332`"
msgstr ":gh:`92332`"

#: ../../library/typing.rst:3619
msgid ":class:`typing.Hashable` and :class:`typing.Sized`"
msgstr ""

#: ../../library/typing.rst:3620 ../../library/typing.rst:3624
msgid "3.12"
msgstr ""

#: ../../library/typing.rst:3622
msgid ":gh:`94309`"
msgstr ""

#: ../../library/typing.rst:3623
msgid ":data:`typing.TypeAlias`"
msgstr ""

#: ../../library/typing.rst:3626
msgid ":pep:`695`"
msgstr ""
