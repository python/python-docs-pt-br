# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-11 16:41+0000\n"
"PO-Revision-Date: 2023-05-24 02:12+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/asyncio-task.rst:6
msgid "Coroutines and Tasks"
msgstr "Corrotinas e Tarefas"

#: ../../library/asyncio-task.rst:8
msgid ""
"This section outlines high-level asyncio APIs to work with coroutines and "
"Tasks."
msgstr ""
"Esta seção descreve APIs assíncronas de alto nível para trabalhar com "
"corrotinas e tarefas."

#: ../../library/asyncio-task.rst:19 ../../library/asyncio-task.rst:148
msgid "Coroutines"
msgstr "Corrotinas"

#: ../../library/asyncio-task.rst:21
msgid "**Source code:** :source:`Lib/asyncio/coroutines.py`"
msgstr "**Kod źródłowy:** :source:`Lib/asyncio/coroutines.py`"

#: ../../library/asyncio-task.rst:25
msgid ""
":term:`Coroutines <coroutine>` declared with the async/await syntax is the "
"preferred way of writing asyncio applications.  For example, the following "
"snippet of code prints \"hello\", waits 1 second, and then prints \"world\"::"
msgstr ""
":term:`Corrotinas <coroutine>` declaradas com a sintaxe async/await é a "
"forma preferida de escrever aplicações assíncronas. Por exemplo, o seguinte "
"trecho de código imprime \"hello\", espera 1 segundo, e então imprime "
"\"world\"::"

#: ../../library/asyncio-task.rst:41
msgid ""
"Note that simply calling a coroutine will not schedule it to be executed::"
msgstr ""
"Perceba que simplesmente chamar uma corrotina não irá agendá-la para ser "
"executada::"

#: ../../library/asyncio-task.rst:47
msgid "To actually run a coroutine, asyncio provides the following mechanisms:"
msgstr ""
"Для фактического запуска сопрограммы asyncio предоставляет следующие "
"механизмы:"

#: ../../library/asyncio-task.rst:49
msgid ""
"The :func:`asyncio.run` function to run the top-level entry point \"main()\" "
"function (see the above example.)"
msgstr ""
"A função :func:`asyncio.run` para executar a função \"main()\" do ponto de "
"entrada no nível mais alto (veja o exemplo acima.)"

#: ../../library/asyncio-task.rst:52
msgid ""
"Awaiting on a coroutine.  The following snippet of code will print \"hello\" "
"after waiting for 1 second, and then print \"world\" after waiting for "
"*another* 2 seconds::"
msgstr ""
"Aguardando uma corrotina. O seguinte trecho de código exibirá \"hello\" após "
"esperar por 1 segundo e, em seguida, exibirá \"world\" após esperar por "
"*outros* 2 segundos::"

#: ../../library/asyncio-task.rst:73
msgid "Expected output::"
msgstr "Resultado esperado::"

#: ../../library/asyncio-task.rst:80
msgid ""
"The :func:`asyncio.create_task` function to run coroutines concurrently as "
"asyncio :class:`Tasks <Task>`."
msgstr ""
"A função :func:`asyncio.create_task` para executar corrotinas "
"concorrentemente como :class:`Tasks <Task>` asyncio."

#: ../../library/asyncio-task.rst:83
msgid ""
"Let's modify the above example and run two ``say_after`` coroutines "
"*concurrently*::"
msgstr ""
"Vamos modificar o exemplo acima e executar duas corrotinas ``say_after`` "
"*concorrentemente*::"

#: ../../library/asyncio-task.rst:102
msgid ""
"Note that expected output now shows that the snippet runs 1 second faster "
"than before::"
msgstr ""
"Perceba que a saída esperada agora mostra que o trecho de código é executado "
"1 segundo mais rápido do que antes::"

#: ../../library/asyncio-task.rst:110
msgid ""
"The :class:`asyncio.TaskGroup` class provides a more modern alternative to :"
"func:`create_task`. Using this API, the last example becomes::"
msgstr ""
"Класс :class:`asyncio.TaskGroup` предоставляет более современную "
"альтернативу :func:`create_task`. Используя этот API, последний пример "
"становится::"

#: ../../library/asyncio-task.rst:128
msgid "The timing and output should be the same as for the previous version."
msgstr "Время и результат должны быть такими же, как и в предыдущей версии."

#: ../../library/asyncio-task.rst:130
msgid ":class:`asyncio.TaskGroup`."
msgstr ":class:`asyncio.TaskGroup`."

#: ../../library/asyncio-task.rst:137
msgid "Awaitables"
msgstr "Aguardáveis"

#: ../../library/asyncio-task.rst:139
msgid ""
"We say that an object is an **awaitable** object if it can be used in an :"
"keyword:`await` expression.  Many asyncio APIs are designed to accept "
"awaitables."
msgstr ""
"Dizemos que um objeto é um objeto **aguardável** se ele pode ser usado em "
"uma expressão :keyword:`await`. Muitas APIs asyncio são projetadas para "
"aceitar aguardáveis."

#: ../../library/asyncio-task.rst:143
msgid ""
"There are three main types of *awaitable* objects: **coroutines**, "
"**Tasks**, and **Futures**."
msgstr ""
"Existem três tipos principais de objetos *aguardáveis*: **corrotinas**, "
"**Tarefas**, e **Futuros**."

#: ../../library/asyncio-task.rst:149
msgid ""
"Python coroutines are *awaitables* and therefore can be awaited from other "
"coroutines::"
msgstr ""
"Corrotinas Python são *aguardáveis* e portanto podem ser aguardadas a partir "
"de outras corrotinas::"

#: ../../library/asyncio-task.rst:170
msgid ""
"In this documentation the term \"coroutine\" can be used for two closely "
"related concepts:"
msgstr ""
"Nesta documentação, o termo \"corrotina\" pode ser usado para dois conceitos "
"intimamente relacionados:"

#: ../../library/asyncio-task.rst:173
msgid "a *coroutine function*: an :keyword:`async def` function;"
msgstr "uma *função de corrotina*: uma função :keyword:`async def`;"

#: ../../library/asyncio-task.rst:175
msgid ""
"a *coroutine object*: an object returned by calling a *coroutine function*."
msgstr ""
"um *objeto de corrotina*: um objeto retornado ao chamar uma *função de "
"corrotina*."

#: ../../library/asyncio-task.rst:180
msgid "Tasks"
msgstr "Tarefas"

#: ../../library/asyncio-task.rst:181
msgid "*Tasks* are used to schedule coroutines *concurrently*."
msgstr "*Tarefas* são usadas para agendar corrotinas *concorrentemente*."

#: ../../library/asyncio-task.rst:183
msgid ""
"When a coroutine is wrapped into a *Task* with functions like :func:`asyncio."
"create_task` the coroutine is automatically scheduled to run soon::"
msgstr ""
"Quando uma corrotina é envolta em uma *tarefa* com funções como :func:"
"`asyncio.create_task`, a corrotina é automaticamente agendada para executar "
"em breve::"

#: ../../library/asyncio-task.rst:205
msgid "Futures"
msgstr "Futuros"

#: ../../library/asyncio-task.rst:206
msgid ""
"A :class:`Future` is a special **low-level** awaitable object that "
"represents an **eventual result** of an asynchronous operation."
msgstr ""
"Um :class:`Future` é um objeto aguardável especial de **baixo nível** que "
"representa um **resultado eventual** de uma operação assíncrona."

#: ../../library/asyncio-task.rst:209
msgid ""
"When a Future object is *awaited* it means that the coroutine will wait "
"until the Future is resolved in some other place."
msgstr ""
"Quando um objeto Future é *aguardado* isso significa que a corrotina irá "
"esperar até que o Future seja resolvido em algum outro local."

#: ../../library/asyncio-task.rst:212
msgid ""
"Future objects in asyncio are needed to allow callback-based code to be used "
"with async/await."
msgstr ""
"Objetos Future em asyncio são necessários para permitir que código baseado "
"em função de retorno seja utilizado com async/await."

#: ../../library/asyncio-task.rst:215
msgid ""
"Normally **there is no need** to create Future objects at the application "
"level code."
msgstr ""
"Normalmente **não existe necessidade** em criar objetos Future no nível de "
"código da aplicação."

#: ../../library/asyncio-task.rst:218
msgid ""
"Future objects, sometimes exposed by libraries and some asyncio APIs, can be "
"awaited::"
msgstr ""
"Objetos Future, algumas vezes expostos por bibliotecas e algumas APIs "
"asyncio, podem ser aguardados::"

#: ../../library/asyncio-task.rst:230
msgid ""
"A good example of a low-level function that returns a Future object is :meth:"
"`loop.run_in_executor`."
msgstr ""
"Um bom exemplo de uma função de baixo nível que retorna um objeto Future é :"
"meth:`loop.run_in_executor`."

#: ../../library/asyncio-task.rst:235
msgid "Creating Tasks"
msgstr "Criando Tarefas"

#: ../../library/asyncio-task.rst:237
msgid "**Source code:** :source:`Lib/asyncio/tasks.py`"
msgstr "**Kod źródłowy:** :source:`Lib/asyncio/tasks.py`"

#: ../../library/asyncio-task.rst:243
msgid ""
"Wrap the *coro* :ref:`coroutine <coroutine>` into a :class:`Task` and "
"schedule its execution.  Return the Task object."
msgstr ""
"Envolva a :ref:`corrotina <coroutine>` *coro* em uma :class:`Task` e agende "
"sua execução. Retorne o objeto Task."

#: ../../library/asyncio-task.rst:246
msgid ""
"If *name* is not ``None``, it is set as the name of the task using :meth:"
"`Task.set_name`."
msgstr ""
"Se *name* não for ``None``, ele é setado como o nome da tarefa usando :meth:"
"`Task.set_name`."

#: ../../library/asyncio-task.rst:249
msgid ""
"An optional keyword-only *context* argument allows specifying a custom :"
"class:`contextvars.Context` for the *coro* to run in. The current context "
"copy is created when no *context* is provided."
msgstr ""
"Необязательный аргумент *context*, содержащий только ключевые слова, "
"позволяет указать собственный :class:`contextvars.Context` для запуска "
"*coro*. Текущая копия контекста создается, когда *context* не указан."

#: ../../library/asyncio-task.rst:253
msgid ""
"The task is executed in the loop returned by :func:`get_running_loop`, :exc:"
"`RuntimeError` is raised if there is no running loop in current thread."
msgstr ""
"A tarefa é executada no laço e retornada por :func:`get_running_loop`, :exc:"
"`RuntimeError` é levantado se não existir nenhum loop na thread atual."

#: ../../library/asyncio-task.rst:259
msgid ""
":meth:`asyncio.TaskGroup.create_task` is a newer alternative that allows for "
"convenient waiting for a group of related tasks."
msgstr ""

#: ../../library/asyncio-task.rst:264
msgid ""
"Save a reference to the result of this function, to avoid a task "
"disappearing mid-execution. The event loop only keeps weak references to "
"tasks. A task that isn't referenced elsewhere may get garbage collected at "
"any time, even before it's done. For reliable \"fire-and-forget\" background "
"tasks, gather them in a collection::"
msgstr ""
"Mantenha uma referência para o resultado dessa função, evitando assim que "
"uma tarefa desapareça durante a execução. O laço de eventos mantém apenas "
"referências fracas para as tarefas. Uma tarefa que não é referenciada por "
"nada mais pode ser removida pelo coletor de lixo a qualquer momento, antes "
"mesmo da função ser finalizada. Para tarefas de segundo plano \"atire-e-"
"esqueça\", junte-as em uma coleção::"

#: ../../library/asyncio-task.rst:286 ../../library/asyncio-task.rst:1012
msgid "Added the *name* parameter."
msgstr "Adicionado o parâmetro *name*."

#: ../../library/asyncio-task.rst:289 ../../library/asyncio-task.rst:1019
msgid "Added the *context* parameter."
msgstr "Adicionado o parâmetro *context*."

#: ../../library/asyncio-task.rst:294
msgid "Task Cancellation"
msgstr "Отмена задачи"

#: ../../library/asyncio-task.rst:296
msgid ""
"Tasks can easily and safely be cancelled. When a task is cancelled, :exc:"
"`asyncio.CancelledError` will be raised in the task at the next opportunity."
msgstr ""
"Задачи можно легко и безопасно отменить. Когда задача отменяется, при "
"следующей возможности в задаче будет вызвано :exc:`asyncio.CancelledError`."

#: ../../library/asyncio-task.rst:300
msgid ""
"It is recommended that coroutines use ``try/finally`` blocks to robustly "
"perform clean-up logic. In case :exc:`asyncio.CancelledError` is explicitly "
"caught, it should generally be propagated when clean-up is complete. :exc:"
"`asyncio.CancelledError` directly subclasses :exc:`BaseException` so most "
"code will not need to be aware of it."
msgstr ""
"Рекомендуется, чтобы сопрограммы использовали блоки try/finally для "
"надежного выполнения логики очистки. В случае явного обнаружения :exc:"
"`asyncio.CancelledError`, его обычно следует распространять после завершения "
"очистки. :exc:`asyncio.CancelledError` напрямую является подклассом :exc:"
"`BaseException`, поэтому большинству кода не нужно будет об этом знать."

#: ../../library/asyncio-task.rst:306
msgid ""
"The asyncio components that enable structured concurrency, like :class:"
"`asyncio.TaskGroup` and :func:`asyncio.timeout`, are implemented using "
"cancellation internally and might misbehave if a coroutine swallows :exc:"
"`asyncio.CancelledError`. Similarly, user code should not generally call :"
"meth:`uncancel <asyncio.Task.uncancel>`. However, in cases when suppressing :"
"exc:`asyncio.CancelledError` is truly desired, it is necessary to also call "
"``uncancel()`` to completely remove the cancellation state."
msgstr ""
"Компоненты asyncio, обеспечивающие структурированный параллелизм, такие как :"
"class:`asyncio.TaskGroup` и :func:`asyncio.timeout`, реализуются с "
"использованием внутренней отмены и могут работать неправильно, если "
"сопрограмма проглотит :exc:`asyncio.CancelledError`. Аналогично, "
"пользовательский код обычно не должен вызывать :meth:`uncancel <asyncio.Task."
"uncancel>`. Однако в случаях, когда подавление :exc:`asyncio.CancelledError` "
"действительно желательно, необходимо также вызвать ``uncancel()``, чтобы "
"полностью удалить состояние отмены."

#: ../../library/asyncio-task.rst:318
msgid "Task Groups"
msgstr "Группы задач"

#: ../../library/asyncio-task.rst:320
msgid ""
"Task groups combine a task creation API with a convenient and reliable way "
"to wait for all tasks in the group to finish."
msgstr ""
"Группы задач сочетают в себе API создания задач с удобным и надежным "
"способом ожидания завершения всех задач в группе."

#: ../../library/asyncio-task.rst:325
msgid ""
"An :ref:`asynchronous context manager <async-context-managers>` holding a "
"group of tasks. Tasks can be added to the group using :meth:`create_task`. "
"All tasks are awaited when the context manager exits."
msgstr ""
":ref:`асинхронный контекстный менеджер <async-context-managers>`, содержащий "
"группу задач. Задачи можно добавлять в группу с помощью :meth:`create_task`. "
"Все задачи ожидаются после выхода из контекстного менеджера."

#: ../../library/asyncio-task.rst:334
msgid ""
"Create a task in this task group. The signature matches that of :func:"
"`asyncio.create_task`."
msgstr ""
"Создайте задачу в этой группе задач. Подпись соответствует подписи :func:"
"`asyncio.create_task`."

#: ../../library/asyncio-task.rst:337 ../../library/asyncio-task.rst:467
#: ../../library/asyncio-task.rst:595 ../../library/asyncio-task.rst:653
#: ../../library/asyncio-task.rst:679 ../../library/asyncio-task.rst:719
#: ../../library/asyncio-task.rst:815
msgid "Example::"
msgstr "Exemplo::"

#: ../../library/asyncio-task.rst:345
msgid ""
"The ``async with`` statement will wait for all tasks in the group to finish. "
"While waiting, new tasks may still be added to the group (for example, by "
"passing ``tg`` into one of the coroutines and calling ``tg.create_task()`` "
"in that coroutine). Once the last task has finished and the ``async with`` "
"block is exited, no new tasks may be added to the group."
msgstr ""
"Оператор ``async with`` будет ждать завершения всех задач в группе. Во время "
"ожидания в группу все равно можно добавлять новые задачи (например, передав "
"``tg`` в одну из сопрограмм и вызвав ``tg.create_task()`` в этой "
"сопрограмме). После завершения последней задачи и выхода из блока async with "
"в группу нельзя добавлять новые задачи."

#: ../../library/asyncio-task.rst:352
msgid ""
"The first time any of the tasks belonging to the group fails with an "
"exception other than :exc:`asyncio.CancelledError`, the remaining tasks in "
"the group are cancelled. No further tasks can then be added to the group. At "
"this point, if the body of the ``async with`` statement is still active (i."
"e., :meth:`~object.__aexit__` hasn't been called yet), the task directly "
"containing the ``async with`` statement is also cancelled. The resulting :"
"exc:`asyncio.CancelledError` will interrupt an ``await``, but it will not "
"bubble out of the containing ``async with`` statement."
msgstr ""
"При первом сбое какой-либо задачи, принадлежащей группе, за исключением "
"исключения :exc:`asyncio.CancelledError`, остальные задачи в группе "
"отменяются. После этого в группу невозможно будет добавить никакие "
"дальнейшие задачи. На этом этапе, если тело оператора ``async with`` все еще "
"активно (т.е. :meth:`~object.__aexit__` еще не был вызван), задача, "
"непосредственно содержащая ``async with`` заявление также аннулируется. "
"Полученный :exc:`asyncio.CancelledError` прервет ``await``, но он не выйдет "
"за пределы содержащегося ``async with`` оператора."

#: ../../library/asyncio-task.rst:362
msgid ""
"Once all tasks have finished, if any tasks have failed with an exception "
"other than :exc:`asyncio.CancelledError`, those exceptions are combined in "
"an :exc:`ExceptionGroup` or :exc:`BaseExceptionGroup` (as appropriate; see "
"their documentation) which is then raised."
msgstr ""
"Если после завершения всех задач какие-либо задачи завершились сбоем с "
"исключением, отличным от :exc:`asyncio.CancelledError`, эти исключения "
"объединяются в :exc:`ExceptionGroup` или :exc:`BaseExceptionGroup` (в "
"зависимости от ситуации; см. документации), которая затем поднимается."

#: ../../library/asyncio-task.rst:369
msgid ""
"Two base exceptions are treated specially: If any task fails with :exc:"
"`KeyboardInterrupt` or :exc:`SystemExit`, the task group still cancels the "
"remaining tasks and waits for them, but then the initial :exc:"
"`KeyboardInterrupt` or :exc:`SystemExit` is re-raised instead of :exc:"
"`ExceptionGroup` or :exc:`BaseExceptionGroup`."
msgstr ""
"Два базовых исключения обрабатываются особым образом: если какая-либо задача "
"завершается с ошибкой :exc:`KeyboardInterrupt` или :exc:`SystemExit`, группа "
"задач по-прежнему отменяет оставшиеся задачи и ожидает их, но затем "
"начальный :exc:`KeyboardInterrupt` или :exc:`SystemExit` повторно вызывается "
"вместо :exc:`ExceptionGroup` или :exc:`BaseExceptionGroup`."

#: ../../library/asyncio-task.rst:375
msgid ""
"If the body of the ``async with`` statement exits with an exception (so :"
"meth:`~object.__aexit__` is called with an exception set), this is treated "
"the same as if one of the tasks failed: the remaining tasks are cancelled "
"and then waited for, and non-cancellation exceptions are grouped into an "
"exception group and raised. The exception passed into :meth:`~object."
"__aexit__`, unless it is :exc:`asyncio.CancelledError`, is also included in "
"the exception group. The same special case is made for :exc:"
"`KeyboardInterrupt` and :exc:`SystemExit` as in the previous paragraph."
msgstr ""
"Если тело оператора ``async with`` завершается с исключением (поэтому :meth:"
"`~object.__aexit__` вызывается с набором исключений), это обрабатывается так "
"же, как если бы одна из задач завершилась неудачно: оставшиеся задачи "
"отменяются, а затем ожидаются, а исключения, не подлежащие отмене, "
"группируются в группу исключений и вызываются. Исключение, переданное в :"
"meth:`~object.__aexit__`, если оно не является :exc:`asyncio."
"CancelledError`, также включается в группу исключений. Для :exc:"
"`KeyboardInterrupt` и :exc:`SystemExit` предусмотрен тот же особый случай, "
"что и в предыдущем абзаце."

#: ../../library/asyncio-task.rst:389
msgid "Sleeping"
msgstr "Dormindo"

#: ../../library/asyncio-task.rst:393
msgid "Block for *delay* seconds."
msgstr "Bloqueia por *delay* segundos."

#: ../../library/asyncio-task.rst:395
msgid ""
"If *result* is provided, it is returned to the caller when the coroutine "
"completes."
msgstr ""
"Se *result* é fornecido, é retornado para o autor da chamada quando a "
"corrotina termina."

#: ../../library/asyncio-task.rst:398
msgid ""
"``sleep()`` always suspends the current task, allowing other tasks to run."
msgstr ""
"``sleep()`` sempre suspende a tarefa atual, permitindo que outras tarefas "
"sejam executadas."

#: ../../library/asyncio-task.rst:401
msgid ""
"Setting the delay to 0 provides an optimized path to allow other tasks to "
"run. This can be used by long-running functions to avoid blocking the event "
"loop for the full duration of the function call."
msgstr ""
"Configurando o delay para 0 fornece um caminho otimizado para permitir que "
"outras tarefas executem. Isto pode ser usado por funções de longa execução "
"para evitar que bloqueiem o laço de eventos por toda a duração da chamada da "
"função."

#: ../../library/asyncio-task.rst:407
msgid ""
"Example of coroutine displaying the current date every second for 5 seconds::"
msgstr ""
"Exemplo de uma corrotina exibindo a data atual a cada segundo durante 5 "
"segundos::"

#: ../../library/asyncio-task.rst:425 ../../library/asyncio-task.rst:516
#: ../../library/asyncio-task.rst:570 ../../library/asyncio-task.rst:744
#: ../../library/asyncio-task.rst:798 ../../library/asyncio-task.rst:821
msgid "Removed the *loop* parameter."
msgstr "Removido o parâmetro *loop*."

#: ../../library/asyncio-task.rst:430
msgid "Running Tasks Concurrently"
msgstr "Executando tarefas concorrentemente"

#: ../../library/asyncio-task.rst:434
msgid ""
"Run :ref:`awaitable objects <asyncio-awaitables>` in the *aws* sequence "
"*concurrently*."
msgstr ""
"Executa :ref:`objetos aguardáveis <asyncio-awaitables>` na sequência *aws* "
"de forma *concorrente*."

#: ../../library/asyncio-task.rst:437
msgid ""
"If any awaitable in *aws* is a coroutine, it is automatically scheduled as a "
"Task."
msgstr ""
"Se qualquer aguardável em *aws* é uma corrotina, ele é automaticamente "
"agendado como uma Tarefa."

#: ../../library/asyncio-task.rst:440
msgid ""
"If all awaitables are completed successfully, the result is an aggregate "
"list of returned values.  The order of result values corresponds to the "
"order of awaitables in *aws*."
msgstr ""
"Se todos os aguardáveis forem concluídos com sucesso, o resultado é uma "
"lista agregada de valores retornados. A ordem dos valores resultantes "
"corresponde a ordem dos aguardáveis em *aws*."

#: ../../library/asyncio-task.rst:444
msgid ""
"If *return_exceptions* is ``False`` (default), the first raised exception is "
"immediately propagated to the task that awaits on ``gather()``.  Other "
"awaitables in the *aws* sequence **won't be cancelled** and will continue to "
"run."
msgstr ""
"Se *return_exceptions* for ``False`` (valor padrão), a primeira exceção "
"levantada é imediatamente propagada para a tarefa que espera em "
"``gather()``. Outros aguardáveis na sequência *aws* **não serão cancelados** "
"e irão continuar a executar."

#: ../../library/asyncio-task.rst:449
msgid ""
"If *return_exceptions* is ``True``, exceptions are treated the same as "
"successful results, and aggregated in the result list."
msgstr ""
"Se *return_exceptions* for ``True``, exceções são tratadas da mesma forma "
"que resultados com sucesso, e agregadas na lista de resultados."

#: ../../library/asyncio-task.rst:452
msgid ""
"If ``gather()`` is *cancelled*, all submitted awaitables (that have not "
"completed yet) are also *cancelled*."
msgstr ""
"Se ``gather()`` for *cancelado*, todos os aguardáveis que foram submetidos "
"(que não foram concluídos ainda) também são *cancelados*."

#: ../../library/asyncio-task.rst:455
msgid ""
"If any Task or Future from the *aws* sequence is *cancelled*, it is treated "
"as if it raised :exc:`CancelledError` -- the ``gather()`` call is **not** "
"cancelled in this case.  This is to prevent the cancellation of one "
"submitted Task/Future to cause other Tasks/Futures to be cancelled."
msgstr ""
"Se qualquer Tarefa ou Futuro da sequência *aws* for *cancelado*, ele é "
"tratado como se tivesse levantado :exc:`CancelledError` -- a chamada para "
"``gather()`` **não** é cancelada neste caso. Isso existe para prevenir que o "
"cancelamento de uma Tarefa/Futuro submetida ocasione outras Tarefas/Futuros "
"a serem cancelados."

#: ../../library/asyncio-task.rst:462
msgid ""
"A more modern way to create and run tasks concurrently and wait for their "
"completion is :class:`asyncio.TaskGroup`."
msgstr ""

#: ../../library/asyncio-task.rst:505
msgid ""
"If *return_exceptions* is False, cancelling gather() after it has been "
"marked done won't cancel any submitted awaitables. For instance, gather can "
"be marked done after propagating an exception to the caller, therefore, "
"calling ``gather.cancel()`` after catching an exception (raised by one of "
"the awaitables) from gather won't cancel any other awaitables."
msgstr ""
"Se *return_exceptions* for False, cancelar gather() depois que ele foi "
"marcado como concluído não irá cancelar quaisquer aguardáveis submetidos. "
"Por exemplo, gather pode ser marcado como concluído após propagar uma "
"exceção para o autor da chamada, portanto, chamar ``gather.cancel()`` após "
"capturar uma exceção (levantada por um dos aguardáveis) a partir de gather "
"não irá cancelar quaisquer outros aguardáveis."

#: ../../library/asyncio-task.rst:512
msgid ""
"If the *gather* itself is cancelled, the cancellation is propagated "
"regardless of *return_exceptions*."
msgstr ""
"Se *gather* por si mesmo for cancelado, o cancelamento é propagado "
"independente de *return_exceptions*."

#: ../../library/asyncio-task.rst:519
msgid ""
"Deprecation warning is emitted if no positional arguments are provided or "
"not all positional arguments are Future-like objects and there is no running "
"event loop."
msgstr ""
"Aviso de descontinuidade é emitido se nenhum argumento posicional for "
"fornecido, ou nem todos os argumentos posicionais são objetos similar a "
"Futuro, e não existe nenhum laço de eventos em execução."

#: ../../library/asyncio-task.rst:526
msgid "Shielding From Cancellation"
msgstr "Protegendo contra cancelamento"

#: ../../library/asyncio-task.rst:530
msgid ""
"Protect an :ref:`awaitable object <asyncio-awaitables>` from being :meth:"
"`cancelled <Task.cancel>`."
msgstr ""
"Protege um :ref:`objeto aguardável <asyncio-awaitables>` de ser :meth:"
"`cancelado <Task.cancel>`."

#: ../../library/asyncio-task.rst:533 ../../library/asyncio-task.rst:699
msgid "If *aw* is a coroutine it is automatically scheduled as a Task."
msgstr ""
"Se *aw* é uma corrotina, ela é automaticamente agendada como uma Tarefa."

#: ../../library/asyncio-task.rst:535
msgid "The statement::"
msgstr "A instrução::"

#: ../../library/asyncio-task.rst:540
msgid "is equivalent to::"
msgstr "é equivalente a::"

#: ../../library/asyncio-task.rst:544
msgid ""
"*except* that if the coroutine containing it is cancelled, the Task running "
"in ``something()`` is not cancelled.  From the point of view of "
"``something()``, the cancellation did not happen. Although its caller is "
"still cancelled, so the \"await\" expression still raises a :exc:"
"`CancelledError`."
msgstr ""
"*exceto* que se a corrotina contendo-a for cancelada, a Tarefa executando em "
"``something()`` não é cancelada. Do ponto de vista de ``something()``, o "
"cancelamento não aconteceu. Apesar do autor da chamada ainda estar "
"cancelado, então a expressão \"await\" ainda levanta um :exc:"
"`CancelledError`."

#: ../../library/asyncio-task.rst:550
msgid ""
"If ``something()`` is cancelled by other means (i.e. from within itself) "
"that would also cancel ``shield()``."
msgstr ""
"Se ``something()`` é cancelada por outros meios (isto é, dentro ou a partir "
"de si mesma) isso também iria cancelar ``shield()``."

#: ../../library/asyncio-task.rst:553
msgid ""
"If it is desired to completely ignore cancellation (not recommended) the "
"``shield()`` function should be combined with a try/except clause, as "
"follows::"
msgstr ""
"Se for desejado ignorar completamente os cancelamentos (não recomendado) a "
"função ``shield()`` deve ser combinada com uma cláusula try/except, conforme "
"abaixo::"

#: ../../library/asyncio-task.rst:565
msgid ""
"Save a reference to tasks passed to this function, to avoid a task "
"disappearing mid-execution. The event loop only keeps weak references to "
"tasks. A task that isn't referenced elsewhere may get garbage collected at "
"any time, even before it's done."
msgstr ""
"Mantenha uma referência para as tarefas passadas para essa função função, "
"evitando assim que uma tarefa desapareça durante a execução. O laço de "
"eventos mantém apenas referências fracas para as tarefas. Uma tarefa que não "
"é referenciada por nada mais pode ser removida pelo coletor de lixo a "
"qualquer momento, antes mesmo da função ser finalizada."

#: ../../library/asyncio-task.rst:573
msgid ""
"Deprecation warning is emitted if *aw* is not Future-like object and there "
"is no running event loop."
msgstr ""
"Aviso de descontinuidade é emitido se *aw* não é um objeto similar a Futuro, "
"e não existe nenhum laço de eventos em execução."

#: ../../library/asyncio-task.rst:579
msgid "Timeouts"
msgstr "Tempo limite"

#: ../../library/asyncio-task.rst:583
msgid ""
"Return an :ref:`asynchronous context manager <async-context-managers>` that "
"can be used to limit the amount of time spent waiting on something."
msgstr ""
"Возвращает :ref:`асинхронный контекстный менеджер <async-context-managers>`, "
"который можно использовать для ограничения времени, затрачиваемого на "
"ожидание чего-либо."

#: ../../library/asyncio-task.rst:587
msgid ""
"*delay* can either be ``None``, or a float/int number of seconds to wait. If "
"*delay* is ``None``, no time limit will be applied; this can be useful if "
"the delay is unknown when the context manager is created."
msgstr ""
"*delay* может быть либо None, либо числом в секундах ожидания с плавающей "
"запятой/int. Если *delay* имеет значение «None», ограничение по времени "
"применяться не будет; это может быть полезно, если задержка неизвестна при "
"создании диспетчера контекста."

#: ../../library/asyncio-task.rst:592
msgid ""
"In either case, the context manager can be rescheduled after creation using :"
"meth:`Timeout.reschedule`."
msgstr ""
"В любом случае диспетчер контекста может быть перепланирован после создания "
"с помощью :meth:`Timeout.reschedule`."

#: ../../library/asyncio-task.rst:601
msgid ""
"If ``long_running_task`` takes more than 10 seconds to complete, the context "
"manager will cancel the current task and handle the resulting :exc:`asyncio."
"CancelledError` internally, transforming it into a :exc:`TimeoutError` which "
"can be caught and handled."
msgstr ""
"Если выполнение ``long_running_task`` занимает более 10 секунд, контекстный "
"менеджер отменит текущую задачу и обработает полученную :exc:`asyncio."
"CancelledError` внутри себя, преобразуя ее в :exc:`TimeoutError`, которую "
"можно перехватить. и справился."

#: ../../library/asyncio-task.rst:608
msgid ""
"The :func:`asyncio.timeout` context manager is what transforms the :exc:"
"`asyncio.CancelledError` into a :exc:`TimeoutError`, which means the :exc:"
"`TimeoutError` can only be caught *outside* of the context manager."
msgstr ""
"Контекстный менеджер :func:`asyncio.timeout` преобразует :exc:`asyncio."
"CancelledError` в :exc:`TimeoutError`, что означает, что :exc:`TimeoutError` "
"может быть обнаружен только *вне* контекстный менеджер."

#: ../../library/asyncio-task.rst:613
msgid "Example of catching :exc:`TimeoutError`::"
msgstr "Пример перехвата :exc:`TimeoutError`::"

#: ../../library/asyncio-task.rst:624
msgid ""
"The context manager produced by :func:`asyncio.timeout` can be rescheduled "
"to a different deadline and inspected."
msgstr ""
"Менеджер контекста, созданный :func:`asyncio.timeout`, может быть перенесен "
"на другой крайний срок и проверен."

#: ../../library/asyncio-task.rst:629
msgid ""
"An :ref:`asynchronous context manager <async-context-managers>` for "
"cancelling overdue coroutines."
msgstr ""
":ref:`асинхронный контекстный менеджер <async-context-managers>` для отмены "
"просроченных сопрограмм."

#: ../../library/asyncio-task.rst:632
msgid ""
"``when`` should be an absolute time at which the context should time out, as "
"measured by the event loop's clock:"
msgstr ""
"``when`` должно быть абсолютным временем, в которое контекст должен истечь, "
"измеряемым часами цикла событий:"

#: ../../library/asyncio-task.rst:635
msgid "If ``when`` is ``None``, the timeout will never trigger."
msgstr "If ``when`` is ``None``, тайм-аут никогда не сработает. "

#: ../../library/asyncio-task.rst:636
msgid ""
"If ``when < loop.time()``, the timeout will trigger on the next iteration of "
"the event loop."
msgstr ""
"If ``when < loop.time()``, тайм-аут сработает на следующей итерации цикла "
"событий. "

#: ../../library/asyncio-task.rst:641
msgid ""
"Return the current deadline, or ``None`` if the current deadline is not set."
msgstr "Возвращает текущий срок или «Нет», если текущий срок не установлен."

#: ../../library/asyncio-task.rst:646
msgid "Reschedule the timeout."
msgstr "Перепланируйте тайм-аут."

#: ../../library/asyncio-task.rst:650
msgid "Return whether the context manager has exceeded its deadline (expired)."
msgstr "Перепланируйте тайм-аут."

#: ../../library/asyncio-task.rst:670
msgid "Timeout context managers can be safely nested."
msgstr "Менеджеры контекста таймаута могут быть безопасно вложены."

#: ../../library/asyncio-task.rst:676
msgid ""
"Similar to :func:`asyncio.timeout`, except *when* is the absolute time to "
"stop waiting, or ``None``."
msgstr ""
"Аналогично :func:`asyncio.timeout`, за исключением того, что *when* — это "
"абсолютное время прекращения ожидания или ``None``."

#: ../../library/asyncio-task.rst:696
msgid ""
"Wait for the *aw* :ref:`awaitable <asyncio-awaitables>` to complete with a "
"timeout."
msgstr ""
"Espera o :ref:`aguardável <asyncio-awaitables>` *aw* concluir sem "
"ultrapassar o tempo limite \"timeout\"."

#: ../../library/asyncio-task.rst:701
msgid ""
"*timeout* can either be ``None`` or a float or int number of seconds to wait "
"for.  If *timeout* is ``None``, block until the future completes."
msgstr ""
"*timeout* pode ser ``None``, ou um ponto flutuante, ou um número inteiro de "
"segundos para aguardar. Se *timeout* é ``None``, aguarda até o future "
"encerrar."

#: ../../library/asyncio-task.rst:705
msgid ""
"If a timeout occurs, it cancels the task and raises :exc:`TimeoutError`."
msgstr ""
"Если происходит таймаут, задача отменяется и выдается :exc:`TimeoutError`."

#: ../../library/asyncio-task.rst:708
msgid ""
"To avoid the task :meth:`cancellation <Task.cancel>`, wrap it in :func:"
"`shield`."
msgstr ""
"Para evitar o :meth:`cancelamento <Task.cancel>` da tarefa, envolva-a com :"
"func:`shield`."

#: ../../library/asyncio-task.rst:711
msgid ""
"The function will wait until the future is actually cancelled, so the total "
"wait time may exceed the *timeout*. If an exception happens during "
"cancellation, it is propagated."
msgstr ""
"A função irá aguardar até o future ser realmente cancelado, então o tempo "
"total de espera pode exceder o tempo limite *timeout*. Se uma exceção "
"ocorrer durante o cancelamento, ela será propagada."

#: ../../library/asyncio-task.rst:715
msgid "If the wait is cancelled, the future *aw* is also cancelled."
msgstr "Se ele for cancelado, o future *aw* também é cancelado."

#: ../../library/asyncio-task.rst:739
msgid ""
"When *aw* is cancelled due to a timeout, ``wait_for`` waits for *aw* to be "
"cancelled.  Previously, it raised :exc:`TimeoutError` immediately."
msgstr ""
"Когда *aw* отменяется из-за таймаута, ``wait_for`` ожидает отмены *aw*. "
"Раньше он немедленно вызывал :exc:`TimeoutError`."

#: ../../library/asyncio-task.rst:747
msgid "Raises :exc:`TimeoutError` instead of :exc:`asyncio.TimeoutError`."
msgstr "Вызывает :exc:`TimeoutError` вместо :exc:`asyncio.TimeoutError`."

#: ../../library/asyncio-task.rst:752
msgid "Waiting Primitives"
msgstr "Primitivas de Espera"

#: ../../library/asyncio-task.rst:756
msgid ""
"Run :class:`~asyncio.Future` and :class:`~asyncio.Task` instances in the "
"*aws* iterable concurrently and block until the condition specified by "
"*return_when*."
msgstr ""
"Запускайте экземпляры :class:`~asyncio.Future` и :class:`~asyncio.Task` в "
"итерации *aws* одновременно и блокируйте их до тех пор, пока не будет "
"выполнено условие, указанное в *return_when*."

#: ../../library/asyncio-task.rst:760
msgid ""
"The *aws* iterable must not be empty and generators yielding tasks are not "
"accepted."
msgstr ""

#: ../../library/asyncio-task.rst:762
msgid "Returns two sets of Tasks/Futures: ``(done, pending)``."
msgstr "Retorna dois conjuntos de Tarefas/Futuros: ``(done, pending)``."

#: ../../library/asyncio-task.rst:764
msgid "Usage::"
msgstr "Uso::"

#: ../../library/asyncio-task.rst:768
msgid ""
"*timeout* (a float or int), if specified, can be used to control the maximum "
"number of seconds to wait before returning."
msgstr ""
"*timeout* (um ponto flutuante ou inteiro), se especificado, pode ser usado "
"para controlar o número máximo de segundos para aguardar antes de retornar."

#: ../../library/asyncio-task.rst:771
msgid ""
"Note that this function does not raise :exc:`TimeoutError`. Futures or Tasks "
"that aren't done when the timeout occurs are simply returned in the second "
"set."
msgstr ""
"Обратите внимание, что эта функция не вызывает :exc:`TimeoutError`. Фьючерсы "
"или задачи, которые не выполнены по истечении тайм-аута, просто возвращаются "
"во втором наборе."

#: ../../library/asyncio-task.rst:775
msgid ""
"*return_when* indicates when this function should return.  It must be one of "
"the following constants:"
msgstr ""
"*return_when* indica quando esta função deve retornar. Ele deve ser uma das "
"seguintes constantes:"

#: ../../library/asyncio-task.rst:781
msgid "Constant"
msgstr "Constante"

#: ../../library/asyncio-task.rst:782
msgid "Description"
msgstr "Descrição"

#: ../../library/asyncio-task.rst:785
msgid "The function will return when any future finishes or is cancelled."
msgstr ""
"A função irá retornar quando qualquer futuro terminar ou for cancelado."

#: ../../library/asyncio-task.rst:788
msgid ""
"The function will return when any future finishes by raising an exception. "
"If no future raises an exception then it is equivalent to :const:"
"`ALL_COMPLETED`."
msgstr ""
"Функция вернется, когда любое будущее завершится вызовом исключения. Если "
"никакое будущее не вызывает исключение, это эквивалентно :const:"
"`ALL_COMPLETED`."

#: ../../library/asyncio-task.rst:793
msgid "The function will return when all futures finish or are cancelled."
msgstr ""
"A função irá retornar quando todos os futuros encerrarem ou forem cancelados."

#: ../../library/asyncio-task.rst:795
msgid ""
"Unlike :func:`~asyncio.wait_for`, ``wait()`` does not cancel the futures "
"when a timeout occurs."
msgstr ""
"Diferente de :func:`~asyncio.wait_for`, ``wait()`` não cancela os futuros "
"quando um tempo limite é atingido."

#: ../../library/asyncio-task.rst:801
msgid "Passing coroutine objects to ``wait()`` directly is forbidden."
msgstr "Передача объектов сопрограммы напрямую в wait() запрещена."

#: ../../library/asyncio-task.rst:806
msgid ""
"Run :ref:`awaitable objects <asyncio-awaitables>` in the *aws* iterable "
"concurrently. Generators yielding tasks are not accepted as *aws* iterable. "
"Return an iterator of coroutines. Each coroutine returned can be awaited to "
"get the earliest next result from the iterable of the remaining awaitables."
msgstr ""

#: ../../library/asyncio-task.rst:812
msgid ""
"Raises :exc:`TimeoutError` if the timeout occurs before all Futures are done."
msgstr ""
"Вызывает :exc:`TimeoutError`, если таймаут наступает до того, как все "
"фьючерсы будут выполнены."

#: ../../library/asyncio-task.rst:824
msgid ""
"Deprecation warning is emitted if not all awaitable objects in the *aws* "
"iterable are Future-like objects and there is no running event loop."
msgstr ""
"Aviso de descontinuidade é emitido se nem todos os objetos aguardáveis no "
"iterável *aws* forem objetos similar a Futuro, e não existe nenhum laço de "
"eventos em execução."

#: ../../library/asyncio-task.rst:830
msgid "Running in Threads"
msgstr "Executando em Threads"

#: ../../library/asyncio-task.rst:834
msgid "Asynchronously run function *func* in a separate thread."
msgstr "Executa a função *func* assincronamente em uma thread separada."

#: ../../library/asyncio-task.rst:836
msgid ""
"Any \\*args and \\*\\*kwargs supplied for this function are directly passed "
"to *func*. Also, the current :class:`contextvars.Context` is propagated, "
"allowing context variables from the event loop thread to be accessed in the "
"separate thread."
msgstr ""
"Quaisquer \\*args e \\*\\*kwargs fornecidos para esta função são diretamente "
"passados para *func*. Além disso, o :class:`contextvars.Context` atual é "
"propagado, permitindo que variáveis de contexto da thread do laço de eventos "
"sejam acessadas na thread separada."

#: ../../library/asyncio-task.rst:841
msgid ""
"Return a coroutine that can be awaited to get the eventual result of *func*."
msgstr ""
"Retorna uma corrotina que pode ser aguardada para obter o resultado eventual "
"de *func*."

#: ../../library/asyncio-task.rst:843
msgid ""
"This coroutine function is primarily intended to be used for executing IO-"
"bound functions/methods that would otherwise block the event loop if they "
"were run in the main thread. For example::"
msgstr ""
"Эта функция сопрограммы в первую очередь предназначена для выполнения "
"функций/методов, связанных с вводом-выводом, которые в противном случае "
"заблокировали бы цикл событий, если бы они были запущены в основном потоке. "
"Например::"

#: ../../library/asyncio-task.rst:873
msgid ""
"Directly calling ``blocking_io()`` in any coroutine would block the event "
"loop for its duration, resulting in an additional 1 second of run time. "
"Instead, by using ``asyncio.to_thread()``, we can run it in a separate "
"thread without blocking the event loop."
msgstr ""
"Chamar diretamente ``blocking_io()`` em qualquer corrotina iria bloquear o "
"laço de eventos durante a sua duração, resultando em 1 segundo adicional no "
"tempo de execução. Ao invés disso, ao utilizar ``asyncio.to_thread()``, nós "
"podemos executá-la em uma thread separada sem bloquear o laço de eventos."

#: ../../library/asyncio-task.rst:880
msgid ""
"Due to the :term:`GIL`, ``asyncio.to_thread()`` can typically only be used "
"to make IO-bound functions non-blocking. However, for extension modules that "
"release the GIL or alternative Python implementations that don't have one, "
"``asyncio.to_thread()`` can also be used for CPU-bound functions."
msgstr ""
"Devido à :term:`GIL`, ``asyncio.to_thread()`` pode tipicamente ser usado "
"apenas para fazer funções vinculadas a IO não-bloqueantes. Entretanto, para "
"módulos de extensão que liberam o GIL ou implementações alternativas do "
"Python que não tem um, ``asyncio.to_thread()`` também pode ser usado para "
"funções vinculadas à CPU."

#: ../../library/asyncio-task.rst:889
msgid "Scheduling From Other Threads"
msgstr "Agendando a partir de outras Threads"

#: ../../library/asyncio-task.rst:893
msgid "Submit a coroutine to the given event loop.  Thread-safe."
msgstr ""
"Envia uma corrotina para o laço de eventos fornecido. Seguro para thread."

#: ../../library/asyncio-task.rst:895
msgid ""
"Return a :class:`concurrent.futures.Future` to wait for the result from "
"another OS thread."
msgstr ""
"Retorna um :class:`concurrent.futures.Future` para aguardar pelo resultado "
"de outra thread do sistema operacional."

#: ../../library/asyncio-task.rst:898
msgid ""
"This function is meant to be called from a different OS thread than the one "
"where the event loop is running.  Example::"
msgstr ""
"Esta função destina-se a ser chamada partir de uma thread diferente do "
"sistema operacional, da qual o laço de eventos está executando. Exemplo::"

#: ../../library/asyncio-task.rst:910
msgid ""
"If an exception is raised in the coroutine, the returned Future will be "
"notified.  It can also be used to cancel the task in the event loop::"
msgstr ""
"Se uma exceção for levantada na corrotina, o Futuro retornado será "
"notificado. Isso também pode ser usado para cancelar a tarefa no laço de "
"eventos::"

#: ../../library/asyncio-task.rst:924
msgid ""
"See the :ref:`concurrency and multithreading <asyncio-multithreading>` "
"section of the documentation."
msgstr ""
"Veja a seção :ref:`concorrência e multithreading <asyncio-multithreading>` "
"da documentação."

#: ../../library/asyncio-task.rst:927
msgid ""
"Unlike other asyncio functions this function requires the *loop* argument to "
"be passed explicitly."
msgstr ""
"Ao contrário de outras funções asyncio, esta função requer que o argumento "
"*loop* seja passado explicitamente."

#: ../../library/asyncio-task.rst:934
msgid "Introspection"
msgstr "Introspecção"

#: ../../library/asyncio-task.rst:939
msgid ""
"Return the currently running :class:`Task` instance, or ``None`` if no task "
"is running."
msgstr ""
"Retorna a instância :class:`Task` atualmente em execução, ou ``None`` se "
"nenhuma tarefa estiver executando."

#: ../../library/asyncio-task.rst:942
msgid ""
"If *loop* is ``None`` :func:`get_running_loop` is used to get the current "
"loop."
msgstr ""
"Se *loop* for ``None``, então :func:`get_running_loop` é usado para obter o "
"laço atual."

#: ../../library/asyncio-task.rst:950
msgid "Return a set of not yet finished :class:`Task` objects run by the loop."
msgstr ""
"Retorna um conjunto de objetos :class:`Task` ainda não concluídos a serem "
"executados pelo laço."

#: ../../library/asyncio-task.rst:953
msgid ""
"If *loop* is ``None``, :func:`get_running_loop` is used for getting current "
"loop."
msgstr ""
"Se *loop* for ``None``, então :func:`get_running_loop` é usado para obter o "
"laço atual."

#: ../../library/asyncio-task.rst:961
msgid "Return ``True`` if *obj* is a coroutine object."
msgstr "Верните ``True``, если *obj* является объектом сопрограммы."

#: ../../library/asyncio-task.rst:967
msgid "Task Object"
msgstr "Objeto Task"

#: ../../library/asyncio-task.rst:971
msgid ""
"A :class:`Future-like <Future>` object that runs a Python :ref:`coroutine "
"<coroutine>`.  Not thread-safe."
msgstr ""
"Um objeto :class:`similar a Futuro <Future>` que executa uma :ref:`corrotina "
"<coroutine>` Python. Não é seguro para thread."

#: ../../library/asyncio-task.rst:974
msgid ""
"Tasks are used to run coroutines in event loops. If a coroutine awaits on a "
"Future, the Task suspends the execution of the coroutine and waits for the "
"completion of the Future.  When the Future is *done*, the execution of the "
"wrapped coroutine resumes."
msgstr ""
"Tarefas são usadas para executar corrotinas em laços de eventos. Se uma "
"corrotina espera por um Futuro, a Tarefa suspende a execução da corrotina e "
"aguarda a conclusão do Futuro. Quando o Futuro é *concluído*, a execução da "
"corrotina contida é retomada."

#: ../../library/asyncio-task.rst:980
msgid ""
"Event loops use cooperative scheduling: an event loop runs one Task at a "
"time.  While a Task awaits for the completion of a Future, the event loop "
"runs other Tasks, callbacks, or performs IO operations."
msgstr ""
"Laço de eventos usam agendamento cooperativo: um ciclo de evento executa uma "
"Tarefa de cada vez. Enquanto uma Tarefa aguarda a conclusão de um Futuro, o "
"laço de eventos executa outras Tarefas, funções de retorno, ou executa "
"operações de IO."

#: ../../library/asyncio-task.rst:985
msgid ""
"Use the high-level :func:`asyncio.create_task` function to create Tasks, or "
"the low-level :meth:`loop.create_task` or :func:`ensure_future` functions.  "
"Manual instantiation of Tasks is discouraged."
msgstr ""
"Use a função de alto nível :func:`asyncio.create_task` para criar Tarefas, "
"ou as funções de baixo nível :meth:`loop.create_task` ou :func:"
"`ensure_future`. Instanciação manual de Tarefas é desencorajado."

#: ../../library/asyncio-task.rst:990
msgid ""
"To cancel a running Task use the :meth:`cancel` method.  Calling it will "
"cause the Task to throw a :exc:`CancelledError` exception into the wrapped "
"coroutine.  If a coroutine is awaiting on a Future object during "
"cancellation, the Future object will be cancelled."
msgstr ""
"Para cancelar uma Tarefa em execução, use o método :meth:`cancel`. Chamar "
"ele fará com que a Tarefa levante uma exceção :exc:`CancelledError` dentro "
"da corrotina contida. Se a corrotina estiver esperando por um objeto Future "
"durante o cancelamento, o objeto Future será cancelado."

#: ../../library/asyncio-task.rst:995
msgid ""
":meth:`cancelled` can be used to check if the Task was cancelled. The method "
"returns ``True`` if the wrapped coroutine did not suppress the :exc:"
"`CancelledError` exception and was actually cancelled."
msgstr ""
":meth:`cancelled` pode ser usado para verificar se a Tarefa foi cancelada. O "
"método retorna ``True`` se a corrotina envolta não suprimiu a exceção :exc:"
"`CancelledError` e foi na verdade cancelada."

#: ../../library/asyncio-task.rst:1000
msgid ""
":class:`asyncio.Task` inherits from :class:`Future` all of its APIs except :"
"meth:`Future.set_result` and :meth:`Future.set_exception`."
msgstr ""
":class:`asyncio.Task` herda de :class:`Future` todas as suas APIs exceto :"
"meth:`Future.set_result` e :meth:`Future.set_exception`."

#: ../../library/asyncio-task.rst:1004
msgid ""
"An optional keyword-only *context* argument allows specifying a custom :"
"class:`contextvars.Context` for the *coro* to run in. If no *context* is "
"provided, the Task copies the current context and later runs its coroutine "
"in the copied context."
msgstr ""
"Необязательный аргумент *context*, содержащий только ключевые слова, "
"позволяет указать собственный :class:`contextvars.Context` для запуска "
"*coro*. Если *context* не указан, Задача копирует текущий контекст и позже "
"запускает свою сопрограмму в скопированный контекст."

#: ../../library/asyncio-task.rst:1009
msgid "Added support for the :mod:`contextvars` module."
msgstr "Adicionado suporte para o módulo :mod:`contextvars`."

#: ../../library/asyncio-task.rst:1015
msgid ""
"Deprecation warning is emitted if *loop* is not specified and there is no "
"running event loop."
msgstr ""
"Aviso de descontinuidade é emitido se *loop* não é especificado, e não "
"existe nenhum laço de eventos em execução."

#: ../../library/asyncio-task.rst:1024
msgid "Return ``True`` if the Task is *done*."
msgstr "Retorna ``True`` se a Tarefa estiver *concluída*."

#: ../../library/asyncio-task.rst:1026
msgid ""
"A Task is *done* when the wrapped coroutine either returned a value, raised "
"an exception, or the Task was cancelled."
msgstr ""
"Uma Tarefa está *concluída* quando a corrotina contida retornou um valor, ou "
"levantou uma exceção, ou a Tarefa foi cancelada."

#: ../../library/asyncio-task.rst:1031
msgid "Return the result of the Task."
msgstr "Retorna o resultado da Tarefa."

#: ../../library/asyncio-task.rst:1033
msgid ""
"If the Task is *done*, the result of the wrapped coroutine is returned (or "
"if the coroutine raised an exception, that exception is re-raised.)"
msgstr ""
"Se a Tarefa estiver *concluída*, o resultado da corrotina contida é "
"retornado (ou se a corrotina levantou uma exceção, essa exceção é re-"
"levantada.)"

#: ../../library/asyncio-task.rst:1037 ../../library/asyncio-task.rst:1051
msgid ""
"If the Task has been *cancelled*, this method raises a :exc:`CancelledError` "
"exception."
msgstr ""
"Se a Tarefa foi *cancelada*, este método levanta uma exceção :exc:"
"`CancelledError`."

#: ../../library/asyncio-task.rst:1040
msgid ""
"If the Task's result isn't yet available, this method raises a :exc:"
"`InvalidStateError` exception."
msgstr ""
"Se o resultado da Tarefa não estiver disponível ainda, este método levanta "
"uma exceção :exc:`InvalidStateError`."

#: ../../library/asyncio-task.rst:1045
msgid "Return the exception of the Task."
msgstr "Retorna a exceção de uma Tarefa."

#: ../../library/asyncio-task.rst:1047
msgid ""
"If the wrapped coroutine raised an exception that exception is returned.  If "
"the wrapped coroutine returned normally this method returns ``None``."
msgstr ""
"Se a corrotina contida levantou uma exceção, essa exceção é retornada. Se a "
"corrotina contida retornou normalmente, este método retorna ``None``."

#: ../../library/asyncio-task.rst:1054
msgid ""
"If the Task isn't *done* yet, this method raises an :exc:`InvalidStateError` "
"exception."
msgstr ""
"Se a Tarefa não estiver *concluída* ainda, este método levanta uma exceção :"
"exc:`InvalidStateError`."

#: ../../library/asyncio-task.rst:1059
msgid "Add a callback to be run when the Task is *done*."
msgstr ""
"Adiciona uma função de retorno para ser executada quando a Tarefa estiver "
"*concluída*."

#: ../../library/asyncio-task.rst:1061 ../../library/asyncio-task.rst:1070
msgid "This method should only be used in low-level callback-based code."
msgstr ""
"Este método deve ser usado apenas em código de baixo nível baseado em "
"funções de retorno."

#: ../../library/asyncio-task.rst:1063
msgid ""
"See the documentation of :meth:`Future.add_done_callback` for more details."
msgstr ""
"Veja a documentação para :meth:`Future.add_done_callback` para mais detalhes."

#: ../../library/asyncio-task.rst:1068
msgid "Remove *callback* from the callbacks list."
msgstr "Remove *callback* da lista de funções de retorno."

#: ../../library/asyncio-task.rst:1072
msgid ""
"See the documentation of :meth:`Future.remove_done_callback` for more "
"details."
msgstr ""
"Veja a documentação do método :meth:`Future.remove_done_callback` para mais "
"detalhes."

#: ../../library/asyncio-task.rst:1077
msgid "Return the list of stack frames for this Task."
msgstr "Retorna a lista de frames da pilha para esta Tarefa."

#: ../../library/asyncio-task.rst:1079
msgid ""
"If the wrapped coroutine is not done, this returns the stack where it is "
"suspended.  If the coroutine has completed successfully or was cancelled, "
"this returns an empty list. If the coroutine was terminated by an exception, "
"this returns the list of traceback frames."
msgstr ""
"Se a corrotina contida não estiver concluída, isto retorna a pilha onde ela "
"foi suspensa. Se a corrotina foi concluída com sucesso ou foi cancelada, "
"isto retorna uma lista vazia. Se a corrotina foi terminada por uma exceção, "
"isto retorna a lista de frames do traceback (situação da pilha de execução)."

#: ../../library/asyncio-task.rst:1085
msgid "The frames are always ordered from oldest to newest."
msgstr ""
"Os quadros são sempre ordenados dos mais antigos para os mais recentes."

#: ../../library/asyncio-task.rst:1087
msgid "Only one stack frame is returned for a suspended coroutine."
msgstr "Apenas um frame da pilha é retornado para uma corrotina suspensa."

#: ../../library/asyncio-task.rst:1089
msgid ""
"The optional *limit* argument sets the maximum number of frames to return; "
"by default all available frames are returned. The ordering of the returned "
"list differs depending on whether a stack or a traceback is returned: the "
"newest frames of a stack are returned, but the oldest frames of a traceback "
"are returned.  (This matches the behavior of the traceback module.)"
msgstr ""
"O argumento opcional *limit* define o o número de frames máximo para "
"retornar; por padrão todos os frames disponíveis são retornados. O "
"ordenamento da lista retornada é diferente dependendo se uma pilha ou um "
"traceback (situação da pilha de execução) é retornado: os frames mais "
"recentes de uma pilha são retornados, mas os frames mais antigos de um "
"traceback são retornados. (Isso combina com o comportamento do módulo "
"traceback.)"

#: ../../library/asyncio-task.rst:1098
msgid "Print the stack or traceback for this Task."
msgstr "Exibe a pilha ou situação da pilha de execução para esta Tarefa."

#: ../../library/asyncio-task.rst:1100
msgid ""
"This produces output similar to that of the traceback module for the frames "
"retrieved by :meth:`get_stack`."
msgstr ""
"Isto produz uma saída similar a do módulo traceback para frames recuperados "
"por :meth:`get_stack`."

#: ../../library/asyncio-task.rst:1103
msgid "The *limit* argument is passed to :meth:`get_stack` directly."
msgstr "O argumento *limit* é passado para :meth:`get_stack` diretamente."

#: ../../library/asyncio-task.rst:1105
msgid ""
"The *file* argument is an I/O stream to which the output is written; by "
"default output is written to :data:`sys.stdout`."
msgstr ""
"Аргумент *file* представляет собой поток ввода-вывода, в который "
"записываются выходные данные; по умолчанию вывод записывается в :data:`sys."
"stdout`."

#: ../../library/asyncio-task.rst:1110
msgid "Return the coroutine object wrapped by the :class:`Task`."
msgstr "Retorna o objeto corrotina contido pela :class:`Task`."

#: ../../library/asyncio-task.rst:1116
msgid "Return the name of the Task."
msgstr "Retorna o nome da Tarefa."

#: ../../library/asyncio-task.rst:1118
msgid ""
"If no name has been explicitly assigned to the Task, the default asyncio "
"Task implementation generates a default name during instantiation."
msgstr ""
"Se nenhum nome foi explicitamente designado para a Tarefa, a implementação "
"padrão asyncio da classe Task gera um nome padrão durante a instanciação."

#: ../../library/asyncio-task.rst:1126
msgid "Set the name of the Task."
msgstr "Define o nome da Tarefa."

#: ../../library/asyncio-task.rst:1128
msgid ""
"The *value* argument can be any object, which is then converted to a string."
msgstr ""
"O argumento *value* pode ser qualquer objeto, o qual é então convertido para "
"uma string."

#: ../../library/asyncio-task.rst:1131
msgid ""
"In the default Task implementation, the name will be visible in the :func:"
"`repr` output of a task object."
msgstr ""
"Na implementação padrão da Tarefa, o nome será visível na :func:`repr` de "
"saída de um objeto task."

#: ../../library/asyncio-task.rst:1138
msgid "Request the Task to be cancelled."
msgstr "Solicita o cancelamento da Tarefa."

#: ../../library/asyncio-task.rst:1140
msgid ""
"This arranges for a :exc:`CancelledError` exception to be thrown into the "
"wrapped coroutine on the next cycle of the event loop."
msgstr ""
"Isto prepara para uma exceção :exc:`CancelledError` ser lançada na corrotina "
"contida no próximo ciclo do laço de eventos."

#: ../../library/asyncio-task.rst:1143
msgid ""
"The coroutine then has a chance to clean up or even deny the request by "
"suppressing the exception with a :keyword:`try` ... ... ``except "
"CancelledError`` ... :keyword:`finally` block. Therefore, unlike :meth:"
"`Future.cancel`, :meth:`Task.cancel` does not guarantee that the Task will "
"be cancelled, although suppressing cancellation completely is not common and "
"is actively discouraged.  Should the coroutine nevertheless decide to "
"suppress the cancellation, it needs to call :meth:`Task.uncancel` in "
"addition to catching the exception."
msgstr ""
"Затем сопрограмма имеет возможность очистить или даже отклонить запрос, "
"подавив исключение с помощью блока :keyword:`try` ... ... ``кроме "
"CancelledError`` ... :keyword:`finally`. Таким образом, в отличие от :meth:"
"`Future.cancel`, :meth:`Task.cancel` не гарантирует, что Задача будет "
"отменена, хотя полное подавление отмены не является распространенным "
"явлением и активно не рекомендуется. Если сопрограмма все же решит подавить "
"отмену, в дополнение к перехвату исключения ей необходимо вызвать :meth:"
"`Task.uncancel`."

#: ../../library/asyncio-task.rst:1153
msgid "Added the *msg* parameter."
msgstr "Adicionado o  parâmetro *msg*."

#: ../../library/asyncio-task.rst:1156
msgid "The ``msg`` parameter is propagated from cancelled task to its awaiter."
msgstr "Параметр ``msg`` передается от отмененной задачи к ее ожидающему."

#: ../../library/asyncio-task.rst:1161
msgid ""
"The following example illustrates how coroutines can intercept the "
"cancellation request::"
msgstr ""
"O seguinte exemplo ilustra como corrotinas podem interceptar o cancelamento "
"de requisições::"

#: ../../library/asyncio-task.rst:1200
msgid "Return ``True`` if the Task is *cancelled*."
msgstr "Retorna ``True`` se a Tarefa for *cancelada*."

#: ../../library/asyncio-task.rst:1202
msgid ""
"The Task is *cancelled* when the cancellation was requested with :meth:"
"`cancel` and the wrapped coroutine propagated the :exc:`CancelledError` "
"exception thrown into it."
msgstr ""
"A Tarefa é *cancelada* quando o cancelamento foi requisitado com :meth:"
"`cancel` e a corrotina contida propagou a exceção :exc:`CancelledError` "
"gerada nela."

#: ../../library/asyncio-task.rst:1208
msgid "Decrement the count of cancellation requests to this Task."
msgstr "Уменьшите количество запросов на отмену этой задачи."

#: ../../library/asyncio-task.rst:1210
msgid "Returns the remaining number of cancellation requests."
msgstr "Возвращает оставшееся количество запросов на отмену."

#: ../../library/asyncio-task.rst:1212
msgid ""
"Note that once execution of a cancelled task completed, further calls to :"
"meth:`uncancel` are ineffective."
msgstr ""
"Обратите внимание, что после завершения выполнения отмененной задачи "
"дальнейшие вызовы :meth:`uncancel` становятся неэффективными."

#: ../../library/asyncio-task.rst:1217
msgid ""
"This method is used by asyncio's internals and isn't expected to be used by "
"end-user code.  In particular, if a Task gets successfully uncancelled, this "
"allows for elements of structured concurrency like :ref:`taskgroups` and :"
"func:`asyncio.timeout` to continue running, isolating cancellation to the "
"respective structured block. For example::"
msgstr ""
"Этот метод используется внутренними компонентами asyncio и не "
"предполагается, что он будет использоваться кодом конечного пользователя. В "
"частности, если Задача успешно отменена, это позволяет элементам "
"структурированного параллелизма, таким как :ref:`taskgroups` и :func:"
"`asyncio.timeout`, продолжать работу, изолируя отмену соответствующего "
"структурированного блока. Например::"

#: ../../library/asyncio-task.rst:1235
msgid ""
"While the block with ``make_request()`` and ``make_another_request()`` might "
"get cancelled due to the timeout, ``unrelated_code()`` should continue "
"running even in case of the timeout.  This is implemented with :meth:"
"`uncancel`.  :class:`TaskGroup` context managers use :func:`uncancel` in a "
"similar fashion."
msgstr ""
"Хотя блок с ``make_request()`` и ``make_another_request()`` может быть "
"отменен из-за таймаута, ``unrelated_code()`` должен продолжать работу даже в "
"случае таймаута. Это реализуется с помощью :meth:`uncancel`. Контекстные "
"менеджеры :class:`TaskGroup` используют :func:`uncancel` аналогичным образом."

#: ../../library/asyncio-task.rst:1241
msgid ""
"If end-user code is, for some reason, suppresing cancellation by catching :"
"exc:`CancelledError`, it needs to call this method to remove the "
"cancellation state."
msgstr ""

#: ../../library/asyncio-task.rst:1247
msgid ""
"Return the number of pending cancellation requests to this Task, i.e., the "
"number of calls to :meth:`cancel` less the number of :meth:`uncancel` calls."
msgstr ""
"Возвращает количество ожидающих запросов на отмену для этой задачи, т. е. "
"количество вызовов :meth:`cancel` за вычетом количества вызовов :meth:"
"`uncancel`."

#: ../../library/asyncio-task.rst:1251
msgid ""
"Note that if this number is greater than zero but the Task is still "
"executing, :meth:`cancelled` will still return ``False``. This is because "
"this number can be lowered by calling :meth:`uncancel`, which can lead to "
"the task not being cancelled after all if the cancellation requests go down "
"to zero."
msgstr ""
"Обратите внимание: если это число больше нуля, но Задача все еще "
"выполняется, :meth:`cancelled` всё равно вернет ``False``. Это связано с "
"тем, что это число можно уменьшить, вызвав :meth:`uncancel`, что может "
"привести к тому, что задача вообще не будет отменена, если запросы на отмену "
"упадут до нуля."

#: ../../library/asyncio-task.rst:1257
msgid ""
"This method is used by asyncio's internals and isn't expected to be used by "
"end-user code.  See :meth:`uncancel` for more details."
msgstr ""
"Этот метод используется внутренними компонентами asyncio и не "
"предполагается, что он будет использоваться кодом конечного пользователя. "
"См. :meth:`uncancel` для более подробной информации."
