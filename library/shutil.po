# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-04 14:20+0000\n"
"PO-Revision-Date: 2025-07-18 18:49+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/shutil.rst:2
msgid ":mod:`!shutil` --- High-level file operations"
msgstr ""

#: ../../library/shutil.rst:10
msgid "**Source code:** :source:`Lib/shutil.py`"
msgstr ""

#: ../../library/shutil.rst:18
msgid ""
"The :mod:`shutil` module offers a number of high-level operations on files "
"and collections of files.  In particular, functions are provided  which "
"support file copying and removal. For operations on individual files, see "
"also the :mod:`os` module."
msgstr ""

#: ../../library/shutil.rst:25
msgid ""
"Even the higher-level file copying functions (:func:`shutil.copy`, :func:"
"`shutil.copy2`) cannot copy all file metadata."
msgstr ""

#: ../../library/shutil.rst:28
msgid ""
"On POSIX platforms, this means that file owner and group are lost as well as "
"ACLs.  On Mac OS, the resource fork and other metadata are not used. This "
"means that resources will be lost and file type and creator codes will not "
"be correct. On Windows, file owners, ACLs and alternate data streams are not "
"copied."
msgstr ""

#: ../../library/shutil.rst:38
msgid "Directory and files operations"
msgstr ""

#: ../../library/shutil.rst:42
msgid ""
"Copy the contents of the :term:`file-like object <file object>` *fsrc* to "
"the file-like object *fdst*. The integer *length*, if given, is the buffer "
"size. In particular, a negative *length* value means to copy the data "
"without looping over the source data in chunks; by default the data is read "
"in chunks to avoid uncontrolled memory consumption. Note that if the current "
"file position of the *fsrc* object is not 0, only the contents from the "
"current file position to the end of the file will be copied."
msgstr ""

#: ../../library/shutil.rst:50
msgid ""
":func:`copyfileobj` will *not* guarantee that the destination stream has "
"been flushed on completion of the copy. If you want to read from the "
"destination at the completion of the copy operation (for example, reading "
"the contents of a temporary file that has been copied from a HTTP stream), "
"you must ensure that you have called :func:`~io.IOBase.flush` or :func:`~io."
"IOBase.close` on the file-like object before attempting to read the "
"destination file."
msgstr ""

#: ../../library/shutil.rst:60
msgid ""
"Copy the contents (no metadata) of the file named *src* to a file named "
"*dst* and return *dst* in the most efficient way possible. *src* and *dst* "
"are :term:`path-like objects <path-like object>` or path names given as "
"strings."
msgstr ""

#: ../../library/shutil.rst:64
msgid ""
"*dst* must be the complete target file name; look at :func:`~shutil.copy` "
"for a copy that accepts a target directory path.  If *src* and *dst* specify "
"the same file, :exc:`SameFileError` is raised."
msgstr ""

#: ../../library/shutil.rst:68
msgid ""
"The destination location must be writable; otherwise, an :exc:`OSError` "
"exception will be raised. If *dst* already exists, it will be replaced. "
"Special files such as character or block devices and pipes cannot be copied "
"with this function."
msgstr ""

#: ../../library/shutil.rst:73
msgid ""
"If *follow_symlinks* is false and *src* is a symbolic link, a new symbolic "
"link will be created instead of copying the file *src* points to."
msgstr ""

#: ../../library/shutil.rst:77 ../../library/shutil.rst:184
#: ../../library/shutil.rst:215
msgid ""
"Raises an :ref:`auditing event <auditing>` ``shutil.copyfile`` with "
"arguments ``src``, ``dst``."
msgstr ""

#: ../../library/shutil.rst:79
msgid ""
":exc:`IOError` used to be raised instead of :exc:`OSError`. Added "
"*follow_symlinks* argument. Now returns *dst*."
msgstr ""

#: ../../library/shutil.rst:84
msgid ""
"Raise :exc:`SameFileError` instead of :exc:`Error`.  Since the former is a "
"subclass of the latter, this change is backward compatible."
msgstr ""

#: ../../library/shutil.rst:88 ../../library/shutil.rst:192
#: ../../library/shutil.rst:224 ../../library/shutil.rst:294
#: ../../library/shutil.rst:407
msgid ""
"Platform-specific fast-copy syscalls may be used internally in order to copy "
"the file more efficiently. See :ref:`shutil-platform-dependent-efficient-"
"copy-operations` section."
msgstr ""

#: ../../library/shutil.rst:95
msgid ""
"This exception is raised if source and destination in :func:`copyfile` are "
"the same file."
msgstr ""

#: ../../library/shutil.rst:103
msgid ""
"Copy the permission bits from *src* to *dst*.  The file contents, owner, and "
"group are unaffected.  *src* and *dst* are :term:`path-like objects <path-"
"like object>` or path names given as strings. If *follow_symlinks* is false, "
"and both *src* and *dst* are symbolic links, :func:`copymode` will attempt "
"to modify the mode of *dst* itself (rather than the file it points to).  "
"This functionality is not available on every platform; please see :func:"
"`copystat` for more information.  If :func:`copymode` cannot modify symbolic "
"links on the local platform, and it is asked to do so, it will do nothing "
"and return."
msgstr ""

#: ../../library/shutil.rst:113 ../../library/shutil.rst:186
msgid ""
"Raises an :ref:`auditing event <auditing>` ``shutil.copymode`` with "
"arguments ``src``, ``dst``."
msgstr ""

#: ../../library/shutil.rst:115
msgid "Added *follow_symlinks* argument."
msgstr ""

#: ../../library/shutil.rst:120
msgid ""
"Copy the permission bits, last access time, last modification time, and "
"flags from *src* to *dst*.  On Linux, :func:`copystat` also copies the "
"\"extended attributes\" where possible.  The file contents, owner, and group "
"are unaffected.  *src* and *dst* are :term:`path-like objects <path-like "
"object>` or path names given as strings."
msgstr ""

#: ../../library/shutil.rst:126
msgid ""
"If *follow_symlinks* is false, and *src* and *dst* both refer to symbolic "
"links, :func:`copystat` will operate on the symbolic links themselves rather "
"than the files the symbolic links refer toâ€”reading the information from the "
"*src* symbolic link, and writing the information to the *dst* symbolic link."
msgstr ""

#: ../../library/shutil.rst:135
msgid ""
"Not all platforms provide the ability to examine and modify symbolic links.  "
"Python itself can tell you what functionality is locally available."
msgstr ""

#: ../../library/shutil.rst:139
msgid ""
"If ``os.chmod in os.supports_follow_symlinks`` is ``True``, :func:`copystat` "
"can modify the permission bits of a symbolic link."
msgstr ""

#: ../../library/shutil.rst:143
msgid ""
"If ``os.utime in os.supports_follow_symlinks`` is ``True``, :func:`copystat` "
"can modify the last access and modification times of a symbolic link."
msgstr ""

#: ../../library/shutil.rst:147
msgid ""
"If ``os.chflags in os.supports_follow_symlinks`` is ``True``, :func:"
"`copystat` can modify the flags of a symbolic link.  (``os.chflags`` is not "
"available on all platforms.)"
msgstr ""

#: ../../library/shutil.rst:152
msgid ""
"On platforms where some or all of this functionality is unavailable, when "
"asked to modify a symbolic link, :func:`copystat` will copy everything it "
"can. :func:`copystat` never returns failure."
msgstr ""

#: ../../library/shutil.rst:157
msgid "Please see :data:`os.supports_follow_symlinks` for more information."
msgstr ""

#: ../../library/shutil.rst:160 ../../library/shutil.rst:217
msgid ""
"Raises an :ref:`auditing event <auditing>` ``shutil.copystat`` with "
"arguments ``src``, ``dst``."
msgstr ""

#: ../../library/shutil.rst:162
msgid ""
"Added *follow_symlinks* argument and support for Linux extended attributes."
msgstr ""

#: ../../library/shutil.rst:167
msgid ""
"Copies the file *src* to the file or directory *dst*.  *src* and *dst* "
"should be :term:`path-like objects <path-like object>` or strings.  If *dst* "
"specifies a directory, the file will be copied into *dst* using the base "
"filename from *src*. If *dst* specifies a file that already exists, it will "
"be replaced. Returns the path to the newly created file."
msgstr ""

#: ../../library/shutil.rst:173
msgid ""
"If *follow_symlinks* is false, and *src* is a symbolic link, *dst* will be "
"created as a symbolic link.  If *follow_symlinks* is true and *src* is a "
"symbolic link, *dst* will be a copy of the file *src* refers to."
msgstr ""

#: ../../library/shutil.rst:178
msgid ""
":func:`~shutil.copy` copies the file data and the file's permission mode "
"(see :func:`os.chmod`).  Other metadata, like the file's creation and "
"modification times, is not preserved. To preserve all file metadata from the "
"original, use :func:`~shutil.copy2` instead."
msgstr ""

#: ../../library/shutil.rst:188
msgid ""
"Added *follow_symlinks* argument. Now returns path to the newly created file."
msgstr ""

#: ../../library/shutil.rst:199
msgid ""
"Identical to :func:`~shutil.copy` except that :func:`copy2` also attempts to "
"preserve file metadata."
msgstr ""

#: ../../library/shutil.rst:202
msgid ""
"When *follow_symlinks* is false, and *src* is a symbolic link, :func:`copy2` "
"attempts to copy all metadata from the *src* symbolic link to the newly "
"created *dst* symbolic link. However, this functionality is not available on "
"all platforms. On platforms where some or all of this functionality is "
"unavailable, :func:`copy2` will preserve all the metadata it can; :func:"
"`copy2` never raises an exception because it cannot preserve file metadata."
msgstr ""

#: ../../library/shutil.rst:211
msgid ""
":func:`copy2` uses :func:`copystat` to copy the file metadata. Please see :"
"func:`copystat` for more information about platform support for modifying "
"symbolic link metadata."
msgstr ""

#: ../../library/shutil.rst:219
msgid ""
"Added *follow_symlinks* argument, try to copy extended file system "
"attributes too (currently Linux only). Now returns path to the newly created "
"file."
msgstr ""

#: ../../library/shutil.rst:231
msgid ""
"This factory function creates a function that can be used as a callable for :"
"func:`copytree`\\'s *ignore* argument, ignoring files and directories that "
"match one of the glob-style *patterns* provided.  See the example below."
msgstr ""

#: ../../library/shutil.rst:240
msgid ""
"Recursively copy an entire directory tree rooted at *src* to a directory "
"named *dst* and return the destination directory.  All intermediate "
"directories needed to contain *dst* will also be created by default."
msgstr ""

#: ../../library/shutil.rst:244
msgid ""
"Permissions and times of directories are copied with :func:`copystat`, "
"individual files are copied using :func:`~shutil.copy2`."
msgstr ""

#: ../../library/shutil.rst:247
msgid ""
"If *symlinks* is true, symbolic links in the source tree are represented as "
"symbolic links in the new tree and the metadata of the original links will "
"be copied as far as the platform allows; if false or omitted, the contents "
"and metadata of the linked files are copied to the new tree."
msgstr ""

#: ../../library/shutil.rst:252
msgid ""
"When *symlinks* is false, if the file pointed to by the symlink doesn't "
"exist, an exception will be added in the list of errors raised in an :exc:"
"`Error` exception at the end of the copy process. You can set the optional "
"*ignore_dangling_symlinks* flag to true if you want to silence this "
"exception. Notice that this option has no effect on platforms that don't "
"support :func:`os.symlink`."
msgstr ""

#: ../../library/shutil.rst:259
msgid ""
"If *ignore* is given, it must be a callable that will receive as its "
"arguments the directory being visited by :func:`copytree`, and a list of its "
"contents, as returned by :func:`os.listdir`.  Since :func:`copytree` is "
"called recursively, the *ignore* callable will be called once for each "
"directory that is copied.  The callable must return a sequence of directory "
"and file names relative to the current directory (i.e. a subset of the items "
"in its second argument); these names will then be ignored in the copy "
"process.  :func:`ignore_patterns` can be used to create such a callable that "
"ignores names based on glob-style patterns."
msgstr ""

#: ../../library/shutil.rst:269
msgid ""
"If exception(s) occur, an :exc:`Error` is raised with a list of reasons."
msgstr ""

#: ../../library/shutil.rst:271
msgid ""
"If *copy_function* is given, it must be a callable that will be used to copy "
"each file. It will be called with the source path and the destination path "
"as arguments. By default, :func:`~shutil.copy2` is used, but any function "
"that supports the same signature (like :func:`~shutil.copy`) can be used."
msgstr ""

#: ../../library/shutil.rst:276
msgid ""
"If *dirs_exist_ok* is false (the default) and *dst* already exists, a :exc:"
"`FileExistsError` is raised. If *dirs_exist_ok* is true, the copying "
"operation will continue if it encounters existing directories, and files "
"within the *dst* tree will be overwritten by corresponding files from the "
"*src* tree."
msgstr ""

#: ../../library/shutil.rst:282
msgid ""
"Raises an :ref:`auditing event <auditing>` ``shutil.copytree`` with "
"arguments ``src``, ``dst``."
msgstr ""

#: ../../library/shutil.rst:284
msgid ""
"Added the *copy_function* argument to be able to provide a custom copy "
"function. Added the *ignore_dangling_symlinks* argument to silence dangling "
"symlinks errors when *symlinks* is false."
msgstr ""

#: ../../library/shutil.rst:290
msgid "Copy metadata when *symlinks* is false. Now returns *dst*."
msgstr ""

#: ../../library/shutil.rst:299
msgid "Added the *dirs_exist_ok* parameter."
msgstr ""

#: ../../library/shutil.rst:306
msgid ""
"Delete an entire directory tree; *path* must point to a directory (but not a "
"symbolic link to a directory).  If *ignore_errors* is true, errors resulting "
"from failed removals will be ignored; if false or omitted, such errors are "
"handled by calling a handler specified by *onexc* or *onerror* or, if both "
"are omitted, exceptions are propagated to the caller."
msgstr ""

#: ../../library/shutil.rst:312
msgid ""
"This function can support :ref:`paths relative to directory descriptors "
"<dir_fd>`."
msgstr ""

#: ../../library/shutil.rst:317
msgid ""
"On platforms that support the necessary fd-based functions a symlink attack "
"resistant version of :func:`rmtree` is used by default.  On other platforms, "
"the :func:`rmtree` implementation is susceptible to a symlink attack: given "
"proper timing and circumstances, attackers can manipulate symlinks on the "
"filesystem to delete files they wouldn't be able to access otherwise.  "
"Applications can use the :data:`rmtree.avoids_symlink_attacks` function "
"attribute to determine which case applies."
msgstr ""

#: ../../library/shutil.rst:325
msgid ""
"If *onexc* is provided, it must be a callable that accepts three parameters: "
"*function*, *path*, and *excinfo*."
msgstr ""

#: ../../library/shutil.rst:328
msgid ""
"The first parameter, *function*, is the function which raised the exception; "
"it depends on the platform and implementation.  The second parameter, "
"*path*, will be the path name passed to *function*.  The third parameter, "
"*excinfo*, is the exception that was raised. Exceptions raised by *onexc* "
"will not be caught."
msgstr ""

#: ../../library/shutil.rst:334
msgid ""
"The deprecated *onerror* is similar to *onexc*, except that the third "
"parameter it receives is the tuple returned from :func:`sys.exc_info`."
msgstr ""

#: ../../library/shutil.rst:338
msgid ""
":ref:`shutil-rmtree-example` for an example of handling the removal of a "
"directory tree that contains read-only files."
msgstr ""

#: ../../library/shutil.rst:341
msgid ""
"Raises an :ref:`auditing event <auditing>` ``shutil.rmtree`` with arguments "
"``path``, ``dir_fd``."
msgstr ""

#: ../../library/shutil.rst:343
msgid ""
"Added a symlink attack resistant version that is used automatically if "
"platform supports fd-based functions."
msgstr ""

#: ../../library/shutil.rst:347
msgid ""
"On Windows, will no longer delete the contents of a directory junction "
"before removing the junction."
msgstr ""

#: ../../library/shutil.rst:351
msgid "Added the *dir_fd* parameter."
msgstr ""

#: ../../library/shutil.rst:354
msgid "Added the *onexc* parameter, deprecated *onerror*."
msgstr ""

#: ../../library/shutil.rst:357
msgid ""
":func:`!rmtree` now ignores :exc:`FileNotFoundError` exceptions for all but "
"the top-level path. Exceptions other than :exc:`OSError` and subclasses of :"
"exc:`!OSError` are now always propagated to the caller."
msgstr ""

#: ../../library/shutil.rst:365
msgid ""
"Indicates whether the current platform and implementation provides a symlink "
"attack resistant version of :func:`rmtree`.  Currently this is only true for "
"platforms supporting fd-based directory access functions."
msgstr ""

#: ../../library/shutil.rst:374
msgid ""
"Recursively move a file or directory (*src*) to another location and return "
"the destination."
msgstr ""

#: ../../library/shutil.rst:377
msgid ""
"If *dst* is an existing directory or a symlink to a directory, then *src* is "
"moved inside that directory. The destination path in that directory must not "
"already exist."
msgstr ""

#: ../../library/shutil.rst:381
msgid ""
"If *dst* already exists but is not a directory, it may be overwritten "
"depending on :func:`os.rename` semantics."
msgstr ""

#: ../../library/shutil.rst:384
msgid ""
"If the destination is on the current filesystem, then :func:`os.rename` is "
"used. Otherwise, *src* is copied to the destination using *copy_function* "
"and then removed.  In case of symlinks, a new symlink pointing to the target "
"of *src* will be created as the destination and *src* will be removed."
msgstr ""

#: ../../library/shutil.rst:389
msgid ""
"If *copy_function* is given, it must be a callable that takes two arguments, "
"*src* and the destination, and will be used to copy *src* to the destination "
"if :func:`os.rename` cannot be used.  If the source is a directory, :func:"
"`copytree` is called, passing it the *copy_function*. The default "
"*copy_function* is :func:`copy2`.  Using :func:`~shutil.copy` as the "
"*copy_function* allows the move to succeed when it is not possible to also "
"copy the metadata, at the expense of not copying any of the metadata."
msgstr ""

#: ../../library/shutil.rst:397
msgid ""
"Raises an :ref:`auditing event <auditing>` ``shutil.move`` with arguments "
"``src``, ``dst``."
msgstr ""

#: ../../library/shutil.rst:399
msgid ""
"Added explicit symlink handling for foreign filesystems, thus adapting it to "
"the behavior of GNU's :program:`mv`. Now returns *dst*."
msgstr ""

#: ../../library/shutil.rst:404
msgid "Added the *copy_function* keyword argument."
msgstr ""

#: ../../library/shutil.rst:412
msgid "Accepts a :term:`path-like object` for both *src* and *dst*."
msgstr ""

#: ../../library/shutil.rst:417
msgid ""
"Return disk usage statistics about the given path as a :term:`named tuple` "
"with the attributes *total*, *used* and *free*, which are the amount of "
"total, used and free space, in bytes. *path* may be a file or a directory."
msgstr ""

#: ../../library/shutil.rst:424
msgid ""
"On Unix filesystems, *path* must point to a path within a **mounted** "
"filesystem partition. On those platforms, CPython doesn't attempt to "
"retrieve disk usage information from non-mounted filesystems."
msgstr ""

#: ../../library/shutil.rst:430
msgid "On Windows, *path* can now be a file or directory."
msgstr ""

#: ../../library/shutil.rst:433 ../../library/shutil.rst:447
msgid "Availability"
msgstr "Disponibilidade"

#: ../../library/shutil.rst:438
msgid "Change owner *user* and/or *group* of the given *path*."
msgstr ""

#: ../../library/shutil.rst:440
msgid ""
"*user* can be a system user name or a uid; the same applies to *group*. At "
"least one argument is required."
msgstr ""

#: ../../library/shutil.rst:443
msgid "See also :func:`os.chown`, the underlying function."
msgstr ""

#: ../../library/shutil.rst:445
msgid ""
"Raises an :ref:`auditing event <auditing>` ``shutil.chown`` with arguments "
"``path``, ``user``, ``group``."
msgstr ""

#: ../../library/shutil.rst:451
msgid "Added *dir_fd* and *follow_symlinks* parameters."
msgstr ""

#: ../../library/shutil.rst:457
msgid ""
"Return the path to an executable which would be run if the given *cmd* was "
"called.  If no *cmd* would be called, return ``None``."
msgstr ""

#: ../../library/shutil.rst:460
msgid ""
"*mode* is a permission mask passed to :func:`os.access`, by default "
"determining if the file exists and is executable."
msgstr ""

#: ../../library/shutil.rst:463
msgid ""
"*path* is a \"``PATH`` string\" specifying the directories to look in, "
"delimited by :data:`os.pathsep`. When no *path* is specified, the :envvar:"
"`PATH` environment variable is read from :data:`os.environ`, falling back "
"to :data:`os.defpath` if it is not set."
msgstr ""

#: ../../library/shutil.rst:468
msgid ""
"If *cmd* contains a directory component, :func:`!which` only checks the "
"specified path directly and does not search the directories listed in *path* "
"or in the system's :envvar:`PATH` environment variable."
msgstr ""

#: ../../library/shutil.rst:472
msgid ""
"On Windows, the current directory is prepended to the *path* if *mode* does "
"not include ``os.X_OK``. When the *mode* does include ``os.X_OK``, the "
"Windows API ``NeedCurrentDirectoryForExePathW`` will be consulted to "
"determine if the current directory should be prepended to *path*. To avoid "
"consulting the current working directory for executables: set the "
"environment variable ``NoDefaultCurrentDirectoryInExePath``."
msgstr ""

#: ../../library/shutil.rst:479
msgid ""
"Also on Windows, the :envvar:`PATHEXT` environment variable is used to "
"resolve commands that may not already include an extension. For example, if "
"you call ``shutil.which(\"python\")``, :func:`which` will search ``PATHEXT`` "
"to know that it should look for ``python.exe`` within the *path* "
"directories. For example, on Windows::"
msgstr ""

#: ../../library/shutil.rst:485
msgid ""
">>> shutil.which(\"python\")\n"
"'C:\\\\Python33\\\\python.EXE'"
msgstr ""

#: ../../library/shutil.rst:488
msgid ""
"This is also applied when *cmd* is a path that contains a directory "
"component::"
msgstr ""

#: ../../library/shutil.rst:491
msgid ""
">>> shutil.which(\"C:\\\\Python33\\\\python\")\n"
"'C:\\\\Python33\\\\python.EXE'"
msgstr ""

#: ../../library/shutil.rst:496
msgid ""
"The :class:`bytes` type is now accepted.  If *cmd* type is :class:`bytes`, "
"the result type is also :class:`bytes`."
msgstr ""

#: ../../library/shutil.rst:500
msgid ""
"On Windows, the current directory is no longer prepended to the search path "
"if *mode* includes ``os.X_OK`` and WinAPI "
"``NeedCurrentDirectoryForExePathW(cmd)`` is false, else the current "
"directory is prepended even if it is already in the search path; ``PATHEXT`` "
"is used now even when *cmd* includes a directory component or ends with an "
"extension that is in ``PATHEXT``; and filenames that have no extension can "
"now be found."
msgstr ""

#: ../../library/shutil.rst:511
msgid ""
"This exception collects exceptions that are raised during a multi-file "
"operation. For :func:`copytree`, the exception argument is a list of 3-"
"tuples (*srcname*, *dstname*, *exception*)."
msgstr ""

#: ../../library/shutil.rst:518
msgid "Platform-dependent efficient copy operations"
msgstr ""

#: ../../library/shutil.rst:520
msgid ""
"Starting from Python 3.8, all functions involving a file copy (:func:"
"`copyfile`, :func:`~shutil.copy`, :func:`copy2`, :func:`copytree`, and :func:"
"`move`) may use platform-specific \"fast-copy\" syscalls in order to copy "
"the file more efficiently (see :issue:`33671`). \"fast-copy\" means that the "
"copying operation occurs within the kernel, avoiding the use of userspace "
"buffers in Python as in \"``outfd.write(infd.read())``\"."
msgstr ""

#: ../../library/shutil.rst:528
msgid "On macOS `fcopyfile`_ is used to copy the file content (not metadata)."
msgstr ""

#: ../../library/shutil.rst:530
msgid "On Linux :func:`os.copy_file_range` or :func:`os.sendfile` is used."
msgstr ""

#: ../../library/shutil.rst:532
msgid "On Solaris :func:`os.sendfile` is used."
msgstr ""

#: ../../library/shutil.rst:534
msgid ""
"On Windows :func:`shutil.copyfile` uses a bigger default buffer size (1 MiB "
"instead of 64 KiB) and a :func:`memoryview`-based variant of :func:`shutil."
"copyfileobj` is used."
msgstr ""

#: ../../library/shutil.rst:538
msgid ""
"If the fast-copy operation fails and no data was written in the destination "
"file then shutil will silently fallback on using less efficient :func:"
"`copyfileobj` function internally."
msgstr ""

#: ../../library/shutil.rst:544
msgid "Solaris now uses :func:`os.sendfile`."
msgstr ""

#: ../../library/shutil.rst:547
msgid ""
"Copy-on-write or server-side copy may be used internally via :func:`os."
"copy_file_range` on supported Linux filesystems."
msgstr ""

#: ../../library/shutil.rst:554
msgid "copytree example"
msgstr ""

#: ../../library/shutil.rst:556
msgid "An example that uses the :func:`ignore_patterns` helper::"
msgstr ""

#: ../../library/shutil.rst:558
msgid ""
"from shutil import copytree, ignore_patterns\n"
"\n"
"copytree(source, destination, ignore=ignore_patterns('*.pyc', 'tmp*'))"
msgstr ""

#: ../../library/shutil.rst:562
msgid ""
"This will copy everything except ``.pyc`` files and files or directories "
"whose name starts with ``tmp``."
msgstr ""

#: ../../library/shutil.rst:565
msgid "Another example that uses the *ignore* argument to add a logging call::"
msgstr ""

#: ../../library/shutil.rst:567
msgid ""
"from shutil import copytree\n"
"import logging\n"
"\n"
"def _logpath(path, names):\n"
"    logging.info('Working in %s', path)\n"
"    return []   # nothing will be ignored\n"
"\n"
"copytree(source, destination, ignore=_logpath)"
msgstr ""

#: ../../library/shutil.rst:580
msgid "rmtree example"
msgstr ""

#: ../../library/shutil.rst:582
msgid ""
"This example shows how to remove a directory tree on Windows where some of "
"the files have their read-only bit set. It uses the onexc callback to clear "
"the readonly bit and reattempt the remove. Any subsequent failure will "
"propagate. ::"
msgstr ""

#: ../../library/shutil.rst:587
msgid ""
"import os, stat\n"
"import shutil\n"
"\n"
"def remove_readonly(func, path, _):\n"
"    \"Clear the readonly bit and reattempt the removal\"\n"
"    os.chmod(path, stat.S_IWRITE)\n"
"    func(path)\n"
"\n"
"shutil.rmtree(directory, onexc=remove_readonly)"
msgstr ""

#: ../../library/shutil.rst:600
msgid "Archiving operations"
msgstr ""

#: ../../library/shutil.rst:604
msgid "Added support for the *xztar* format."
msgstr ""

#: ../../library/shutil.rst:608
msgid ""
"High-level utilities to create and read compressed and archived files are "
"also provided.  They rely on the :mod:`zipfile` and :mod:`tarfile` modules."
msgstr ""

#: ../../library/shutil.rst:613
msgid "Create an archive file (such as zip or tar) and return its name."
msgstr ""

#: ../../library/shutil.rst:615
msgid ""
"*base_name* is the name of the file to create, including the path, minus any "
"format-specific extension."
msgstr ""

#: ../../library/shutil.rst:618
msgid ""
"*format* is the archive format: one of \"zip\" (if the :mod:`zlib` module is "
"available), \"tar\", \"gztar\" (if the :mod:`zlib` module is available), "
"\"bztar\" (if the :mod:`bz2` module is available), \"xztar\" (if the :mod:"
"`lzma` module is available), or \"zstdtar\" (if the :mod:`compression.zstd` "
"module is available)."
msgstr ""

#: ../../library/shutil.rst:624
msgid ""
"*root_dir* is a directory that will be the root directory of the archive, "
"all paths in the archive will be relative to it; for example, we typically "
"chdir into *root_dir* before creating the archive."
msgstr ""

#: ../../library/shutil.rst:628
msgid ""
"*base_dir* is the directory where we start archiving from; i.e. *base_dir* "
"will be the common prefix of all files and directories in the archive.  "
"*base_dir* must be given relative to *root_dir*.  See :ref:`shutil-archiving-"
"example-with-basedir` for how to use *base_dir* and *root_dir* together."
msgstr ""

#: ../../library/shutil.rst:634
msgid "*root_dir* and *base_dir* both default to the current directory."
msgstr ""

#: ../../library/shutil.rst:636
msgid ""
"If *dry_run* is true, no archive is created, but the operations that would "
"be executed are logged to *logger*."
msgstr ""

#: ../../library/shutil.rst:639
msgid ""
"*owner* and *group* are used when creating a tar archive. By default, uses "
"the current owner and group."
msgstr ""

#: ../../library/shutil.rst:642
msgid ""
"*logger* must be an object compatible with :pep:`282`, usually an instance "
"of :class:`logging.Logger`."
msgstr ""

#: ../../library/shutil.rst:645
msgid "The *verbose* argument is unused and deprecated."
msgstr ""

#: ../../library/shutil.rst:647
msgid ""
"Raises an :ref:`auditing event <auditing>` ``shutil.make_archive`` with "
"arguments ``base_name``, ``format``, ``root_dir``, ``base_dir``."
msgstr ""

#: ../../library/shutil.rst:651
msgid ""
"This function is not thread-safe when custom archivers registered with :func:"
"`register_archive_format` do not support the *root_dir* argument.  In this "
"case it temporarily changes the current working directory of the process to "
"*root_dir* to perform archiving."
msgstr ""

#: ../../library/shutil.rst:657
msgid ""
"The modern pax (POSIX.1-2001) format is now used instead of the legacy GNU "
"format for archives created with ``format=\"tar\"``."
msgstr ""

#: ../../library/shutil.rst:661
msgid ""
"This function is now made thread-safe during creation of standard ``.zip`` "
"and tar archives."
msgstr ""

#: ../../library/shutil.rst:667
msgid ""
"Return a list of supported formats for archiving. Each element of the "
"returned sequence is a tuple ``(name, description)``."
msgstr ""

#: ../../library/shutil.rst:670 ../../library/shutil.rst:787
msgid "By default :mod:`shutil` provides these formats:"
msgstr ""

#: ../../library/shutil.rst:672
msgid "*zip*: ZIP file (if the :mod:`zlib` module is available)."
msgstr ""

#: ../../library/shutil.rst:673
msgid ""
"*tar*: Uncompressed tar file. Uses POSIX.1-2001 pax format for new archives."
msgstr ""

#: ../../library/shutil.rst:674 ../../library/shutil.rst:792
msgid "*gztar*: gzip'ed tar-file (if the :mod:`zlib` module is available)."
msgstr ""

#: ../../library/shutil.rst:675 ../../library/shutil.rst:793
msgid "*bztar*: bzip2'ed tar-file (if the :mod:`bz2` module is available)."
msgstr ""

#: ../../library/shutil.rst:676 ../../library/shutil.rst:794
msgid "*xztar*: xz'ed tar-file (if the :mod:`lzma` module is available)."
msgstr ""

#: ../../library/shutil.rst:677 ../../library/shutil.rst:795
msgid ""
"*zstdtar*: Zstandard compressed tar-file (if the :mod:`compression.zstd` "
"module is available)."
msgstr ""

#: ../../library/shutil.rst:680
msgid ""
"You can register new formats or provide your own archiver for any existing "
"formats, by using :func:`register_archive_format`."
msgstr ""

#: ../../library/shutil.rst:686
msgid "Register an archiver for the format *name*."
msgstr ""

#: ../../library/shutil.rst:688
msgid ""
"*function* is the callable that will be used to unpack archives. The "
"callable will receive the *base_name* of the file to create, followed by the "
"*base_dir* (which defaults to :data:`os.curdir`) to start archiving from. "
"Further arguments are passed as keyword arguments: *owner*, *group*, "
"*dry_run* and *logger* (as passed in :func:`make_archive`)."
msgstr ""

#: ../../library/shutil.rst:694
msgid ""
"If *function* has the custom attribute ``function.supports_root_dir`` set to "
"``True``, the *root_dir* argument is passed as a keyword argument. Otherwise "
"the current working directory of the process is temporarily changed to "
"*root_dir* before calling *function*. In this case :func:`make_archive` is "
"not thread-safe."
msgstr ""

#: ../../library/shutil.rst:700
msgid ""
"If given, *extra_args* is a sequence of ``(name, value)`` pairs that will be "
"used as extra keywords arguments when the archiver callable is used."
msgstr ""

#: ../../library/shutil.rst:703
msgid ""
"*description* is used by :func:`get_archive_formats` which returns the list "
"of archivers.  Defaults to an empty string."
msgstr ""

#: ../../library/shutil.rst:706
msgid "Added support for functions supporting the *root_dir* argument."
msgstr ""

#: ../../library/shutil.rst:712
msgid "Remove the archive format *name* from the list of supported formats."
msgstr ""

#: ../../library/shutil.rst:717
msgid "Unpack an archive. *filename* is the full path of the archive."
msgstr ""

#: ../../library/shutil.rst:719
msgid ""
"*extract_dir* is the name of the target directory where the archive is "
"unpacked. If not provided, the current working directory is used."
msgstr ""

#: ../../library/shutil.rst:722
msgid ""
"*format* is the archive format: one of \"zip\", \"tar\", \"gztar\", "
"\"bztar\", \"xztar\", or \"zstdtar\".  Or any other format registered with :"
"func:`register_unpack_format`.  If not provided, :func:`unpack_archive` will "
"use the archive file name extension and see if an unpacker was registered "
"for that extension.  In case none is found, a :exc:`ValueError` is raised."
msgstr ""

#: ../../library/shutil.rst:729
msgid ""
"The keyword-only *filter* argument is passed to the underlying unpacking "
"function. For zip files, *filter* is not accepted. For tar files, it is "
"recommended to use ``'data'`` (default since Python 3.14), unless using "
"features specific to tar and UNIX-like filesystems. (See :ref:`tarfile-"
"extraction-filter` for details.)"
msgstr ""

#: ../../library/shutil.rst:735
msgid ""
"Raises an :ref:`auditing event <auditing>` ``shutil.unpack_archive`` with "
"arguments ``filename``, ``extract_dir``, ``format``."
msgstr ""

#: ../../library/shutil.rst:739
msgid ""
"Never extract archives from untrusted sources without prior inspection. It "
"is possible that files are created outside of the path specified in the "
"*extract_dir* argument, e.g. members that have absolute filenames starting "
"with \"/\" or filenames with two dots \"..\"."
msgstr ""

#: ../../library/shutil.rst:744
msgid ""
"Since Python 3.14, the defaults for both built-in formats (zip and tar "
"files) will prevent the most dangerous of such security issues, but will not "
"prevent *all* unintended behavior. Read the :ref:`tarfile-further-"
"verification` section for tar-specific details."
msgstr ""

#: ../../library/shutil.rst:750
msgid "Accepts a :term:`path-like object` for *filename* and *extract_dir*."
msgstr ""

#: ../../library/shutil.rst:753
msgid "Added the *filter* argument."
msgstr ""

#: ../../library/shutil.rst:758
msgid ""
"Registers an unpack format. *name* is the name of the format and "
"*extensions* is a list of extensions corresponding to the format, like ``."
"zip`` for Zip files."
msgstr ""

#: ../../library/shutil.rst:762
msgid ""
"*function* is the callable that will be used to unpack archives. The "
"callable will receive:"
msgstr ""

#: ../../library/shutil.rst:765
msgid "the path of the archive, as a positional argument;"
msgstr ""

#: ../../library/shutil.rst:766
msgid ""
"the directory the archive must be extracted to, as a positional argument;"
msgstr ""

#: ../../library/shutil.rst:767
msgid ""
"possibly a *filter* keyword argument, if it was given to :func:"
"`unpack_archive`;"
msgstr ""

#: ../../library/shutil.rst:769
msgid ""
"additional keyword arguments, specified by *extra_args* as a sequence of "
"``(name, value)`` tuples."
msgstr ""

#: ../../library/shutil.rst:772
msgid ""
"*description* can be provided to describe the format, and will be returned "
"by the :func:`get_unpack_formats` function."
msgstr ""

#: ../../library/shutil.rst:778
msgid "Unregister an unpack format. *name* is the name of the format."
msgstr ""

#: ../../library/shutil.rst:783
msgid ""
"Return a list of all registered formats for unpacking. Each element of the "
"returned sequence is a tuple ``(name, extensions, description)``."
msgstr ""

#: ../../library/shutil.rst:789
msgid ""
"*zip*: ZIP file (unpacking compressed files works only if the corresponding "
"module is available)."
msgstr ""

#: ../../library/shutil.rst:791
msgid "*tar*: uncompressed tar file."
msgstr ""

#: ../../library/shutil.rst:798
msgid ""
"You can register new formats or provide your own unpacker for any existing "
"formats, by using :func:`register_unpack_format`."
msgstr ""

#: ../../library/shutil.rst:805
msgid "Archiving example"
msgstr ""

#: ../../library/shutil.rst:807
msgid ""
"In this example, we create a gzip'ed tar-file archive containing all files "
"found in the :file:`.ssh` directory of the user::"
msgstr ""

#: ../../library/shutil.rst:810
msgid ""
">>> from shutil import make_archive\n"
">>> import os\n"
">>> archive_name = os.path.expanduser(os.path.join('~', 'myarchive'))\n"
">>> root_dir = os.path.expanduser(os.path.join('~', '.ssh'))\n"
">>> make_archive(archive_name, 'gztar', root_dir)\n"
"'/Users/tarek/myarchive.tar.gz'"
msgstr ""

#: ../../library/shutil.rst:817
msgid "The resulting archive contains:"
msgstr ""

#: ../../library/shutil.rst:819
msgid ""
"$ tar -tzvf /Users/tarek/myarchive.tar.gz\n"
"drwx------ tarek/staff       0 2010-02-01 16:23:40 ./\n"
"-rw-r--r-- tarek/staff     609 2008-06-09 13:26:54 ./authorized_keys\n"
"-rwxr-xr-x tarek/staff      65 2008-06-09 13:26:54 ./config\n"
"-rwx------ tarek/staff     668 2008-06-09 13:26:54 ./id_dsa\n"
"-rwxr-xr-x tarek/staff     609 2008-06-09 13:26:54 ./id_dsa.pub\n"
"-rw------- tarek/staff    1675 2008-06-09 13:26:54 ./id_rsa\n"
"-rw-r--r-- tarek/staff     397 2008-06-09 13:26:54 ./id_rsa.pub\n"
"-rw-r--r-- tarek/staff   37192 2010-02-06 18:23:10 ./known_hosts"
msgstr ""

#: ../../library/shutil.rst:835
msgid "Archiving example with *base_dir*"
msgstr ""

#: ../../library/shutil.rst:837
msgid ""
"In this example, similar to the `one above <shutil-archiving-example_>`_, we "
"show how to use :func:`make_archive`, but this time with the usage of "
"*base_dir*.  We now have the following directory structure:"
msgstr ""

#: ../../library/shutil.rst:841
msgid ""
"$ tree tmp\n"
"tmp\n"
"â””â”€â”€ root\n"
"    â””â”€â”€ structure\n"
"        â”œâ”€â”€ content\n"
"            â””â”€â”€ please_add.txt\n"
"        â””â”€â”€ do_not_add.txt"
msgstr ""

#: ../../library/shutil.rst:851
msgid ""
"In the final archive, :file:`please_add.txt` should be included, but :file:"
"`do_not_add.txt` should not.  Therefore we use the following::"
msgstr ""

#: ../../library/shutil.rst:854
msgid ""
">>> from shutil import make_archive\n"
">>> import os\n"
">>> archive_name = os.path.expanduser(os.path.join('~', 'myarchive'))\n"
">>> make_archive(\n"
"...     archive_name,\n"
"...     'tar',\n"
"...     root_dir='tmp/root',\n"
"...     base_dir='structure/content',\n"
"... )\n"
"'/Users/tarek/my_archive.tar'"
msgstr ""

#: ../../library/shutil.rst:865
msgid "Listing the files in the resulting archive gives us:"
msgstr ""

#: ../../library/shutil.rst:867
msgid ""
"$ python -m tarfile -l /Users/tarek/myarchive.tar\n"
"structure/content/\n"
"structure/content/please_add.txt"
msgstr ""

#: ../../library/shutil.rst:875
msgid "Querying the size of the output terminal"
msgstr ""

#: ../../library/shutil.rst:879
msgid "Get the size of the terminal window."
msgstr ""

#: ../../library/shutil.rst:881
msgid ""
"For each of the two dimensions, the environment variable, ``COLUMNS`` and "
"``LINES`` respectively, is checked. If the variable is defined and the value "
"is a positive integer, it is used."
msgstr ""

#: ../../library/shutil.rst:885
msgid ""
"When ``COLUMNS`` or ``LINES`` is not defined, which is the common case, the "
"terminal connected to :data:`sys.__stdout__` is queried by invoking :func:"
"`os.get_terminal_size`."
msgstr ""

#: ../../library/shutil.rst:889
msgid ""
"If the terminal size cannot be successfully queried, either because the "
"system doesn't support querying, or because we are not connected to a "
"terminal, the value given in ``fallback`` parameter is used. ``fallback`` "
"defaults to ``(80, 24)`` which is the default size used by many terminal "
"emulators."
msgstr ""

#: ../../library/shutil.rst:895
msgid "The value returned is a named tuple of type :class:`os.terminal_size`."
msgstr ""

#: ../../library/shutil.rst:897
msgid ""
"See also: The Single UNIX Specification, Version 2, `Other Environment "
"Variables`_."
msgstr ""

#: ../../library/shutil.rst:902
msgid ""
"The ``fallback`` values are also used if :func:`os.get_terminal_size` "
"returns zeroes."
msgstr ""

#: ../../library/shutil.rst:12
msgid "file"
msgstr "arquivo"

#: ../../library/shutil.rst:12
msgid "copying"
msgstr ""

#: ../../library/shutil.rst:12
msgid "copying files"
msgstr ""

#: ../../library/shutil.rst:304
msgid "directory"
msgstr ""

#: ../../library/shutil.rst:304
msgid "deleting"
msgstr ""
