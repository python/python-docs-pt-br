# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-31 11:30+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/heapq.rst:2
msgid ":mod:`!heapq` --- Heap queue algorithm"
msgstr ":mod:`!heapq` --- Algoritmo de fila heap"

#: ../../library/heapq.rst:12
msgid "**Source code:** :source:`Lib/heapq.py`"
msgstr "**Código-fonte:** :source:`Lib/heapq.py`"

#: ../../library/heapq.rst:16
msgid ""
"This module provides an implementation of the heap queue algorithm, also "
"known as the priority queue algorithm."
msgstr ""
"Este módulo fornece uma implementação do algoritmo de fila heap, também "
"conhecido como algoritmo de fila de prioridade."

#: ../../library/heapq.rst:19
msgid ""
"Heaps are binary trees for which every parent node has a value less than or "
"equal to any of its children.  We refer to this condition as the heap "
"invariant."
msgstr ""
"Heaps são árvores binárias para as quais cada nó pai tem um valor menor ou "
"igual a qualquer um de seus filhos. Chamamos essa condição de invariante de "
"heap."

#: ../../library/heapq.rst:22
msgid ""
"This implementation uses arrays for which ``heap[k] <= heap[2*k+1]`` and "
"``heap[k] <= heap[2*k+2]`` for all *k*, counting elements from zero.  For "
"the sake of comparison, non-existing elements are considered to be "
"infinite.  The interesting property of a heap is that its smallest element "
"is always the root, ``heap[0]``."
msgstr ""
"Esta implementação usa arrays para os quais ``heap[k] <= heap[2*k+1]`` e "
"``heap[k] <= heap[2*k+2]`` para todos *k*, contando elementos de zero. Para "
"efeito de comparação, os elementos inexistentes são considerados infinitos. "
"A propriedade interessante de um heap é que seu menor elemento é sempre a "
"raiz, ``heap[0]``."

#: ../../library/heapq.rst:28
msgid ""
"The API below differs from textbook heap algorithms in two aspects: (a) We "
"use zero-based indexing.  This makes the relationship between the index for "
"a node and the indexes for its children slightly less obvious, but is more "
"suitable since Python uses zero-based indexing. (b) Our pop method returns "
"the smallest item, not the largest (called a \"min heap\" in textbooks; a "
"\"max heap\" is more common in texts because of its suitability for in-place "
"sorting)."
msgstr ""
"A API abaixo difere dos algoritmos de heap de livros didáticos em dois "
"aspectos: (a) Usamos indexação baseada em zero. Isso torna o relacionamento "
"entre o índice de um nó e os índices de seus filhos um pouco menos óbvio, "
"mas é mais adequado, pois o Python usa indexação baseada em zero. (b) Nosso "
"método pop retorna o menor item, não o maior (chamado de \"min heap\" em "
"livros didáticos; um \"max heap\" é mais comum em textos devido à sua "
"adequação para classificação no local)."

#: ../../library/heapq.rst:35
msgid ""
"These two make it possible to view the heap as a regular Python list without "
"surprises: ``heap[0]`` is the smallest item, and ``heap.sort()`` maintains "
"the heap invariant!"
msgstr ""
"Esses dois tornam possível visualizar o heap como uma lista regular do "
"Python sem surpresas: ``heap[0]`` é o menor item, e ``heap.sort()`` mantém o "
"invariante de heap!"

#: ../../library/heapq.rst:39
msgid ""
"To create a heap, use a list initialized to ``[]``, or you can transform a "
"populated list into a heap via function :func:`heapify`."
msgstr ""
"Para criar um heap, use uma lista inicializada com ``[]``, ou você pode "
"transformar uma lista preenchida em um heap através da função :func:"
"`heapify`."

#: ../../library/heapq.rst:42
msgid "The following functions are provided:"
msgstr "As seguintes funções são fornecidas:"

#: ../../library/heapq.rst:47
msgid "Push the value *item* onto the *heap*, maintaining the heap invariant."
msgstr "Coloca o valor *item* no *heap*, mantendo o invariante de heap."

#: ../../library/heapq.rst:52
msgid ""
"Pop and return the smallest item from the *heap*, maintaining the heap "
"invariant.  If the heap is empty, :exc:`IndexError` is raised.  To access "
"the smallest item without popping it, use ``heap[0]``."
msgstr ""
"Retira e retorna o menor item do *heap*, mantendo o invariante de heap. Se o "
"heap estiver vazio, a exceção :exc:`IndexError` será levantada. Para acessar "
"o menor item sem retirá-lo, use ``heap[0]``."

#: ../../library/heapq.rst:59
msgid ""
"Push *item* on the heap, then pop and return the smallest item from the "
"*heap*.  The combined action runs more efficiently than :func:`heappush` "
"followed by a separate call to :func:`heappop`."
msgstr ""
"Coloca *item* no heap, depois retira e retorna o menor item do *heap*. A "
"ação combinada é executada com mais eficiência do que :func:`heappush` "
"seguida por uma chamada separada para :func:`heappop`."

#: ../../library/heapq.rst:66
msgid "Transform list *x* into a heap, in-place, in linear time."
msgstr "Transforma a lista *x* em um heap, no local, em tempo linear."

#: ../../library/heapq.rst:71
msgid ""
"Pop and return the smallest item from the *heap*, and also push the new "
"*item*. The heap size doesn't change. If the heap is empty, :exc:"
"`IndexError` is raised."
msgstr ""
"Abre e retorna o menor item da *heap* e também coloca o novo *item*. O "
"tamanho do heap não muda. Se o heap estiver vazio, a exceção :exc:"
"`IndexError` será levantada."

#: ../../library/heapq.rst:74
msgid ""
"This one step operation is more efficient than a :func:`heappop` followed "
"by :func:`heappush` and can be more appropriate when using a fixed-size "
"heap. The pop/push combination always returns an element from the heap and "
"replaces it with *item*."
msgstr ""
"Esta operação de uma etapa é mais eficiente que :func:`heappop` seguida por :"
"func:`heappush` e pode ser mais apropriada ao usar um heap de tamanho fixo. "
"A combinação de retirar/colocar sempre retorna um elemento do heap e o "
"substitui por *item*."

#: ../../library/heapq.rst:79
msgid ""
"The value returned may be larger than the *item* added.  If that isn't "
"desired, consider using :func:`heappushpop` instead.  Its push/pop "
"combination returns the smaller of the two values, leaving the larger value "
"on the heap."
msgstr ""
"O valor retornado pode ser maior que o *item* adicionado. Se isso não for "
"desejado, considere usar :func:`heappushpop`. Sua combinação de retirar/"
"colocar retorna o menor dos dois valores, deixando o valor maior no heap."

#: ../../library/heapq.rst:85
msgid "The module also offers three general purpose functions based on heaps."
msgstr ""
"O módulo também oferece três funções de propósito geral baseadas em heaps."

#: ../../library/heapq.rst:90
msgid ""
"Merge multiple sorted inputs into a single sorted output (for example, merge "
"timestamped entries from multiple log files).  Returns an :term:`iterator` "
"over the sorted values."
msgstr ""
"Mescla diversas entradas classificadas em uma única saída classificada (por "
"exemplo, mescla entradas com registro de data e hora de vários arquivos de "
"log). Retorna um :term:`iterador` sobre os valores classificados."

#: ../../library/heapq.rst:94
msgid ""
"Similar to ``sorted(itertools.chain(*iterables))`` but returns an iterable, "
"does not pull the data into memory all at once, and assumes that each of the "
"input streams is already sorted (smallest to largest)."
msgstr ""
"Semelhante a ``sorted(itertools.chain(*iterables))`` mas retorna um "
"iterável, não puxa os dados para a memória todos de uma vez e presume que "
"cada um dos fluxos de entrada já está classificado (do menor para o maior)."

#: ../../library/heapq.rst:98
msgid ""
"Has two optional arguments which must be specified as keyword arguments."
msgstr ""
"Possui dois argumentos opcionais que devem ser especificados como argumentos "
"nomeados."

#: ../../library/heapq.rst:100
msgid ""
"*key* specifies a :term:`key function` of one argument that is used to "
"extract a comparison key from each input element.  The default value is "
"``None`` (compare the elements directly)."
msgstr ""
"*key* especifica uma :term:`função chave` de um argumento que é usado para "
"extrair uma chave de comparação de cada elemento de entrada. O valor padrão "
"é ``None`` (compare os elementos diretamente)."

#: ../../library/heapq.rst:104
msgid ""
"*reverse* is a boolean value.  If set to ``True``, then the input elements "
"are merged as if each comparison were reversed. To achieve behavior similar "
"to ``sorted(itertools.chain(*iterables), reverse=True)``, all iterables must "
"be sorted from largest to smallest."
msgstr ""
"*reverse* é um valor booleano. Se definido como ``True``, então os elementos "
"de entrada serão mesclados como se cada comparação fosse invertida. Para "
"obter um comportamento semelhante a ``sorted(itertools.chain(*iterables), "
"reverse=True)``, todos os iteráveis devem ser classificados do maior para o "
"menor."

#: ../../library/heapq.rst:109
msgid "Added the optional *key* and *reverse* parameters."
msgstr "Adicionados os parâmetros opcionais *key* e *reverse*."

#: ../../library/heapq.rst:115
msgid ""
"Return a list with the *n* largest elements from the dataset defined by "
"*iterable*.  *key*, if provided, specifies a function of one argument that "
"is used to extract a comparison key from each element in *iterable* (for "
"example, ``key=str.lower``).  Equivalent to:  ``sorted(iterable, key=key, "
"reverse=True)[:n]``."
msgstr ""
"Retorna uma lista com os *n* maiores elementos do conjunto de dados definido "
"por *iterable*. *key*, se fornecido, especifica uma função de um argumento "
"que é usado para extrair uma chave de comparação de cada elemento em "
"*iterable* (por exemplo, ``key=str.lower``). Equivalente a: "
"``sorted(iterable, key=key, reverse=True)[:n]``."

#: ../../library/heapq.rst:124
msgid ""
"Return a list with the *n* smallest elements from the dataset defined by "
"*iterable*.  *key*, if provided, specifies a function of one argument that "
"is used to extract a comparison key from each element in *iterable* (for "
"example, ``key=str.lower``).  Equivalent to:  ``sorted(iterable, key=key)[:"
"n]``."
msgstr ""
"Retorna uma lista com os *n* menores elementos do conjunto de dados definido "
"por *iterable*. *key*, se fornecido, especifica uma função de um argumento "
"que é usado para extrair uma chave de comparação de cada elemento em "
"*iterable* (por exemplo, ``key=str.lower``). Equivalente a: "
"``sorted(iterable, key=key)[:n]``."

#: ../../library/heapq.rst:130
msgid ""
"The latter two functions perform best for smaller values of *n*.  For larger "
"values, it is more efficient to use the :func:`sorted` function.  Also, when "
"``n==1``, it is more efficient to use the built-in :func:`min` and :func:"
"`max` functions.  If repeated usage of these functions is required, consider "
"turning the iterable into an actual heap."
msgstr ""
"As duas últimas funções têm melhor desempenho para valores menores de *n*. "
"Para valores maiores, é mais eficiente usar a função :func:`sorted`. Além "
"disso, quando ``n==1``, é mais eficiente usar as funções embutidas :func:"
"`min` e :func:`max`. Se for necessário o uso repetido dessas funções, "
"considere transformar o iterável em um heap real."

#: ../../library/heapq.rst:138
msgid "Basic Examples"
msgstr "Exemplos básicos"

#: ../../library/heapq.rst:140
msgid ""
"A `heapsort <https://en.wikipedia.org/wiki/Heapsort>`_ can be implemented by "
"pushing all values onto a heap and then popping off the smallest values one "
"at a time::"
msgstr ""
"Um `heapsort <https://en.wikipedia.org/wiki/Heapsort>`_ pode ser "
"implementado colocando todos os valores em um heap e, em seguida, retirando "
"os menores valores, um de cada vez::"

#: ../../library/heapq.rst:144
msgid ""
">>> def heapsort(iterable):\n"
"...     h = []\n"
"...     for value in iterable:\n"
"...         heappush(h, value)\n"
"...     return [heappop(h) for i in range(len(h))]\n"
"...\n"
">>> heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n"
"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
msgstr ""

#: ../../library/heapq.rst:153
msgid ""
"This is similar to ``sorted(iterable)``, but unlike :func:`sorted`, this "
"implementation is not stable."
msgstr ""
"Isto é semelhante a ``sorted(iterable)``, mas diferente de :func:`sorted`, "
"esta implementação não é estável."

#: ../../library/heapq.rst:156
msgid ""
"Heap elements can be tuples.  This is useful for assigning comparison values "
"(such as task priorities) alongside the main record being tracked::"
msgstr ""
"Os elementos de heap podem ser tuplas. Isto é útil para atribuir valores de "
"comparação (como prioridades de tarefas) juntamente com o registro principal "
"que está sendo rastreado::"

#: ../../library/heapq.rst:159
msgid ""
">>> h = []\n"
">>> heappush(h, (5, 'write code'))\n"
">>> heappush(h, (7, 'release product'))\n"
">>> heappush(h, (1, 'write spec'))\n"
">>> heappush(h, (3, 'create tests'))\n"
">>> heappop(h)\n"
"(1, 'write spec')"
msgstr ""

#: ../../library/heapq.rst:169
msgid "Priority Queue Implementation Notes"
msgstr "Notas de implementação da fila de prioridade"

#: ../../library/heapq.rst:171
msgid ""
"A `priority queue <https://en.wikipedia.org/wiki/Priority_queue>`_ is common "
"use for a heap, and it presents several implementation challenges:"
msgstr ""
"Uma `fila de prioridade <https://en.wikipedia.org/wiki/Priority_queue>`_ é "
"de uso comum para um heap e apresenta vários desafios de implementação:"

#: ../../library/heapq.rst:174
msgid ""
"Sort stability:  how do you get two tasks with equal priorities to be "
"returned in the order they were originally added?"
msgstr ""
"Estabilidade de classificação: como fazer com que duas tarefas com "
"prioridades iguais sejam retornadas na ordem em que foram adicionadas "
"originalmente?"

#: ../../library/heapq.rst:177
msgid ""
"Tuple comparison breaks for (priority, task) pairs if the priorities are "
"equal and the tasks do not have a default comparison order."
msgstr ""
"A comparação de tuplas quebra para pares (prioridade, tarefa) se as "
"prioridades forem iguais e as tarefas não tiverem uma ordem de comparação "
"padrão."

#: ../../library/heapq.rst:180
msgid ""
"If the priority of a task changes, how do you move it to a new position in "
"the heap?"
msgstr ""
"Se a prioridade de uma tarefa mudar, como movê-la para uma nova posição no "
"heap?"

#: ../../library/heapq.rst:183
msgid ""
"Or if a pending task needs to be deleted, how do you find it and remove it "
"from the queue?"
msgstr ""
"Ou se uma tarefa pendente precisar ser excluída, como encontrá-la e removê-"
"la da fila?"

#: ../../library/heapq.rst:186
msgid ""
"A solution to the first two challenges is to store entries as 3-element list "
"including the priority, an entry count, and the task.  The entry count "
"serves as a tie-breaker so that two tasks with the same priority are "
"returned in the order they were added. And since no two entry counts are the "
"same, the tuple comparison will never attempt to directly compare two tasks."
msgstr ""
"Uma solução para os dois primeiros desafios é armazenar as entradas como uma "
"lista de 3 elementos, incluindo a prioridade, uma contagem de entradas e a "
"tarefa. A contagem de entradas serve de desempate para que duas tarefas com "
"a mesma prioridade sejam retornadas na ordem em que foram adicionadas. E "
"como não há duas contagens de entradas iguais, a comparação de tuplas nunca "
"tentará comparar diretamente duas tarefas."

#: ../../library/heapq.rst:192
msgid ""
"Another solution to the problem of non-comparable tasks is to create a "
"wrapper class that ignores the task item and only compares the priority "
"field::"
msgstr ""
"Outra solução para o problema de tarefas não comparáveis é criar uma classe "
"wrapper que ignore o item da tarefa e compare apenas o campo de prioridade:"

#: ../../library/heapq.rst:195
msgid ""
"from dataclasses import dataclass, field\n"
"from typing import Any\n"
"\n"
"@dataclass(order=True)\n"
"class PrioritizedItem:\n"
"    priority: int\n"
"    item: Any=field(compare=False)"
msgstr ""

#: ../../library/heapq.rst:203
msgid ""
"The remaining challenges revolve around finding a pending task and making "
"changes to its priority or removing it entirely.  Finding a task can be done "
"with a dictionary pointing to an entry in the queue."
msgstr ""
"Os desafios restantes giram em torno de encontrar uma tarefa pendente e "
"fazer alterações em sua prioridade ou removê-la totalmente. Encontrar uma "
"tarefa pode ser feito com um dicionário apontando para uma entrada na fila."

#: ../../library/heapq.rst:207
msgid ""
"Removing the entry or changing its priority is more difficult because it "
"would break the heap structure invariants.  So, a possible solution is to "
"mark the entry as removed and add a new entry with the revised priority::"
msgstr ""
"Remover a entrada ou alterar sua prioridade é mais difícil porque quebraria "
"os invariantes da estrutura de heap. Assim, uma possível solução é marcar a "
"entrada como removida e adicionar uma nova entrada com a prioridade "
"revisada::"

#: ../../library/heapq.rst:211
msgid ""
"pq = []                         # list of entries arranged in a heap\n"
"entry_finder = {}               # mapping of tasks to entries\n"
"REMOVED = '<removed-task>'      # placeholder for a removed task\n"
"counter = itertools.count()     # unique sequence count\n"
"\n"
"def add_task(task, priority=0):\n"
"    'Add a new task or update the priority of an existing task'\n"
"    if task in entry_finder:\n"
"        remove_task(task)\n"
"    count = next(counter)\n"
"    entry = [priority, count, task]\n"
"    entry_finder[task] = entry\n"
"    heappush(pq, entry)\n"
"\n"
"def remove_task(task):\n"
"    'Mark an existing task as REMOVED.  Raise KeyError if not found.'\n"
"    entry = entry_finder.pop(task)\n"
"    entry[-1] = REMOVED\n"
"\n"
"def pop_task():\n"
"    'Remove and return the lowest priority task. Raise KeyError if empty.'\n"
"    while pq:\n"
"        priority, count, task = heappop(pq)\n"
"        if task is not REMOVED:\n"
"            del entry_finder[task]\n"
"            return task\n"
"    raise KeyError('pop from an empty priority queue')"
msgstr ""

#: ../../library/heapq.rst:241
msgid "Theory"
msgstr "Teoria"

#: ../../library/heapq.rst:243
msgid ""
"Heaps are arrays for which ``a[k] <= a[2*k+1]`` and ``a[k] <= a[2*k+2]`` for "
"all *k*, counting elements from 0.  For the sake of comparison, non-existing "
"elements are considered to be infinite.  The interesting property of a heap "
"is that ``a[0]`` is always its smallest element."
msgstr ""
"Heaps são arrays para os quais ``a[k] <= a[2*k+1]`` e ``a[k] <= a[2*k+2]`` "
"para todos *k*, contando elementos de 0. Para fins de comparação, os "
"elementos inexistentes são considerados infinitos. A propriedade "
"interessante de um heap é que ``a[0]`` é sempre seu menor elemento."

#: ../../library/heapq.rst:248
msgid ""
"The strange invariant above is meant to be an efficient memory "
"representation for a tournament.  The numbers below are *k*, not ``a[k]``::"
msgstr ""
"O estranho invariante acima pretende ser uma representação de memória "
"eficiente para um torneio. Os números abaixo são *k*, não ``a[k]``::"

#: ../../library/heapq.rst:251
msgid ""
"                               0\n"
"\n"
"              1                                 2\n"
"\n"
"      3               4                5               6\n"
"\n"
"  7       8       9       10      11      12      13      14\n"
"\n"
"15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30"
msgstr ""

#: ../../library/heapq.rst:261
msgid ""
"In the tree above, each cell *k* is topping ``2*k+1`` and ``2*k+2``. In a "
"usual binary tournament we see in sports, each cell is the winner over the "
"two cells it tops, and we can trace the winner down the tree to see all "
"opponents s/he had.  However, in many computer applications of such "
"tournaments, we do not need to trace the history of a winner. To be more "
"memory efficient, when a winner is promoted, we try to replace it by "
"something else at a lower level, and the rule becomes that a cell and the "
"two cells it tops contain three different items, but the top cell \"wins\" "
"over the two topped cells."
msgstr ""
"Na árvore acima, cada célula *k* está no topo de ``2*k+1`` e ``2*k+2``. Num "
"torneio binário normal que vemos nos desportos, cada célula é a vencedora "
"das duas células que está no topo, e podemos rastrear o vencedor na árvore "
"para ver todos os adversários que teve. Contudo, em muitas aplicações "
"informáticas de tais torneios, não precisamos de traçar a história de um "
"vencedor. Para sermos mais eficientes em termos de memória, quando um "
"vencedor é promovido, tentamos substituí-lo por algo de nível inferior, e a "
"regra passa a ser que uma célula e as duas células que ela cobre contêm três "
"itens diferentes, mas a célula de cima \"ganha\" sobre as duas células "
"superiores."

#: ../../library/heapq.rst:270
msgid ""
"If this heap invariant is protected at all time, index 0 is clearly the "
"overall winner.  The simplest algorithmic way to remove it and find the "
"\"next\" winner is to move some loser (let's say cell 30 in the diagram "
"above) into the 0 position, and then percolate this new 0 down the tree, "
"exchanging values, until the invariant is re-established. This is clearly "
"logarithmic on the total number of items in the tree. By iterating over all "
"items, you get an *O*\\ (*n* log *n*) sort."
msgstr ""
"Se esse invariante de heap estiver protegido o tempo todo, o índice 0 é "
"claramente o vencedor geral. A maneira algorítmica mais simples de removê-lo "
"e encontrar o \"próximo\" vencedor é mover algum perdedor (digamos a célula "
"30 no diagrama acima) para a posição 0 e, em seguida, filtrar esse novo 0 "
"pela árvore, trocando valores, até que o invariante é restabelecido. Isto é "
"claramente logarítmico do número total de itens na árvore. Ao iterar todos "
"os itens, você obtém uma classificação *O*\\ (*n* log *n*)."

#: ../../library/heapq.rst:277
msgid ""
"A nice feature of this sort is that you can efficiently insert new items "
"while the sort is going on, provided that the inserted items are not "
"\"better\" than the last 0'th element you extracted.  This is especially "
"useful in simulation contexts, where the tree holds all incoming events, and "
"the \"win\" condition means the smallest scheduled time.  When an event "
"schedules other events for execution, they are scheduled into the future, so "
"they can easily go into the heap.  So, a heap is a good structure for "
"implementing schedulers (this is what I used for my MIDI sequencer :-)."
msgstr ""
"Um recurso interessante desse tipo é que você pode inserir novos itens com "
"eficiência enquanto a classificação está em andamento, desde que os itens "
"inseridos não sejam \"melhores\" que o último 0º elemento extraído. Isto é "
"especialmente útil em contextos de simulação, onde a árvore contém todos os "
"eventos recebidos e a condição \"vitória\" significa o menor tempo "
"programado. Quando um evento agenda outros eventos para execução, eles são "
"agendados para o futuro, para que possam entrar facilmente no heap. "
"Portanto, um heap é uma boa estrutura para implementar escalonadores (foi "
"isso que usei no meu sequenciador MIDI :-)."

#: ../../library/heapq.rst:286
msgid ""
"Various structures for implementing schedulers have been extensively "
"studied, and heaps are good for this, as they are reasonably speedy, the "
"speed is almost constant, and the worst case is not much different than the "
"average case. However, there are other representations which are more "
"efficient overall, yet the worst cases might be terrible."
msgstr ""
"Várias estruturas para implementação de escalonadores foram extensivamente "
"estudadas, e os heaps são bons para isso, pois são razoavelmente rápidos, a "
"velocidade é quase constante e o pior caso não é muito diferente do caso "
"médio. No entanto, existem outras representações que são globalmente mais "
"eficientes, embora os piores casos possam ser terríveis."

#: ../../library/heapq.rst:292
msgid ""
"Heaps are also very useful in big disk sorts.  You most probably all know "
"that a big sort implies producing \"runs\" (which are pre-sorted sequences, "
"whose size is usually related to the amount of CPU memory), followed by a "
"merging passes for these runs, which merging is often very cleverly "
"organised [#]_. It is very important that the initial sort produces the "
"longest runs possible.  Tournaments are a good way to achieve that.  If, "
"using all the memory available to hold a tournament, you replace and "
"percolate items that happen to fit the current run, you'll produce runs "
"which are twice the size of the memory for random input, and much better for "
"input fuzzily ordered."
msgstr ""
"Heaps também são muito úteis em classificações de discos grandes. "
"Provavelmente todos vocês sabem que uma classificação grande implica a "
"produção de \"execuções\" (que são sequências pré-classificadas, cujo "
"tamanho geralmente está relacionado à quantidade de memória da CPU), "
"seguidas de passagens de fusão para essas execuções, cuja fusão geralmente é "
"muito inteligente. organizado [#]_. É muito importante que a classificação "
"inicial produza as execuções mais longas possíveis. Os torneios são uma boa "
"maneira de conseguir isso. Se, usando toda a memória disponível para "
"realizar um torneio, você substituir e filtrar itens que se encaixem na "
"corrida atual, você produzirá corridas que têm o dobro do tamanho da memória "
"para entradas aleatórias e muito melhores para entradas ordenadas de maneira "
"imprecisa."

#: ../../library/heapq.rst:302
msgid ""
"Moreover, if you output the 0'th item on disk and get an input which may not "
"fit in the current tournament (because the value \"wins\" over the last "
"output value), it cannot fit in the heap, so the size of the heap "
"decreases.  The freed memory could be cleverly reused immediately for "
"progressively building a second heap, which grows at exactly the same rate "
"the first heap is melting.  When the first heap completely vanishes, you "
"switch heaps and start a new run.  Clever and quite effective!"
msgstr ""
"Além disso, se você gerar o 0º item no disco e obter uma entrada que pode "
"não caber no torneio atual (porque o valor \"ganha\" sobre o último valor de "
"saída), ele não poderá caber no heap, então o tamanho do heap diminui. A "
"memória liberada poderia ser reutilizada de maneira inteligente e imediata "
"para a construção progressiva de um segundo heap, que cresce exatamente na "
"mesma proporção que o primeiro heap está derretendo. Quando o primeiro heap "
"desaparece completamente, você troca os heaps e inicia uma nova execução. "
"Inteligente e bastante eficaz!"

#: ../../library/heapq.rst:310
msgid ""
"In a word, heaps are useful memory structures to know.  I use them in a few "
"applications, and I think it is good to keep a 'heap' module around. :-)"
msgstr ""
"Em uma palavra, heaps são estruturas de memória úteis para conhecer. Eu os "
"uso em alguns aplicativos e acho bom manter um módulo \"heap\" por perto. :-)"

#: ../../library/heapq.rst:314
msgid "Footnotes"
msgstr "Notas de rodapé"

#: ../../library/heapq.rst:315
msgid ""
"The disk balancing algorithms which are current, nowadays, are more annoying "
"than clever, and this is a consequence of the seeking capabilities of the "
"disks. On devices which cannot seek, like big tape drives, the story was "
"quite different, and one had to be very clever to ensure (far in advance) "
"that each tape movement will be the most effective possible (that is, will "
"best participate at \"progressing\" the merge).  Some tapes were even able "
"to read backwards, and this was also used to avoid the rewinding time. "
"Believe me, real good tape sorts were quite spectacular to watch! From all "
"times, sorting has always been a Great Art! :-)"
msgstr ""
"Os algoritmos de balanceamento de disco atuais, hoje em dia, são mais "
"incômodos do que inteligentes, e isso é consequência da capacidade de busca "
"dos discos. Em dispositivos que não são capazes de buscar, como grandes "
"drives de fita, a história era bem diferente, e era preciso ser muito "
"inteligente para garantir (com muita antecedência) que cada movimento da "
"fita seria o mais eficaz possível (isto é, participaria melhor na "
"\"progressão\" da fusão). Algumas fitas podiam até ser lidas de trás para "
"frente, o que também era usado para evitar o tempo de rebobinar. Acredite em "
"mim, fitas realmente boas eram espetaculares de assistir! Desde sempre, "
"ordenar sempre foi uma Grande Arte! :-)"
