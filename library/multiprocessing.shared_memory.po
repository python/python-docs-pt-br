# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Matheus Sartor, 2022
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-11 17:51+0000\n"
"PO-Revision-Date: 2019-09-01 14:31+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/multiprocessing.shared_memory.rst:2
msgid ""
":mod:`multiprocessing.shared_memory` ---  Provides shared memory for direct "
"access across processes"
msgstr ""
":mod:`multiprocessing.shared_memory` --- Fornece memória compartilhada para "
"acesso direto entre processos"

#: ../../library/multiprocessing.shared_memory.rst:7
msgid "**Source code:** :source:`Lib/multiprocessing/shared_memory.py`"
msgstr "**Código-fonte:** :source:`Lib/multiprocessing/shared_memory.py`"

#: ../../library/multiprocessing.shared_memory.rst:18
msgid ""
"This module provides a class, :class:`SharedMemory`, for the allocation and "
"management of shared memory to be accessed by one or more processes on a "
"multicore or symmetric multiprocessor (SMP) machine.  To assist with the "
"life-cycle management of shared memory especially across distinct processes, "
"a :class:`~multiprocessing.managers.BaseManager` subclass, :class:"
"`SharedMemoryManager`, is also provided in the ``multiprocessing.managers`` "
"module."
msgstr ""
"Este módulo fornece uma classe, :class:`SharedMemory`, para a alocação e "
"gerenciamento da memória compartilhada a ser acessada por um ou mais "
"processos em uma máquina multicore ou de multiprocessamento simétrico (SMP). "
"Para ajudar com o gerenciamento do ciclo de vida da memória compartilhada "
"especialmente entre processos distintos, uma subclasse de :class:"
"`~multiprocessing.managers.BaseManager`, :class:`SharedMemoryManager`, "
"também é fornecida no módulo  ``multiprocessing.managers``"

#: ../../library/multiprocessing.shared_memory.rst:26
msgid ""
"In this module, shared memory refers to \"System V style\" shared memory "
"blocks (though is not necessarily implemented explicitly as such) and does "
"not refer to \"distributed shared memory\".  This style of shared memory "
"permits distinct processes to potentially read and write to a common (or "
"shared) region of volatile memory.  Processes are conventionally limited to "
"only have access to their own process memory space but shared memory permits "
"the sharing of data between processes, avoiding the need to instead send "
"messages between processes containing that data.  Sharing data directly via "
"memory can provide significant performance benefits compared to sharing data "
"via disk or socket or other communications requiring the serialization/"
"deserialization and copying of data."
msgstr ""
"Neste módulo, memória compartilhada refere-se a blocos de memória "
"compartilhada no \"estilo UNIX SystemV\" (embora não seja necessariamente "
"implementado explicitamente como tal) e não se refere a \"memória "
"compartilhada distribuída\". Este estilo de memória compartilhada permite "
"que processos distintos potencialmente leiam e escrevam em uma região "
"comum(ou compartilhada) de memória volátil. Os processos são "
"convencionalmente limitados a ter acesso somente ao próprio espaço de "
"memória de processo mas a memória compartilhada permite o compartilhamento "
"de dados entre processos, evitando a necessidade de enviar mensagens entre "
"processos contendo estes dados. Compartilhar dados diretamente via memória "
"pode fornecer ganhos de desempenho significativos comparado ao "
"compartilhamento de dados via disco ou soquete ou outras comunicações que "
"requerem a serialização/desserialização e cópia dos dados."

#: ../../library/multiprocessing.shared_memory.rst:41
msgid ""
"Creates a new shared memory block or attaches to an existing shared memory "
"block.  Each shared memory block is assigned a unique name. In this way, one "
"process can create a shared memory block with a particular name and a "
"different process can attach to that same shared memory block using that "
"same name."
msgstr ""
"Cria um novo bloco de memória compartilhado ou anexa a um bloco de memória "
"compartilhado existente. A cada bloco de memória compartilhado é atribuído "
"um nome único. Desta forma, um processo pode criar um bloco de memória "
"compartilhada com um nome particular e um processo diferente pode ser "
"anexado a esse mesmo bloco de memória compartilhada usando este mesmo nome."

#: ../../library/multiprocessing.shared_memory.rst:47
msgid ""
"As a resource for sharing data across processes, shared memory blocks may "
"outlive the original process that created them.  When one process no longer "
"needs access to a shared memory block that might still be needed by other "
"processes, the :meth:`close()` method should be called. When a shared memory "
"block is no longer needed by any process, the :meth:`unlink()` method should "
"be called to ensure proper cleanup."
msgstr ""
"Como um recurso para compartilhar dados entre processos, os blocos de "
"memória compartilhada podem sobreviver ao processo original que os criou. "
"Quando um processo não precisa mais acessar um bloco de memória "
"compartilhada que ainda pode ser necessário para outros processos, o método :"
"meth:`close()` deve ser chamado. Quando um bloco de memória compartilhada "
"não é mais necessário para nenhum processo, o método :meth:`unlink()` deve "
"ser chamado para garantir a limpeza apropriada."

#: ../../library/multiprocessing.shared_memory.rst:54
msgid ""
"*name* is the unique name for the requested shared memory, specified as a "
"string.  When creating a new shared memory block, if ``None`` (the default) "
"is supplied for the name, a novel name will be generated."
msgstr ""
"*name* é o nome único para a memória compartilhada requisitada, especificado "
"como uma string. Ao criar um novo bloco de memória compartilhada, se "
"``None`` (o padrão) é fornecido para o nome, um novo nome será gerado."

#: ../../library/multiprocessing.shared_memory.rst:58
msgid ""
"*create* controls whether a new shared memory block is created (``True``) or "
"an existing shared memory block is attached (``False``)."
msgstr ""
"*create* controla quando um novo bloco de memória compartilhada é criado "
"(``True``) ou um bloco de memória compartilhada existente é anexado "
"(``False``)."

#: ../../library/multiprocessing.shared_memory.rst:61
msgid ""
"*size* specifies the requested number of bytes when creating a new shared "
"memory block.  Because some platforms choose to allocate chunks of memory "
"based upon that platform's memory page size, the exact size of the shared "
"memory block may be larger or equal to the size requested.  When attaching "
"to an existing shared memory block, the ``size`` parameter is ignored."
msgstr ""
"*size* especifica o número de bytes requeridos ao criar um novo bloco de "
"memória compartilhada. Como algumas plataformas optam por alocar pedaços de "
"memória com base no tamanho da página de memória da própria plataforma, o "
"tamanho exato do bloco de memória compartilhada pode ser maior ou igual ao "
"tamanho requerido. Ao anexar a um bloco de memória compartilhada existente, "
"o parâmetro ``size`` é ignorado."

#: ../../library/multiprocessing.shared_memory.rst:69
msgid ""
"Closes access to the shared memory from this instance.  In order to ensure "
"proper cleanup of resources, all instances should call ``close()`` once the "
"instance is no longer needed.  Note that calling ``close()`` does not cause "
"the shared memory block itself to be destroyed."
msgstr ""
"Encerra o acesso à memória compartilhada desta instância. Para garantir a "
"limpeza apropriada dos recursos, todas as instâncias devem chamar  "
"``close()`` uma vez que a instância não for mais necessária. Observe que a "
"chamada a ``close()`` não implica na destruição do próprio bloco de memória "
"compartilhada."

#: ../../library/multiprocessing.shared_memory.rst:77
msgid ""
"Requests that the underlying shared memory block be destroyed.  In order to "
"ensure proper cleanup of resources, ``unlink()`` should be called once (and "
"only once) across all processes which have need for the shared memory "
"block.  After requesting its destruction, a shared memory block may or may "
"not be immediately destroyed and this behavior may differ across platforms.  "
"Attempts to access data inside the shared memory block after ``unlink()`` "
"has been called may result in memory access errors.  Note: the last process "
"relinquishing its hold on a shared memory block may call ``unlink()`` and :"
"meth:`close()` in either order."
msgstr ""
"Solicita que o bloco de memória compartilhada subjacente seja destruído. "
"Para garantir uma limpeza apropriada dos recursos, ``unlink()`` deve ser "
"chamado uma vez (e apenas uma vez) em todos os processos que precisam do "
"bloco de memória compartilhada. Após solicitar sua destruição, um bloco de "
"memória compartilhada pode ou não ser imediatamente destruído e este "
"comportamento pode divergir entre plataformas. Tentativas de acessar dados "
"dentro do bloco de memória compartilhada depois da chamada do  ``unlink()`` "
"podem resultar em erros de acesso de memória. Nota: o último processo "
"restante em um bloco de memória compartilhada pode chamar ``unlink()`` e :"
"meth:`close()` em qualquer ordem."

#: ../../library/multiprocessing.shared_memory.rst:90
msgid "A memoryview of contents of the shared memory block."
msgstr ""
"Uma visualização de memória do conteúdo do bloco de memória compartilhada."

#: ../../library/multiprocessing.shared_memory.rst:94
msgid "Read-only access to the unique name of the shared memory block."
msgstr ""
"Acesso somente leitura ao nome único do bloco de memória compartilhada."

#: ../../library/multiprocessing.shared_memory.rst:98
msgid "Read-only access to size in bytes of the shared memory block."
msgstr ""
"Acesso somente leitura ao tamanho em bytes do bloco de memória compartilhada."

#: ../../library/multiprocessing.shared_memory.rst:101
msgid ""
"The following example demonstrates low-level use of :class:`SharedMemory` "
"instances::"
msgstr ""
"O exemplo a seguir demonstra um uso baixo nível de instâncias de :class:"
"`SharedMemory`::"

#: ../../library/multiprocessing.shared_memory.rst:127
msgid ""
"The following example demonstrates a practical use of the :class:"
"`SharedMemory` class with `NumPy arrays <https://www.numpy.org/>`_, "
"accessing the same ``numpy.ndarray`` from two distinct Python shells:"
msgstr ""
"O exemplo a seguir demonstra um uso prático da classe :class:`SharedMemory`  "
"com `NumPy arrays <https://www.numpy.org/>`_, acessando o mesmo ``numpy."
"ndarray`` de dois shells Python distintos."

#: ../../library/multiprocessing.shared_memory.rst:181
msgid ""
"A subclass of :class:`~multiprocessing.managers.BaseManager` which can be "
"used for the management of shared memory blocks across processes."
msgstr ""
"Uma subclasse de :class:`~multiprocessing.managers.BaseManager` que pode ser "
"usada para o gerenciamento dos blocos de memória compartilhada entre "
"processos."

#: ../../library/multiprocessing.shared_memory.rst:184
msgid ""
"A call to :meth:`~multiprocessing.managers.BaseManager.start` on a :class:"
"`SharedMemoryManager` instance causes a new process to be started. This new "
"process's sole purpose is to manage the life cycle of all shared memory "
"blocks created through it.  To trigger the release of all shared memory "
"blocks managed by that process, call :meth:`~multiprocessing.managers."
"BaseManager.shutdown()` on the instance. This triggers a :meth:`SharedMemory."
"unlink()` call on all of the :class:`SharedMemory` objects managed by that "
"process and then stops the process itself.  By creating ``SharedMemory`` "
"instances through a ``SharedMemoryManager``, we avoid the need to manually "
"track and trigger the freeing of shared memory resources."
msgstr ""
"Uma chamada ao método :meth:`~multiprocessing.managers.BaseManager.start` em "
"uma instância de :class:`SharedMemoryManager` faz com que um novo processo "
"seja iniciado. A única finalidade desse novo processo é gerenciar o ciclo de "
"vida de todos os blocos de memória criados através dele. Para acionar a "
"liberação de todos os blocos de memória gerenciados por este processo, "
"invoque o método :meth:`~multiprocessing.managers.BaseManager.shutdown()` na "
"instância. Isso aciona uma chamada de :meth:`SharedMemory.unlink()` em todos "
"os objetos :class:`SharedMemory` gerenciados por esse processo e então para "
"o processo em si. Ao criar instâncias de ``SharedMemory`` através de um "
"``SharedMemoryManager``, evitamos a necessidade de rastrear e acionar "
"manualmente a liberação dos recursos de memória compartilhada."

#: ../../library/multiprocessing.shared_memory.rst:196
msgid ""
"This class provides methods for creating and returning :class:`SharedMemory` "
"instances and for creating a list-like object (:class:`ShareableList`) "
"backed by shared memory."
msgstr ""
"Esta classe fornece métodos para criar e retornar instâncias de :class:"
"`SharedMemory` e para criar um objeto lista ou similar (:class:"
"`ShareableList`) apoiado por memória compartilhada."

#: ../../library/multiprocessing.shared_memory.rst:200
msgid ""
"Refer to :class:`multiprocessing.managers.BaseManager` for a description of "
"the inherited *address* and *authkey* optional input arguments and how they "
"may be used to connect to an existing ``SharedMemoryManager`` service from "
"other processes."
msgstr ""
"Consulte :class:`multiprocessing.managers.BaseManager` para obter uma "
"descrição dos argumentos de entrada opcionais herdados *address* e *authkey* "
"e como eles podem ser usados para conectar-se a um serviço "
"``SharedMemoryManager`` existente de outros processos."

#: ../../library/multiprocessing.shared_memory.rst:207
msgid ""
"Create and return a new :class:`SharedMemory` object with the specified "
"``size`` in bytes."
msgstr ""
"Cria e retorna um novo objeto :class:`SharedMemory` com o ``size`` "
"especificado em bytes"

#: ../../library/multiprocessing.shared_memory.rst:212
msgid ""
"Create and return a new :class:`ShareableList` object, initialized by the "
"values from the input ``sequence``."
msgstr ""
"Cria e retorna um novo objeto :class:`ShareableList`, inicializado pelos "
"valores da entrada ``sequence`` ."

#: ../../library/multiprocessing.shared_memory.rst:216
msgid ""
"The following example demonstrates the basic mechanisms of a :class:"
"`SharedMemoryManager`:"
msgstr ""
"O exemplo a seguir demonstra os mecanismos básicos de um :class:"
"`SharedMemoryManager`:"

#: ../../library/multiprocessing.shared_memory.rst:234
msgid ""
"The following example depicts a potentially more convenient pattern for "
"using :class:`SharedMemoryManager` objects via the :keyword:`with` statement "
"to ensure that all shared memory blocks are released after they are no "
"longer needed:"
msgstr ""
"O exemplo a seguir retrata um padrão potencialmente mais conveniente para "
"usar objetos :class:`SharedMemoryManager` através da instrução :keyword:"
"`with` para garantir que todos os blocos de memória compartilhada  são "
"liberados depois que não são mais necessários."

#: ../../library/multiprocessing.shared_memory.rst:253
msgid ""
"When using a :class:`SharedMemoryManager` in a :keyword:`with` statement, "
"the shared memory blocks created using that manager are all released when "
"the :keyword:`with` statement's code block finishes execution."
msgstr ""
"Ao usar um :class:`SharedMemoryManager` em uma instrução :keyword:`with`, os "
"blocos de memória compartilhada criados utilizando este gerenciador são "
"todos liberados quando o bloco de código com a instrução :keyword:`with` "
"termina sua execução."

#: ../../library/multiprocessing.shared_memory.rst:260
msgid ""
"Provides a mutable list-like object where all values stored within are "
"stored in a shared memory block.  This constrains storable values to only "
"the ``int``, ``float``, ``bool``, ``str`` (less than 10M bytes each), "
"``bytes`` (less than 10M bytes each), and ``None`` built-in data types. It "
"also notably differs from the built-in ``list`` type in that these lists can "
"not change their overall length (i.e. no append, insert, etc.) and do not "
"support the dynamic creation of new :class:`ShareableList` instances via "
"slicing."
msgstr ""
"Fornece um objeto lista ou similar, mutável, onde todos os valores "
"armazenados são armazenados em um bloco de memória compartilhada. Isto "
"restringe os valores armazenáveis apenas aos tipos de dados embutidos "
"``int``, ``float``, ``bool``, ``str`` (com menos de 10M bytes cada), "
"``bytes`` (menos de 10M bytes cada) e ``None``. Este objeto também se "
"diferencia notavelmente do tipo embutido ``list`` uma vez que este não pode "
"ter seu comprimento total modificado (ex.: não pode usar append, insert, "
"etc.) e também não oferece suporte à criação dinâmica de uma instância de :"
"class:`ShareableList` através do fatiamento do objeto."

#: ../../library/multiprocessing.shared_memory.rst:269
msgid ""
"*sequence* is used in populating a new ``ShareableList`` full of values. Set "
"to ``None`` to instead attach to an already existing ``ShareableList`` by "
"its unique shared memory name."
msgstr ""
"*sequence* é usado para preencher um ``ShareableList`` com valores. Defina "
"como ``None`` para anexar a uma ``ShareableList`` já existente pelo seu nome "
"único de memória compartilhada."

#: ../../library/multiprocessing.shared_memory.rst:273
msgid ""
"*name* is the unique name for the requested shared memory, as described in "
"the definition for :class:`SharedMemory`.  When attaching to an existing "
"``ShareableList``, specify its shared memory block's unique name while "
"leaving ``sequence`` set to ``None``."
msgstr ""
"*name* é um nome único para a memória compartilhada requerida, como descrito "
"na definição de :class:`SharedMemory`. Ao anexar a uma ``ShareableList`` já "
"existente, deve-se especificar o nome único do bloco de memória "
"compartilhada e definir ``sequence`` como  ``None``."

#: ../../library/multiprocessing.shared_memory.rst:280
msgid "Returns the number of occurrences of ``value``."
msgstr "Retorna o número de ocorrências de ``value``."

#: ../../library/multiprocessing.shared_memory.rst:284
msgid ""
"Returns first index position of ``value``.  Raises :exc:`ValueError` if "
"``value`` is not present."
msgstr ""
"Retorna a primeira posição do índice de ``value``. Levanta :exc:`ValueError` "
"se ``value`` não estiver presente."

#: ../../library/multiprocessing.shared_memory.rst:289
msgid ""
"Read-only attribute containing the :mod:`struct` packing format used by all "
"currently stored values."
msgstr ""
"Atributo somente leitura contendo o formato de empacotamento :mod:`struct` "
"usado por todos os valores armazenados atualmente."

#: ../../library/multiprocessing.shared_memory.rst:294
msgid "The :class:`SharedMemory` instance where the values are stored."
msgstr "A instância de :class:`SharedMemory` onde os valores são armazenados."

#: ../../library/multiprocessing.shared_memory.rst:297
msgid ""
"The following example demonstrates basic use of a :class:`ShareableList` "
"instance:"
msgstr ""
"O exemplo a seguir demonstra o uso básico de uma instância de :class:"
"`ShareableList`:"

#: ../../library/multiprocessing.shared_memory.rst:330
msgid ""
"The following example depicts how one, two, or many processes may access the "
"same :class:`ShareableList` by supplying the name of the shared memory block "
"behind it:"
msgstr ""
"O exemplo a seguir retrata como um, dois ou mais processos podem acessar a "
"mesma :class:`ShareableList` fornecendo o nome do bloco de memória "
"compartilhada por trás dela:"
