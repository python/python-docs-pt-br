# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-11 16:41+0000\n"
"PO-Revision-Date: 2023-05-24 02:12+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/asyncio-runner.rst:6
msgid "Runners"
msgstr "бегуны"

#: ../../library/asyncio-runner.rst:8
msgid "**Source code:** :source:`Lib/asyncio/runners.py`"
msgstr "**Kod źródłowy:** :source:`Lib/asyncio/runners.py`"

#: ../../library/asyncio-runner.rst:11
msgid ""
"This section outlines high-level asyncio primitives to run asyncio code."
msgstr ""
"В этом разделе описываются примитивы asyncio высокого уровня для запуска "
"асинхронного кода."

#: ../../library/asyncio-runner.rst:13
msgid ""
"They are built on top of an :ref:`event loop <asyncio-event-loop>` with the "
"aim to simplify async code usage for common wide-spread scenarios."
msgstr ""
"Они построены на основе цикла событий.\n"
"` с целью упростить использование асинхронного кода для распространенных "
"сценариев."

#: ../../library/asyncio-runner.rst:23
msgid "Running an asyncio Program"
msgstr "Executando um programa asyncio"

#: ../../library/asyncio-runner.rst:27
msgid "Execute the :term:`coroutine` *coro* and return the result."
msgstr "Executa a :term:`corrotina <coroutine>` *coro* e retorna o resultado."

#: ../../library/asyncio-runner.rst:29
msgid ""
"This function runs the passed coroutine, taking care of managing the asyncio "
"event loop, *finalizing asynchronous generators*, and closing the threadpool."
msgstr ""
"Esta função executa a corrotina passada, tomando cuidado de gerenciar o laço "
"de eventos asyncio, *finalizando geradores assíncronos*, e encerrando a "
"threadpool."

#: ../../library/asyncio-runner.rst:33 ../../library/asyncio-runner.rst:103
msgid ""
"This function cannot be called when another asyncio event loop is running in "
"the same thread."
msgstr ""
"Esta função não pode ser chamada quando outro laço de eventos asyncio está "
"executando na mesma thread."

#: ../../library/asyncio-runner.rst:36 ../../library/asyncio-runner.rst:73
msgid ""
"If *debug* is ``True``, the event loop will be run in debug mode. ``False`` "
"disables debug mode explicitly. ``None`` is used to respect the global :ref:"
"`asyncio-debug-mode` settings."
msgstr ""
"Если *отладка* ``Правда`` , цикл событий будет запущен в режиме отладки. "
"``Ложь`` явно отключает режим отладки. ``Нет`` используется для уважения "
"глобального :ref:`asyncio-debug-mode` настройки."

#: ../../library/asyncio-runner.rst:40
msgid ""
"This function always creates a new event loop and closes it at the end.  It "
"should be used as a main entry point for asyncio programs, and should "
"ideally only be called once."
msgstr ""
"Esta função sempre cria um novo laço de eventos e fecha-o no final. Ela deve "
"ser usada como um ponto de entrada principal para programas asyncio, e deve "
"idealmente ser chamada apenas uma vez."

#: ../../library/asyncio-runner.rst:44
msgid "Example::"
msgstr "Exemplo::"

#: ../../library/asyncio-runner.rst:54
msgid "Updated to use :meth:`loop.shutdown_default_executor`."
msgstr "Atualizado para usar :meth:`loop.shutdown_default_executor`."

#: ../../library/asyncio-runner.rst:59
msgid ""
"*debug* is ``None`` by default to respect the global debug mode settings."
msgstr ""
"*отладка* это ``Нет``  по умолчанию, чтобы соблюдать глобальные настройки "
"режима отладки."

#: ../../library/asyncio-runner.rst:63
msgid "Runner context manager"
msgstr "Менеджер контекста бегуна"

#: ../../library/asyncio-runner.rst:67
msgid ""
"A context manager that simplifies *multiple* async function calls in the "
"same context."
msgstr ""
"Менеджер контекста, который упрощает *множественные* вызовы асинхронных "
"функций в одном контексте."

#: ../../library/asyncio-runner.rst:70
msgid ""
"Sometimes several top-level async functions should be called in the same :"
"ref:`event loop <asyncio-event-loop>` and :class:`contextvars.Context`."
msgstr ""
"Иногда в одном цикле событий необходимо вызывать несколько асинхронных "
"функций верхнего уровня.\n"
"` и :class:`contextvars.Context` ."

#: ../../library/asyncio-runner.rst:77
msgid ""
"*loop_factory* could be used for overriding the loop creation. It is the "
"responsibility of the *loop_factory* to set the created loop as the current "
"one. By default :func:`asyncio.new_event_loop` is used and set as current "
"event loop with :func:`asyncio.set_event_loop` if *loop_factory* is ``None``."
msgstr ""
"*loop_factory* можно использовать для отмены создания цикла. На "
"*loop_factory* лежит ответственность за установку созданного цикла в "
"качестве текущего. По умолчанию :func:`asyncio.new_event_loop` используется "
"и устанавливается как текущий цикл событий с помощью :func:`asyncio."
"set_event_loop` если *loop_factory* есть ``Нет`` ."

#: ../../library/asyncio-runner.rst:82
msgid ""
"Basically, :func:`asyncio.run()` example can be rewritten with the runner "
"usage::"
msgstr ""

#: ../../library/asyncio-runner.rst:95
msgid "Run a :term:`coroutine <coroutine>` *coro* in the embedded loop."
msgstr ""
"Запустите :term:`сопрограмму\n"
"` *coro* во встроенном цикле."

#: ../../library/asyncio-runner.rst:97
msgid "Return the coroutine's result or raise its exception."
msgstr "Верните результат сопрограммы или вызовите ее исключение."

#: ../../library/asyncio-runner.rst:99
msgid ""
"An optional keyword-only *context* argument allows specifying a custom :"
"class:`contextvars.Context` for the *coro* to run in. The runner's default "
"context is used if ``None``."
msgstr ""
"Необязательный аргумент *context*, содержащий только ключевые слова, "
"позволяет указать пользовательский :class:`contextvars.Context` для запуска "
"*coro*. Контекст бегуна по умолчанию используется, если ``Нет`` ."

#: ../../library/asyncio-runner.rst:108
msgid "Close the runner."
msgstr "Закройте бегун."

#: ../../library/asyncio-runner.rst:110
msgid ""
"Finalize asynchronous generators, shutdown default executor, close the event "
"loop and release embedded :class:`contextvars.Context`."
msgstr ""
"Завершить работу асинхронных генераторов, завершить работу исполнителя по "
"умолчанию, закрыть цикл обработки событий и выпустить встроенный :class:"
"`contextvars.Context` ."

#: ../../library/asyncio-runner.rst:115
msgid "Return the event loop associated with the runner instance."
msgstr "Верните цикл событий, связанный с экземпляром бегуна."

#: ../../library/asyncio-runner.rst:119
msgid ""
":class:`Runner` uses the lazy initialization strategy, its constructor "
"doesn't initialize underlying low-level structures."
msgstr ""
":class:`Бегун`  использует стратегию ленивой инициализации, его конструктор "
"не инициализирует базовые низкоуровневые структуры."

#: ../../library/asyncio-runner.rst:122
msgid ""
"Embedded *loop* and *context* are created at the :keyword:`with` body "
"entering or the first call of :meth:`run` or :meth:`get_loop`."
msgstr ""
"Встроенные *цикл* и *контекст* создаются в :keyword:`с` вход тела или первый "
"звонок :meth:`беги` или :meth:`get_loop` ."

#: ../../library/asyncio-runner.rst:127
msgid "Handling Keyboard Interruption"
msgstr "Обработка прерываний клавиатуры"

#: ../../library/asyncio-runner.rst:131
msgid ""
"When :const:`signal.SIGINT` is raised by :kbd:`Ctrl-C`, :exc:"
"`KeyboardInterrupt` exception is raised in the main thread by default. "
"However this doesn't work with :mod:`asyncio` because it can interrupt "
"asyncio internals and can hang the program from exiting."
msgstr ""
"Когда :const:`signal.SIGINT` поднят :kbd:`Ctrl-C` , :exc:`KeyboardInterrupt` "
"По умолчанию исключение возникает в основном потоке. Однако это не работает "
"с :mod:`asyncio` потому что это может прервать внутреннюю работу asyncio и "
"помешать выходу программы."

#: ../../library/asyncio-runner.rst:136
msgid ""
"To mitigate this issue, :mod:`asyncio` handles :const:`signal.SIGINT` as "
"follows:"
msgstr ""
"Чтобы смягчить эту проблему, :mod:`asyncio` ручки :const:`signal.SIGINT` "
"следующее:"

#: ../../library/asyncio-runner.rst:138
msgid ""
":meth:`asyncio.Runner.run` installs a custom :const:`signal.SIGINT` handler "
"before any user code is executed and removes it when exiting from the "
"function."
msgstr ""
":meth:`asyncio.Runner.run` устанавливает кастомный :const:`signal.SIGINT` "
"обработчик перед выполнением любого пользовательского кода и удаляет его при "
"выходе из функции."

#: ../../library/asyncio-runner.rst:140
msgid ""
"The :class:`~asyncio.Runner` creates the main task for the passed coroutine "
"for its execution."
msgstr ""
"The :class:`~asyncio.Runner` создает основную задачу для переданной "
"сопрограммы для ее выполнения."

#: ../../library/asyncio-runner.rst:142
msgid ""
"When :const:`signal.SIGINT` is raised by :kbd:`Ctrl-C`, the custom signal "
"handler cancels the main task by calling :meth:`asyncio.Task.cancel` which "
"raises :exc:`asyncio.CancelledError` inside the main task.  This causes the "
"Python stack to unwind, ``try/except`` and ``try/finally`` blocks can be "
"used for resource cleanup.  After the main task is cancelled, :meth:`asyncio."
"Runner.run` raises :exc:`KeyboardInterrupt`."
msgstr ""
"Когда :const:`signal.SIGINT` поднят :kbd:`Ctrl-C` , пользовательский "
"обработчик сигналов отменяет основную задачу, вызывая :meth:`asyncio.Task."
"cancel` что вызывает :exc:`asyncio.CancelledError` внутри основной задачи. "
"Это приводит к раскручиванию стека Python. ``попробовать/исключить`` и "
"``попробуй/наконец-то`` блоки можно использовать для очистки ресурсов. После "
"отмены основной задачи :meth:`asyncio.Runner.run` поднимает :exc:"
"`KeyboardInterrupt` ."

#: ../../library/asyncio-runner.rst:148
msgid ""
"A user could write a tight loop which cannot be interrupted by :meth:"
"`asyncio.Task.cancel`, in which case the second following :kbd:`Ctrl-C` "
"immediately raises the :exc:`KeyboardInterrupt` without cancelling the main "
"task."
msgstr ""
"Пользователь может написать плотный цикл, который не может быть прерван :"
"meth:`asyncio.Task.cancel` , и в этом случае второй следующий :kbd:`Ctrl-C` "
"немедленно поднимает :exc:`KeyboardInterrupt` без отмены основной задачи."
