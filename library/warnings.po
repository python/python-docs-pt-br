# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Marco Rougeth <marco@rougeth.com>, 2021
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2021
# a76d6fb6142d7607ab0526dcbddb02d7_7bf0da0 <3b5fb0f281c8dfb4c0170f2ee2a6cfcf_843623>, 2021
# i17obot <i17obot@rougeth.com>, 2021
# Danilo Lima <djkcond@gmail.com>, 2021
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-08 02:53-0300\n"
"PO-Revision-Date: 2021-06-28 01:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/warnings.rst:2
msgid ":mod:`!warnings` --- Warning control"
msgstr ":mod:`!warnings` --- Controle de avisos"

#: ../../library/warnings.rst:7
msgid "**Source code:** :source:`Lib/warnings.py`"
msgstr "**Código-fonte:** :source:`Lib/warnings.py`"

#: ../../library/warnings.rst:13
msgid ""
"Warning messages are typically issued in situations where it is useful to "
"alert the user of some condition in a program, where that condition "
"(normally) doesn't warrant raising an exception and terminating the "
"program.  For example, one might want to issue a warning when a program uses "
"an obsolete module."
msgstr ""
"As mensagens de aviso são normalmente emitidas em situações em que é útil "
"alertar o usuário sobre alguma condição em um programa, onde essa condição "
"(normalmente) não garante o levantamento de uma exceção e o encerramento do "
"programa. Por exemplo, pode-se querer emitir um aviso quando um programa usa "
"um módulo obsoleto."

#: ../../library/warnings.rst:18
msgid ""
"Python programmers issue warnings by calling the :func:`warn` function "
"defined in this module.  (C programmers use :c:func:`PyErr_WarnEx`; see :ref:"
"`exceptionhandling` for details)."
msgstr ""
"Os programadores Python emitem avisos chamando a função :func:`warn` "
"definida neste módulo. (Os programadores C usam :c:func:`PyErr_WarnEx`; "
"veja :ref:`exceptionhandling` para detalhes)."

#: ../../library/warnings.rst:22
msgid ""
"Warning messages are normally written to :data:`sys.stderr`, but their "
"disposition can be changed flexibly, from ignoring all warnings to turning "
"them into exceptions.  The disposition of warnings can vary based on the :"
"ref:`warning category <warning-categories>`, the text of the warning "
"message, and the source location where it is issued.  Repetitions of a "
"particular warning for the same source location are typically suppressed."
msgstr ""
"Mensagens de aviso são normalmente escritas no :data:`sys.stderr`, mas sua "
"disposição pode ser alterada de forma flexível, desde ignorar todos os "
"avisos até transformá-los em exceções. A disposição dos avisos pode variar "
"de acordo com :ref:`categoria de aviso <warning-categories>`, o texto da "
"mensagem de aviso e o local de origem onde ela é emitida. As repetições de "
"um aviso específico para o mesmo local de origem são normalmente suprimidas."

#: ../../library/warnings.rst:29
msgid ""
"There are two stages in warning control: first, each time a warning is "
"issued, a determination is made whether a message should be issued or not; "
"next, if a message is to be issued, it is formatted and printed using a user-"
"settable hook."
msgstr ""
"Existem duas etapas no controle de avisos: primeiro, cada vez que um aviso é "
"emitido, é feita uma determinação se uma mensagem deve ser emitida ou não; a "
"seguir, se uma mensagem deve ser emitida, ela é formatada e impressa usando "
"um gancho configurável pelo usuário."

#: ../../library/warnings.rst:33
msgid ""
"The determination whether to issue a warning message is controlled by the :"
"ref:`warning filter <warning-filter>`, which is a sequence of matching rules "
"and actions. Rules can be added to the filter by calling :func:"
"`filterwarnings` and reset to its default state by calling :func:"
"`resetwarnings`."
msgstr ""
"A determinação de emitir ou não uma mensagem de aviso é controlada pelo :ref:"
"`filtro de aviso <warning-filter>`, que é uma sequência de regras e ações "
"correspondentes. As regras podem ser adicionadas ao filtro chamando :func:"
"`filterwarnings` e redefinidas para seu estado padrão chamando :func:"
"`resetwarnings`."

#: ../../library/warnings.rst:38
msgid ""
"The printing of warning messages is done by calling :func:`showwarning`, "
"which may be overridden; the default implementation of this function formats "
"the message by calling :func:`formatwarning`, which is also available for "
"use by custom implementations."
msgstr ""
"A exibição de mensagens de aviso é feita chamando :func:`showwarning`, que "
"pode ser substituída; a implementação padrão desta função formata a mensagem "
"chamando :func:`formatwarning`, que também está disponível para uso por "
"implementações personalizadas."

#: ../../library/warnings.rst:44
msgid ""
":func:`logging.captureWarnings` allows you to handle all warnings with the "
"standard logging infrastructure."
msgstr ""
":func:`logging.captureWarnings` permite que você manipule todos os avisos "
"com a infraestrutura de registro padrão."

#: ../../library/warnings.rst:51
msgid "Warning Categories"
msgstr "Categorias de avisos"

#: ../../library/warnings.rst:53
msgid ""
"There are a number of built-in exceptions that represent warning categories. "
"This categorization is useful to be able to filter out groups of warnings."
msgstr ""
"Existem várias exceções embutidas que representam categorias de aviso. Essa "
"categorização é útil para filtrar grupos de avisos."

#: ../../library/warnings.rst:56
msgid ""
"While these are technically :ref:`built-in exceptions <warning-categories-as-"
"exceptions>`, they are documented here, because conceptually they belong to "
"the warnings mechanism."
msgstr ""
"Embora sejam tecnicamente :ref:`exceções embutidas <warning-categories-as-"
"exceptions>`, elas são documentadas aqui, porque conceitualmente pertencem "
"ao mecanismo de avisos."

#: ../../library/warnings.rst:60
msgid ""
"User code can define additional warning categories by subclassing one of the "
"standard warning categories.  A warning category must always be a subclass "
"of the :exc:`Warning` class."
msgstr ""
"O código do usuário pode definir categorias de aviso adicionais criando uma "
"subclasse de uma das categorias de aviso padrão. Uma categoria de aviso deve "
"ser sempre uma subclasse da classe  :exc:`Warning`."

#: ../../library/warnings.rst:64
msgid "The following warnings category classes are currently defined:"
msgstr ""
"As seguintes classes de categorias de avisos estão definidas atualmente:"

#: ../../library/warnings.rst:69
msgid "Class"
msgstr "Classe"

#: ../../library/warnings.rst:69
msgid "Description"
msgstr "Descrição"

#: ../../library/warnings.rst:71
msgid ":exc:`Warning`"
msgstr ":exc:`Warning`"

#: ../../library/warnings.rst:71
msgid ""
"This is the base class of all warning category classes.  It is a subclass "
"of :exc:`Exception`."
msgstr ""
"Esta é a classe base de todas as classes de categoria de aviso. É uma "
"subclasse de :exc:`Exception`."

#: ../../library/warnings.rst:75
msgid ":exc:`UserWarning`"
msgstr ":exc:`UserWarning`"

#: ../../library/warnings.rst:75
msgid "The default category for :func:`warn`."
msgstr "A categoria padrão para :func:`warn`."

#: ../../library/warnings.rst:77
msgid ":exc:`DeprecationWarning`"
msgstr ":exc:`DeprecationWarning`"

#: ../../library/warnings.rst:77
msgid ""
"Base category for warnings about deprecated features when those warnings are "
"intended for other Python developers (ignored by default, unless triggered "
"by code in ``__main__``)."
msgstr ""
"Categoria base para avisos sobre recursos descontinuados quando esses avisos "
"são destinados a outros desenvolvedores Python (ignorado por padrão, a menos "
"que acionado por código em ``__main__``)."

#: ../../library/warnings.rst:82
msgid ":exc:`SyntaxWarning`"
msgstr ":exc:`SyntaxWarning`"

#: ../../library/warnings.rst:82
msgid "Base category for warnings about dubious syntactic features."
msgstr "Categoria base para avisos sobre recursos sintáticos duvidosos."

#: ../../library/warnings.rst:85
msgid ":exc:`RuntimeWarning`"
msgstr ":exc:`RuntimeWarning`"

#: ../../library/warnings.rst:85
msgid "Base category for warnings about dubious runtime features."
msgstr ""
"Categoria base para avisos sobre recursos duvidosos de tempo de execução."

#: ../../library/warnings.rst:88
msgid ":exc:`FutureWarning`"
msgstr ":exc:`FutureWarning`"

#: ../../library/warnings.rst:88
msgid ""
"Base category for warnings about deprecated features when those warnings are "
"intended for end users of applications that are written in Python."
msgstr ""
"Categoria base para avisos sobre recursos descontinuados quando esses avisos "
"se destinam a usuários finais de aplicações escritas em Python."

#: ../../library/warnings.rst:93
msgid ":exc:`PendingDeprecationWarning`"
msgstr ":exc:`PendingDeprecationWarning`"

#: ../../library/warnings.rst:93
msgid ""
"Base category for warnings about features that will be deprecated in the "
"future (ignored by default)."
msgstr ""
"Categoria base para avisos sobre recursos que serão descontinuados no futuro "
"(ignorados por padrão)."

#: ../../library/warnings.rst:97
msgid ":exc:`ImportWarning`"
msgstr ":exc:`ImportWarning`"

#: ../../library/warnings.rst:97
msgid ""
"Base category for warnings triggered during the process of importing a "
"module (ignored by default)."
msgstr ""
"Categoria base para avisos acionados durante o processo de importação de um "
"módulo (ignorado por padrão)."

#: ../../library/warnings.rst:101
msgid ":exc:`UnicodeWarning`"
msgstr ":exc:`UnicodeWarning`"

#: ../../library/warnings.rst:101
msgid "Base category for warnings related to Unicode."
msgstr "Categoria base para avisos relacionados a Unicode."

#: ../../library/warnings.rst:104
msgid ":exc:`BytesWarning`"
msgstr ":exc:`BytesWarning`"

#: ../../library/warnings.rst:104
msgid ""
"Base category for warnings related to :class:`bytes` and :class:`bytearray`."
msgstr ""
"Categoria base para avisos relacionados a :class:`bytes` e :class:"
"`bytearray`."

#: ../../library/warnings.rst:107
msgid ":exc:`ResourceWarning`"
msgstr ":exc:`ResourceWarning`"

#: ../../library/warnings.rst:107
msgid ""
"Base category for warnings related to resource usage (ignored by default)."
msgstr ""
"Categoria base para avisos relacionados a uso de recursos (ignorado por "
"padrão)."

#: ../../library/warnings.rst:111
msgid ""
"Previously :exc:`DeprecationWarning` and :exc:`FutureWarning` were "
"distinguished based on whether a feature was being removed entirely or "
"changing its behaviour. They are now distinguished based on their intended "
"audience and the way they're handled by the default warnings filters."
msgstr ""
"Anteriormente, :exc:`DeprecationWarning` e :exc:`FutureWarning` eram "
"diferenciadas com base em se um recurso estava sendo removido completamente "
"ou mudando seu comportamento. Elas agora são diferenciadas com base em seu "
"público-alvo e na maneira como são tratadas pelos filtros de avisos padrão."

#: ../../library/warnings.rst:122
msgid "The Warnings Filter"
msgstr "O filtro de avisos"

#: ../../library/warnings.rst:124
msgid ""
"The warnings filter controls whether warnings are ignored, displayed, or "
"turned into errors (raising an exception)."
msgstr ""
"O filtro de avisos controla se os avisos são ignorados, exibidos ou "
"transformados em erros (levantando uma exceção)."

#: ../../library/warnings.rst:127
msgid ""
"Conceptually, the warnings filter maintains an ordered list of filter "
"specifications; any specific warning is matched against each filter "
"specification in the list in turn until a match is found; the filter "
"determines the disposition of the match.  Each entry is a tuple of the form "
"(*action*, *message*, *category*, *module*, *lineno*), where:"
msgstr ""
"Conceitualmente, o filtro de avisos mantém uma lista ordenada de "
"especificações de filtro; qualquer aviso específico é comparado com cada "
"especificação de filtro na lista, por sua vez, até que uma correspondência "
"seja encontrada; o filtro determina a disposição da correspondência. Cada "
"entrada é uma tupla no formato (*action*, *message*, *category*, *module*, "
"*lineno*), sendo:"

#: ../../library/warnings.rst:133
msgid "*action* is one of the following strings:"
msgstr "*action* é uma das seguintes strings:"

#: ../../library/warnings.rst:136
msgid "Value"
msgstr "Valor"

#: ../../library/warnings.rst:136
msgid "Disposition"
msgstr "Disposição"

#: ../../library/warnings.rst:138
msgid "``\"default\"``"
msgstr "``\"default\"``"

#: ../../library/warnings.rst:138
msgid ""
"print the first occurrence of matching warnings for each location (module + "
"line number) where the warning is issued"
msgstr ""
"exibe a primeira ocorrência de avisos correspondentes para cada local "
"(módulo + número da linha) onde o aviso é emitido"

#: ../../library/warnings.rst:142
msgid "``\"error\"``"
msgstr "``\"error\"``"

#: ../../library/warnings.rst:142
msgid "turn matching warnings into exceptions"
msgstr "transforma avisos correspondentes em exceções"

#: ../../library/warnings.rst:144
msgid "``\"ignore\"``"
msgstr "``\"ignore\"``"

#: ../../library/warnings.rst:144
msgid "never print matching warnings"
msgstr "nunca exibe avisos correspondentes"

#: ../../library/warnings.rst:146
msgid "``\"always\"``"
msgstr "``\"always\"``"

#: ../../library/warnings.rst:146
msgid "always print matching warnings"
msgstr "sempre exibe avisos correspondentes"

#: ../../library/warnings.rst:148
msgid "``\"all\"``"
msgstr ""

#: ../../library/warnings.rst:148
msgid "alias to \"always\""
msgstr ""

#: ../../library/warnings.rst:150
msgid "``\"module\"``"
msgstr "``\"module\"``"

#: ../../library/warnings.rst:150
msgid ""
"print the first occurrence of matching warnings for each module where the "
"warning is issued (regardless of line number)"
msgstr ""
"exibe a primeira ocorrência de avisos correspondentes para cada módulo onde "
"o aviso é emitido (independentemente do número da linha)"

#: ../../library/warnings.rst:154
msgid "``\"once\"``"
msgstr "``\"once\"``"

#: ../../library/warnings.rst:154
msgid ""
"print only the first occurrence of matching warnings, regardless of location"
msgstr ""
"exibe apenas a primeira ocorrência de avisos correspondentes, "
"independentemente da localização"

#: ../../library/warnings.rst:158
msgid ""
"*message* is a string containing a regular expression that the start of the "
"warning message must match, case-insensitively.  In :option:`-W` and :envvar:"
"`PYTHONWARNINGS`, *message* is a literal string that the start of the "
"warning message must contain (case-insensitively), ignoring any whitespace "
"at the start or end of *message*."
msgstr ""
"*message* é uma string contendo uma expressão regular que o início da "
"mensagem de aviso deve corresponder, sem distinção entre maiúsculas e "
"minúsculas. Em :option:`-W` e :envvar:`PYTHONWARNINGS`, *message* é uma "
"string literal que o início da mensagem de aviso deve conter (sem distinção "
"entre maiúsculas e minúsculas), ignorando qualquer espaço em branco no "
"início ou no fim de *message*."

#: ../../library/warnings.rst:164
msgid ""
"*category* is a class (a subclass of :exc:`Warning`) of which the warning "
"category must be a subclass in order to match."
msgstr ""
"*category* é uma classe (uma subclasse de :exc:`Warning`) da qual a "
"categoria de aviso deve ser uma subclasse para corresponder."

#: ../../library/warnings.rst:167
msgid ""
"*module* is a string containing a regular expression that the start of the "
"fully qualified module name must match, case-sensitively.  In :option:`-W` "
"and :envvar:`PYTHONWARNINGS`, *module* is a literal string that the fully "
"qualified module name must be equal to (case-sensitively), ignoring any "
"whitespace at the start or end of *module*."
msgstr ""
"*module* é uma string contendo uma expressão regular que o início do nome do "
"módulo totalmente qualificado deve corresponder, diferenciando maiúsculas de "
"minúsculas. Em :option:`-W` e :envvar:`PYTHONWARNINGS`, *module* é uma "
"string literal que o nome do módulo totalmente qualificado deve ser igual a "
"(diferenciando maiúsculas de minúsculas), ignorando qualquer espaço em "
"branco no início ou no fim de *module*."

#: ../../library/warnings.rst:173
msgid ""
"*lineno* is an integer that the line number where the warning occurred must "
"match, or ``0`` to match all line numbers."
msgstr ""
"*lineno* é um número inteiro que deve corresponder ao número da linha onde "
"ocorreu o aviso, ou ``0`` para corresponder a todos os números de linha."

#: ../../library/warnings.rst:176
msgid ""
"Since the :exc:`Warning` class is derived from the built-in :exc:`Exception` "
"class, to turn a warning into an error we simply raise ``category(message)``."
msgstr ""
"Como a classe :exc:`Warning` é derivada da classe embutida :exc:`Exception`, "
"para transformar um aviso em um erro, simplesmente levantamos "
"``category(message)``."

#: ../../library/warnings.rst:179
msgid ""
"If a warning is reported and doesn't match any registered filter then the "
"\"default\" action is applied (hence its name)."
msgstr ""
"Se um aviso for relatado e não corresponder a nenhum filtro registrado, a "
"ação \"padrão\" será aplicada (daí seu nome)."

#: ../../library/warnings.rst:187
msgid "Repeated Warning Suppression Criteria"
msgstr "Critérios de supressão de avisos repetidos"

#: ../../library/warnings.rst:189
msgid ""
"The filters that suppress repeated warnings apply the following criteria to "
"determine if a warning is considered a repeat:"
msgstr ""
"Os filtros que suprimem avisos repetidos aplicam os seguintes critérios para "
"determinar se um aviso é considerado uma repetição:"

#: ../../library/warnings.rst:191
msgid ""
"``\"default\"``: A warning is considered a repeat only if the (*message*, "
"*category*, *module*, *lineno*) are all the same."
msgstr ""
"``\"default\"``: Um aviso é considerado uma repetição somente se (*message*, "
"*category*, *module*, *lineno*) forem todos iguais."

#: ../../library/warnings.rst:192
msgid ""
"``\"module\"``: A warning is considered a repeat if the (*message*, "
"*category*, *module*) are the same, ignoring the line number."
msgstr ""
"``\"module\"``: Um aviso é considerado uma repetição se (*message*, "
"*category*, *module*) forem os mesmos, ignorando o número da linha."

#: ../../library/warnings.rst:193
msgid ""
"``\"once\"``: A warning is considered a repeat if the (*message*, "
"*category*) are the same, ignoring the module and line number."
msgstr ""
"``\"once\"``: Um aviso é considerado uma repetição se (*message*, "
"*category*) forem os mesmos, ignorando o módulo e o número da linha."

#: ../../library/warnings.rst:199
msgid "Describing Warning Filters"
msgstr "Descrevendo filtros de aviso"

#: ../../library/warnings.rst:201
msgid ""
"The warnings filter is initialized by :option:`-W` options passed to the "
"Python interpreter command line and the :envvar:`PYTHONWARNINGS` environment "
"variable. The interpreter saves the arguments for all supplied entries "
"without interpretation in :data:`sys.warnoptions`; the :mod:`warnings` "
"module parses these when it is first imported (invalid options are ignored, "
"after printing a message to :data:`sys.stderr`)."
msgstr ""

#: ../../library/warnings.rst:208
msgid ""
"Individual warnings filters are specified as a sequence of fields separated "
"by colons::"
msgstr ""

#: ../../library/warnings.rst:211
msgid "action:message:category:module:line"
msgstr ""

#: ../../library/warnings.rst:213
msgid ""
"The meaning of each of these fields is as described in :ref:`warning-"
"filter`. When listing multiple filters on a single line (as for :envvar:"
"`PYTHONWARNINGS`), the individual filters are separated by commas and the "
"filters listed later take precedence over those listed before them (as "
"they're applied left-to-right, and the most recently applied filters take "
"precedence over earlier ones)."
msgstr ""

#: ../../library/warnings.rst:220
msgid ""
"Commonly used warning filters apply to either all warnings, warnings in a "
"particular category, or warnings raised by particular modules or packages. "
"Some examples::"
msgstr ""

#: ../../library/warnings.rst:224
msgid ""
"default                      # Show all warnings (even those ignored by "
"default)\n"
"ignore                       # Ignore all warnings\n"
"error                        # Convert all warnings to errors\n"
"error::ResourceWarning       # Treat ResourceWarning messages as errors\n"
"default::DeprecationWarning  # Show DeprecationWarning messages\n"
"ignore,default:::mymodule    # Only report warnings triggered by "
"\"mymodule\"\n"
"error:::mymodule             # Convert warnings to errors in \"mymodule\""
msgstr ""

#: ../../library/warnings.rst:236
msgid "Default Warning Filter"
msgstr "Filtro de avisos padrão"

#: ../../library/warnings.rst:238
msgid ""
"By default, Python installs several warning filters, which can be overridden "
"by the :option:`-W` command-line option, the :envvar:`PYTHONWARNINGS` "
"environment variable and calls to :func:`filterwarnings`."
msgstr ""

#: ../../library/warnings.rst:242
msgid ""
"In regular release builds, the default warning filter has the following "
"entries (in order of precedence)::"
msgstr ""

#: ../../library/warnings.rst:245
msgid ""
"default::DeprecationWarning:__main__\n"
"ignore::DeprecationWarning\n"
"ignore::PendingDeprecationWarning\n"
"ignore::ImportWarning\n"
"ignore::ResourceWarning"
msgstr ""

#: ../../library/warnings.rst:251
msgid ""
"In a :ref:`debug build <debug-build>`, the list of default warning filters "
"is empty."
msgstr ""

#: ../../library/warnings.rst:253
msgid ""
":exc:`DeprecationWarning` is now ignored by default in addition to :exc:"
"`PendingDeprecationWarning`."
msgstr ""

#: ../../library/warnings.rst:257
msgid ""
":exc:`DeprecationWarning` is once again shown by default when triggered "
"directly by code in ``__main__``."
msgstr ""

#: ../../library/warnings.rst:261
msgid ""
":exc:`BytesWarning` no longer appears in the default filter list and is "
"instead configured via :data:`sys.warnoptions` when :option:`-b` is "
"specified twice."
msgstr ""

#: ../../library/warnings.rst:270
msgid "Overriding the default filter"
msgstr ""

#: ../../library/warnings.rst:272
msgid ""
"Developers of applications written in Python may wish to hide *all* Python "
"level warnings from their users by default, and only display them when "
"running tests or otherwise working on the application. The :data:`sys."
"warnoptions` attribute used to pass filter configurations to the interpreter "
"can be used as a marker to indicate whether or not warnings should be "
"disabled::"
msgstr ""

#: ../../library/warnings.rst:278
msgid ""
"import sys\n"
"\n"
"if not sys.warnoptions:\n"
"    import warnings\n"
"    warnings.simplefilter(\"ignore\")"
msgstr ""

#: ../../library/warnings.rst:284
msgid ""
"Developers of test runners for Python code are advised to instead ensure "
"that *all* warnings are displayed by default for the code under test, using "
"code like::"
msgstr ""

#: ../../library/warnings.rst:288
msgid ""
"import sys\n"
"\n"
"if not sys.warnoptions:\n"
"    import os, warnings\n"
"    warnings.simplefilter(\"default\") # Change the filter in this process\n"
"    os.environ[\"PYTHONWARNINGS\"] = \"default\" # Also affect subprocesses"
msgstr ""

#: ../../library/warnings.rst:295
msgid ""
"Finally, developers of interactive shells that run user code in a namespace "
"other than ``__main__`` are advised to ensure that :exc:`DeprecationWarning` "
"messages are made visible by default, using code like the following (where "
"``user_ns`` is the module used to execute code entered interactively)::"
msgstr ""

#: ../../library/warnings.rst:300
msgid ""
"import warnings\n"
"warnings.filterwarnings(\"default\", category=DeprecationWarning,\n"
"                                   module=user_ns.get(\"__name__\"))"
msgstr ""

#: ../../library/warnings.rst:308
msgid "Temporarily Suppressing Warnings"
msgstr ""

#: ../../library/warnings.rst:310
msgid ""
"If you are using code that you know will raise a warning, such as a "
"deprecated function, but do not want to see the warning (even when warnings "
"have been explicitly configured via the command line), then it is possible "
"to suppress the warning using the :class:`catch_warnings` context manager::"
msgstr ""

#: ../../library/warnings.rst:315
msgid ""
"import warnings\n"
"\n"
"def fxn():\n"
"    warnings.warn(\"deprecated\", DeprecationWarning)\n"
"\n"
"with warnings.catch_warnings():\n"
"    warnings.simplefilter(\"ignore\")\n"
"    fxn()"
msgstr ""

#: ../../library/warnings.rst:324
msgid ""
"While within the context manager all warnings will simply be ignored. This "
"allows you to use known-deprecated code without having to see the warning "
"while not suppressing the warning for other code that might not be aware of "
"its use of deprecated code."
msgstr ""

#: ../../library/warnings.rst:331 ../../library/warnings.rst:373
#: ../../library/warnings.rst:623
msgid ""
"See :ref:`warning-concurrent-safe` for details on the concurrency-safety of "
"the :class:`catch_warnings` context manager when used in programs using "
"multiple threads or async functions."
msgstr ""

#: ../../library/warnings.rst:338
msgid "Testing Warnings"
msgstr ""

#: ../../library/warnings.rst:340
msgid ""
"To test warnings raised by code, use the :class:`catch_warnings` context "
"manager. With it you can temporarily mutate the warnings filter to "
"facilitate your testing. For instance, do the following to capture all "
"raised warnings to check::"
msgstr ""

#: ../../library/warnings.rst:345
msgid ""
"import warnings\n"
"\n"
"def fxn():\n"
"    warnings.warn(\"deprecated\", DeprecationWarning)\n"
"\n"
"with warnings.catch_warnings(record=True) as w:\n"
"    # Cause all warnings to always be triggered.\n"
"    warnings.simplefilter(\"always\")\n"
"    # Trigger a warning.\n"
"    fxn()\n"
"    # Verify some things\n"
"    assert len(w) == 1\n"
"    assert issubclass(w[-1].category, DeprecationWarning)\n"
"    assert \"deprecated\" in str(w[-1].message)"
msgstr ""

#: ../../library/warnings.rst:360
msgid ""
"One can also cause all warnings to be exceptions by using ``error`` instead "
"of ``always``. One thing to be aware of is that if a warning has already "
"been raised because of a ``once``/``default`` rule, then no matter what "
"filters are set the warning will not be seen again unless the warnings "
"registry related to the warning has been cleared."
msgstr ""

#: ../../library/warnings.rst:366
msgid ""
"Once the context manager exits, the warnings filter is restored to its state "
"when the context was entered. This prevents tests from changing the warnings "
"filter in unexpected ways between tests and leading to indeterminate test "
"results."
msgstr ""

#: ../../library/warnings.rst:377
msgid ""
"When testing multiple operations that raise the same kind of warning, it is "
"important to test them in a manner that confirms each operation is raising a "
"new warning (e.g. set warnings to be raised as exceptions and check the "
"operations raise exceptions, check that the length of the warning list "
"continues to increase after each operation, or else delete the previous "
"entries from the warnings list before each new operation)."
msgstr ""

#: ../../library/warnings.rst:388
msgid "Updating Code For New Versions of Dependencies"
msgstr ""

#: ../../library/warnings.rst:390
msgid ""
"Warning categories that are primarily of interest to Python developers "
"(rather than end users of applications written in Python) are ignored by "
"default."
msgstr ""

#: ../../library/warnings.rst:393
msgid ""
"Notably, this \"ignored by default\" list includes :exc:`DeprecationWarning` "
"(for every module except ``__main__``), which means developers should make "
"sure to test their code with typically ignored warnings made visible in "
"order to receive timely notifications of future breaking API changes "
"(whether in the standard library or third party packages)."
msgstr ""

#: ../../library/warnings.rst:399
msgid ""
"In the ideal case, the code will have a suitable test suite, and the test "
"runner will take care of implicitly enabling all warnings when running tests "
"(the test runner provided by the :mod:`unittest` module does this)."
msgstr ""

#: ../../library/warnings.rst:403
msgid ""
"In less ideal cases, applications can be checked for use of deprecated "
"interfaces by passing :option:`-Wd <-W>` to the Python interpreter (this is "
"shorthand for :option:`!-W default`) or setting ``PYTHONWARNINGS=default`` "
"in the environment. This enables default handling for all warnings, "
"including those that are ignored by default. To change what action is taken "
"for encountered warnings you can change what argument is passed to :option:`-"
"W` (e.g. :option:`!-W error`). See the :option:`-W` flag for more details on "
"what is possible."
msgstr ""

#: ../../library/warnings.rst:416
msgid "Available Functions"
msgstr ""

#: ../../library/warnings.rst:421
msgid ""
"Issue a warning, or maybe ignore it or raise an exception.  The *category* "
"argument, if given, must be a :ref:`warning category class <warning-"
"categories>`; it defaults to :exc:`UserWarning`.  Alternatively, *message* "
"can be a :exc:`Warning` instance, in which case *category* will be ignored "
"and ``message.__class__`` will be used. In this case, the message text will "
"be ``str(message)``. This function raises an exception if the particular "
"warning issued is changed into an error by the :ref:`warnings filter "
"<warning-filter>`.  The *stacklevel* argument can be used by wrapper "
"functions written in Python, like this::"
msgstr ""

#: ../../library/warnings.rst:430
msgid ""
"def deprecated_api(message):\n"
"    warnings.warn(message, DeprecationWarning, stacklevel=2)"
msgstr ""

#: ../../library/warnings.rst:433
msgid ""
"This makes the warning refer to ``deprecated_api``'s caller, rather than to "
"the source of ``deprecated_api`` itself (since the latter would defeat the "
"purpose of the warning message)."
msgstr ""

#: ../../library/warnings.rst:437
msgid ""
"The *skip_file_prefixes* keyword argument can be used to indicate which "
"stack frames are ignored when counting stack levels. This can be useful when "
"you want the warning to always appear at call sites outside of a package "
"when a constant *stacklevel* does not fit all call paths or is otherwise "
"challenging to maintain. If supplied, it must be a tuple of strings. When "
"prefixes are supplied, stacklevel is implicitly overridden to be ``max(2, "
"stacklevel)``. To cause a warning to be attributed to the caller from "
"outside of the current package you might write::"
msgstr ""

#: ../../library/warnings.rst:446
msgid ""
"# example/lower.py\n"
"_warn_skips = (os.path.dirname(__file__),)\n"
"\n"
"def one_way(r_luxury_yacht=None, t_wobbler_mangrove=None):\n"
"    if r_luxury_yacht:\n"
"        warnings.warn(\"Please migrate to t_wobbler_mangrove=.\",\n"
"                      skip_file_prefixes=_warn_skips)\n"
"\n"
"# example/higher.py\n"
"from . import lower\n"
"\n"
"def another_way(**kw):\n"
"    lower.one_way(**kw)"
msgstr ""

#: ../../library/warnings.rst:460
msgid ""
"This makes the warning refer to both the ``example.lower.one_way()`` and "
"``package.higher.another_way()`` call sites only from calling code living "
"outside of ``example`` package."
msgstr ""

#: ../../library/warnings.rst:464 ../../library/warnings.rst:490
msgid ""
"*source*, if supplied, is the destroyed object which emitted a :exc:"
"`ResourceWarning`."
msgstr ""

#: ../../library/warnings.rst:467
msgid "Added *source* parameter."
msgstr ""

#: ../../library/warnings.rst:470
msgid "Added *skip_file_prefixes*."
msgstr ""

#: ../../library/warnings.rst:476
msgid ""
"This is a low-level interface to the functionality of :func:`warn`, passing "
"in explicitly the message, category, filename and line number, and "
"optionally the module name and the registry (which should be the "
"``__warningregistry__`` dictionary of the module).  The module name defaults "
"to the filename with ``.py`` stripped; if no registry is passed, the warning "
"is never suppressed. *message* must be a string and *category* a subclass "
"of :exc:`Warning` or *message* may be a :exc:`Warning` instance, in which "
"case *category* will be ignored."
msgstr ""

#: ../../library/warnings.rst:485
msgid ""
"*module_globals*, if supplied, should be the global namespace in use by the "
"code for which the warning is issued.  (This argument is used to support "
"displaying source for modules found in zipfiles or other non-filesystem "
"import sources)."
msgstr ""

#: ../../library/warnings.rst:493
msgid "Add the *source* parameter."
msgstr ""

#: ../../library/warnings.rst:499
msgid ""
"Write a warning to a file.  The default implementation calls "
"``formatwarning(message, category, filename, lineno, line)`` and writes the "
"resulting string to *file*, which defaults to :data:`sys.stderr`.  You may "
"replace this function with any callable by assigning to ``warnings."
"showwarning``. *line* is a line of source code to be included in the warning "
"message; if *line* is not supplied, :func:`showwarning` will try to read the "
"line specified by *filename* and *lineno*."
msgstr ""

#: ../../library/warnings.rst:510
msgid ""
"Format a warning the standard way.  This returns a string which may contain "
"embedded newlines and ends in a newline.  *line* is a line of source code to "
"be included in the warning message; if *line* is not supplied, :func:"
"`formatwarning` will try to read the line specified by *filename* and "
"*lineno*."
msgstr ""

#: ../../library/warnings.rst:519
msgid ""
"Insert an entry into the list of :ref:`warnings filter specifications "
"<warning-filter>`.  The entry is inserted at the front by default; if "
"*append* is true, it is inserted at the end.  This checks the types of the "
"arguments, compiles the *message* and *module* regular expressions, and "
"inserts them as a tuple in the list of warnings filters.  Entries closer to "
"the front of the list override entries later in the list, if both match a "
"particular warning.  Omitted arguments default to a value that matches "
"everything."
msgstr ""

#: ../../library/warnings.rst:531
msgid ""
"Insert a simple entry into the list of :ref:`warnings filter specifications "
"<warning-filter>`.  The meaning of the function parameters is as for :func:"
"`filterwarnings`, but regular expressions are not needed as the filter "
"inserted always matches any message in any module as long as the category "
"and line number match."
msgstr ""

#: ../../library/warnings.rst:540
msgid ""
"Reset the warnings filter.  This discards the effect of all previous calls "
"to :func:`filterwarnings`, including that of the :option:`-W` command line "
"options and calls to :func:`simplefilter`."
msgstr ""

#: ../../library/warnings.rst:547
msgid "Decorator to indicate that a class, function or overload is deprecated."
msgstr ""

#: ../../library/warnings.rst:549
msgid ""
"When this decorator is applied to an object, deprecation warnings may be "
"emitted at runtime when the object is used. :term:`static type checkers "
"<static type checker>` will also generate a diagnostic on usage of the "
"deprecated object."
msgstr ""

#: ../../library/warnings.rst:554
msgid "Usage::"
msgstr "Uso::"

#: ../../library/warnings.rst:556
msgid ""
"from warnings import deprecated\n"
"from typing import overload\n"
"\n"
"@deprecated(\"Use B instead\")\n"
"class A:\n"
"    pass\n"
"\n"
"@deprecated(\"Use g instead\")\n"
"def f():\n"
"    pass\n"
"\n"
"@overload\n"
"@deprecated(\"int support is deprecated\")\n"
"def g(x: int) -> int: ...\n"
"@overload\n"
"def g(x: str) -> int: ..."
msgstr ""

#: ../../library/warnings.rst:573
msgid ""
"The warning specified by *category* will be emitted at runtime on use of "
"deprecated objects. For functions, that happens on calls; for classes, on "
"instantiation and on creation of subclasses. If the *category* is ``None``, "
"no warning is emitted at runtime. The *stacklevel* determines where the "
"warning is emitted. If it is ``1`` (the default), the warning is emitted at "
"the direct caller of the deprecated object; if it is higher, it is emitted "
"further up the stack. Static type checker behavior is not affected by the "
"*category* and *stacklevel* arguments."
msgstr ""

#: ../../library/warnings.rst:584
msgid ""
"The deprecation message passed to the decorator is saved in the "
"``__deprecated__`` attribute on the decorated object. If applied to an "
"overload, the decorator must be after the :func:`@overload <typing."
"overload>` decorator for the attribute to exist on the overload as returned "
"by :func:`typing.get_overloads`."
msgstr ""

#: ../../library/warnings.rst:591
msgid "See :pep:`702`."
msgstr ""

#: ../../library/warnings.rst:596
msgid "Available Context Managers"
msgstr ""

#: ../../library/warnings.rst:600
msgid ""
"A context manager that copies and, upon exit, restores the warnings filter "
"and the :func:`showwarning` function. If the *record* argument is :const:"
"`False` (the default) the context manager returns :class:`None` on entry. If "
"*record* is :const:`True`, a list is returned that is progressively "
"populated with objects as seen by a custom :func:`showwarning` function "
"(which also suppresses output to ``sys.stdout``). Each object in the list "
"has attributes with the same names as the arguments to :func:`showwarning`."
msgstr ""

#: ../../library/warnings.rst:609
msgid ""
"The *module* argument takes a module that will be used instead of the module "
"returned when you import :mod:`warnings` whose filter will be protected. "
"This argument exists primarily for testing the :mod:`warnings` module itself."
msgstr ""

#: ../../library/warnings.rst:614
msgid ""
"If the *action* argument is not ``None``, the remaining arguments are passed "
"to :func:`simplefilter` as if it were called immediately on entering the "
"context."
msgstr ""

#: ../../library/warnings.rst:618
msgid ""
"See :ref:`warning-filter` for the meaning of the *category* and *lineno* "
"parameters."
msgstr ""

#: ../../library/warnings.rst:630
msgid "Added the *action*, *category*, *lineno*, and *append* parameters."
msgstr ""

#: ../../library/warnings.rst:636
msgid "Concurrent safety of Context Managers"
msgstr ""

#: ../../library/warnings.rst:638
msgid ""
"The behavior of :class:`catch_warnings` context manager depends on the :data:"
"`sys.flags.context_aware_warnings` flag.  If the flag is true, the context "
"manager behaves in a concurrent-safe fashion and otherwise not. Concurrent-"
"safe means that it is both thread-safe and safe to use within :ref:`asyncio "
"coroutines <coroutine>` and tasks.  Being thread-safe means that behavior is "
"predictable in a multi-threaded program.  The flag defaults to true for free-"
"threaded builds and false otherwise."
msgstr ""

#: ../../library/warnings.rst:646
msgid ""
"If the :data:`~sys.flags.context_aware_warnings` flag is false, then :class:"
"`catch_warnings` will modify the global attributes of the :mod:`warnings` "
"module.  This is not safe if used within a concurrent program (using "
"multiple threads or using asyncio coroutines).  For example, if two or more "
"threads use the :class:`catch_warnings` class at the same time, the behavior "
"is undefined."
msgstr ""

#: ../../library/warnings.rst:653
msgid ""
"If the flag is true, :class:`catch_warnings` will not modify global "
"attributes and will instead use a :class:`~contextvars.ContextVar` to store "
"the newly established warning filtering state.  A context variable provides "
"thread-local storage and it makes the use of :class:`catch_warnings` thread-"
"safe."
msgstr ""

#: ../../library/warnings.rst:659
msgid ""
"The *record* parameter of the context handler also behaves differently "
"depending on the value of the flag.  When *record* is true and the flag is "
"false, the context manager works by replacing and then later restoring the "
"module's :func:`showwarning` function.  That is not concurrent-safe."
msgstr ""

#: ../../library/warnings.rst:664
msgid ""
"When *record* is true and the flag is true, the :func:`showwarning` function "
"is not replaced.  Instead, the recording status is indicated by an internal "
"property in the context variable.  In this case, the :func:`showwarning` "
"function will not be restored when exiting the context handler."
msgstr ""

#: ../../library/warnings.rst:669
msgid ""
"The :data:`~sys.flags.context_aware_warnings` flag can be set the :option:`-"
"X context_aware_warnings<-X>` command-line option or by the :envvar:"
"`PYTHON_CONTEXT_AWARE_WARNINGS` environment variable."
msgstr ""

#: ../../library/warnings.rst:675
msgid ""
"It is likely that most programs that desire thread-safe behaviour of the "
"warnings module will also want to set the :data:`~sys.flags."
"thread_inherit_context` flag to true.  That flag causes threads created by :"
"class:`threading.Thread` to start with a copy of the context variables from "
"the thread starting it.  When true, the context established by :class:"
"`catch_warnings` in one thread will also apply to new threads started by "
"it.  If false, new threads will start with an empty warnings context "
"variable, meaning that any filtering that was established by a :class:"
"`catch_warnings` context manager will no longer be active."
msgstr ""

#: ../../library/warnings.rst:688
msgid ""
"Added the :data:`sys.flags.context_aware_warnings` flag and the use of a "
"context variable for :class:`catch_warnings` if the flag is true.  Previous "
"versions of Python acted as if the flag was always set to false."
msgstr ""

#: ../../library/warnings.rst:9
msgid "warnings"
msgstr "warnings"
