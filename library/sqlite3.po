# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-08 15:57+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/sqlite3.rst:2
msgid ":mod:`sqlite3` --- DB-API 2.0 interface for SQLite databases"
msgstr ":mod:`sqlite3` --- Interface DB-API 2.0 para bancos de dados SQLite"

#: ../../library/sqlite3.rst:9
msgid "**Source code:** :source:`Lib/sqlite3/`"
msgstr "**Código-fonte:** :source:`Lib/sqlite3/`"

#: ../../library/sqlite3.rst:23
msgid ""
"SQLite is a C library that provides a lightweight disk-based database that "
"doesn't require a separate server process and allows accessing the database "
"using a nonstandard variant of the SQL query language. Some applications can "
"use SQLite for internal data storage.  It's also possible to prototype an "
"application using SQLite and then port the code to a larger database such as "
"PostgreSQL or Oracle."
msgstr ""
"SQLite é uma biblioteca C que fornece um banco de dados leve baseado em "
"disco que não requer um processo de servidor separado e permite acessar o "
"banco de dados usando uma variante não padrão da linguagem de consulta SQL. "
"Algumas aplicações podem usar SQLite para armazenamento interno de dados. "
"Também é possível prototipar um aplicativo usando SQLite e, em seguida, "
"portar o código para um banco de dados maior, como PostgreSQL ou Oracle."

#: ../../library/sqlite3.rst:30
msgid ""
"The :mod:`!sqlite3` module was written by Gerhard Häring.  It provides an "
"SQL interface compliant with the DB-API 2.0 specification described by :pep:"
"`249`, and requires SQLite 3.7.15 or newer."
msgstr ""
"O módulo :mod:`!sqlite3` foi escrito por Gerhard Häring. Ele fornece uma "
"interface SQL compatível com a especificação DB-API 2.0 descrita pela :pep:"
"`249` e requer SQLite 3.7.15 ou mais recente."

#: ../../library/sqlite3.rst:34
msgid "This document includes four main sections:"
msgstr "Esse documento inclui quatro seções principais:"

#: ../../library/sqlite3.rst:36
msgid ":ref:`sqlite3-tutorial` teaches how to use the :mod:`!sqlite3` module."
msgstr ":ref:`sqlite3-tutorial` ensina como usar o módulo :mod:`!sqlite3`."

#: ../../library/sqlite3.rst:37
msgid ""
":ref:`sqlite3-reference` describes the classes and functions this module "
"defines."
msgstr ""
":ref:`sqlite3-reference` descreve as classes e funções que este módulo "
"define."

#: ../../library/sqlite3.rst:39
msgid ":ref:`sqlite3-howtos` details how to handle specific tasks."
msgstr ":ref:`sqlite3-howtos` detalha como lidar com tarefas específicas."

#: ../../library/sqlite3.rst:40
msgid ""
":ref:`sqlite3-explanation` provides in-depth background on transaction "
"control."
msgstr ""
":ref:`sqlite3-explanation` fornece informações detalhadas sobre controle de "
"transações."

#: ../../library/sqlite3.rst:47
msgid "https://www.sqlite.org"
msgstr "https://www.sqlite.org"

#: ../../library/sqlite3.rst:46
msgid ""
"The SQLite web page; the documentation describes the syntax and the "
"available data types for the supported SQL dialect."
msgstr ""
"A página web do SQLite; a documentação descreve a sintaxe e os tipos de "
"dados disponíveis para o dialeto SQL suportado."

#: ../../library/sqlite3.rst:50
msgid "https://www.w3schools.com/sql/"
msgstr "https://www.w3schools.com/sql/"

#: ../../library/sqlite3.rst:50
msgid "Tutorial, reference and examples for learning SQL syntax."
msgstr "Tutoriais, referências e exemplos para aprender a sintaxe SQL."

#: ../../library/sqlite3.rst:52
msgid ":pep:`249` - Database API Specification 2.0"
msgstr ":pep:`249` - Especificação 2.0 da API de banco de dados"

#: ../../library/sqlite3.rst:53
msgid "PEP written by Marc-André Lemburg."
msgstr "PEP escrita por Marc-André Lemburg."

#: ../../library/sqlite3.rst:66
msgid "Tutorial"
msgstr "Tutorial"

#: ../../library/sqlite3.rst:68
msgid ""
"In this tutorial, you will create a database of Monty Python movies using "
"basic :mod:`!sqlite3` functionality. It assumes a fundamental understanding "
"of database concepts, including `cursors`_ and `transactions`_."
msgstr ""
"Neste tutorial, você criará um banco de dados de filmes do Monty Python "
"usando a funcionalidade básica :mod:`!sqlite3`. Ele pressupõe uma "
"compreensão fundamental dos conceitos de banco de dados, incluindo "
"`cursores`_ e `transações`_."

#: ../../library/sqlite3.rst:73
msgid ""
"First, we need to create a new database and open a database connection to "
"allow :mod:`!sqlite3` to work with it. Call :func:`sqlite3.connect` to "
"create a connection to the database :file:`tutorial.db` in the current "
"working directory, implicitly creating it if it does not exist:"
msgstr ""
"Primeiro, precisamos criar um novo banco de dados e abrir uma conexão com o "
"banco de dados para permitir que :mod:`!sqlite3` funcione com ele. Chame :"
"func:`sqlite3.connect` para criar uma conexão com o banco de dados :file:"
"`tutorial.db` no diretório de trabalho atual, criando-o implicitamente se "
"ele não existir:"

#: ../../library/sqlite3.rst:84
msgid ""
"The returned :class:`Connection` object ``con`` represents the connection to "
"the on-disk database."
msgstr ""
"O objeto :class:`Connection` ``con`` retornado representa a conexão com o "
"banco de dados em disco."

#: ../../library/sqlite3.rst:87
msgid ""
"In order to execute SQL statements and fetch results from SQL queries, we "
"will need to use a database cursor. Call :meth:`con.cursor() <Connection."
"cursor>` to create the :class:`Cursor`:"
msgstr ""
"Para executar instruções SQL e buscar resultados de consultas SQL, "
"precisaremos usar um cursor de banco de dados. Chame :meth:`con.cursor() "
"<Connection.cursor>` para criar o :class:`Cursor`:"

#: ../../library/sqlite3.rst:95
msgid ""
"Now that we've got a database connection and a cursor, we can create a "
"database table ``movie`` with columns for title, release year, and review "
"score. For simplicity, we can just use column names in the table declaration "
"-- thanks to the `flexible typing`_ feature of SQLite, specifying the data "
"types is optional. Execute the ``CREATE TABLE`` statement by calling :meth:"
"`cur.execute(...) <Cursor.execute>`:"
msgstr ""
"Agora que temos uma conexão com o banco de dados e um cursor, podemos criar "
"uma tabela de banco de dados ``movie`` com colunas para título, ano de "
"lançamento e pontuação da revisão. Para simplificar, podemos apenas usar "
"nomes de colunas na declaração da tabela - graças ao recurso `tipagem "
"flexível`_ do SQLite, especificar os tipos de dados é opcional. Execute a "
"instrução ``CREATE TABLE`` chamando :meth:`cur.execute(...) <Cursor."
"execute>`:"

#: ../../library/sqlite3.rst:111
msgid ""
"We can verify that the new table has been created by querying the "
"``sqlite_master`` table built-in to SQLite, which should now contain an "
"entry for the ``movie`` table definition (see `The Schema Table`_ for "
"details). Execute that query by calling :meth:`cur.execute(...) <Cursor."
"execute>`, assign the result to ``res``, and call :meth:`res.fetchone() "
"<Cursor.fetchone>` to fetch the resulting row:"
msgstr ""
"Podemos verificar se a nova tabela foi criada consultando a tabela embutida "
"``sqlite_master`` no SQLite, que agora deve conter uma entrada para a "
"definição da tabela ``movie`` (veja `The Schema Table`_ para detalhes). "
"Execute essa consulta chamando :meth:`cur.execute(...) <Cursor.execute>`, "
"atribua o resultado a ``res`` e chame :meth:`res.fetchone() <Cursor."
"fetchone>` para buscar a linha resultante:"

#: ../../library/sqlite3.rst:125
msgid ""
"We can see that the table has been created, as the query returns a :class:"
"`tuple` containing the table's name. If we query ``sqlite_master`` for a non-"
"existent table ``spam``, :meth:`!res.fetchone()` will return ``None``:"
msgstr ""
"Podemos ver que a tabela foi criada, pois a consulta retorna uma :class:"
"`tuple` contendo o nome da tabela. Se consultarmos ``sqlite_master`` por uma "
"tabela inexistente ``spam``, :meth:`!res.fetchone()` retornará ``None``:"

#: ../../library/sqlite3.rst:136
msgid ""
"Now, add two rows of data supplied as SQL literals by executing an "
"``INSERT`` statement, once again by calling :meth:`cur.execute(...) <Cursor."
"execute>`:"
msgstr ""
"Agora, adicione duas linhas de dados fornecidos como literais SQL executando "
"uma instrução ``INSERT``, mais uma vez chamando :meth:`cur.execute(...) "
"<Cursor.execute>`:"

#: ../../library/sqlite3.rst:148
msgid ""
"The ``INSERT`` statement implicitly opens a transaction, which needs to be "
"committed before changes are saved in the database (see :ref:`sqlite3-"
"controlling-transactions` for details). Call :meth:`con.commit() <Connection."
"commit>` on the connection object to commit the transaction:"
msgstr ""
"A instrução ``INSERT`` abre implicitamente uma transação, que precisa ser "
"confirmada antes que as alterações sejam salvas no banco de dados (veja :ref:"
"`sqlite3-controlling-transactions` para detalhes). Chame :meth:`con.commit() "
"<Connection.commit>` no objeto de conexão para confirmar a transação:"

#: ../../library/sqlite3.rst:158
msgid ""
"We can verify that the data was inserted correctly by executing a ``SELECT`` "
"query. Use the now-familiar :meth:`cur.execute(...) <Cursor.execute>` to "
"assign the result to ``res``, and call :meth:`res.fetchall() <Cursor."
"fetchall>` to return all resulting rows:"
msgstr ""
"Podemos verificar que os dados foram inseridos corretamente executando uma "
"consulta ``SELECT``. Use o já conhecido :meth:`cur.execute(...) <Cursor."
"execute>` para atribuir o resultado a ``res`` e chame :meth:`res.fetchall() "
"<Cursor.fetchall>` para retornar todas as linhas resultantes."

#: ../../library/sqlite3.rst:170
msgid ""
"The result is a :class:`list` of two :class:`!tuple`\\s, one per row, each "
"containing that row's ``score`` value."
msgstr ""
"O resultado é uma :class:`list` de duas :class:`!tuple`\\s, uma por linha, "
"cada uma contendo o valor ``score`` dessa linha."

#: ../../library/sqlite3.rst:173
msgid ""
"Now, insert three more rows by calling :meth:`cur.executemany(...) <Cursor."
"executemany>`:"
msgstr ""
"Agora, insira mais três linhas chamando :meth:`cur.executemany(...) <Cursor."
"executemany>`:"

#: ../../library/sqlite3.rst:186
msgid ""
"Notice that ``?`` placeholders are used to bind ``data`` to the query. "
"Always use placeholders instead of :ref:`string formatting <tut-formatting>` "
"to bind Python values to SQL statements, to avoid `SQL injection attacks`_ "
"(see :ref:`sqlite3-placeholders` for more details)."
msgstr ""
"Observe que espaços reservados ``?`` são usados para vincular ``data`` à "
"consulta. Sempre use espaços reservados em vez de :ref:`formatação de string "
"<tut-formatting>` para vincular valores Python a instruções SQL, para evitar "
"`ataques de injeção de SQL`_ (consulte :ref:`sqlite3-placeholders` para mais "
"detalhes)."

#: ../../library/sqlite3.rst:192
msgid ""
"We can verify that the new rows were inserted by executing a ``SELECT`` "
"query, this time iterating over the results of the query:"
msgstr ""
"Podemos verificar que as novas linhas foram inseridas executando uma "
"consulta ``SELECT``, desta vez iterando sobre os resultados da consulta."

#: ../../library/sqlite3.rst:206
msgid ""
"Each row is a two-item :class:`tuple` of ``(year, title)``, matching the "
"columns selected in the query."
msgstr ""
"Cada linha é uma :class:`tuple` de dois itens ``(year, title)``, "
"correspondendo às colunas selecionadas na consulta."

#: ../../library/sqlite3.rst:209
msgid ""
"Finally, verify that the database has been written to disk by calling :meth:"
"`con.close() <Connection.close>` to close the existing connection, opening a "
"new one, creating a new cursor, then querying the database:"
msgstr ""
"Finalmente, verifique se o banco de dados foi gravado no disco chamando :"
"meth:`con.close() <Connection.close>` para fechar a conexão existente, abrir "
"uma nova, criar um novo cursor e, em seguida, consultar o banco de dados."

#: ../../library/sqlite3.rst:224
msgid ""
"You've now created an SQLite database using the :mod:`!sqlite3` module, "
"inserted data and retrieved values from it in multiple ways."
msgstr ""
"Você agora criou um banco de dados SQLite usando o módulo :mod:`!sqlite3`, "
"inseriu dados e recuperou valores dele de várias maneiras."

#: ../../library/sqlite3.rst:236
msgid ":ref:`sqlite3-howtos` for further reading:"
msgstr ":ref:`sqlite3-howtos` para leitura adicional:"

#: ../../library/sqlite3.rst:238
msgid ":ref:`sqlite3-placeholders`"
msgstr ":ref:`sqlite3-placeholders`"

#: ../../library/sqlite3.rst:239
msgid ":ref:`sqlite3-adapters`"
msgstr ":ref:`sqlite3-adapters`"

#: ../../library/sqlite3.rst:240
msgid ":ref:`sqlite3-converters`"
msgstr ":ref:`sqlite3-converters`"

#: ../../library/sqlite3.rst:241 ../../library/sqlite3.rst:515
msgid ":ref:`sqlite3-connection-context-manager`"
msgstr ":ref:`sqlite3-connection-context-manager`"

#: ../../library/sqlite3.rst:242
msgid ":ref:`sqlite3-howto-row-factory`"
msgstr ":ref:`sqlite3-howto-row-factory`"

#: ../../library/sqlite3.rst:244
msgid ""
":ref:`sqlite3-explanation` for in-depth background on transaction control."
msgstr ""
":ref:`sqlite3-explanation` para obter informações detalhadas sobre o "
"controle de transações."

#: ../../library/sqlite3.rst:249
msgid "Reference"
msgstr "Referência"

#: ../../library/sqlite3.rst:257
msgid "Module functions"
msgstr "Funções do módulo"

#: ../../library/sqlite3.rst:264
msgid "Open a connection to an SQLite database."
msgstr "Abra uma conexão com um banco de dados SQLite."

#: ../../library/sqlite3.rst:0
msgid "Parameters"
msgstr "Parâmetros"

#: ../../library/sqlite3.rst:266
msgid ""
"The path to the database file to be opened. Pass ``\":memory:\"`` to open a "
"connection to a database that is in RAM instead of on disk."
msgstr ""

#: ../../library/sqlite3.rst:272
msgid ""
"How many seconds the connection should wait before raising an :exc:"
"`OperationalError` when a table is locked. If another connection opens a "
"transaction to modify a table, that table will be locked until the "
"transaction is committed. Default five seconds."
msgstr ""
"Quantos segundos a conexão deve aguardar antes de levantar uma exceção :exc:"
"`OperationalError` quando uma tabela estiver bloqueada. Se outra conexão "
"abrir uma transação para modificar uma tabela, essa tabela permanecerá "
"bloqueada até que a transação seja confirmada. O padrão é cinco segundos."

#: ../../library/sqlite3.rst:279
msgid ""
"Control whether and how data types not :ref:`natively supported by SQLite "
"<sqlite3-types>` are looked up to be converted to Python types, using the "
"converters registered with :func:`register_converter`. Set it to any "
"combination (using ``|``, bitwise or) of :const:`PARSE_DECLTYPES` and :const:"
"`PARSE_COLNAMES` to enable this. Column names takes precedence over declared "
"types if both flags are set. Types cannot be detected for generated fields "
"(for example ``max(data)``), even when the *detect_types* parameter is set; :"
"class:`str` will be returned instead. By default (``0``), type detection is "
"disabled."
msgstr ""

#: ../../library/sqlite3.rst:293
msgid ""
"The :attr:`~Connection.isolation_level` of the connection, controlling "
"whether and how transactions are implicitly opened. Can be ``\"DEFERRED\"`` "
"(default), ``\"EXCLUSIVE\"`` or ``\"IMMEDIATE\"``; or ``None`` to disable "
"opening transactions implicitly. See :ref:`sqlite3-controlling-transactions` "
"for more."
msgstr ""

#: ../../library/sqlite3.rst:301
msgid ""
"If ``True`` (default), :exc:`ProgrammingError` will be raised if the "
"database connection is used by a thread other than the one that created it. "
"If ``False``, the connection may be accessed in multiple threads; write "
"operations may need to be serialized by the user to avoid data corruption. "
"See :attr:`threadsafety` for more information."
msgstr ""

#: ../../library/sqlite3.rst:310
msgid ""
"A custom subclass of :class:`Connection` to create the connection with, if "
"not the default :class:`Connection` class."
msgstr ""

#: ../../library/sqlite3.rst:314
msgid ""
"The number of statements that :mod:`!sqlite3` should internally cache for "
"this connection, to avoid parsing overhead. By default, 100 statements."
msgstr ""

#: ../../library/sqlite3.rst:319
msgid ""
"If set to ``True``, *database* is interpreted as a :abbr:`URI (Uniform "
"Resource Identifier)` with a file path and an optional query string. The "
"scheme part *must* be ``\"file:\"``, and the path can be relative or "
"absolute. The query string allows passing parameters to SQLite, enabling "
"various :ref:`sqlite3-uri-tricks`."
msgstr ""

#: ../../library/sqlite3.rst:0
msgid "Return type"
msgstr ""

#: ../../library/sqlite3.rst:330
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sqlite3.connect`` with argument "
"``database``."
msgstr ""
"Levanta um :ref:`evento de auditoria <auditing>` ``sqlite3.connect`` com o "
"argumento ``database``."

#: ../../library/sqlite3.rst:331
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sqlite3.connect/handle`` with "
"argument ``connection_handle``."
msgstr ""
"Levanta um :ref:`evento de auditoria <auditing>` ``sqlite3.connect/handle`` "
"com o argumento ``connection_handle``."

#: ../../library/sqlite3.rst:333
msgid "The *uri* parameter."
msgstr ""

#: ../../library/sqlite3.rst:336
msgid ""
"*database* can now also be a :term:`path-like object`, not only a string."
msgstr ""

#: ../../library/sqlite3.rst:339
msgid "The ``sqlite3.connect/handle`` auditing event."
msgstr ""

#: ../../library/sqlite3.rst:344
msgid ""
"Return ``True`` if the string *statement* appears to contain one or more "
"complete SQL statements. No syntactic verification or parsing of any kind is "
"performed, other than checking that there are no unclosed string literals "
"and the statement is terminated by a semicolon."
msgstr ""

#: ../../library/sqlite3.rst:350
msgid "For example:"
msgstr "Por exemplo:"

#: ../../library/sqlite3.rst:359
msgid ""
"This function may be useful during command-line input to determine if the "
"entered text seems to form a complete SQL statement, or if additional input "
"is needed before calling :meth:`~Cursor.execute`."
msgstr ""

#: ../../library/sqlite3.rst:365
msgid ""
"Enable or disable callback tracebacks. By default you will not get any "
"tracebacks in user-defined functions, aggregates, converters, authorizer "
"callbacks etc. If you want to debug them, you can call this function with "
"*flag* set to ``True``. Afterwards, you will get tracebacks from callbacks "
"on ``sys.stderr``. Use ``False`` to disable the feature again."
msgstr ""

#: ../../library/sqlite3.rst:374
msgid ""
"Register an *adapter* callable to adapt the Python type *type* into an "
"SQLite type. The adapter is called with a Python object of type *type* as "
"its sole argument, and must return a value of a :ref:`type that SQLite "
"natively understands <sqlite3-types>`."
msgstr ""

#: ../../library/sqlite3.rst:382
msgid ""
"Register the *converter* callable to convert SQLite objects of type "
"*typename* into a Python object of a specific type. The converter is invoked "
"for all SQLite values of type *typename*; it is passed a :class:`bytes` "
"object and should return an object of the desired Python type. Consult the "
"parameter *detect_types* of :func:`connect` for information regarding how "
"type detection works."
msgstr ""

#: ../../library/sqlite3.rst:390
msgid ""
"Note: *typename* and the name of the type in your query are matched case-"
"insensitively."
msgstr ""

#: ../../library/sqlite3.rst:397
msgid "Module constants"
msgstr "Constantes do módulo"

#: ../../library/sqlite3.rst:401
msgid ""
"Pass this flag value to the *detect_types* parameter of :func:`connect` to "
"look up a converter function by using the type name, parsed from the query "
"column name, as the converter dictionary key. The type name must be wrapped "
"in square brackets (``[]``)."
msgstr ""

#: ../../library/sqlite3.rst:411
msgid ""
"This flag may be combined with :const:`PARSE_DECLTYPES` using the ``|`` "
"(bitwise or) operator."
msgstr ""

#: ../../library/sqlite3.rst:416
msgid ""
"Pass this flag value to the *detect_types* parameter of :func:`connect` to "
"look up a converter function using the declared types for each column. The "
"types are declared when the database table is created. :mod:`!sqlite3` will "
"look up a converter function using the first word of the declared type as "
"the converter dictionary key. For example:"
msgstr ""

#: ../../library/sqlite3.rst:432
msgid ""
"This flag may be combined with :const:`PARSE_COLNAMES` using the ``|`` "
"(bitwise or) operator."
msgstr ""

#: ../../library/sqlite3.rst:439
msgid ""
"Flags that should be returned by the *authorizer_callback* callable passed "
"to :meth:`Connection.set_authorizer`, to indicate whether:"
msgstr ""

#: ../../library/sqlite3.rst:442
msgid "Access is allowed (:const:`!SQLITE_OK`),"
msgstr ""

#: ../../library/sqlite3.rst:443
msgid ""
"The SQL statement should be aborted with an error (:const:`!SQLITE_DENY`)"
msgstr ""

#: ../../library/sqlite3.rst:444
msgid ""
"The column should be treated as a ``NULL`` value (:const:`!SQLITE_IGNORE`)"
msgstr ""

#: ../../library/sqlite3.rst:448
msgid ""
"String constant stating the supported DB-API level. Required by the DB-API. "
"Hard-coded to ``\"2.0\"``."
msgstr ""

#: ../../library/sqlite3.rst:453
msgid ""
"String constant stating the type of parameter marker formatting expected by "
"the :mod:`!sqlite3` module. Required by the DB-API. Hard-coded to "
"``\"qmark\"``."
msgstr ""

#: ../../library/sqlite3.rst:459
msgid "The ``named`` DB-API parameter style is also supported."
msgstr ""

#: ../../library/sqlite3.rst:463
msgid ""
"Version number of the runtime SQLite library as a :class:`string <str>`."
msgstr ""

#: ../../library/sqlite3.rst:467
msgid ""
"Version number of the runtime SQLite library as a :class:`tuple` of :class:"
"`integers <int>`."
msgstr ""

#: ../../library/sqlite3.rst:472
msgid ""
"Integer constant required by the DB-API, stating the level of thread safety "
"the :mod:`!sqlite3` module supports. Currently hard-coded to ``1``, meaning "
"*\"Threads may share the module, but not connections.\"* However, this may "
"not always be true. You can check the underlying SQLite library's compile-"
"time threaded mode using the following query::"
msgstr ""

#: ../../library/sqlite3.rst:485
msgid ""
"Note that the `SQLITE_THREADSAFE levels <https://sqlite.org/compile."
"html#threadsafe>`_ do not match the DB-API 2.0 ``threadsafety`` levels."
msgstr ""

#: ../../library/sqlite3.rst:491
msgid ""
"Version number of this module as a :class:`string <str>`. This is not the "
"version of the SQLite library."
msgstr ""

#: ../../library/sqlite3.rst:496
msgid ""
"Version number of this module as a :class:`tuple` of :class:`integers "
"<int>`. This is not the version of the SQLite library."
msgstr ""

#: ../../library/sqlite3.rst:503
msgid "Connection objects"
msgstr ""

#: ../../library/sqlite3.rst:507
msgid ""
"Each open SQLite database is represented by a ``Connection`` object, which "
"is created using :func:`sqlite3.connect`. Their main purpose is creating :"
"class:`Cursor` objects, and :ref:`sqlite3-controlling-transactions`."
msgstr ""

#: ../../library/sqlite3.rst:514
msgid ":ref:`sqlite3-connection-shortcuts`"
msgstr ""

#: ../../library/sqlite3.rst:517
msgid "An SQLite database connection has the following attributes and methods:"
msgstr ""

#: ../../library/sqlite3.rst:521
msgid ""
"Create and return a :class:`Cursor` object. The cursor method accepts a "
"single optional parameter *factory*. If supplied, this must be a callable "
"returning an instance of :class:`Cursor` or its subclasses."
msgstr ""

#: ../../library/sqlite3.rst:528
msgid ""
"Commit any pending transaction to the database. If there is no open "
"transaction, this method is a no-op."
msgstr ""

#: ../../library/sqlite3.rst:533
msgid ""
"Roll back to the start of any pending transaction. If there is no open "
"transaction, this method is a no-op."
msgstr ""

#: ../../library/sqlite3.rst:538
msgid ""
"Close the database connection. Any pending transaction is not committed "
"implicitly; make sure to :meth:`commit` before closing to avoid losing "
"pending changes."
msgstr ""

#: ../../library/sqlite3.rst:545
msgid ""
"Create a new :class:`Cursor` object and call :meth:`~Cursor.execute` on it "
"with the given *sql* and *parameters*. Return the new cursor object."
msgstr ""

#: ../../library/sqlite3.rst:551
msgid ""
"Create a new :class:`Cursor` object and call :meth:`~Cursor.executemany` on "
"it with the given *sql* and *parameters*. Return the new cursor object."
msgstr ""

#: ../../library/sqlite3.rst:557
msgid ""
"Create a new :class:`Cursor` object and call :meth:`~Cursor.executescript` "
"on it with the given *sql_script*. Return the new cursor object."
msgstr ""

#: ../../library/sqlite3.rst:563
msgid "Create or remove a user-defined SQL function."
msgstr ""

#: ../../library/sqlite3.rst:565
msgid "The name of the SQL function."
msgstr "O nome da função SQL."

#: ../../library/sqlite3.rst:568
msgid ""
"The number of arguments the SQL function can accept. If ``-1``, it may take "
"any number of arguments."
msgstr ""

#: ../../library/sqlite3.rst:572
msgid ""
"A callable that is called when the SQL function is invoked. The callable "
"must return :ref:`a type natively supported by SQLite <sqlite3-types>`. Set "
"to ``None`` to remove an existing SQL function."
msgstr ""

#: ../../library/sqlite3.rst:579
msgid ""
"If ``True``, the created SQL function is marked as `deterministic <https://"
"sqlite.org/deterministic.html>`_, which allows SQLite to perform additional "
"optimizations."
msgstr ""

#: ../../library/sqlite3.rst:0
msgid "Raises"
msgstr ""

#: ../../library/sqlite3.rst:584
msgid "If *deterministic* is used with SQLite versions older than 3.8.3."
msgstr ""

#: ../../library/sqlite3.rst:587
msgid "The *deterministic* parameter."
msgstr ""

#: ../../library/sqlite3.rst:590 ../../library/sqlite3.rst:628
#: ../../library/sqlite3.rst:847 ../../library/sqlite3.rst:966
#: ../../library/sqlite3.rst:1094 ../../library/sqlite3.rst:1115
msgid "Example:"
msgstr "Exemplo:"

#: ../../library/sqlite3.rst:606
msgid "Create or remove a user-defined SQL aggregate function."
msgstr ""

#: ../../library/sqlite3.rst:608
msgid "The name of the SQL aggregate function."
msgstr ""

#: ../../library/sqlite3.rst:611
msgid ""
"The number of arguments the SQL aggregate function can accept. If ``-1``, it "
"may take any number of arguments."
msgstr ""

#: ../../library/sqlite3.rst:615
msgid ""
"A class must implement the following methods:  * ``step()``: Add a row to "
"the aggregate. * ``finalize()``: Return the final result of the aggregate "
"as   :ref:`a type natively supported by SQLite <sqlite3-types>`.  The number "
"of arguments that the ``step()`` method must accept is controlled by "
"*n_arg*.  Set to ``None`` to remove an existing SQL aggregate function."
msgstr ""

#: ../../library/sqlite3.rst:616
msgid "A class must implement the following methods:"
msgstr "Uma classe deve implementar os seguintes métodos:"

#: ../../library/sqlite3.rst:618
msgid "``step()``: Add a row to the aggregate."
msgstr ""

#: ../../library/sqlite3.rst:619
msgid ""
"``finalize()``: Return the final result of the aggregate as :ref:`a type "
"natively supported by SQLite <sqlite3-types>`."
msgstr ""

#: ../../library/sqlite3.rst:622
msgid ""
"The number of arguments that the ``step()`` method must accept is controlled "
"by *n_arg*."
msgstr ""

#: ../../library/sqlite3.rst:625
msgid "Set to ``None`` to remove an existing SQL aggregate function."
msgstr ""

#: ../../library/sqlite3.rst:660
msgid ""
"Create a collation named *name* using the collating function *callable*. "
"*callable* is passed two :class:`string <str>` arguments, and it should "
"return an :class:`integer <int>`:"
msgstr ""

#: ../../library/sqlite3.rst:664
msgid "``1`` if the first is ordered higher than the second"
msgstr ""

#: ../../library/sqlite3.rst:665
msgid "``-1`` if the first is ordered lower than the second"
msgstr ""

#: ../../library/sqlite3.rst:666
msgid "``0`` if they are ordered equal"
msgstr ""

#: ../../library/sqlite3.rst:668
msgid "The following example shows a reverse sorting collation:"
msgstr ""

#: ../../library/sqlite3.rst:696
msgid "Remove a collation function by setting *callable* to ``None``."
msgstr ""

#: ../../library/sqlite3.rst:701
msgid ""
"Call this method from a different thread to abort any queries that might be "
"executing on the connection. Aborted queries will raise an :exc:"
"`OperationalError`."
msgstr ""

#: ../../library/sqlite3.rst:708
msgid ""
"Register callable *authorizer_callback* to be invoked for each attempt to "
"access a column of a table in the database. The callback should return one "
"of :const:`SQLITE_OK`, :const:`SQLITE_DENY`, or :const:`SQLITE_IGNORE` to "
"signal how access to the column should be handled by the underlying SQLite "
"library."
msgstr ""

#: ../../library/sqlite3.rst:714
msgid ""
"The first argument to the callback signifies what kind of operation is to be "
"authorized. The second and third argument will be arguments or ``None`` "
"depending on the first argument. The 4th argument is the name of the "
"database (\"main\", \"temp\", etc.) if applicable. The 5th argument is the "
"name of the inner-most trigger or view that is responsible for the access "
"attempt or ``None`` if this access attempt is directly from input SQL code."
msgstr ""

#: ../../library/sqlite3.rst:721
msgid ""
"Please consult the SQLite documentation about the possible values for the "
"first argument and the meaning of the second and third argument depending on "
"the first one. All necessary constants are available in the :mod:`!sqlite3` "
"module."
msgstr ""

#: ../../library/sqlite3.rst:728
msgid ""
"Register callable *progress_handler* to be invoked for every *n* "
"instructions of the SQLite virtual machine. This is useful if you want to "
"get called from SQLite during long-running operations, for example to update "
"a GUI."
msgstr ""

#: ../../library/sqlite3.rst:733
msgid ""
"If you want to clear any previously installed progress handler, call the "
"method with ``None`` for *progress_handler*."
msgstr ""

#: ../../library/sqlite3.rst:736
msgid ""
"Returning a non-zero value from the handler function will terminate the "
"currently executing query and cause it to raise an :exc:`OperationalError` "
"exception."
msgstr ""

#: ../../library/sqlite3.rst:743
msgid ""
"Register callable *trace_callback* to be invoked for each SQL statement that "
"is actually executed by the SQLite backend."
msgstr ""

#: ../../library/sqlite3.rst:746
msgid ""
"The only argument passed to the callback is the statement (as :class:`str`) "
"that is being executed. The return value of the callback is ignored. Note "
"that the backend does not only run statements passed to the :meth:`Cursor."
"execute` methods.  Other sources include the :ref:`transaction management "
"<sqlite3-controlling-transactions>` of the :mod:`!sqlite3` module and the "
"execution of triggers defined in the current database."
msgstr ""

#: ../../library/sqlite3.rst:754
msgid "Passing ``None`` as *trace_callback* will disable the trace callback."
msgstr ""

#: ../../library/sqlite3.rst:757
msgid ""
"Exceptions raised in the trace callback are not propagated. As a development "
"and debugging aid, use :meth:`~sqlite3.enable_callback_tracebacks` to enable "
"printing tracebacks from exceptions raised in the trace callback."
msgstr ""

#: ../../library/sqlite3.rst:767
msgid ""
"Enable the SQLite engine to load SQLite extensions from shared libraries if "
"*enabled* is ``True``; else, disallow loading SQLite extensions. SQLite "
"extensions can define new functions, aggregates or whole new virtual table "
"implementations.  One well-known extension is the fulltext-search extension "
"distributed with SQLite."
msgstr ""

#: ../../library/sqlite3.rst:776
msgid ""
"The :mod:`!sqlite3` module is not built with loadable extension support by "
"default, because some platforms (notably macOS) have SQLite libraries which "
"are compiled without this feature. To get loadable extension support, you "
"must pass the :option:`--enable-loadable-sqlite-extensions` option to :"
"program:`configure`."
msgstr ""

#: ../../library/sqlite3.rst:783
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sqlite3.enable_load_extension`` "
"with arguments ``connection``, ``enabled``."
msgstr ""
"Levanta um :ref:`evento de auditoria <auditing>` ``sqlite3."
"enable_load_extension`` com os argumentos ``connection``, ``enabled``."

#: ../../library/sqlite3.rst:787
msgid "Added the ``sqlite3.enable_load_extension`` auditing event."
msgstr ""

#: ../../library/sqlite3.rst:830
msgid ""
"Load an SQLite extension from a shared library located at *path*. Enable "
"extension loading with :meth:`enable_load_extension` before calling this "
"method."
msgstr ""

#: ../../library/sqlite3.rst:834
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sqlite3.load_extension`` with "
"arguments ``connection``, ``path``."
msgstr ""
"Levanta um :ref:`evento de auditoria <auditing>` ``sqlite3.load_extension`` "
"com os argumentos ``connection``, ``path``."

#: ../../library/sqlite3.rst:838
msgid "Added the ``sqlite3.load_extension`` auditing event."
msgstr ""

#: ../../library/sqlite3.rst:843
msgid ""
"Return an :term:`iterator` to dump the database as SQL source code. Useful "
"when saving an in-memory database for later restoration. Similar to the ``."
"dump`` command in the :program:`sqlite3` shell."
msgstr ""

#: ../../library/sqlite3.rst:861
msgid "Create a backup of an SQLite database."
msgstr ""

#: ../../library/sqlite3.rst:863
msgid ""
"Works even if the database is being accessed by other clients or "
"concurrently by the same connection."
msgstr ""

#: ../../library/sqlite3.rst:866
msgid "The database connection to save the backup to."
msgstr ""

#: ../../library/sqlite3.rst:869
msgid ""
"The number of pages to copy at a time. If equal to or less than ``0``, the "
"entire database is copied in a single step. Defaults to ``-1``."
msgstr ""

#: ../../library/sqlite3.rst:875
msgid ""
"If set to a callable, it is invoked with three integer arguments for every "
"backup iteration: the *status* of the last iteration, the *remaining* number "
"of pages still to be copied, and the *total* number of pages. Defaults to "
"``None``."
msgstr ""

#: ../../library/sqlite3.rst:884
msgid ""
"The name of the database to back up. Either ``\"main\"`` (the default) for "
"the main database, ``\"temp\"`` for the temporary database, or the name of a "
"custom database as attached using the ``ATTACH DATABASE`` SQL statement."
msgstr ""

#: ../../library/sqlite3.rst:891
msgid ""
"The number of seconds to sleep between successive attempts to back up "
"remaining pages."
msgstr ""

#: ../../library/sqlite3.rst:895
msgid "Example 1, copy an existing database into another:"
msgstr ""

#: ../../library/sqlite3.rst:914
msgid "Example 2, copy an existing database into a transient copy:"
msgstr ""

#: ../../library/sqlite3.rst:926
msgid ""
"This read-only attribute corresponds to the low-level SQLite `autocommit "
"mode`_."
msgstr ""

#: ../../library/sqlite3.rst:929
msgid ""
"``True`` if a transaction is active (there are uncommitted changes), "
"``False`` otherwise."
msgstr ""

#: ../../library/sqlite3.rst:936
msgid ""
"This attribute controls the :ref:`transaction handling <sqlite3-controlling-"
"transactions>` performed by :mod:`!sqlite3`. If set to ``None``, "
"transactions are never implicitly opened. If set to one of ``\"DEFERRED\"``, "
"``\"IMMEDIATE\"``, or ``\"EXCLUSIVE\"``, corresponding to the underlying "
"`SQLite transaction behaviour`_, implicit :ref:`transaction management "
"<sqlite3-controlling-transactions>` is performed."
msgstr ""

#: ../../library/sqlite3.rst:944
msgid ""
"If not overridden by the *isolation_level* parameter of :func:`connect`, the "
"default is ``\"\"``, which is an alias for ``\"DEFERRED\"``."
msgstr ""

#: ../../library/sqlite3.rst:949
msgid ""
"The initial :attr:`~Cursor.row_factory` for :class:`Cursor` objects created "
"from this connection. Assigning to this attribute does not affect the :attr:"
"`!row_factory` of existing cursors belonging to this connection, only new "
"ones. Is ``None`` by default, meaning each row is returned as a :class:"
"`tuple`."
msgstr ""

#: ../../library/sqlite3.rst:956 ../../library/sqlite3.rst:1239
#: ../../library/sqlite3.rst:1262
msgid "See :ref:`sqlite3-howto-row-factory` for more details."
msgstr "Consulte :ref:`sqlite3-howto-row-factory` para mais detalhes."

#: ../../library/sqlite3.rst:960
msgid ""
"A callable that accepts a :class:`bytes` parameter and returns a text "
"representation of it. The callable is invoked for SQLite values with the "
"``TEXT`` data type. By default, this attribute is set to :class:`str`. If "
"you want to return ``bytes`` instead, set *text_factory* to ``bytes``."
msgstr ""

#: ../../library/sqlite3.rst:1000
msgid ""
"Return the total number of database rows that have been modified, inserted, "
"or deleted since the database connection was opened."
msgstr ""

#: ../../library/sqlite3.rst:1006
msgid "Cursor objects"
msgstr ""

#: ../../library/sqlite3.rst:1008
msgid ""
"A ``Cursor`` object represents a `database cursor`_ which is used to execute "
"SQL statements, and manage the context of a fetch operation. Cursors are "
"created using :meth:`Connection.cursor`, or by using any of the :ref:"
"`connection shortcut methods <sqlite3-connection-shortcuts>`."
msgstr ""

#: ../../library/sqlite3.rst:1015
msgid ""
"Cursor objects are :term:`iterators <iterator>`, meaning that if you :meth:"
"`~Cursor.execute` a ``SELECT`` query, you can simply iterate over the cursor "
"to fetch the resulting rows:"
msgstr ""

#: ../../library/sqlite3.rst:1040
msgid "A :class:`Cursor` instance has the following attributes and methods."
msgstr ""

#: ../../library/sqlite3.rst:1047
msgid ""
"Execute SQL a single SQL statement, optionally binding Python values using :"
"ref:`placeholders <sqlite3-placeholders>`."
msgstr ""

#: ../../library/sqlite3.rst:1051
msgid "A single SQL statement."
msgstr ""

#: ../../library/sqlite3.rst:1054
msgid ""
"Python values to bind to placeholders in *sql*. A :class:`!dict` if named "
"placeholders are used. A :term:`!sequence` if unnamed placeholders are used. "
"See :ref:`sqlite3-placeholders`."
msgstr ""

#: ../../library/sqlite3.rst:1061 ../../library/sqlite3.rst:1091
msgid "If *sql* contains more than one SQL statement."
msgstr ""

#: ../../library/sqlite3.rst:1064
msgid ""
"If :attr:`~Connection.isolation_level` is not ``None``, *sql* is an "
"``INSERT``, ``UPDATE``, ``DELETE``, or ``REPLACE`` statement, and there is "
"no open transaction, a transaction is implicitly opened before executing "
"*sql*."
msgstr ""

#: ../../library/sqlite3.rst:1069
msgid "Use :meth:`executescript` to execute multiple SQL statements."
msgstr ""

#: ../../library/sqlite3.rst:1073
msgid ""
"For every item in *parameters*, repeatedly execute the :ref:`parameterized "
"<sqlite3-placeholders>` SQL statement *sql*."
msgstr ""

#: ../../library/sqlite3.rst:1077
msgid "Uses the same implicit transaction handling as :meth:`~Cursor.execute`."
msgstr ""

#: ../../library/sqlite3.rst:1079
msgid "A single SQL :abbr:`DML (Data Manipulation Language)` statement."
msgstr ""

#: ../../library/sqlite3.rst:1082
msgid ""
"An :term:`!iterable` of parameters to bind with the placeholders in *sql*. "
"See :ref:`sqlite3-placeholders`."
msgstr ""

#: ../../library/sqlite3.rst:1088
msgid "If *sql* is not a DML statment."
msgstr ""

#: ../../library/sqlite3.rst:1107
msgid ""
"Execute the SQL statements in *sql_script*. If there is a pending "
"transaction, an implicit ``COMMIT`` statement is executed first. No other "
"implicit transaction control is performed; any transaction control must be "
"added to *sql_script*."
msgstr ""

#: ../../library/sqlite3.rst:1113
msgid "*sql_script* must be a :class:`string <str>`."
msgstr ""

#: ../../library/sqlite3.rst:1131
msgid ""
"If :attr:`~Cursor.row_factory` is ``None``, return the next row query result "
"set as a :class:`tuple`. Else, pass it to the row factory and return its "
"result. Return ``None`` if no more data is available."
msgstr ""

#: ../../library/sqlite3.rst:1139
msgid ""
"Return the next set of rows of a query result as a :class:`list`. Return an "
"empty list if no more rows are available."
msgstr ""

#: ../../library/sqlite3.rst:1142
msgid ""
"The number of rows to fetch per call is specified by the *size* parameter. "
"If *size* is not given, :attr:`arraysize` determines the number of rows to "
"be fetched. If fewer than *size* rows are available, as many rows as are "
"available are returned."
msgstr ""

#: ../../library/sqlite3.rst:1148
msgid ""
"Note there are performance considerations involved with the *size* "
"parameter. For optimal performance, it is usually best to use the arraysize "
"attribute. If the *size* parameter is used, then it is best for it to retain "
"the same value from one :meth:`fetchmany` call to the next."
msgstr ""

#: ../../library/sqlite3.rst:1155
msgid ""
"Return all (remaining) rows of a query result as a :class:`list`. Return an "
"empty list if no rows are available. Note that the :attr:`arraysize` "
"attribute can affect the performance of this operation."
msgstr ""

#: ../../library/sqlite3.rst:1162
msgid "Close the cursor now (rather than whenever ``__del__`` is called)."
msgstr ""

#: ../../library/sqlite3.rst:1164
msgid ""
"The cursor will be unusable from this point forward; a :exc:"
"`ProgrammingError` exception will be raised if any operation is attempted "
"with the cursor."
msgstr ""

#: ../../library/sqlite3.rst:1169 ../../library/sqlite3.rst:1173
msgid "Required by the DB-API. Does nothing in :mod:`!sqlite3`."
msgstr ""

#: ../../library/sqlite3.rst:1177
msgid ""
"Read/write attribute that controls the number of rows returned by :meth:"
"`fetchmany`. The default value is 1 which means a single row would be "
"fetched per call."
msgstr ""

#: ../../library/sqlite3.rst:1182
msgid ""
"Read-only attribute that provides the SQLite database :class:`Connection` "
"belonging to the cursor.  A :class:`Cursor` object created by calling :meth:"
"`con.cursor() <Connection.cursor>` will have a :attr:`connection` attribute "
"that refers to *con*:"
msgstr ""

#: ../../library/sqlite3.rst:1196
msgid ""
"Read-only attribute that provides the column names of the last query. To "
"remain compatible with the Python DB API, it returns a 7-tuple for each "
"column where the last six items of each tuple are ``None``."
msgstr ""

#: ../../library/sqlite3.rst:1200
msgid "It is set for ``SELECT`` statements without any matching rows as well."
msgstr ""

#: ../../library/sqlite3.rst:1204
msgid ""
"Read-only attribute that provides the row id of the last inserted row. It is "
"only updated after successful ``INSERT`` or ``REPLACE`` statements using "
"the :meth:`execute` method.  For other statements, after :meth:`executemany` "
"or :meth:`executescript`, or if the insertion failed, the value of "
"``lastrowid`` is left unchanged.  The initial value of ``lastrowid`` is "
"``None``."
msgstr ""

#: ../../library/sqlite3.rst:1212
msgid "Inserts into ``WITHOUT ROWID`` tables are not recorded."
msgstr ""

#: ../../library/sqlite3.rst:1214
msgid "Added support for the ``REPLACE`` statement."
msgstr ""

#: ../../library/sqlite3.rst:1219
msgid ""
"Read-only attribute that provides the number of modified rows for "
"``INSERT``, ``UPDATE``, ``DELETE``, and ``REPLACE`` statements; is ``-1`` "
"for other statements, including :abbr:`CTE (Common Table Expression)` "
"queries. It is only updated by the :meth:`execute` and :meth:`executemany` "
"methods."
msgstr ""

#: ../../library/sqlite3.rst:1227
msgid ""
"Control how a row fetched from this :class:`!Cursor` is represented. If "
"``None``, a row is represented as a :class:`tuple`. Can be set to the "
"included :class:`sqlite3.Row`; or a :term:`callable` that accepts two "
"arguments, a :class:`Cursor` object and the :class:`!tuple` of row values, "
"and returns a custom object representing an SQLite row."
msgstr ""

#: ../../library/sqlite3.rst:1234
msgid ""
"Defaults to what :attr:`Connection.row_factory` was set to when the :class:`!"
"Cursor` was created. Assigning to this attribute does not affect :attr:"
"`Connection.row_factory` of the parent connection."
msgstr ""

#: ../../library/sqlite3.rst:1250
msgid "Row objects"
msgstr ""

#: ../../library/sqlite3.rst:1254
msgid ""
"A :class:`!Row` instance serves as a highly optimized :attr:`~Connection."
"row_factory` for :class:`Connection` objects. It supports iteration, "
"equality testing, :func:`len`, and :term:`mapping` access by column name and "
"index."
msgstr ""

#: ../../library/sqlite3.rst:1259
msgid ""
"Two :class:`!Row` objects compare equal if they have identical column names "
"and values."
msgstr ""

#: ../../library/sqlite3.rst:1266
msgid ""
"Return a :class:`list` of column names as :class:`strings <str>`. "
"Immediately after a query, it is the first member of each tuple in :attr:"
"`Cursor.description`."
msgstr ""

#: ../../library/sqlite3.rst:1270
msgid "Added support of slicing."
msgstr ""

#: ../../library/sqlite3.rst:1275
msgid "PrepareProtocol objects"
msgstr ""

#: ../../library/sqlite3.rst:1279
msgid ""
"The PrepareProtocol type's single purpose is to act as a :pep:`246` style "
"adaption protocol for objects that can :ref:`adapt themselves <sqlite3-"
"conform>` to :ref:`native SQLite types <sqlite3-types>`."
msgstr ""

#: ../../library/sqlite3.rst:1287
msgid "Exceptions"
msgstr "Exceções"

#: ../../library/sqlite3.rst:1289
msgid "The exception hierarchy is defined by the DB-API 2.0 (:pep:`249`)."
msgstr ""

#: ../../library/sqlite3.rst:1293
msgid ""
"This exception is raised by :mod:`!sqlite3` if an SQL query is not a :class:"
"`string <str>`, or if multiple statements are passed to :meth:`~Cursor."
"execute` or :meth:`~Cursor.executemany`. ``Warning`` is a subclass of :exc:"
"`Exception`."
msgstr ""

#: ../../library/sqlite3.rst:1300
msgid ""
"The base class of the other exceptions in this module. Use this to catch all "
"errors with one single :keyword:`except` statement. ``Error`` is a subclass "
"of :exc:`Exception`."
msgstr ""

#: ../../library/sqlite3.rst:1306
msgid ""
"This exception is raised by :mod:`!sqlite3` for fetch across rollback, or "
"if :mod:`!sqlite3` is unable to bind parameters. ``InterfaceError`` is a "
"subclass of :exc:`Error`."
msgstr ""

#: ../../library/sqlite3.rst:1312
msgid ""
"Exception raised for errors that are related to the database. This serves as "
"the base exception for several types of database errors. It is only raised "
"implicitly through the specialised subclasses. ``DatabaseError`` is a "
"subclass of :exc:`Error`."
msgstr ""

#: ../../library/sqlite3.rst:1319
msgid ""
"Exception raised for errors caused by problems with the processed data, like "
"numeric values out of range, and strings which are too long. ``DataError`` "
"is a subclass of :exc:`DatabaseError`."
msgstr ""

#: ../../library/sqlite3.rst:1325
msgid ""
"Exception raised for errors that are related to the database's operation, "
"and not necessarily under the control of the programmer. For example, the "
"database path is not found, or a transaction could not be processed. "
"``OperationalError`` is a subclass of :exc:`DatabaseError`."
msgstr ""

#: ../../library/sqlite3.rst:1333
msgid ""
"Exception raised when the relational integrity of the database is affected, "
"e.g. a foreign key check fails.  It is a subclass of :exc:`DatabaseError`."
msgstr ""

#: ../../library/sqlite3.rst:1338
msgid ""
"Exception raised when SQLite encounters an internal error. If this is "
"raised, it may indicate that there is a problem with the runtime SQLite "
"library. ``InternalError`` is a subclass of :exc:`DatabaseError`."
msgstr ""

#: ../../library/sqlite3.rst:1345
msgid ""
"Exception raised for :mod:`!sqlite3` API programming errors, for example "
"trying to operate on a closed :class:`Connection`, or trying to execute non-"
"DML statements with :meth:`~Cursor.executemany`. ``ProgrammingError`` is a "
"subclass of :exc:`DatabaseError`."
msgstr ""

#: ../../library/sqlite3.rst:1352
msgid ""
"Exception raised in case a method or database API is not supported by the "
"underlying SQLite library. For example, setting *deterministic* to ``True`` "
"in :meth:`~Connection.create_function`, if the underlying SQLite library "
"does not support deterministic functions. ``NotSupportedError`` is a "
"subclass of :exc:`DatabaseError`."
msgstr ""

#: ../../library/sqlite3.rst:1362
msgid "SQLite and Python types"
msgstr ""

#: ../../library/sqlite3.rst:1364
msgid ""
"SQLite natively supports the following types: ``NULL``, ``INTEGER``, "
"``REAL``, ``TEXT``, ``BLOB``."
msgstr ""

#: ../../library/sqlite3.rst:1367
msgid ""
"The following Python types can thus be sent to SQLite without any problem:"
msgstr ""

#: ../../library/sqlite3.rst:1370 ../../library/sqlite3.rst:1387
msgid "Python type"
msgstr "Tipo em Python"

#: ../../library/sqlite3.rst:1370 ../../library/sqlite3.rst:1387
msgid "SQLite type"
msgstr "Tipo em SQLite"

#: ../../library/sqlite3.rst:1372 ../../library/sqlite3.rst:1389
msgid "``None``"
msgstr "``None``"

#: ../../library/sqlite3.rst:1372 ../../library/sqlite3.rst:1389
msgid "``NULL``"
msgstr "``NULL``"

#: ../../library/sqlite3.rst:1374 ../../library/sqlite3.rst:1391
msgid ":class:`int`"
msgstr ":class:`int`"

#: ../../library/sqlite3.rst:1374 ../../library/sqlite3.rst:1391
msgid "``INTEGER``"
msgstr "``INTEGER``"

#: ../../library/sqlite3.rst:1376 ../../library/sqlite3.rst:1393
msgid ":class:`float`"
msgstr ":class:`float`"

#: ../../library/sqlite3.rst:1376 ../../library/sqlite3.rst:1393
msgid "``REAL``"
msgstr "``REAL``"

#: ../../library/sqlite3.rst:1378
msgid ":class:`str`"
msgstr ":class:`str`"

#: ../../library/sqlite3.rst:1378 ../../library/sqlite3.rst:1395
msgid "``TEXT``"
msgstr "``TEXT``"

#: ../../library/sqlite3.rst:1380 ../../library/sqlite3.rst:1398
msgid ":class:`bytes`"
msgstr ":class:`bytes`"

#: ../../library/sqlite3.rst:1380 ../../library/sqlite3.rst:1398
msgid "``BLOB``"
msgstr "``BLOB``"

#: ../../library/sqlite3.rst:1384
msgid "This is how SQLite types are converted to Python types by default:"
msgstr ""

#: ../../library/sqlite3.rst:1395
msgid "depends on :attr:`~Connection.text_factory`, :class:`str` by default"
msgstr ""

#: ../../library/sqlite3.rst:1401
msgid ""
"The type system of the :mod:`!sqlite3` module is extensible in two ways: you "
"can store additional Python types in an SQLite database via :ref:`object "
"adapters <sqlite3-adapters>`, and you can let the :mod:`!sqlite3` module "
"convert SQLite types to Python types via :ref:`converters <sqlite3-"
"converters>`."
msgstr ""

#: ../../library/sqlite3.rst:1411
msgid "Default adapters and converters"
msgstr ""

#: ../../library/sqlite3.rst:1413
msgid ""
"There are default adapters for the date and datetime types in the datetime "
"module. They will be sent as ISO dates/ISO timestamps to SQLite."
msgstr ""

#: ../../library/sqlite3.rst:1416
msgid ""
"The default converters are registered under the name \"date\" for :class:"
"`datetime.date` and under the name \"timestamp\" for :class:`datetime."
"datetime`."
msgstr ""

#: ../../library/sqlite3.rst:1420
msgid ""
"This way, you can use date/timestamps from Python without any additional "
"fiddling in most cases. The format of the adapters is also compatible with "
"the experimental SQLite date/time functions."
msgstr ""

#: ../../library/sqlite3.rst:1424
msgid "The following example demonstrates this."
msgstr ""

#: ../../library/sqlite3.rst:1428
msgid ""
"If a timestamp stored in SQLite has a fractional part longer than 6 numbers, "
"its value will be truncated to microsecond precision by the timestamp "
"converter."
msgstr ""

#: ../../library/sqlite3.rst:1434
msgid ""
"The default \"timestamp\" converter ignores UTC offsets in the database and "
"always returns a naive :class:`datetime.datetime` object. To preserve UTC "
"offsets in timestamps, either leave converters disabled, or register an "
"offset-aware converter with :func:`register_converter`."
msgstr ""

#: ../../library/sqlite3.rst:1443
msgid "How-to guides"
msgstr "Guias de como fazer"

#: ../../library/sqlite3.rst:1448
msgid "How to use placeholders to bind values in SQL queries"
msgstr ""

#: ../../library/sqlite3.rst:1450
msgid ""
"SQL operations usually need to use values from Python variables. However, "
"beware of using Python's string operations to assemble queries, as they are "
"vulnerable to `SQL injection attacks`_. For example, an attacker can simply "
"close the single quote and inject ``OR TRUE`` to select all rows::"
msgstr ""

#: ../../library/sqlite3.rst:1463
msgid ""
"Instead, use the DB-API's parameter substitution. To insert a variable into "
"a query string, use a placeholder in the string, and substitute the actual "
"values into the query by providing them as a :class:`tuple` of values to the "
"second argument of the cursor's :meth:`~Cursor.execute` method."
msgstr ""

#: ../../library/sqlite3.rst:1468
msgid ""
"An SQL statement may use one of two kinds of placeholders: question marks "
"(qmark style) or named placeholders (named style). For the qmark style, "
"*parameters* must be a :term:`sequence` whose length must match the number "
"of placeholders, or a :exc:`ProgrammingError` is raised. For the named "
"style, *parameters* should be an instance of a :class:`dict` (or a "
"subclass), which must contain keys for all named parameters; any extra items "
"are ignored. Here's an example of both styles:"
msgstr ""

#: ../../library/sqlite3.rst:1505
msgid ""
":pep:`249` numeric placeholders are *not* supported. If used, they will be "
"interpreted as named placeholders."
msgstr ""

#: ../../library/sqlite3.rst:1512
msgid "How to adapt custom Python types to SQLite values"
msgstr ""

#: ../../library/sqlite3.rst:1514
msgid ""
"SQLite supports only a limited set of data types natively. To store custom "
"Python types in SQLite databases, *adapt* them to one of the :ref:`Python "
"types SQLite natively understands <sqlite3-types>`."
msgstr ""

#: ../../library/sqlite3.rst:1518
msgid ""
"There are two ways to adapt Python objects to SQLite types: letting your "
"object adapt itself, or using an *adapter callable*. The latter will take "
"precedence above the former. For a library that exports a custom type, it "
"may make sense to enable that type to adapt itself. As an application "
"developer, it may make more sense to take direct control by registering "
"custom adapter functions."
msgstr ""

#: ../../library/sqlite3.rst:1530
msgid "How to write adaptable objects"
msgstr ""

#: ../../library/sqlite3.rst:1532
msgid ""
"Suppose we have a :class:`!Point` class that represents a pair of "
"coordinates, ``x`` and ``y``, in a Cartesian coordinate system. The "
"coordinate pair will be stored as a text string in the database, using a "
"semicolon to separate the coordinates. This can be implemented by adding a "
"``__conform__(self, protocol)`` method which returns the adapted value. The "
"object passed to *protocol* will be of type :class:`PrepareProtocol`."
msgstr ""

#: ../../library/sqlite3.rst:1563
msgid "How to register adapter callables"
msgstr ""

#: ../../library/sqlite3.rst:1565
msgid ""
"The other possibility is to create a function that converts the Python "
"object to an SQLite-compatible type. This function can then be registered "
"using :func:`register_adapter`."
msgstr ""

#: ../../library/sqlite3.rst:1595
msgid "How to convert SQLite values to custom Python types"
msgstr ""

#: ../../library/sqlite3.rst:1597
msgid ""
"Writing an adapter lets you convert *from* custom Python types *to* SQLite "
"values. To be able to convert *from* SQLite values *to* custom Python types, "
"we use *converters*."
msgstr ""

#: ../../library/sqlite3.rst:1602
msgid ""
"Let's go back to the :class:`!Point` class. We stored the x and y "
"coordinates separated via semicolons as strings in SQLite."
msgstr ""

#: ../../library/sqlite3.rst:1605
msgid ""
"First, we'll define a converter function that accepts the string as a "
"parameter and constructs a :class:`!Point` object from it."
msgstr ""

#: ../../library/sqlite3.rst:1610
msgid ""
"Converter functions are **always** passed a :class:`bytes` object, no matter "
"the underlying SQLite data type."
msgstr ""

#: ../../library/sqlite3.rst:1619
msgid ""
"We now need to tell :mod:`!sqlite3` when it should convert a given SQLite "
"value. This is done when connecting to a database, using the *detect_types* "
"parameter of :func:`connect`. There are three options:"
msgstr ""

#: ../../library/sqlite3.rst:1623
msgid "Implicit: set *detect_types* to :const:`PARSE_DECLTYPES`"
msgstr ""

#: ../../library/sqlite3.rst:1624
msgid "Explicit: set *detect_types* to :const:`PARSE_COLNAMES`"
msgstr ""

#: ../../library/sqlite3.rst:1625
msgid ""
"Both: set *detect_types* to ``sqlite3.PARSE_DECLTYPES | sqlite3."
"PARSE_COLNAMES``. Column names take precedence over declared types."
msgstr ""

#: ../../library/sqlite3.rst:1629
msgid "The following example illustrates the implicit and explicit approaches:"
msgstr ""

#: ../../library/sqlite3.rst:1680
msgid "Adapter and converter recipes"
msgstr ""

#: ../../library/sqlite3.rst:1682
msgid "This section shows recipes for common adapters and converters."
msgstr ""

#: ../../library/sqlite3.rst:1744
msgid "How to use connection shortcut methods"
msgstr ""

#: ../../library/sqlite3.rst:1746
msgid ""
"Using the :meth:`~Connection.execute`, :meth:`~Connection.executemany`, and :"
"meth:`~Connection.executescript` methods of the :class:`Connection` class, "
"your code can be written more concisely because you don't have to create the "
"(often superfluous) :class:`Cursor` objects explicitly. Instead, the :class:"
"`Cursor` objects are created implicitly and these shortcut methods return "
"the cursor objects. This way, you can execute a ``SELECT`` statement and "
"iterate over it directly using only a single call on the :class:`Connection` "
"object."
msgstr ""

#: ../../library/sqlite3.rst:1787
msgid "How to use the connection context manager"
msgstr ""

#: ../../library/sqlite3.rst:1789
msgid ""
"A :class:`Connection` object can be used as a context manager that "
"automatically commits or rolls back open transactions when leaving the body "
"of the context manager. If the body of the :keyword:`with` statement "
"finishes without exceptions, the transaction is committed. If this commit "
"fails, or if the body of the ``with`` statement raises an uncaught "
"exception, the transaction is rolled back."
msgstr ""

#: ../../library/sqlite3.rst:1798
msgid ""
"If there is no open transaction upon leaving the body of the ``with`` "
"statement, the context manager is a no-op."
msgstr ""

#: ../../library/sqlite3.rst:1803
msgid ""
"The context manager neither implicitly opens a new transaction nor closes "
"the connection."
msgstr ""

#: ../../library/sqlite3.rst:1836
msgid "How to work with SQLite URIs"
msgstr ""

#: ../../library/sqlite3.rst:1838
msgid "Some useful URI tricks include:"
msgstr ""

#: ../../library/sqlite3.rst:1840
msgid "Open a database in read-only mode:"
msgstr ""

#: ../../library/sqlite3.rst:1849
msgid ""
"Do not implicitly create a new database file if it does not already exist; "
"will raise :exc:`~sqlite3.OperationalError` if unable to create a new file:"
msgstr ""

#: ../../library/sqlite3.rst:1859
msgid "Create a shared named in-memory database:"
msgstr ""

#: ../../library/sqlite3.rst:1873
msgid ""
"More information about this feature, including a list of parameters, can be "
"found in the `SQLite URI documentation`_."
msgstr ""

#: ../../library/sqlite3.rst:1882
msgid "How to create and use row factories"
msgstr ""

#: ../../library/sqlite3.rst:1884
msgid ""
"By default, :mod:`!sqlite3` represents each row as a :class:`tuple`. If a :"
"class:`!tuple` does not suit your needs, you can use the :class:`sqlite3."
"Row` class or a custom :attr:`~Cursor.row_factory`."
msgstr ""

#: ../../library/sqlite3.rst:1889
msgid ""
"While :attr:`!row_factory` exists as an attribute both on the :class:"
"`Cursor` and the :class:`Connection`, it is recommended to set :class:"
"`Connection.row_factory`, so all cursors created from the connection will "
"use the same row factory."
msgstr ""

#: ../../library/sqlite3.rst:1894
msgid ""
":class:`!Row` provides indexed and case-insensitive named access to columns, "
"with minimal memory overhead and performance impact over a :class:`!tuple`. "
"To use :class:`!Row` as a row factory, assign it to the :attr:`!row_factory` "
"attribute:"
msgstr ""

#: ../../library/sqlite3.rst:1904
msgid "Queries now return :class:`!Row` objects:"
msgstr ""

#: ../../library/sqlite3.rst:1919
msgid ""
"You can create a custom :attr:`~Cursor.row_factory` that returns each row as "
"a :class:`dict`, with column names mapped to values:"
msgstr ""

#: ../../library/sqlite3.rst:1928
msgid ""
"Using it, queries now return a :class:`!dict` instead of a :class:`!tuple`:"
msgstr ""

#: ../../library/sqlite3.rst:1938
msgid "The following row factory returns a :term:`named tuple`:"
msgstr ""

#: ../../library/sqlite3.rst:1949
msgid ":func:`!namedtuple_factory` can be used as follows:"
msgstr ""

#: ../../library/sqlite3.rst:1964
msgid ""
"With some adjustments, the above recipe can be adapted to use a :class:"
"`~dataclasses.dataclass`, or any other custom class, instead of a :class:"
"`~collections.namedtuple`."
msgstr ""

#: ../../library/sqlite3.rst:1972
msgid "Explanation"
msgstr "Explicação"

#: ../../library/sqlite3.rst:1977
msgid "Transaction control"
msgstr "Controle de transações"

#: ../../library/sqlite3.rst:1979
msgid ""
"The :mod:`!sqlite3` module does not adhere to the transaction handling "
"recommended by :pep:`249`."
msgstr ""

#: ../../library/sqlite3.rst:1982
msgid ""
"If the connection attribute :attr:`~Connection.isolation_level` is not "
"``None``, new transactions are implicitly opened before :meth:`~Cursor."
"execute` and :meth:`~Cursor.executemany` executes ``INSERT``, ``UPDATE``, "
"``DELETE``, or ``REPLACE`` statements; for other statements, no implicit "
"transaction handling is performed. Use the :meth:`~Connection.commit` and :"
"meth:`~Connection.rollback` methods to respectively commit and roll back "
"pending transactions. You can choose the underlying `SQLite transaction "
"behaviour`_ — that is, whether and what type of ``BEGIN`` statements :mod:`!"
"sqlite3` implicitly executes – via the :attr:`~Connection.isolation_level` "
"attribute."
msgstr ""
"Se o atributo de conexão :attr:`~Connection.isolation_level` não for "
"``None``, novas transações são abertas implicitamente antes de :meth:"
"`~Cursor.execute` e :meth:`~Cursor.executemany` executa instruções "
"``INSERT``, ``UPDATE``, ``DELETE`` ou ``REPLACE``; para outras instruções, "
"nenhuma manipulação de transação implícita é executada. Use os métodos :meth:"
"`~Connection.commit` e :meth:`~Connection.rollback` para fazer commit e "
"reverter respectivamente transações pendentes. Você pode escolher o "
"`comportamento subjacente de transação do SQLite`_ -- isto é, se e que tipo "
"de instruções ``BEGIN`` do :mod:`!sqlite3` são executadas implicitamente -- "
"através do atributo :attr:`~Connection.isolation_level`."

#: ../../library/sqlite3.rst:1995
msgid ""
"If :attr:`~Connection.isolation_level` is set to ``None``, no transactions "
"are implicitly opened at all. This leaves the underlying SQLite library in "
"`autocommit mode`_, but also allows the user to perform their own "
"transaction handling using explicit SQL statements. The underlying SQLite "
"library autocommit mode can be queried using the :attr:`~Connection."
"in_transaction` attribute."
msgstr ""
"Se :attr:`~Connection.isolation_level` estiver definido como ``None``, "
"nenhuma transação será aberta implicitamente. Isso deixa a biblioteca SQLite "
"subjacente no `modo autocommit`_, mas também permite que o usuário execute "
"sua própria manipulação de transações usando instruções SQL explícitas. O "
"modo de autocommit da biblioteca SQLite subjacente pode ser consultado "
"usando o atributo :attr:`~Connection.in_transaction`."

#: ../../library/sqlite3.rst:2003
msgid ""
"The :meth:`~Cursor.executescript` method implicitly commits any pending "
"transaction before execution of the given SQL script, regardless of the "
"value of :attr:`~Connection.isolation_level`."
msgstr ""
"O método :meth:`~Cursor.executescript` compromete implicitamente qualquer "
"transação pendente antes da execução do script SQL fornecido, "
"independentemente do valor de :attr:`~Connection.isolation_level`."

#: ../../library/sqlite3.rst:2007
msgid ""
":mod:`!sqlite3` used to implicitly commit an open transaction before DDL "
"statements.  This is no longer the case."
msgstr ""
":mod:`!sqlite3` costumava fazer commit de forma implícita de uma transação "
"aberta antes das instruções DDL. Este não é mais o caso."
