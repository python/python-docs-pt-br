# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2020-02-29 09:29+0000\n"
"Last-Translator: Marco Rougeth <marco@rougeth.com>\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/"
"python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../library/sqlite3.rst:2
msgid ":mod:`sqlite3` --- DB-API 2.0 interface for SQLite databases"
msgstr ""

#: ../../library/sqlite3.rst:11
msgid ""
"SQLite is a C library that provides a lightweight disk-based database that "
"doesn't require a separate server process and allows accessing the database "
"using a nonstandard variant of the SQL query language. Some applications can "
"use SQLite for internal data storage.  It's also possible to prototype an "
"application using SQLite and then port the code to a larger database such as "
"PostgreSQL or Oracle."
msgstr ""
"SQLite é uma biblioteca C que fornece um banco de dados leve baseado em "
"disco que não requer um processo de servidor separado e permite acessar o "
"banco de dados usando uma variante não padrão da linguagem de consulta SQL. "
"Algumas aplicações podem usar SQLite para armazenamento interno de dados. "
"Também é possível prototipar um aplicativo usando SQLite e, em seguida, "
"portar o código para um banco de dados maior, como PostgreSQL ou Oracle."

#: ../../library/sqlite3.rst:18
msgid ""
"The sqlite3 module was written by Gerhard Häring.  It provides a SQL "
"interface compliant with the DB-API 2.0 specification described by :pep:"
"`249`."
msgstr ""

#: ../../library/sqlite3.rst:21
msgid ""
"To use the module, you must first create a :class:`Connection` object that "
"represents the database.  Here the data will be stored in the :file:`example."
"db` file::"
msgstr ""

#: ../../library/sqlite3.rst:28
msgid ""
"You can also supply the special name ``:memory:`` to create a database in "
"RAM."
msgstr ""
"You can also supply the special name ``:memory:`` to create a database in "
"RAM."

#: ../../library/sqlite3.rst:30
msgid ""
"Once you have a :class:`Connection`, you can create a :class:`Cursor`  "
"object and call its :meth:`~Cursor.execute` method to perform SQL commands::"
msgstr ""

#: ../../library/sqlite3.rst:49
msgid ""
"The data you've saved is persistent and is available in subsequent sessions::"
msgstr ""

#: ../../library/sqlite3.rst:55
msgid ""
"Usually your SQL operations will need to use values from Python variables.  "
"You shouldn't assemble your query using Python's string operations because "
"doing so is insecure; it makes your program vulnerable to an SQL injection "
"attack (see https://xkcd.com/327/ for humorous example of what can go wrong)."
msgstr ""

#: ../../library/sqlite3.rst:60
msgid ""
"Instead, use the DB-API's parameter substitution.  Put ``?`` as a "
"placeholder wherever you want to use a value, and then provide a tuple of "
"values as the second argument to the cursor's :meth:`~Cursor.execute` "
"method.  (Other database modules may use a different placeholder, such as "
"``%s`` or ``:1``.) For example::"
msgstr ""

#: ../../library/sqlite3.rst:82
msgid ""
"To retrieve data after executing a SELECT statement, you can either treat "
"the cursor as an :term:`iterator`, call the cursor's :meth:`~Cursor."
"fetchone` method to retrieve a single matching row, or call :meth:`~Cursor."
"fetchall` to get a list of the matching rows."
msgstr ""

#: ../../library/sqlite3.rst:87
msgid "This example uses the iterator form::"
msgstr "This example uses the iterator form::"

#: ../../library/sqlite3.rst:102
msgid "https://github.com/ghaering/pysqlite"
msgstr ""

#: ../../library/sqlite3.rst:101
msgid ""
"The pysqlite web page -- sqlite3 is developed externally under the name "
"\"pysqlite\"."
msgstr ""

#: ../../library/sqlite3.rst:106
msgid "https://www.sqlite.org"
msgstr "https://www.sqlite.org"

#: ../../library/sqlite3.rst:105
msgid ""
"The SQLite web page; the documentation describes the syntax and the "
"available data types for the supported SQL dialect."
msgstr ""
"A página web do SQLite; a documentação descreve a sintaxe e os tipos de "
"dados disponíveis para o dialeto SQL suportado."

#: ../../library/sqlite3.rst:109
msgid "http://www.w3schools.com/sql/"
msgstr ""

#: ../../library/sqlite3.rst:109
msgid "Tutorial, reference and examples for learning SQL syntax."
msgstr "Tutoriais, referências e exemplos para aprender a sintaxe SQL."

#: ../../library/sqlite3.rst:111
msgid ":pep:`249` - Database API Specification 2.0"
msgstr ":pep:`249` - Especificação 2.0 da API de banco de dados"

#: ../../library/sqlite3.rst:112
msgid "PEP written by Marc-André Lemburg."
msgstr "PEP escrita por Marc-André Lemburg."

#: ../../library/sqlite3.rst:118
msgid "Module functions and constants"
msgstr "Funções e constantes do módulo"

#: ../../library/sqlite3.rst:123
msgid ""
"The version number of this module, as a string. This is not the version of "
"the SQLite library."
msgstr ""

#: ../../library/sqlite3.rst:128
msgid ""
"The version number of this module, as a tuple of integers. This is not the "
"version of the SQLite library."
msgstr ""

#: ../../library/sqlite3.rst:133
msgid "The version number of the run-time SQLite library, as a string."
msgstr ""

#: ../../library/sqlite3.rst:137
msgid ""
"The version number of the run-time SQLite library, as a tuple of integers."
msgstr ""

#: ../../library/sqlite3.rst:141 ../../library/sqlite3.rst:154
msgid ""
"This constant is meant to be used with the *detect_types* parameter of the :"
"func:`connect` function."
msgstr ""

#: ../../library/sqlite3.rst:144
msgid ""
"Setting it makes the :mod:`sqlite3` module parse the declared type for each "
"column it returns.  It will parse out the first word of the declared type, "
"i. e.  for \"integer primary key\", it will parse out \"integer\", or for "
"\"number(10)\" it will parse out \"number\". Then for that column, it will "
"look into the converters dictionary and use the converter function "
"registered for that type there."
msgstr ""

#: ../../library/sqlite3.rst:157
msgid ""
"Setting this makes the SQLite interface parse the column name for each "
"column it returns.  It will look for a string formed [mytype] in there, and "
"then decide that 'mytype' is the type of the column. It will try to find an "
"entry of 'mytype' in the converters dictionary and then use the converter "
"function found there to return the value. The column name found in :attr:"
"`Cursor.description` is only the first word of the column name, i.  e. if "
"you use something like ``'as \"x [datetime]\"'`` in your SQL, then we will "
"parse out everything until the first blank for the column name: the column "
"name would simply be \"x\"."
msgstr ""

#: ../../library/sqlite3.rst:169
msgid ""
"Opens a connection to the SQLite database file *database*. You can use ``\":"
"memory:\"`` to open a database connection to a database that resides in RAM "
"instead of on disk."
msgstr ""

#: ../../library/sqlite3.rst:173
msgid ""
"When a database is accessed by multiple connections, and one of the "
"processes modifies the database, the SQLite database is locked until that "
"transaction is committed. The *timeout* parameter specifies how long the "
"connection should wait for the lock to go away until raising an exception. "
"The default for the timeout parameter is 5.0 (five seconds)."
msgstr ""

#: ../../library/sqlite3.rst:179
msgid ""
"For the *isolation_level* parameter, please see the :attr:`Connection."
"isolation_level` property of :class:`Connection` objects."
msgstr ""

#: ../../library/sqlite3.rst:182
msgid ""
"SQLite natively supports only the types TEXT, INTEGER, REAL, BLOB and NULL. "
"If you want to use other types you must add support for them yourself. The "
"*detect_types* parameter and the using custom **converters** registered with "
"the module-level :func:`register_converter` function allow you to easily do "
"that."
msgstr ""

#: ../../library/sqlite3.rst:187
msgid ""
"*detect_types* defaults to 0 (i. e. off, no type detection), you can set it "
"to any combination of :const:`PARSE_DECLTYPES` and :const:`PARSE_COLNAMES` "
"to turn type detection on."
msgstr ""

#: ../../library/sqlite3.rst:191
msgid ""
"By default, the :mod:`sqlite3` module uses its :class:`Connection` class for "
"the connect call.  You can, however, subclass the :class:`Connection` class "
"and make :func:`connect` use your class instead by providing your class for "
"the *factory* parameter."
msgstr ""

#: ../../library/sqlite3.rst:196
msgid "Consult the section :ref:`sqlite3-types` of this manual for details."
msgstr ""

#: ../../library/sqlite3.rst:198
msgid ""
"The :mod:`sqlite3` module internally uses a statement cache to avoid SQL "
"parsing overhead. If you want to explicitly set the number of statements "
"that are cached for the connection, you can set the *cached_statements* "
"parameter. The currently implemented default is to cache 100 statements."
msgstr ""

#: ../../library/sqlite3.rst:206
msgid ""
"Registers a callable to convert a bytestring from the database into a custom "
"Python type. The callable will be invoked for all database values that are "
"of the type *typename*. Confer the parameter *detect_types* of the :func:"
"`connect` function for how the type detection works. Note that *typename* "
"and the name of the type in your query are matched in case-insensitive "
"manner."
msgstr ""

#: ../../library/sqlite3.rst:215
msgid ""
"Registers a callable to convert the custom Python type *type* into one of "
"SQLite's supported types. The callable *callable* accepts as single "
"parameter the Python value, and must return a value of the following types: "
"int, long, float, str (UTF-8 encoded), unicode or buffer."
msgstr ""

#: ../../library/sqlite3.rst:223
msgid ""
"Returns :const:`True` if the string *sql* contains one or more complete SQL "
"statements terminated by semicolons. It does not verify that the SQL is "
"syntactically correct, only that there are no unclosed string literals and "
"the statement is terminated by a semicolon."
msgstr ""

#: ../../library/sqlite3.rst:228
msgid ""
"This can be used to build a shell for SQLite, as in the following example:"
msgstr ""

#: ../../library/sqlite3.rst:236
msgid ""
"By default you will not get any tracebacks in user-defined functions, "
"aggregates, converters, authorizer callbacks etc. If you want to debug them, "
"you can call this function with *flag* set to ``True``. Afterwards, you will "
"get tracebacks from callbacks on ``sys.stderr``. Use :const:`False` to "
"disable the feature again."
msgstr ""

#: ../../library/sqlite3.rst:246
msgid "Connection Objects"
msgstr ""

#: ../../library/sqlite3.rst:250
msgid "A SQLite database connection has the following attributes and methods:"
msgstr ""

#: ../../library/sqlite3.rst:254
msgid ""
"Get or set the current isolation level. :const:`None` for autocommit mode or "
"one of \"DEFERRED\", \"IMMEDIATE\" or \"EXCLUSIVE\". See section :ref:"
"`sqlite3-controlling-transactions` for a more detailed explanation."
msgstr ""

#: ../../library/sqlite3.rst:261
msgid ""
"The cursor method accepts a single optional parameter *factory*. If "
"supplied, this must be a callable returning an instance of :class:`Cursor` "
"or its subclasses."
msgstr ""

#: ../../library/sqlite3.rst:267
msgid ""
"This method commits the current transaction. If you don't call this method, "
"anything you did since the last call to ``commit()`` is not visible from "
"other database connections. If you wonder why you don't see the data you've "
"written to the database, please check you didn't forget to call this method."
msgstr ""

#: ../../library/sqlite3.rst:274
msgid ""
"This method rolls back any changes to the database since the last call to :"
"meth:`commit`."
msgstr ""

#: ../../library/sqlite3.rst:279
msgid ""
"This closes the database connection. Note that this does not automatically "
"call :meth:`commit`. If you just close your database connection without "
"calling :meth:`commit` first, your changes will be lost!"
msgstr ""

#: ../../library/sqlite3.rst:285
msgid ""
"This is a nonstandard shortcut that creates an intermediate cursor object by "
"calling the cursor method, then calls the cursor's :meth:`execute <Cursor."
"execute>` method with the parameters given."
msgstr ""

#: ../../library/sqlite3.rst:292
msgid ""
"This is a nonstandard shortcut that creates an intermediate cursor object by "
"calling the cursor method, then calls the cursor's :meth:`executemany "
"<Cursor.executemany>` method with the parameters given."
msgstr ""

#: ../../library/sqlite3.rst:298
msgid ""
"This is a nonstandard shortcut that creates an intermediate cursor object by "
"calling the cursor method, then calls the cursor's :meth:`executescript "
"<Cursor.executescript>` method with the parameters given."
msgstr ""

#: ../../library/sqlite3.rst:305
msgid ""
"Creates a user-defined function that you can later use from within SQL "
"statements under the function name *name*. *num_params* is the number of "
"parameters the function accepts, and *func* is a Python callable that is "
"called as the SQL function."
msgstr ""

#: ../../library/sqlite3.rst:310
msgid ""
"The function can return any of the types supported by SQLite: unicode, str, "
"int, long, float, buffer and ``None``."
msgstr ""

#: ../../library/sqlite3.rst:313 ../../library/sqlite3.rst:329
#: ../../library/sqlite3.rst:425 ../../library/sqlite3.rst:531
msgid "Example:"
msgstr "Exemplo"

#: ../../library/sqlite3.rst:320
msgid "Creates a user-defined aggregate function."
msgstr ""

#: ../../library/sqlite3.rst:322
msgid ""
"The aggregate class must implement a ``step`` method, which accepts the "
"number of parameters *num_params*, and a ``finalize`` method which will "
"return the final result of the aggregate."
msgstr ""

#: ../../library/sqlite3.rst:326
msgid ""
"The ``finalize`` method can return any of the types supported by SQLite: "
"unicode, str, int, long, float, buffer and ``None``."
msgstr ""

#: ../../library/sqlite3.rst:336
msgid ""
"Creates a collation with the specified *name* and *callable*. The callable "
"will be passed two string arguments. It should return -1 if the first is "
"ordered lower than the second, 0 if they are ordered equal and 1 if the "
"first is ordered higher than the second.  Note that this controls sorting "
"(ORDER BY in SQL) so your comparisons don't affect other SQL operations."
msgstr ""

#: ../../library/sqlite3.rst:342
msgid ""
"Note that the callable will get its parameters as Python bytestrings, which "
"will normally be encoded in UTF-8."
msgstr ""

#: ../../library/sqlite3.rst:345
msgid ""
"The following example shows a custom collation that sorts \"the wrong way\":"
msgstr ""

#: ../../library/sqlite3.rst:349
msgid ""
"To remove a collation, call ``create_collation`` with ``None`` as callable::"
msgstr ""

#: ../../library/sqlite3.rst:356
msgid ""
"You can call this method from a different thread to abort any queries that "
"might be executing on the connection. The query will then abort and the "
"caller will get an exception."
msgstr ""

#: ../../library/sqlite3.rst:363
msgid ""
"This routine registers a callback. The callback is invoked for each attempt "
"to access a column of a table in the database. The callback should return :"
"const:`SQLITE_OK` if access is allowed, :const:`SQLITE_DENY` if the entire "
"SQL statement should be aborted with an error and :const:`SQLITE_IGNORE` if "
"the column should be treated as a NULL value. These constants are available "
"in the :mod:`sqlite3` module."
msgstr ""

#: ../../library/sqlite3.rst:370
msgid ""
"The first argument to the callback signifies what kind of operation is to be "
"authorized. The second and third argument will be arguments or :const:`None` "
"depending on the first argument. The 4th argument is the name of the "
"database (\"main\", \"temp\", etc.) if applicable. The 5th argument is the "
"name of the inner-most trigger or view that is responsible for the access "
"attempt or :const:`None` if this access attempt is directly from input SQL "
"code."
msgstr ""

#: ../../library/sqlite3.rst:377
msgid ""
"Please consult the SQLite documentation about the possible values for the "
"first argument and the meaning of the second and third argument depending on "
"the first one. All necessary constants are available in the :mod:`sqlite3` "
"module."
msgstr ""

#: ../../library/sqlite3.rst:384
msgid ""
"This routine registers a callback. The callback is invoked for every *n* "
"instructions of the SQLite virtual machine. This is useful if you want to "
"get called from SQLite during long-running operations, for example to update "
"a GUI."
msgstr ""

#: ../../library/sqlite3.rst:389
msgid ""
"If you want to clear any previously installed progress handler, call the "
"method with :const:`None` for *handler*."
msgstr ""

#: ../../library/sqlite3.rst:397
msgid ""
"This routine allows/disallows the SQLite engine to load SQLite extensions "
"from shared libraries.  SQLite extensions can define new functions, "
"aggregates or whole new virtual table implementations.  One well-known "
"extension is the fulltext-search extension distributed with SQLite."
msgstr ""

#: ../../library/sqlite3.rst:402 ../../library/sqlite3.rst:414
msgid "Loadable extensions are disabled by default. See [#f1]_."
msgstr ""

#: ../../library/sqlite3.rst:410
msgid ""
"This routine loads a SQLite extension from a shared library.  You have to "
"enable extension loading with :meth:`enable_load_extension` before you can "
"use this routine."
msgstr ""

#: ../../library/sqlite3.rst:420
msgid ""
"You can change this attribute to a callable that accepts the cursor and the "
"original row as a tuple and will return the real result row.  This way, you "
"can implement more advanced ways of returning results, such  as returning an "
"object that can also access columns by name."
msgstr ""

#: ../../library/sqlite3.rst:429
msgid ""
"If returning a tuple doesn't suffice and you want name-based access to "
"columns, you should consider setting :attr:`row_factory` to the highly-"
"optimized :class:`sqlite3.Row` type. :class:`Row` provides both index-based "
"and case-insensitive name-based access to columns with almost no memory "
"overhead. It will probably be better than your own custom dictionary-based "
"approach or even a db_row based solution."
msgstr ""

#: ../../library/sqlite3.rst:441
msgid ""
"Using this attribute you can control what objects are returned for the "
"``TEXT`` data type. By default, this attribute is set to :class:`unicode` "
"and the :mod:`sqlite3` module will return Unicode objects for ``TEXT``. If "
"you want to return bytestrings instead, you can set it to :class:`str`."
msgstr ""

#: ../../library/sqlite3.rst:446
msgid ""
"For efficiency reasons, there's also a way to return Unicode objects only "
"for non-ASCII data, and bytestrings otherwise. To activate it, set this "
"attribute to :const:`sqlite3.OptimizedUnicode`."
msgstr ""

#: ../../library/sqlite3.rst:450
msgid ""
"You can also set it to any other callable that accepts a single bytestring "
"parameter and returns the resulting object."
msgstr ""

#: ../../library/sqlite3.rst:453
msgid "See the following example code for illustration:"
msgstr ""

#: ../../library/sqlite3.rst:460
msgid ""
"Returns the total number of database rows that have been modified, inserted, "
"or deleted since the database connection was opened."
msgstr ""

#: ../../library/sqlite3.rst:466
msgid ""
"Returns an iterator to dump the database in an SQL text format.  Useful when "
"saving an in-memory database for later restoration.  This function provides "
"the same capabilities as the :kbd:`.dump` command in the :program:`sqlite3` "
"shell."
msgstr ""

#: ../../library/sqlite3.rst:473
msgid "Example::"
msgstr "Exemplo::"

#: ../../library/sqlite3.rst:487
msgid "Cursor Objects"
msgstr ""

#: ../../library/sqlite3.rst:491
msgid "A :class:`Cursor` instance has the following attributes and methods."
msgstr ""

#: ../../library/sqlite3.rst:495
msgid ""
"Executes an SQL statement. The SQL statement may be parameterized (i. e. "
"placeholders instead of SQL literals). The :mod:`sqlite3` module supports "
"two kinds of placeholders: question marks (qmark style) and named "
"placeholders (named style)."
msgstr ""

#: ../../library/sqlite3.rst:500
msgid "Here's an example of both styles:"
msgstr ""

#: ../../library/sqlite3.rst:504
msgid ""
":meth:`execute` will only execute a single SQL statement. If you try to "
"execute more than one statement with it, it will raise a Warning. Use :meth:"
"`executescript` if you want to execute multiple SQL statements with one call."
msgstr ""

#: ../../library/sqlite3.rst:512
msgid ""
"Executes an SQL command against all parameter sequences or mappings found in "
"the sequence *sql*.  The :mod:`sqlite3` module also allows using an :term:"
"`iterator` yielding parameters instead of a sequence."
msgstr ""

#: ../../library/sqlite3.rst:518
msgid "Here's a shorter example using a :term:`generator`:"
msgstr ""

#: ../../library/sqlite3.rst:525
msgid ""
"This is a nonstandard convenience method for executing multiple SQL "
"statements at once. It issues a ``COMMIT`` statement first, then executes "
"the SQL script it gets as a parameter."
msgstr ""

#: ../../library/sqlite3.rst:529
msgid "*sql_script* can be a bytestring or a Unicode string."
msgstr ""

#: ../../library/sqlite3.rst:538
msgid ""
"Fetches the next row of a query result set, returning a single sequence, or :"
"const:`None` when no more data is available."
msgstr ""

#: ../../library/sqlite3.rst:544
msgid ""
"Fetches the next set of rows of a query result, returning a list.  An empty "
"list is returned when no more rows are available."
msgstr ""

#: ../../library/sqlite3.rst:547
msgid ""
"The number of rows to fetch per call is specified by the *size* parameter. "
"If it is not given, the cursor's arraysize determines the number of rows to "
"be fetched. The method should try to fetch as many rows as indicated by the "
"size parameter. If this is not possible due to the specified number of rows "
"not being available, fewer rows may be returned."
msgstr ""

#: ../../library/sqlite3.rst:553
msgid ""
"Note there are performance considerations involved with the *size* "
"parameter. For optimal performance, it is usually best to use the arraysize "
"attribute. If the *size* parameter is used, then it is best for it to retain "
"the same value from one :meth:`fetchmany` call to the next."
msgstr ""

#: ../../library/sqlite3.rst:560
msgid ""
"Fetches all (remaining) rows of a query result, returning a list.  Note that "
"the cursor's arraysize attribute can affect the performance of this "
"operation. An empty list is returned when no rows are available."
msgstr ""

#: ../../library/sqlite3.rst:567
msgid ""
"Although the :class:`Cursor` class of the :mod:`sqlite3` module implements "
"this attribute, the database engine's own support for the determination of "
"\"rows affected\"/\"rows selected\" is quirky."
msgstr ""

#: ../../library/sqlite3.rst:571
msgid ""
"For :meth:`executemany` statements, the number of modifications are summed "
"up into :attr:`rowcount`."
msgstr ""

#: ../../library/sqlite3.rst:574
msgid ""
"As required by the Python DB API Spec, the :attr:`rowcount` attribute \"is "
"-1 in case no ``executeXX()`` has been performed on the cursor or the "
"rowcount of the last operation is not determinable by the interface\". This "
"includes ``SELECT`` statements because we cannot determine the number of "
"rows a query produced until all rows were fetched."
msgstr ""

#: ../../library/sqlite3.rst:580
msgid ""
"With SQLite versions before 3.6.5, :attr:`rowcount` is set to 0 if you make "
"a ``DELETE FROM table`` without any condition."
msgstr ""

#: ../../library/sqlite3.rst:585
msgid ""
"This read-only attribute provides the rowid of the last modified row. It is "
"only set if you issued an ``INSERT`` statement using the :meth:`execute` "
"method. For operations other than ``INSERT`` or when :meth:`executemany` is "
"called, :attr:`lastrowid` is set to :const:`None`."
msgstr ""

#: ../../library/sqlite3.rst:592
msgid ""
"This read-only attribute provides the column names of the last query. To "
"remain compatible with the Python DB API, it returns a 7-tuple for each "
"column where the last six items of each tuple are :const:`None`."
msgstr ""

#: ../../library/sqlite3.rst:596
msgid "It is set for ``SELECT`` statements without any matching rows as well."
msgstr ""

#: ../../library/sqlite3.rst:600
msgid ""
"This read-only attribute provides the SQLite database :class:`Connection` "
"used by the :class:`Cursor` object.  A :class:`Cursor` object created by "
"calling :meth:`con.cursor() <Connection.cursor>` will have a :attr:"
"`connection` attribute that refers to *con*::"
msgstr ""

#: ../../library/sqlite3.rst:613
msgid "Row Objects"
msgstr ""

#: ../../library/sqlite3.rst:617
msgid ""
"A :class:`Row` instance serves as a highly optimized :attr:`~Connection."
"row_factory` for :class:`Connection` objects. It tries to mimic a tuple in "
"most of its features."
msgstr ""

#: ../../library/sqlite3.rst:621
msgid ""
"It supports mapping access by column name and index, iteration, "
"representation, equality testing and :func:`len`."
msgstr ""

#: ../../library/sqlite3.rst:624
msgid ""
"If two :class:`Row` objects have exactly the same columns and their members "
"are equal, they compare equal."
msgstr ""

#: ../../library/sqlite3.rst:627
msgid "Added iteration and equality (hashability)."
msgstr ""

#: ../../library/sqlite3.rst:632
msgid ""
"This method returns a list of column names. Immediately after a query, it is "
"the first member of each tuple in :attr:`Cursor.description`."
msgstr ""

#: ../../library/sqlite3.rst:637
msgid "Let's assume we initialize a table as in the example given above::"
msgstr ""

#: ../../library/sqlite3.rst:649
msgid "Now we plug :class:`Row` in::"
msgstr ""

#: ../../library/sqlite3.rst:681
msgid "SQLite and Python types"
msgstr ""

#: ../../library/sqlite3.rst:685
msgid "Introduction"
msgstr "Introdução"

#: ../../library/sqlite3.rst:687
msgid ""
"SQLite natively supports the following types: ``NULL``, ``INTEGER``, "
"``REAL``, ``TEXT``, ``BLOB``."
msgstr ""

#: ../../library/sqlite3.rst:690
msgid ""
"The following Python types can thus be sent to SQLite without any problem:"
msgstr ""

#: ../../library/sqlite3.rst:693 ../../library/sqlite3.rst:713
msgid "Python type"
msgstr "Python type"

#: ../../library/sqlite3.rst:693 ../../library/sqlite3.rst:713
msgid "SQLite type"
msgstr "Tipo SQLite"

#: ../../library/sqlite3.rst:695 ../../library/sqlite3.rst:715
msgid ":const:`None`"
msgstr ":const:`None`"

#: ../../library/sqlite3.rst:695 ../../library/sqlite3.rst:715
msgid "``NULL``"
msgstr "``NULL``"

#: ../../library/sqlite3.rst:697
msgid ":class:`int`"
msgstr ":class:`int`"

#: ../../library/sqlite3.rst:697 ../../library/sqlite3.rst:699
#: ../../library/sqlite3.rst:717
msgid "``INTEGER``"
msgstr "``INTEGER``"

#: ../../library/sqlite3.rst:699
msgid ":class:`long`"
msgstr ""

#: ../../library/sqlite3.rst:701 ../../library/sqlite3.rst:720
msgid ":class:`float`"
msgstr ":class:`float`"

#: ../../library/sqlite3.rst:701 ../../library/sqlite3.rst:720
msgid "``REAL``"
msgstr "``REAL``"

#: ../../library/sqlite3.rst:703
msgid ":class:`str` (UTF8-encoded)"
msgstr ""

#: ../../library/sqlite3.rst:703 ../../library/sqlite3.rst:705
#: ../../library/sqlite3.rst:722
msgid "``TEXT``"
msgstr "``TEXT``"

#: ../../library/sqlite3.rst:705
msgid ":class:`unicode`"
msgstr ""

#: ../../library/sqlite3.rst:707 ../../library/sqlite3.rst:725
msgid ":class:`buffer`"
msgstr ""

#: ../../library/sqlite3.rst:707 ../../library/sqlite3.rst:725
msgid "``BLOB``"
msgstr "``BLOB``"

#: ../../library/sqlite3.rst:710
msgid "This is how SQLite types are converted to Python types by default:"
msgstr ""

#: ../../library/sqlite3.rst:717
msgid ":class:`int` or :class:`long`, depending on size"
msgstr ""

#: ../../library/sqlite3.rst:722
msgid ""
"depends on :attr:`~Connection.text_factory`, :class:`unicode` by default"
msgstr ""

#: ../../library/sqlite3.rst:728
msgid ""
"The type system of the :mod:`sqlite3` module is extensible in two ways: you "
"can store additional Python types in a SQLite database via object "
"adaptation, and you can let the :mod:`sqlite3` module convert SQLite types "
"to different Python types via converters."
msgstr ""

#: ../../library/sqlite3.rst:735
msgid "Using adapters to store additional Python types in SQLite databases"
msgstr ""

#: ../../library/sqlite3.rst:737
msgid ""
"As described before, SQLite supports only a limited set of types natively. "
"To use other Python types with SQLite, you must **adapt** them to one of the "
"sqlite3 module's supported types for SQLite: one of NoneType, int, long, "
"float, str, unicode, buffer."
msgstr ""

#: ../../library/sqlite3.rst:742
msgid ""
"There are two ways to enable the :mod:`sqlite3` module to adapt a custom "
"Python type to one of the supported ones."
msgstr ""

#: ../../library/sqlite3.rst:747
msgid "Letting your object adapt itself"
msgstr ""

#: ../../library/sqlite3.rst:749
msgid ""
"This is a good approach if you write the class yourself. Let's suppose you "
"have a class like this::"
msgstr ""

#: ../../library/sqlite3.rst:756
msgid ""
"Now you want to store the point in a single SQLite column.  First you'll "
"have to choose one of the supported types first to be used for representing "
"the point. Let's just use str and separate the coordinates using a "
"semicolon. Then you need to give your class a method ``__conform__(self, "
"protocol)`` which must return the converted value. The parameter *protocol* "
"will be :class:`PrepareProtocol`."
msgstr ""

#: ../../library/sqlite3.rst:766
msgid "Registering an adapter callable"
msgstr ""

#: ../../library/sqlite3.rst:768
msgid ""
"The other possibility is to create a function that converts the type to the "
"string representation and register the function with :meth:"
"`register_adapter`."
msgstr ""

#: ../../library/sqlite3.rst:773
msgid ""
"The type/class to adapt must be a :term:`new-style class`, i. e. it must "
"have :class:`object` as one of its bases."
msgstr ""

#: ../../library/sqlite3.rst:778
msgid ""
"The :mod:`sqlite3` module has two default adapters for Python's built-in :"
"class:`datetime.date` and :class:`datetime.datetime` types.  Now let's "
"suppose we want to store :class:`datetime.datetime` objects not in ISO "
"representation, but as a Unix timestamp."
msgstr ""

#: ../../library/sqlite3.rst:787
msgid "Converting SQLite values to custom Python types"
msgstr ""

#: ../../library/sqlite3.rst:789
msgid ""
"Writing an adapter lets you send custom Python types to SQLite. But to make "
"it really useful we need to make the Python to SQLite to Python roundtrip "
"work."
msgstr ""

#: ../../library/sqlite3.rst:792
msgid "Enter converters."
msgstr ""

#: ../../library/sqlite3.rst:794
msgid ""
"Let's go back to the :class:`Point` class. We stored the x and y coordinates "
"separated via semicolons as strings in SQLite."
msgstr ""

#: ../../library/sqlite3.rst:797
msgid ""
"First, we'll define a converter function that accepts the string as a "
"parameter and constructs a :class:`Point` object from it."
msgstr ""

#: ../../library/sqlite3.rst:802
msgid ""
"Converter functions **always** get called with a string, no matter under "
"which data type you sent the value to SQLite."
msgstr ""

#: ../../library/sqlite3.rst:811
msgid ""
"Now you need to make the :mod:`sqlite3` module know that what you select "
"from the database is actually a point. There are two ways of doing this:"
msgstr ""

#: ../../library/sqlite3.rst:814
msgid "Implicitly via the declared type"
msgstr ""

#: ../../library/sqlite3.rst:816
msgid "Explicitly via the column name"
msgstr ""

#: ../../library/sqlite3.rst:818
msgid ""
"Both ways are described in section :ref:`sqlite3-module-contents`, in the "
"entries for the constants :const:`PARSE_DECLTYPES` and :const:"
"`PARSE_COLNAMES`."
msgstr ""

#: ../../library/sqlite3.rst:821
msgid "The following example illustrates both approaches."
msgstr ""

#: ../../library/sqlite3.rst:827
msgid "Default adapters and converters"
msgstr ""

#: ../../library/sqlite3.rst:829
msgid ""
"There are default adapters for the date and datetime types in the datetime "
"module. They will be sent as ISO dates/ISO timestamps to SQLite."
msgstr ""

#: ../../library/sqlite3.rst:832
msgid ""
"The default converters are registered under the name \"date\" for :class:"
"`datetime.date` and under the name \"timestamp\" for :class:`datetime."
"datetime`."
msgstr ""

#: ../../library/sqlite3.rst:836
msgid ""
"This way, you can use date/timestamps from Python without any additional "
"fiddling in most cases. The format of the adapters is also compatible with "
"the experimental SQLite date/time functions."
msgstr ""

#: ../../library/sqlite3.rst:840
msgid "The following example demonstrates this."
msgstr ""

#: ../../library/sqlite3.rst:844
msgid ""
"If a timestamp stored in SQLite has a fractional part longer than 6 numbers, "
"its value will be truncated to microsecond precision by the timestamp "
"converter."
msgstr ""

#: ../../library/sqlite3.rst:852
msgid "Controlling Transactions"
msgstr "Controlando Transações"

#: ../../library/sqlite3.rst:854
msgid ""
"By default, the :mod:`sqlite3` module opens transactions implicitly before a "
"Data Modification Language (DML)  statement (i.e. ``INSERT``/``UPDATE``/"
"``DELETE``/``REPLACE``), and commits transactions implicitly before a non-"
"DML, non-query statement (i. e. anything other than ``SELECT`` or the "
"aforementioned)."
msgstr ""

#: ../../library/sqlite3.rst:860
msgid ""
"So if you are within a transaction and issue a command like ``CREATE "
"TABLE ...``, ``VACUUM``, ``PRAGMA``, the :mod:`sqlite3` module will commit "
"implicitly before executing that command. There are two reasons for doing "
"that. The first is that some of these commands don't work within "
"transactions. The other reason is that sqlite3 needs to keep track of the "
"transaction state (if a transaction is active or not)."
msgstr ""

#: ../../library/sqlite3.rst:867
msgid ""
"You can control which kind of ``BEGIN`` statements sqlite3 implicitly "
"executes (or none at all) via the *isolation_level* parameter to the :func:"
"`connect` call, or via the :attr:`isolation_level` property of connections."
msgstr ""

#: ../../library/sqlite3.rst:871
msgid ""
"If you want **autocommit mode**, then set :attr:`isolation_level` to "
"``None``."
msgstr ""

#: ../../library/sqlite3.rst:873
msgid ""
"Otherwise leave it at its default, which will result in a plain \"BEGIN\" "
"statement, or set it to one of SQLite's supported isolation levels: "
"\"DEFERRED\", \"IMMEDIATE\" or \"EXCLUSIVE\"."
msgstr ""

#: ../../library/sqlite3.rst:880
msgid "Using :mod:`sqlite3` efficiently"
msgstr ""

#: ../../library/sqlite3.rst:884
msgid "Using shortcut methods"
msgstr ""

#: ../../library/sqlite3.rst:886
msgid ""
"Using the nonstandard :meth:`execute`, :meth:`executemany` and :meth:"
"`executescript` methods of the :class:`Connection` object, your code can be "
"written more concisely because you don't have to create the (often "
"superfluous) :class:`Cursor` objects explicitly. Instead, the :class:"
"`Cursor` objects are created implicitly and these shortcut methods return "
"the cursor objects. This way, you can execute a ``SELECT`` statement and "
"iterate over it directly using only a single call on the :class:`Connection` "
"object."
msgstr ""

#: ../../library/sqlite3.rst:898
msgid "Accessing columns by name instead of by index"
msgstr ""

#: ../../library/sqlite3.rst:900
msgid ""
"One useful feature of the :mod:`sqlite3` module is the built-in :class:"
"`sqlite3.Row` class designed to be used as a row factory."
msgstr ""

#: ../../library/sqlite3.rst:903
msgid ""
"Rows wrapped with this class can be accessed both by index (like tuples) and "
"case-insensitively by name:"
msgstr ""

#: ../../library/sqlite3.rst:910
msgid "Using the connection as a context manager"
msgstr ""

#: ../../library/sqlite3.rst:914
msgid ""
"Connection objects can be used as context managers that automatically commit "
"or rollback transactions.  In the event of an exception, the transaction is "
"rolled back; otherwise, the transaction is committed:"
msgstr ""

#: ../../library/sqlite3.rst:923
msgid "Common issues"
msgstr ""

#: ../../library/sqlite3.rst:926
msgid "Multithreading"
msgstr ""

#: ../../library/sqlite3.rst:928
msgid ""
"Older SQLite versions had issues with sharing connections between threads. "
"That's why the Python module disallows sharing connections and cursors "
"between threads. If you still try to do so, you will get an exception at "
"runtime."
msgstr ""

#: ../../library/sqlite3.rst:932
msgid ""
"The only exception is calling the :meth:`~Connection.interrupt` method, "
"which only makes sense to call from a different thread."
msgstr ""

#: ../../library/sqlite3.rst:936
msgid "Footnotes"
msgstr "Notas de Rodapé"

#: ../../library/sqlite3.rst:937
msgid ""
"The sqlite3 module is not built with loadable extension support by default, "
"because some platforms (notably Mac OS X) have SQLite libraries which are "
"compiled without this feature. To get loadable extension support, you must "
"modify setup.py and remove the line that sets SQLITE_OMIT_LOAD_EXTENSION."
msgstr ""
