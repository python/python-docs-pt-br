# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-16 17:23+0000\n"
"PO-Revision-Date: 2025-09-16 00:01+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/threading.rst:2
msgid ":mod:`!threading` --- Thread-based parallelism"
msgstr ":mod:`!threading` --- Paralelismo baseado em threads"

#: ../../library/threading.rst:7
msgid "**Source code:** :source:`Lib/threading.py`"
msgstr "**Código-fonte:** :source:`Lib/threading.py`"

#: ../../library/threading.rst:11
msgid ""
"This module constructs higher-level threading interfaces on top of the lower "
"level :mod:`_thread` module."
msgstr ""
"Este módulo constrói interfaces de alto nível para threading usando o "
"módulo :mod:`_thread`, de mais baixo nível."

#: ../../library/threading.rst:194 ../../library/threading.rst:293
#: ../../library/threading.rst:678 ../../includes/wasm-notavail.rst:3
msgid "Availability"
msgstr "Disponibilidade"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See :ref:`wasm-"
"availability` for more information."
msgstr ""
"Este módulo não funciona ou não está disponível em WebAssembly. Veja :ref:"
"`wasm-availability` para mais informações."

#: ../../library/threading.rst:17
msgid "Introduction"
msgstr "Introdução"

#: ../../library/threading.rst:19
msgid ""
"The :mod:`!threading` module provides a way to run multiple `threads "
"<https://en.wikipedia.org/wiki/Thread_(computing)>`_ (smaller units of a "
"process) concurrently within a single process. It allows for the creation "
"and management of threads, making it possible to execute tasks in parallel, "
"sharing memory space. Threads are particularly useful when tasks are I/O "
"bound, such as file operations or making network requests, where much of the "
"time is spent waiting for external resources."
msgstr ""
"O módulo :mod:`!threading` fornece uma maneira de executar múltiplas "
"`threads <https://en.wikipedia.org/wiki/Thread_(computing)>`_ (unidades "
"menores de um processo) simultaneamente dentro de um único processo. Ele "
"permite a criação e o gerenciamento de threads, possibilitando a execução de "
"tarefas em paralelo, compartilhando espaço de memória. Threads são "
"particularmente úteis quando tarefas são limitadas por E/S, como operações "
"de arquivo ou solicitações de rede, onde grande parte do tempo é gasto "
"aguardando recursos externos."

#: ../../library/threading.rst:27
msgid ""
"A typical use case for :mod:`!threading` includes managing a pool of worker "
"threads that can process multiple tasks concurrently.  Here's a basic "
"example of creating and starting threads using :class:`~threading.Thread`::"
msgstr ""
"Um caso de uso típico para :mod:`!threading` inclui o gerenciamento de um "
"conjunto de threads de trabalho que podem processar múltiplas tarefas "
"simultaneamente. Aqui está um exemplo básico de criação e inicialização de "
"threads usando :class:`~threading.Thread`::"

#: ../../library/threading.rst:31
msgid ""
"import threading\n"
"import time\n"
"\n"
"def crawl(link, delay=3):\n"
"    print(f\"crawl started for {link}\")\n"
"    time.sleep(delay)  # Blocking I/O (simulating a network request)\n"
"    print(f\"crawl ended for {link}\")\n"
"\n"
"links = [\n"
"    \"https://python.org\",\n"
"    \"https://docs.python.org\",\n"
"    \"https://peps.python.org\",\n"
"]\n"
"\n"
"# Start threads for each link\n"
"threads = []\n"
"for link in links:\n"
"    # Using `args` to pass positional arguments and `kwargs` for keyword "
"arguments\n"
"    t = threading.Thread(target=crawl, args=(link,), kwargs={\"delay\": 2})\n"
"    threads.append(t)\n"
"\n"
"# Start each thread\n"
"for t in threads:\n"
"    t.start()\n"
"\n"
"# Wait for all threads to finish\n"
"for t in threads:\n"
"    t.join()"
msgstr ""

#: ../../library/threading.rst:60
msgid "This module used to be optional, it is now always available."
msgstr "Este módulo costumava ser opcional, agora está sempre disponível."

#: ../../library/threading.rst:65
msgid ""
":class:`concurrent.futures.ThreadPoolExecutor` offers a higher level "
"interface to push tasks to a background thread without blocking execution of "
"the calling thread, while still being able to retrieve their results when "
"needed."
msgstr ""

#: ../../library/threading.rst:69
msgid ""
":mod:`queue` provides a thread-safe interface for exchanging data between "
"running threads."
msgstr ""

#: ../../library/threading.rst:72
msgid ""
":mod:`asyncio` offers an alternative approach to achieving task level "
"concurrency without requiring the use of multiple operating system threads."
msgstr ""

#: ../../library/threading.rst:77
msgid ""
"In the Python 2.x series, this module contained ``camelCase`` names for some "
"methods and functions. These are deprecated as of Python 3.10, but they are "
"still supported for compatibility with Python 2.5 and lower."
msgstr ""

#: ../../library/threading.rst:84
msgid ""
"In CPython, due to the :term:`Global Interpreter Lock <global interpreter "
"lock>`, only one thread can execute Python code at once (even though certain "
"performance-oriented libraries might overcome this limitation). If you want "
"your application to make better use of the computational resources of multi-"
"core machines, you are advised to use :mod:`multiprocessing` or :class:"
"`concurrent.futures.ProcessPoolExecutor`. However, threading is still an "
"appropriate model if you want to run multiple I/O-bound tasks simultaneously."
msgstr ""

#: ../../library/threading.rst:95
msgid "GIL and performance considerations"
msgstr ""

#: ../../library/threading.rst:97
msgid ""
"Unlike the :mod:`multiprocessing` module, which uses separate processes to "
"bypass the :term:`global interpreter lock` (GIL), the threading module "
"operates within a single process, meaning that all threads share the same "
"memory space. However, the GIL limits the performance gains of threading "
"when it comes to CPU-bound tasks, as only one thread can execute Python "
"bytecode at a time. Despite this, threads remain a useful tool for achieving "
"concurrency in many scenarios."
msgstr ""

#: ../../library/threading.rst:105
msgid ""
"As of Python 3.13, :term:`free-threaded <free threading>` builds can disable "
"the GIL, enabling true parallel execution of threads, but this feature is "
"not available by default (see :pep:`703`)."
msgstr ""

#: ../../library/threading.rst:112
msgid "Reference"
msgstr "Referência"

#: ../../library/threading.rst:114
msgid "This module defines the following functions:"
msgstr "Este módulo define as seguintes funções:"

#: ../../library/threading.rst:119
msgid ""
"Return the number of :class:`Thread` objects currently alive.  The returned "
"count is equal to the length of the list returned by :func:`.enumerate`."
msgstr ""
"Retorna o número de objetos :class:`Thread` atualmente ativos. A quantidade "
"retornada é igual ao tamanho da lista retornada por :func:`.enumerate`."

#: ../../library/threading.rst:122
msgid "The function ``activeCount`` is a deprecated alias for this function."
msgstr ""

#: ../../library/threading.rst:127
msgid ""
"Return the current :class:`Thread` object, corresponding to the caller's "
"thread of control.  If the caller's thread of control was not created "
"through the :mod:`!threading` module, a dummy thread object with limited "
"functionality is returned."
msgstr ""

#: ../../library/threading.rst:132
msgid "The function ``currentThread`` is a deprecated alias for this function."
msgstr ""

#: ../../library/threading.rst:137
msgid "Handle uncaught exception raised by :func:`Thread.run`."
msgstr " Lidar com exceção não capturada, levantada por :func:`Thread.run`."

#: ../../library/threading.rst:139
msgid "The *args* argument has the following attributes:"
msgstr "O argumento *args* tem os seguintes atributos:"

#: ../../library/threading.rst:141
msgid "*exc_type*: Exception type."
msgstr "*exc_type*: Tipo de exceção.."

#: ../../library/threading.rst:142
msgid "*exc_value*: Exception value, can be ``None``."
msgstr "*exc_value*: Valor da exceção, pode ser ``None``."

#: ../../library/threading.rst:143
msgid "*exc_traceback*: Exception traceback, can be ``None``."
msgstr "*exc_traceback*: Pilha de execução da exceção, pode ser ``None``."

#: ../../library/threading.rst:144
msgid "*thread*: Thread which raised the exception, can be ``None``."
msgstr "*thread*: Thread que levantou a exceção, pode ser ``None``."

#: ../../library/threading.rst:146
msgid ""
"If *exc_type* is :exc:`SystemExit`, the exception is silently ignored. "
"Otherwise, the exception is printed out on :data:`sys.stderr`."
msgstr ""
"Se *exc_type* é :exc:`SystemExit`, a exceção é silenciosamente ignorada. "
"Caso contrário, a exceção é exibida em :data:`sys.stderr`."

#: ../../library/threading.rst:149
msgid ""
"If  this function raises an exception, :func:`sys.excepthook` is called to "
"handle it."
msgstr ""
"Se esta função levantar uma exceção, :func:`sys.excepthook` é chamada para "
"tratá-la."

#: ../../library/threading.rst:152
msgid ""
":func:`threading.excepthook` can be overridden to control how uncaught "
"exceptions raised by :func:`Thread.run` are handled."
msgstr ""
":func:`threading.excepthook` pode ser substituída para controlar como "
"exceções não capturadas levantadas por :func:`Thread.run` são tratadas."

#: ../../library/threading.rst:155
msgid ""
"Storing *exc_value* using a custom hook can create a reference cycle. It "
"should be cleared explicitly to break the reference cycle when the exception "
"is no longer needed."
msgstr ""

#: ../../library/threading.rst:159
msgid ""
"Storing *thread* using a custom hook can resurrect it if it is set to an "
"object which is being finalized. Avoid storing *thread* after the custom "
"hook completes to avoid resurrecting objects."
msgstr ""

#: ../../library/threading.rst:164
msgid ":func:`sys.excepthook` handles uncaught exceptions."
msgstr ":func:`sys.excepthook` trata exceções não capturadas."

#: ../../library/threading.rst:170
msgid ""
"Holds the original value of :func:`threading.excepthook`. It is saved so "
"that the original value can be restored in case they happen to get replaced "
"with broken or alternative objects."
msgstr ""

#: ../../library/threading.rst:178
msgid ""
"Return the 'thread identifier' of the current thread.  This is a nonzero "
"integer.  Its value has no direct meaning; it is intended as a magic cookie "
"to be used e.g. to index a dictionary of thread-specific data.  Thread "
"identifiers may be recycled when a thread exits and another thread is "
"created."
msgstr ""
"Retorna o 'identificador de thread' do thread atual. Este é um número "
"inteiro diferente de zero. Seu valor não tem significado direto; pretende-se "
"que seja um cookie mágico para ser usado, por exemplo, para indexar um "
"dicionário de dados específicos do thread. identificadores de thread podem "
"ser reciclados quando um thread sai e outro é criado."

#: ../../library/threading.rst:189
msgid ""
"Return the native integral Thread ID of the current thread assigned by the "
"kernel. This is a non-negative integer. Its value may be used to uniquely "
"identify this particular thread system-wide (until the thread terminates, "
"after which the value may be recycled by the OS)."
msgstr ""
"Retorna a ID de thread integral nativa da thread atual atribuída pelo "
"kernel. Este é um número inteiro não negativo. Seu valor pode ser usado para "
"identificar exclusivamente essa thread específica em todo o sistema (até que "
"a thread termine, após o que o valor poderá ser reciclado pelo sistema "
"operacional)."

#: ../../library/threading.rst:198
msgid "Added support for GNU/kFreeBSD."
msgstr "Adicionado suporte a GNU/kFreeBSD."

#: ../../library/threading.rst:204
msgid ""
"Return a list of all :class:`Thread` objects currently active.  The list "
"includes daemonic threads and dummy thread objects created by :func:"
"`current_thread`.  It excludes terminated threads and threads that have not "
"yet been started.  However, the main thread is always part of the result, "
"even when terminated."
msgstr ""

#: ../../library/threading.rst:213
msgid ""
"Return the main :class:`Thread` object.  In normal conditions, the main "
"thread is the thread from which the Python interpreter was started."
msgstr ""

#: ../../library/threading.rst:224
msgid ""
"Set a trace function for all threads started from the :mod:`!threading` "
"module. The *func* will be passed to  :func:`sys.settrace` for each thread, "
"before its :meth:`~Thread.run` method is called."
msgstr ""

#: ../../library/threading.rst:230
msgid ""
"Set a trace function for all threads started from the :mod:`!threading` "
"module and all Python threads that are currently executing."
msgstr ""

#: ../../library/threading.rst:233
msgid ""
"The *func* will be passed to  :func:`sys.settrace` for each thread, before "
"its :meth:`~Thread.run` method is called."
msgstr ""

#: ../../library/threading.rst:244
msgid "Get the trace function as set by :func:`settrace`."
msgstr "Obtém a função trace conforme definido por :func:`settrace`."

#: ../../library/threading.rst:253
msgid ""
"Set a profile function for all threads started from the :mod:`!threading` "
"module. The *func* will be passed to  :func:`sys.setprofile` for each "
"thread, before its :meth:`~Thread.run` method is called."
msgstr ""

#: ../../library/threading.rst:259
msgid ""
"Set a profile function for all threads started from the :mod:`!threading` "
"module and all Python threads that are currently executing."
msgstr ""

#: ../../library/threading.rst:262
msgid ""
"The *func* will be passed to  :func:`sys.setprofile` for each thread, before "
"its :meth:`~Thread.run` method is called."
msgstr ""

#: ../../library/threading.rst:271
msgid "Get the profiler function as set by :func:`setprofile`."
msgstr ""
"Obtém a função do criador de perfil conforme definido por :func:`setprofile`."

#: ../../library/threading.rst:278
msgid ""
"Return the thread stack size used when creating new threads.  The optional "
"*size* argument specifies the stack size to be used for subsequently created "
"threads, and must be 0 (use platform or configured default) or a positive "
"integer value of at least 32,768 (32 KiB). If *size* is not specified, 0 is "
"used.  If changing the thread stack size is unsupported, a :exc:"
"`RuntimeError` is raised.  If the specified stack size is invalid, a :exc:"
"`ValueError` is raised and the stack size is unmodified.  32 KiB is "
"currently the minimum supported stack size value to guarantee sufficient "
"stack space for the interpreter itself.  Note that some platforms may have "
"particular restrictions on values for the stack size, such as requiring a "
"minimum stack size > 32 KiB or requiring allocation in multiples of the "
"system memory page size - platform documentation should be referred to for "
"more information (4 KiB pages are common; using multiples of 4096 for the "
"stack size is the suggested approach in the absence of more specific "
"information)."
msgstr ""
"Retorna o tamanho da pilha de threads usado ao criar novos threads. O "
"argumento opcional *size* especifica o tamanho da pilha a ser usado para "
"threads criados posteriormente e deve ser 0 (usar plataforma ou padrão "
"configurado) ou um valor inteiro positivo de pelo menos 32.768 (32 KiB). Se "
"*size* não for especificado, 0 será usado. Se a alteração do tamanho da "
"pilha de threads não for suportada, uma :exc:`RuntimeError` será levantada. "
"Se o tamanho da pilha especificado for inválido, uma :exc:`ValueError` será "
"levantada e o tamanho da pilha não será modificado. Atualmente, 0 KiB é o "
"valor mínimo de tamanho de pilha suportado para garantir espaço suficiente "
"para o próprio interpretador. Observe que algumas plataformas podem ter "
"restrições específicas sobre valores para o tamanho da pilha, como exigir um "
"tamanho mínimo de pilha > 32 KiB ou exigir alocação em múltiplos do tamanho "
"da página de memória do sistema -- a documentação da plataforma deve ser "
"consultada para obter mais informações (4 páginas KiB são comuns; usar "
"múltiplos de 4096 para o tamanho da pilha é a abordagem sugerida na ausência "
"de informações mais específicas)."

#: ../../library/threading.rst:295
msgid "Unix platforms with POSIX threads support."
msgstr "Plataformas Unix com suporte a threads POSIX."

#: ../../library/threading.rst:298
msgid "This module also defines the following constant:"
msgstr ""

#: ../../library/threading.rst:302
msgid ""
"The maximum value allowed for the *timeout* parameter of blocking functions "
"(:meth:`Lock.acquire`, :meth:`RLock.acquire`, :meth:`Condition.wait`, etc.). "
"Specifying a timeout greater than this value will raise an :exc:"
"`OverflowError`."
msgstr ""

#: ../../library/threading.rst:310
msgid ""
"This module defines a number of classes, which are detailed in the sections "
"below."
msgstr ""

#: ../../library/threading.rst:313
msgid ""
"The design of this module is loosely based on Java's threading model. "
"However, where Java makes locks and condition variables basic behavior of "
"every object, they are separate objects in Python.  Python's :class:`Thread` "
"class supports a subset of the behavior of Java's Thread class; currently, "
"there are no priorities, no thread groups, and threads cannot be destroyed, "
"stopped, suspended, resumed, or interrupted.  The static methods of Java's "
"Thread class, when implemented, are mapped to module-level functions."
msgstr ""

#: ../../library/threading.rst:321
msgid "All of the methods described below are executed atomically."
msgstr ""

#: ../../library/threading.rst:325
msgid "Thread-local data"
msgstr ""

#: ../../library/threading.rst:327
msgid ""
"Thread-local data is data whose values are thread specific. If you have data "
"that you want to be local to a thread, create a :class:`local` object and "
"use its attributes::"
msgstr ""

#: ../../library/threading.rst:331
msgid ""
">>> mydata = local()\n"
">>> mydata.number = 42\n"
">>> mydata.number\n"
"42"
msgstr ""

#: ../../library/threading.rst:336
msgid "You can also access the :class:`local`-object's dictionary::"
msgstr ""

#: ../../library/threading.rst:338
msgid ""
">>> mydata.__dict__\n"
"{'number': 42}\n"
">>> mydata.__dict__.setdefault('widgets', [])\n"
"[]\n"
">>> mydata.widgets\n"
"[]"
msgstr ""

#: ../../library/threading.rst:345
msgid "If we access the data in a different thread::"
msgstr ""

#: ../../library/threading.rst:347
msgid ""
">>> log = []\n"
">>> def f():\n"
"...     items = sorted(mydata.__dict__.items())\n"
"...     log.append(items)\n"
"...     mydata.number = 11\n"
"...     log.append(mydata.number)\n"
"\n"
">>> import threading\n"
">>> thread = threading.Thread(target=f)\n"
">>> thread.start()\n"
">>> thread.join()\n"
">>> log\n"
"[[], 11]"
msgstr ""

#: ../../library/threading.rst:361
msgid ""
"we get different data.  Furthermore, changes made in the other thread don't "
"affect data seen in this thread::"
msgstr ""

#: ../../library/threading.rst:364
msgid ""
">>> mydata.number\n"
"42"
msgstr ""

#: ../../library/threading.rst:367
msgid ""
"Of course, values you get from a :class:`local` object, including their :"
"attr:`~object.__dict__` attribute, are for whatever thread was current at "
"the time the attribute was read.  For that reason, you generally don't want "
"to save these values across threads, as they apply only to the thread they "
"came from."
msgstr ""

#: ../../library/threading.rst:373
msgid ""
"You can create custom :class:`local` objects by subclassing the :class:"
"`local` class::"
msgstr ""

#: ../../library/threading.rst:376
msgid ""
">>> class MyLocal(local):\n"
"...     number = 2\n"
"...     def __init__(self, /, **kw):\n"
"...         self.__dict__.update(kw)\n"
"...     def squared(self):\n"
"...         return self.number ** 2"
msgstr ""

#: ../../library/threading.rst:383
msgid ""
"This can be useful to support default values, methods and initialization.  "
"Note that if you define an :py:meth:`~object.__init__` method, it will be "
"called each time the :class:`local` object is used in a separate thread.  "
"This is necessary to initialize each thread's dictionary."
msgstr ""

#: ../../library/threading.rst:389
msgid "Now if we create a :class:`local` object::"
msgstr ""

#: ../../library/threading.rst:391
msgid ">>> mydata = MyLocal(color='red')"
msgstr ""

#: ../../library/threading.rst:393
msgid "we have a default number::"
msgstr ""

#: ../../library/threading.rst:395
msgid ""
">>> mydata.number\n"
"2"
msgstr ""

#: ../../library/threading.rst:398
msgid "an initial color::"
msgstr ""

#: ../../library/threading.rst:400
msgid ""
">>> mydata.color\n"
"'red'\n"
">>> del mydata.color"
msgstr ""

#: ../../library/threading.rst:404
msgid "And a method that operates on the data::"
msgstr ""

#: ../../library/threading.rst:406
msgid ""
">>> mydata.squared()\n"
"4"
msgstr ""

#: ../../library/threading.rst:409
msgid "As before, we can access the data in a separate thread::"
msgstr ""

#: ../../library/threading.rst:411
msgid ""
">>> log = []\n"
">>> thread = threading.Thread(target=f)\n"
">>> thread.start()\n"
">>> thread.join()\n"
">>> log\n"
"[[('color', 'red')], 11]"
msgstr ""

#: ../../library/threading.rst:418
msgid "without affecting this thread's data::"
msgstr ""

#: ../../library/threading.rst:420
msgid ""
">>> mydata.number\n"
"2\n"
">>> mydata.color\n"
"Traceback (most recent call last):\n"
"...\n"
"AttributeError: 'MyLocal' object has no attribute 'color'"
msgstr ""

#: ../../library/threading.rst:427
msgid ""
"Note that subclasses can define :term:`__slots__`, but they are not thread "
"local. They are shared across threads::"
msgstr ""

#: ../../library/threading.rst:430
msgid ""
">>> class MyLocal(local):\n"
"...     __slots__ = 'number'\n"
"\n"
">>> mydata = MyLocal()\n"
">>> mydata.number = 42\n"
">>> mydata.color = 'red'"
msgstr ""

#: ../../library/threading.rst:437
msgid "So, the separate thread::"
msgstr ""

#: ../../library/threading.rst:439
msgid ""
">>> thread = threading.Thread(target=f)\n"
">>> thread.start()\n"
">>> thread.join()"
msgstr ""

#: ../../library/threading.rst:443
msgid "affects what we see::"
msgstr ""

#: ../../library/threading.rst:445
msgid ""
">>> mydata.number\n"
"11"
msgstr ""

#: ../../library/threading.rst:451
msgid "A class that represents thread-local data."
msgstr ""

#: ../../library/threading.rst:457
msgid "Thread objects"
msgstr ""

#: ../../library/threading.rst:459
msgid ""
"The :class:`Thread` class represents an activity that is run in a separate "
"thread of control.  There are two ways to specify the activity: by passing a "
"callable object to the constructor, or by overriding the :meth:`~Thread.run` "
"method in a subclass.  No other methods (except for the constructor) should "
"be overridden in a subclass.  In other words, *only*  override the "
"``__init__()`` and :meth:`~Thread.run` methods of this class."
msgstr ""

#: ../../library/threading.rst:466
msgid ""
"Once a thread object is created, its activity must be started by calling the "
"thread's :meth:`~Thread.start` method.  This invokes the :meth:`~Thread.run` "
"method in a separate thread of control."
msgstr ""

#: ../../library/threading.rst:470
msgid ""
"Once the thread's activity is started, the thread is considered 'alive'. It "
"stops being alive when its :meth:`~Thread.run` method terminates -- either "
"normally, or by raising an unhandled exception.  The :meth:`~Thread."
"is_alive` method tests whether the thread is alive."
msgstr ""

#: ../../library/threading.rst:475
msgid ""
"Other threads can call a thread's :meth:`~Thread.join` method.  This blocks "
"the calling thread until the thread whose :meth:`~Thread.join` method is "
"called is terminated."
msgstr ""

#: ../../library/threading.rst:479
msgid ""
"A thread has a name.  The name can be passed to the constructor, and read or "
"changed through the :attr:`~Thread.name` attribute."
msgstr ""

#: ../../library/threading.rst:482
msgid ""
"If the :meth:`~Thread.run` method raises an exception, :func:`threading."
"excepthook` is called to handle it. By default, :func:`threading.excepthook` "
"ignores silently :exc:`SystemExit`."
msgstr ""

#: ../../library/threading.rst:486
msgid ""
"A thread can be flagged as a \"daemon thread\".  The significance of this "
"flag is that the entire Python program exits when only daemon threads are "
"left.  The initial value is inherited from the creating thread.  The flag "
"can be set through the :attr:`~Thread.daemon` property or the *daemon* "
"constructor argument."
msgstr ""

#: ../../library/threading.rst:493
msgid ""
"Daemon threads are abruptly stopped at shutdown.  Their resources (such as "
"open files, database transactions, etc.) may not be released properly. If "
"you want your threads to stop gracefully, make them non-daemonic and use a "
"suitable signalling mechanism such as an :class:`Event`."
msgstr ""

#: ../../library/threading.rst:498
msgid ""
"There is a \"main thread\" object; this corresponds to the initial thread of "
"control in the Python program.  It is not a daemon thread."
msgstr ""

#: ../../library/threading.rst:501
msgid ""
"There is the possibility that \"dummy thread objects\" are created. These "
"are thread objects corresponding to \"alien threads\", which are threads of "
"control started outside the threading module, such as directly from C code.  "
"Dummy thread objects have limited functionality; they are always considered "
"alive and daemonic, and cannot be :ref:`joined <meth-thread-join>`.  They "
"are never deleted, since it is impossible to detect the termination of alien "
"threads."
msgstr ""

#: ../../library/threading.rst:512
msgid ""
"This constructor should always be called with keyword arguments.  Arguments "
"are:"
msgstr ""

#: ../../library/threading.rst:515
msgid ""
"*group* should be ``None``; reserved for future extension when a :class:`!"
"ThreadGroup` class is implemented."
msgstr ""

#: ../../library/threading.rst:518
msgid ""
"*target* is the callable object to be invoked by the :meth:`run` method. "
"Defaults to ``None``, meaning nothing is called."
msgstr ""

#: ../../library/threading.rst:521
msgid ""
"*name* is the thread name. By default, a unique name is constructed of the "
"form \"Thread-*N*\" where *N* is a small decimal number, or \"Thread-*N* "
"(target)\" where \"target\" is ``target.__name__`` if the *target* argument "
"is specified."
msgstr ""

#: ../../library/threading.rst:526
msgid ""
"*args* is a list or tuple of arguments for the target invocation.  Defaults "
"to ``()``."
msgstr ""

#: ../../library/threading.rst:528
msgid ""
"*kwargs* is a dictionary of keyword arguments for the target invocation. "
"Defaults to ``{}``."
msgstr ""

#: ../../library/threading.rst:531
msgid ""
"If not ``None``, *daemon* explicitly sets whether the thread is daemonic. If "
"``None`` (the default), the daemonic property is inherited from the current "
"thread."
msgstr ""

#: ../../library/threading.rst:535
msgid ""
"*context* is the :class:`~contextvars.Context` value to use when starting "
"the thread.  The default value is ``None`` which indicates that the :data:"
"`sys.flags.thread_inherit_context` flag controls the behaviour.  If the flag "
"is true, threads will start with a copy of the context of the caller of :"
"meth:`~Thread.start`.  If false, they will start with an empty context.  To "
"explicitly start with an empty context, pass a new instance of :class:"
"`~contextvars.Context()`.  To explicitly start with a copy of the current "
"context, pass the value from :func:`~contextvars.copy_context`. The flag "
"defaults true on free-threaded builds and false otherwise."
msgstr ""

#: ../../library/threading.rst:545
msgid ""
"If the subclass overrides the constructor, it must make sure to invoke the "
"base class constructor (``Thread.__init__()``) before doing anything else to "
"the thread."
msgstr ""

#: ../../library/threading.rst:549
msgid "Added the *daemon* parameter."
msgstr "Adicionado o parâmetro *daemon*."

#: ../../library/threading.rst:552
msgid "Use the *target* name if *name* argument is omitted."
msgstr ""

#: ../../library/threading.rst:555
msgid "Added the *context* parameter."
msgstr "Adicionado o parâmetro *context*."

#: ../../library/threading.rst:560
msgid "Start the thread's activity."
msgstr ""

#: ../../library/threading.rst:562
msgid ""
"It must be called at most once per thread object.  It arranges for the "
"object's :meth:`~Thread.run` method to be invoked in a separate thread of "
"control."
msgstr ""

#: ../../library/threading.rst:566
msgid ""
"This method will raise a :exc:`RuntimeError` if called more than once on the "
"same thread object."
msgstr ""

#: ../../library/threading.rst:569
msgid ""
"If supported, set the operating system thread name to :attr:`threading."
"Thread.name`. The name can be truncated depending on the operating system "
"thread name limits."
msgstr ""

#: ../../library/threading.rst:573
msgid "Set the operating system thread name."
msgstr ""

#: ../../library/threading.rst:578
msgid "Method representing the thread's activity."
msgstr ""

#: ../../library/threading.rst:580
msgid ""
"You may override this method in a subclass.  The standard :meth:`run` method "
"invokes the callable object passed to the object's constructor as the "
"*target* argument, if any, with positional and keyword arguments taken from "
"the *args* and *kwargs* arguments, respectively."
msgstr ""

#: ../../library/threading.rst:585
msgid ""
"Using list or tuple as the *args* argument which passed to the :class:"
"`Thread` could achieve the same effect."
msgstr ""

#: ../../library/threading.rst:588
msgid "Example::"
msgstr "Exemplo::"

#: ../../library/threading.rst:590
msgid ""
">>> from threading import Thread\n"
">>> t = Thread(target=print, args=[1])\n"
">>> t.run()\n"
"1\n"
">>> t = Thread(target=print, args=(1,))\n"
">>> t.run()\n"
"1"
msgstr ""

#: ../../library/threading.rst:602
msgid ""
"Wait until the thread terminates. This blocks the calling thread until the "
"thread whose :meth:`~Thread.join` method is called terminates -- either "
"normally or through an unhandled exception -- or until the optional timeout "
"occurs."
msgstr ""

#: ../../library/threading.rst:607
msgid ""
"When the *timeout* argument is present and not ``None``, it should be a "
"floating-point number specifying a timeout for the operation in seconds (or "
"fractions thereof). As :meth:`~Thread.join` always returns ``None``, you "
"must call :meth:`~Thread.is_alive` after :meth:`~Thread.join` to decide "
"whether a timeout happened -- if the thread is still alive, the :meth:"
"`~Thread.join` call timed out."
msgstr ""

#: ../../library/threading.rst:614
msgid ""
"When the *timeout* argument is not present or ``None``, the operation will "
"block until the thread terminates."
msgstr ""

#: ../../library/threading.rst:617
msgid "A thread can be joined many times."
msgstr ""

#: ../../library/threading.rst:619
msgid ""
":meth:`~Thread.join` raises a :exc:`RuntimeError` if an attempt is made to "
"join the current thread as that would cause a deadlock. It is also an error "
"to :meth:`~Thread.join` a thread before it has been started and attempts to "
"do so raise the same exception."
msgstr ""

#: ../../library/threading.rst:624
msgid ""
"If an attempt is made to join a running daemonic thread in late stages of :"
"term:`Python finalization <interpreter shutdown>` :meth:`!join` raises a :"
"exc:`PythonFinalizationError`."
msgstr ""

#: ../../library/threading.rst:630
msgid "May raise :exc:`PythonFinalizationError`."
msgstr ""

#: ../../library/threading.rst:634
msgid ""
"A string used for identification purposes only. It has no semantics. "
"Multiple threads may be given the same name.  The initial name is set by the "
"constructor."
msgstr ""

#: ../../library/threading.rst:638
msgid ""
"On some platforms, the thread name is set at the operating system level when "
"the thread starts, so that it is visible in task managers. This name may be "
"truncated to fit in a system-specific limit (for example, 15 bytes on Linux "
"or 63 bytes on macOS)."
msgstr ""

#: ../../library/threading.rst:643
msgid ""
"Changes to *name* are only reflected at the OS level when the currently "
"running thread is renamed. (Setting the *name* attribute of a different "
"thread only updates the Python Thread object.)"
msgstr ""

#: ../../library/threading.rst:650
msgid ""
"Deprecated getter/setter API for :attr:`~Thread.name`; use it directly as a "
"property instead."
msgstr ""

#: ../../library/threading.rst:657
msgid ""
"The 'thread identifier' of this thread or ``None`` if the thread has not "
"been started.  This is a nonzero integer.  See the :func:`get_ident` "
"function.  Thread identifiers may be recycled when a thread exits and "
"another thread is created.  The identifier is available even after the "
"thread has exited."
msgstr ""

#: ../../library/threading.rst:665
msgid ""
"The Thread ID (``TID``) of this thread, as assigned by the OS (kernel). This "
"is a non-negative integer, or ``None`` if the thread has not been started. "
"See the :func:`get_native_id` function. This value may be used to uniquely "
"identify this particular thread system-wide (until the thread terminates, "
"after which the value may be recycled by the OS)."
msgstr ""

#: ../../library/threading.rst:674
msgid ""
"Similar to Process IDs, Thread IDs are only valid (guaranteed unique system-"
"wide) from the time the thread is created until the thread has been "
"terminated."
msgstr ""

#: ../../library/threading.rst:684
msgid "Return whether the thread is alive."
msgstr ""

#: ../../library/threading.rst:686
msgid ""
"This method returns ``True`` just before the :meth:`~Thread.run` method "
"starts until just after the :meth:`~Thread.run` method terminates.  The "
"module function :func:`.enumerate` returns a list of all alive threads."
msgstr ""

#: ../../library/threading.rst:692
msgid ""
"A boolean value indicating whether this thread is a daemon thread (``True``) "
"or not (``False``).  This must be set before :meth:`~Thread.start` is "
"called, otherwise :exc:`RuntimeError` is raised.  Its initial value is "
"inherited from the creating thread; the main thread is not a daemon thread "
"and therefore all threads created in the main thread default to :attr:"
"`~Thread.daemon` = ``False``."
msgstr ""

#: ../../library/threading.rst:699
msgid ""
"The entire Python program exits when no alive non-daemon threads are left."
msgstr ""

#: ../../library/threading.rst:704
msgid ""
"Deprecated getter/setter API for :attr:`~Thread.daemon`; use it directly as "
"a property instead."
msgstr ""

#: ../../library/threading.rst:713
msgid "Lock objects"
msgstr ""

#: ../../library/threading.rst:715
msgid ""
"A primitive lock is a synchronization primitive that is not owned by a "
"particular thread when locked.  In Python, it is currently the lowest level "
"synchronization primitive available, implemented directly by the :mod:"
"`_thread` extension module."
msgstr ""

#: ../../library/threading.rst:720
msgid ""
"A primitive lock is in one of two states, \"locked\" or \"unlocked\". It is "
"created in the unlocked state.  It has two basic methods, :meth:`~Lock."
"acquire` and :meth:`~Lock.release`.  When the state is unlocked, :meth:"
"`~Lock.acquire` changes the state to locked and returns immediately.  When "
"the state is locked, :meth:`~Lock.acquire` blocks until a call to :meth:"
"`~Lock.release` in another thread changes it to unlocked, then the :meth:"
"`~Lock.acquire` call resets it to locked and returns.  The :meth:`~Lock."
"release` method should only be called in the locked state; it changes the "
"state to unlocked and returns immediately. If an attempt is made to release "
"an unlocked lock, a :exc:`RuntimeError` will be raised."
msgstr ""

#: ../../library/threading.rst:731
msgid "Locks also support the :ref:`context management protocol <with-locks>`."
msgstr ""

#: ../../library/threading.rst:733
msgid ""
"When more than one thread is blocked in :meth:`~Lock.acquire` waiting for "
"the state to turn to unlocked, only one thread proceeds when a :meth:`~Lock."
"release` call resets the state to unlocked; which one of the waiting threads "
"proceeds is not defined, and may vary across implementations."
msgstr ""

#: ../../library/threading.rst:738
msgid "All methods are executed atomically."
msgstr ""

#: ../../library/threading.rst:743
msgid ""
"The class implementing primitive lock objects.  Once a thread has acquired a "
"lock, subsequent attempts to acquire it block, until it is released; any "
"thread may release it."
msgstr ""

#: ../../library/threading.rst:747
msgid ""
"``Lock`` is now a class. In earlier Pythons, ``Lock`` was a factory function "
"which returned an instance of the underlying private lock type."
msgstr ""

#: ../../library/threading.rst:755 ../../library/threading.rst:849
msgid "Acquire a lock, blocking or non-blocking."
msgstr "Adquire uma trava, bloqueante ou não."

#: ../../library/threading.rst:757
msgid ""
"When invoked with the *blocking* argument set to ``True`` (the default), "
"block until the lock is unlocked, then set it to locked and return ``True``."
msgstr ""

#: ../../library/threading.rst:760
msgid ""
"When invoked with the *blocking* argument set to ``False``, do not block. If "
"a call with *blocking* set to ``True`` would block, return ``False`` "
"immediately; otherwise, set the lock to locked and return ``True``."
msgstr ""

#: ../../library/threading.rst:764
msgid ""
"When invoked with the floating-point *timeout* argument set to a positive "
"value, block for at most the number of seconds specified by *timeout* and as "
"long as the lock cannot be acquired.  A *timeout* argument of ``-1`` "
"specifies an unbounded wait.  It is forbidden to specify a *timeout* when "
"*blocking* is ``False``."
msgstr ""

#: ../../library/threading.rst:770
msgid ""
"The return value is ``True`` if the lock is acquired successfully, ``False`` "
"if not (for example if the *timeout* expired)."
msgstr ""

#: ../../library/threading.rst:773 ../../library/threading.rst:887
#: ../../library/threading.rst:1147
msgid "The *timeout* parameter is new."
msgstr "O parâmetro *timeout* é novo."

#: ../../library/threading.rst:776
msgid ""
"Lock acquisition can now be interrupted by signals on POSIX if the "
"underlying threading implementation supports it."
msgstr ""

#: ../../library/threading.rst:780
msgid "Lock acquisition can now be interrupted by signals on Windows."
msgstr ""

#: ../../library/threading.rst:786
msgid ""
"Release a lock.  This can be called from any thread, not only the thread "
"which has acquired the lock."
msgstr ""

#: ../../library/threading.rst:789
msgid ""
"When the lock is locked, reset it to unlocked, and return.  If any other "
"threads are blocked waiting for the lock to become unlocked, allow exactly "
"one of them to proceed."
msgstr ""

#: ../../library/threading.rst:793
msgid "When invoked on an unlocked lock, a :exc:`RuntimeError` is raised."
msgstr ""

#: ../../library/threading.rst:795 ../../library/threading.rst:903
msgid "There is no return value."
msgstr ""

#: ../../library/threading.rst:799
msgid "Return ``True`` if the lock is acquired."
msgstr ""

#: ../../library/threading.rst:806
msgid "RLock objects"
msgstr ""

#: ../../library/threading.rst:808
msgid ""
"A reentrant lock is a synchronization primitive that may be acquired "
"multiple times by the same thread.  Internally, it uses the concepts of "
"\"owning thread\" and \"recursion level\" in addition to the locked/unlocked "
"state used by primitive locks.  In the locked state, some thread owns the "
"lock; in the unlocked state, no thread owns it."
msgstr ""

#: ../../library/threading.rst:814
msgid ""
"Threads call a lock's :meth:`~RLock.acquire` method to lock it, and its :"
"meth:`~Lock.release` method to unlock it."
msgstr ""

#: ../../library/threading.rst:819
msgid ""
"Reentrant locks support the :ref:`context management protocol <with-locks>`, "
"so it is recommended to use :keyword:`with` instead of manually calling :"
"meth:`~RLock.acquire` and :meth:`~RLock.release` to handle acquiring and "
"releasing the lock for a block of code."
msgstr ""

#: ../../library/threading.rst:824
msgid ""
"RLock's :meth:`~RLock.acquire`/:meth:`~RLock.release` call pairs may be "
"nested, unlike Lock's :meth:`~Lock.acquire`/:meth:`~Lock.release`. Only the "
"final :meth:`~RLock.release` (the :meth:`~Lock.release` of the outermost "
"pair) resets the lock to an unlocked state and allows another thread blocked "
"in :meth:`~RLock.acquire` to proceed."
msgstr ""

#: ../../library/threading.rst:830
msgid ""
":meth:`~RLock.acquire`/:meth:`~RLock.release` must be used in pairs: each "
"acquire must have a release in the thread that has acquired the lock. "
"Failing to call release as many times the lock has been acquired can lead to "
"deadlock."
msgstr ""

#: ../../library/threading.rst:837
msgid ""
"This class implements reentrant lock objects.  A reentrant lock must be "
"released by the thread that acquired it.  Once a thread has acquired a "
"reentrant lock, the same thread may acquire it again without blocking; the "
"thread must release it once for each time it has acquired it."
msgstr ""

#: ../../library/threading.rst:842
msgid ""
"Note that ``RLock`` is actually a factory function which returns an instance "
"of the most efficient version of the concrete RLock class that is supported "
"by the platform."
msgstr ""

#: ../../library/threading.rst:853
msgid ":ref:`Using RLock as a context manager <with-locks>`"
msgstr ""

#: ../../library/threading.rst:854
msgid ""
"Recommended over manual :meth:`!acquire` and :meth:`release` calls whenever "
"practical."
msgstr ""

#: ../../library/threading.rst:858
msgid ""
"When invoked with the *blocking* argument set to ``True`` (the default):"
msgstr ""

#: ../../library/threading.rst:860 ../../library/threading.rst:872
msgid "If no thread owns the lock, acquire the lock and return immediately."
msgstr ""

#: ../../library/threading.rst:862
msgid ""
"If another thread owns the lock, block until we are able to acquire lock, or "
"*timeout*, if set to a positive float value."
msgstr ""

#: ../../library/threading.rst:865
msgid ""
"If the same thread owns the lock, acquire the lock again, and return "
"immediately. This is the difference between :class:`Lock` and :class:`!"
"RLock`; :class:`Lock` handles this case the same as the previous, blocking "
"until the lock can be acquired."
msgstr ""

#: ../../library/threading.rst:870
msgid "When invoked with the *blocking* argument set to ``False``:"
msgstr ""

#: ../../library/threading.rst:874
msgid "If another thread owns the lock, return immediately."
msgstr ""

#: ../../library/threading.rst:876
msgid ""
"If the same thread owns the lock, acquire the lock again and return "
"immediately."
msgstr ""

#: ../../library/threading.rst:879
msgid ""
"In all cases, if the thread was able to acquire the lock, return ``True``. "
"If the thread was unable to acquire the lock (i.e. if not blocking or the "
"timeout was reached) return ``False``."
msgstr ""

#: ../../library/threading.rst:883
msgid ""
"If called multiple times, failing to call :meth:`~RLock.release` as many "
"times may lead to deadlock. Consider using :class:`!RLock` as a context "
"manager rather than calling acquire/release directly."
msgstr ""

#: ../../library/threading.rst:893
msgid ""
"Release a lock, decrementing the recursion level.  If after the decrement it "
"is zero, reset the lock to unlocked (not owned by any thread), and if any "
"other threads are blocked waiting for the lock to become unlocked, allow "
"exactly one of them to proceed.  If after the decrement the recursion level "
"is still nonzero, the lock remains locked and owned by the calling thread."
msgstr ""

#: ../../library/threading.rst:899
msgid ""
"Only call this method when the calling thread owns the lock. A :exc:"
"`RuntimeError` is raised if this method is called when the lock is not "
"acquired."
msgstr ""

#: ../../library/threading.rst:908 ../../library/threading.rst:1007
msgid "Return a boolean indicating whether this object is locked right now."
msgstr ""

#: ../../library/threading.rst:916
msgid "Condition objects"
msgstr ""

#: ../../library/threading.rst:918
msgid ""
"A condition variable is always associated with some kind of lock; this can "
"be passed in or one will be created by default.  Passing one in is useful "
"when several condition variables must share the same lock.  The lock is part "
"of the condition object: you don't have to track it separately."
msgstr ""

#: ../../library/threading.rst:923
msgid ""
"A condition variable obeys the :ref:`context management protocol <with-"
"locks>`: using the ``with`` statement acquires the associated lock for the "
"duration of the enclosed block.  The :meth:`~Condition.acquire` and :meth:"
"`~Condition.release` methods also call the corresponding methods of the "
"associated lock."
msgstr ""

#: ../../library/threading.rst:929
msgid ""
"Other methods must be called with the associated lock held.  The :meth:"
"`~Condition.wait` method releases the lock, and then blocks until another "
"thread awakens it by calling :meth:`~Condition.notify` or :meth:`~Condition."
"notify_all`.  Once awakened, :meth:`~Condition.wait` re-acquires the lock "
"and returns.  It is also possible to specify a timeout."
msgstr ""

#: ../../library/threading.rst:935
msgid ""
"The :meth:`~Condition.notify` method wakes up one of the threads waiting for "
"the condition variable, if any are waiting.  The :meth:`~Condition."
"notify_all` method wakes up all threads waiting for the condition variable."
msgstr ""

#: ../../library/threading.rst:939
msgid ""
"Note: the :meth:`~Condition.notify` and :meth:`~Condition.notify_all` "
"methods don't release the lock; this means that the thread or threads "
"awakened will not return from their :meth:`~Condition.wait` call "
"immediately, but only when the thread that called :meth:`~Condition.notify` "
"or :meth:`~Condition.notify_all` finally relinquishes ownership of the lock."
msgstr ""

#: ../../library/threading.rst:945
msgid ""
"The typical programming style using condition variables uses the lock to "
"synchronize access to some shared state; threads that are interested in a "
"particular change of state call :meth:`~Condition.wait` repeatedly until "
"they see the desired state, while threads that modify the state call :meth:"
"`~Condition.notify` or :meth:`~Condition.notify_all` when they change the "
"state in such a way that it could possibly be a desired state for one of the "
"waiters.  For example, the following code is a generic producer-consumer "
"situation with unlimited buffer capacity::"
msgstr ""

#: ../../library/threading.rst:954
msgid ""
"# Consume one item\n"
"with cv:\n"
"    while not an_item_is_available():\n"
"        cv.wait()\n"
"    get_an_available_item()\n"
"\n"
"# Produce one item\n"
"with cv:\n"
"    make_an_item_available()\n"
"    cv.notify()"
msgstr ""

#: ../../library/threading.rst:965
msgid ""
"The ``while`` loop checking for the application's condition is necessary "
"because :meth:`~Condition.wait` can return after an arbitrary long time, and "
"the condition which prompted the :meth:`~Condition.notify` call may no "
"longer hold true.  This is inherent to multi-threaded programming.  The :"
"meth:`~Condition.wait_for` method can be used to automate the condition "
"checking, and eases the computation of timeouts::"
msgstr ""

#: ../../library/threading.rst:972
msgid ""
"# Consume an item\n"
"with cv:\n"
"    cv.wait_for(an_item_is_available)\n"
"    get_an_available_item()"
msgstr ""

#: ../../library/threading.rst:977
msgid ""
"To choose between :meth:`~Condition.notify` and :meth:`~Condition."
"notify_all`, consider whether one state change can be interesting for only "
"one or several waiting threads.  E.g. in a typical producer-consumer "
"situation, adding one item to the buffer only needs to wake up one consumer "
"thread."
msgstr ""

#: ../../library/threading.rst:985
msgid ""
"This class implements condition variable objects.  A condition variable "
"allows one or more threads to wait until they are notified by another thread."
msgstr ""

#: ../../library/threading.rst:988
msgid ""
"If the *lock* argument is given and not ``None``, it must be a :class:`Lock` "
"or :class:`RLock` object, and it is used as the underlying lock.  Otherwise, "
"a new :class:`RLock` object is created and used as the underlying lock."
msgstr ""

#: ../../library/threading.rst:992 ../../library/threading.rst:1122
#: ../../library/threading.rst:1168 ../../library/threading.rst:1220
#: ../../library/threading.rst:1288
msgid "changed from a factory function to a class."
msgstr ""

#: ../../library/threading.rst:997
msgid ""
"Acquire the underlying lock. This method calls the corresponding method on "
"the underlying lock; the return value is whatever that method returns."
msgstr ""

#: ../../library/threading.rst:1002
msgid ""
"Release the underlying lock. This method calls the corresponding method on "
"the underlying lock; there is no return value."
msgstr ""

#: ../../library/threading.rst:1013
msgid ""
"Wait until notified or until a timeout occurs. If the calling thread has not "
"acquired the lock when this method is called, a :exc:`RuntimeError` is "
"raised."
msgstr ""

#: ../../library/threading.rst:1017
msgid ""
"This method releases the underlying lock, and then blocks until it is "
"awakened by a :meth:`notify` or :meth:`notify_all` call for the same "
"condition variable in another thread, or until the optional timeout occurs.  "
"Once awakened or timed out, it re-acquires the lock and returns."
msgstr ""

#: ../../library/threading.rst:1022
msgid ""
"When the *timeout* argument is present and not ``None``, it should be a "
"floating-point number specifying a timeout for the operation in seconds (or "
"fractions thereof)."
msgstr ""

#: ../../library/threading.rst:1026
msgid ""
"When the underlying lock is an :class:`RLock`, it is not released using its :"
"meth:`release` method, since this may not actually unlock the lock when it "
"was acquired multiple times recursively.  Instead, an internal interface of "
"the :class:`RLock` class is used, which really unlocks it even when it has "
"been recursively acquired several times. Another internal interface is then "
"used to restore the recursion level when the lock is reacquired."
msgstr ""

#: ../../library/threading.rst:1034
msgid ""
"The return value is ``True`` unless a given *timeout* expired, in which case "
"it is ``False``."
msgstr ""

#: ../../library/threading.rst:1037 ../../library/threading.rst:1253
msgid "Previously, the method always returned ``None``."
msgstr ""

#: ../../library/threading.rst:1042
msgid ""
"Wait until a condition evaluates to true.  *predicate* should be a callable "
"which result will be interpreted as a boolean value. A *timeout* may be "
"provided giving the maximum time to wait."
msgstr ""

#: ../../library/threading.rst:1046
msgid ""
"This utility method may call :meth:`wait` repeatedly until the predicate is "
"satisfied, or until a timeout occurs. The return value is the last return "
"value of the predicate and will evaluate to ``False`` if the method timed "
"out."
msgstr ""

#: ../../library/threading.rst:1051
msgid ""
"Ignoring the timeout feature, calling this method is roughly equivalent to "
"writing::"
msgstr ""

#: ../../library/threading.rst:1054
msgid ""
"while not predicate():\n"
"    cv.wait()"
msgstr ""

#: ../../library/threading.rst:1057
msgid ""
"Therefore, the same rules apply as with :meth:`wait`: The lock must be held "
"when called and is re-acquired on return.  The predicate is evaluated with "
"the lock held."
msgstr ""

#: ../../library/threading.rst:1065
msgid ""
"By default, wake up one thread waiting on this condition, if any.  If the "
"calling thread has not acquired the lock when this method is called, a :exc:"
"`RuntimeError` is raised."
msgstr ""

#: ../../library/threading.rst:1069
msgid ""
"This method wakes up at most *n* of the threads waiting for the condition "
"variable; it is a no-op if no threads are waiting."
msgstr ""

#: ../../library/threading.rst:1072
msgid ""
"The current implementation wakes up exactly *n* threads, if at least *n* "
"threads are waiting.  However, it's not safe to rely on this behavior. A "
"future, optimized implementation may occasionally wake up more than *n* "
"threads."
msgstr ""

#: ../../library/threading.rst:1077
msgid ""
"Note: an awakened thread does not actually return from its :meth:`wait` call "
"until it can reacquire the lock.  Since :meth:`notify` does not release the "
"lock, its caller should."
msgstr ""

#: ../../library/threading.rst:1083
msgid ""
"Wake up all threads waiting on this condition.  This method acts like :meth:"
"`notify`, but wakes up all waiting threads instead of one. If the calling "
"thread has not acquired the lock when this method is called, a :exc:"
"`RuntimeError` is raised."
msgstr ""

#: ../../library/threading.rst:1088
msgid "The method ``notifyAll`` is a deprecated alias for this method."
msgstr ""

#: ../../library/threading.rst:1094
msgid "Semaphore objects"
msgstr ""

#: ../../library/threading.rst:1096
msgid ""
"This is one of the oldest synchronization primitives in the history of "
"computer science, invented by the early Dutch computer scientist Edsger W. "
"Dijkstra (he used the names ``P()`` and ``V()`` instead of :meth:`~Semaphore."
"acquire` and :meth:`~Semaphore.release`)."
msgstr ""

#: ../../library/threading.rst:1101
msgid ""
"A semaphore manages an internal counter which is decremented by each :meth:"
"`~Semaphore.acquire` call and incremented by each :meth:`~Semaphore.release` "
"call.  The counter can never go below zero; when :meth:`~Semaphore.acquire` "
"finds that it is zero, it blocks, waiting until some other thread calls :"
"meth:`~Semaphore.release`."
msgstr ""

#: ../../library/threading.rst:1107
msgid ""
"Semaphores also support the :ref:`context management protocol <with-locks>`."
msgstr ""

#: ../../library/threading.rst:1112
msgid ""
"This class implements semaphore objects.  A semaphore manages an atomic "
"counter representing the number of :meth:`release` calls minus the number "
"of :meth:`acquire` calls, plus an initial value.  The :meth:`acquire` method "
"blocks if necessary until it can return without making the counter negative. "
"If not given, *value* defaults to 1."
msgstr ""

#: ../../library/threading.rst:1118
msgid ""
"The optional argument gives the initial *value* for the internal counter; it "
"defaults to ``1``. If the *value* given is less than 0, :exc:`ValueError` is "
"raised."
msgstr ""

#: ../../library/threading.rst:1127
msgid "Acquire a semaphore."
msgstr ""

#: ../../library/threading.rst:1129
msgid "When invoked without arguments:"
msgstr ""

#: ../../library/threading.rst:1131
msgid ""
"If the internal counter is larger than zero on entry, decrement it by one "
"and return ``True`` immediately."
msgstr ""

#: ../../library/threading.rst:1133
msgid ""
"If the internal counter is zero on entry, block until awoken by a call to :"
"meth:`~Semaphore.release`.  Once awoken (and the counter is greater than 0), "
"decrement the counter by 1 and return ``True``.  Exactly one thread will be "
"awoken by each call to :meth:`~Semaphore.release`.  The order in which "
"threads are awoken should not be relied on."
msgstr ""

#: ../../library/threading.rst:1139
msgid ""
"When invoked with *blocking* set to ``False``, do not block.  If a call "
"without an argument would block, return ``False`` immediately; otherwise, do "
"the same thing as when called without arguments, and return ``True``."
msgstr ""

#: ../../library/threading.rst:1143
msgid ""
"When invoked with a *timeout* other than ``None``, it will block for at most "
"*timeout* seconds.  If acquire does not complete successfully in that "
"interval, return ``False``.  Return ``True`` otherwise."
msgstr ""

#: ../../library/threading.rst:1152
msgid ""
"Release a semaphore, incrementing the internal counter by *n*.  When it was "
"zero on entry and other threads are waiting for it to become larger than "
"zero again, wake up *n* of those threads."
msgstr ""

#: ../../library/threading.rst:1156
msgid "Added the *n* parameter to release multiple waiting threads at once."
msgstr ""

#: ../../library/threading.rst:1162
msgid ""
"Class implementing bounded semaphore objects.  A bounded semaphore checks to "
"make sure its current value doesn't exceed its initial value.  If it does, :"
"exc:`ValueError` is raised. In most situations semaphores are used to guard "
"resources with limited capacity.  If the semaphore is released too many "
"times it's a sign of a bug.  If not given, *value* defaults to 1."
msgstr ""

#: ../../library/threading.rst:1175
msgid ":class:`Semaphore` example"
msgstr ""

#: ../../library/threading.rst:1177
msgid ""
"Semaphores are often used to guard resources with limited capacity, for "
"example, a database server.  In any situation where the size of the resource "
"is fixed, you should use a bounded semaphore.  Before spawning any worker "
"threads, your main thread would initialize the semaphore::"
msgstr ""

#: ../../library/threading.rst:1182
msgid ""
"maxconnections = 5\n"
"# ...\n"
"pool_sema = BoundedSemaphore(value=maxconnections)"
msgstr ""

#: ../../library/threading.rst:1186
msgid ""
"Once spawned, worker threads call the semaphore's acquire and release "
"methods when they need to connect to the server::"
msgstr ""

#: ../../library/threading.rst:1189
msgid ""
"with pool_sema:\n"
"    conn = connectdb()\n"
"    try:\n"
"        # ... use connection ...\n"
"    finally:\n"
"        conn.close()"
msgstr ""

#: ../../library/threading.rst:1196
msgid ""
"The use of a bounded semaphore reduces the chance that a programming error "
"which causes the semaphore to be released more than it's acquired will go "
"undetected."
msgstr ""

#: ../../library/threading.rst:1203
msgid "Event objects"
msgstr ""

#: ../../library/threading.rst:1205
msgid ""
"This is one of the simplest mechanisms for communication between threads: "
"one thread signals an event and other threads wait for it."
msgstr ""

#: ../../library/threading.rst:1208
msgid ""
"An event object manages an internal flag that can be set to true with the :"
"meth:`~Event.set` method and reset to false with the :meth:`~Event.clear` "
"method.  The :meth:`~Event.wait` method blocks until the flag is true."
msgstr ""

#: ../../library/threading.rst:1215
msgid ""
"Class implementing event objects.  An event manages a flag that can be set "
"to true with the :meth:`~Event.set` method and reset to false with the :meth:"
"`clear` method.  The :meth:`wait` method blocks until the flag is true. The "
"flag is initially false."
msgstr ""

#: ../../library/threading.rst:1225
msgid "Return ``True`` if and only if the internal flag is true."
msgstr ""

#: ../../library/threading.rst:1227
msgid "The method ``isSet`` is a deprecated alias for this method."
msgstr ""

#: ../../library/threading.rst:1231
msgid ""
"Set the internal flag to true. All threads waiting for it to become true are "
"awakened. Threads that call :meth:`wait` once the flag is true will not "
"block at all."
msgstr ""

#: ../../library/threading.rst:1237
msgid ""
"Reset the internal flag to false. Subsequently, threads calling :meth:`wait` "
"will block until :meth:`.set` is called to set the internal flag to true "
"again."
msgstr ""

#: ../../library/threading.rst:1243
msgid ""
"Block as long as the internal flag is false and the timeout, if given, has "
"not expired. The return value represents the reason that this blocking "
"method returned; ``True`` if returning because the internal flag is set to "
"true, or ``False`` if a timeout is given and the internal flag did not "
"become true within the given wait time."
msgstr ""

#: ../../library/threading.rst:1249
msgid ""
"When the timeout argument is present and not ``None``, it should be a "
"floating-point number specifying a timeout for the operation in seconds, or "
"fractions thereof."
msgstr ""

#: ../../library/threading.rst:1260
msgid "Timer objects"
msgstr ""

#: ../../library/threading.rst:1262
msgid ""
"This class represents an action that should be run only after a certain "
"amount of time has passed --- a timer.  :class:`Timer` is a subclass of :"
"class:`Thread` and as such also functions as an example of creating custom "
"threads."
msgstr ""

#: ../../library/threading.rst:1266
msgid ""
"Timers are started, as with threads, by calling their :meth:`Timer.start "
"<Thread.start>` method.  The timer can be stopped (before its action has "
"begun) by calling the :meth:`~Timer.cancel` method.  The interval the timer "
"will wait before executing its action may not be exactly the same as the "
"interval specified by the user."
msgstr ""

#: ../../library/threading.rst:1272
msgid "For example::"
msgstr "Por exemplo::"

#: ../../library/threading.rst:1274
msgid ""
"def hello():\n"
"    print(\"hello, world\")\n"
"\n"
"t = Timer(30.0, hello)\n"
"t.start()  # after 30 seconds, \"hello, world\" will be printed"
msgstr ""

#: ../../library/threading.rst:1283
msgid ""
"Create a timer that will run *function* with arguments *args* and  keyword "
"arguments *kwargs*, after *interval* seconds have passed. If *args* is "
"``None`` (the default) then an empty list will be used. If *kwargs* is "
"``None`` (the default) then an empty dict will be used."
msgstr ""

#: ../../library/threading.rst:1293
msgid ""
"Stop the timer, and cancel the execution of the timer's action.  This will "
"only work if the timer is still in its waiting stage."
msgstr ""

#: ../../library/threading.rst:1298
msgid "Barrier objects"
msgstr ""

#: ../../library/threading.rst:1302
msgid ""
"This class provides a simple synchronization primitive for use by a fixed "
"number of threads that need to wait for each other.  Each of the threads "
"tries to pass the barrier by calling the :meth:`~Barrier.wait` method and "
"will block until all of the threads have made their :meth:`~Barrier.wait` "
"calls. At this point, the threads are released simultaneously."
msgstr ""

#: ../../library/threading.rst:1308
msgid ""
"The barrier can be reused any number of times for the same number of threads."
msgstr ""

#: ../../library/threading.rst:1310
msgid ""
"As an example, here is a simple way to synchronize a client and server "
"thread::"
msgstr ""

#: ../../library/threading.rst:1312
msgid ""
"b = Barrier(2, timeout=5)\n"
"\n"
"def server():\n"
"    start_server()\n"
"    b.wait()\n"
"    while True:\n"
"        connection = accept_connection()\n"
"        process_server_connection(connection)\n"
"\n"
"def client():\n"
"    b.wait()\n"
"    while True:\n"
"        connection = make_connection()\n"
"        process_client_connection(connection)"
msgstr ""

#: ../../library/threading.rst:1330
msgid ""
"Create a barrier object for *parties* number of threads.  An *action*, when "
"provided, is a callable to be called by one of the threads when they are "
"released.  *timeout* is the default timeout value if none is specified for "
"the :meth:`wait` method."
msgstr ""

#: ../../library/threading.rst:1337
msgid ""
"Pass the barrier.  When all the threads party to the barrier have called "
"this function, they are all released simultaneously.  If a *timeout* is "
"provided, it is used in preference to any that was supplied to the class "
"constructor."
msgstr ""

#: ../../library/threading.rst:1342
msgid ""
"The return value is an integer in the range 0 to *parties* -- 1, different "
"for each thread.  This can be used to select a thread to do some special "
"housekeeping, e.g.::"
msgstr ""

#: ../../library/threading.rst:1346
msgid ""
"i = barrier.wait()\n"
"if i == 0:\n"
"    # Only one thread needs to print this\n"
"    print(\"passed the barrier\")"
msgstr ""

#: ../../library/threading.rst:1351
msgid ""
"If an *action* was provided to the constructor, one of the threads will have "
"called it prior to being released.  Should this call raise an error, the "
"barrier is put into the broken state."
msgstr ""

#: ../../library/threading.rst:1355
msgid "If the call times out, the barrier is put into the broken state."
msgstr ""

#: ../../library/threading.rst:1357
msgid ""
"This method may raise a :class:`BrokenBarrierError` exception if the barrier "
"is broken or reset while a thread is waiting."
msgstr ""

#: ../../library/threading.rst:1362
msgid ""
"Return the barrier to the default, empty state.  Any threads waiting on it "
"will receive the :class:`BrokenBarrierError` exception."
msgstr ""

#: ../../library/threading.rst:1365
msgid ""
"Note that using this function may require some external synchronization if "
"there are other threads whose state is unknown.  If a barrier is broken it "
"may be better to just leave it and create a new one."
msgstr ""

#: ../../library/threading.rst:1371
msgid ""
"Put the barrier into a broken state.  This causes any active or future calls "
"to :meth:`wait` to fail with the :class:`BrokenBarrierError`.  Use this for "
"example if one of the threads needs to abort, to avoid deadlocking the "
"application."
msgstr ""

#: ../../library/threading.rst:1376
msgid ""
"It may be preferable to simply create the barrier with a sensible *timeout* "
"value to automatically guard against one of the threads going awry."
msgstr ""

#: ../../library/threading.rst:1382
msgid "The number of threads required to pass the barrier."
msgstr ""

#: ../../library/threading.rst:1386
msgid "The number of threads currently waiting in the barrier."
msgstr ""

#: ../../library/threading.rst:1390
msgid "A boolean that is ``True`` if the barrier is in the broken state."
msgstr ""

#: ../../library/threading.rst:1395
msgid ""
"This exception, a subclass of :exc:`RuntimeError`, is raised when the :class:"
"`Barrier` object is reset or broken."
msgstr ""

#: ../../library/threading.rst:1402
msgid ""
"Using locks, conditions, and semaphores in the :keyword:`!with` statement"
msgstr ""

#: ../../library/threading.rst:1404
msgid ""
"All of the objects provided by this module that have ``acquire`` and "
"``release`` methods can be used as context managers for a :keyword:`with` "
"statement.  The ``acquire`` method will be called when the block is entered, "
"and ``release`` will be called when the block is exited.  Hence, the "
"following snippet::"
msgstr ""

#: ../../library/threading.rst:1410
msgid ""
"with some_lock:\n"
"    # do something..."
msgstr ""

#: ../../library/threading.rst:1413
msgid "is equivalent to::"
msgstr "é equivalente a::"

#: ../../library/threading.rst:1415
msgid ""
"some_lock.acquire()\n"
"try:\n"
"    # do something...\n"
"finally:\n"
"    some_lock.release()"
msgstr ""

#: ../../library/threading.rst:1421
msgid ""
"Currently, :class:`Lock`, :class:`RLock`, :class:`Condition`, :class:"
"`Semaphore`, and :class:`BoundedSemaphore` objects may be used as :keyword:"
"`with` statement context managers."
msgstr ""

#: ../../library/threading.rst:222 ../../library/threading.rst:240
msgid "trace function"
msgstr "função de rastreamento"

#: ../../library/threading.rst:240
msgid "debugger"
msgstr "depurador"

#: ../../library/threading.rst:251 ../../library/threading.rst:269
msgid "profile function"
msgstr "função de perfilação"
