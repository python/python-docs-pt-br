# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-13 17:35+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/runpy.rst:2
msgid ":mod:`runpy` --- Locating and executing Python modules"
msgstr ":mod:`runpy` --- Localizando e executando módulos Python"

#: ../../library/runpy.rst:9
msgid "**Source code:** :source:`Lib/runpy.py`"
msgstr "**Código-fonte:** :source:`Lib/runpy.py`"

#: ../../library/runpy.rst:13
msgid ""
"The :mod:`runpy` module is used to locate and run Python modules without "
"importing them first. Its main use is to implement the :option:`-m` command "
"line switch that allows scripts to be located using the Python module "
"namespace rather than the filesystem."
msgstr ""
"O módulo :mod:`runpy` é usado para localizar e executar módulos Python sem "
"importá-los primeiro. Seu principal uso é implementar a opção de linha de "
"comando :option:`-m` que permite que os scripts sejam localizados usando o "
"espaço de nomes do módulo Python em vez do sistema de arquivos."

#: ../../library/runpy.rst:18
msgid ""
"Note that this is *not* a sandbox module - all code is executed in the "
"current process, and any side effects (such as cached imports of other "
"modules) will remain in place after the functions have returned."
msgstr ""
"Observe que este *não* é um módulo isolado - todo o código é executado no "
"processo atual, e quaisquer efeitos colaterais (como importações em cache de "
"outros módulos) irão permanecer em vigor após o retorno da função."

#: ../../library/runpy.rst:22
msgid ""
"Furthermore, any functions and classes defined by the executed code are not "
"guaranteed to work correctly after a :mod:`runpy` function has returned. If "
"that limitation is not acceptable for a given use case, :mod:`importlib` is "
"likely to be a more suitable choice than this module."
msgstr ""
"Além disso, quaisquer funções e classes definidas pelo código executado não "
"têm garantia de funcionar corretamente após o retorno de uma função :mod:"
"`runpy`. Se essa limitação não for aceitável para um determinado caso de "
"uso, :mod:`importlib` provavelmente será uma escolha mais adequada do que "
"este módulo."

#: ../../library/runpy.rst:27
msgid "The :mod:`runpy` module provides two functions:"
msgstr "O módulo :mod:`runpy` fornece duas funções:"

#: ../../library/runpy.rst:35
msgid ""
"Execute the code of the specified module and return the resulting module "
"globals dictionary. The module's code is first located using the standard "
"import mechanism (refer to :pep:`302` for details) and then executed in a "
"fresh module namespace."
msgstr ""
"Execute o código do módulo especificado e retorne o dicionário global do "
"módulo resultante. O código do módulo é localizado primeiro usando o "
"mecanismo de importação padrão (consulte :pep:`302` para detalhes) e então "
"executado em um novo espaço de nomes de módulo."

#: ../../library/runpy.rst:40
msgid ""
"The *mod_name* argument should be an absolute module name. If the module "
"name refers to a package rather than a normal module, then that package is "
"imported and the ``__main__`` submodule within that package is then executed "
"and the resulting module globals dictionary returned."
msgstr ""
"O argumento *mod_name* deve ser um nome de módulo absoluto. Se o nome do "
"módulo se referir a um pacote ao invés de um módulo normal, então esse "
"pacote é importado e o submódulo ``__main__`` dentro desse pacote é então "
"executado e o dicionário global do módulo resultante retornado."

#: ../../library/runpy.rst:46
msgid ""
"The optional dictionary argument *init_globals* may be used to pre-populate "
"the module's globals dictionary before the code is executed. The supplied "
"dictionary will not be modified. If any of the special global variables "
"below are defined in the supplied dictionary, those definitions are "
"overridden by :func:`run_module`."
msgstr ""
"O argumento opcional de dicionário *init_globals* pode ser usado para "
"preencher previamente o dicionário global do módulo antes do código ser "
"executado. O dicionário fornecido não será alterado. Se qualquer uma das "
"variáveis globais especiais abaixo for definida no dicionário fornecido, "
"estas definições serão substituídas por :func:`run_module`."

#: ../../library/runpy.rst:52 ../../library/runpy.rst:121
msgid ""
"The special global variables ``__name__``, ``__spec__``, ``__file__``, "
"``__cached__``, ``__loader__`` and ``__package__`` are set in the globals "
"dictionary before the module code is executed (Note that this is a minimal "
"set of variables - other variables may be set implicitly as an interpreter "
"implementation detail)."
msgstr ""
"As variáveis globais especiais ``__name__``, ``__spec__``, ``__file__``, "
"``__cached__``, ``__loader__`` e ``__package__`` são definidas no dicionário "
"global antes que o código do módulo seja executado (Observe que este é um "
"conjunto mínimo de variáveis - outras variáveis podem ser definidas "
"implicitamente como um detalhe de implementação do interpretador)."

#: ../../library/runpy.rst:58
msgid ""
"``__name__`` is set to *run_name* if this optional argument is not :const:"
"`None`, to ``mod_name + '.__main__'`` if the named module is a package and "
"to the *mod_name* argument otherwise."
msgstr ""
"``__name__`` é definido como *run_name* se este argumento opcional não for :"
"const:`None`, para ``mod_name + '.__main__'`` se o módulo nomeado for um "
"pacote e para o argumento *mod_name* caso contrário ."

#: ../../library/runpy.rst:62
msgid ""
"``__spec__`` will be set appropriately for the *actually* imported module "
"(that is, ``__spec__.name`` will always be *mod_name* or ``mod_name + '."
"__main__``, never *run_name*)."
msgstr ""
"``__spec__`` será definido adequadamente para o modo *efetivamente* "
"importado (isto é, ``__spec__.name`` vai sempre ser *mod_name* ou ``mod_name "
"+ '.__main__``, nunca *run_name*)."

#: ../../library/runpy.rst:66
msgid ""
"``__file__``, ``__cached__``, ``__loader__`` and ``__package__`` are :ref:"
"`set as normal <import-mod-attrs>` based on the module spec."
msgstr ""
"``__file__``, ``__cached__``, ``__loader__`` e ``__package__`` são :ref:"
"`definidos como normal <import-mod-attrs>` com base no spec de módulo."

#: ../../library/runpy.rst:69
msgid ""
"If the argument *alter_sys* is supplied and evaluates to :const:`True`, then "
"``sys.argv[0]`` is updated with the value of ``__file__`` and ``sys."
"modules[__name__]`` is updated with a temporary module object for the module "
"being executed. Both ``sys.argv[0]`` and ``sys.modules[__name__]`` are "
"restored to their original values before the function returns."
msgstr ""
"Se o argumento *alter_sys* for fornecido e for avaliado como :const:`True`, "
"então ``sys.argv[0]`` será atualizado com o valor de ``__file__`` e ``sys."
"modules[__name__]`` é atualizado com um objeto de módulo temporário para o "
"módulo que está sendo executado. Ambos ``sys.argv[0]`` e ``sys."
"modules[__name__]`` são restaurados para seus valores originais antes que a "
"função retorne."

#: ../../library/runpy.rst:75
msgid ""
"Note that this manipulation of :mod:`sys` is not thread-safe. Other threads "
"may see the partially initialised module, as well as the altered list of "
"arguments. It is recommended that the :mod:`sys` module be left alone when "
"invoking this function from threaded code."
msgstr ""
"Note que esta manipulação de :mod:`sys` não é segura para thread. Outras "
"threads podem ver o módulo parcialmente inicializado, bem como a lista "
"alterada de argumentos. É recomendado que o módulo :mod:`sys` seja deixado "
"sozinho ao invocar esta função a partir do código encadeado."

#: ../../library/runpy.rst:81
msgid ""
"The :option:`-m` option offering equivalent functionality from the command "
"line."
msgstr ""
"A opção :option:`-m` oferece funcionalidade equivalente na linha de comando."

#: ../../library/runpy.rst:84
msgid ""
"Added ability to execute packages by looking for a ``__main__`` submodule."
msgstr ""
"Adicionada capacidade de executar pacotes procurando por um sub-módulo "
"``__main__``."

#: ../../library/runpy.rst:87
msgid "Added ``__cached__`` global variable (see :pep:`3147`)."
msgstr "Adicionada a variável global ``__cached__`` (veja :pep:`3147`)."

#: ../../library/runpy.rst:90
msgid ""
"Updated to take advantage of the module spec feature added by :pep:`451`. "
"This allows ``__cached__`` to be set correctly for modules run this way, as "
"well as ensuring the real module name is always accessible as ``__spec__."
"name``."
msgstr ""
"Atualizado para aproveitar o recurso de spec de módulo adicionado por :pep:"
"`451`. Isso permite que ``__cached__`` seja configurado corretamente para "
"módulos executados desta forma, assim como garante que o nome real do módulo "
"esteja sempre acessível como ``__spec__.name``."

#: ../../library/runpy.rst:101
msgid ""
"Execute the code at the named filesystem location and return the resulting "
"module globals dictionary. As with a script name supplied to the CPython "
"command line, the supplied path may refer to a Python source file, a "
"compiled bytecode file or a valid sys.path entry containing a ``__main__`` "
"module (e.g. a zipfile containing a top-level ``__main__.py`` file)."
msgstr ""
"Executa o código no local do sistema de arquivos nomeado e retorna o "
"dicionário global do módulo resultante. Assim como um nome de script "
"fornecido à linha de comando CPython, o caminho fornecido pode se referir a "
"um arquivo de origem Python, um arquivo de bytecode compilado ou uma entrada "
"sys.path válida contendo um módulo ``__main__`` (por exemplo, um arquivo zip "
"contendo um arquivo de topo de nível ``__main__.py``)."

#: ../../library/runpy.rst:107
msgid ""
"For a simple script, the specified code is simply executed in a fresh module "
"namespace. For a valid sys.path entry (typically a zipfile or directory), "
"the entry is first added to the beginning of ``sys.path``. The function then "
"looks for and executes a :mod:`__main__` module using the updated path. Note "
"that there is no special protection against invoking an existing :mod:"
"`__main__` entry located elsewhere on ``sys.path`` if there is no such "
"module at the specified location."
msgstr ""
"Para um script simples, o código especificado é simplesmente executado em um "
"novo espaço de nomes de módulo. Para uma entrada sys.path válida "
"(normalmente um arquivo zip ou diretório), a entrada é primeiro adicionada "
"ao início de ``sys.path``. A função então procura e executa um módulo :mod:"
"`__main__` usando o caminho atualizado. Observe que não há proteção especial "
"contra invocar uma entrada :mod:`__main__` existente localizada em outro "
"lugar em ``sys.path`` se não houver tal módulo no local especificado."

#: ../../library/runpy.rst:115
msgid ""
"The optional dictionary argument *init_globals* may be used to pre-populate "
"the module's globals dictionary before the code is executed. The supplied "
"dictionary will not be modified. If any of the special global variables "
"below are defined in the supplied dictionary, those definitions are "
"overridden by :func:`run_path`."
msgstr ""
"O argumento opcional de dicionário *init_globals* pode ser usado para "
"preencher previamente o dicionário global do módulo antes do código ser "
"executado. O dicionário fornecido não será alterado. Se qualquer uma das "
"variáveis globais especiais abaixo for definida no dicionário fornecido, "
"estas definições serão substituídas por :func:`run_path`."

#: ../../library/runpy.rst:127
msgid ""
"``__name__`` is set to *run_name* if this optional argument is not :const:"
"`None` and to ``'<run_path>'`` otherwise."
msgstr ""
"``__name__`` é definido como *run_name* se este argumento opcional não for :"
"const:`None` e como ``'<run_path>'`` caso contrário."

#: ../../library/runpy.rst:130
msgid ""
"If the supplied path directly references a script file (whether as source or "
"as precompiled byte code), then ``__file__`` will be set to the supplied "
"path, and ``__spec__``, ``__cached__``, ``__loader__`` and ``__package__`` "
"will all be set to :const:`None`."
msgstr ""
"Se o caminho fornecido referenciar diretamente um arquivo de script (seja "
"como fonte ou como bytecode pré-compilado), então ``__file__`` será definido "
"para o caminho fornecido e ``__spec__``, ``__cached__``, ``__loader__`` e "
"``__package__`` serão todos definidos como :const:`None`."

#: ../../library/runpy.rst:135
msgid ""
"If the supplied path is a reference to a valid sys.path entry, then "
"``__spec__`` will be set appropriately for the imported ``__main__`` module "
"(that is, ``__spec__.name`` will always be ``__main__``). ``__file__``, "
"``__cached__``, ``__loader__`` and ``__package__`` will be :ref:`set as "
"normal <import-mod-attrs>` based on the module spec."
msgstr ""
"Se o caminho fornecido for uma referência a uma entrada sys.path válida, "
"então ``__spec__`` será definido apropriadamente para o módulo ``__main__`` "
"importado (ou seja, ``__spec__.name`` sempre será ``__main__``). "
"``__file__``, ``__cached__``, ``__loader__`` e ``__package__`` serão :ref:"
"`definidos como normal <import-mod-attrs>` com base na especificação do "
"módulo."

#: ../../library/runpy.rst:141
msgid ""
"A number of alterations are also made to the :mod:`sys` module. Firstly, "
"``sys.path`` may be altered as described above. ``sys.argv[0]`` is updated "
"with the value of ``path_name`` and ``sys.modules[__name__]`` is updated "
"with a temporary module object for the module being executed. All "
"modifications to items in :mod:`sys` are reverted before the function "
"returns."
msgstr ""
"Várias alterações também são feitas no módulo :mod:`sys`. Primeiramente, "
"``sys.path`` pode ser alterado conforme descrito acima. ``sys.argv[0]`` é "
"atualizado com o valor de ``path_name`` e ``sys.modules[__name__]`` é "
"atualizado com um objeto de módulo temporário para o módulo que está sendo "
"executado. Todas as modificações em itens em :mod:`sys` são revertidas antes "
"que a função retorne."

#: ../../library/runpy.rst:148
msgid ""
"Note that, unlike :func:`run_module`, the alterations made to :mod:`sys` are "
"not optional in this function as these adjustments are essential to allowing "
"the execution of sys.path entries. As the thread-safety limitations still "
"apply, use of this function in threaded code should be either serialised "
"with the import lock or delegated to a separate process."
msgstr ""
"Note que, diferentemente de :func:`run_module`, as alterações feitas em :mod:"
"`sys` não são opcionais nesta função, pois esses ajustes são essenciais para "
"permitir a execução das entradas do sys.path. Como as limitações de "
"segurança de encadeamento ainda se aplicam, o uso dessa função no código "
"encadeado deve ser serializado com o bloqueio de importação ou delegado a um "
"processo separado."

#: ../../library/runpy.rst:155
msgid ""
":ref:`using-on-interface-options` for equivalent functionality on the "
"command line (``python path/to/script``)."
msgstr ""
":ref:`using-on-interface-options` para funcionalidade equivalente na linha "
"de comando (``python path/to/script``)."

#: ../../library/runpy.rst:160
msgid ""
"Updated to take advantage of the module spec feature added by :pep:`451`. "
"This allows ``__cached__`` to be set correctly in the case where "
"``__main__`` is imported from a valid sys.path entry rather than being "
"executed directly."
msgstr ""
"Atualizado para aproveitar o recurso de especificação do módulo adicionado "
"por :pep:`451`. Isso permite que ``__cached__`` seja definido corretamente "
"no caso em que ``__main__`` é importado de uma entrada sys.path válida em "
"vez de ser executado diretamente."

#: ../../library/runpy.rst:169
msgid ":pep:`338` -- Executing modules as scripts"
msgstr ":pep:`338` -- Executando módulos como scripts"

#: ../../library/runpy.rst:169 ../../library/runpy.rst:172
msgid "PEP written and implemented by Nick Coghlan."
msgstr "PEP escrita e implementada por Nick Coghlan."

#: ../../library/runpy.rst:172
msgid ":pep:`366` -- Main module explicit relative imports"
msgstr ":pep:`366` -- Importações relativas explícitas do módulo principal"

#: ../../library/runpy.rst:175
msgid ":pep:`451` -- A ModuleSpec Type for the Import System"
msgstr ":pep:`451` -- Um tipo ModuleSpec para o sistema de importação"

#: ../../library/runpy.rst:175
msgid "PEP written and implemented by Eric Snow"
msgstr "PEP escrita e implementada por Eric Snow"

#: ../../library/runpy.rst:177
msgid ":ref:`using-on-general` - CPython command line details"
msgstr ":ref:`using-on-general` - Detalhes da linha de comando do CPython"

#: ../../library/runpy.rst:179
msgid "The :func:`importlib.import_module` function"
msgstr "A função :func:`importlib.import_module`"
