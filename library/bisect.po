# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-31 17:33+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/bisect.rst:2
msgid ":mod:`bisect` --- Array bisection algorithm"
msgstr ":mod:`bisect` --- Algoritmo de bisseção de vetor"

#: ../../library/bisect.rst:10
msgid "**Source code:** :source:`Lib/bisect.py`"
msgstr "**Código-fonte:** :source:`Lib/bisect.py`"

#: ../../library/bisect.rst:14
msgid ""
"This module provides support for maintaining a list in sorted order without "
"having to sort the list after each insertion.  For long lists of items with "
"expensive comparison operations, this can be an improvement over the more "
"common approach.  The module is called :mod:`bisect` because it uses a basic "
"bisection algorithm to do its work.  The source code may be most useful as a "
"working example of the algorithm (the boundary conditions are already "
"right!)."
msgstr ""
"Este módulo fornece suporte para manter uma lista em ordem de classificação "
"sem ter que classificar a lista após cada inserção. Para longas listas de "
"itens com operações de comparação custosas, isso pode ser uma melhoria em "
"relação à abordagem mais comum. O módulo é denominado :mod:`bisect` porque "
"usa um algoritmo de bisseção básico para fazer seu trabalho. O código-fonte "
"pode ser mais útil como um exemplo funcional de algoritmo (as condições "
"fronteiriças  já estão certas!)."

#: ../../library/bisect.rst:21
msgid "The following functions are provided:"
msgstr "As seguintes funções são fornecidas:"

#: ../../library/bisect.rst:26
msgid ""
"Locate the insertion point for *x* in *a* to maintain sorted order. The "
"parameters *lo* and *hi* may be used to specify a subset of the list which "
"should be considered; by default the entire list is used.  If *x* is already "
"present in *a*, the insertion point will be before (to the left of) any "
"existing entries.  The return value is suitable for use as the first "
"parameter to ``list.insert()`` assuming that *a* is already sorted."
msgstr ""
"Localiza o ponto de inserção de *x* em *a* para manter a ordem de "
"classificação. Os parâmetros *lo* e *hi* podem ser usados para especificar "
"um subconjunto da lista que deve ser considerado; por padrão, toda a lista é "
"usada. Se *x* já estiver presente em *a*, o ponto de inserção estará antes "
"(à esquerda) de qualquer entrada existente. O valor de retorno é adequado "
"para uso como o primeiro parâmetro para ``list.insert()`` supondo que *a* já "
"esteja ordenado."

#: ../../library/bisect.rst:33
msgid ""
"The returned insertion point *i* partitions the array *a* into two halves so "
"that ``all(val < x for val in a[lo:i])`` for the left side and ``all(val >= "
"x for val in a[i:hi])`` for the right side."
msgstr ""

#: ../../library/bisect.rst:40
msgid ""
"Similar to :func:`bisect_left`, but returns an insertion point which comes "
"after (to the right of) any existing entries of *x* in *a*."
msgstr ""
"Semelhante a :func:`bisect_left`, mas retorna um ponto de inserção que vem "
"depois (à direita de) qualquer entrada existente de *x* em *a*."

#: ../../library/bisect.rst:43
msgid ""
"The returned insertion point *i* partitions the array *a* into two halves so "
"that ``all(val <= x for val in a[lo:i])`` for the left side and ``all(val > "
"x for val in a[i:hi])`` for the right side."
msgstr ""

#: ../../library/bisect.rst:49
msgid ""
"Insert *x* in *a* in sorted order.  This is equivalent to ``a.insert(bisect."
"bisect_left(a, x, lo, hi), x)`` assuming that *a* is already sorted.  Keep "
"in mind that the O(log n) search is dominated by the slow O(n) insertion "
"step."
msgstr ""

#: ../../library/bisect.rst:57
msgid ""
"Similar to :func:`insort_left`, but inserting *x* in *a* after any existing "
"entries of *x*."
msgstr ""
"Semelhante a :func:`insort_left`, mas inserindo *x* em *a* após qualquer "
"entrada existente de *x*."

#: ../../library/bisect.rst:62
msgid ""
"`SortedCollection recipe <https://code.activestate.com/recipes/577197-"
"sortedcollection/>`_ that uses bisect to build a full-featured collection "
"class with straight-forward search methods and support for a key-function.  "
"The keys are precomputed to save unnecessary calls to the key function "
"during searches."
msgstr ""

#: ../../library/bisect.rst:70
msgid "Searching Sorted Lists"
msgstr "Buscando em listas ordenadas"

#: ../../library/bisect.rst:72
msgid ""
"The above :func:`bisect` functions are useful for finding insertion points "
"but can be tricky or awkward to use for common searching tasks. The "
"following five functions show how to transform them into the standard "
"lookups for sorted lists::"
msgstr ""
"As funções :func:`bisect` acima são úteis para encontrar pontos de inserção, "
"mas podem ser complicadas ou difíceis de usar para tarefas comuns de "
"pesquisa. As cinco funções a seguir mostram como transformá-las nas "
"pesquisas padrão para listas ordenadas::"

#: ../../library/bisect.rst:114
msgid "Other Examples"
msgstr ""

#: ../../library/bisect.rst:118
msgid ""
"The :func:`bisect` function can be useful for numeric table lookups. This "
"example uses :func:`bisect` to look up a letter grade for an exam score "
"(say) based on a set of ordered numeric breakpoints: 90 and up is an 'A', 80 "
"to 89 is a 'B', and so on::"
msgstr ""
"A função :func:`bisect` pode ser útil para pesquisas em tabelas numéricas. "
"Este exemplo usa :func:`bisect` para pesquisar uma nota em letra para uma "
"pontuação de exame (digamos) com base em um conjunto de pontos de "
"interrupção numéricos ordenados: 90 e acima é um \"A\", 80 a 89 é um \"B\" e "
"por aí vai::"

#: ../../library/bisect.rst:130
msgid ""
"Unlike the :func:`sorted` function, it does not make sense for the :func:"
"`bisect` functions to have *key* or *reversed* arguments because that would "
"lead to an inefficient design (successive calls to bisect functions would "
"not \"remember\" all of the previous key lookups)."
msgstr ""

#: ../../library/bisect.rst:135
msgid ""
"Instead, it is better to search a list of precomputed keys to find the index "
"of the record in question::"
msgstr ""
