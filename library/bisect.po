# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-21 22:20+0000\n"
"PO-Revision-Date: 2023-05-24 02:13+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2023\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/bisect.rst:2
msgid ":mod:`bisect` --- Array bisection algorithm"
msgstr ":mod:`bisect` --- Algoritmo de bisseção de vetor"

#: ../../library/bisect.rst:10
msgid "**Source code:** :source:`Lib/bisect.py`"
msgstr "**Código-fonte:** :source:`Lib/bisect.py`"

#: ../../library/bisect.rst:14
msgid ""
"This module provides support for maintaining a list in sorted order without "
"having to sort the list after each insertion.  For long lists of items with "
"expensive comparison operations, this can be an improvement over the more "
"common approach.  The module is called :mod:`bisect` because it uses a basic "
"bisection algorithm to do its work.  The source code may be most useful as a "
"working example of the algorithm (the boundary conditions are already "
"right!)."
msgstr ""
"Este módulo fornece suporte para manter uma lista em ordem de classificação "
"sem ter que classificar a lista após cada inserção. Para longas listas de "
"itens com operações de comparação custosas, isso pode ser uma melhoria em "
"relação à abordagem mais comum. O módulo é denominado :mod:`bisect` porque "
"usa um algoritmo de bisseção básico para fazer seu trabalho. O código-fonte "
"pode ser mais útil como um exemplo funcional de algoritmo (as condições "
"fronteiriças  já estão certas!)."

#: ../../library/bisect.rst:23
msgid "The following functions are provided:"
msgstr "As seguintes funções são fornecidas:"

#: ../../library/bisect.rst:28
msgid ""
"Locate the insertion point for *x* in *a* to maintain sorted order. The "
"parameters *lo* and *hi* may be used to specify a subset of the list which "
"should be considered; by default the entire list is used.  If *x* is already "
"present in *a*, the insertion point will be before (to the left of) any "
"existing entries.  The return value is suitable for use as the first "
"parameter to ``list.insert()`` assuming that *a* is already sorted."
msgstr ""
"Localiza o ponto de inserção de *x* em *a* para manter a ordem de "
"classificação. Os parâmetros *lo* e *hi* podem ser usados para especificar "
"um subconjunto da lista que deve ser considerado; por padrão, toda a lista é "
"usada. Se *x* já estiver presente em *a*, o ponto de inserção estará antes "
"(à esquerda) de qualquer entrada existente. O valor de retorno é adequado "
"para uso como o primeiro parâmetro para ``list.insert()`` supondo que *a* já "
"esteja ordenado."

#: ../../library/bisect.rst:35
msgid ""
"The returned insertion point *i* partitions the array *a* into two halves so "
"that ``all(val < x for val in a[lo : i])`` for the left side and ``all(val "
">= x for val in a[i : hi])`` for the right side."
msgstr ""

#: ../../library/bisect.rst:39 ../../library/bisect.rst:60
msgid ""
"*key* specifies a :term:`key function` of one argument that is used to "
"extract a comparison key from each element in the array.  To support "
"searching complex records, the key function is not applied to the *x* value."
msgstr ""
"*key* especifica uma :term:`função chave` de um argumento que é usado para "
"extrair uma chave de comparação de cada elemento no vetor. Para oferecer "
"suporte à pesquisa de registros complexos, a função chave não é aplicada ao "
"valor *x*."

#: ../../library/bisect.rst:43 ../../library/bisect.rst:64
msgid ""
"If *key* is ``None``, the elements are compared directly with no intervening "
"function call."
msgstr ""

#: ../../library/bisect.rst:46 ../../library/bisect.rst:67
#: ../../library/bisect.rst:85 ../../library/bisect.rst:105
msgid "Added the *key* parameter."
msgstr "Adicionado o  parâmetro *key*."

#: ../../library/bisect.rst:53
msgid ""
"Similar to :py:func:`~bisect.bisect_left`, but returns an insertion point "
"which comes after (to the right of) any existing entries of *x* in *a*."
msgstr ""
"Semelhante a :py:func:`~bisect.bisect_left`, mas retorna um ponto de "
"inserção que vem depois (à direita de) qualquer entrada existente de *x* em "
"*a*."

#: ../../library/bisect.rst:56
msgid ""
"The returned insertion point *i* partitions the array *a* into two halves so "
"that ``all(val <= x for val in a[lo : i])`` for the left side and ``all(val "
"> x for val in a[i : hi])`` for the right side."
msgstr ""

#: ../../library/bisect.rst:73
msgid "Insert *x* in *a* in sorted order."
msgstr "Insere *x* em *a* na ordem de classificação."

#: ../../library/bisect.rst:75
msgid ""
"This function first runs :py:func:`~bisect.bisect_left` to locate an "
"insertion point. Next, it runs the :meth:`!insert` method on *a* to insert "
"*x* at the appropriate position to maintain sort order."
msgstr ""
"Esta função primeiro executa :py:func:`~bisect.bisect_left` para localizar "
"um ponto de inserção. Em seguida, ele executa o método :meth:`!insert` em "
"*a* para inserir *x* na posição apropriada para manter a ordem de "
"classificação."

#: ../../library/bisect.rst:79 ../../library/bisect.rst:99
msgid ""
"To support inserting records in a table, the *key* function (if any) is "
"applied to *x* for the search step but not for the insertion step."
msgstr ""
"Para oferecer suporte à inserção de registros em uma tabela, a função *key* "
"(se houver) é aplicada a *x* para a etapa de pesquisa, mas não para a etapa "
"de inserção."

#: ../../library/bisect.rst:82 ../../library/bisect.rst:102
msgid ""
"Keep in mind that the *O*\\ (log *n*) search is dominated by the slow *O*\\ "
"(*n*) insertion step."
msgstr ""
"Tenha em mente que a busca *O*\\ (log *n*) é dominada pelo etapa de inserção "
"lenta O(n)."

#: ../../library/bisect.rst:92
msgid ""
"Similar to :py:func:`~bisect.insort_left`, but inserting *x* in *a* after "
"any existing entries of *x*."
msgstr ""
"Semelhante a :py:func:`~bisect.insort_left`, mas inserindo *x* em *a* após "
"qualquer entrada existente de *x*."

#: ../../library/bisect.rst:95
msgid ""
"This function first runs :py:func:`~bisect.bisect_right` to locate an "
"insertion point. Next, it runs the :meth:`!insert` method on *a* to insert "
"*x* at the appropriate position to maintain sort order."
msgstr ""
"Esta função primeiro executa :py:func:`~bisect.bisect_right` para localizar "
"um ponto de inserção. Em seguida, ele executa o método :meth:`!insert` em "
"*a* para inserir *x* na posição apropriada para manter a ordem de "
"classificação."

#: ../../library/bisect.rst:110
msgid "Performance Notes"
msgstr "Observações sobre desempenho"

#: ../../library/bisect.rst:112
msgid ""
"When writing time sensitive code using *bisect()* and *insort()*, keep these "
"thoughts in mind:"
msgstr ""
"Ao escrever um código sensível ao tempo usando *bisect()* e *insort()*, "
"lembre-se do seguinte:"

#: ../../library/bisect.rst:115
msgid ""
"Bisection is effective for searching ranges of values. For locating specific "
"values, dictionaries are more performant."
msgstr ""
"A bisseção é eficaz para pesquisar intervalos de valores. Para localizar "
"valores específicos, os dicionários são mais eficientes."

#: ../../library/bisect.rst:118
msgid ""
"The *insort()* functions are *O*\\ (*n*) because the logarithmic search step "
"is dominated by the linear time insertion step."
msgstr ""
"As funções *insort()* são *O*\\ (*n*) porque a etapa de busca logarítmica é "
"dominada pela etapa de inserção de tempo linear."

#: ../../library/bisect.rst:121
msgid ""
"The search functions are stateless and discard key function results after "
"they are used.  Consequently, if the search functions are used in a loop, "
"the key function may be called again and again on the same array elements. "
"If the key function isn't fast, consider wrapping it with :py:func:"
"`functools.cache` to avoid duplicate computations.  Alternatively, consider "
"searching an array of precomputed keys to locate the insertion point (as "
"shown in the examples section below)."
msgstr ""
"As funções de busca são stateless e descartam os resultados da função chave "
"depois que são usadas. Consequentemente, se as funções de busca forem usadas "
"em um laço, a função chave pode ser chamada repetidamente nos mesmos "
"elementos do vetor. Se a função chave não for rápida, considere envolvê-la "
"com :py:func:`functools.cache` para evitar cálculos duplicados. Como "
"alternativa, considere pesquisar um array de chaves pré-calculadas para "
"localizar o ponto de inserção (conforme mostrado na seção de exemplos "
"abaixo)."

#: ../../library/bisect.rst:131
msgid ""
"`Sorted Collections <https://grantjenks.com/docs/sortedcollections/>`_ is a "
"high performance module that uses *bisect* to managed sorted collections of "
"data."
msgstr ""
"`Sorted Collections <https://grantjenks.com/docs/sortedcollections/>`_ é um "
"módulo de alto desempenho que usa *bisect* para gerenciar coleções de dados "
"classificadas."

#: ../../library/bisect.rst:135
msgid ""
"The `SortedCollection recipe <https://code.activestate.com/recipes/577197-"
"sortedcollection/>`_ uses bisect to build a full-featured collection class "
"with straight-forward search methods and support for a key-function.  The "
"keys are precomputed to save unnecessary calls to the key function during "
"searches."
msgstr ""
"A `receita de SortedCollection <https://code.activestate.com/recipes/577197-"
"sortedcollection/>`_ usa bisect para construir uma classe de coleção "
"completa com métodos de pesquisa diretos e suporte para uma função chave. As "
"chaves são pré-calculadas para economizar em chamadas desnecessárias para a "
"função chave durante as pesquisas."

#: ../../library/bisect.rst:143
msgid "Searching Sorted Lists"
msgstr "Buscando em listas ordenadas"

#: ../../library/bisect.rst:145
msgid ""
"The above `bisect functions`_ are useful for finding insertion points but "
"can be tricky or awkward to use for common searching tasks. The following "
"five functions show how to transform them into the standard lookups for "
"sorted lists::"
msgstr ""
"As `funções bisect`_ acima são úteis para encontrar pontos de inserção, mas "
"podem ser complicadas ou difíceis de usar para tarefas comuns de busca. As "
"cinco funções a seguir mostram como transformá-las nas buscas padrão para "
"listas ordenadas::"

#: ../../library/bisect.rst:187
msgid "Examples"
msgstr "Exemplos"

#: ../../library/bisect.rst:191
msgid ""
"The :py:func:`~bisect.bisect` function can be useful for numeric table "
"lookups. This example uses :py:func:`~bisect.bisect` to look up a letter "
"grade for an exam score (say) based on a set of ordered numeric breakpoints: "
"90 and up is an 'A', 80 to 89 is a 'B', and so on::"
msgstr ""
"A função :py:func:`~bisect.bisect` pode ser útil para pesquisas em tabelas "
"numéricas. Este exemplo usa :py:func:`~bisect.bisect` para pesquisar uma "
"nota em letra para uma pontuação de exame (digamos) com base em um conjunto "
"de pontos de interrupção numéricos ordenados: 90 e acima é um \"A\", 80 a 89 "
"é um \"B\" e por aí vai::"

#: ../../library/bisect.rst:203
msgid ""
"The :py:func:`~bisect.bisect` and :py:func:`~bisect.insort` functions also "
"work with lists of tuples.  The *key* argument can serve to extract the "
"field used for ordering records in a table::"
msgstr ""
"As funções :py:func:`~bisect.bisect` e :py:func:`~bisect.insort` também "
"funcionam com listas de tuplas. O argumento *key* pode servir para extrair o "
"campo usado para ordenar registros em uma tabela::"

#: ../../library/bisect.rst:237
msgid ""
"If the key function is expensive, it is possible to avoid repeated function "
"calls by searching a list of precomputed keys to find the index of a record::"
msgstr ""
"Se a função chave for custosa, é possível evitar chamadas de função "
"repetidas pesquisando uma lista de chaves pré-calculadas para encontrar o "
"índice de um registro::"
