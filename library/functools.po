# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2019
# Italo Penaforte <italo.penaforte@gmail.com>, 2019
# i17obot <i17obot@rougeth.com>, 2020
# Adorilson Bezerra <adorilson@gmail.com>, 2020
# Rafael Fontenelle <rffontenelle@gmail.com>, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-23 16:56+0000\n"
"PO-Revision-Date: 2019-09-01 03:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2020\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:2
msgid ""
":mod:`functools` --- Higher-order functions and operations on callable "
"objects"
msgstr ""
":mod:`functools` --- Funções e operações de ordem superior em objetos "
"chamáveis"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:13
msgid "**Source code:** :source:`Lib/functools.py`"
msgstr "** Código fonte: **: source:`Lib/functools.py`"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:17
msgid ""
"The :mod:`functools` module is for higher-order functions: functions that "
"act on or return other functions. In general, any callable object can be "
"treated as a function for the purposes of this module."
msgstr ""
"O módulo: mod: `functools` é para funções de ordem superior: funções que "
"atuam ou retornam outras funções. Em geral, qualquer objeto invocável pode "
"ser tratado como uma função para os propósitos deste módulo."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:21
msgid "The :mod:`functools` module defines the following functions:"
msgstr "O módulo: mod:`functools` define as seguintes funções:"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:25
msgid ""
"Transform an old-style comparison function to a :term:`key function`.  Used "
"with tools that accept key functions (such as :func:`sorted`, :func:`min`, :"
"func:`max`, :func:`heapq.nlargest`, :func:`heapq.nsmallest`, :func:"
"`itertools.groupby`).  This function is primarily used as a transition tool "
"for programs being converted from Python 2 which supported the use of "
"comparison functions."
msgstr ""
"Transforma uma função de comparação de estilo antigo para um: termo: `função "
"de chave '. Usado com ferramentas que aceitam funções-chave (como: func: "
"`sorted`,: func:` min`,: func: `max`,: func:` heapq.nlargest`,: func: `heapq."
"nsmallest`,: Func: `itertools.groupby`). Esta função é usada principalmente "
"como uma ferramenta de transição para programas que estão sendo convertidos "
"a partir do Python 2, que suportou o uso de funções de comparação."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:32
msgid ""
"A comparison function is any callable that accept two arguments, compares "
"them, and returns a negative number for less-than, zero for equality, or a "
"positive number for greater-than.  A key function is a callable that accepts "
"one argument and returns another value to be used as the sort key."
msgstr ""
"Uma função de comparação é qualquer chamada que aceita dois argumentos, os "
"compara e retorna um número negativo por menos de zero, igual a igualdade ou "
"um número positivo por maior que. Uma função de chave é escalável que aceita "
"um argumento e retorna outro valor para ser usado como a chave de "
"classificação."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:37
#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:231
msgid "Example::"
msgstr "Exemplo::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:41
msgid ""
"For sorting examples and a brief sorting tutorial, see :ref:`sortinghowto`."
msgstr ""
"Para selecionar exemplos e um breve tutorial de classificação, veja: ref: "
"`sortinghowto`."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:48
msgid ""
"Decorator to wrap a function with a memoizing callable that saves up to the "
"*maxsize* most recent calls.  It can save time when an expensive or I/O "
"bound function is periodically called with the same arguments."
msgstr ""
"Decorador para embrulhar uma função com memorizável é chamada e que "
"economiza até as chamadas mais recentes * maxsize *. Pode economizar tempo "
"quando uma função cara ou I/O é periodicamente chamada com os mesmos "
"argumentos."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:52
msgid ""
"Since a dictionary is used to cache results, the positional and keyword "
"arguments to the function must be hashable."
msgstr ""
"dicionárioUma vez que um dicionário é usado para armazenar resultados em "
"cache, os argumentos posicionais e de palavras-chave para a função devem ser "
"hashable."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:55
msgid ""
"Distinct argument patterns may be considered to be distinct calls with "
"separate cache entries.  For example, `f(a=1, b=2)` and `f(b=2, a=1)` differ "
"in their keyword argument order and may have two separate cache entries."
msgstr ""
"Padrões de argumento distintos podem ser considerados chamadas distintas com "
"entradas de cache separadas. Por exemplo, `f(a=1, b=2)` e `f(b=2, a=1)`  "
"diferem em sua ordem de argumento nomeado e podem ter duas entradas de cache "
"separadas."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:60
msgid ""
"If *maxsize* is set to ``None``, the LRU feature is disabled and the cache "
"can grow without bound.  The LRU feature performs best when *maxsize* is a "
"power-of-two."
msgstr ""
"Se * maxsize * estiver configurado para `` None``, o recurso LRU está "
"desabilitado e o cache pode crescer sem ligação. O recurso LRU funciona "
"melhor quando * maxsize * é um poder de dois."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:64
msgid ""
"If *typed* is set to true, function arguments of different types will be "
"cached separately.  For example, ``f(3)`` and ``f(3.0)`` will be treated as "
"distinct calls with distinct results."
msgstr ""
"Se *tipo* for definido como verdadeiro, os argumentos de função de "
"diferentes tipos serão armazenados em cache separadamente. Por exemplo, `` f "
"(3) `` e `` f (3.0) `` serão tratados como chamadas distintas com resultados "
"distintos."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:68
msgid ""
"To help measure the effectiveness of the cache and tune the *maxsize* "
"parameter, the wrapped function is instrumented with a :func:`cache_info` "
"function that returns a :term:`named tuple` showing *hits*, *misses*, "
"*maxsize* and *currsize*.  In a multi-threaded environment, the hits and "
"misses are approximate."
msgstr ""
"Para ajudar a medir a eficácia do cache e ajustar o parâmetro *maxsize*, a "
"função envolvida é instrumentada com uma função: func: `cache_info` que "
"retorna um: termo:` nomeado tuple` mostrando * hits *, * misses *, * Maxsize "
"* e * currsize *. Em um ambiente multi-threaded, os hits e erros são "
"aproximados."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:74
msgid ""
"The decorator also provides a :func:`cache_clear` function for clearing or "
"invalidating the cache."
msgstr ""
"O decorador também fornece uma função: func: `cache_clear` para limpar ou "
"invalidar o cache."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:77
msgid ""
"The original underlying function is accessible through the :attr:"
"`__wrapped__` attribute.  This is useful for introspection, for bypassing "
"the cache, or for rewrapping the function with a different cache."
msgstr ""
"A função subjacente original é acessível através do atributo: attr: "
"`__wrapped__`. Isso é útil para introspecção, para ignorar o cache, ou para "
"reinstalar a função com um cache diferente."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:81
msgid ""
"An `LRU (least recently used) cache <https://en.wikipedia.org/wiki/"
"Cache_algorithms#Examples>`_ works best when the most recent calls are the "
"best predictors of upcoming calls (for example, the most popular articles on "
"a news server tend to change each day). The cache's size limit assures that "
"the cache does not grow without bound on long-running processes such as web "
"servers."
msgstr ""
"Um cache `LRU (least recently used - em português - menos usado "
"recentemente) <https://en.wikipedia.org/wiki/Cache_algorithms#Examples>` _ "
"funciona melhor quando as chamadas mais recentes são os melhores preditores "
"de chamadas futuras (por exemplo, os artigos mais populares em um servidor "
"de notícias tendem a mudar a cada dia). O limite de tamanho do cache garante "
"que o cache não cresça sem está ligado a processos de longa duração, como "
"servidores web."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:88
msgid ""
"In general, the LRU cache should only be used when you want to reuse "
"previously computed values.  Accordingly, it doesn't make sense to cache "
"functions with side-effects, functions that need to create distinct mutable "
"objects on each call, or impure functions such as time() or random()."
msgstr ""
"Em geral, o cache LRU deve ser usado somente quando você deseja reutilizar "
"valores calculados anteriormente. Da mesma forma, não faz sentido armazenar "
"em cache funções com efeitos colaterais, funções que precisam criar objetos "
"mutáveis distintos em cada chamada ou funções impuras, como time() ou "
"random()."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:93
msgid "Example of an LRU cache for static web content::"
msgstr "Exemplo de um cache LRU para conteúdo web estático ::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:112
msgid ""
"Example of efficiently computing `Fibonacci numbers <https://en.wikipedia."
"org/wiki/Fibonacci_number>`_ using a cache to implement a `dynamic "
"programming <https://en.wikipedia.org/wiki/Dynamic_programming>`_ technique::"
msgstr ""
"Exemplo de computação eficiente dos números Fibonacci <https://en.wikipedia."
"org/wiki/Fibonacci_number> `_ usando um cache para implementar uma\" "
"programação dinâmica \"<https://en.wikipedia.org/wiki/Dynamic_programming>` "
"_ técnica::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:132
msgid "Added the *typed* option."
msgstr "Adicionado a opção * digitado *."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:137
msgid ""
"Given a class defining one or more rich comparison ordering methods, this "
"class decorator supplies the rest.  This simplifies the effort involved in "
"specifying all of the possible rich comparison operations:"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:141
msgid ""
"The class must define one of :meth:`__lt__`, :meth:`__le__`, :meth:`__gt__`, "
"or :meth:`__ge__`. In addition, the class should supply an :meth:`__eq__` "
"method."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:145
msgid "For example::"
msgstr "Por exemplo::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:165
msgid ""
"While this decorator makes it easy to create well behaved totally ordered "
"types, it *does* come at the cost of slower execution and more complex stack "
"traces for the derived comparison methods. If performance benchmarking "
"indicates this is a bottleneck for a given application, implementing all six "
"rich comparison methods instead is likely to provide an easy speed boost."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:174
msgid ""
"Returning NotImplemented from the underlying comparison function for "
"unrecognised types is now supported."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:180
msgid ""
"Return a new :ref:`partial object<partial-objects>` which when called will "
"behave like *func* called with the positional arguments *args* and keyword "
"arguments *keywords*. If more arguments are supplied to the call, they are "
"appended to *args*. If additional keyword arguments are supplied, they "
"extend and override *keywords*. Roughly equivalent to::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:197
msgid ""
"The :func:`partial` is used for partial function application which "
"\"freezes\" some portion of a function's arguments and/or keywords resulting "
"in a new object with a simplified signature.  For example, :func:`partial` "
"can be used to create a callable that behaves like the :func:`int` function "
"where the *base* argument defaults to two:"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:212
msgid ""
"Return a new :class:`partialmethod` descriptor which behaves like :class:"
"`partial` except that it is designed to be used as a method definition "
"rather than being directly callable."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:216
msgid ""
"*func* must be a :term:`descriptor` or a callable (objects which are both, "
"like normal functions, are handled as descriptors)."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:219
msgid ""
"When *func* is a descriptor (such as a normal Python function, :func:"
"`classmethod`, :func:`staticmethod`, :func:`abstractmethod` or another "
"instance of :class:`partialmethod`), calls to ``__get__`` are delegated to "
"the underlying descriptor, and an appropriate :ref:`partial object<partial-"
"objects>` returned as the result."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:225
msgid ""
"When *func* is a non-descriptor callable, an appropriate bound method is "
"created dynamically. This behaves like a normal Python function when used as "
"a method: the *self* argument will be inserted as the first positional "
"argument, even before the *args* and *keywords* supplied to the :class:"
"`partialmethod` constructor."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:256
msgid ""
"Apply *function* of two arguments cumulatively to the items of *sequence*, "
"from left to right, so as to reduce the sequence to a single value.  For "
"example, ``reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])`` calculates "
"``((((1+2)+3)+4)+5)``. The left argument, *x*, is the accumulated value and "
"the right argument, *y*, is the update value from the *sequence*.  If the "
"optional *initializer* is present, it is placed before the items of the "
"sequence in the calculation, and serves as a default when the sequence is "
"empty.  If *initializer* is not given and *sequence* contains only one item, "
"the first item is returned."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:265
msgid "Roughly equivalent to::"
msgstr "Aproximadamente equivalente a::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:280
msgid ""
"Transform a function into a :term:`single-dispatch <single dispatch>` :term:"
"`generic function`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:283
msgid ""
"To define a generic function, decorate it with the ``@singledispatch`` "
"decorator. Note that the dispatch happens on the type of the first argument, "
"create your function accordingly::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:294
msgid ""
"To add overloaded implementations to the function, use the :func:`register` "
"attribute of the generic function.  It is a decorator.  For functions "
"annotated with types, the decorator will infer the type of the first "
"argument automatically::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:312
msgid ""
"For code which doesn't use type annotations, the appropriate type argument "
"can be passed explicitly to the decorator itself::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:323
msgid ""
"To enable registering lambdas and pre-existing functions, the :func:"
"`register` attribute can be used in a functional form::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:331
msgid ""
"The :func:`register` attribute returns the undecorated function which "
"enables decorator stacking, pickling, as well as creating unit tests for "
"each variant independently::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:345
msgid ""
"When called, the generic function dispatches on the type of the first "
"argument::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:365
msgid ""
"Where there is no registered implementation for a specific type, its method "
"resolution order is used to find a more generic implementation. The original "
"function decorated with ``@singledispatch`` is registered for the base "
"``object`` type, which means it is used if no better implementation is found."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:371
msgid ""
"To check which implementation will the generic function choose for a given "
"type, use the ``dispatch()`` attribute::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:379
msgid ""
"To access all registered implementations, use the read-only ``registry`` "
"attribute::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:393
msgid "The :func:`register` attribute supports using type annotations."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:399
msgid ""
"Update a *wrapper* function to look like the *wrapped* function. The "
"optional arguments are tuples to specify which attributes of the original "
"function are assigned directly to the matching attributes on the wrapper "
"function and which attributes of the wrapper function are updated with the "
"corresponding attributes from the original function. The default values for "
"these arguments are the module level constants ``WRAPPER_ASSIGNMENTS`` "
"(which assigns to the wrapper function's ``__module__``, ``__name__``, "
"``__qualname__``, ``__annotations__`` and ``__doc__``, the documentation "
"string) and ``WRAPPER_UPDATES`` (which updates the wrapper function's "
"``__dict__``, i.e. the instance dictionary)."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:409
msgid ""
"To allow access to the original function for introspection and other "
"purposes (e.g. bypassing a caching decorator such as :func:`lru_cache`), "
"this function automatically adds a ``__wrapped__`` attribute to the wrapper "
"that refers to the function being wrapped."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:414
msgid ""
"The main intended use for this function is in :term:`decorator` functions "
"which wrap the decorated function and return the wrapper. If the wrapper "
"function is not updated, the metadata of the returned function will reflect "
"the wrapper definition rather than the original function definition, which "
"is typically less than helpful."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:420
msgid ""
":func:`update_wrapper` may be used with callables other than functions. Any "
"attributes named in *assigned* or *updated* that are missing from the object "
"being wrapped are ignored (i.e. this function will not attempt to set them "
"on the wrapper function). :exc:`AttributeError` is still raised if the "
"wrapper function itself is missing any attributes named in *updated*."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:426
msgid "Automatic addition of the ``__wrapped__`` attribute."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:429
msgid "Copying of the ``__annotations__`` attribute by default."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:432
msgid "Missing attributes no longer trigger an :exc:`AttributeError`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:435
msgid ""
"The ``__wrapped__`` attribute now always refers to the wrapped function, "
"even if that function defined a ``__wrapped__`` attribute. (see :issue:"
"`17482`)"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:443
msgid ""
"This is a convenience function for invoking :func:`update_wrapper` as a "
"function decorator when defining a wrapper function.  It is equivalent to "
"``partial(update_wrapper, wrapped=wrapped, assigned=assigned, "
"updated=updated)``. For example::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:469
msgid ""
"Without the use of this decorator factory, the name of the example function "
"would have been ``'wrapper'``, and the docstring of the original :func:"
"`example` would have been lost."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:477
msgid ":class:`partial` Objects"
msgstr "Objetos :class:`partial`"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:479
msgid ""
":class:`partial` objects are callable objects created by :func:`partial`. "
"They have three read-only attributes:"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:485
msgid ""
"A callable object or function.  Calls to the :class:`partial` object will be "
"forwarded to :attr:`func` with new arguments and keywords."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:491
msgid ""
"The leftmost positional arguments that will be prepended to the positional "
"arguments provided to a :class:`partial` object call."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:497
msgid ""
"The keyword arguments that will be supplied when the :class:`partial` object "
"is called."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/functools.rst:500
msgid ""
":class:`partial` objects are like :class:`function` objects in that they are "
"callable, weak referencable, and can have attributes.  There are some "
"important differences.  For instance, the :attr:`~definition.__name__` and :"
"attr:`__doc__` attributes are not created automatically.  Also, :class:"
"`partial` objects defined in classes behave like static methods and do not "
"transform into bound methods during instance attribute look-up."
msgstr ""
