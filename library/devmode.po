# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# a76d6fb6142d7607ab0526dcbddb02d7_7bf0da0 <3b5fb0f281c8dfb4c0170f2ee2a6cfcf_843623>, 2021
# Rafael Fontenelle <rffontenelle@gmail.com>, 2023
# Vitor Buxbaum Orlandi, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-31 10:59+0000\n"
"PO-Revision-Date: 2021-06-28 01:04+0000\n"
"Last-Translator: Vitor Buxbaum Orlandi, 2023\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/devmode.rst:4
msgid "Python Development Mode"
msgstr "Modo de Desenvolvimento do Python"

#: ../../library/devmode.rst:8
msgid ""
"The Python Development Mode introduces additional runtime checks that are "
"too expensive to be enabled by default. It should not be more verbose than "
"the default if the code is correct; new warnings are only emitted when an "
"issue is detected."
msgstr ""
"O Modo de Desenvolvimento do Python introduz verificações de tempo de "
"execução adicionais que são muito custosas para serem ativadas por padrão. "
"Não deve ser mais detalhado que o padrão se o código estiver correto; novos "
"avisos são emitidos somente quando um problema é detectado."

#: ../../library/devmode.rst:13
msgid ""
"It can be enabled using the :option:`-X dev <-X>` command line option or by "
"setting the :envvar:`PYTHONDEVMODE` environment variable to ``1``."
msgstr ""
"Ele pode ser ativado usando a opção de linha de comando :option:`-X dev <-"
"X>` ou configurando a variável de ambiente :envvar:`PYTHONDEVMODE` como "
"``1``."

#: ../../library/devmode.rst:16
msgid "See also :ref:`Python debug build <debug-build>`."
msgstr "Veja também a :ref:`compilação de depuração do Python <debug-build>`."

#: ../../library/devmode.rst:19
msgid "Effects of the Python Development Mode"
msgstr "Efeitos do Modo de Desenvolvimento do Python"

#: ../../library/devmode.rst:21
msgid ""
"Enabling the Python Development Mode is similar to the following command, "
"but with additional effects described below::"
msgstr ""
"A ativação do Modo de Desenvolvimento do Python é semelhante ao comando a "
"seguir, mas com efeitos adicionais descritos abaixo::"

#: ../../library/devmode.rst:24
msgid ""
"PYTHONMALLOC=debug PYTHONASYNCIODEBUG=1 python -W default -X faulthandler"
msgstr ""

#: ../../library/devmode.rst:26
msgid "Effects of the Python Development Mode:"
msgstr "Efeitos do Modo de Desenvolvimento do Python:"

#: ../../library/devmode.rst:28
msgid ""
"Add ``default`` :ref:`warning filter <describing-warning-filters>`. The "
"following warnings are shown:"
msgstr ""
"Adiciona o :ref:`filtro de avisos <describing-warning-filters>` ``default``. "
"Os seguintes avisos são exibidos:"

#: ../../library/devmode.rst:31
msgid ":exc:`DeprecationWarning`"
msgstr ":exc:`DeprecationWarning`"

#: ../../library/devmode.rst:32
msgid ":exc:`ImportWarning`"
msgstr ":exc:`ImportWarning`"

#: ../../library/devmode.rst:33
msgid ":exc:`PendingDeprecationWarning`"
msgstr ":exc:`PendingDeprecationWarning`"

#: ../../library/devmode.rst:34
msgid ":exc:`ResourceWarning`"
msgstr ":exc:`ResourceWarning`"

#: ../../library/devmode.rst:36
msgid ""
"Normally, the above warnings are filtered by the default :ref:`warning "
"filters <describing-warning-filters>`."
msgstr ""
"Normalmente, os avisos acima são filtrados pelos :ref:`filtros de avisos "
"<describing-warning-filters>` padrão."

#: ../../library/devmode.rst:39
msgid ""
"It behaves as if the :option:`-W default <-W>` command line option is used."
msgstr ""
"Ele se comporta como se a opção de linha de comando :option:`-W default <-"
"W>` fosse usada."

#: ../../library/devmode.rst:41
msgid ""
"Use the :option:`-W error <-W>` command line option or set the :envvar:"
"`PYTHONWARNINGS` environment variable to ``error`` to treat warnings as "
"errors."
msgstr ""
"Use a opção de linha de comando :option:`-W error <-W>` ou defina a variável "
"de ambiente :envvar:`PYTHONWARNINGS` com ``error`` para tratar avisos como "
"erros."

#: ../../library/devmode.rst:45
msgid "Install debug hooks on memory allocators to check for:"
msgstr ""
"Instala ganchos de depuração nos alocadores de memória para verificar por:"

#: ../../library/devmode.rst:47
msgid "Buffer underflow"
msgstr "Estouro negativo de buffer"

#: ../../library/devmode.rst:48
msgid "Buffer overflow"
msgstr "Estouro de buffer"

#: ../../library/devmode.rst:49
msgid "Memory allocator API violation"
msgstr "Violação de API de alocador de memória"

#: ../../library/devmode.rst:50
msgid "Unsafe usage of the GIL"
msgstr "Uso inseguro da GIL"

#: ../../library/devmode.rst:52
msgid "See the :c:func:`PyMem_SetupDebugHooks` C function."
msgstr "Consulte a função C :c:func:`PyMem_SetupDebugHooks`."

#: ../../library/devmode.rst:54
msgid ""
"It behaves as if the :envvar:`PYTHONMALLOC` environment variable is set to "
"``debug``."
msgstr ""
"Se comporta como se a variável de ambiente :envvar:`PYTHONMALLOC` estivesse "
"definida com ``debug``."

#: ../../library/devmode.rst:57
msgid ""
"To enable the Python Development Mode without installing debug hooks on "
"memory allocators, set the :envvar:`PYTHONMALLOC` environment variable to "
"``default``."
msgstr ""
"Para habilitar o Modo de Desenvolvimento do Python sem instalar ganchos de "
"depuração nos alocadores de memória, defina a variável de ambiente :envvar:"
"`PYTHONMALLOC` como ``default``."

#: ../../library/devmode.rst:61
msgid ""
"Call :func:`faulthandler.enable` at Python startup to install handlers for "
"the :const:`~signal.SIGSEGV`, :const:`~signal.SIGFPE`, :const:`~signal."
"SIGABRT`, :const:`~signal.SIGBUS` and :const:`~signal.SIGILL` signals to "
"dump the Python traceback on a crash."
msgstr ""
"Chama :func:`faulthandler.enable` na inicialização do Python para instalar "
"manipuladores para os sinais :const:`~signal.SIGSEGV`, :const:`~signal."
"SIGFPE`, :const:`~signal.SIGABRT`, :const:`~signal.SIGBUS` e :const:`~signal."
"SIGILL` para despejar o traceback (situação da pilha de execução) do Python "
"no caso de travamento."

#: ../../library/devmode.rst:66
msgid ""
"It behaves as if the :option:`-X faulthandler <-X>` command line option is "
"used or if the :envvar:`PYTHONFAULTHANDLER` environment variable is set to "
"``1``."
msgstr ""
"Ele se comporta como se a opção de linha de comando :option:`-X faulthandler "
"<-X>` fosse usada ou se a variável de ambiente :envvar:`PYTHONFAULTHANDLER` "
"estivesse definida como ``1``."

#: ../../library/devmode.rst:70
msgid ""
"Enable :ref:`asyncio debug mode <asyncio-debug-mode>`. For example, :mod:"
"`asyncio` checks for coroutines that were not awaited and logs them."
msgstr ""
"Ativa o :ref:`modo de depuração de asyncio <asyncio-debug-mode>`. Por "
"exemplo, :mod:`asyncio` verifica as corrotinas que não foram aguardadas "
"(*await*) e as registra."

#: ../../library/devmode.rst:73
msgid ""
"It behaves as if the :envvar:`PYTHONASYNCIODEBUG` environment variable is "
"set to ``1``."
msgstr ""
"Ele se comporta como se a variável de ambiente :envvar:`PYTHONASYNCIODEBUG` "
"estivesse definida como ``1``."

#: ../../library/devmode.rst:76
msgid ""
"Check the *encoding* and *errors* arguments for string encoding and decoding "
"operations. Examples: :func:`open`, :meth:`str.encode` and :meth:`bytes."
"decode`."
msgstr ""
"Verifica os argumentos *encoding* e *errors* para operações de codificação e "
"decodificação de strings. Exemplos: :func:`open`, :meth:`str.encode` e :meth:"
"`bytes.decode`."

#: ../../library/devmode.rst:80
msgid ""
"By default, for best performance, the *errors* argument is only checked at "
"the first encoding/decoding error and the *encoding* argument is sometimes "
"ignored for empty strings."
msgstr ""
"Por padrão, para obter o melhor desempenho, o argumento *errors* é "
"verificado apenas no primeiro erro de codificação/decodificação, e o "
"argumento *encoding* às vezes é ignorado para strings vazias."

#: ../../library/devmode.rst:84
msgid "The :class:`io.IOBase` destructor logs ``close()`` exceptions."
msgstr "O destrutor de :class:`io.IOBase` registra exceções ``close()``."

#: ../../library/devmode.rst:85
msgid ""
"Set the :attr:`~sys.flags.dev_mode` attribute of :data:`sys.flags` to "
"``True``."
msgstr ""
"Define o atributo :attr:`~sys.flags.dev_mode` de :data:`sys.flags` como "
"``True``."

#: ../../library/devmode.rst:88
msgid ""
"The Python Development Mode does not enable the :mod:`tracemalloc` module by "
"default, because the overhead cost (to performance and memory) would be too "
"large. Enabling the :mod:`tracemalloc` module provides additional "
"information on the origin of some errors. For example, :exc:"
"`ResourceWarning` logs the traceback where the resource was allocated, and a "
"buffer overflow error logs the traceback where the memory block was "
"allocated."
msgstr ""
"O Modo de Desenvolvimento do Python não ativa o módulo :mod:`tracemalloc` "
"por padrão porque o custo adicional (para desempenho e memória) seria muito "
"grande. A ativação do módulo :mod:`tracemalloc` fornece informações "
"adicionais sobre a origem de alguns erros. Por exemplo, :exc:"
"`ResourceWarning` registra o retorno ao local onde o recurso foi alocado, e "
"um erro de estouro de buffer registra o retorno ao local onde o bloco de "
"memória foi alocado."

#: ../../library/devmode.rst:95
msgid ""
"The Python Development Mode does not prevent the :option:`-O` command line "
"option from removing :keyword:`assert` statements nor from setting :const:"
"`__debug__` to ``False``."
msgstr ""
"O Modo de Desenvolvimento do Python não impede que a opção de linha de "
"comando :option:`-O` remova as instruções :keyword:`assert` nem configure :"
"const:`__debug__` como ``False``."

#: ../../library/devmode.rst:99
msgid ""
"The Python Development Mode can only be enabled at the Python startup. Its "
"value can be read from :data:`sys.flags.dev_mode <sys.flags>`."
msgstr ""
"O Modo de Desenvolvimento do Python só pode ser ativado na inicialização do "
"Python. Seu valor pode ser lido de :data:`sys.flags.dev_mode <sys.flags>`."

#: ../../library/devmode.rst:102
msgid "The :class:`io.IOBase` destructor now logs ``close()`` exceptions."
msgstr "O destrutor de :class:`io.IOBase` agora registra exceções ``close()``."

#: ../../library/devmode.rst:105
msgid ""
"The *encoding* and *errors* arguments are now checked for string encoding "
"and decoding operations."
msgstr ""
"Os argumentos *encoding* e *errors* agora são verificados para operações de "
"codificação e decodificação de strings."

#: ../../library/devmode.rst:111
msgid "ResourceWarning Example"
msgstr "Exemplo de ResourceWarning"

#: ../../library/devmode.rst:113
msgid ""
"Example of a script counting the number of lines of the text file specified "
"in the command line::"
msgstr ""
"Exemplo de um script que conta o número de linhas do arquivo texto "
"especificado na linha de comando::"

#: ../../library/devmode.rst:116
msgid ""
"import sys\n"
"\n"
"def main():\n"
"    fp = open(sys.argv[1])\n"
"    nlines = len(fp.readlines())\n"
"    print(nlines)\n"
"    # The file is closed implicitly\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()"
msgstr ""

#: ../../library/devmode.rst:127
msgid ""
"The script does not close the file explicitly. By default, Python does not "
"emit any warning. Example using README.txt, which has 269 lines:"
msgstr ""
"O script não fecha o arquivo explicitamente. Por padrão, o Python não emite "
"nenhum aviso. Exemplo usando README.txt, que possui 269 linhas:"

#: ../../library/devmode.rst:130
msgid ""
"$ python script.py README.txt\n"
"269"
msgstr ""

#: ../../library/devmode.rst:135
msgid ""
"Enabling the Python Development Mode displays a :exc:`ResourceWarning` "
"warning:"
msgstr ""
"A ativação do Modo de Desenvolvimento do Python exibe um aviso :exc:"
"`ResourceWarning`:"

#: ../../library/devmode.rst:137
msgid ""
"$ python -X dev script.py README.txt\n"
"269\n"
"script.py:10: ResourceWarning: unclosed file <_io.TextIOWrapper name='README."
"rst' mode='r' encoding='UTF-8'>\n"
"  main()\n"
"ResourceWarning: Enable tracemalloc to get the object allocation traceback"
msgstr ""

#: ../../library/devmode.rst:145
msgid ""
"In addition, enabling :mod:`tracemalloc` shows the line where the file was "
"opened:"
msgstr ""
"Além disso, ativar :mod:`tracemalloc` mostra a linha em que o arquivo foi "
"aberto:"

#: ../../library/devmode.rst:148
msgid ""
"$ python -X dev -X tracemalloc=5 script.py README.rst\n"
"269\n"
"script.py:10: ResourceWarning: unclosed file <_io.TextIOWrapper name='README."
"rst' mode='r' encoding='UTF-8'>\n"
"  main()\n"
"Object allocated at (most recent call last):\n"
"  File \"script.py\", lineno 10\n"
"    main()\n"
"  File \"script.py\", lineno 4\n"
"    fp = open(sys.argv[1])"
msgstr ""

#: ../../library/devmode.rst:160
msgid ""
"The fix is to close explicitly the file. Example using a context manager::"
msgstr ""
"A correção é fechar explicitamente o arquivo. Exemplo usando um gerenciador "
"de contexto::"

#: ../../library/devmode.rst:162
msgid ""
"def main():\n"
"    # Close the file explicitly when exiting the with block\n"
"    with open(sys.argv[1]) as fp:\n"
"        nlines = len(fp.readlines())\n"
"    print(nlines)"
msgstr ""

#: ../../library/devmode.rst:168
msgid ""
"Not closing a resource explicitly can leave a resource open for way longer "
"than expected; it can cause severe issues upon exiting Python. It is bad in "
"CPython, but it is even worse in PyPy. Closing resources explicitly makes an "
"application more deterministic and more reliable."
msgstr ""
"Não fechar um recurso explicitamente pode deixá-lo aberto por muito mais "
"tempo do que o esperado; isso pode causar problemas graves ao sair do "
"Python. É ruim no CPython, mas é ainda pior no PyPy. Fechar recursos "
"explicitamente torna uma aplicação mais determinística e mais confiável."

#: ../../library/devmode.rst:175
msgid "Bad file descriptor error example"
msgstr "Exemplo de erro de descritor de arquivo inválido"

#: ../../library/devmode.rst:177
msgid "Script displaying the first line of itself::"
msgstr "Script exibindo sua própria primeira linha::"

#: ../../library/devmode.rst:179
msgid ""
"import os\n"
"\n"
"def main():\n"
"    fp = open(__file__)\n"
"    firstline = fp.readline()\n"
"    print(firstline.rstrip())\n"
"    os.close(fp.fileno())\n"
"    # The file is closed implicitly\n"
"\n"
"main()"
msgstr ""

#: ../../library/devmode.rst:190
msgid "By default, Python does not emit any warning:"
msgstr "Por padrão, o Python não emite qualquer aviso:"

#: ../../library/devmode.rst:192
msgid ""
"$ python script.py\n"
"import os"
msgstr ""

#: ../../library/devmode.rst:197
msgid ""
"The Python Development Mode shows a :exc:`ResourceWarning` and logs a \"Bad "
"file descriptor\" error when finalizing the file object:"
msgstr ""
"O Modo de Desenvolvimento do Python mostra uma :exc:`ResourceWarning` e "
"registra um erro \"Bad file descriptor\" ao finalizar o objeto arquivo:"

#: ../../library/devmode.rst:200
msgid ""
"$ python -X dev script.py\n"
"import os\n"
"script.py:10: ResourceWarning: unclosed file <_io.TextIOWrapper name='script."
"py' mode='r' encoding='UTF-8'>\n"
"  main()\n"
"ResourceWarning: Enable tracemalloc to get the object allocation traceback\n"
"Exception ignored in: <_io.TextIOWrapper name='script.py' mode='r' "
"encoding='UTF-8'>\n"
"Traceback (most recent call last):\n"
"  File \"script.py\", line 10, in <module>\n"
"    main()\n"
"OSError: [Errno 9] Bad file descriptor"
msgstr ""

#: ../../library/devmode.rst:213
msgid ""
"``os.close(fp.fileno())`` closes the file descriptor. When the file object "
"finalizer tries to close the file descriptor again, it fails with the ``Bad "
"file descriptor`` error. A file descriptor must be closed only once. In the "
"worst case scenario, closing it twice can lead to a crash (see :issue:"
"`18748` for an example)."
msgstr ""
"``os.close(fp.fileno())`` fecha o descritor de arquivo. Quando o finalizador "
"de objeto arquivo tenta fechar o descritor de arquivo novamente, ele falha "
"com o erro ``Bad file descriptor``. Um descritor de arquivo deve ser fechado "
"apenas uma vez. Na pior das hipóteses, fechá-lo duas vezes pode causar um "
"acidente (consulte :issue:`18748` para um exemplo)."

#: ../../library/devmode.rst:219
msgid ""
"The fix is to remove the ``os.close(fp.fileno())`` line, or open the file "
"with ``closefd=False``."
msgstr ""
"A correção é remover a linha ``os.close(fp.fileno())`` ou abrir o arquivo "
"com ``closefd=False``."
