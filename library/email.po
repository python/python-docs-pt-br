# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Biagioni de Fazio <rafaelbdefazio@usp.br>, 2021
# Rodrigo Neres <rodrigoneres37@gmail.com>, 2021
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:05+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/email.rst:2
msgid ":mod:`!email` --- An email and MIME handling package"
msgstr ":mod:`!email` --- Um e-mail e um pacote MIME manipulável"

#: ../../library/email.rst:11
msgid "**Source code:** :source:`Lib/email/__init__.py`"
msgstr "**Código-fonte:** :source:`Lib/email/__init__.py`"

#: ../../library/email.rst:15
msgid ""
"The :mod:`email` package is a library for managing email messages.  It is "
"specifically *not* designed to do any sending of email messages to SMTP (:"
"rfc:`2821`), NNTP, or other servers; those are functions of modules such as :"
"mod:`smtplib`.  The :mod:`email` package attempts to be as RFC-compliant as "
"possible, supporting :rfc:`5322` and :rfc:`6532`, as well as such MIME-"
"related RFCs as :rfc:`2045`, :rfc:`2046`, :rfc:`2047`, :rfc:`2183`, and :rfc:"
"`2231`."
msgstr ""
"O pacote :mod:`email` é uma biblioteca para gerenciar mensagens de e-mail. "
"Ela foi especificamente *não* projetada para enviar mensagens de e-mail para "
"SMTP (:rfc:`2821`), NNTP ou outros servidores; essas são funções de módulos "
"como :mod:`smtplib`. O pacote :mod:`email` tenta ser o mais compatível "
"possível com RFC, suportando :rfc:`5322` e :rfc:`6532`, bem como os RFCs "
"relacionados ao MIME como :rfc:`2045`, :rfc:`2046`, :rfc:`2047`, :rfc:`2183` "
"e :rfc:`2231`."

#: ../../library/email.rst:23
msgid ""
"The overall structure of the email package can be divided into three major "
"components, plus a fourth component that controls the behavior of the other "
"components."
msgstr ""
"No geral a estrutura do pacote de e-mail pode ser dividida em três "
"componentes principais, mais um quarto componente que controla o "
"comportamento dos outros componentes."

#: ../../library/email.rst:27
msgid ""
"The central component of the package is an \"object model\" that represents "
"email messages.  An application interacts with the package primarily through "
"the object model interface defined in the :mod:`~email.message` sub-module.  "
"The application can use this API to ask questions about an existing email, "
"to construct a new email, or to add or remove email subcomponents that "
"themselves use the same object model interface.  That is, following the "
"nature of email messages and their MIME subcomponents, the email object "
"model is a tree structure of objects that all provide the :class:`~email."
"message.EmailMessage` API."
msgstr ""
"O componente central do pacote é um \"modelo de objeto\" que representa "
"mensagens de e-mail. Uma aplicação interage com o pacote principalmente "
"através da interface do modelo de objeto definida no submódulo :mod:`~email."
"message`. A aplicação pode usar essa API para fazer perguntas sobre um e-"
"mail existente, construir um novo e-mail ou adicionar ou remover "
"subcomponentes de e-mail que usam a mesma interface de modelo de objeto. Ou "
"seja, seguindo a natureza das mensagens de e-mail e seus subcomponentes "
"MIME, o modelo de objeto de e-mail é uma estrutura em árvore de objetos que "
"fornecem a API :class:`~email.message.EmailMessage`."

#: ../../library/email.rst:37
msgid ""
"The other two major components of the package are the :mod:`~email.parser` "
"and the :mod:`~email.generator`.  The parser takes the serialized version of "
"an email message (a stream of bytes) and converts it into a tree of :class:"
"`~email.message.EmailMessage` objects.  The generator takes an :class:"
"`~email.message.EmailMessage` and turns it back into a serialized byte "
"stream.  (The parser and generator also handle streams of text characters, "
"but this usage is discouraged as it is too easy to end up with messages that "
"are not valid in one way or another.)"
msgstr ""
"Os outros dois componentes principais do pacote são :mod:`~email.parser` e :"
"mod:`~email.generator`. O analisador sintático pega a versão serializada de "
"uma mensagem de e-mail (um fluxo de bytes) e a converte em uma árvore de "
"objetos :class:`~email.message.EmailMessage`. O gerador pega um :class:"
"`~email.message.EmailMessage` e o transforma novamente em um fluxo de bytes "
"serializado. (O analisador sintático e o gerador também lidam com fluxos de "
"caracteres de texto, mas esse uso é desencorajado, pois é muito fácil "
"terminar com mensagens que não são válidas de uma maneira ou de outra.)"

#: ../../library/email.rst:46
msgid ""
"The control component is the :mod:`~email.policy` module.  Every :class:"
"`~email.message.EmailMessage`, every :mod:`~email.generator`, and every :mod:"
"`~email.parser` has an associated :mod:`~email.policy` object that controls "
"its behavior.  Usually an application only needs to specify the policy when "
"an :class:`~email.message.EmailMessage` is created, either by directly "
"instantiating an :class:`~email.message.EmailMessage`  to create a new "
"email, or by parsing an input stream using a :mod:`~email.parser`.  But the "
"policy can be changed when the message is serialized using a :mod:`~email."
"generator`. This allows, for example, a generic email message to be parsed "
"from disk, but to serialize it using standard SMTP settings when sending it "
"to an email server."
msgstr ""
"O componente de controle é o módulo :mod:`~email.policy`. Cada :class:"
"`~email.message.EmailMessage`, cada :mod:`~email.generator` e cada :mod:"
"`~email.parser` tem um objeto associado :mod:`~email.policy` que controla "
"seu comportamento. Normalmente, uma aplicação precisa especificar a política "
"apenas quando uma :class:`~email.message.EmailMessage` é criada, "
"instanciando diretamente uma :class:`~email.message.EmailMessage` para criar "
"um novo e-mail ou analisando um fluxo de entrada usando um :mod:`~email."
"parser`. Mas a política pode ser alterada quando a mensagem é serializada "
"usando um :mod:`~email.generator`. Isso permite, por exemplo, analisar uma "
"mensagem de e-mail genérica do disco, mas serializá-la usando as "
"configurações SMTP padrão ao enviá-la para um servidor de e-mail."

#: ../../library/email.rst:58
msgid ""
"The email package does its best to hide the details of the various governing "
"RFCs from the application.  Conceptually the application should be able to "
"treat the email message as a structured tree of unicode text and binary "
"attachments, without having to worry about how these are represented when "
"serialized.  In practice, however, it is often necessary to be aware of at "
"least some of the rules governing MIME messages and their structure, "
"specifically the names and nature of the MIME \"content types\" and how they "
"identify multipart documents.  For the most part this knowledge should only "
"be required for more complex applications, and even then it should only be "
"the high level structure in question, and not the details of how those "
"structures are represented.  Since MIME content types are used widely in "
"modern internet software (not just email), this will be a familiar concept "
"to many programmers."
msgstr ""
"O pacote de e-mail faz o possível para ocultar os detalhes das várias RFCs "
"em vigor da aplicação. Conceitualmente, a aplicação deve tratar a mensagem "
"de e-mail como uma árvore estruturada de texto unicode e anexos binários, "
"sem ter que se preocupar com a forma como eles são representados quando "
"serializados. Na prática, no entanto, muitas vezes é necessário estar ciente "
"de pelo menos algumas das regras que regem as mensagens MIME e sua "
"estrutura, especificamente os nomes e a natureza dos \"tipos de conteúdo\" "
"MIME e como eles identificam documentos com várias partes. Na maioria das "
"vezes, esse conhecimento só deve ser necessário para aplicações mais "
"complexos e, mesmo assim, deve ser apenas a estrutura de alto nível em "
"questão, e não os detalhes de como essas estruturas são representadas. Como "
"os tipos de conteúdo MIME são amplamente utilizados no software moderno da "
"Internet (não apenas no e-mail), este será um conceito familiar para muitos "
"programadores."

#: ../../library/email.rst:71
msgid ""
"The following sections describe the functionality of the :mod:`email` "
"package. We start with the :mod:`~email.message` object model, which is the "
"primary interface an application will use, and follow that with the :mod:"
"`~email.parser` and :mod:`~email.generator` components.  Then we cover the :"
"mod:`~email.policy` controls, which completes the treatment of the main "
"components of the library."
msgstr ""
"As seções a seguir descrevem a funcionalidade do pacote :mod:`email`. "
"Começamos com o modelo de objeto :mod:`~email.message`, que é a interface "
"principal que uma aplicação usará, e seguimos com os componentes de :mod:"
"`~email.parser` e :mod:`~email.generator`. Em seguida, abordamos os "
"controles :mod:`~email.policy`, que concluem o tratamento dos principais "
"componentes da biblioteca."

#: ../../library/email.rst:78
msgid ""
"The next three sections cover the exceptions the package may raise and the "
"defects (non-compliance with the RFCs) that the :mod:`~email.parser` may "
"detect.  Then we cover the :mod:`~email.headerregistry` and the :mod:`~email."
"contentmanager` sub-components, which provide tools for doing more detailed "
"manipulation of headers and payloads, respectively.  Both of these "
"components contain features relevant to consuming and producing non-trivial "
"messages, but also document their extensibility APIs, which will be of "
"interest to advanced applications."
msgstr ""
"As próximas três seções cobrem as exceções que o pacote pode apresentar e os "
"defeitos (não conformidade com as RFCs) que o :mod:`~email.parser` pode "
"detectar. A seguir, abordamos os subcomponentes :mod:`~email.headerregistry` "
"e os subcomponentes :mod:`~email.contentmanager`, que fornecem ferramentas "
"para manipulação mais detalhada de cabeçalhos e cargas úteis, "
"respectivamente. Ambos os componentes contêm recursos relevantes para "
"consumir e produzir mensagens não triviais, mas também documentam suas APIs "
"de extensibilidade, que serão de interesse para aplicações avançadas."

#: ../../library/email.rst:87
msgid ""
"Following those is a set of examples of using the fundamental parts of the "
"APIs covered in the preceding sections."
msgstr ""
"A seguir, é apresentado um conjunto de exemplos de uso das partes "
"fundamentais das APIs abordadas nas seções anteriores."

#: ../../library/email.rst:90
msgid ""
"The foregoing represent the modern (unicode friendly) API of the email "
"package. The remaining sections, starting with the :class:`~email.message."
"Message` class, cover the legacy :data:`~email.policy.compat32` API that "
"deals much more directly with the details of how email messages are "
"represented.  The :data:`~email.policy.compat32` API does *not* hide the "
"details of the RFCs from the application, but for applications that need to "
"operate at that level, they can be useful tools.  This documentation is also "
"relevant for applications that are still using the :mod:`~email.policy."
"compat32` API for backward compatibility reasons."
msgstr ""
"O exposto acima representa a API moderna (compatível com unicode) do pacote "
"de e-mail. As seções restantes, começando com a classe :class:`~email."
"message.Message`, cobrem a API legada :data:`~email.policy.compat32` que "
"lida muito mais diretamente com os detalhes de como as mensagens de e-mail "
"são representadas. A API :data:`~email.policy.compat32` *não* oculta os "
"detalhes dos RFCs da aplicação, mas para aplicações que precisam operar "
"nesse nível, eles podem ser ferramentas úteis. Esta documentação também é "
"relevante para aplicações que ainda estão usando a API :mod:`~email.policy."
"compat32` por motivos de compatibilidade com versões anteriores."

#: ../../library/email.rst:100
msgid ""
"Docs reorganized and rewritten to promote the new :class:`~email.message."
"EmailMessage`/:class:`~email.policy.EmailPolicy` API."
msgstr ""
"Documentos reorganizados e reescritos para promover a nova API :class:"
"`~email.message.EmailMessage`/:class:`~email.policy.EmailPolicy`."

#: ../../library/email.rst:105
msgid "Contents of the :mod:`email` package documentation:"
msgstr "Conteúdos da documentação do pacote :mod:`email`:"

#: ../../library/email.rst:120
msgid "Legacy API:"
msgstr "API legada"

#: ../../library/email.rst:135
msgid "Module :mod:`smtplib`"
msgstr "Módulo :mod:`smtplib`"

#: ../../library/email.rst:136
msgid "SMTP (Simple Mail Transport Protocol) client"
msgstr "Cliente SMTP (Protocolo Simples de Envio de E-mail)"

#: ../../library/email.rst:138
msgid "Module :mod:`poplib`"
msgstr "Módulo :mod:`poplib`"

#: ../../library/email.rst:139
msgid "POP (Post Office Protocol) client"
msgstr "Cliente POP (Post Office Protocol)"

#: ../../library/email.rst:141
msgid "Module :mod:`imaplib`"
msgstr "Módulo :mod:`imaplib`"

#: ../../library/email.rst:142
msgid "IMAP (Internet Message Access Protocol) client"
msgstr "Cliente IMAP (Internet Message Access Protocol)"

#: ../../library/email.rst:144
msgid "Module :mod:`mailbox`"
msgstr "Módulo :mod:`mailbox`"

#: ../../library/email.rst:145
msgid ""
"Tools for creating, reading, and managing collections of messages on disk "
"using a variety standard formats."
msgstr ""
"Ferramentas para criar, ler, e gerenciar coleções de mensagem em disco "
"usando vários formatos padrão."
