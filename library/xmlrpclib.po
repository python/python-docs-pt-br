# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2020-02-29 09:30+0000\n"
"Last-Translator: Marco Rougeth <marco@rougeth.com>\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/"
"python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../library/xmlrpclib.rst:2
msgid ":mod:`xmlrpclib` --- XML-RPC client access"
msgstr ""

#: ../../library/xmlrpclib.rst:10
msgid ""
"The :mod:`xmlrpclib` module has been renamed to :mod:`xmlrpc.client` in "
"Python 3.  The :term:`2to3` tool will automatically adapt imports when "
"converting your sources to Python 3."
msgstr ""

#: ../../library/xmlrpclib.rst:20
msgid "**Source code:** :source:`Lib/xmlrpclib.py`"
msgstr ""

#: ../../library/xmlrpclib.rst:24
msgid ""
"XML-RPC is a Remote Procedure Call method that uses XML passed via HTTP(S) "
"as a transport.  With it, a client can call methods with parameters on a "
"remote server (the server is named by a URI) and get back structured data.  "
"This module supports writing XML-RPC client code; it handles all the details "
"of translating between conformable Python objects and XML on the wire."
msgstr ""
"XML-RPC é um método de chamada remota de métodos que usa XML usando HTTP(S) "
"como transporte.  Com ele, um cliente pode chamar métodos com parâmetros em "
"um servidor remoto (o servidor é nomeado por um URI) e receber de volta "
"dados estruturados.  Este módulo oferece suporte à escrita de código de "
"clientes XML-RPC; ele lida com todos os detalhes da tradução entre Python "
"objetos e XML."

#: ../../library/xmlrpclib.rst:33
msgid ""
"The :mod:`xmlrpclib` module is not secure against maliciously constructed "
"data.  If you need to parse untrusted or unauthenticated data see :ref:`xml-"
"vulnerabilities`."
msgstr ""

#: ../../library/xmlrpclib.rst:39
msgid ""
"For HTTPS URIs, :mod:`xmlrpclib` now performs all the necessary certificate "
"and hostname checks by default."
msgstr ""

#: ../../library/xmlrpclib.rst:44
msgid ""
"A :class:`ServerProxy` instance is an object that manages communication with "
"a remote XML-RPC server.  The required first argument is a URI (Uniform "
"Resource Indicator), and will normally be the URL of the server.  The "
"optional second argument is a transport factory instance; by default it is "
"an internal :class:`SafeTransport` instance for https: URLs and an internal "
"HTTP :class:`Transport` instance otherwise.  The optional third argument is "
"an encoding, by default UTF-8. The optional fourth argument is a debugging "
"flag."
msgstr ""
"Uma instância de :class:`ServerProxy` é um objeto que gerencia a comunicação "
"com um servidor XML-RPC remoto. O primeiro argumento obrigatório é uma URI "
"(Uniform Resource Indicator - Indicador de Recurso Uniforme) e normalmente "
"vai ser a URL do servidor. O segundo parâmetro, opcional, é uma instância de "
"um factory de transporte; por padrão é uma instância de :class:"
"`SafeTransport` para URLs https e uma instância de :class:`Transport` caso "
"contrário. O terceiro parâmetro, opcional, é o encoding, por padrão sendo "
"UTF-8. O quarto argumento, opcional, é a flag de debug."

#: ../../library/xmlrpclib.rst:52
msgid ""
"The following parameters govern the use of the returned proxy instance. If "
"*allow_none* is true,  the Python constant ``None`` will be translated into "
"XML; the default behaviour is for ``None`` to raise a :exc:`TypeError`. This "
"is a commonly-used extension to the XML-RPC specification, but isn't "
"supported by all clients and servers; see `http://ontosys.com/xml-rpc/"
"extensions.php <https://web.archive.org/web/20130120074804/http://ontosys."
"com/xml-rpc/extensions.php>`_ for a description. The *use_datetime* flag can "
"be used to cause date/time values to be presented as :class:`datetime."
"datetime` objects; this is false by default. :class:`datetime.datetime` "
"objects may be passed to calls."
msgstr ""

#: ../../library/xmlrpclib.rst:63
msgid ""
"Both the HTTP and HTTPS transports support the URL syntax extension for HTTP "
"Basic Authentication: ``http://user:pass@host:port/path``.  The ``user:"
"pass`` portion will be base64-encoded as an HTTP 'Authorization' header, and "
"sent to the remote server as part of the connection process when invoking an "
"XML-RPC method.  You only need to use this if the remote server requires a "
"Basic Authentication user and password. If an HTTPS URL is provided, "
"*context* may be :class:`ssl.SSLContext` and configures the SSL settings of "
"the underlying HTTPS connection."
msgstr ""

#: ../../library/xmlrpclib.rst:72
msgid ""
"The returned instance is a proxy object with methods that can be used to "
"invoke corresponding RPC calls on the remote server.  If the remote server "
"supports the introspection API, the proxy can also be used to query the "
"remote server for the methods it supports (service discovery) and fetch "
"other server-associated metadata."
msgstr ""
"A instância retornada é um objeto proxy com métodos que podem ser usados "
"para invocar a chamada RPC correspondendo no servidor remoto. Se o servidor "
"remoto suportar a API de instrospecção, o proxy também pode ser usado para "
"perguntar ao servidor remoto pelos métodos que ele suporta (descoberta de "
"serviço) e recuperar outros meta-dados associados com o servidor."

#: ../../library/xmlrpclib.rst:78
msgid ""
"Types that are conformable (e.g. that can be marshalled through XML), "
"include the following (and except where noted, they are unmarshalled as the "
"same Python type):"
msgstr ""
"Os tipos que são conformáveis (por exemplo, que podem ser convertidos para "
"XML) incluem os seguintes (e exceto onde indicado, eles não são convertidos "
"como o mesmo tipo Python):"

#: ../../library/xmlrpclib.rst:85
msgid "XML-RPC type"
msgstr "Tipo XML-RPC"

#: ../../library/xmlrpclib.rst:85
msgid "Python type"
msgstr "Python type"

#: ../../library/xmlrpclib.rst:87
msgid "``boolean``"
msgstr "``boolean``"

#: ../../library/xmlrpclib.rst:87
msgid ":class:`bool`"
msgstr ":class:`bool`"

#: ../../library/xmlrpclib.rst:89
msgid "``int`` or ``i4``"
msgstr ""

#: ../../library/xmlrpclib.rst:89
msgid ":class:`int` or :class:`long` in range from -2147483648 to 2147483647."
msgstr ""

#: ../../library/xmlrpclib.rst:92
msgid "``double``"
msgstr "``double``"

#: ../../library/xmlrpclib.rst:92
msgid ":class:`float`"
msgstr ":class:`float`"

#: ../../library/xmlrpclib.rst:94
msgid "``string``"
msgstr "``string``"

#: ../../library/xmlrpclib.rst:94
msgid ":class:`str` or :class:`unicode`"
msgstr ""

#: ../../library/xmlrpclib.rst:96
msgid "``array``"
msgstr "``array``"

#: ../../library/xmlrpclib.rst:96
msgid ""
":class:`list` or :class:`tuple` containing conformable elements.  Arrays are "
"returned as :class:`lists <list>`."
msgstr ""
":class:`list` ou :class:`tuple` contendo elementos conformáveis.  As "
"matrizes são retornadas como :class:`lists <list>`."

#: ../../library/xmlrpclib.rst:100
msgid "``struct``"
msgstr "``struct``"

#: ../../library/xmlrpclib.rst:100
msgid ""
":class:`dict`.  Keys must be strings, values may be any conformable type.  "
"Objects of user-defined classes can be passed in; only their :attr:`~object."
"__dict__` attribute is transmitted."
msgstr ""
":class:`dict`. Chaves devem ser strings, valores podem ser qualquer tipo "
"conformáveis. Objetos de classes definidas pelo usuário pode ser usadas; "
"apenas o atributo :attr:`~object.__dict__` delas é transmitido."

#: ../../library/xmlrpclib.rst:105
msgid "``dateTime.iso8601``"
msgstr "``dateTime.iso8601``"

#: ../../library/xmlrpclib.rst:105
msgid ""
":class:`DateTime` or :class:`datetime.datetime`. Returned type depends on "
"values of the *use_datetime* flags."
msgstr ""

#: ../../library/xmlrpclib.rst:109
msgid "``base64``"
msgstr "``base64``"

#: ../../library/xmlrpclib.rst:109
msgid ":class:`Binary`"
msgstr ""

#: ../../library/xmlrpclib.rst:111
msgid "``nil``"
msgstr "``nil``"

#: ../../library/xmlrpclib.rst:111
msgid ""
"The ``None`` constant.  Passing is allowed only if *allow_none* is true."
msgstr ""
"A constante ``None``.  A passagem é permitida somente se *allow_none* for "
"verdadeiro."

#: ../../library/xmlrpclib.rst:115
msgid ""
"This is the full set of data types supported by XML-RPC.  Method calls may "
"also raise a special :exc:`Fault` instance, used to signal XML-RPC server "
"errors, or :exc:`ProtocolError` used to signal an error in the HTTP/HTTPS "
"transport layer. Both :exc:`Fault` and :exc:`ProtocolError` derive from a "
"base class called :exc:`Error`.  Note that even though starting with Python "
"2.2 you can subclass built-in types, the xmlrpclib module currently does not "
"marshal instances of such subclasses."
msgstr ""

#: ../../library/xmlrpclib.rst:123
msgid ""
"When passing strings, characters special to XML such as ``<``, ``>``, and "
"``&`` will be automatically escaped.  However, it's the caller's "
"responsibility to ensure that the string is free of characters that aren't "
"allowed in XML, such as the control characters with ASCII values between 0 "
"and 31 (except, of course, tab, newline and carriage return); failing to do "
"this will result in an XML-RPC request that isn't well-formed XML.  If you "
"have to pass arbitrary strings via XML-RPC, use the :class:`Binary` wrapper "
"class described below."
msgstr ""

#: ../../library/xmlrpclib.rst:131
msgid ""
":class:`Server` is retained as an alias for :class:`ServerProxy` for "
"backwards compatibility.  New code should use :class:`ServerProxy`."
msgstr ""
":class:`Server` foi mantido como um apelido para :class:`ServerProxy` para "
"compatibilidade retroativa.  Código novo deve usar :class:`ServerProxy`."

#: ../../library/xmlrpclib.rst:134 ../../library/xmlrpclib.rst:557
msgid "The *use_datetime* flag was added."
msgstr ""

#: ../../library/xmlrpclib.rst:137
msgid ""
"Instances of :term:`new-style class`\\es can be passed in if they have an "
"*__dict__* attribute and don't have a base class that is marshalled in a "
"special way."
msgstr ""

#: ../../library/xmlrpclib.rst:142
msgid "Added the *context* argument."
msgstr "Argumento *context* adicionado."

#: ../../library/xmlrpclib.rst:150
msgid "`XML-RPC HOWTO <http://www.tldp.org/HOWTO/XML-RPC-HOWTO/index.html>`_"
msgstr ""

#: ../../library/xmlrpclib.rst:149
msgid ""
"A good description of XML-RPC operation and client software in several "
"languages. Contains pretty much everything an XML-RPC client developer needs "
"to know."
msgstr ""
"Uma boa descrição das operações XML-RPC e software cliente em vários "
"idiomas. Contém praticamente tudo o que um desenvolvedor de clientes XML-RPC "
"precisa saber."

#: ../../library/xmlrpclib.rst:153
msgid ""
"`XML-RPC Introspection <http://xmlrpc-c.sourceforge.net/introspection.html>`_"
msgstr ""

#: ../../library/xmlrpclib.rst:153
msgid "Describes the XML-RPC protocol extension for introspection."
msgstr "Describe a extensão do protocolo XML-RPC para instrospecção."

#: ../../library/xmlrpclib.rst:156
msgid "`XML-RPC Specification <http://www.xmlrpc.com/spec>`_"
msgstr ""

#: ../../library/xmlrpclib.rst:156
msgid "The official specification."
msgstr "A especificação oficial."

#: ../../library/xmlrpclib.rst:161
msgid "`Unofficial XML-RPC Errata <http://effbot.org/zone/xmlrpc-errata.htm>`_"
msgstr ""

#: ../../library/xmlrpclib.rst:159
msgid ""
"Fredrik Lundh's \"unofficial errata, intended to clarify certain details in "
"the XML-RPC specification, as well as hint at 'best practices' to use when "
"designing your own XML-RPC implementations.\""
msgstr ""

#: ../../library/xmlrpclib.rst:167
msgid "ServerProxy Objects"
msgstr "Objetos ServerProxy"

#: ../../library/xmlrpclib.rst:169
msgid ""
"A :class:`ServerProxy` instance has a method corresponding to each remote "
"procedure call accepted by the XML-RPC server.  Calling the method performs "
"an RPC, dispatched by both name and argument signature (e.g. the same method "
"name can be overloaded with multiple argument signatures).  The RPC finishes "
"by returning a value, which may be either returned data in a conformant type "
"or a :class:`Fault` or :class:`ProtocolError` object indicating an error."
msgstr ""

#: ../../library/xmlrpclib.rst:176
msgid ""
"Servers that support the XML introspection API support some common methods "
"grouped under the reserved :attr:`~ServerProxy.system` attribute:"
msgstr ""

#: ../../library/xmlrpclib.rst:182
msgid ""
"This method returns a list of strings, one for each (non-system) method "
"supported by the XML-RPC server."
msgstr ""

#: ../../library/xmlrpclib.rst:188
msgid ""
"This method takes one parameter, the name of a method implemented by the XML-"
"RPC server. It returns an array of possible signatures for this method. A "
"signature is an array of types. The first of these types is the return type "
"of the method, the rest are parameters."
msgstr ""

#: ../../library/xmlrpclib.rst:193
msgid ""
"Because multiple signatures (ie. overloading) is permitted, this method "
"returns a list of signatures rather than a singleton."
msgstr ""

#: ../../library/xmlrpclib.rst:196
msgid ""
"Signatures themselves are restricted to the top level parameters expected by "
"a method. For instance if a method expects one array of structs as a "
"parameter, and it returns a string, its signature is simply \"string, "
"array\". If it expects three integers and returns a string, its signature is "
"\"string, int, int, int\"."
msgstr ""

#: ../../library/xmlrpclib.rst:201
msgid ""
"If no signature is defined for the method, a non-array value is returned. In "
"Python this means that the type of the returned  value will be something "
"other than list."
msgstr ""

#: ../../library/xmlrpclib.rst:208
msgid ""
"This method takes one parameter, the name of a method implemented by the XML-"
"RPC server.  It returns a documentation string describing the use of that "
"method. If no such string is available, an empty string is returned. The "
"documentation string may contain HTML markup."
msgstr ""

#: ../../library/xmlrpclib.rst:217
msgid "Boolean Objects"
msgstr "Objetos Boolenos"

#: ../../library/xmlrpclib.rst:219
msgid ""
"This class may be initialized from any Python value; the instance returned "
"depends only on its truth value.  It supports various Python operators "
"through :meth:`__cmp__`, :meth:`__repr__`, :meth:`__int__`, and :meth:"
"`__nonzero__` methods, all implemented in the obvious ways."
msgstr ""

#: ../../library/xmlrpclib.rst:224
msgid ""
"It also has the following method, supported mainly for internal use by the "
"unmarshalling code:"
msgstr ""

#: ../../library/xmlrpclib.rst:230
msgid ""
"Write the XML-RPC encoding of this Boolean item to the out stream object."
msgstr ""

#: ../../library/xmlrpclib.rst:232 ../../library/xmlrpclib.rst:279
msgid "A working example follows. The server code::"
msgstr ""

#: ../../library/xmlrpclib.rst:245 ../../library/xmlrpclib.rst:294
#: ../../library/xmlrpclib.rst:404 ../../library/xmlrpclib.rst:512
msgid "The client code for the preceding server::"
msgstr ""

#: ../../library/xmlrpclib.rst:256
msgid "DateTime Objects"
msgstr "Objetos DateTime"

#: ../../library/xmlrpclib.rst:260
msgid ""
"This class may be initialized with seconds since the epoch, a time tuple, an "
"ISO 8601 time/date string, or a :class:`datetime.datetime` instance.  It has "
"the following methods, supported mainly for internal use by the marshalling/"
"unmarshalling code:"
msgstr ""

#: ../../library/xmlrpclib.rst:268
msgid "Accept a string as the instance's new time value."
msgstr ""

#: ../../library/xmlrpclib.rst:273
msgid ""
"Write the XML-RPC encoding of this :class:`DateTime` item to the *out* "
"stream object."
msgstr ""

#: ../../library/xmlrpclib.rst:276
msgid ""
"It also supports certain of Python's built-in operators through :meth:"
"`__cmp__` and :meth:`__repr__` methods."
msgstr ""

#: ../../library/xmlrpclib.rst:309
msgid "Binary Objects"
msgstr "Objetos Binários"

#: ../../library/xmlrpclib.rst:313
msgid ""
"This class may be initialized from string data (which may include NULs). The "
"primary access to the content of a :class:`Binary` object is provided by an "
"attribute:"
msgstr ""

#: ../../library/xmlrpclib.rst:320
msgid ""
"The binary data encapsulated by the :class:`Binary` instance.  The data is "
"provided as an 8-bit string."
msgstr ""

#: ../../library/xmlrpclib.rst:323
msgid ""
":class:`Binary` objects have the following methods, supported mainly for "
"internal use by the marshalling/unmarshalling code:"
msgstr ""

#: ../../library/xmlrpclib.rst:329
msgid "Accept a base64 string and decode it as the instance's new data."
msgstr ""

#: ../../library/xmlrpclib.rst:334
msgid ""
"Write the XML-RPC base 64 encoding of this binary item to the *out* stream "
"object."
msgstr ""

#: ../../library/xmlrpclib.rst:336
msgid ""
"The encoded data will have newlines every 76 characters as per `RFC 2045 "
"section 6.8 <https://tools.ietf.org/html/rfc2045#section-6.8>`_, which was "
"the de facto standard base64 specification when the XML-RPC spec was written."
msgstr ""

#: ../../library/xmlrpclib.rst:341
msgid ""
"It also supports certain of Python's built-in operators through a :meth:"
"`__cmp__` method."
msgstr ""

#: ../../library/xmlrpclib.rst:344
msgid ""
"Example usage of the binary objects.  We're going to transfer an image over "
"XMLRPC::"
msgstr ""

#: ../../library/xmlrpclib.rst:360
msgid "The client gets the image and saves it to a file::"
msgstr ""

#: ../../library/xmlrpclib.rst:371
msgid "Fault Objects"
msgstr "Objetos Fault"

#: ../../library/xmlrpclib.rst:375
msgid ""
"A :class:`Fault` object encapsulates the content of an XML-RPC fault tag. "
"Fault objects have the following attributes:"
msgstr ""

#: ../../library/xmlrpclib.rst:381
msgid "A string indicating the fault type."
msgstr ""

#: ../../library/xmlrpclib.rst:386
msgid "A string containing a diagnostic message associated with the fault."
msgstr ""

#: ../../library/xmlrpclib.rst:388
msgid ""
"In the following example we're going to intentionally cause a :exc:`Fault` "
"by returning a complex type object.  The server code::"
msgstr ""

#: ../../library/xmlrpclib.rst:421
msgid "ProtocolError Objects"
msgstr "Objeto ProtocolError"

#: ../../library/xmlrpclib.rst:425
msgid ""
"A :class:`ProtocolError` object describes a protocol error in the underlying "
"transport layer (such as a 404 'not found' error if the server named by the "
"URI does not exist).  It has the following attributes:"
msgstr ""

#: ../../library/xmlrpclib.rst:432
msgid "The URI or URL that triggered the error."
msgstr ""

#: ../../library/xmlrpclib.rst:437
msgid "The error code."
msgstr "O código do erro."

#: ../../library/xmlrpclib.rst:442
msgid "The error message or diagnostic string."
msgstr ""

#: ../../library/xmlrpclib.rst:447
msgid ""
"A string containing the headers of the HTTP/HTTPS request that triggered the "
"error."
msgstr ""

#: ../../library/xmlrpclib.rst:450
msgid ""
"In the following example we're going to intentionally cause a :exc:"
"`ProtocolError` by providing a URI that doesn't point to an XMLRPC server::"
msgstr ""

#: ../../library/xmlrpclib.rst:468
msgid "MultiCall Objects"
msgstr "Objetos MultiCall"

#: ../../library/xmlrpclib.rst:472
msgid ""
"The :class:`MultiCall` object provides a way to encapsulate multiple calls "
"to a remote server into a single request [#]_."
msgstr ""

#: ../../library/xmlrpclib.rst:478
msgid ""
"Create an object used to boxcar method calls. *server* is the eventual "
"target of the call. Calls can be made to the result object, but they will "
"immediately return ``None``, and only store the call name and parameters in "
"the :class:`MultiCall` object. Calling the object itself causes all stored "
"calls to be transmitted as a single ``system.multicall`` request. The result "
"of this call is a :term:`generator`; iterating over this generator yields "
"the individual results."
msgstr ""

#: ../../library/xmlrpclib.rst:486
msgid "A usage example of this class follows.  The server code ::"
msgstr ""

#: ../../library/xmlrpclib.rst:528
msgid "Convenience Functions"
msgstr ""

#: ../../library/xmlrpclib.rst:533
msgid ""
"Convert any Python value to one of the XML-RPC Boolean constants, ``True`` "
"or ``False``."
msgstr ""

#: ../../library/xmlrpclib.rst:539
msgid ""
"Convert *params* into an XML-RPC request. or into a response if "
"*methodresponse* is true. *params* can be either a tuple of arguments or an "
"instance of the :exc:`Fault` exception class.  If *methodresponse* is true, "
"only a single value can be returned, meaning that *params* must be of length "
"1. *encoding*, if supplied, is the encoding to use in the generated XML; the "
"default is UTF-8. Python's :const:`None` value cannot be used in standard "
"XML-RPC; to allow using it via an extension,  provide a true value for "
"*allow_none*."
msgstr ""

#: ../../library/xmlrpclib.rst:550
msgid ""
"Convert an XML-RPC request or response into Python objects, a ``(params, "
"methodname)``.  *params* is a tuple of argument; *methodname* is a string, "
"or ``None`` if no method name is present in the packet. If the XML-RPC "
"packet represents a fault condition, this function will raise a :exc:`Fault` "
"exception. The *use_datetime* flag can be used to cause date/time values to "
"be presented as :class:`datetime.datetime` objects; this is false by default."
msgstr ""

#: ../../library/xmlrpclib.rst:564
msgid "Example of Client Usage"
msgstr "Exemplo de uso do cliente"

#: ../../library/xmlrpclib.rst:581
msgid ""
"To access an XML-RPC server through a HTTP proxy, you need to define a "
"custom transport.  The following example shows how:"
msgstr ""

#: ../../library/xmlrpclib.rst:612
msgid "Example of Client and Server Usage"
msgstr ""

#: ../../library/xmlrpclib.rst:614
msgid "See :ref:`simplexmlrpcserver-example`."
msgstr ""

#: ../../library/xmlrpclib.rst:618
msgid "Footnotes"
msgstr "Notas de Rodapé"

#: ../../library/xmlrpclib.rst:619
msgid ""
"This approach has been first presented in `a discussion on xmlrpc.com "
"<https://web.archive.org/web/20060624230303/http://www.xmlrpc.com/discuss/"
"msgReader$1208?mode=topic>`_."
msgstr ""
