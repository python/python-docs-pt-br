# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Italo Penaforte <italo.penaforte@gmail.com>, 2021
# Adorilson Bezerra <adorilson@gmail.com>, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-31 14:16+0000\n"
"PO-Revision-Date: 2021-06-28 01:18+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/xmlrpc.server.rst:2
msgid ":mod:`!xmlrpc.server` --- Basic XML-RPC servers"
msgstr ":mod:`!xmlrpc.server` --- Servidores XML-RPC básicos"

#: ../../library/xmlrpc.server.rst:10
msgid "**Source code:** :source:`Lib/xmlrpc/server.py`"
msgstr "**Código-fonte:** :source:`Lib/xmlrpc/server.py`"

#: ../../library/xmlrpc.server.rst:14
msgid ""
"The :mod:`xmlrpc.server` module provides a basic server framework for XML-"
"RPC servers written in Python.  Servers can either be free standing, using :"
"class:`SimpleXMLRPCServer`, or embedded in a CGI environment, using :class:"
"`CGIXMLRPCRequestHandler`."
msgstr ""
"O módulo :mod:`xmlrpc.server` fornece um framework básico de servidor para "
"servidores XML-RPC escritos em Python. Os servidores podem ser "
"independentes, usando :class:`SimpleXMLRPCServer`, ou incorporados em um "
"ambiente CGI, usando :class:`CGIXMLRPCRequestHandler`."

#: ../../library/xmlrpc.server.rst:22
msgid ""
"The :mod:`xmlrpc.server` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data "
"see :ref:`xml-vulnerabilities`."
msgstr ""
"O módulo :mod:`xmlrpc.server` não é seguro contra dados criados com códigos "
"maliciosos. Se você precisar analisar dados não confiáveis ou não "
"autenticados, consulte :ref:`xml-vulnerabilities`."

#: ../../includes/wasm-notavail.rst:3
msgid "Availability"
msgstr "Disponibilidade"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See :ref:`wasm-"
"availability` for more information."
msgstr ""
"Este módulo não funciona ou não está disponível em WebAssembly. Veja :ref:"
"`wasm-availability` para mais informações."

#: ../../library/xmlrpc.server.rst:32
msgid ""
"Create a new server instance.  This class provides methods for registration "
"of functions that can be called by the XML-RPC protocol.  The "
"*requestHandler* parameter should be a factory for request handler "
"instances; it defaults to :class:`SimpleXMLRPCRequestHandler`.  The *addr* "
"and *requestHandler* parameters are passed to the :class:`socketserver."
"TCPServer` constructor.  If *logRequests* is true (the default), requests "
"will be logged; setting this parameter to false will turn off logging.   The "
"*allow_none* and *encoding* parameters are passed on to :mod:`xmlrpc.client` "
"and control the XML-RPC responses that will be returned from the server. The "
"*bind_and_activate* parameter controls whether :meth:`server_bind` and :meth:"
"`server_activate` are called immediately by the constructor; it defaults to "
"true. Setting it to false allows code to manipulate the "
"*allow_reuse_address* class variable before the address is bound. The "
"*use_builtin_types* parameter is passed to the :func:`~xmlrpc.client.loads` "
"function and controls which types are processed when date/times values or "
"binary data are received; it defaults to false."
msgstr ""
"Cria uma nova instância do servidor. Esta classe fornece métodos para "
"registro de funções que podem ser chamadas pelo protocolo XML-RPC. O "
"parâmetro *requestHandler* deve ser uma fábrica para instâncias do tratador "
"de solicitações; o padrão é :class:`SimpleXMLRPCRequestHandler`. Os "
"parâmetros *addr* e *requestHandler* são passados ​para o construtor :class:"
"`socketserver.TCPServer`. Se *logRequests* for true (o padrão), as "
"solicitações serão registradas; definir esse parâmetro como false desativará "
"os registros. Os parâmetros *allow_none* e *encoding* são transmitidos para :"
"mod:`xmlrpc.client` e controlam as respostas XML-RPC que serão retornadas do "
"servidor. O parâmetro *bind_and_activate* controla se :meth:`server_bind` e :"
"meth:`server_activate` são chamados imediatamente pelo construtor; o padrão "
"é true. A configuração como false permite que o código manipule a variável "
"de classe *allow_reuse_address* antes que o endereço seja vinculado. O "
"parâmetro *use_builtin_types* é passado para a função :func:`~xmlrpc.client."
"loads` e controla quais tipos são processados ​quando valores de data/hora ou "
"dados binários são recebidos; o padrão é false."

#: ../../library/xmlrpc.server.rst:48 ../../library/xmlrpc.server.rst:62
#: ../../library/xmlrpc.server.rst:374
msgid "The *use_builtin_types* flag was added."
msgstr "O sinalizador *use_builtin_types* foi adicionado."

#: ../../library/xmlrpc.server.rst:55
msgid ""
"Create a new instance to handle XML-RPC requests in a CGI environment.  The "
"*allow_none* and *encoding* parameters are passed on to :mod:`xmlrpc.client` "
"and control the XML-RPC responses that will be returned from the server. The "
"*use_builtin_types* parameter is passed to the :func:`~xmlrpc.client.loads` "
"function and controls which types are processed when date/times values or "
"binary data are received; it defaults to false."
msgstr ""
"Cria uma nova instância para manipular solicitações XML-RPC em um ambiente "
"CGI. Os parâmetros *allow_none* e *encoding* são transmitidos para :mod:"
"`xmlrpc.client` e controlam as respostas XML-RPC que serão retornadas do "
"servidor. O parâmetro *use_builtin_types* é passado para a função :func:"
"`~xmlrpc.client.loads` e controla quais tipos são processados quando valores "
"de data/hora ou dados binários são recebidos; o padrão é false."

#: ../../library/xmlrpc.server.rst:68
msgid ""
"Create a new request handler instance.  This request handler supports "
"``POST`` requests and modifies logging so that the *logRequests* parameter "
"to the :class:`SimpleXMLRPCServer` constructor parameter is honored."
msgstr ""
"Cria uma nova instância do manipulador de solicitações. Este manipulador de "
"solicitação possui suporte a solicitações ``POST`` e modifica o registro "
"para que o parâmetro *logRequests* para o construtor de :class:"
"`SimpleXMLRPCServer` seja respeitado."

#: ../../library/xmlrpc.server.rst:76
msgid "SimpleXMLRPCServer Objects"
msgstr "Objetos de SimpleXMLRPCServer"

#: ../../library/xmlrpc.server.rst:78
msgid ""
"The :class:`SimpleXMLRPCServer` class is based on :class:`socketserver."
"TCPServer` and provides a means of creating simple, stand alone XML-RPC "
"servers."
msgstr ""
"A classe :class:`SimpleXMLRPCServer` é baseada em :class:`socketserver."
"TCPServer` e fornece um meio de criar servidores XML-RPC simples e "
"independentes."

#: ../../library/xmlrpc.server.rst:85 ../../library/xmlrpc.server.rst:299
msgid ""
"Register a function that can respond to XML-RPC requests.  If *name* is "
"given, it will be the method name associated with *function*, otherwise :"
"attr:`function.__name__` will be used.  *name* is a string, and may contain "
"characters not legal in Python identifiers, including the period character."
msgstr ""
"Registra uma função que possa responder às solicitações XML-RPC. Se *name* "
"for fornecido, será o nome do método associado a *function*, caso "
"contrário, :attr:`function.__name__` será usado. *name* é uma string e pode "
"conter caracteres ilegais para identificadores Python, incluindo o caractere "
"de ponto."

#: ../../library/xmlrpc.server.rst:90 ../../library/xmlrpc.server.rst:304
msgid ""
"This method can also be used as a decorator.  When used as a decorator, "
"*name* can only be given as a keyword argument to register *function* under "
"*name*.  If no *name* is given, :attr:`function.__name__` will be used."
msgstr ""
"Este método também pode ser usado como um decorador. Quando usado como "
"decorador, *name* só pode ser fornecido como argumento nomeado para "
"registrar *function* em *name*. Se nenhum *name* for fornecido, :attr:"
"`function.__name__` será usado."

#: ../../library/xmlrpc.server.rst:94 ../../library/xmlrpc.server.rst:308
msgid ":meth:`register_function` can be used as a decorator."
msgstr ":meth:`register_function` pode ser usado como um decorador."

#: ../../library/xmlrpc.server.rst:100
msgid ""
"Register an object which is used to expose method names which have not been "
"registered using :meth:`register_function`.  If *instance* contains a :meth:"
"`_dispatch` method, it is called with the requested method name and the "
"parameters from the request.  Its API is ``def _dispatch(self, method, "
"params)`` (note that *params* does not represent a variable argument list).  "
"If it calls an underlying function to perform its task, that function is "
"called as ``func(*params)``, expanding the parameter list. The return value "
"from :meth:`_dispatch` is returned to the client as the result.  If "
"*instance* does not have a :meth:`_dispatch` method, it is searched for an "
"attribute matching the name of the requested method."
msgstr ""
"Registra um objeto que é usado para expor nomes de métodos que não foram "
"registrados usando :meth:`register_function`. Se *instance* contiver um "
"método :meth:`_dispatch`, ele será chamado com o nome do método solicitado e "
"os parâmetros da solicitação. Sua API é ``def _dispatch(self, method, "
"params)`` (observe que *params* não representa uma lista de argumentos "
"variáveis). Se ele chama uma função subjacente para executar sua tarefa, "
"essa função é chamada como ``func(*params)``, expandindo a lista de "
"parâmetros. O valor de retorno de :meth:`_dispatch` é retornado ao cliente "
"como resultado. Se *instance* não possui o método :meth:`_dispatch`, é "
"procurado por um atributo correspondente ao nome do método solicitado."

#: ../../library/xmlrpc.server.rst:111
msgid ""
"If the optional *allow_dotted_names* argument is true and the instance does "
"not have a :meth:`_dispatch` method, then if the requested method name "
"contains periods, each component of the method name is searched for "
"individually, with the effect that a simple hierarchical search is "
"performed.  The value found from this search is then called with the "
"parameters from the request, and the return value is passed back to the "
"client."
msgstr ""
"Se o argumento opcional *allow_dotted_names* for true e a instância não "
"tiver o método :meth:`_dispatch`, e se o nome do método solicitado contiver "
"pontos, cada componente do nome do método será pesquisado individualmente, "
"com o efeito de que um simples pesquisa hierárquica é realizada. O valor "
"encontrado nessa pesquisa é chamado com os parâmetros da solicitação e o "
"valor retornado é passado de volta ao cliente."

#: ../../library/xmlrpc.server.rst:120
msgid ""
"Enabling the *allow_dotted_names* option allows intruders to access your "
"module's global variables and may allow intruders to execute arbitrary code "
"on your machine.  Only use this option on a secure, closed network."
msgstr ""
"A ativação da opção *allow_dotted_names* permite que os invasores acessem as "
"variáveis globais do seu módulo e podem permitir que os invasores executem "
"códigos arbitrários em sua máquina. Use esta opção apenas em uma rede "
"fechada e segura."

#: ../../library/xmlrpc.server.rst:127
msgid ""
"Registers the XML-RPC introspection functions ``system.listMethods``, "
"``system.methodHelp`` and ``system.methodSignature``."
msgstr ""
"Registra as funções de introspecção XML-RPC ``system.listMethods``, ``system."
"methodHelp`` e ``system.methodSignature``."

#: ../../library/xmlrpc.server.rst:133
msgid "Registers the XML-RPC multicall function system.multicall."
msgstr "Registra a função de multichamada XML-RPC system.multicall."

#: ../../library/xmlrpc.server.rst:138
msgid ""
"An attribute value that must be a tuple listing valid path portions of the "
"URL for receiving XML-RPC requests.  Requests posted to other paths will "
"result in a 404 \"no such page\" HTTP error.  If this tuple is empty, all "
"paths will be considered valid. The default value is ``('/', '/RPC2')``."
msgstr ""
"Um valor de atributo que deve ser uma tupla listando partes do caminho "
"válidas da URL para receber solicitações XML-RPC. Solicitações postadas em "
"outros caminhos resultarão em um erro HTTP 404 \"página inexistente\". Se "
"esta tupla estiver vazia, todos os caminhos serão considerados válidos. O "
"valor padrão é ``('/', '/RPC2')``."

#: ../../library/xmlrpc.server.rst:147
msgid "SimpleXMLRPCServer Example"
msgstr "Exemplo de SimpleXMLRPCServer"

#: ../../library/xmlrpc.server.rst:148
msgid "Server code::"
msgstr "Código do servidor::"

#: ../../library/xmlrpc.server.rst:150
msgid ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"from xmlrpc.server import SimpleXMLRPCRequestHandler\n"
"\n"
"# Restrict to a particular path.\n"
"class RequestHandler(SimpleXMLRPCRequestHandler):\n"
"    rpc_paths = ('/RPC2',)\n"
"\n"
"# Create server\n"
"with SimpleXMLRPCServer(('localhost', 8000),\n"
"                        requestHandler=RequestHandler) as server:\n"
"    server.register_introspection_functions()\n"
"\n"
"    # Register pow() function; this will use the value of\n"
"    # pow.__name__ as the name, which is just 'pow'.\n"
"    server.register_function(pow)\n"
"\n"
"    # Register a function under a different name\n"
"    def adder_function(x, y):\n"
"        return x + y\n"
"    server.register_function(adder_function, 'add')\n"
"\n"
"    # Register an instance; all the methods of the instance are\n"
"    # published as XML-RPC methods (in this case, just 'mul').\n"
"    class MyFuncs:\n"
"        def mul(self, x, y):\n"
"            return x * y\n"
"\n"
"    server.register_instance(MyFuncs())\n"
"\n"
"    # Run the server's main loop\n"
"    server.serve_forever()"
msgstr ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"from xmlrpc.server import SimpleXMLRPCRequestHandler\n"
"\n"
"# Restringe a um caminho em particular.\n"
"class RequestHandler(SimpleXMLRPCRequestHandler):\n"
"    rpc_paths = ('/RPC2',)\n"
"\n"
"# Cria o servidor\n"
"with SimpleXMLRPCServer(('localhost', 8000),\n"
"                        requestHandler=RequestHandler) as server:\n"
"    server.register_introspection_functions()\n"
"\n"
"    # Registra uma função pow(); isso vai usar o valor de\n"
"    # pow.__name__ como o nome, que é apenas 'pow'.\n"
"    server.register_function(pow)\n"
"\n"
"    # Registra uma função sob um nome diferente\n"
"    def adder_function(x, y):\n"
"        return x + y\n"
"    server.register_function(adder_function, 'add')\n"
"\n"
"    # Registra uma instância; todos os métodos da instância\n"
"    # são publicados como métodos XML-RPC (neste caso,\n"
"    # apenas 'mul').\n"
"    class MyFuncs:\n"
"        def mul(self, x, y):\n"
"            return x * y\n"
"\n"
"    server.register_instance(MyFuncs())\n"
"\n"
"    # Executa o laço principal do servidor\n"
"    server.serve_forever()"

#: ../../library/xmlrpc.server.rst:182
msgid ""
"The following client code will call the methods made available by the "
"preceding server::"
msgstr ""
"O código do cliente a seguir chamará os métodos disponibilizados pelo "
"servidor anterior::"

#: ../../library/xmlrpc.server.rst:185
msgid ""
"import xmlrpc.client\n"
"\n"
"s = xmlrpc.client.ServerProxy('http://localhost:8000')\n"
"print(s.pow(2,3))  # Returns 2**3 = 8\n"
"print(s.add(2,3))  # Returns 5\n"
"print(s.mul(5,2))  # Returns 5*2 = 10\n"
"\n"
"# Print list of available methods\n"
"print(s.system.listMethods())"
msgstr ""
"import xmlrpc.client\n"
"\n"
"s = xmlrpc.client.ServerProxy('http://localhost:8000')\n"
"print(s.pow(2,3))  # Returns 2**3 = 8\n"
"print(s.add(2,3))  # Returns 5\n"
"print(s.mul(5,2))  # Returns 5*2 = 10\n"
"\n"
"# Exibe uma lista dos métodos disponíveis\n"
"print(s.system.listMethods())"

#: ../../library/xmlrpc.server.rst:195
msgid ""
":meth:`register_function` can also be used as a decorator. The previous "
"server example can register functions in a decorator way::"
msgstr ""
":meth:`register_function` também pode ser usado como um decorador. O exemplo "
"anterior do servidor pode registrar funções com um decorador::"

#: ../../library/xmlrpc.server.rst:198
msgid ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"from xmlrpc.server import SimpleXMLRPCRequestHandler\n"
"\n"
"class RequestHandler(SimpleXMLRPCRequestHandler):\n"
"    rpc_paths = ('/RPC2',)\n"
"\n"
"with SimpleXMLRPCServer(('localhost', 8000),\n"
"                        requestHandler=RequestHandler) as server:\n"
"    server.register_introspection_functions()\n"
"\n"
"    # Register pow() function; this will use the value of\n"
"    # pow.__name__ as the name, which is just 'pow'.\n"
"    server.register_function(pow)\n"
"\n"
"    # Register a function under a different name, using\n"
"    # register_function as a decorator. *name* can only be given\n"
"    # as a keyword argument.\n"
"    @server.register_function(name='add')\n"
"    def adder_function(x, y):\n"
"        return x + y\n"
"\n"
"    # Register a function under function.__name__.\n"
"    @server.register_function\n"
"    def mul(x, y):\n"
"        return x * y\n"
"\n"
"    server.serve_forever()"
msgstr ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"from xmlrpc.server import SimpleXMLRPCRequestHandler\n"
"\n"
"class RequestHandler(SimpleXMLRPCRequestHandler):\n"
"    rpc_paths = ('/RPC2',)\n"
"\n"
"with SimpleXMLRPCServer(('localhost', 8000),\n"
"                        requestHandler=RequestHandler) as server:\n"
"    server.register_introspection_functions()\n"
"\n"
"    # Registra a função pow(); isso vai usar o valor de\n"
"    # pow.__name__ como o nome, que é apenas 'pow'.\n"
"    server.register_function(pow)\n"
"\n"
"    # Registra uma função sob um nome diferente, usando\n"
"    # register_function como um decorador. *name* só pode\n"
"    # ser dado como um argumento nomeado.\n"
"    @server.register_function(name='add')\n"
"    def adder_function(x, y):\n"
"        return x + y\n"
"\n"
"    # Registra uma função sob function.__name__.\n"
"    @server.register_function\n"
"    def mul(x, y):\n"
"        return x * y\n"
"\n"
"    server.serve_forever()"

#: ../../library/xmlrpc.server.rst:226
msgid ""
"The following example included in the :file:`Lib/xmlrpc/server.py` module "
"shows a server allowing dotted names and registering a multicall function."
msgstr ""
"O exemplo a seguir, incluído no módulo :file:`Lib/xmlrpc/server.py`, mostra "
"um servidor que permite nomes com pontos e registra uma função de várias "
"chamadas."

#: ../../library/xmlrpc.server.rst:231
msgid ""
"Enabling the *allow_dotted_names* option allows intruders to access your "
"module's global variables and may allow intruders to execute arbitrary code "
"on your machine.  Only use this example only within a secure, closed network."
msgstr ""
"A ativação da opção *allow_dotted_names* permite que os invasores acessem as "
"variáveis globais do seu módulo e podem permitir que os invasores executem "
"códigos arbitrários em sua máquina. Use este exemplo apenas em uma rede "
"fechada e segura."

#: ../../library/xmlrpc.server.rst:237
msgid ""
"import datetime\n"
"\n"
"class ExampleService:\n"
"    def getData(self):\n"
"        return '42'\n"
"\n"
"    class currentTime:\n"
"        @staticmethod\n"
"        def getCurrentTime():\n"
"            return datetime.datetime.now()\n"
"\n"
"with SimpleXMLRPCServer((\"localhost\", 8000)) as server:\n"
"    server.register_function(pow)\n"
"    server.register_function(lambda x,y: x+y, 'add')\n"
"    server.register_instance(ExampleService(), allow_dotted_names=True)\n"
"    server.register_multicall_functions()\n"
"    print('Serving XML-RPC on localhost port 8000')\n"
"    try:\n"
"        server.serve_forever()\n"
"    except KeyboardInterrupt:\n"
"        print(\"\\nKeyboard interrupt received, exiting.\")\n"
"        sys.exit(0)"
msgstr ""
"import datetime\n"
"\n"
"class ExampleService:\n"
"    def getData(self):\n"
"        return '42'\n"
"\n"
"    class currentTime:\n"
"        @staticmethod\n"
"        def getCurrentTime():\n"
"            return datetime.datetime.now()\n"
"\n"
"with SimpleXMLRPCServer((\"localhost\", 8000)) as server:\n"
"    server.register_function(pow)\n"
"    server.register_function(lambda x,y: x+y, 'add')\n"
"    server.register_instance(ExampleService(), allow_dotted_names=True)\n"
"    server.register_multicall_functions()\n"
"    print('Serving XML-RPC on localhost port 8000')\n"
"    try:\n"
"        server.serve_forever()\n"
"    except KeyboardInterrupt:\n"
"        print(\"\\nKeyboard interrupt received, exiting.\")\n"
"        sys.exit(0)"

#: ../../library/xmlrpc.server.rst:260
msgid "This ExampleService demo can be invoked from the command line::"
msgstr ""
"Esta demonstração ExampleService pode ser chamada na linha de comando::"

#: ../../library/xmlrpc.server.rst:262
msgid "python -m xmlrpc.server"
msgstr "python -m xmlrpc.server"

#: ../../library/xmlrpc.server.rst:265
msgid ""
"The client that interacts with the above server is included in ``Lib/xmlrpc/"
"client.py``::"
msgstr ""
"O cliente que interage com o servidor acima está incluído em ``Lib/xmlrpc/"
"client.py``::"

#: ../../library/xmlrpc.server.rst:268
msgid ""
"server = ServerProxy(\"http://localhost:8000\")\n"
"\n"
"try:\n"
"    print(server.currentTime.getCurrentTime())\n"
"except Error as v:\n"
"    print(\"ERROR\", v)\n"
"\n"
"multi = MultiCall(server)\n"
"multi.getData()\n"
"multi.pow(2,9)\n"
"multi.add(1,2)\n"
"try:\n"
"    for response in multi():\n"
"        print(response)\n"
"except Error as v:\n"
"    print(\"ERROR\", v)"
msgstr ""
"server = ServerProxy(\"http://localhost:8000\")\n"
"\n"
"try:\n"
"    print(server.currentTime.getCurrentTime())\n"
"except Error as v:\n"
"    print(\"ERROR\", v)\n"
"\n"
"multi = MultiCall(server)\n"
"multi.getData()\n"
"multi.pow(2,9)\n"
"multi.add(1,2)\n"
"try:\n"
"    for response in multi():\n"
"        print(response)\n"
"except Error as v:\n"
"    print(\"ERROR\", v)"

#: ../../library/xmlrpc.server.rst:285
msgid ""
"This client which interacts with the demo XMLRPC server can be invoked as::"
msgstr ""
"Este cliente que interage com o servidor XMLRPC de demonstração pode ser "
"chamado como::"

#: ../../library/xmlrpc.server.rst:287
msgid "python -m xmlrpc.client"
msgstr "python -m xmlrpc.client"

#: ../../library/xmlrpc.server.rst:291
msgid "CGIXMLRPCRequestHandler"
msgstr "CGIXMLRPCRequestHandler"

#: ../../library/xmlrpc.server.rst:293
msgid ""
"The :class:`CGIXMLRPCRequestHandler` class can be used to handle XML-RPC "
"requests sent to Python CGI scripts."
msgstr ""
"A classe :class:`CGIXMLRPCRequestHandler` pode ser usada para manipular "
"solicitações XML-RPC enviadas para scripts CGI Python."

#: ../../library/xmlrpc.server.rst:314
msgid ""
"Register an object which is used to expose method names  which have not been "
"registered using :meth:`register_function`. If  instance contains a :meth:"
"`_dispatch` method, it is called with the  requested method name and the "
"parameters from the  request; the return value is returned to the client as "
"the result. If instance does not have a :meth:`_dispatch` method, it is "
"searched for an attribute matching the name of the requested method; if  the "
"requested method name contains periods, each  component of the method name "
"is searched for individually,  with the effect that a simple hierarchical "
"search is performed. The value found from this search is then called with "
"the  parameters from the request, and the return value is passed  back to "
"the client."
msgstr ""
"Registra um objeto que é usado para expor nomes de métodos que não foram "
"registrados usando :meth:`register_function`. Se a instância contiver um "
"método :meth:`_dispatch`, ela será chamada com o nome do método solicitado e "
"os parâmetros da solicitação; o valor retornado é retornado ao cliente como "
"resultado. Se a instância não tiver um método :meth:`_dispatch`, será "
"procurado um atributo correspondente ao nome do método solicitado; se o nome "
"do método solicitado contiver pontos, cada componente do nome do método será "
"pesquisado individualmente, com o efeito de que uma pesquisa hierárquica "
"simples é executada. O valor encontrado nessa pesquisa é chamado com os "
"parâmetros da solicitação e o valor retornado é passado de volta ao cliente."

#: ../../library/xmlrpc.server.rst:328
msgid ""
"Register the XML-RPC introspection functions  ``system.listMethods``, "
"``system.methodHelp`` and  ``system.methodSignature``."
msgstr ""
"Registra as funções de introspecção XML-RPC ``system.listMethods``, ``system."
"methodHelp`` e ``system.methodSignature``."

#: ../../library/xmlrpc.server.rst:334
msgid "Register the XML-RPC multicall function ``system.multicall``."
msgstr "Registra a função de multichamada XML-RPC ``system.multicall``."

#: ../../library/xmlrpc.server.rst:339
msgid ""
"Handle an XML-RPC request. If *request_text* is given, it should be the POST "
"data provided by the HTTP server,  otherwise the contents of stdin will be "
"used."
msgstr ""
"Manipula uma solicitação XML-RPC. Se *request_text* for fornecido, devem ser "
"os dados POST fornecidos pelo servidor HTTP, caso contrário, o conteúdo do "
"stdin será usado."

#: ../../library/xmlrpc.server.rst:342
msgid "Example::"
msgstr "Exemplo::"

#: ../../library/xmlrpc.server.rst:344
msgid ""
"class MyFuncs:\n"
"    def mul(self, x, y):\n"
"        return x * y\n"
"\n"
"\n"
"handler = CGIXMLRPCRequestHandler()\n"
"handler.register_function(pow)\n"
"handler.register_function(lambda x,y: x+y, 'add')\n"
"handler.register_introspection_functions()\n"
"handler.register_instance(MyFuncs())\n"
"handler.handle_request()"
msgstr ""
"class MyFuncs:\n"
"    def mul(self, x, y):\n"
"        return x * y\n"
"\n"
"\n"
"handler = CGIXMLRPCRequestHandler()\n"
"handler.register_function(pow)\n"
"handler.register_function(lambda x,y: x+y, 'add')\n"
"handler.register_introspection_functions()\n"
"handler.register_instance(MyFuncs())\n"
"handler.handle_request()"

#: ../../library/xmlrpc.server.rst:358
msgid "Documenting XMLRPC server"
msgstr "Documentando servidor XMLRPC"

#: ../../library/xmlrpc.server.rst:360
msgid ""
"These classes extend the above classes to serve HTML documentation in "
"response to HTTP GET requests.  Servers can either be free standing, using :"
"class:`DocXMLRPCServer`, or embedded in a CGI environment, using :class:"
"`DocCGIXMLRPCRequestHandler`."
msgstr ""
"Essas classes estendem as classes acima para servir a documentação HTML em "
"resposta a solicitações HTTP GET. Os servidores podem ser independentes, "
"usando :class:`DocXMLRPCServer` ou incorporados em um ambiente CGI, usando :"
"class:`DocCGIXMLRPCRequestHandler`."

#: ../../library/xmlrpc.server.rst:370
msgid ""
"Create a new server instance. All parameters have the same meaning as for :"
"class:`SimpleXMLRPCServer`; *requestHandler* defaults to :class:"
"`DocXMLRPCRequestHandler`."
msgstr ""
"Cria uma nova instância do servidor. Todos os parâmetros têm o mesmo "
"significado que para :class:`SimpleXMLRPCServer`; *requestHandler* assume "
"como padrão :class:`DocXMLRPCRequestHandler`."

#: ../../library/xmlrpc.server.rst:380
msgid "Create a new instance to handle XML-RPC requests in a CGI environment."
msgstr ""
"Cria uma nova instância para manipular solicitações XML-RPC em um ambiente "
"CGI."

#: ../../library/xmlrpc.server.rst:385
msgid ""
"Create a new request handler instance. This request handler supports XML-RPC "
"POST requests, documentation GET requests, and modifies logging so that the "
"*logRequests* parameter to the :class:`DocXMLRPCServer` constructor "
"parameter is honored."
msgstr ""
"Cria uma nova instância do manipulador de solicitações. Este manipulador de "
"solicitações possui suporte a solicitações POST de XML-RPC, documenta "
"solicitações GET e modifica o registro para que o parâmetro *logRequests* no "
"parâmetro :class:`DocXMLRPCServer` seja respeitado."

#: ../../library/xmlrpc.server.rst:394
msgid "DocXMLRPCServer Objects"
msgstr "Objetos de DocXMLRPCServer"

#: ../../library/xmlrpc.server.rst:396
msgid ""
"The :class:`DocXMLRPCServer` class is derived from :class:"
"`SimpleXMLRPCServer` and provides a means of creating self-documenting, "
"stand alone XML-RPC servers. HTTP POST requests are handled as XML-RPC "
"method calls. HTTP GET requests are handled by generating pydoc-style HTML "
"documentation. This allows a server to provide its own web-based "
"documentation."
msgstr ""
"A classe :class:`DocXMLRPCServer` é derivada de :class:`SimpleXMLRPCServer` "
"e fornece um meio de criar servidores XML-RPC autodocumentados e "
"independentes. Solicitações HTTP POST são tratadas como chamadas de método "
"XML-RPC. As solicitações HTTP GET são tratadas gerando documentação HTML no "
"estilo pydoc. Isso permite que um servidor forneça sua própria documentação "
"baseada na Web."

#: ../../library/xmlrpc.server.rst:405 ../../library/xmlrpc.server.rst:433
msgid ""
"Set the title used in the generated HTML documentation. This title will be "
"used inside the HTML \"title\" element."
msgstr ""
"Define o título usado na documentação HTML gerada. Este título será usado "
"dentro do elemento \"title\" do HTML."

#: ../../library/xmlrpc.server.rst:411 ../../library/xmlrpc.server.rst:439
msgid ""
"Set the name used in the generated HTML documentation. This name will appear "
"at the top of the generated documentation inside a \"h1\" element."
msgstr ""
"Define o nome usado na documentação HTML gerada. Este nome aparecerá na "
"parte superior da documentação gerada dentro de um elemento \"h1\"."

#: ../../library/xmlrpc.server.rst:417 ../../library/xmlrpc.server.rst:445
msgid ""
"Set the description used in the generated HTML documentation. This "
"description will appear as a paragraph, below the server name, in the "
"documentation."
msgstr ""
"Define a descrição usada na documentação HTML gerada. Esta descrição "
"aparecerá na documentação como um parágrafo, abaixo do nome do servidor."

#: ../../library/xmlrpc.server.rst:422
msgid "DocCGIXMLRPCRequestHandler"
msgstr "DocCGIXMLRPCRequestHandler"

#: ../../library/xmlrpc.server.rst:424
msgid ""
"The :class:`DocCGIXMLRPCRequestHandler` class is derived from :class:"
"`CGIXMLRPCRequestHandler` and provides a means of creating self-documenting, "
"XML-RPC CGI scripts. HTTP POST requests are handled as XML-RPC method calls. "
"HTTP GET requests are handled by generating pydoc-style HTML documentation. "
"This allows a server to provide its own web-based documentation."
msgstr ""
"A classe :class:`DocCGIXMLRPCRequestHandler` é derivada de :class:"
"`CGIXMLRPCRequestHandler` e fornece um meio de criar scripts CGI XML-RPC "
"autodocumentados. Solicitações HTTP POST são tratadas como chamadas de "
"método XML-RPC. As solicitações HTTP GET são tratadas gerando documentação "
"HTML no estilo pydoc. Isso permite que um servidor forneça sua própria "
"documentação baseada na web."
