# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Ruan Aragão <ruanaragao2@gmail.com>, 2019
# Hugo Santos Piauilino <hugos94@gmail.com>, 2019
# Raphael Mendonça, 2019
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2019
# Vinicius Gubiani Ferreira <vini.g.fer@gmail.com>, 2020
# Rafael Fontenelle <rffontenelle@gmail.com>, 2021
# i17obot <i17obot@rougeth.com>, 2021
# Caio Fauza, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-23 16:56+0000\n"
"PO-Revision-Date: 2019-09-01 02:44+0000\n"
"Last-Translator: Caio Fauza, 2021\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2
msgid ":mod:`multiprocessing` --- Process-based parallelism"
msgstr ":mod:`threading` --- Paralelismo baseado em processo"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:7
msgid "**Source code:** :source:`Lib/multiprocessing/`"
msgstr "**Código Fonte:** :source:`Lib/multiprocessing/`"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:12
msgid "Introduction"
msgstr "Introdução"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:14
msgid ""
":mod:`multiprocessing` is a package that supports spawning processes using "
"an API similar to the :mod:`threading` module.  The :mod:`multiprocessing` "
"package offers both local and remote concurrency, effectively side-stepping "
"the :term:`Global Interpreter Lock` by using subprocesses instead of "
"threads.  Due to this, the :mod:`multiprocessing` module allows the "
"programmer to fully leverage multiple processors on a given machine.  It "
"runs on both Unix and Windows."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:22
msgid ""
"The :mod:`multiprocessing` module also introduces APIs which do not have "
"analogs in the :mod:`threading` module.  A prime example of this is the :"
"class:`~multiprocessing.pool.Pool` object which offers a convenient means of "
"parallelizing the execution of a function across multiple input values, "
"distributing the input data across processes (data parallelism).  The "
"following example demonstrates the common practice of defining such "
"functions in a module so that child processes can successfully import that "
"module.  This basic example of data parallelism using :class:"
"`~multiprocessing.pool.Pool`, ::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:40
msgid "will print to standard output ::"
msgstr "irá imprimir na saída padrão ::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:46
msgid "The :class:`Process` class"
msgstr "A classe :class:`Process`"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:48
msgid ""
"In :mod:`multiprocessing`, processes are spawned by creating a :class:"
"`Process` object and then calling its :meth:`~Process.start` method.  :class:"
"`Process` follows the API of :class:`threading.Thread`.  A trivial example "
"of a multiprocess program is ::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:63
msgid ""
"To show the individual process IDs involved, here is an expanded example::"
msgstr ""
"Para mostrar os IDs de processos individuais envolvidos, aqui está um "
"exemplo expandido::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:84
msgid ""
"For an explanation of why the ``if __name__ == '__main__'`` part is "
"necessary, see :ref:`multiprocessing-programming`."
msgstr ""
"Para uma explicação de porque a parte ``if __name__ == '__main__'`` é "
"necessária, veja :ref:`multiprocessing-programming`."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:90
msgid "Contexts and start methods"
msgstr "Contextos e métodos de inicialização"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:94
msgid ""
"Depending on the platform, :mod:`multiprocessing` supports three ways to "
"start a process.  These *start methods* are"
msgstr ""
"Dependendo da plataforma, :mod:`multiprocessing` suporta três maneiras de "
"iniciar um processo. Estes *métodos de início* são"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:105
msgid "*spawn*"
msgstr "*spawn*"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:98
msgid ""
"The parent process starts a fresh python interpreter process.  The child "
"process will only inherit those resources necessary to run the process "
"objects :meth:`~Process.run` method.  In particular, unnecessary file "
"descriptors and handles from the parent process will not be inherited.  "
"Starting a process using this method is rather slow compared to using *fork* "
"or *forkserver*."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:105
msgid "Available on Unix and Windows.  The default on Windows."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:114
msgid "*fork*"
msgstr "*fork*"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:108
msgid ""
"The parent process uses :func:`os.fork` to fork the Python interpreter.  The "
"child process, when it begins, is effectively identical to the parent "
"process.  All resources of the parent are inherited by the child process.  "
"Note that safely forking a multithreaded process is problematic."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:114
msgid "Available on Unix only.  The default on Unix."
msgstr "Disponível apenas para Unix. O padrão no Unix."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:125
msgid "*forkserver*"
msgstr "*forkserver*"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:117
msgid ""
"When the program starts and selects the *forkserver* start method, a server "
"process is started.  From then on, whenever a new process is needed, the "
"parent process connects to the server and requests that it fork a new "
"process.  The fork server process is single threaded so it is safe for it to "
"use :func:`os.fork`.  No unnecessary resources are inherited."
msgstr ""
"Quando o programa é inicializado e seleciona o método de início "
"*forkserver*, um processo de servidor é inicializado. A partir disso, sempre "
"que um novo processo é necessário, o processo pai conecta-se ao servidor e "
"solicita que um novo processo seja bifurcado. O fork do processo do servidor "
"é de thread unico, então é seguro para utilizar :func:`os.fork`. Nenhum "
"recurso desnecessário é herdado."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:124
msgid ""
"Available on Unix platforms which support passing file descriptors over Unix "
"pipes."
msgstr ""
"Disponível em plataformas Unix que suportam a passagem de descritores de "
"arquivo em Unix pipes."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:127
msgid ""
"*spawn* added on all unix platforms, and *forkserver* added for some unix "
"platforms. Child processes no longer inherit all of the parents inheritable "
"handles on Windows."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:133
msgid ""
"On Unix using the *spawn* or *forkserver* start methods will also start a "
"*semaphore tracker* process which tracks the unlinked named semaphores "
"created by processes of the program.  When all processes have exited the "
"semaphore tracker unlinks any remaining semaphores. Usually there should be "
"none, but if a process was killed by a signal there may be some \"leaked\" "
"semaphores.  (Unlinking the named semaphores is a serious matter since the "
"system allows only a limited number, and they will not be automatically "
"unlinked until the next reboot.)"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:142
msgid ""
"To select a start method you use the :func:`set_start_method` in the ``if "
"__name__ == '__main__'`` clause of the main module.  For example::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:159
msgid ""
":func:`set_start_method` should not be used more than once in the program."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:162
msgid ""
"Alternatively, you can use :func:`get_context` to obtain a context object.  "
"Context objects have the same API as the multiprocessing module, and allow "
"one to use multiple start methods in the same program. ::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:180
msgid ""
"Note that objects related to one context may not be compatible with "
"processes for a different context.  In particular, locks created using the "
"*fork* context cannot be passed to processes started using the *spawn* or "
"*forkserver* start methods."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:185
msgid ""
"A library which wants to use a particular start method should probably use :"
"func:`get_context` to avoid interfering with the choice of the library user."
msgstr ""
"Uma biblioteca que deseja utilizar um método de início específico "
"provavelmente deve utilizar :func:`get_context` para evitar interferir na "
"escolha do usuário."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:191
msgid ""
"The ``'spawn'`` and ``'forkserver'`` start methods cannot currently be used "
"with \"frozen\" executables (i.e., binaries produced by packages like "
"**PyInstaller** and **cx_Freeze**) on Unix. The ``'fork'`` start method does "
"work."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:198
msgid "Exchanging objects between processes"
msgstr "Trocando objetos entre processos"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:200
msgid ""
":mod:`multiprocessing` supports two types of communication channel between "
"processes:"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:203
msgid "**Queues**"
msgstr "**Filas**"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:205
msgid ""
"The :class:`Queue` class is a near clone of :class:`queue.Queue`.  For "
"example::"
msgstr ""
"A classe :class:`Queue` é quase um clone de :class:`queue.Queue`. Por "
"exemplo::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:220
msgid "Queues are thread and process safe."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:222
msgid "**Pipes**"
msgstr "**Pipes**"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:224
msgid ""
"The :func:`Pipe` function returns a pair of connection objects connected by "
"a pipe which by default is duplex (two-way).  For example::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:240
msgid ""
"The two connection objects returned by :func:`Pipe` represent the two ends "
"of the pipe.  Each connection object has :meth:`~Connection.send` and :meth:"
"`~Connection.recv` methods (among others).  Note that data in a pipe may "
"become corrupted if two processes (or threads) try to read from or write to "
"the *same* end of the pipe at the same time.  Of course there is no risk of "
"corruption from processes using different ends of the pipe at the same time."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:250
msgid "Synchronization between processes"
msgstr "Sincronização entre processos"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:252
msgid ""
":mod:`multiprocessing` contains equivalents of all the synchronization "
"primitives from :mod:`threading`.  For instance one can use a lock to ensure "
"that only one process prints to standard output at a time::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:271
msgid ""
"Without using the lock output from the different processes is liable to get "
"all mixed up."
msgstr ""
"Sem utilizar a saída do bloqueio dos diferentes processos, é possível que "
"tudo fique confuso."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:276
msgid "Sharing state between processes"
msgstr "Compartilhando estado entre processos."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:278
msgid ""
"As mentioned above, when doing concurrent programming it is usually best to "
"avoid using shared state as far as possible.  This is particularly true when "
"using multiple processes."
msgstr ""
"Conforme mencionado acima, ao fazer programação concorrente, geralmente é "
"melhor evitar o uso de estado compartilhado, tanto quanto possível. Isso é "
"particularmente verdadeiro ao utilizar múltiplos processos."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:282
msgid ""
"However, if you really do need to use some shared data then :mod:"
"`multiprocessing` provides a couple of ways of doing so."
msgstr ""
"No entanto, se você realmente precisa utilizar algum compartilhamento de "
"dados, então :mod:`multiprocessing` fornece algumas maneiras de se fazer "
"isso."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:285
msgid "**Shared memory**"
msgstr "**Shared memory**"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:287
msgid ""
"Data can be stored in a shared memory map using :class:`Value` or :class:"
"`Array`.  For example, the following code ::"
msgstr ""
"Os dados podem ser armazenados em um mapa de memória compartilhado "
"utilizando :class:`Value` ou :class:`Array`. Por exemplo, o código a "
"seguir ::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:308
#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:354
msgid "will print ::"
msgstr "será impresso::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:313
msgid ""
"The ``'d'`` and ``'i'`` arguments used when creating ``num`` and ``arr`` are "
"typecodes of the kind used by the :mod:`array` module: ``'d'`` indicates a "
"double precision float and ``'i'`` indicates a signed integer.  These shared "
"objects will be process and thread-safe."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:318
msgid ""
"For more flexibility in using shared memory one can use the :mod:"
"`multiprocessing.sharedctypes` module which supports the creation of "
"arbitrary ctypes objects allocated from shared memory."
msgstr ""
"Para mais flexibilidade no uso de memória compartilhada, pode-se utilizar o "
"módulo :mod:`multiprocessing.sharedctypes`, que suporta a criação de objetos "
"ctypes arbritários alocados da memória compartilhada."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:322
msgid "**Server process**"
msgstr "**Processo do Servidor**"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:324
msgid ""
"A manager object returned by :func:`Manager` controls a server process which "
"holds Python objects and allows other processes to manipulate them using "
"proxies."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:328
msgid ""
"A manager returned by :func:`Manager` will support types :class:`list`, :"
"class:`dict`, :class:`~managers.Namespace`, :class:`Lock`, :class:`RLock`, :"
"class:`Semaphore`, :class:`BoundedSemaphore`, :class:`Condition`, :class:"
"`Event`, :class:`Barrier`, :class:`Queue`, :class:`Value` and :class:"
"`Array`.  For example, ::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:359
msgid ""
"Server process managers are more flexible than using shared memory objects "
"because they can be made to support arbitrary object types.  Also, a single "
"manager can be shared by processes on different computers over a network. "
"They are, however, slower than using shared memory."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:366
msgid "Using a pool of workers"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:368
msgid ""
"The :class:`~multiprocessing.pool.Pool` class represents a pool of worker "
"processes.  It has methods which allows tasks to be offloaded to the worker "
"processes in a few different ways."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:372
msgid "For example::"
msgstr "Por exemplo::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:416
msgid ""
"Note that the methods of a pool should only ever be used by the process "
"which created it."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:421
msgid ""
"Functionality within this package requires that the ``__main__`` module be "
"importable by the children. This is covered in :ref:`multiprocessing-"
"programming` however it is worth pointing out here. This means that some "
"examples, such as the :class:`multiprocessing.pool.Pool` examples will not "
"work in the interactive interpreter. For example::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:444
msgid ""
"(If you try this it will actually output three full tracebacks interleaved "
"in a semi-random fashion, and then you may have to stop the master process "
"somehow.)"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:450
msgid "Reference"
msgstr "Referência"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:452
msgid ""
"The :mod:`multiprocessing` package mostly replicates the API of the :mod:"
"`threading` module."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:457
msgid ":class:`Process` and exceptions"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:462
msgid ""
"Process objects represent activity that is run in a separate process. The :"
"class:`Process` class has equivalents of all the methods of :class:"
"`threading.Thread`."
msgstr ""
"Objetos de processo representam atividades que são executadas em um processo "
"separado. A classe :class:`Process` possui equivalentes de todos os métodos "
"de :class:`threading.Thread`."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:466
msgid ""
"The constructor should always be called with keyword arguments. *group* "
"should always be ``None``; it exists solely for compatibility with :class:"
"`threading.Thread`.  *target* is the callable object to be invoked by the :"
"meth:`run()` method.  It defaults to ``None``, meaning nothing is called. "
"*name* is the process name (see :attr:`name` for more details). *args* is "
"the argument tuple for the target invocation.  *kwargs* is a dictionary of "
"keyword arguments for the target invocation.  If provided, the keyword-only "
"*daemon* argument sets the process :attr:`daemon` flag to ``True`` or "
"``False``.  If ``None`` (the default), this flag will be inherited from the "
"creating process."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:477
msgid "By default, no arguments are passed to *target*."
msgstr "Por padrão, nenhum argumento é passado para *target*."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:479
msgid ""
"If a subclass overrides the constructor, it must make sure it invokes the "
"base class constructor (:meth:`Process.__init__`) before doing anything else "
"to the process."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:483
msgid "Added the *daemon* argument."
msgstr "Adicionado o argumento *daemon*."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:488
msgid "Method representing the process's activity."
msgstr "Método que representa a atividade do processo."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:490
msgid ""
"You may override this method in a subclass.  The standard :meth:`run` method "
"invokes the callable object passed to the object's constructor as the target "
"argument, if any, with sequential and keyword arguments taken from the "
"*args* and *kwargs* arguments, respectively."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:497
msgid "Start the process's activity."
msgstr "Inicie a atividade do processo."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:499
msgid ""
"This must be called at most once per process object.  It arranges for the "
"object's :meth:`run` method to be invoked in a separate process."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:504
msgid ""
"If the optional argument *timeout* is ``None`` (the default), the method "
"blocks until the process whose :meth:`join` method is called terminates. If "
"*timeout* is a positive number, it blocks at most *timeout* seconds. Note "
"that the method returns ``None`` if its process terminates or if the method "
"times out.  Check the process's :attr:`exitcode` to determine if it "
"terminated."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:511
msgid "A process can be joined many times."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:513
msgid ""
"A process cannot join itself because this would cause a deadlock.  It is an "
"error to attempt to join a process before it has been started."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:518
msgid ""
"The process's name.  The name is a string used for identification purposes "
"only.  It has no semantics.  Multiple processes may be given the same name."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:522
msgid ""
"The initial name is set by the constructor.  If no explicit name is provided "
"to the constructor, a name of the form 'Process-N\\ :sub:`1`:N\\ :sub:"
"`2`:...:N\\ :sub:`k`' is constructed, where each N\\ :sub:`k` is the N-th "
"child of its parent."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:529
msgid "Return whether the process is alive."
msgstr "Retorne se o processo está ativo."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:531
msgid ""
"Roughly, a process object is alive from the moment the :meth:`start` method "
"returns until the child process terminates."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:536
msgid ""
"The process's daemon flag, a Boolean value.  This must be set before :meth:"
"`start` is called."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:539
msgid "The initial value is inherited from the creating process."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:541
msgid ""
"When a process exits, it attempts to terminate all of its daemonic child "
"processes."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:544
msgid ""
"Note that a daemonic process is not allowed to create child processes. "
"Otherwise a daemonic process would leave its children orphaned if it gets "
"terminated when its parent process exits. Additionally, these are **not** "
"Unix daemons or services, they are normal processes that will be terminated "
"(and not joined) if non-daemonic processes have exited."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:550
msgid ""
"In addition to the  :class:`threading.Thread` API, :class:`Process` objects "
"also support the following attributes and methods:"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:555
msgid ""
"Return the process ID.  Before the process is spawned, this will be ``None``."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:560
msgid ""
"The child's exit code.  This will be ``None`` if the process has not yet "
"terminated.  A negative value *-N* indicates that the child was terminated "
"by signal *N*."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:566
msgid "The process's authentication key (a byte string)."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:568
msgid ""
"When :mod:`multiprocessing` is initialized the main process is assigned a "
"random string using :func:`os.urandom`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:571
msgid ""
"When a :class:`Process` object is created, it will inherit the "
"authentication key of its parent process, although this may be changed by "
"setting :attr:`authkey` to another byte string."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:575
msgid "See :ref:`multiprocessing-auth-keys`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:579
msgid ""
"A numeric handle of a system object which will become \"ready\" when the "
"process ends."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:582
msgid ""
"You can use this value if you want to wait on several events at once using :"
"func:`multiprocessing.connection.wait`.  Otherwise calling :meth:`join()` is "
"simpler."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:586
msgid ""
"On Windows, this is an OS handle usable with the ``WaitForSingleObject`` and "
"``WaitForMultipleObjects`` family of API calls.  On Unix, this is a file "
"descriptor usable with primitives from the :mod:`select` module."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:594
msgid ""
"Terminate the process.  On Unix this is done using the ``SIGTERM`` signal; "
"on Windows :c:func:`TerminateProcess` is used.  Note that exit handlers and "
"finally clauses, etc., will not be executed."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:598
msgid ""
"Note that descendant processes of the process will *not* be terminated -- "
"they will simply become orphaned."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:603
msgid ""
"If this method is used when the associated process is using a pipe or queue "
"then the pipe or queue is liable to become corrupted and may become unusable "
"by other process.  Similarly, if the process has acquired a lock or "
"semaphore etc. then terminating it is liable to cause other processes to "
"deadlock."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:611
msgid "Same as :meth:`terminate()` but using the ``SIGKILL`` signal on Unix."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:617
msgid ""
"Close the :class:`Process` object, releasing all resources associated with "
"it.  :exc:`ValueError` is raised if the underlying process is still "
"running.  Once :meth:`close` returns successfully, most other methods and "
"attributes of the :class:`Process` object will raise :exc:`ValueError`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:625
msgid ""
"Note that the :meth:`start`, :meth:`join`, :meth:`is_alive`, :meth:"
"`terminate` and :attr:`exitcode` methods should only be called by the "
"process that created the process object."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:629
msgid "Example usage of some of the methods of :class:`Process`:"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:649
msgid "The base class of all :mod:`multiprocessing` exceptions."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:653
msgid ""
"Exception raised by :meth:`Connection.recv_bytes_into()` when the supplied "
"buffer object is too small for the message read."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:656
msgid ""
"If ``e`` is an instance of :exc:`BufferTooShort` then ``e.args[0]`` will "
"give the message as a byte string."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:661
msgid "Raised when there is an authentication error."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:665
msgid "Raised by methods with a timeout when the timeout expires."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:668
msgid "Pipes and Queues"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:670
msgid ""
"When using multiple processes, one generally uses message passing for "
"communication between processes and avoids having to use any synchronization "
"primitives like locks."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:674
msgid ""
"For passing messages one can use :func:`Pipe` (for a connection between two "
"processes) or a queue (which allows multiple producers and consumers)."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:677
msgid ""
"The :class:`Queue`, :class:`SimpleQueue` and :class:`JoinableQueue` types "
"are multi-producer, multi-consumer :abbr:`FIFO (first-in, first-out)` queues "
"modelled on the :class:`queue.Queue` class in the standard library.  They "
"differ in that :class:`Queue` lacks the :meth:`~queue.Queue.task_done` and :"
"meth:`~queue.Queue.join` methods introduced into Python 2.5's :class:`queue."
"Queue` class."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:684
msgid ""
"If you use :class:`JoinableQueue` then you **must** call :meth:"
"`JoinableQueue.task_done` for each task removed from the queue or else the "
"semaphore used to count the number of unfinished tasks may eventually "
"overflow, raising an exception."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:689
msgid ""
"Note that one can also create a shared queue by using a manager object -- "
"see :ref:`multiprocessing-managers`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:694
msgid ""
":mod:`multiprocessing` uses the usual :exc:`queue.Empty` and :exc:`queue."
"Full` exceptions to signal a timeout.  They are not available in the :mod:"
"`multiprocessing` namespace so you need to import them from :mod:`queue`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:701
msgid ""
"When an object is put on a queue, the object is pickled and a background "
"thread later flushes the pickled data to an underlying pipe.  This has some "
"consequences which are a little surprising, but should not cause any "
"practical difficulties -- if they really bother you then you can instead use "
"a queue created with a :ref:`manager <multiprocessing-managers>`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:708
msgid ""
"After putting an object on an empty queue there may be an infinitesimal "
"delay before the queue's :meth:`~Queue.empty` method returns :const:`False` "
"and :meth:`~Queue.get_nowait` can return without raising :exc:`queue.Empty`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:713
msgid ""
"If multiple processes are enqueuing objects, it is possible for the objects "
"to be received at the other end out-of-order. However, objects enqueued by "
"the same process will always be in the expected order with respect to each "
"other."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:720
msgid ""
"If a process is killed using :meth:`Process.terminate` or :func:`os.kill` "
"while it is trying to use a :class:`Queue`, then the data in the queue is "
"likely to become corrupted.  This may cause any other process to get an "
"exception when it tries to use the queue later on."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:727
msgid ""
"As mentioned above, if a child process has put items on a queue (and it has "
"not used :meth:`JoinableQueue.cancel_join_thread <multiprocessing.Queue."
"cancel_join_thread>`), then that process will not terminate until all "
"buffered items have been flushed to the pipe."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:732
msgid ""
"This means that if you try joining that process you may get a deadlock "
"unless you are sure that all items which have been put on the queue have "
"been consumed.  Similarly, if the child process is non-daemonic then the "
"parent process may hang on exit when it tries to join all its non-daemonic "
"children."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:737
msgid ""
"Note that a queue created using a manager does not have this issue.  See :"
"ref:`multiprocessing-programming`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:740
msgid ""
"For an example of the usage of queues for interprocess communication see :"
"ref:`multiprocessing-examples`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:746
msgid ""
"Returns a pair ``(conn1, conn2)`` of :class:`~multiprocessing.connection."
"Connection` objects representing the ends of a pipe."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:750
msgid ""
"If *duplex* is ``True`` (the default) then the pipe is bidirectional.  If "
"*duplex* is ``False`` then the pipe is unidirectional: ``conn1`` can only be "
"used for receiving messages and ``conn2`` can only be used for sending "
"messages."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:758
msgid ""
"Returns a process shared queue implemented using a pipe and a few locks/"
"semaphores.  When a process first puts an item on the queue a feeder thread "
"is started which transfers objects from a buffer into the pipe."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:762
msgid ""
"The usual :exc:`queue.Empty` and :exc:`queue.Full` exceptions from the "
"standard library's :mod:`queue` module are raised to signal timeouts."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:765
msgid ""
":class:`Queue` implements all the methods of :class:`queue.Queue` except "
"for :meth:`~queue.Queue.task_done` and :meth:`~queue.Queue.join`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:770
msgid ""
"Return the approximate size of the queue.  Because of multithreading/"
"multiprocessing semantics, this number is not reliable."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:773
msgid ""
"Note that this may raise :exc:`NotImplementedError` on Unix platforms like "
"Mac OS X where ``sem_getvalue()`` is not implemented."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:778
msgid ""
"Return ``True`` if the queue is empty, ``False`` otherwise.  Because of "
"multithreading/multiprocessing semantics, this is not reliable."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:783
msgid ""
"Return ``True`` if the queue is full, ``False`` otherwise.  Because of "
"multithreading/multiprocessing semantics, this is not reliable."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:788
msgid ""
"Put obj into the queue.  If the optional argument *block* is ``True`` (the "
"default) and *timeout* is ``None`` (the default), block if necessary until a "
"free slot is available.  If *timeout* is a positive number, it blocks at "
"most *timeout* seconds and raises the :exc:`queue.Full` exception if no free "
"slot was available within that time.  Otherwise (*block* is ``False``), put "
"an item on the queue if a free slot is immediately available, else raise "
"the :exc:`queue.Full` exception (*timeout* is ignored in that case)."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:799
msgid "Equivalent to ``put(obj, False)``."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:803
msgid ""
"Remove and return an item from the queue.  If optional args *block* is "
"``True`` (the default) and *timeout* is ``None`` (the default), block if "
"necessary until an item is available.  If *timeout* is a positive number, it "
"blocks at most *timeout* seconds and raises the :exc:`queue.Empty` exception "
"if no item was available within that time.  Otherwise (block is ``False``), "
"return an item if one is immediately available, else raise the :exc:`queue."
"Empty` exception (*timeout* is ignored in that case)."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:813
msgid "Equivalent to ``get(False)``."
msgstr "Equivalente a ``get(False)``."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:815
msgid ""
":class:`multiprocessing.Queue` has a few additional methods not found in :"
"class:`queue.Queue`.  These methods are usually unnecessary for most code:"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:821
msgid ""
"Indicate that no more data will be put on this queue by the current "
"process.  The background thread will quit once it has flushed all buffered "
"data to the pipe.  This is called automatically when the queue is garbage "
"collected."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:828
msgid ""
"Join the background thread.  This can only be used after :meth:`close` has "
"been called.  It blocks until the background thread exits, ensuring that all "
"data in the buffer has been flushed to the pipe."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:832
msgid ""
"By default if a process is not the creator of the queue then on exit it will "
"attempt to join the queue's background thread.  The process can call :meth:"
"`cancel_join_thread` to make :meth:`join_thread` do nothing."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:838
msgid ""
"Prevent :meth:`join_thread` from blocking.  In particular, this prevents the "
"background thread from being joined automatically when the process exits -- "
"see :meth:`join_thread`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:842
msgid ""
"A better name for this method might be ``allow_exit_without_flush()``.  It "
"is likely to cause enqueued data to lost, and you almost certainly will not "
"need to use it. It is really only there if you need the current process to "
"exit immediately without waiting to flush enqueued data to the underlying "
"pipe, and you don't care about lost data."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:851
msgid ""
"This class's functionality requires a functioning shared semaphore "
"implementation on the host operating system. Without one, the functionality "
"in this class will be disabled, and attempts to instantiate a :class:`Queue` "
"will result in an :exc:`ImportError`. See :issue:`3770` for additional "
"information.  The same holds true for any of the specialized queue types "
"listed below."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:860
msgid ""
"It is a simplified :class:`Queue` type, very close to a locked :class:`Pipe`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:864
msgid "Return ``True`` if the queue is empty, ``False`` otherwise."
msgstr "Retorna ``True`` se a fila estiver vazia, ``False`` caso contrário."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:868
msgid "Remove and return an item from the queue."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:872
msgid "Put *item* into the queue."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:877
msgid ""
":class:`JoinableQueue`, a :class:`Queue` subclass, is a queue which "
"additionally has :meth:`task_done` and :meth:`join` methods."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:882
msgid ""
"Indicate that a formerly enqueued task is complete. Used by queue "
"consumers.  For each :meth:`~Queue.get` used to fetch a task, a subsequent "
"call to :meth:`task_done` tells the queue that the processing on the task is "
"complete."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:887
msgid ""
"If a :meth:`~queue.Queue.join` is currently blocking, it will resume when "
"all items have been processed (meaning that a :meth:`task_done` call was "
"received for every item that had been :meth:`~Queue.put` into the queue)."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:891
msgid ""
"Raises a :exc:`ValueError` if called more times than there were items placed "
"in the queue."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:897
msgid "Block until all items in the queue have been gotten and processed."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:899
msgid ""
"The count of unfinished tasks goes up whenever an item is added to the "
"queue.  The count goes down whenever a consumer calls :meth:`task_done` to "
"indicate that the item was retrieved and all work on it is complete.  When "
"the count of unfinished tasks drops to zero, :meth:`~queue.Queue.join` "
"unblocks."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:907
msgid "Miscellaneous"
msgstr "Diversos"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:911
msgid "Return list of all live children of the current process."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:913
msgid ""
"Calling this has the side effect of \"joining\" any processes which have "
"already finished."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:918
msgid "Return the number of CPUs in the system."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:920
msgid ""
"This number is not equivalent to the number of CPUs the current process can "
"use.  The number of usable CPUs can be obtained with ``len(os."
"sched_getaffinity(0))``"
msgstr ""
"Este número não é equivalente ao número de CPUs que o processo atual pode "
"usar. O número de CPUs utilizáveis ​​pode ser obtido com ``len(os."
"sched_getaffinity(0))``"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:924
msgid "May raise :exc:`NotImplementedError`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:927
msgid ":func:`os.cpu_count`"
msgstr ":func:`os.cpu_count`"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:931
msgid ""
"Return the :class:`Process` object corresponding to the current process."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:933
msgid "An analogue of :func:`threading.current_thread`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:937
msgid ""
"Add support for when a program which uses :mod:`multiprocessing` has been "
"frozen to produce a Windows executable.  (Has been tested with **py2exe**, "
"**PyInstaller** and **cx_Freeze**.)"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:941
msgid ""
"One needs to call this function straight after the ``if __name__ == "
"'__main__'`` line of the main module.  For example::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:953
msgid ""
"If the ``freeze_support()`` line is omitted then trying to run the frozen "
"executable will raise :exc:`RuntimeError`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:956
msgid ""
"Calling ``freeze_support()`` has no effect when invoked on any operating "
"system other than Windows.  In addition, if the module is being run normally "
"by the Python interpreter on Windows (the program has not been frozen), then "
"``freeze_support()`` has no effect."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:963
msgid ""
"Returns a list of the supported start methods, the first of which is the "
"default.  The possible start methods are ``'fork'``, ``'spawn'`` and "
"``'forkserver'``.  On Windows only ``'spawn'`` is available.  On Unix "
"``'fork'`` and ``'spawn'`` are always supported, with ``'fork'`` being the "
"default."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:973
msgid ""
"Return a context object which has the same attributes as the :mod:"
"`multiprocessing` module."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:976
msgid ""
"If *method* is ``None`` then the default context is returned. Otherwise "
"*method* should be ``'fork'``, ``'spawn'``, ``'forkserver'``.  :exc:"
"`ValueError` is raised if the specified start method is not available."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:985
msgid "Return the name of start method used for starting processes."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:987
msgid ""
"If the start method has not been fixed and *allow_none* is false, then the "
"start method is fixed to the default and the name is returned.  If the start "
"method has not been fixed and *allow_none* is true then ``None`` is returned."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:992
msgid ""
"The return value can be ``'fork'``, ``'spawn'``, ``'forkserver'`` or "
"``None``.  ``'fork'`` is the default on Unix, while ``'spawn'`` is the "
"default on Windows."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1000
msgid ""
"Sets the path of the Python interpreter to use when starting a child "
"process. (By default :data:`sys.executable` is used).  Embedders will "
"probably need to do some thing like ::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1006
msgid "before they can create child processes."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1008
msgid "Now supported on Unix when the ``'spawn'`` start method is used."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1013
msgid ""
"Set the method which should be used to start child processes. *method* can "
"be ``'fork'``, ``'spawn'`` or ``'forkserver'``."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1016
msgid ""
"Note that this should be called at most once, and it should be protected "
"inside the ``if __name__ == '__main__'`` clause of the main module."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1024
msgid ""
":mod:`multiprocessing` contains no analogues of :func:`threading."
"active_count`, :func:`threading.enumerate`, :func:`threading.settrace`, :"
"func:`threading.setprofile`, :class:`threading.Timer`, or :class:`threading."
"local`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1031
msgid "Connection Objects"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1035
msgid ""
"Connection objects allow the sending and receiving of picklable objects or "
"strings.  They can be thought of as message oriented connected sockets."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1038
msgid ""
"Connection objects are usually created using :func:`Pipe <multiprocessing."
"Pipe>` -- see also :ref:`multiprocessing-listeners-clients`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1046
msgid ""
"Send an object to the other end of the connection which should be read "
"using :meth:`recv`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1049
msgid ""
"The object must be picklable.  Very large pickles (approximately 32 MiB+, "
"though it depends on the OS) may raise a :exc:`ValueError` exception."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1054
msgid ""
"Return an object sent from the other end of the connection using :meth:"
"`send`.  Blocks until there is something to receive.  Raises :exc:`EOFError` "
"if there is nothing left to receive and the other end was closed."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1061
msgid "Return the file descriptor or handle used by the connection."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1065
msgid "Close the connection."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1067
msgid "This is called automatically when the connection is garbage collected."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1071
msgid "Return whether there is any data available to be read."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1073
msgid ""
"If *timeout* is not specified then it will return immediately.  If *timeout* "
"is a number then this specifies the maximum time in seconds to block.  If "
"*timeout* is ``None`` then an infinite timeout is used."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1077
msgid ""
"Note that multiple connection objects may be polled at once by using :func:"
"`multiprocessing.connection.wait`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1082
msgid "Send byte data from a :term:`bytes-like object` as a complete message."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1084
msgid ""
"If *offset* is given then data is read from that position in *buffer*.  If "
"*size* is given then that many bytes will be read from buffer.  Very large "
"buffers (approximately 32 MiB+, though it depends on the OS) may raise a :"
"exc:`ValueError` exception"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1091
msgid ""
"Return a complete message of byte data sent from the other end of the "
"connection as a string.  Blocks until there is something to receive. Raises :"
"exc:`EOFError` if there is nothing left to receive and the other end has "
"closed."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1096
msgid ""
"If *maxlength* is specified and the message is longer than *maxlength* then :"
"exc:`OSError` is raised and the connection will no longer be readable."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1100
msgid ""
"This function used to raise :exc:`IOError`, which is now an alias of :exc:"
"`OSError`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1107
msgid ""
"Read into *buffer* a complete message of byte data sent from the other end "
"of the connection and return the number of bytes in the message.  Blocks "
"until there is something to receive.  Raises :exc:`EOFError` if there is "
"nothing left to receive and the other end was closed."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1113
msgid ""
"*buffer* must be a writable :term:`bytes-like object`.  If *offset* is given "
"then the message will be written into the buffer from that position.  Offset "
"must be a non-negative integer less than the length of *buffer* (in bytes)."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1118
msgid ""
"If the buffer is too short then a :exc:`BufferTooShort` exception is raised "
"and the complete message is available as ``e.args[0]`` where ``e`` is the "
"exception instance."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1122
msgid ""
"Connection objects themselves can now be transferred between processes "
"using :meth:`Connection.send` and :meth:`Connection.recv`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1126
msgid ""
"Connection objects now support the context management protocol -- see :ref:"
"`typecontextmanager`.  :meth:`~contextmanager.__enter__` returns the "
"connection object, and :meth:`~contextmanager.__exit__` calls :meth:`close`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1131
msgid "For example:"
msgstr "Por exemplo:"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1155
msgid ""
"The :meth:`Connection.recv` method automatically unpickles the data it "
"receives, which can be a security risk unless you can trust the process "
"which sent the message."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1159
msgid ""
"Therefore, unless the connection object was produced using :func:`Pipe` you "
"should only use the :meth:`~Connection.recv` and :meth:`~Connection.send` "
"methods after performing some sort of authentication.  See :ref:"
"`multiprocessing-auth-keys`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1166
msgid ""
"If a process is killed while it is trying to read or write to a pipe then "
"the data in the pipe is likely to become corrupted, because it may become "
"impossible to be sure where the message boundaries lie."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1172
msgid "Synchronization primitives"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1176
msgid ""
"Generally synchronization primitives are not as necessary in a multiprocess "
"program as they are in a multithreaded program.  See the documentation for :"
"mod:`threading` module."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1180
msgid ""
"Note that one can also create synchronization primitives by using a manager "
"object -- see :ref:`multiprocessing-managers`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1185
msgid "A barrier object: a clone of :class:`threading.Barrier`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1191
msgid ""
"A bounded semaphore object: a close analog of :class:`threading."
"BoundedSemaphore`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1194
#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1332
msgid ""
"A solitary difference from its close analog exists: its ``acquire`` method's "
"first argument is named *block*, as is consistent with :meth:`Lock.acquire`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1198
msgid ""
"On Mac OS X, this is indistinguishable from :class:`Semaphore` because "
"``sem_getvalue()`` is not implemented on that platform."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1203
msgid "A condition variable: an alias for :class:`threading.Condition`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1205
msgid ""
"If *lock* is specified then it should be a :class:`Lock` or :class:`RLock` "
"object from :mod:`multiprocessing`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1208
#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1742
msgid "The :meth:`~threading.Condition.wait_for` method was added."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1213
msgid "A clone of :class:`threading.Event`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1218
msgid ""
"A non-recursive lock object: a close analog of :class:`threading.Lock`. Once "
"a process or thread has acquired a lock, subsequent attempts to acquire it "
"from any process or thread will block until it is released; any process or "
"thread may release it.  The concepts and behaviors of :class:`threading."
"Lock` as it applies to threads are replicated here in :class:"
"`multiprocessing.Lock` as it applies to either processes or threads, except "
"as noted."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1226
msgid ""
"Note that :class:`Lock` is actually a factory function which returns an "
"instance of ``multiprocessing.synchronize.Lock`` initialized with a default "
"context."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1230
msgid ""
":class:`Lock` supports the :term:`context manager` protocol and thus may be "
"used in :keyword:`with` statements."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1235
#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1286
msgid "Acquire a lock, blocking or non-blocking."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1237
msgid ""
"With the *block* argument set to ``True`` (the default), the method call "
"will block until the lock is in an unlocked state, then set it to locked and "
"return ``True``.  Note that the name of this first argument differs from "
"that in :meth:`threading.Lock.acquire`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1242
msgid ""
"With the *block* argument set to ``False``, the method call does not block.  "
"If the lock is currently in a locked state, return ``False``; otherwise set "
"the lock to a locked state and return ``True``."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1246
msgid ""
"When invoked with a positive, floating-point value for *timeout*, block for "
"at most the number of seconds specified by *timeout* as long as the lock can "
"not be acquired.  Invocations with a negative value for *timeout* are "
"equivalent to a *timeout* of zero.  Invocations with a *timeout* value of "
"``None`` (the default) set the timeout period to infinite.  Note that the "
"treatment of negative or ``None`` values for *timeout* differs from the "
"implemented behavior in :meth:`threading.Lock.acquire`.  The *timeout* "
"argument has no practical implications if the *block* argument is set to "
"``False`` and is thus ignored.  Returns ``True`` if the lock has been "
"acquired or ``False`` if the timeout period has elapsed."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1261
msgid ""
"Release a lock.  This can be called from any process or thread, not only the "
"process or thread which originally acquired the lock."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1264
msgid ""
"Behavior is the same as in :meth:`threading.Lock.release` except that when "
"invoked on an unlocked lock, a :exc:`ValueError` is raised."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1270
msgid ""
"A recursive lock object: a close analog of :class:`threading.RLock`.  A "
"recursive lock must be released by the process or thread that acquired it. "
"Once a process or thread has acquired a recursive lock, the same process or "
"thread may acquire it again without blocking; that process or thread must "
"release it once for each time it has been acquired."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1276
msgid ""
"Note that :class:`RLock` is actually a factory function which returns an "
"instance of ``multiprocessing.synchronize.RLock`` initialized with a default "
"context."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1280
msgid ""
":class:`RLock` supports the :term:`context manager` protocol and thus may be "
"used in :keyword:`with` statements."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1288
msgid ""
"When invoked with the *block* argument set to ``True``, block until the lock "
"is in an unlocked state (not owned by any process or thread) unless the lock "
"is already owned by the current process or thread.  The current process or "
"thread then takes ownership of the lock (if it does not already have "
"ownership) and the recursion level inside the lock increments by one, "
"resulting in a return value of ``True``.  Note that there are several "
"differences in this first argument's behavior compared to the implementation "
"of :meth:`threading.RLock.acquire`, starting with the name of the argument "
"itself."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1298
msgid ""
"When invoked with the *block* argument set to ``False``, do not block. If "
"the lock has already been acquired (and thus is owned) by another process or "
"thread, the current process or thread does not take ownership and the "
"recursion level within the lock is not changed, resulting in a return value "
"of ``False``.  If the lock is in an unlocked state, the current process or "
"thread takes ownership and the recursion level is incremented, resulting in "
"a return value of ``True``."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1306
msgid ""
"Use and behaviors of the *timeout* argument are the same as in :meth:`Lock."
"acquire`.  Note that some of these behaviors of *timeout* differ from the "
"implemented behaviors in :meth:`threading.RLock.acquire`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1313
msgid ""
"Release a lock, decrementing the recursion level.  If after the decrement "
"the recursion level is zero, reset the lock to unlocked (not owned by any "
"process or thread) and if any other processes or threads are blocked waiting "
"for the lock to become unlocked, allow exactly one of them to proceed.  If "
"after the decrement the recursion level is still nonzero, the lock remains "
"locked and owned by the calling process or thread."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1321
msgid ""
"Only call this method when the calling process or thread owns the lock. An :"
"exc:`AssertionError` is raised if this method is called by a process or "
"thread other than the owner or if the lock is in an unlocked (unowned) "
"state.  Note that the type of exception raised in this situation differs "
"from the implemented behavior in :meth:`threading.RLock.release`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1330
msgid "A semaphore object: a close analog of :class:`threading.Semaphore`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1337
msgid ""
"On Mac OS X, ``sem_timedwait`` is unsupported, so calling ``acquire()`` with "
"a timeout will emulate that function's behavior using a sleeping loop."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1342
msgid ""
"If the SIGINT signal generated by :kbd:`Ctrl-C` arrives while the main "
"thread is blocked by a call to :meth:`BoundedSemaphore.acquire`, :meth:`Lock."
"acquire`, :meth:`RLock.acquire`, :meth:`Semaphore.acquire`, :meth:`Condition."
"acquire` or :meth:`Condition.wait` then the call will be immediately "
"interrupted and :exc:`KeyboardInterrupt` will be raised."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1348
msgid ""
"This differs from the behaviour of :mod:`threading` where SIGINT will be "
"ignored while the equivalent blocking calls are in progress."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1353
msgid ""
"Some of this package's functionality requires a functioning shared semaphore "
"implementation on the host operating system. Without one, the :mod:"
"`multiprocessing.synchronize` module will be disabled, and attempts to "
"import it will result in an :exc:`ImportError`. See :issue:`3770` for "
"additional information."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1361
msgid "Shared :mod:`ctypes` Objects"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1363
msgid ""
"It is possible to create shared objects using shared memory which can be "
"inherited by child processes."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1368
msgid ""
"Return a :mod:`ctypes` object allocated from shared memory.  By default the "
"return value is actually a synchronized wrapper for the object.  The object "
"itself can be accessed via the *value* attribute of a :class:`Value`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1372
#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1459
msgid ""
"*typecode_or_type* determines the type of the returned object: it is either "
"a ctypes type or a one character typecode of the kind used by the :mod:"
"`array` module.  *\\*args* is passed on to the constructor for the type."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1376
msgid ""
"If *lock* is ``True`` (the default) then a new recursive lock object is "
"created to synchronize access to the value.  If *lock* is a :class:`Lock` "
"or :class:`RLock` object then that will be used to synchronize access to the "
"value.  If *lock* is ``False`` then access to the returned object will not "
"be automatically protected by a lock, so it will not necessarily be "
"\"process-safe\"."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1383
msgid ""
"Operations like ``+=`` which involve a read and write are not atomic.  So "
"if, for instance, you want to atomically increment a shared value it is "
"insufficient to just do ::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1389
msgid ""
"Assuming the associated lock is recursive (which it is by default) you can "
"instead do ::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1395
#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1485
#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1500
msgid "Note that *lock* is a keyword-only argument."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1399
msgid ""
"Return a ctypes array allocated from shared memory.  By default the return "
"value is actually a synchronized wrapper for the array."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1402
msgid ""
"*typecode_or_type* determines the type of the elements of the returned "
"array: it is either a ctypes type or a one character typecode of the kind "
"used by the :mod:`array` module.  If *size_or_initializer* is an integer, "
"then it determines the length of the array, and the array will be initially "
"zeroed. Otherwise, *size_or_initializer* is a sequence which is used to "
"initialize the array and whose length determines the length of the array."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1409
msgid ""
"If *lock* is ``True`` (the default) then a new lock object is created to "
"synchronize access to the value.  If *lock* is a :class:`Lock` or :class:"
"`RLock` object then that will be used to synchronize access to the value.  "
"If *lock* is ``False`` then access to the returned object will not be "
"automatically protected by a lock, so it will not necessarily be \"process-"
"safe\"."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1416
msgid "Note that *lock* is a keyword only argument."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1418
msgid ""
"Note that an array of :data:`ctypes.c_char` has *value* and *raw* attributes "
"which allow one to use it to store and retrieve strings."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1423
msgid "The :mod:`multiprocessing.sharedctypes` module"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1428
msgid ""
"The :mod:`multiprocessing.sharedctypes` module provides functions for "
"allocating :mod:`ctypes` objects from shared memory which can be inherited "
"by child processes."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1434
msgid ""
"Although it is possible to store a pointer in shared memory remember that "
"this will refer to a location in the address space of a specific process. "
"However, the pointer is quite likely to be invalid in the context of a "
"second process and trying to dereference the pointer from the second process "
"may cause a crash."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1442
msgid "Return a ctypes array allocated from shared memory."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1444
msgid ""
"*typecode_or_type* determines the type of the elements of the returned "
"array: it is either a ctypes type or a one character typecode of the kind "
"used by the :mod:`array` module.  If *size_or_initializer* is an integer "
"then it determines the length of the array, and the array will be initially "
"zeroed. Otherwise *size_or_initializer* is a sequence which is used to "
"initialize the array and whose length determines the length of the array."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1451
msgid ""
"Note that setting and getting an element is potentially non-atomic -- use :"
"func:`Array` instead to make sure that access is automatically synchronized "
"using a lock."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1457
msgid "Return a ctypes object allocated from shared memory."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1463
msgid ""
"Note that setting and getting the value is potentially non-atomic -- use :"
"func:`Value` instead to make sure that access is automatically synchronized "
"using a lock."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1467
msgid ""
"Note that an array of :data:`ctypes.c_char` has ``value`` and ``raw`` "
"attributes which allow one to use it to store and retrieve strings -- see "
"documentation for :mod:`ctypes`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1473
msgid ""
"The same as :func:`RawArray` except that depending on the value of *lock* a "
"process-safe synchronization wrapper may be returned instead of a raw ctypes "
"array."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1477
#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1493
msgid ""
"If *lock* is ``True`` (the default) then a new lock object is created to "
"synchronize access to the value.  If *lock* is a :class:`~multiprocessing."
"Lock` or :class:`~multiprocessing.RLock` object then that will be used to "
"synchronize access to the value.  If *lock* is ``False`` then access to the "
"returned object will not be automatically protected by a lock, so it will "
"not necessarily be \"process-safe\"."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1489
msgid ""
"The same as :func:`RawValue` except that depending on the value of *lock* a "
"process-safe synchronization wrapper may be returned instead of a raw ctypes "
"object."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1504
msgid ""
"Return a ctypes object allocated from shared memory which is a copy of the "
"ctypes object *obj*."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1509
msgid ""
"Return a process-safe wrapper object for a ctypes object which uses *lock* "
"to synchronize access.  If *lock* is ``None`` (the default) then a :class:"
"`multiprocessing.RLock` object is created automatically."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1513
msgid ""
"A synchronized wrapper will have two methods in addition to those of the "
"object it wraps: :meth:`get_obj` returns the wrapped object and :meth:"
"`get_lock` returns the lock object used for synchronization."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1517
msgid ""
"Note that accessing the ctypes object through the wrapper can be a lot "
"slower than accessing the raw ctypes object."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1520
msgid "Synchronized objects support the :term:`context manager` protocol."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1524
msgid ""
"The table below compares the syntax for creating shared ctypes objects from "
"shared memory with the normal ctypes syntax.  (In the table ``MyStruct`` is "
"some subclass of :class:`ctypes.Structure`.)"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1529
msgid "ctypes"
msgstr "ctypes"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1529
msgid "sharedctypes using type"
msgstr "sharedctypes using type"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1529
msgid "sharedctypes using typecode"
msgstr "sharedctypes using typecode"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1531
msgid "c_double(2.4)"
msgstr "c_double(2.4)"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1531
msgid "RawValue(c_double, 2.4)"
msgstr "RawValue(c_double, 2.4)"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1531
msgid "RawValue('d', 2.4)"
msgstr "RawValue('d', 2.4)"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1532
msgid "MyStruct(4, 6)"
msgstr "MyStruct(4, 6)"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1532
msgid "RawValue(MyStruct, 4, 6)"
msgstr "RawValue(MyStruct, 4, 6)"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1533
msgid "(c_short * 7)()"
msgstr "(c_short * 7)()"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1533
msgid "RawArray(c_short, 7)"
msgstr "RawArray(c_short, 7)"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1533
msgid "RawArray('h', 7)"
msgstr "RawArray('h', 7)"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1534
msgid "(c_int * 3)(9, 2, 8)"
msgstr "(c_int * 3)(9, 2, 8)"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1534
msgid "RawArray(c_int, (9, 2, 8))"
msgstr "RawArray(c_int, (9, 2, 8))"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1534
msgid "RawArray('i', (9, 2, 8))"
msgstr "RawArray('i', (9, 2, 8))"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1538
msgid ""
"Below is an example where a number of ctypes objects are modified by a child "
"process::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1576
msgid "The results printed are ::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1589
msgid "Managers"
msgstr "Gerenciadores"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1591
msgid ""
"Managers provide a way to create data which can be shared between different "
"processes, including sharing over a network between processes running on "
"different machines. A manager object controls a server process which manages "
"*shared objects*.  Other processes can access the shared objects by using "
"proxies."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1599
msgid ""
"Returns a started :class:`~multiprocessing.managers.SyncManager` object "
"which can be used for sharing objects between processes.  The returned "
"manager object corresponds to a spawned child process and has methods which "
"will create shared objects and return corresponding proxies."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1607
msgid ""
"Manager processes will be shutdown as soon as they are garbage collected or "
"their parent process exits.  The manager classes are defined in the :mod:"
"`multiprocessing.managers` module:"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1613
msgid "Create a BaseManager object."
msgstr "Criando um objeto BaseManager."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1615
msgid ""
"Once created one should call :meth:`start` or ``get_server()."
"serve_forever()`` to ensure that the manager object refers to a started "
"manager process."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1618
msgid ""
"*address* is the address on which the manager process listens for new "
"connections.  If *address* is ``None`` then an arbitrary one is chosen."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1621
msgid ""
"*authkey* is the authentication key which will be used to check the validity "
"of incoming connections to the server process.  If *authkey* is ``None`` "
"then ``current_process().authkey`` is used. Otherwise *authkey* is used and "
"it must be a byte string."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1628
msgid ""
"Start a subprocess to start the manager.  If *initializer* is not ``None`` "
"then the subprocess will call ``initializer(*initargs)`` when it starts."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1633
msgid ""
"Returns a :class:`Server` object which represents the actual server under "
"the control of the Manager. The :class:`Server` object supports the :meth:"
"`serve_forever` method::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1642
msgid ":class:`Server` additionally has an :attr:`address` attribute."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1646
msgid "Connect a local manager object to a remote manager process::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1654
msgid ""
"Stop the process used by the manager.  This is only available if :meth:"
"`start` has been used to start the server process."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1657
msgid "This can be called multiple times."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1661
msgid ""
"A classmethod which can be used for registering a type or callable with the "
"manager class."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1664
msgid ""
"*typeid* is a \"type identifier\" which is used to identify a particular "
"type of shared object.  This must be a string."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1667
msgid ""
"*callable* is a callable used for creating objects for this type "
"identifier.  If a manager instance will be connected to the server using "
"the :meth:`connect` method, or if the *create_method* argument is ``False`` "
"then this can be left as ``None``."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1673
msgid ""
"*proxytype* is a subclass of :class:`BaseProxy` which is used to create "
"proxies for shared objects with this *typeid*.  If ``None`` then a proxy "
"class is created automatically."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1677
msgid ""
"*exposed* is used to specify a sequence of method names which proxies for "
"this typeid should be allowed to access using :meth:`BaseProxy."
"_callmethod`.  (If *exposed* is ``None`` then :attr:`proxytype._exposed_` is "
"used instead if it exists.)  In the case where no exposed list is specified, "
"all \"public methods\" of the shared object will be accessible.  (Here a "
"\"public method\" means any attribute which has a :meth:`~object.__call__` "
"method and whose name does not begin with ``'_'``.)"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1686
msgid ""
"*method_to_typeid* is a mapping used to specify the return type of those "
"exposed methods which should return a proxy.  It maps method names to typeid "
"strings.  (If *method_to_typeid* is ``None`` then :attr:`proxytype."
"_method_to_typeid_` is used instead if it exists.)  If a method's name is "
"not a key of this mapping or if the mapping is ``None`` then the object "
"returned by the method will be copied by value."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1693
msgid ""
"*create_method* determines whether a method should be created with name "
"*typeid* which can be used to tell the server process to create a new shared "
"object and return a proxy for it.  By default it is ``True``."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1697
msgid ":class:`BaseManager` instances also have one read-only property:"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1701
msgid "The address used by the manager."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1703
msgid ""
"Manager objects support the context management protocol -- see :ref:"
"`typecontextmanager`.  :meth:`~contextmanager.__enter__` starts the server "
"process (if it has not already started) and then returns the manager "
"object.  :meth:`~contextmanager.__exit__` calls :meth:`shutdown`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1709
msgid ""
"In previous versions :meth:`~contextmanager.__enter__` did not start the "
"manager's server process if it was not already started."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1714
msgid ""
"A subclass of :class:`BaseManager` which can be used for the synchronization "
"of processes.  Objects of this type are returned by :func:`multiprocessing."
"Manager`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1718
msgid ""
"Its methods create and return :ref:`multiprocessing-proxy_objects` for a "
"number of commonly used data types to be synchronized across processes. This "
"notably includes shared lists and dictionaries."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1724
msgid ""
"Create a shared :class:`threading.Barrier` object and return a proxy for it."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1731
msgid ""
"Create a shared :class:`threading.BoundedSemaphore` object and return a "
"proxy for it."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1736
msgid ""
"Create a shared :class:`threading.Condition` object and return a proxy for "
"it."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1739
msgid ""
"If *lock* is supplied then it should be a proxy for a :class:`threading."
"Lock` or :class:`threading.RLock` object."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1747
msgid ""
"Create a shared :class:`threading.Event` object and return a proxy for it."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1751
msgid ""
"Create a shared :class:`threading.Lock` object and return a proxy for it."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1755
msgid "Create a shared :class:`Namespace` object and return a proxy for it."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1759
msgid "Create a shared :class:`queue.Queue` object and return a proxy for it."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1763
msgid ""
"Create a shared :class:`threading.RLock` object and return a proxy for it."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1767
msgid ""
"Create a shared :class:`threading.Semaphore` object and return a proxy for "
"it."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1772
msgid "Create an array and return a proxy for it."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1776
msgid ""
"Create an object with a writable ``value`` attribute and return a proxy for "
"it."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1783
msgid "Create a shared :class:`dict` object and return a proxy for it."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1788
msgid "Create a shared :class:`list` object and return a proxy for it."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1790
msgid ""
"Shared objects are capable of being nested.  For example, a shared container "
"object such as a shared list can contain other shared objects which will all "
"be managed and synchronized by the :class:`SyncManager`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1797
msgid "A type that can register with :class:`SyncManager`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1799
msgid ""
"A namespace object has no public methods, but does have writable attributes. "
"Its representation shows the values of its attributes."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1802
msgid ""
"However, when using a proxy for a namespace object, an attribute beginning "
"with ``'_'`` will be an attribute of the proxy and not an attribute of the "
"referent:"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1818
msgid "Customized managers"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1820
msgid ""
"To create one's own manager, one creates a subclass of :class:`BaseManager` "
"and uses the :meth:`~BaseManager.register` classmethod to register new types "
"or callables with the manager class.  For example::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1845
msgid "Using a remote manager"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1847
msgid ""
"It is possible to run a manager server on one machine and have clients use "
"it from other machines (assuming that the firewalls involved allow it)."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1850
msgid ""
"Running the following commands creates a server for a single shared queue "
"which remote clients can access::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1862
msgid "One client can access the server as follows::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1872
msgid "Another client can also use it::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1883
msgid ""
"Local processes can also access that queue, using the code from above on the "
"client to access it remotely::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1908
msgid "Proxy Objects"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1910
msgid ""
"A proxy is an object which *refers* to a shared object which lives "
"(presumably) in a different process.  The shared object is said to be the "
"*referent* of the proxy.  Multiple proxy objects may have the same referent."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1914
msgid ""
"A proxy object has methods which invoke corresponding methods of its "
"referent (although not every method of the referent will necessarily be "
"available through the proxy).  In this way, a proxy can be used just like "
"its referent can:"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1932
msgid ""
"Notice that applying :func:`str` to a proxy will return the representation "
"of the referent, whereas applying :func:`repr` will return the "
"representation of the proxy."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1936
msgid ""
"An important feature of proxy objects is that they are picklable so they can "
"be passed between processes.  As such, a referent can contain :ref:"
"`multiprocessing-proxy_objects`.  This permits nesting of these managed "
"lists, dicts, and other :ref:`multiprocessing-proxy_objects`:"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1952
msgid "Similarly, dict and list proxies may be nested inside one another::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1965
msgid ""
"If standard (non-proxy) :class:`list` or :class:`dict` objects are contained "
"in a referent, modifications to those mutable values will not be propagated "
"through the manager because the proxy has no way of knowing when the values "
"contained within are modified.  However, storing a value in a container "
"proxy (which triggers a ``__setitem__`` on the proxy object) does propagate "
"through the manager and so to effectively modify such an item, one could re-"
"assign the modified value to the container proxy::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1984
msgid ""
"This approach is perhaps less convenient than employing nested :ref:"
"`multiprocessing-proxy_objects` for most use cases but also demonstrates a "
"level of control over the synchronization."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1990
msgid ""
"The proxy types in :mod:`multiprocessing` do nothing to support comparisons "
"by value.  So, for instance, we have:"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:1998
msgid ""
"One should just use a copy of the referent instead when making comparisons."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2002
msgid "Proxy objects are instances of subclasses of :class:`BaseProxy`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2006
msgid "Call and return the result of a method of the proxy's referent."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2008
msgid ""
"If ``proxy`` is a proxy whose referent is ``obj`` then the expression ::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2012
msgid "will evaluate the expression ::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2016
msgid "in the manager's process."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2018
msgid ""
"The returned value will be a copy of the result of the call or a proxy to a "
"new shared object -- see documentation for the *method_to_typeid* argument "
"of :meth:`BaseManager.register`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2022
msgid ""
"If an exception is raised by the call, then is re-raised by :meth:"
"`_callmethod`.  If some other exception is raised in the manager's process "
"then this is converted into a :exc:`RemoteError` exception and is raised by :"
"meth:`_callmethod`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2027
msgid ""
"Note in particular that an exception will be raised if *methodname* has not "
"been *exposed*."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2030
msgid "An example of the usage of :meth:`_callmethod`:"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2046
msgid "Return a copy of the referent."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2048
msgid "If the referent is unpicklable then this will raise an exception."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2052
msgid "Return a representation of the proxy object."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2056
msgid "Return the representation of the referent."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2060
msgid "Cleanup"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2062
msgid ""
"A proxy object uses a weakref callback so that when it gets garbage "
"collected it deregisters itself from the manager which owns its referent."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2065
msgid ""
"A shared object gets deleted from the manager process when there are no "
"longer any proxies referring to it."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2070
msgid "Process Pools"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2075
msgid ""
"One can create a pool of processes which will carry out tasks submitted to "
"it with the :class:`Pool` class."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2080
msgid ""
"A process pool object which controls a pool of worker processes to which "
"jobs can be submitted.  It supports asynchronous results with timeouts and "
"callbacks and has a parallel map implementation."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2084
msgid ""
"*processes* is the number of worker processes to use.  If *processes* is "
"``None`` then the number returned by :func:`os.cpu_count` is used."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2087
#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2640
msgid ""
"If *initializer* is not ``None`` then each worker process will call "
"``initializer(*initargs)`` when it starts."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2090
msgid ""
"*maxtasksperchild* is the number of tasks a worker process can complete "
"before it will exit and be replaced with a fresh worker process, to enable "
"unused resources to be freed. The default *maxtasksperchild* is ``None``, "
"which means worker processes will live as long as the pool."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2095
msgid ""
"*context* can be used to specify the context used for starting the worker "
"processes.  Usually a pool is created using the function :func:"
"`multiprocessing.Pool` or the :meth:`Pool` method of a context object.  In "
"both cases *context* is set appropriately."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2101
msgid ""
"Note that the methods of the pool object should only be called by the "
"process which created the pool."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2105
msgid ""
":class:`multiprocessing.pool` objects have internal resources that need to "
"be properly managed (like any other resource) by using the pool as a context "
"manager or by calling :meth:`close` and :meth:`terminate` manually. Failure "
"to do this can lead to the process hanging on finalization."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2110
msgid ""
"Note that is **not correct** to rely on the garbage colletor to destroy the "
"pool as CPython does not assure that the finalizer of the pool will be "
"called (see :meth:`object.__del__` for more information)."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2114
msgid "*maxtasksperchild*"
msgstr "*maxtasksperchild*"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2117
msgid "*context*"
msgstr "*context*"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2122
msgid ""
"Worker processes within a :class:`Pool` typically live for the complete "
"duration of the Pool's work queue. A frequent pattern found in other systems "
"(such as Apache, mod_wsgi, etc) to free resources held by workers is to "
"allow a worker within a pool to complete only a set amount of work before "
"being exiting, being cleaned up and a new process spawned to replace the old "
"one. The *maxtasksperchild* argument to the :class:`Pool` exposes this "
"ability to the end user."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2132
msgid ""
"Call *func* with arguments *args* and keyword arguments *kwds*.  It blocks "
"until the result is ready. Given this blocks, :meth:`apply_async` is better "
"suited for performing work in parallel. Additionally, *func* is only "
"executed in one of the workers of the pool."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2139
msgid "A variant of the :meth:`apply` method which returns a result object."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2141
#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2171
msgid ""
"If *callback* is specified then it should be a callable which accepts a "
"single argument.  When the result becomes ready *callback* is applied to it, "
"that is unless the call failed, in which case the *error_callback* is "
"applied instead."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2146
#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2176
msgid ""
"If *error_callback* is specified then it should be a callable which accepts "
"a single argument.  If the target function fails, then the *error_callback* "
"is called with the exception instance."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2150
#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2180
msgid ""
"Callbacks should complete immediately since otherwise the thread which "
"handles the results will get blocked."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2155
msgid ""
"A parallel equivalent of the :func:`map` built-in function (it supports only "
"one *iterable* argument though, for multiple iterables see :meth:`starmap`). "
"It blocks until the result is ready."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2159
msgid ""
"This method chops the iterable into a number of chunks which it submits to "
"the process pool as separate tasks.  The (approximate) size of these chunks "
"can be specified by setting *chunksize* to a positive integer."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2163
msgid ""
"Note that it may cause high memory usage for very long iterables. Consider "
"using :meth:`imap` or :meth:`imap_unordered` with explicit *chunksize* "
"option for better efficiency."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2169
msgid "A variant of the :meth:`.map` method which returns a result object."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2185
msgid "A lazier version of :meth:`.map`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2187
msgid ""
"The *chunksize* argument is the same as the one used by the :meth:`.map` "
"method.  For very long iterables using a large value for *chunksize* can "
"make the job complete **much** faster than using the default value of ``1``."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2192
msgid ""
"Also if *chunksize* is ``1`` then the :meth:`!next` method of the iterator "
"returned by the :meth:`imap` method has an optional *timeout* parameter: "
"``next(timeout)`` will raise :exc:`multiprocessing.TimeoutError` if the "
"result cannot be returned within *timeout* seconds."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2199
msgid ""
"The same as :meth:`imap` except that the ordering of the results from the "
"returned iterator should be considered arbitrary.  (Only when there is only "
"one worker process is the order guaranteed to be \"correct\".)"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2205
msgid ""
"Like :meth:`map` except that the elements of the *iterable* are expected to "
"be iterables that are unpacked as arguments."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2208
msgid ""
"Hence an *iterable* of ``[(1,2), (3, 4)]`` results in ``[func(1,2), "
"func(3,4)]``."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2215
msgid ""
"A combination of :meth:`starmap` and :meth:`map_async` that iterates over "
"*iterable* of iterables and calls *func* with the iterables unpacked. "
"Returns a result object."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2223
msgid ""
"Prevents any more tasks from being submitted to the pool.  Once all the "
"tasks have been completed the worker processes will exit."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2228
msgid ""
"Stops the worker processes immediately without completing outstanding work.  "
"When the pool object is garbage collected :meth:`terminate` will be called "
"immediately."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2234
msgid ""
"Wait for the worker processes to exit.  One must call :meth:`close` or :meth:"
"`terminate` before using :meth:`join`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2237
msgid ""
"Pool objects now support the context management protocol -- see :ref:"
"`typecontextmanager`.  :meth:`~contextmanager.__enter__` returns the pool "
"object, and :meth:`~contextmanager.__exit__` calls :meth:`terminate`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2245
msgid ""
"The class of the result returned by :meth:`Pool.apply_async` and :meth:`Pool."
"map_async`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2250
msgid ""
"Return the result when it arrives.  If *timeout* is not ``None`` and the "
"result does not arrive within *timeout* seconds then :exc:`multiprocessing."
"TimeoutError` is raised.  If the remote call raised an exception then that "
"exception will be reraised by :meth:`get`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2257
msgid "Wait until the result is available or until *timeout* seconds pass."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2261
msgid "Return whether the call has completed."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2265
msgid ""
"Return whether the call completed without raising an exception.  Will raise :"
"exc:`ValueError` if the result is not ready."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2268
msgid "The following example demonstrates the use of a pool::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2295
msgid "Listeners and Clients"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2300
msgid ""
"Usually message passing between processes is done using queues or by using :"
"class:`~Connection` objects returned by :func:`~multiprocessing.Pipe`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2304
msgid ""
"However, the :mod:`multiprocessing.connection` module allows some extra "
"flexibility.  It basically gives a high level message oriented API for "
"dealing with sockets or Windows named pipes.  It also has support for "
"*digest authentication* using the :mod:`hmac` module, and for polling "
"multiple connections at the same time."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2313
msgid ""
"Send a randomly generated message to the other end of the connection and "
"wait for a reply."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2316
msgid ""
"If the reply matches the digest of the message using *authkey* as the key "
"then a welcome message is sent to the other end of the connection.  "
"Otherwise :exc:`~multiprocessing.AuthenticationError` is raised."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2322
msgid ""
"Receive a message, calculate the digest of the message using *authkey* as "
"the key, and then send the digest back."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2325
msgid ""
"If a welcome message is not received, then :exc:`~multiprocessing."
"AuthenticationError` is raised."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2330
msgid ""
"Attempt to set up a connection to the listener which is using address "
"*address*, returning a :class:`~Connection`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2333
msgid ""
"The type of the connection is determined by *family* argument, but this can "
"generally be omitted since it can usually be inferred from the format of "
"*address*. (See :ref:`multiprocessing-address-formats`)"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2337
#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2372
msgid ""
"If *authkey* is given and not None, it should be a byte string and will be "
"used as the secret key for an HMAC-based authentication challenge. No "
"authentication is done if *authkey* is None. :exc:`~multiprocessing."
"AuthenticationError` is raised if authentication fails. See :ref:"
"`multiprocessing-auth-keys`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2345
msgid ""
"A wrapper for a bound socket or Windows named pipe which is 'listening' for "
"connections."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2348
msgid ""
"*address* is the address to be used by the bound socket or named pipe of the "
"listener object."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2353
msgid ""
"If an address of '0.0.0.0' is used, the address will not be a connectable "
"end point on Windows. If you require a connectable end-point, you should use "
"'127.0.0.1'."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2357
msgid ""
"*family* is the type of socket (or named pipe) to use.  This can be one of "
"the strings ``'AF_INET'`` (for a TCP socket), ``'AF_UNIX'`` (for a Unix "
"domain socket) or ``'AF_PIPE'`` (for a Windows named pipe).  Of these only "
"the first is guaranteed to be available.  If *family* is ``None`` then the "
"family is inferred from the format of *address*.  If *address* is also "
"``None`` then a default is chosen.  This default is the family which is "
"assumed to be the fastest available.  See :ref:`multiprocessing-address-"
"formats`.  Note that if *family* is ``'AF_UNIX'`` and address is ``None`` "
"then the socket will be created in a private temporary directory created "
"using :func:`tempfile.mkstemp`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2368
msgid ""
"If the listener object uses a socket then *backlog* (1 by default) is passed "
"to the :meth:`~socket.socket.listen` method of the socket once it has been "
"bound."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2380
msgid ""
"Accept a connection on the bound socket or named pipe of the listener object "
"and return a :class:`~Connection` object. If authentication is attempted and "
"fails, then :exc:`~multiprocessing.AuthenticationError` is raised."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2387
msgid ""
"Close the bound socket or named pipe of the listener object.  This is called "
"automatically when the listener is garbage collected.  However it is "
"advisable to call it explicitly."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2391
msgid "Listener objects have the following read-only properties:"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2395
msgid "The address which is being used by the Listener object."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2399
msgid ""
"The address from which the last accepted connection came.  If this is "
"unavailable then it is ``None``."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2402
msgid ""
"Listener objects now support the context management protocol -- see :ref:"
"`typecontextmanager`.  :meth:`~contextmanager.__enter__` returns the "
"listener object, and :meth:`~contextmanager.__exit__` calls :meth:`close`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2409
msgid ""
"Wait till an object in *object_list* is ready.  Returns the list of those "
"objects in *object_list* which are ready.  If *timeout* is a float then the "
"call blocks for at most that many seconds.  If *timeout* is ``None`` then it "
"will block for an unlimited period. A negative timeout is equivalent to a "
"zero timeout."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2415
msgid ""
"For both Unix and Windows, an object can appear in *object_list* if it is"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2418
msgid "a readable :class:`~multiprocessing.connection.Connection` object;"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2419
msgid "a connected and readable :class:`socket.socket` object; or"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2420
msgid ""
"the :attr:`~multiprocessing.Process.sentinel` attribute of a :class:"
"`~multiprocessing.Process` object."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2423
msgid ""
"A connection or socket object is ready when there is data available to be "
"read from it, or the other end has been closed."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2426
msgid ""
"**Unix**: ``wait(object_list, timeout)`` almost equivalent ``select."
"select(object_list, [], [], timeout)``.  The difference is that, if :func:"
"`select.select` is interrupted by a signal, it can raise :exc:`OSError` with "
"an error number of ``EINTR``, whereas :func:`wait` will not."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2432
msgid ""
"**Windows**: An item in *object_list* must either be an integer handle which "
"is waitable (according to the definition used by the documentation of the "
"Win32 function ``WaitForMultipleObjects()``) or it can be an object with a :"
"meth:`fileno` method which returns a socket handle or pipe handle.  (Note "
"that pipe handles and socket handles are **not** waitable handles.)"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2442
msgid "**Examples**"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2444
msgid ""
"The following server code creates a listener which uses ``'secret "
"password'`` as an authentication key.  It then waits for a connection and "
"sends some data to the client::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2463
msgid ""
"The following code connects to the server and receives some data from the "
"server::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2480
msgid ""
"The following code uses :func:`~multiprocessing.connection.wait` to wait for "
"messages from multiple processes at once::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2519
msgid "Address Formats"
msgstr "Formatos de Endereços"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2521
msgid ""
"An ``'AF_INET'`` address is a tuple of the form ``(hostname, port)`` where "
"*hostname* is a string and *port* is an integer."
msgstr ""
"Um endereço ``'AF_INET'`` é uma tupla na forma de ``(hostname, port)`` sendo "
"*hostname* uma string e *port* um inteiro."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2524
msgid ""
"An ``'AF_UNIX'`` address is a string representing a filename on the "
"filesystem."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2530
msgid "An ``'AF_PIPE'`` address is a string of the form"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2528
msgid ""
":samp:`r'\\\\\\\\.\\\\pipe\\\\{PipeName}'`.  To use :func:`Client` to "
"connect to a named pipe on a remote computer called *ServerName* one should "
"use an address of the form :samp:`r'\\\\\\\\{ServerName}\\\\pipe\\"
"\\{PipeName}'` instead."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2532
msgid ""
"Note that any string beginning with two backslashes is assumed by default to "
"be an ``'AF_PIPE'`` address rather than an ``'AF_UNIX'`` address."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2539
msgid "Authentication keys"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2541
msgid ""
"When one uses :meth:`Connection.recv <Connection.recv>`, the data received "
"is automatically unpickled. Unfortunately unpickling data from an untrusted "
"source is a security risk. Therefore :class:`Listener` and :func:`Client` "
"use the :mod:`hmac` module to provide digest authentication."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2547
msgid ""
"An authentication key is a byte string which can be thought of as a "
"password: once a connection is established both ends will demand proof that "
"the other knows the authentication key.  (Demonstrating that both ends are "
"using the same key does **not** involve sending the key over the connection.)"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2553
msgid ""
"If authentication is requested but no authentication key is specified then "
"the return value of ``current_process().authkey`` is used (see :class:"
"`~multiprocessing.Process`).  This value will be automatically inherited by "
"any :class:`~multiprocessing.Process` object that the current process "
"creates. This means that (by default) all processes of a multi-process "
"program will share a single authentication key which can be used when "
"setting up connections between themselves."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2561
msgid ""
"Suitable authentication keys can also be generated by using :func:`os."
"urandom`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2565
msgid "Logging"
msgstr "Gerando logs"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2567
msgid ""
"Some support for logging is available.  Note, however, that the :mod:"
"`logging` package does not use process shared locks so it is possible "
"(depending on the handler type) for messages from different processes to get "
"mixed up."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2574
msgid ""
"Returns the logger used by :mod:`multiprocessing`.  If necessary, a new one "
"will be created."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2577
msgid ""
"When first created the logger has level :data:`logging.NOTSET` and no "
"default handler. Messages sent to this logger will not by default propagate "
"to the root logger."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2581
msgid ""
"Note that on Windows child processes will only inherit the level of the "
"parent process's logger -- any other customization of the logger will not be "
"inherited."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2588
msgid ""
"This function performs a call to :func:`get_logger` but in addition to "
"returning the logger created by get_logger, it adds a handler which sends "
"output to :data:`sys.stderr` using format ``'[%(levelname)s/%(processName)s] "
"%(message)s'``."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2593
msgid "Below is an example session with logging turned on::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2608
msgid "For a full table of logging levels, see the :mod:`logging` module."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2612
msgid "The :mod:`multiprocessing.dummy` module"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2617
msgid ""
":mod:`multiprocessing.dummy` replicates the API of :mod:`multiprocessing` "
"but is no more than a wrapper around the :mod:`threading` module."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2622
msgid ""
"In particular, the ``Pool`` function provided by :mod:`multiprocessing."
"dummy` returns an instance of :class:`ThreadPool`, which is a subclass of :"
"class:`Pool` that supports all the same method calls but uses a pool of "
"worker threads rather than worker processes."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2630
msgid ""
"A thread pool object which controls a pool of worker threads to which jobs "
"can be submitted.  :class:`ThreadPool` instances are fully interface "
"compatible with :class:`Pool` instances, and their resources must also be "
"properly managed, either by using the pool as a context manager or by "
"calling :meth:`~multiprocessing.pool.Pool.close` and :meth:`~multiprocessing."
"pool.Pool.terminate` manually."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2637
msgid ""
"*processes* is the number of worker threads to use.  If *processes* is "
"``None`` then the number returned by :func:`os.cpu_count` is used."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2643
msgid ""
"Unlike :class:`Pool`, *maxtasksperchild* and *context* cannot be provided."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2647
msgid ""
"A :class:`ThreadPool` shares the same interface as :class:`Pool`, which is "
"designed around a pool of processes and predates the introduction of the :"
"class:`concurrent.futures` module.  As such, it inherits some operations "
"that don't make sense for a pool backed by threads, and it has its own type "
"for representing the status of asynchronous jobs, :class:`AsyncResult`, that "
"is not understood by any other libraries."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2654
msgid ""
"Users should generally prefer to use :class:`concurrent.futures."
"ThreadPoolExecutor`, which has a simpler interface that was designed around "
"threads from the start, and which returns :class:`concurrent.futures.Future` "
"instances that are compatible with many other libraries, including :mod:"
"`asyncio`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2664
msgid "Programming guidelines"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2666
msgid ""
"There are certain guidelines and idioms which should be adhered to when "
"using :mod:`multiprocessing`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2671
msgid "All start methods"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2673
msgid "The following applies to all start methods."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2675
msgid "Avoid shared state"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2677
msgid ""
"As far as possible one should try to avoid shifting large amounts of data "
"between processes."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2680
msgid ""
"It is probably best to stick to using queues or pipes for communication "
"between processes rather than using the lower level synchronization "
"primitives."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2684
msgid "Picklability"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2686
msgid "Ensure that the arguments to the methods of proxies are picklable."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2688
msgid "Thread safety of proxies"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2690
msgid ""
"Do not use a proxy object from more than one thread unless you protect it "
"with a lock."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2693
msgid ""
"(There is never a problem with different processes using the *same* proxy.)"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2695
msgid "Joining zombie processes"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2697
msgid ""
"On Unix when a process finishes but has not been joined it becomes a zombie. "
"There should never be very many because each time a new process starts (or :"
"func:`~multiprocessing.active_children` is called) all completed processes "
"which have not yet been joined will be joined.  Also calling a finished "
"process's :meth:`Process.is_alive <multiprocessing.Process.is_alive>` will "
"join the process.  Even so it is probably good practice to explicitly join "
"all the processes that you start."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2705
msgid "Better to inherit than pickle/unpickle"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2707
msgid ""
"When using the *spawn* or *forkserver* start methods many types from :mod:"
"`multiprocessing` need to be picklable so that child processes can use "
"them.  However, one should generally avoid sending shared objects to other "
"processes using pipes or queues. Instead you should arrange the program so "
"that a process which needs access to a shared resource created elsewhere can "
"inherit it from an ancestor process."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2715
msgid "Avoid terminating processes"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2717
msgid ""
"Using the :meth:`Process.terminate <multiprocessing.Process.terminate>` "
"method to stop a process is liable to cause any shared resources (such as "
"locks, semaphores, pipes and queues) currently being used by the process to "
"become broken or unavailable to other processes."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2723
msgid ""
"Therefore it is probably best to only consider using :meth:`Process."
"terminate <multiprocessing.Process.terminate>` on processes which never use "
"any shared resources."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2727
msgid "Joining processes that use queues"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2729
msgid ""
"Bear in mind that a process that has put items in a queue will wait before "
"terminating until all the buffered items are fed by the \"feeder\" thread to "
"the underlying pipe.  (The child process can call the :meth:`Queue."
"cancel_join_thread <multiprocessing.Queue.cancel_join_thread>` method of the "
"queue to avoid this behaviour.)"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2735
msgid ""
"This means that whenever you use a queue you need to make sure that all "
"items which have been put on the queue will eventually be removed before the "
"process is joined.  Otherwise you cannot be sure that processes which have "
"put items on the queue will terminate.  Remember also that non-daemonic "
"processes will be joined automatically."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2741
msgid "An example which will deadlock is the following::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2755
msgid ""
"A fix here would be to swap the last two lines (or simply remove the ``p."
"join()`` line)."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2758
msgid "Explicitly pass resources to child processes"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2760
msgid ""
"On Unix using the *fork* start method, a child process can make use of a "
"shared resource created in a parent process using a global resource.  "
"However, it is better to pass the object as an argument to the constructor "
"for the child process."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2765
msgid ""
"Apart from making the code (potentially) compatible with Windows and the "
"other start methods this also ensures that as long as the child process is "
"still alive the object will not be garbage collected in the parent process.  "
"This might be important if some resource is freed when the object is garbage "
"collected in the parent process."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2772
msgid "So for instance ::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2784
msgid "should be rewritten as ::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2796
msgid "Beware of replacing :data:`sys.stdin` with a \"file like object\""
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2798
msgid ":mod:`multiprocessing` originally unconditionally called::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2802
msgid ""
"in the :meth:`multiprocessing.Process._bootstrap` method --- this resulted "
"in issues with processes-in-processes. This has been changed to::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2808
msgid ""
"Which solves the fundamental issue of processes colliding with each other "
"resulting in a bad file descriptor error, but introduces a potential danger "
"to applications which replace :func:`sys.stdin` with a \"file-like object\" "
"with output buffering.  This danger is that if multiple processes call :meth:"
"`~io.IOBase.close()` on this file-like object, it could result in the same "
"data being flushed to the object multiple times, resulting in corruption."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2815
msgid ""
"If you write a file-like object and implement your own caching, you can make "
"it fork-safe by storing the pid whenever you append to the cache, and "
"discarding the cache when the pid changes. For example::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2827
msgid ""
"For more information, see :issue:`5155`, :issue:`5313` and :issue:`5331`"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2830
msgid "The *spawn* and *forkserver* start methods"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2832
msgid ""
"There are a few extra restriction which don't apply to the *fork* start "
"method."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2835
msgid "More picklability"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2837
msgid ""
"Ensure that all arguments to :meth:`Process.__init__` are picklable. Also, "
"if you subclass :class:`~multiprocessing.Process` then make sure that "
"instances will be picklable when the :meth:`Process.start <multiprocessing."
"Process.start>` method is called."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2842
msgid "Global variables"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2844
msgid ""
"Bear in mind that if code run in a child process tries to access a global "
"variable, then the value it sees (if any) may not be the same as the value "
"in the parent process at the time that :meth:`Process.start <multiprocessing."
"Process.start>` was called."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2849
msgid ""
"However, global variables which are just module level constants cause no "
"problems."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2852
msgid "Safe importing of main module"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2854
msgid ""
"Make sure that the main module can be safely imported by a new Python "
"interpreter without causing unintended side effects (such a starting a new "
"process)."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2858
msgid ""
"For example, using the *spawn* or *forkserver* start method running the "
"following module would fail with a :exc:`RuntimeError`::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2870
msgid ""
"Instead one should protect the \"entry point\" of the program by using ``if "
"__name__ == '__main__':`` as follows::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2884
msgid ""
"(The ``freeze_support()`` line can be omitted if the program will be run "
"normally instead of frozen.)"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2887
msgid ""
"This allows the newly spawned Python interpreter to safely import the module "
"and then run the module's ``foo()`` function."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2890
msgid ""
"Similar restrictions apply if a pool or manager is created in the main "
"module."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2897
msgid "Examples"
msgstr "Exemplos"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2899
msgid "Demonstration of how to create and use customized managers and proxies:"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2905
msgid "Using :class:`~multiprocessing.pool.Pool`:"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/multiprocessing.rst:2911
msgid ""
"An example showing how to use queues to feed tasks to a collection of worker "
"processes and collect the results:"
msgstr ""
