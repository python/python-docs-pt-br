# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-23 14:20+0000\n"
"PO-Revision-Date: 2025-07-18 18:48+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/base64.rst:2
msgid ":mod:`!base64` --- Base16, Base32, Base64, Base85 Data Encodings"
msgstr ""

#: ../../library/base64.rst:8
msgid "**Source code:** :source:`Lib/base64.py`"
msgstr "**Código-fonte:** :source:`Lib/base64.py`"

#: ../../library/base64.rst:16
msgid ""
"This module provides functions for encoding binary data to printable ASCII "
"characters and decoding such encodings back to binary data. This includes "
"the :ref:`encodings specified in <base64-rfc-4648>` :rfc:`4648` (Base64, "
"Base32 and Base16) and the non-standard :ref:`Base85 encodings <base64-"
"base-85>`."
msgstr ""

#: ../../library/base64.rst:22
msgid ""
"There are two interfaces provided by this module.  The modern interface "
"supports encoding :term:`bytes-like objects <bytes-like object>` to ASCII :"
"class:`bytes`, and decoding :term:`bytes-like objects <bytes-like object>` "
"or strings containing ASCII to :class:`bytes`.  Both base-64 alphabets "
"defined in :rfc:`4648` (normal, and URL- and filesystem-safe) are supported."
msgstr ""
"Existem duas interfaces fornecidas por este módulo. A interface moderna "
"oferece suporte a codificar :term:`objetos bytes ou similares <bytes-like "
"object>` para :class:`bytes` ASCII, e decodificar :term:`objetos bytes ou "
"similares <bytes-like object>` ou strings contendo ASCII para :class:"
"`bytes`. Ambos os alfabetos de base 64 definidos em :rfc:`4648` (normal e "
"seguro para URL e sistema de arquivos) são suportados."

#: ../../library/base64.rst:28
msgid ""
"The :ref:`legacy interface <base64-legacy>` does not support decoding from "
"strings, but it does provide functions for encoding and decoding to and "
"from :term:`file objects <file object>`.  It only supports the Base64 "
"standard alphabet, and it adds newlines every 76 characters as per :rfc:"
"`2045`.  Note that if you are looking for :rfc:`2045` support you probably "
"want to be looking at the :mod:`email` package instead."
msgstr ""

#: ../../library/base64.rst:36
msgid ""
"ASCII-only Unicode strings are now accepted by the decoding functions of the "
"modern interface."
msgstr ""
"Strings Unicode exclusivamente ASCII agora são aceitas pelas funções de "
"decodificação da interface moderna."

#: ../../library/base64.rst:40
msgid ""
"Any :term:`bytes-like objects <bytes-like object>` are now accepted by all "
"encoding and decoding functions in this module.  Ascii85/Base85 support "
"added."
msgstr ""
"Quaisquer :term:`objetos bytes ou similares <bytes-like object>` agora são "
"aceitos por todas as funções de codificação e decodificação neste módulo. "
"Adicionado suporte a ASCII85/Base85."

#: ../../library/base64.rst:48
msgid "RFC 4648 Encodings"
msgstr ""

#: ../../library/base64.rst:50
msgid ""
"The :rfc:`4648` encodings are suitable for encoding binary data so that it "
"can be safely sent by email, used as parts of URLs, or included as part of "
"an HTTP POST request."
msgstr ""

#: ../../library/base64.rst:56
msgid ""
"Encode the :term:`bytes-like object` *s* using Base64 and return the "
"encoded :class:`bytes`."
msgstr ""
"Codifica o :term:`objeto bytes ou similar` *s* usando Base64 e retorna o :"
"class:`bytes` codificado."

#: ../../library/base64.rst:59
msgid ""
"Optional *altchars* must be a :term:`bytes-like object` of length 2 which "
"specifies an alternative alphabet for the ``+`` and ``/`` characters. This "
"allows an application to e.g. generate URL or filesystem safe Base64 "
"strings.  The default is ``None``, for which the standard Base64 alphabet is "
"used."
msgstr ""

#: ../../library/base64.rst:64
msgid ""
"May assert or raise a :exc:`ValueError` if the length of *altchars* is not "
"2.  Raises a :exc:`TypeError` if *altchars* is not a :term:`bytes-like "
"object`."
msgstr ""

#: ../../library/base64.rst:70
msgid ""
"Decode the Base64 encoded :term:`bytes-like object` or ASCII string *s* and "
"return the decoded :class:`bytes`."
msgstr ""
"Decodifica o :term:`objeto bytes ou similar` ou string ASCII *s* codificada "
"em Base64 e retorna o :class:`bytes` decodificado."

#: ../../library/base64.rst:73
msgid ""
"Optional *altchars* must be a :term:`bytes-like object` or ASCII string of "
"length 2 which specifies the alternative alphabet used instead of the ``+`` "
"and ``/`` characters."
msgstr ""

#: ../../library/base64.rst:77
msgid ""
"A :exc:`binascii.Error` exception is raised if *s* is incorrectly padded."
msgstr ""

#: ../../library/base64.rst:80
msgid ""
"If *validate* is ``False`` (the default), characters that are neither in the "
"normal base-64 alphabet nor the alternative alphabet are discarded prior to "
"the padding check.  If *validate* is ``True``, these non-alphabet characters "
"in the input result in a :exc:`binascii.Error`."
msgstr ""

#: ../../library/base64.rst:86
msgid ""
"For more information about the strict base64 check, see :func:`binascii."
"a2b_base64`"
msgstr ""

#: ../../library/base64.rst:88
msgid ""
"May assert or raise a :exc:`ValueError` if the length of *altchars* is not 2."
msgstr ""

#: ../../library/base64.rst:92
msgid ""
"Encode :term:`bytes-like object` *s* using the standard Base64 alphabet and "
"return the encoded :class:`bytes`."
msgstr ""

#: ../../library/base64.rst:98
msgid ""
"Decode :term:`bytes-like object` or ASCII string *s* using the standard "
"Base64 alphabet and return the decoded :class:`bytes`."
msgstr ""

#: ../../library/base64.rst:104
msgid ""
"Encode :term:`bytes-like object` *s* using the URL- and filesystem-safe "
"alphabet, which substitutes ``-`` instead of ``+`` and ``_`` instead of ``/"
"`` in the standard Base64 alphabet, and return the encoded :class:`bytes`.  "
"The result can still contain ``=``."
msgstr ""

#: ../../library/base64.rst:113
msgid ""
"Decode :term:`bytes-like object` or ASCII string *s* using the URL- and "
"filesystem-safe alphabet, which substitutes ``-`` instead of ``+`` and ``_`` "
"instead of ``/`` in the standard Base64 alphabet, and return the decoded :"
"class:`bytes`."
msgstr ""

#: ../../library/base64.rst:122
msgid ""
"Encode the :term:`bytes-like object` *s* using Base32 and return the "
"encoded :class:`bytes`."
msgstr ""

#: ../../library/base64.rst:128
msgid ""
"Decode the Base32 encoded :term:`bytes-like object` or ASCII string *s* and "
"return the decoded :class:`bytes`."
msgstr ""

#: ../../library/base64.rst:131 ../../library/base64.rst:179
msgid ""
"Optional *casefold* is a flag specifying whether a lowercase alphabet is "
"acceptable as input.  For security purposes, the default is ``False``."
msgstr ""
"*casefold* opcional é uma flag especificando se um alfabeto minúsculo é "
"aceitável como entrada. Por razões de segurança, o padrão é ``False``."

#: ../../library/base64.rst:135
msgid ""
":rfc:`4648` allows for optional mapping of the digit 0 (zero) to the letter "
"O (oh), and for optional mapping of the digit 1 (one) to either the letter I "
"(eye) or letter L (el).  The optional argument *map01* when not ``None``, "
"specifies which letter the digit 1 should be mapped to (when *map01* is not "
"``None``, the digit 0 is always mapped to the letter O).  For security "
"purposes the default is ``None``, so that 0 and 1 are not allowed in the "
"input."
msgstr ""

#: ../../library/base64.rst:142 ../../library/base64.rst:183
msgid ""
"A :exc:`binascii.Error` is raised if *s* is incorrectly padded or if there "
"are non-alphabet characters present in the input."
msgstr ""

#: ../../library/base64.rst:149
msgid ""
"Similar to :func:`b32encode` but uses the Extended Hex Alphabet, as defined "
"in :rfc:`4648`."
msgstr ""

#: ../../library/base64.rst:157
msgid ""
"Similar to :func:`b32decode` but uses the Extended Hex Alphabet, as defined "
"in :rfc:`4648`."
msgstr ""

#: ../../library/base64.rst:160
msgid ""
"This version does not allow the digit 0 (zero) to the letter O (oh) and "
"digit 1 (one) to either the letter I (eye) or letter L (el) mappings, all "
"these characters are included in the Extended Hex Alphabet and are not "
"interchangeable."
msgstr ""

#: ../../library/base64.rst:170
msgid ""
"Encode the :term:`bytes-like object` *s* using Base16 and return the "
"encoded :class:`bytes`."
msgstr ""

#: ../../library/base64.rst:176
msgid ""
"Decode the Base16 encoded :term:`bytes-like object` or ASCII string *s* and "
"return the decoded :class:`bytes`."
msgstr ""

#: ../../library/base64.rst:190
msgid "Base85 Encodings"
msgstr ""

#: ../../library/base64.rst:192
msgid ""
"Base85 encoding is not formally specified but rather a de facto standard, "
"thus different systems perform the encoding differently."
msgstr ""

#: ../../library/base64.rst:195
msgid ""
"The :func:`a85encode` and :func:`b85encode` functions in this module are two "
"implementations of the de facto standard. You should call the function with "
"the Base85 implementation used by the software you intend to work with."
msgstr ""

#: ../../library/base64.rst:199
msgid ""
"The two functions present in this module differ in how they handle the "
"following:"
msgstr ""

#: ../../library/base64.rst:201
msgid "Whether to include enclosing ``<~`` and ``~>`` markers"
msgstr ""

#: ../../library/base64.rst:202
msgid "Whether to include newline characters"
msgstr ""

#: ../../library/base64.rst:203
msgid "The set of ASCII characters used for encoding"
msgstr ""

#: ../../library/base64.rst:204
msgid "Handling of null bytes"
msgstr ""

#: ../../library/base64.rst:206
msgid ""
"Refer to the documentation of the individual functions for more information."
msgstr ""

#: ../../library/base64.rst:210
msgid ""
"Encode the :term:`bytes-like object` *b* using Ascii85 and return the "
"encoded :class:`bytes`."
msgstr ""

#: ../../library/base64.rst:213
msgid ""
"*foldspaces* is an optional flag that uses the special short sequence 'y' "
"instead of 4 consecutive spaces (ASCII 0x20) as supported by 'btoa'. This "
"feature is not supported by the \"standard\" Ascii85 encoding."
msgstr ""

#: ../../library/base64.rst:217
msgid ""
"*wrapcol* controls whether the output should have newline (``b'\\n'``) "
"characters added to it. If this is non-zero, each output line will be at "
"most this many characters long, excluding the trailing newline."
msgstr ""

#: ../../library/base64.rst:221
msgid ""
"*pad* controls whether the input is padded to a multiple of 4 before "
"encoding. Note that the ``btoa`` implementation always pads."
msgstr ""

#: ../../library/base64.rst:224
msgid ""
"*adobe* controls whether the encoded byte sequence is framed with ``<~`` and "
"``~>``, which is used by the Adobe implementation."
msgstr ""

#: ../../library/base64.rst:232
msgid ""
"Decode the Ascii85 encoded :term:`bytes-like object` or ASCII string *b* and "
"return the decoded :class:`bytes`."
msgstr ""

#: ../../library/base64.rst:235
msgid ""
"*foldspaces* is a flag that specifies whether the 'y' short sequence should "
"be accepted as shorthand for 4 consecutive spaces (ASCII 0x20). This feature "
"is not supported by the \"standard\" Ascii85 encoding."
msgstr ""

#: ../../library/base64.rst:239
msgid ""
"*adobe* controls whether the input sequence is in Adobe Ascii85 format (i.e. "
"is framed with <~ and ~>)."
msgstr ""
"*adobe* controla se a entrada está no formato Adobe Ascii85 (ou seja, "
"cercada por <~ e ~>)."

#: ../../library/base64.rst:242
msgid ""
"*ignorechars* should be a :term:`bytes-like object` or ASCII string "
"containing characters to ignore from the input. This should only contain "
"whitespace characters, and by default contains all whitespace characters in "
"ASCII."
msgstr ""

#: ../../library/base64.rst:252
msgid ""
"Encode the :term:`bytes-like object` *b* using base85 (as used in e.g. git-"
"style binary diffs) and return the encoded :class:`bytes`."
msgstr ""

#: ../../library/base64.rst:255
msgid ""
"If *pad* is true, the input is padded with ``b'\\0'`` so its length is a "
"multiple of 4 bytes before encoding."
msgstr ""

#: ../../library/base64.rst:263
msgid ""
"Decode the base85-encoded :term:`bytes-like object` or ASCII string *b* and "
"return the decoded :class:`bytes`.  Padding is implicitly removed, if "
"necessary."
msgstr ""

#: ../../library/base64.rst:272
msgid ""
"Encode the :term:`bytes-like object` *s* using Z85 (as used in ZeroMQ) and "
"return the encoded :class:`bytes`.  See `Z85  specification <https://rfc."
"zeromq.org/spec/32/>`_ for more information."
msgstr ""

#: ../../library/base64.rst:281
msgid ""
"Decode the Z85-encoded :term:`bytes-like object` or ASCII string *s* and "
"return the decoded :class:`bytes`.  See `Z85  specification <https://rfc."
"zeromq.org/spec/32/>`_ for more information."
msgstr ""

#: ../../library/base64.rst:291
msgid "Legacy Interface"
msgstr ""

#: ../../library/base64.rst:295
msgid ""
"Decode the contents of the binary *input* file and write the resulting "
"binary data to the *output* file. *input* and *output* must be :term:`file "
"objects <file object>`. *input* will be read until ``input.readline()`` "
"returns an empty bytes object."
msgstr ""

#: ../../library/base64.rst:303
msgid ""
"Decode the :term:`bytes-like object` *s*, which must contain one or more "
"lines of base64 encoded data, and return the decoded :class:`bytes`."
msgstr ""

#: ../../library/base64.rst:311
msgid ""
"Encode the contents of the binary *input* file and write the resulting "
"base64 encoded data to the *output* file. *input* and *output* must be :term:"
"`file objects <file object>`. *input* will be read until ``input.read()`` "
"returns an empty bytes object. :func:`encode` inserts a newline character "
"(``b'\\n'``) after every 76 bytes of the output, as well as ensuring that "
"the output always ends with a newline, as per :rfc:`2045` (MIME)."
msgstr ""

#: ../../library/base64.rst:321
msgid ""
"Encode the :term:`bytes-like object` *s*, which can contain arbitrary binary "
"data, and return :class:`bytes` containing the base64-encoded data, with "
"newlines (``b'\\n'``) inserted after every 76 bytes of output, and ensuring "
"that there is a trailing newline, as per :rfc:`2045` (MIME)."
msgstr ""

#: ../../library/base64.rst:329
msgid "An example usage of the module:"
msgstr "Um exemplo de uso do módulo:"

#: ../../library/base64.rst:342
msgid "Security Considerations"
msgstr "Considerações de Segurança"

#: ../../library/base64.rst:344
msgid ""
"A new security considerations section was added to :rfc:`4648` (section 12); "
"it's recommended to review the security section for any code deployed to "
"production."
msgstr ""

#: ../../library/base64.rst:349
msgid "Module :mod:`binascii`"
msgstr "Módulo :mod:`binascii`"

#: ../../library/base64.rst:350
msgid ""
"Support module containing ASCII-to-binary and binary-to-ASCII conversions."
msgstr ""
"Módulo de suporte contendo conversões ASCII para binário e binário para "
"ASCII."

#: ../../library/base64.rst:352
msgid ""
":rfc:`1521` - MIME (Multipurpose Internet Mail Extensions) Part One: "
"Mechanisms for Specifying and Describing the Format of Internet Message "
"Bodies"
msgstr ""

#: ../../library/base64.rst:353
msgid ""
"Section 5.2, \"Base64 Content-Transfer-Encoding,\" provides the definition "
"of the base64 encoding."
msgstr ""

#: ../../library/base64.rst:10
msgid "base64"
msgstr "base64"

#: ../../library/base64.rst:10
msgid "encoding"
msgstr "codificação"

#: ../../library/base64.rst:10
msgid "MIME"
msgstr "MIME"

#: ../../library/base64.rst:10
msgid "base64 encoding"
msgstr ""
