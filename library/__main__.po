# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Henrique Junqueira, 2022
# Vitor Buxbaum Orlandi, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-31 10:59+0000\n"
"PO-Revision-Date: 2021-06-28 00:54+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/__main__.rst:2
msgid ":mod:`!__main__` --- Top-level code environment"
msgstr ":mod:`!__main__` --- Ambiente de código principal"

#: ../../library/__main__.rst:10
msgid ""
"In Python, the special name ``__main__`` is used for two important "
"constructs:"
msgstr ""
"Em Python, o nome especial ``__main__`` é usado em duas construções "
"importantes:"

#: ../../library/__main__.rst:12
msgid ""
"the name of the top-level environment of the program, which can be checked "
"using the ``__name__ == '__main__'`` expression; and"
msgstr ""
"O nome do ambiente principal do programa, que pode ser verificado usando a "
"expressão ``__name__ == '__main__'``; e"

#: ../../library/__main__.rst:14
msgid "the ``__main__.py`` file in Python packages."
msgstr "o arquivo ``__main__.py`` em pacotes Python."

#: ../../library/__main__.rst:16
msgid ""
"Both of these mechanisms are related to Python modules; how users interact "
"with them and how they interact with each other.  They are explained in "
"detail below.  If you're new to Python modules, see the tutorial section :"
"ref:`tut-modules` for an introduction."
msgstr ""
"Ambas as formas estão relacionadas aos módulos Python; como os usuários "
"interagem com eles e como eles interagem entre si. Eles serão explicados em "
"detalhes abaixo. Se você ainda não conhece módulos Python, veja a seção :ref:"
"`tut-modules` para uma introdução."

#: ../../library/__main__.rst:25
msgid "``__name__ == '__main__'``"
msgstr "``__name__ == '__main__'``"

#: ../../library/__main__.rst:27
msgid ""
"When a Python module or package is imported, ``__name__`` is set to the "
"module's name.  Usually, this is the name of the Python file itself without "
"the ``.py`` extension::"
msgstr ""
"Quando um pacote ou módulo Python é importado, ``__name__`` é definido como "
"o nome do módulo. Normalmente, este é o nome do próprio arquivo Python sem a "
"extensão ``.py``::"

#: ../../library/__main__.rst:31
msgid ""
">>> import configparser\n"
">>> configparser.__name__\n"
"'configparser'"
msgstr ""

#: ../../library/__main__.rst:35
msgid ""
"If the file is part of a package, ``__name__`` will also include the parent "
"package's path::"
msgstr ""
"Caso o arquivo seja parte de um pacote, ``__name__`` também incluirá o nome "
"da pasta raiz do pacote."

#: ../../library/__main__.rst:38
msgid ""
">>> from concurrent.futures import process\n"
">>> process.__name__\n"
"'concurrent.futures.process'"
msgstr ""

#: ../../library/__main__.rst:42
msgid ""
"However, if the module is executed in the top-level code environment, its "
"``__name__`` is set to the string ``'__main__'``."
msgstr ""
"Porém, se o módulo for executado como o código principal, ``__name__`` passa "
"a ser definido como a string ``'__main__'``"

#: ../../library/__main__.rst:46
msgid "What is the \"top-level code environment\"?"
msgstr "O que é o \"ambiente de código principal\"?"

#: ../../library/__main__.rst:48
msgid ""
"``__main__`` is the name of the environment where top-level code is run. "
"\"Top-level code\" is the first user-specified Python module that starts "
"running. It's \"top-level\" because it imports all other modules that the "
"program needs. Sometimes \"top-level code\" is called an *entry point* to "
"the application."
msgstr ""
"``__main__`` é o nome do ambiente principal no qual o código é executado. "
"\"Ambiente de código principal\" é o primeiro módulo Python definido pelo "
"usuário que começa a ser executado. É considerado principal porque ele "
"importa todos os outros módulos que o programa precisa. As vezes, \"ambiente "
"principal\" também pode ser chamado de \"ponto de entrada\" da aplicação."

#: ../../library/__main__.rst:53
msgid "The top-level code environment can be:"
msgstr "O ambiente de código principal pode ser:"

#: ../../library/__main__.rst:55
msgid "the scope of an interactive prompt::"
msgstr "o escopo de um prompt de comando interativo:"

#: ../../library/__main__.rst:57
msgid ""
">>> __name__\n"
"'__main__'"
msgstr ""

#: ../../library/__main__.rst:60
msgid "the Python module passed to the Python interpreter as a file argument:"
msgstr ""
"o módulo Python passado ao interpretador do Python como um argumento "
"correspondente ao nome do arquivo:"

#: ../../library/__main__.rst:62
msgid ""
"$ python helloworld.py\n"
"Hello, world!"
msgstr ""

#: ../../library/__main__.rst:67
msgid ""
"the Python module or package passed to the Python interpreter with the :"
"option:`-m` argument:"
msgstr ""
"o módulo ou pacote Python passado ao interpretador do Python com o "
"argumento :option:`-m`:"

#: ../../library/__main__.rst:70
msgid ""
"$ python -m tarfile\n"
"usage: tarfile.py [-h] [-v] (...)"
msgstr ""

#: ../../library/__main__.rst:75
msgid "Python code read by the Python interpreter from standard input:"
msgstr ""
"código Python lido pelo interpretador através da entrada padrão de linha de "
"comando:"

#: ../../library/__main__.rst:77
msgid ""
"$ echo \"import this\" | python\n"
"The Zen of Python, by Tim Peters\n"
"\n"
"Beautiful is better than ugly.\n"
"Explicit is better than implicit.\n"
"..."
msgstr ""

#: ../../library/__main__.rst:86
msgid ""
"Python code passed to the Python interpreter with the :option:`-c` argument:"
msgstr ""
"código Python passado ao interpretador do Python com o argumento :option:`-"
"c`:"

#: ../../library/__main__.rst:88
msgid ""
"$ python -c \"import this\"\n"
"The Zen of Python, by Tim Peters\n"
"\n"
"Beautiful is better than ugly.\n"
"Explicit is better than implicit.\n"
"..."
msgstr ""

#: ../../library/__main__.rst:97
msgid ""
"In each of these situations, the top-level module's ``__name__`` is set to "
"``'__main__'``."
msgstr ""
"Em cada uma destas situações, a variável especial ``__name__`` passa a ser "
"definida como ``'__main__'``."

#: ../../library/__main__.rst:100
msgid ""
"As a result, a module can discover whether or not it is running in the top-"
"level environment by checking its own ``__name__``, which allows a common "
"idiom for conditionally executing code when the module is not initialized "
"from an import statement::"
msgstr ""
"Como resultado, um módulo pode saber se está ou não sendo executado no "
"ambiente principal verificando seu próprio ``__name__``, que habilita um "
"termo comum para executar código condicionalmente quando o módulo não é "
"inicializado a partir de uma instrução de importação::"

#: ../../library/__main__.rst:105
msgid ""
"if __name__ == '__main__':\n"
"    # Execute when the module is not initialized from an import statement.\n"
"    ..."
msgstr ""

#: ../../library/__main__.rst:111
msgid ""
"For a more detailed look at how ``__name__`` is set in all situations, see "
"the tutorial section :ref:`tut-modules`."
msgstr ""
"Para uma visão mais detalhada sobre como ``__name__`` é definido em todas as "
"situações, veja a sessão :ref:`tut-modules`."

#: ../../library/__main__.rst:116 ../../library/__main__.rst:239
msgid "Idiomatic Usage"
msgstr "Uso idiomático"

#: ../../library/__main__.rst:118
msgid ""
"Some modules contain code that is intended for script use only, like parsing "
"command-line arguments or fetching data from standard input.  If a module "
"like this was imported from a different module, for example to unit test it, "
"the script code would unintentionally execute as well."
msgstr ""
"Alguns módulos contém códigos que são específicos para serem usados como "
"scripts, como análise de argumentos através de linha de comando ou leitura "
"de dados da entrada padrão. Se um módulo como o citado for importado em um "
"outro módulo diferente, por exemplo em testes unitários, o código do script "
"também seria executado de forma indesejada."

#: ../../library/__main__.rst:123
msgid ""
"This is where using the ``if __name__ == '__main__'`` code block comes in "
"handy. Code within this block won't run unless the module is executed in the "
"top-level environment."
msgstr ""
"É aqui onde o uso do trecho de código ``if __name__ == '__main__'`` revela-"
"se útil. Os códigos dentro desta condicional não rodarão ao não ser que o "
"módulo seja executado através do ambiente principal."

#: ../../library/__main__.rst:127
msgid ""
"Putting as few statements as possible in the block below ``if __name__ == "
"'__main__'`` can improve code clarity and correctness. Most often, a "
"function named ``main`` encapsulates the program's primary behavior::"
msgstr ""
"Colocar o mínimo de instruções possível no bloco abaixo de ``if __name__ == "
"'__main__'`` pode melhorar a clareza e a precisão do código. Na maioria das "
"vezes, uma função chamada de ``main`` encapsula o comportamento principal do "
"programa::"

#: ../../library/__main__.rst:131
msgid ""
"# echo.py\n"
"\n"
"import shlex\n"
"import sys\n"
"\n"
"def echo(phrase: str) -> None:\n"
"   \"\"\"A dummy wrapper around print.\"\"\"\n"
"   # for demonstration purposes, you can imagine that there is some\n"
"   # valuable and reusable logic inside this function\n"
"   print(phrase)\n"
"\n"
"def main() -> int:\n"
"    \"\"\"Echo the input arguments to standard output\"\"\"\n"
"    phrase = shlex.join(sys.argv)\n"
"    echo(phrase)\n"
"    return 0\n"
"\n"
"if __name__ == '__main__':\n"
"    sys.exit(main())  # next section explains the use of sys.exit"
msgstr ""

#: ../../library/__main__.rst:151
msgid ""
"Note that if the module didn't encapsulate code inside the ``main`` function "
"but instead put it directly within the ``if __name__ == '__main__'`` block, "
"the ``phrase`` variable would be global to the entire module.  This is error-"
"prone as other functions within the module could be unintentionally using "
"the global variable instead of a local name.  A ``main`` function solves "
"this problem."
msgstr ""
"Repare quem se o módulo, ao invés de ter encapsulado o código dentro da "
"função ``main``, fosse colocado direto dentro do bloco ``if __name__ == "
"'__main__'``, a variável ``phrase`` seria global para todo o módulo. Isto é "
"suscetível à erros pois outras funções dentro do módulo poderiam "
"inadvertidamente usar a variável global ao invés da local. A função ``main`` "
"resolve este problema."

#: ../../library/__main__.rst:158
msgid ""
"Using a ``main`` function has the added benefit of the ``echo`` function "
"itself being isolated and importable elsewhere. When ``echo.py`` is "
"imported, the ``echo`` and ``main`` functions will be defined, but neither "
"of them will be called, because ``__name__ != '__main__'``."
msgstr ""
"O uso da função ``main`` tem o benefício adicional de a própria função "
"``echo`` ser isolada e importável em outro lugar. Quando ``echo.py`` é "
"importado, as funções ``echo`` e ``main`` serão definidas, mas nenhuma delas "
"será chamada por conta do bloco ``__name__ != '__main__'``."

#: ../../library/__main__.rst:165
msgid "Packaging Considerations"
msgstr "Considerações sobre pacotes"

#: ../../library/__main__.rst:167
msgid ""
"``main`` functions are often used to create command-line tools by specifying "
"them as entry points for console scripts.  When this is done, `pip <https://"
"pip.pypa.io/>`_ inserts the function call into a template script, where the "
"return value of ``main`` is passed into :func:`sys.exit`. For example::"
msgstr ""
"``main`` são funções frequentemente usadas ​​para criar ferramentas de linha "
"de comando especificando-as como pontos de entrada para scripts de console. "
"Quando isto é feito, `pip <https://pip.pypa.io/>`_ insere a chamada da "
"função em um modelo de script, onde o valor de retorno de ``main`` é passado "
"para :func:`sys.exit`. Por exemplo::"

#: ../../library/__main__.rst:173
msgid "sys.exit(main())"
msgstr ""

#: ../../library/__main__.rst:175
msgid ""
"Since the call to ``main`` is wrapped in :func:`sys.exit`, the expectation "
"is that your function will return some value acceptable as an input to :func:"
"`sys.exit`; typically, an integer or ``None`` (which is implicitly returned "
"if your function does not have a return statement)."
msgstr ""
"Uma vez que a chamada à ``main`` está embutida dentro de :func:`sys.exit`, a "
"expectativa é que a sua função retorne somente valores aceitável para :func:"
"`sys.exit`; normalmente um inteiro ou ``None`` (retornado de forma "
"implícita, caso a sua função não tenha uma instrução de retorno)."

#: ../../library/__main__.rst:180
msgid ""
"By proactively following this convention ourselves, our module will have the "
"same behavior when run directly (i.e. ``python echo.py``) as it will have if "
"we later package it as a console script entry-point in a pip-installable "
"package."
msgstr ""
"Seguindo proativamente essa convenção, nosso módulo terá o mesmo "
"comportamento quando executado diretamente (ou seja, ``python echo.py``) "
"como terá também se posteriormente criarmos um pacote como um ponto de "
"entrada de script de console em um pacote instalável via pip."

#: ../../library/__main__.rst:185
msgid ""
"In particular, be careful about returning strings from your ``main`` "
"function. :func:`sys.exit` will interpret a string argument as a failure "
"message, so your program will have an exit code of ``1``, indicating "
"failure, and the string will be written to :data:`sys.stderr`.  The ``echo."
"py`` example from earlier exemplifies using the ``sys.exit(main())`` "
"convention."
msgstr ""
"Em particular, tenha cuidado ao retornar strings de sua função ``main``. :"
"func:`sys.exit` interpretará um argumento de string como uma mensagem de "
"falha, então seu programa terá um código de saída ``1``, indicando falha, e "
"a string será escrita em :data:`sys.stderr`. O exemplo anterior de ``echo."
"py`` exemplifica o uso da convenção ``sys.exit(main())``."

#: ../../library/__main__.rst:193
msgid ""
"`Python Packaging User Guide <https://packaging.python.org/>`_ contains a "
"collection of tutorials and references on how to distribute and install "
"Python packages with modern tools."
msgstr ""
"O `Guia de Usuário para Empacotamento de Python <https://packaging.python."
"org/>`_ contém uma coleção de tutoriais e referências sobre como distribuir "
"e instalar pacotes Python com ferramentas modernas."

#: ../../library/__main__.rst:199
msgid "``__main__.py`` in Python Packages"
msgstr "``__main__.py`` em pacotes Python"

#: ../../library/__main__.rst:201
msgid ""
"If you are not familiar with Python packages, see section :ref:`tut-"
"packages` of the tutorial.  Most commonly, the ``__main__.py`` file is used "
"to provide a command-line interface for a package. Consider the following "
"hypothetical package, \"bandclass\":"
msgstr ""
"Se você não estiver familiarizado com pacotes Python, veja a seção :ref:`tut-"
"packages` do tutorial. Mais comumente, o arquivo ``__main__.py`` é usado "
"para fornecer uma interface de linha de comando para um pacote. Considere o "
"seguinte pacote hipotético, \"bandclass\":"

#: ../../library/__main__.rst:206
msgid ""
"bandclass\n"
"  ├── __init__.py\n"
"  ├── __main__.py\n"
"  └── student.py"
msgstr ""

#: ../../library/__main__.rst:213
msgid ""
"``__main__.py`` will be executed when the package itself is invoked directly "
"from the command line using the :option:`-m` flag. For example:"
msgstr ""
"``__main__.py`` será executado quando o próprio pacote for invocado "
"diretamente da linha de comando usando o sinalizador :option:`-m`. Por "
"exemplo:"

#: ../../library/__main__.rst:216
msgid "$ python -m bandclass"
msgstr ""

#: ../../library/__main__.rst:220
msgid ""
"This command will cause ``__main__.py`` to run. How you utilize this "
"mechanism will depend on the nature of the package you are writing, but in "
"this hypothetical case, it might make sense to allow the teacher to search "
"for students::"
msgstr ""
"Este comando fará com que ``__main__.py`` seja executado. Como você utiliza "
"esse mecanismo dependerá da natureza do pacote que você está escrevendo, mas "
"neste caso hipotético, pode fazer sentido permitir que o professor procure "
"alunos::"

#: ../../library/__main__.rst:225
msgid ""
"# bandclass/__main__.py\n"
"\n"
"import sys\n"
"from .student import search_students\n"
"\n"
"student_name = sys.argv[1] if len(sys.argv) >= 2 else ''\n"
"print(f'Found student: {search_students(student_name)}')"
msgstr ""

#: ../../library/__main__.rst:233
msgid ""
"Note that ``from .student import search_students`` is an example of a "
"relative import.  This import style can be used when referencing modules "
"within a package.  For more details, see :ref:`intra-package-references` in "
"the :ref:`tut-modules` section of the tutorial."
msgstr ""
"Observe que ``from .student import search_students`` é um exemplo de "
"importação relativa. Esse estilo de importação pode ser usado ao fazer "
"referência a módulos em um pacote. Para mais detalhes, veja :ref:`intra-"
"package-references` na seção :ref:`tut-modules` do tutorial."

#: ../../library/__main__.rst:241
msgid ""
"The content of ``__main__.py`` typically isn't fenced with an ``if __name__ "
"== '__main__'`` block.  Instead, those files are kept short and import "
"functions to execute from other modules.  Those other modules can then be "
"easily unit-tested and are properly reusable."
msgstr ""
"O conteúdo do ``__main__.py`` normalmente não é protegido por um bloco ``if "
"__name__ == '__main__'`` .  Em vez disso, esses arquivos são mantidos curtos "
"e importa funções para serem executados a partir de outros módulos.  Esses "
"outros módulos podem então ter suas unidades facilmente testadas e são "
"adequadamente reutilizáveis."

#: ../../library/__main__.rst:246
msgid ""
"If used, an ``if __name__ == '__main__'`` block will still work as expected "
"for a ``__main__.py`` file within a package, because its ``__name__`` "
"attribute will include the package's path if imported::"
msgstr ""
"Se usado, o bloco condicional ``if __name__ == '__main__'`` ainda funcionará "
"como esperado para o arquivo ``__main__.py`` dentro de um pacote, pois seu "
"atributo ``__name__`` incluirá o caminho do pacote se importado::"

#: ../../library/__main__.rst:250
msgid ""
">>> import asyncio.__main__\n"
">>> asyncio.__main__.__name__\n"
"'asyncio.__main__'"
msgstr ""

#: ../../library/__main__.rst:254
msgid ""
"This won't work for ``__main__.py`` files in the root directory of a ``."
"zip`` file though.  Hence, for consistency, a minimal ``__main__.py`` "
"without a ``__name__`` check is preferred."
msgstr ""
"Porém, isso não funcionará para arquivos ``__main__.py`` no diretório raiz "
"de um arquivo ``.zip``. Portanto, para consistência, é preferível um "
"``__main__.py`` mínimo sem uma verificação de ``__name__``."

#: ../../library/__main__.rst:260
msgid ""
"See :mod:`venv` for an example of a package with a minimal ``__main__.py`` "
"in the standard library. It doesn't contain a ``if __name__ == '__main__'`` "
"block. You can invoke it with ``python -m venv [directory]``."
msgstr ""
"Veja :mod:`venv`, da biblioteca padrão, para um exemplo de pacote com um "
"``__main__.py`` minimalista. Ele não contém um bloco ``if __name__ == "
"'__main__'``. Você pode invocá-lo com ``python -m venv [directory]``."

#: ../../library/__main__.rst:264
msgid ""
"See :mod:`runpy` for more details on the :option:`-m` flag to the "
"interpreter executable."
msgstr ""
"Veja :mod:`runpy` para mais detalhes sobre o sinalizador :option:`-m` para o "
"executável do interpretador."

#: ../../library/__main__.rst:267
msgid ""
"See :mod:`zipapp` for how to run applications packaged as *.zip* files. In "
"this case Python looks for a ``__main__.py`` file in the root directory of "
"the archive."
msgstr ""
"Veja :mod:`zipapp` para saber como executar aplicativos compactados como "
"arquivos *.zip*. Nesse caso, o Python procura um arquivo ``__main__.py`` no "
"diretório raiz do arquivo."

#: ../../library/__main__.rst:274
msgid "``import __main__``"
msgstr "``import __main__``"

#: ../../library/__main__.rst:276
msgid ""
"Regardless of which module a Python program was started with, other modules "
"running within that same program can import the top-level environment's "
"scope (:term:`namespace`) by importing the ``__main__`` module.  This "
"doesn't import a ``__main__.py`` file but rather whichever module that "
"received the special name ``'__main__'``."
msgstr ""
"Independentemente do módulo com o qual um programa Python foi iniciado, "
"outros módulos executados no mesmo programa podem importar o escopo do "
"ambiente principal (:term:`espaço de nomes`) importando o módulo "
"``__main__``. Isso não faz a importação de um arquivo ``__main__.py``, mas "
"sim qualquer módulo que recebeu o nome especial ``'__main__'``."

#: ../../library/__main__.rst:282
msgid "Here is an example module that consumes the ``__main__`` namespace::"
msgstr ""
"Aqui está um módulo de exemplo que consome o espaço de nomes ``__main__``::"

#: ../../library/__main__.rst:284
msgid ""
"# namely.py\n"
"\n"
"import __main__\n"
"\n"
"def did_user_define_their_name():\n"
"    return 'my_name' in dir(__main__)\n"
"\n"
"def print_user_name():\n"
"    if not did_user_define_their_name():\n"
"        raise ValueError('Define the variable `my_name`!')\n"
"\n"
"    if '__file__' in dir(__main__):\n"
"        print(__main__.my_name, \"found in file\", __main__.__file__)\n"
"    else:\n"
"        print(__main__.my_name)"
msgstr ""

#: ../../library/__main__.rst:300
msgid "Example usage of this module could be as follows::"
msgstr "Exemplo de uso deste módulo pode ser como abaixo::"

#: ../../library/__main__.rst:302
msgid ""
"# start.py\n"
"\n"
"import sys\n"
"\n"
"from namely import print_user_name\n"
"\n"
"# my_name = \"Dinsdale\"\n"
"\n"
"def main():\n"
"    try:\n"
"        print_user_name()\n"
"    except ValueError as ve:\n"
"        return str(ve)\n"
"\n"
"if __name__ == \"__main__\":\n"
"    sys.exit(main())"
msgstr ""

#: ../../library/__main__.rst:319
msgid "Now, if we started our program, the result would look like this:"
msgstr "Agora, se iniciarmos nosso programa, o resultado seria assim:"

#: ../../library/__main__.rst:321
msgid ""
"$ python start.py\n"
"Define the variable `my_name`!"
msgstr ""

#: ../../library/__main__.rst:326
msgid ""
"The exit code of the program would be 1, indicating an error. Uncommenting "
"the line with ``my_name = \"Dinsdale\"`` fixes the program and now it exits "
"with status code 0, indicating success:"
msgstr ""
"O código de saída do programa seria 1, indicando um erro. Descomentar a "
"linha com ``my_name = \"Dinsdale\"`` corrige o programa e agora ele sai com "
"o código de status 0, indicando sucesso:"

#: ../../library/__main__.rst:330
msgid ""
"$ python start.py\n"
"Dinsdale found in file /path/to/start.py"
msgstr ""

#: ../../library/__main__.rst:335
msgid ""
"Note that importing ``__main__`` doesn't cause any issues with "
"unintentionally running top-level code meant for script use which is put in "
"the ``if __name__ == \"__main__\"`` block of the ``start`` module. Why does "
"this work?"
msgstr ""
"Observe que a importação de ``__main__`` não causa nenhum problema com a "
"execução involuntária de código principal destinado ao uso de script que é "
"colocado no bloco ``if __name__ == \"__main__\"`` do módulo ``start``. Por "
"que isso funciona?"

#: ../../library/__main__.rst:339
msgid ""
"Python inserts an empty ``__main__`` module in :data:`sys.modules` at "
"interpreter startup, and populates it by running top-level code. In our "
"example this is the ``start`` module which runs line by line and imports "
"``namely``. In turn, ``namely`` imports ``__main__`` (which is really "
"``start``). That's an import cycle! Fortunately, since the partially "
"populated ``__main__`` module is present in :data:`sys.modules`, Python "
"passes that to ``namely``. See :ref:`Special considerations for __main__ "
"<import-dunder-main>` in the import system's reference for details on how "
"this works."
msgstr ""
"O Python insere um módulo ``__main__`` vazio em :data:`sys.modules` na "
"inicialização do interpretador e o preenche executando o código principal. "
"Em nosso exemplo, este é o módulo ``start`` que executa linha por linha e "
"importa ``namely``. Por sua vez, ``namely`` importa ``__main__`` (que é "
"realmente ``start``). Isso é um ciclo de importação! Felizmente, como o "
"módulo ``__main__`` parcialmente preenchido está presente em :data:`sys."
"modules`, o Python o passa para ``namely``. Veja :ref:`Considerações "
"especiais sobre __main__ <import-dunder-main>` na referência do sistema de "
"importação para detalhes sobre como isso funciona."

#: ../../library/__main__.rst:348
msgid ""
"The Python REPL is another example of a \"top-level environment\", so "
"anything defined in the REPL becomes part of the ``__main__`` scope::"
msgstr ""
"O REPL do Python é outro exemplo de um \"ambiente principal\", então "
"qualquer coisa definida no REPL se torna parte do escopo do ``__main__``::"

#: ../../library/__main__.rst:351
msgid ""
">>> import namely\n"
">>> namely.did_user_define_their_name()\n"
"False\n"
">>> namely.print_user_name()\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: Define the variable `my_name`!\n"
">>> my_name = 'Jabberwocky'\n"
">>> namely.did_user_define_their_name()\n"
"True\n"
">>> namely.print_user_name()\n"
"Jabberwocky"
msgstr ""

#: ../../library/__main__.rst:364
msgid ""
"Note that in this case the ``__main__`` scope doesn't contain a ``__file__`` "
"attribute as it's interactive."
msgstr ""
"Note que neste caso o escopo ``__main__`` não contém um atributo "
"``__file__``, pois é interativo."

#: ../../library/__main__.rst:367
msgid ""
"The ``__main__`` scope is used in the implementation of :mod:`pdb` and :mod:"
"`rlcompleter`."
msgstr ""
"O escopo ``__main__`` é usado na implementação de :mod:`pdb` e :mod:"
"`rlcompleter`."
