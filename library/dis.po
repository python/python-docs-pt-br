# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2017
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-11 17:51+0000\n"
"PO-Revision-Date: 2017-02-16 23:06+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/dis.rst:2
msgid ":mod:`dis` --- Disassembler for Python bytecode"
msgstr ":mod:`dis` --- Python bytecode的反組譯器"

#: ../../library/dis.rst:7
msgid "**Source code:** :source:`Lib/dis.py`"
msgstr "**Código-fonte:** :source:`Lib/dis.py`"

#: ../../library/dis.rst:11
msgid ""
"The :mod:`dis` module supports the analysis of CPython :term:`bytecode` by "
"disassembling it. The CPython bytecode which this module takes as an input "
"is defined in the file :file:`Include/opcode.h` and used by the compiler and "
"the interpreter."
msgstr ""
"O módulo :mod:`dis` oferece suporte à análise de :term:`bytecode` do "
"CPython, desmontando-o. O bytecode do CPython que o módulo leva como entrada "
"é definido no arquivo :file:`Include/opcode.h` e usado pelo compilador e "
"pelo interpretador."

#: ../../library/dis.rst:18
msgid ""
"Bytecode is an implementation detail of the CPython interpreter.  No "
"guarantees are made that bytecode will not be added, removed, or changed "
"between versions of Python.  Use of this module should not be considered to "
"work across Python VMs or Python releases."
msgstr ""
"O bytecode é um detalhe de implementação do interpretador CPython. Não há "
"garantias de que bytecodes não serão adicionados, removidos ou alterados "
"entre as versões do Python. O uso deste módulo não deve ser considerado que "
"funcionará em todas as VMs do Python ou mesmo versões do Python."

#: ../../library/dis.rst:23
msgid ""
"Use 2 bytes for each instruction. Previously the number of bytes varied by "
"instruction."
msgstr ""
"Cada instrução ocupa 2 bytes. Anteriormente, o número de bytes variava de "
"acordo com a instrução."

#: ../../library/dis.rst:28
msgid "Example: Given the function :func:`myfunc`::"
msgstr "Exemplo: Dada a função :func:`myfunc`::"

#: ../../library/dis.rst:33
msgid ""
"the following command can be used to display the disassembly of :func:"
"`myfunc`::"
msgstr ""
"o seguinte comando pode ser usado para exibir a desmontagem da função :func:"
"`myfunc`::"

#: ../../library/dis.rst:42
msgid "(The \"2\" is a line number)."
msgstr "(O \"2\" é o número da linha)."

#: ../../library/dis.rst:45
msgid "Bytecode analysis"
msgstr "Análise de bytecode"

#: ../../library/dis.rst:49
msgid ""
"The bytecode analysis API allows pieces of Python code to be wrapped in a :"
"class:`Bytecode` object that provides easy access to details of the compiled "
"code."
msgstr ""
"A API de análise de bytecode permite que partes do código Python sejam "
"encapsuladas em um objeto :class:`Bytecode` que facilite o acesso aos "
"detalhes do código compilado."

#: ../../library/dis.rst:56
msgid ""
"Analyse the bytecode corresponding to a function, generator, asynchronous "
"generator, coroutine, method, string of source code, or a code object (as "
"returned by :func:`compile`)."
msgstr ""
"Analisa o bytecode correspondente a uma função, um gerador, um gerador "
"assíncrono, uma corrotina, um método, uma string de código-fonte, ou um "
"objeto de código (conforme retornado por :func:`compile`)."

#: ../../library/dis.rst:60
msgid ""
"This is a convenience wrapper around many of the functions listed below, "
"most notably :func:`get_instructions`, as iterating over a :class:`Bytecode` "
"instance yields the bytecode operations as :class:`Instruction` instances."
msgstr ""
"Esta é um invólucro de conveniência que encapsula muitas das funções "
"listadas abaixo, principalmente a :func:`get_instructions`, já que iterar "
"sobre sobre uma instância de :class:`Bytecode` produz operações bytecode "
"como instâncias de :class:`Instruction`."

#: ../../library/dis.rst:64 ../../library/dis.rst:225
msgid ""
"If *first_line* is not ``None``, it indicates the line number that should be "
"reported for the first source line in the disassembled code.  Otherwise, the "
"source line information (if any) is taken directly from the disassembled "
"code object."
msgstr ""
"Se *first_line* não for ``None``, ele indica o número de linha que deve ser "
"reportado para a primeira linha de código-fonte no código desmontado.  Caso "
"contrário, a informação de linha de código-fonte (se houver) é extraída "
"diretamente da desconstrução do objeto de código."

#: ../../library/dis.rst:69
msgid ""
"If *current_offset* is not ``None``, it refers to an instruction offset in "
"the disassembled code. Setting this means :meth:`.dis` will display a "
"\"current instruction\" marker against the specified opcode."
msgstr ""
"Se *current_offset* não for ``None``, ele é um deslocamento em instruções no "
"código desconstruído. Definir este argumento significa que o :meth:`.dis` "
"vai mostrar um marcador de \"instrução atual\" sobre o opcode especificado."

#: ../../library/dis.rst:75
msgid ""
"Construct a :class:`Bytecode` instance from the given traceback, setting "
"*current_offset* to the instruction responsible for the exception."
msgstr ""
"Constrói uma instância de :class:`Bytecode` a partir do traceback fornecido, "
"definindo *current_offset* apontando para a instrução responsável pela "
"exceção."

#: ../../library/dis.rst:80
msgid "The compiled code object."
msgstr "O objeto de código compilado."

#: ../../library/dis.rst:84
msgid "The first source line of the code object (if available)"
msgstr ""
"A primeira linha de código-fonte do objeto de código (caso disponível)."

#: ../../library/dis.rst:88
msgid ""
"Return a formatted view of the bytecode operations (the same as printed by :"
"func:`dis.dis`, but returned as a multi-line string)."
msgstr ""
"Retorna uma visualização formatada das operações em bytecode (as mesmas que "
"seriam impressas pela :func:`dis.dis`, mas retornadas como uma string "
"multilinha)."

#: ../../library/dis.rst:93
msgid ""
"Return a formatted multi-line string with detailed information about the "
"code object, like :func:`code_info`."
msgstr ""
"Retorna uma string multilinha formatada com informação detalhada sobre o "
"objeto de código, como :func:`code_info`."

#: ../../library/dis.rst:96 ../../library/dis.rst:130 ../../library/dis.rst:176
msgid "This can now handle coroutine and asynchronous generator objects."
msgstr ""
"Este método agora lida com objetos de corrotina e de gerador assíncrono."

#: ../../library/dis.rst:99
msgid "Example::"
msgstr "Exemplo::"

#: ../../library/dis.rst:112
msgid "Analysis functions"
msgstr "Funções de análise"

#: ../../library/dis.rst:114
msgid ""
"The :mod:`dis` module also defines the following analysis functions that "
"convert the input directly to the desired output. They can be useful if only "
"a single operation is being performed, so the intermediate analysis object "
"isn't useful:"
msgstr ""
"O módulo :mod:`dis` também define as seguintes funções que convertem a "
"entrada diretamente para a saída desejada. Elas podem ser úteis se somente "
"uma única operação está sendo feita, de forma que o objeto de análise "
"intermediário não é útil:"

#: ../../library/dis.rst:120
msgid ""
"Return a formatted multi-line string with detailed code object information "
"for the supplied function, generator, asynchronous generator, coroutine, "
"method, source code string or code object."
msgstr ""
"Retorna uma string multilinha formatada com informação detalhada sobre o "
"objeto de código correspondente à função, gerador, gerador assíncrono, "
"corrotina, método, string de código-fonte ou objeto de código fornecido."

#: ../../library/dis.rst:124
msgid ""
"Note that the exact contents of code info strings are highly implementation "
"dependent and they may change arbitrarily across Python VMs or Python "
"releases."
msgstr ""
"Observe que o conteúdo exato de strings de informação de código são "
"altamente dependentes da implementação e podem mudar de forma arbitrária "
"através de VMs Python ou lançamentos do Python."

#: ../../library/dis.rst:136
msgid ""
"Print detailed code object information for the supplied function, method, "
"source code string or code object to *file* (or ``sys.stdout`` if *file* is "
"not specified)."
msgstr ""
"Imprime no arquivo *file* (ou ``sys.stdout`` caso *file* não seja "
"especificado) informações detalhadas sobre o objeto de código correspondente "
"à função, método, string de código-fonte fornecido."

#: ../../library/dis.rst:140
msgid ""
"This is a convenient shorthand for ``print(code_info(x), file=file)``, "
"intended for interactive exploration at the interpreter prompt."
msgstr ""
"Este é um atalho conveniente para ``print(code_info(x), file=file)``, "
"destinado à exploração interativa no prompt do interpretador."

#: ../../library/dis.rst:145 ../../library/dis.rst:170
#: ../../library/dis.rst:189 ../../library/dis.rst:213
msgid "Added *file* parameter."
msgstr "Adicionado o parâmetro *file*."

#: ../../library/dis.rst:151
msgid ""
"Disassemble the *x* object.  *x* can denote either a module, a class, a "
"method, a function, a generator, an asynchronous generator, a coroutine, a "
"code object, a string of source code or a byte sequence of raw bytecode. For "
"a module, it disassembles all functions. For a class, it disassembles all "
"methods (including class and static methods). For a code object or sequence "
"of raw bytecode, it prints one line per bytecode instruction. It also "
"recursively disassembles nested code objects (the code of comprehensions, "
"generator expressions and nested functions, and the code used for building "
"nested classes). Strings are first compiled to code objects with the :func:"
"`compile` built-in function before being disassembled.  If no object is "
"provided, this function disassembles the last traceback."
msgstr ""
"Розберіть об'єкт *x*. *x* може позначати модуль, клас, метод, функцію, "
"генератор, асинхронний генератор, співпрограму, кодовий об’єкт, рядок "
"вихідного коду або послідовність байтів необробленого байт-коду. Для модуля "
"він розбирає всі функції. Для класу він розбирає всі методи (включаючи "
"класові та статичні методи). Для кодового об’єкта або послідовності "
"необробленого байт-коду він друкує один рядок для кожної інструкції байт-"
"коду. Він також рекурсивно розбирає вкладені об’єкти коду (код розуміння, "
"вирази генератора та вкладені функції, а також код, який використовується "
"для створення вкладених класів). Рядки спочатку компілюються для кодування "
"об’єктів за допомогою вбудованої функції :func:`compile` перед розбиранням. "
"Якщо об’єкт не надано, ця функція розбирає останню трасування."

#: ../../library/dis.rst:164 ../../library/dis.rst:186
#: ../../library/dis.rst:210
msgid ""
"The disassembly is written as text to the supplied *file* argument if "
"provided and to ``sys.stdout`` otherwise."
msgstr ""
"O resultado é escrito como texto no arquivo *file* caso tenha sido fornecido "
"como argumento, ou para ``sys.stdout`` caso contrário."

#: ../../library/dis.rst:167
msgid ""
"The maximal depth of recursion is limited by *depth* unless it is ``None``. "
"``depth=0`` means no recursion."
msgstr ""
"A profundidade máxima de recursão é limitada por *depth* a menos que seja "
"``None``. ``depth=0`` significa não fazer recursão."

#: ../../library/dis.rst:173
msgid "Implemented recursive disassembling and added *depth* parameter."
msgstr ""
"Foi implementada a desmontagem recursiva, e adicionado o parâmetro *depth*."

#: ../../library/dis.rst:182
msgid ""
"Disassemble the top-of-stack function of a traceback, using the last "
"traceback if none was passed.  The instruction causing the exception is "
"indicated."
msgstr ""
"Desmonta a função no topo da pilha de um traceback, usando o último "
"traceback caso nenhum tenha sido passado.  A instrução que causou a exceção "
"é indicada."

#: ../../library/dis.rst:196
msgid ""
"Disassemble a code object, indicating the last instruction if *lasti* was "
"provided.  The output is divided in the following columns:"
msgstr ""
"Desmonta um objeto de código, indicando a última instrução se *lasti* tiver "
"sido fornecido.  A saída é dividida em colunas da seguinte forma:"

#: ../../library/dis.rst:199
msgid "the line number, for the first instruction of each line"
msgstr "o número da linha, para a primeira instrução de cada linha"

#: ../../library/dis.rst:200
msgid "the current instruction, indicated as ``-->``,"
msgstr "a instrução atual, indicada por ``-->``,"

#: ../../library/dis.rst:201
msgid "a labelled instruction, indicated with ``>>``,"
msgstr "um rótulo da instrução, indicado com ``>>``,"

#: ../../library/dis.rst:202
msgid "the address of the instruction,"
msgstr "o endereço da instrução"

#: ../../library/dis.rst:203
msgid "the operation code name,"
msgstr "o nome do código da operação,"

#: ../../library/dis.rst:204
msgid "operation parameters, and"
msgstr "os parâmetros da operação, e"

#: ../../library/dis.rst:205
msgid "interpretation of the parameters in parentheses."
msgstr "a interpretação dos parâmetros, em parênteses."

#: ../../library/dis.rst:207
msgid ""
"The parameter interpretation recognizes local and global variable names, "
"constant values, branch targets, and compare operators."
msgstr ""
"A interpretação dos parâmetros reconhece nomes de variáveis locais e "
"globais, valores de constantes, alvos de ramificações, e operadores de "
"comparação."

#: ../../library/dis.rst:219
msgid ""
"Return an iterator over the instructions in the supplied function, method, "
"source code string or code object."
msgstr ""
"Retorna um iterador sobre as instruções na função, método, string de código-"
"fonte ou objeto de código fornecido."

#: ../../library/dis.rst:222
msgid ""
"The iterator generates a series of :class:`Instruction` named tuples giving "
"the details of each operation in the supplied code."
msgstr ""
"O iterador gera uma série de tuplas nomeadas :class:`Instruction` contendo "
"detalhes de cada operação no código fornecido."

#: ../../library/dis.rst:235
msgid ""
"This generator function uses the ``co_firstlineno`` and ``co_lnotab`` "
"attributes of the code object *code* to find the offsets which are starts of "
"lines in the source code.  They are generated as ``(offset, lineno)`` pairs. "
"See :source:`Objects/lnotab_notes.txt` for the ``co_lnotab`` format and how "
"to decode it."
msgstr ""

#: ../../library/dis.rst:241
msgid "Line numbers can be decreasing. Before, they were always increasing."
msgstr ""
"Números de linhas podem ser decrescentes. Antes, eles eram sempre crescentes."

#: ../../library/dis.rst:247
msgid ""
"Detect all offsets in the raw compiled bytecode string *code* which are jump "
"targets, and return a list of these offsets."
msgstr ""
"Detecta todas as posições na string de bytecode compilado bruto *code* que "
"são alvos de pulos, e as retorna em uma lista."

#: ../../library/dis.rst:253
msgid "Compute the stack effect of *opcode* with argument *oparg*."
msgstr "Calcula o efeito que o *opcode* com argumento *oparg* tem na pilha."

#: ../../library/dis.rst:255
msgid ""
"If the code has a jump target and *jump* is ``True``, :func:`~stack_effect` "
"will return the stack effect of jumping.  If *jump* is ``False``, it will "
"return the stack effect of not jumping. And if *jump* is ``None`` (default), "
"it will return the maximal stack effect of both cases."
msgstr ""
"Se a operação tiver um alvo de pulo e *jump* for ``True``, :func:"
"`~stack_effect` vai retornar o efeito na pilha de realizar o pulo.  Se "
"*jump* for ``False``, ela vai retornar o efeito na pilha de não pular. E se "
"*jump* for ``None`` (o padrão), vai retornar o efeito máximo na pilha dentre "
"os dois casos."

#: ../../library/dis.rst:262
msgid "Added *jump* parameter."
msgstr "Adicionado o parâmetro *jump*."

#: ../../library/dis.rst:269
msgid "Python Bytecode Instructions"
msgstr "Instruções em bytecode do Python"

#: ../../library/dis.rst:271
msgid ""
"The :func:`get_instructions` function and :class:`Bytecode` class provide "
"details of bytecode instructions as :class:`Instruction` instances:"
msgstr ""
"A função :func:`get_instructions` e a classe :class:`Bytecode` fornecem "
"detalhes de instruções de bytecode como instâncias de :class:`Instruction`:"

#: ../../library/dis.rst:276
msgid "Details for a bytecode operation"
msgstr "Detalhes de uma operação em bytecode"

#: ../../library/dis.rst:280
msgid ""
"numeric code for operation, corresponding to the opcode values listed below "
"and the bytecode values in the :ref:`opcode_collections`."
msgstr ""
"código numérico da operação, correspondendo aos valores dos opcodes listados "
"abaixo e aos valores dos bytecodes nas :ref:`opcode_collections`."

#: ../../library/dis.rst:286
msgid "human readable name for operation"
msgstr "nome legível por humanos para a operação"

#: ../../library/dis.rst:291
msgid "numeric argument to operation (if any), otherwise ``None``"
msgstr ""
"argumento numérico para a operação (se houver), caso contrário ``None``"

#: ../../library/dis.rst:296
msgid "resolved arg value (if known), otherwise same as arg"
msgstr ""
"(もし分かっていれば) 解決された引数の値、そうでない場合は arg と同じもの"

#: ../../library/dis.rst:301
msgid "human readable description of operation argument"
msgstr "人間が読むための命令引数の説明"

#: ../../library/dis.rst:306
msgid "start index of operation within bytecode sequence"
msgstr "índice de início da operação dentro da sequência de bytecodes"

#: ../../library/dis.rst:311
msgid "line started by this opcode (if any), otherwise ``None``"
msgstr "рядок починається цим кодом операції (якщо є), інакше ``None``"

#: ../../library/dis.rst:316
msgid "``True`` if other code jumps to here, otherwise ``False``"
msgstr "``True`` se algum outro código pula para cá, senão ``False``"

#: ../../library/dis.rst:321
msgid ""
"The Python compiler currently generates the following bytecode instructions."
msgstr ""
"O compilador de Python atualmente gera as seguintes instruções de bytecode."

#: ../../library/dis.rst:324
msgid "**General instructions**"
msgstr "**Instruções gerais**"

#: ../../library/dis.rst:328
msgid "Do nothing code.  Used as a placeholder by the bytecode optimizer."
msgstr ""
"なにもしないコード。バイトコードオプティマイザでプレースホルダとして使われま"
"す。"

#: ../../library/dis.rst:333
msgid "Removes the top-of-stack (TOS) item."
msgstr "Видаляє елемент верхнього стека (TOS)."

#: ../../library/dis.rst:338
msgid "Swaps the two top-most stack items."
msgstr "スタックの先頭の 2 つの要素を入れ替えます。"

#: ../../library/dis.rst:343
msgid ""
"Lifts second and third stack item one position up, moves top down to "
"position three."
msgstr ""
"スタックの二番目と三番目の要素の位置を 1 つ上げ、先頭を三番目へ下げます。"

#: ../../library/dis.rst:349
msgid ""
"Lifts second, third and fourth stack items one position up, moves top down "
"to position four."
msgstr ""
"将第二个、第三个和第四个堆栈项向上提升一个位置，将顶项移动到第四个位置。"

#: ../../library/dis.rst:357
msgid "Duplicates the reference on top of the stack."
msgstr "スタックの先頭にある参照の複製を作ります。"

#: ../../library/dis.rst:364
msgid ""
"Duplicates the two references on top of the stack, leaving them in the same "
"order."
msgstr "スタックの先頭の2つの参照を、そのままの順番で複製します。"

#: ../../library/dis.rst:370
msgid "**Unary operations**"
msgstr "**Operações unárias**"

#: ../../library/dis.rst:372
msgid ""
"Unary operations take the top of the stack, apply the operation, and push "
"the result back on the stack."
msgstr ""
"Operações unárias tiram o topo da pilha, aplicam a operação, e põem o "
"resultado de volta na pilha."

#: ../../library/dis.rst:377
msgid "Implements ``TOS = +TOS``."
msgstr "实现 ``TOS = +TOS``。"

#: ../../library/dis.rst:382
msgid "Implements ``TOS = -TOS``."
msgstr "实现 ``TOS = -TOS``。"

#: ../../library/dis.rst:387
msgid "Implements ``TOS = not TOS``."
msgstr "实现 ``TOS = not TOS``。"

#: ../../library/dis.rst:392
msgid "Implements ``TOS = ~TOS``."
msgstr "Implementação ``TOS = ~TOS``."

#: ../../library/dis.rst:397
msgid "Implements ``TOS = iter(TOS)``."
msgstr "Implementa ``TOS = iter(TOS)``."

#: ../../library/dis.rst:402
msgid ""
"If ``TOS`` is a :term:`generator iterator` or :term:`coroutine` object it is "
"left as is.  Otherwise, implements ``TOS = iter(TOS)``."
msgstr ""
"Якщо ``TOS`` є об’єктом :term:`generator iterator` або :term:`coroutine`, "
"він залишається таким, як є. В іншому випадку реалізує ``TOS = iter(TOS)``."

#: ../../library/dis.rst:408
msgid "**Binary operations**"
msgstr "**Operações Binárias**"

#: ../../library/dis.rst:410
msgid ""
"Binary operations remove the top of the stack (TOS) and the second top-most "
"stack item (TOS1) from the stack.  They perform the operation, and put the "
"result back on the stack."
msgstr ""
"Двійкові операції видаляють верхню частину стека (TOS) і другий найвищий "
"елемент стека (TOS1) зі стеку. Вони виконують операцію та повертають "
"результат у стек."

#: ../../library/dis.rst:416
msgid "Implements ``TOS = TOS1 ** TOS``."
msgstr "Implementa ``TOS = TOS1 ** TOS``."

#: ../../library/dis.rst:421
msgid "Implements ``TOS = TOS1 * TOS``."
msgstr "``TOS = TOS1 * TOS`` を実行します。"

#: ../../library/dis.rst:426
msgid "Implements ``TOS = TOS1 @ TOS``."
msgstr "Implementado ``TOS = TOS1 @ TOS``."

#: ../../library/dis.rst:433
msgid "Implements ``TOS = TOS1 // TOS``."
msgstr "Implementa ``TOS = TOS1 // TOS``."

#: ../../library/dis.rst:438
msgid "Implements ``TOS = TOS1 / TOS``."
msgstr "Implementa ``TOS = TOS1 / TOS``."

#: ../../library/dis.rst:443
msgid "Implements ``TOS = TOS1 % TOS``."
msgstr "Implementa ``TOS = TOS1 % TOS``."

#: ../../library/dis.rst:448
msgid "Implements ``TOS = TOS1 + TOS``."
msgstr "``TOS = TOS1 + TOS`` を実行します。"

#: ../../library/dis.rst:453
msgid "Implements ``TOS = TOS1 - TOS``."
msgstr "``TOS = TOS1 - TOS`` を実行します。"

#: ../../library/dis.rst:458
msgid "Implements ``TOS = TOS1[TOS]``."
msgstr "实现 ``TOS = TOS1[TOS]``。"

#: ../../library/dis.rst:463
msgid "Implements ``TOS = TOS1 << TOS``."
msgstr "``TOS = TOS1 << TOS`` を実行します。"

#: ../../library/dis.rst:468
msgid "Implements ``TOS = TOS1 >> TOS``."
msgstr "``TOS = TOS1 >> TOS`` を実行します。"

#: ../../library/dis.rst:473
msgid "Implements ``TOS = TOS1 & TOS``."
msgstr "``TOS = TOS1 & TOS`` を実行します。"

#: ../../library/dis.rst:478
msgid "Implements ``TOS = TOS1 ^ TOS``."
msgstr "``TOS = TOS1 ^ TOS`` を実行します。"

#: ../../library/dis.rst:483
msgid "Implements ``TOS = TOS1 | TOS``."
msgstr "``TOS = TOS1 | TOS`` を実行します。"

#: ../../library/dis.rst:486
msgid "**In-place operations**"
msgstr "**インプレース (in-place) 命令**"

#: ../../library/dis.rst:488
msgid ""
"In-place operations are like binary operations, in that they remove TOS and "
"TOS1, and push the result back on the stack, but the operation is done in-"
"place when TOS1 supports it, and the resulting TOS may be (but does not have "
"to be) the original TOS1."
msgstr ""
"Операції на місці схожі на двійкові операції, оскільки вони видаляють TOS і "
"TOS1 і повертають результат назад у стек, але операція виконується на місці, "
"коли TOS1 підтримує це, і результуючий TOS може бути (але не має бути) "
"оригінальний TOS1."

#: ../../library/dis.rst:495
msgid "Implements in-place ``TOS = TOS1 ** TOS``."
msgstr "インプレースの ``TOS = TOS1 ** TOS`` を実行します。"

#: ../../library/dis.rst:500
msgid "Implements in-place ``TOS = TOS1 * TOS``."
msgstr "インプレースの ``TOS = TOS1 * TOS`` を実行します。"

#: ../../library/dis.rst:505
msgid "Implements in-place ``TOS = TOS1 @ TOS``."
msgstr "インプレースの ``TOS = TOS1 @ TOS`` を実行します。"

#: ../../library/dis.rst:512
msgid "Implements in-place ``TOS = TOS1 // TOS``."
msgstr "インプレースの ``TOS = TOS1 // TOS`` を実行します。"

#: ../../library/dis.rst:517
msgid "Implements in-place ``TOS = TOS1 / TOS``."
msgstr "インプレースの ``TOS = TOS1 / TOS`` を実行します。"

#: ../../library/dis.rst:522
msgid "Implements in-place ``TOS = TOS1 % TOS``."
msgstr "インプレースの ``TOS = TOS1 % TOS`` を実行します。"

#: ../../library/dis.rst:527
msgid "Implements in-place ``TOS = TOS1 + TOS``."
msgstr "インプレースの ``TOS = TOS1 + TOS`` を実行します。"

#: ../../library/dis.rst:532
msgid "Implements in-place ``TOS = TOS1 - TOS``."
msgstr "インプレースの ``TOS = TOS1 - TOS`` を実行します。"

#: ../../library/dis.rst:537
msgid "Implements in-place ``TOS = TOS1 << TOS``."
msgstr "インプレースの ``TOS = TOS1 << TOS`` を実行します。"

#: ../../library/dis.rst:542
msgid "Implements in-place ``TOS = TOS1 >> TOS``."
msgstr "インプレースの ``TOS = TOS1 >> TOS`` を実行します。"

#: ../../library/dis.rst:547
msgid "Implements in-place ``TOS = TOS1 & TOS``."
msgstr "インプレースの ``TOS = TOS1 & TOS`` を実行します。"

#: ../../library/dis.rst:552
msgid "Implements in-place ``TOS = TOS1 ^ TOS``."
msgstr "インプレースの ``TOS = TOS1 ^ TOS`` を実行します。"

#: ../../library/dis.rst:557
msgid "Implements in-place ``TOS = TOS1 | TOS``."
msgstr "インプレースの ``TOS = TOS1 | TOS`` を実行します。"

#: ../../library/dis.rst:562
msgid "Implements ``TOS1[TOS] = TOS2``."
msgstr "Реалізує ``TOS1[TOS] = TOS2``."

#: ../../library/dis.rst:567
msgid "Implements ``del TOS1[TOS]``."
msgstr "Реалізує ``del TOS1[TOS]``."

#: ../../library/dis.rst:570
msgid "**Coroutine opcodes**"
msgstr "**Opcodes para corrotinas**"

#: ../../library/dis.rst:574
msgid ""
"Implements ``TOS = get_awaitable(TOS)``, where ``get_awaitable(o)`` returns "
"``o`` if ``o`` is a coroutine object or a generator object with the "
"CO_ITERABLE_COROUTINE flag, or resolves ``o.__await__``."
msgstr ""
"Реалізує ``TOS = get_awaitable(TOS)``, де ``get_awaitable(o)`` повертає "
"``o``, якщо ``o`` є об'єктом співпрограми або об'єктом генератора з прапором "
"CO_ITERABLE_COROUTINE, або вирішує ``o.__await__``."

#: ../../library/dis.rst:584
msgid "Implements ``TOS = TOS.__aiter__()``."
msgstr "Реалізує ``TOS = TOS.__aiter__()``."

#: ../../library/dis.rst:587
msgid "Returning awaitable objects from ``__aiter__`` is no longer supported."
msgstr "Não é mais aceitado que o ``__aiter__`` retorne objetos aguardáveis."

#: ../../library/dis.rst:594
msgid ""
"Implements ``PUSH(get_awaitable(TOS.__anext__()))``.  See ``GET_AWAITABLE`` "
"for details about ``get_awaitable``"
msgstr ""

#: ../../library/dis.rst:602
msgid ""
"Terminates an :keyword:`async for` loop.  Handles an exception raised when "
"awaiting a next item.  If TOS is :exc:`StopAsyncIteration` pop 7 values from "
"the stack and restore the exception state using the second three of them.  "
"Otherwise re-raise the exception using the three values from the stack.  An "
"exception handler block is removed from the block stack."
msgstr ""
"终止一个 :keyword:`async for`  循环。处理等待下一个项目时引发的异常。如果 "
"TOS 是 :exc:`StopAsyncIteration`， 从堆栈弹出7个值，并使用后三个恢复异常状"
"态。否则，使用堆栈中的三个值重新引发异常。从块堆栈中删除异常处理程序块。"

#: ../../library/dis.rst:613
msgid ""
"Resolves ``__aenter__`` and ``__aexit__`` from the object on top of the "
"stack.  Pushes ``__aexit__`` and result of ``__aenter__()`` to the stack."
msgstr ""
"Вирішує ``__aenter__`` і ``__aexit__`` з об’єкта на вершині стека. Надсилає "
"``__aexit__`` і результат ``__aenter__()`` до стеку."

#: ../../library/dis.rst:621
msgid "Creates a new frame object."
msgstr "新たなフレームオブジェクトを作成します。"

#: ../../library/dis.rst:627
msgid "**Miscellaneous opcodes**"
msgstr "**Opcodes genéricos**"

#: ../../library/dis.rst:631
msgid ""
"Implements the expression statement for the interactive mode.  TOS is "
"removed from the stack and printed.  In non-interactive mode, an expression "
"statement is terminated with :opcode:`POP_TOP`."
msgstr ""
"Реалізує оператор виразу для інтерактивного режиму. TOS видаляється зі стеку "
"та друкується. У неінтерактивному режимі оператор виразу завершується :"
"opcode:`POP_TOP`."

#: ../../library/dis.rst:638
msgid ""
"Calls ``set.add(TOS1[-i], TOS)``.  Used to implement set comprehensions."
msgstr ""
"Викликає ``set.add(TOS1[-i], TOS)``. Використовується для реалізації "
"розуміння набору."

#: ../../library/dis.rst:643
msgid ""
"Calls ``list.append(TOS1[-i], TOS)``.  Used to implement list comprehensions."
msgstr ""
"Викликає ``list.append(TOS1[-i], TOS)``. Використовується для реалізації "
"розуміння списку."

#: ../../library/dis.rst:648
msgid ""
"Calls ``dict.__setitem__(TOS1[-i], TOS1, TOS)``.  Used to implement dict "
"comprehensions."
msgstr ""
"Викликає ``dict.__setitem__(TOS1[-i], TOS1, TOS)``. Використовується для "
"реалізації диктового розуміння."

#: ../../library/dis.rst:652
msgid "Map value is TOS and map key is TOS1. Before, those were reversed."
msgstr "Значення карти – TOS, а ключ карти – TOS1. Раніше вони були змінені."

#: ../../library/dis.rst:655
msgid ""
"For all of the :opcode:`SET_ADD`, :opcode:`LIST_APPEND` and :opcode:"
"`MAP_ADD` instructions, while the added value or key/value pair is popped "
"off, the container object remains on the stack so that it is available for "
"further iterations of the loop."
msgstr ""
"Para as instruções :opcode:`SET_ADD`, :opcode:`LIST_APPEND` e :opcode:"
"`MAP_ADD`, o valor ou par chave/valor é removido da pilha, mas o objeto de "
"contêiner continua na pilha para que ele esteja disponível para as iterações "
"seguintes do laço."

#: ../../library/dis.rst:663
msgid "Returns with TOS to the caller of the function."
msgstr "Повертається з TOS до абонента функції."

#: ../../library/dis.rst:668
msgid "Pops TOS and yields it from a :term:`generator`."
msgstr "Витягує TOS і повертає його з :term:`generator`."

#: ../../library/dis.rst:673
msgid "Pops TOS and delegates to it as a subiterator from a :term:`generator`."
msgstr "Видає TOS і делегує йому як субітератор із :term:`generator`."

#: ../../library/dis.rst:680
msgid ""
"Checks whether ``__annotations__`` is defined in ``locals()``, if not it is "
"set up to an empty ``dict``. This opcode is only emitted if a class or "
"module body contains :term:`variable annotations <variable annotation>` "
"statically."
msgstr ""
"Verifica se ``__annotations__`` está definido em ``locals()`` e, se não "
"estiver, é inicializado como um ``dict`` vazio. Este opcode é emitido "
"somente se o corpo de uma classe ou módulo contém :term:`anotações de "
"variáveis <anotação de variável>` estaticamente."

#: ../../library/dis.rst:690
msgid ""
"Loads all symbols not starting with ``'_'`` directly from the module TOS to "
"the local namespace. The module is popped after loading all names. This "
"opcode implements ``from module import *``."
msgstr ""
"Завантажує всі символи, які не починаються з ``'_'`` безпосередньо з TOS "
"модуля в локальний простір імен. Модуль відкривається після завантаження "
"всіх імен. Цей код операції реалізує ``from module import *``."

#: ../../library/dis.rst:697
msgid ""
"Removes one block from the block stack.  Per frame, there is a stack of "
"blocks, denoting :keyword:`try` statements, and such."
msgstr "从块堆栈中删除一个块。有一块堆栈，每帧用于表示 :keyword:`try` 语句等。"

#: ../../library/dis.rst:703
msgid ""
"Removes one block from the block stack. The popped block must be an "
"exception handler block, as implicitly created when entering an except "
"handler.  In addition to popping extraneous values from the frame stack, the "
"last three popped values are used to restore the exception state."
msgstr ""
"ブロックスタックからブロックを1つ取り除きます。\n"
"ポップされたブロックは、例外ハンドラに入ったときに暗黙的に生成された例外ハン"
"ドラのブロックでなければなりません。\n"
"フレームスタックから本質的でない値をポップするのに加えて、直前にポップした3つ"
"の値が例外状態を回復するのに使われます。"

#: ../../library/dis.rst:711
msgid "Re-raises the exception currently on top of the stack."
msgstr ""

#: ../../library/dis.rst:718
msgid ""
"Calls the function in position 7 on the stack with the top three items on "
"the stack as arguments. Used to implement the call ``context_manager."
"__exit__(*exc_info())`` when an exception has occurred in a :keyword:`with` "
"statement."
msgstr ""
"调用堆栈中 7 号位置上的函数并附带栈顶位置的三项作为参数。 用来在 :keyword:"
"`with` 语句内发生异常时实现调用 ``context_manager.__exit__(*exc_info())``。"

#: ../../library/dis.rst:728
msgid ""
"Pushes :exc:`AssertionError` onto the stack.  Used by the :keyword:`assert` "
"statement."
msgstr ""
"Põe :exc:`AssertionError` no topo da pilha.  Usado pela instrução :keyword:"
"`assert`."

#: ../../library/dis.rst:736
msgid ""
"Pushes :func:`builtins.__build_class__` onto the stack.  It is later called "
"by :opcode:`CALL_FUNCTION` to construct a class."
msgstr ""
":func:`builtins.__build_class__` をスタックにプッシュします。\n"
"これはクラスを構築するために、後で :opcode:`CALL_FUNCTION` に呼ばれます。"

#: ../../library/dis.rst:742
msgid ""
"This opcode performs several operations before a with block starts.  First, "
"it loads :meth:`~object.__exit__` from the context manager and pushes it "
"onto the stack for later use by :opcode:`WITH_EXCEPT_START`.  Then, :meth:"
"`~object.__enter__` is called, and a finally block pointing to *delta* is "
"pushed.  Finally, the result of calling the ``__enter__()`` method is pushed "
"onto the stack.  The next opcode will either ignore it (:opcode:`POP_TOP`), "
"or store it in (a) variable(s) (:opcode:`STORE_FAST`, :opcode:`STORE_NAME`, "
"or :opcode:`UNPACK_SEQUENCE`)."
msgstr ""
"此操作码会在 with 代码块开始之前执行多个操作。 首先，它从上下文管理器加载 :"
"meth:`~object.__exit__` 并将其推入栈顶以供 :opcode:`WITH_EXCEPT_START` 后续使"
"用。 然后，调用 :meth:`~object.__enter__`，并推入一个指向 *delta* 的 finally "
"代码块。 最后，将调用 ``__enter__()`` 方法的结果推入栈顶。 下一个操作码将忽略"
"它 (:opcode:`POP_TOP`)，或将其存储在一个或多个变量 (:opcode:`STORE_FAST`, :"
"opcode:`STORE_NAME` 或 :opcode:`UNPACK_SEQUENCE`) 中。"

#: ../../library/dis.rst:754
msgid "All of the following opcodes use their arguments."
msgstr "以下所有操作码均使用其参数。"

#: ../../library/dis.rst:758
msgid ""
"Implements ``name = TOS``. *namei* is the index of *name* in the attribute :"
"attr:`co_names` of the code object. The compiler tries to use :opcode:"
"`STORE_FAST` or :opcode:`STORE_GLOBAL` if possible."
msgstr ""
"Реалізує ``name = TOS``. *namei* — це індекс *name* в атрибуті :attr:"
"`co_names` об’єкта коду. Компілятор намагається використовувати :opcode:"
"`STORE_FAST` або :opcode:`STORE_GLOBAL`, якщо це можливо."

#: ../../library/dis.rst:765
msgid ""
"Implements ``del name``, where *namei* is the index into :attr:`co_names` "
"attribute of the code object."
msgstr ""
"Реалізує ``del name``, де *namei* є індексом атрибута :attr:`co_names` "
"об’єкта коду."

#: ../../library/dis.rst:771
msgid ""
"Unpacks TOS into *count* individual values, which are put onto the stack "
"right-to-left."
msgstr ""
"Розпаковує TOS у *count* окремі значення, які поміщаються в стек справа "
"наліво."

#: ../../library/dis.rst:777
msgid ""
"Implements assignment with a starred target: Unpacks an iterable in TOS into "
"individual values, where the total number of values can be smaller than the "
"number of items in the iterable: one of the new values will be a list of all "
"leftover items."
msgstr ""
"Реалізує призначення з позначеною зірочкою метою: розпаковує ітерацію в TOS "
"на окремі значення, де загальна кількість значень може бути меншою за "
"кількість елементів у ітерації: одне з нових значень буде списком усіх "
"залишкових елементів."

#: ../../library/dis.rst:782
msgid ""
"The low byte of *counts* is the number of values before the list value, the "
"high byte of *counts* the number of values after it.  The resulting values "
"are put onto the stack right-to-left."
msgstr ""
"Молодший байт *counts* — це кількість значень перед значенням списку, "
"старший байт *counts* — кількість значень після нього. Отримані значення "
"поміщаються в стек справа наліво."

#: ../../library/dis.rst:789
msgid ""
"Implements ``TOS.name = TOS1``, where *namei* is the index of name in :attr:"
"`co_names`."
msgstr ""
"Реалізує ``TOS.name = TOS1``, де *namei* є індексом імені в :attr:`co_names`."

#: ../../library/dis.rst:795
msgid ""
"Implements ``del TOS.name``, using *namei* as index into :attr:`co_names`."
msgstr ""
"Реалізує ``del TOS.name``, використовуючи *namei* як індекс у :attr:"
"`co_names`."

#: ../../library/dis.rst:800
msgid "Works as :opcode:`STORE_NAME`, but stores the name as a global."
msgstr ""
"Funciona como o :opcode:`STORE_NAME`, mas o nome é armazenado com um nome "
"global."

#: ../../library/dis.rst:805
msgid "Works as :opcode:`DELETE_NAME`, but deletes a global name."
msgstr "Funciona como o :opcode:`DELETE_NAME`, mas deleta um nome global."

#: ../../library/dis.rst:810
msgid "Pushes ``co_consts[consti]`` onto the stack."
msgstr "Põe ``co_consts[consti]`` no topo da pilha."

#: ../../library/dis.rst:815
msgid "Pushes the value associated with ``co_names[namei]`` onto the stack."
msgstr "Поміщає значення, пов’язане з ``co_names[namei]``, у стек."

#: ../../library/dis.rst:820
msgid ""
"Creates a tuple consuming *count* items from the stack, and pushes the "
"resulting tuple onto the stack."
msgstr ""
"Створює кортеж, який споживає *кількість* елементів зі стеку, і поміщає "
"отриманий кортеж у стек."

#: ../../library/dis.rst:826
msgid "Works as :opcode:`BUILD_TUPLE`, but creates a list."
msgstr "Працює як :opcode:`BUILD_TUPLE`, але створює список."

#: ../../library/dis.rst:831
msgid "Works as :opcode:`BUILD_TUPLE`, but creates a set."
msgstr "Працює як :opcode:`BUILD_TUPLE`, але створює набір."

#: ../../library/dis.rst:836
msgid ""
"Pushes a new dictionary object onto the stack.  Pops ``2 * count`` items so "
"that the dictionary holds *count* entries: ``{..., TOS3: TOS2, TOS1: TOS}``."
msgstr ""
"Поміщає новий об’єкт словника в стек. Показує ``2 * count`` елементи, щоб "
"словник містив *count* записи: ``{..., TOS3: TOS2, TOS1: TOS}``."

#: ../../library/dis.rst:840
msgid ""
"The dictionary is created from stack items instead of creating an empty "
"dictionary pre-sized to hold *count* items."
msgstr ""
"Словник створюється з елементів стека замість створення порожнього словника "
"попереднього розміру для *кількості* елементів."

#: ../../library/dis.rst:847
msgid ""
"The version of :opcode:`BUILD_MAP` specialized for constant keys. Pops the "
"top element on the stack which contains a tuple of keys, then starting from "
"``TOS1``, pops *count* values to form values in the built dictionary."
msgstr ""
"Версія :opcode:`BUILD_MAP` спеціалізована на постійних ключах. Висуває "
"верхній елемент у стеку, який містить кортеж ключів, потім, починаючи з "
"``TOS1``, витягує значення *count* для формування значень у створеному "
"словнику."

#: ../../library/dis.rst:856
msgid ""
"Concatenates *count* strings from the stack and pushes the resulting string "
"onto the stack."
msgstr "З’єднує *count* рядки зі стеку та надихає отриманий рядок у стек."

#: ../../library/dis.rst:864
msgid ""
"Pops a list from the stack and pushes a tuple containing the same values."
msgstr ""
"Витягує список зі стеку та надсилає кортеж, що містить однакові значення."

#: ../../library/dis.rst:871
msgid "Calls ``list.extend(TOS1[-i], TOS)``.  Used to build lists."
msgstr ""
"Викликає ``list.extend(TOS1[-i], TOS)``. Використовується для створення "
"списків."

#: ../../library/dis.rst:878
msgid "Calls ``set.update(TOS1[-i], TOS)``.  Used to build sets."
msgstr ""
"Викликає ``set.update(TOS1[-i], TOS)``. Використовується для складання "
"наборів."

#: ../../library/dis.rst:885
msgid "Calls ``dict.update(TOS1[-i], TOS)``.  Used to build dicts."
msgstr ""
"Викликає ``dict.update(TOS1[-i], TOS)``. Використовується для побудови dicts."

#: ../../library/dis.rst:892
msgid "Like :opcode:`DICT_UPDATE` but raises an exception for duplicate keys."
msgstr ""
"Подібно до :opcode:`DICT_UPDATE`, але створює виняток для дублікатів ключів."

#: ../../library/dis.rst:899
msgid "Replaces TOS with ``getattr(TOS, co_names[namei])``."
msgstr "Замінює TOS на ``getattr(TOS, co_names[namei])``."

#: ../../library/dis.rst:904
msgid ""
"Performs a Boolean operation.  The operation name can be found in "
"``cmp_op[opname]``."
msgstr ""
"Виконує логічні операції. Ім'я операції можна знайти в ``cmp_op[opname]``."

#: ../../library/dis.rst:910
msgid "Performs ``is`` comparison, or ``is not`` if ``invert`` is 1."
msgstr "Виконує порівняння ``is`` або ``is not``, якщо ``invert`` дорівнює 1."

#: ../../library/dis.rst:917
msgid "Performs ``in`` comparison, or ``not in`` if ``invert`` is 1."
msgstr "Виконує порівняння ``in`` або ``not in``, якщо ``invert`` дорівнює 1."

#: ../../library/dis.rst:924
msgid ""
"Imports the module ``co_names[namei]``.  TOS and TOS1 are popped and provide "
"the *fromlist* and *level* arguments of :func:`__import__`.  The module "
"object is pushed onto the stack.  The current namespace is not affected: for "
"a proper import statement, a subsequent :opcode:`STORE_FAST` instruction "
"modifies the namespace."
msgstr ""
"Імпортує модуль ``co_names[namei]``. TOS і TOS1 витягуються та надають "
"аргументи *fromlist* і *level* :func:`__import__`. Об’єкт модуля поміщається "
"в стек. Поточний простір імен не впливає: для правильного оператора імпорту "
"наступна інструкція :opcode:`STORE_FAST` змінює простір імен."

#: ../../library/dis.rst:933
msgid ""
"Loads the attribute ``co_names[namei]`` from the module found in TOS. The "
"resulting object is pushed onto the stack, to be subsequently stored by a :"
"opcode:`STORE_FAST` instruction."
msgstr ""
"Завантажує атрибут ``co_names[namei]`` з модуля, знайденого в TOS. Отриманий "
"об’єкт поміщається в стек, щоб згодом зберігатися за допомогою інструкції :"
"opcode:`STORE_FAST`."

#: ../../library/dis.rst:940
msgid "Increments bytecode counter by *delta*."
msgstr "Збільшує лічильник байт-коду на *delta*."

#: ../../library/dis.rst:945
msgid "If TOS is true, sets the bytecode counter to *target*.  TOS is popped."
msgstr ""
"TOS が真ならば、バイトコードカウンタを *target* に設定します。 TOS はポップさ"
"れます。"

#: ../../library/dis.rst:952
msgid "If TOS is false, sets the bytecode counter to *target*.  TOS is popped."
msgstr ""
"TOS が偽ならば、バイトコードカウンタを *target* に設定します。 TOS はポップさ"
"れます。"

#: ../../library/dis.rst:958
msgid ""
"Tests whether the second value on the stack is an exception matching TOS, "
"and jumps if it is not. Pops two values from the stack."
msgstr ""
"检测堆栈中的第二个值是否为匹配 TOS 的异常，如果不是则会跳转。 从堆栈中弹出两"
"个值。"

#: ../../library/dis.rst:966
msgid ""
"If TOS is true, sets the bytecode counter to *target* and leaves TOS on the "
"stack.  Otherwise (TOS is false), TOS is popped."
msgstr ""
"TOS が真ならば、バイトコードカウンタを *target* に設定し、TOS は スタックに残"
"されます。そうでない (TOS が偽) なら、TOS はポップされます。"

#: ../../library/dis.rst:974
msgid ""
"If TOS is false, sets the bytecode counter to *target* and leaves TOS on the "
"stack.  Otherwise (TOS is true), TOS is popped."
msgstr ""
"TOS が偽ならば、バイトコードカウンタを *target* に設定し、TOS は スタックに残"
"されます。そうでない (TOS が真) なら、TOS はポップされます。"

#: ../../library/dis.rst:982
msgid "Set bytecode counter to *target*."
msgstr "バイトコードカウンタを *target* に設定します。"

#: ../../library/dis.rst:987
msgid ""
"TOS is an :term:`iterator`.  Call its :meth:`~iterator.__next__` method.  If "
"this yields a new value, push it on the stack (leaving the iterator below "
"it).  If the iterator indicates it is exhausted, TOS is popped, and the byte "
"code counter is incremented by *delta*."
msgstr ""
"TOS є :term:`iterator`. Викличте його метод :meth:`~iterator.__next__`. Якщо "
"це дає нове значення, помістіть його в стек (залишаючи ітератор під ним). "
"Якщо ітератор вказує, що його вичерпано, TOS виривається, а лічильник байт-"
"коду збільшується на *delta*."

#: ../../library/dis.rst:995
msgid "Loads the global named ``co_names[namei]`` onto the stack."
msgstr "``co_names[namei]`` という名前のグローバルをスタック上にロードします。"

#: ../../library/dis.rst:1000
msgid ""
"Pushes a try block from a try-finally or try-except clause onto the block "
"stack.  *delta* points to the finally block or the first except block."
msgstr ""
"将一个来自 try-finally 或 try-except 子句的 try 代码块推入代码块栈顶。 相对 "
"finally 代码块或第一个 except 代码块 *delta* 个点数。"

#: ../../library/dis.rst:1006
msgid ""
"Pushes a reference to the local ``co_varnames[var_num]`` onto the stack."
msgstr "Надсилає посилання на локальні ``co_var_names[var_num]`` у стек."

#: ../../library/dis.rst:1011
msgid "Stores TOS into the local ``co_varnames[var_num]``."
msgstr "Зберігає TOS у локальному ``co_varnames[var_num]``."

#: ../../library/dis.rst:1016
msgid "Deletes local ``co_varnames[var_num]``."
msgstr "Видаляє локальні ``co_var_names[var_num]``."

#: ../../library/dis.rst:1021
msgid ""
"Pushes a reference to the cell contained in slot *i* of the cell and free "
"variable storage.  The name of the variable is ``co_cellvars[i]`` if *i* is "
"less than the length of *co_cellvars*.  Otherwise it is ``co_freevars[i - "
"len(co_cellvars)]``."
msgstr ""
"セルと自由変数の記憶領域のスロット *i* に含まれるセルへの参照をプッシュしま"
"す。 *i* が *co_cellvars* の長さより小さければ、変数の名前は "
"``co_cellvars[i]`` です。 そうでなければ ``co_freevars[i - "
"len(co_cellvars)]`` です。"

#: ../../library/dis.rst:1029
msgid ""
"Loads the cell contained in slot *i* of the cell and free variable storage. "
"Pushes a reference to the object the cell contains on the stack."
msgstr ""
"セルと自由変数の記憶領域のスロット *i* に含まれるセルをロードします。 セルが"
"持つオブジェクトへの参照をスタックにプッシュします。"

#: ../../library/dis.rst:1035
msgid ""
"Much like :opcode:`LOAD_DEREF` but first checks the locals dictionary before "
"consulting the cell.  This is used for loading free variables in class "
"bodies."
msgstr ""
"Подібно до :opcode:`LOAD_DEREF`, але спочатку перевіряє локальний словник, "
"перш ніж звертатися до клітинки. Це використовується для завантаження "
"вільних змінних у тілах класів."

#: ../../library/dis.rst:1044
msgid ""
"Stores TOS into the cell contained in slot *i* of the cell and free variable "
"storage."
msgstr ""
"セルと自由変数の記憶領域のスロット *i* に含まれるセルへTOSを保存します。"

#: ../../library/dis.rst:1050
msgid ""
"Empties the cell contained in slot *i* of the cell and free variable "
"storage. Used by the :keyword:`del` statement."
msgstr ""
"セルと自由変数の記憶領域のスロット *i* にあるセルを空にします。\n"
":keyword:`del` 文で使われます。"

#: ../../library/dis.rst:1058
msgid ""
"Raises an exception using one of the 3 forms of the ``raise`` statement, "
"depending on the value of *argc*:"
msgstr ""
"Створює виняток, використовуючи одну з 3 форм оператора ``raise``, залежно "
"від значення *argc*:"

#: ../../library/dis.rst:1061
msgid "0: ``raise`` (re-raise previous exception)"
msgstr "0: ``raise`` (повторно підняти попередній виняток)"

#: ../../library/dis.rst:1062
msgid "1: ``raise TOS`` (raise exception instance or type at ``TOS``)"
msgstr "1: ``підняти TOS`` (підвищити екземпляр винятку або ввести в ``TOS``)"

#: ../../library/dis.rst:1063
msgid ""
"2: ``raise TOS1 from TOS`` (raise exception instance or type at ``TOS1`` "
"with ``__cause__`` set to ``TOS``)"
msgstr ""
"2: ``підняти TOS1 з TOS`` (підняти екземпляр винятку або ввести в ``TOS1`` з "
"``__cause__``, встановленим на ``TOS``)"

#: ../../library/dis.rst:1069
msgid ""
"Calls a callable object with positional arguments. *argc* indicates the "
"number of positional arguments. The top of the stack contains positional "
"arguments, with the right-most argument on top.  Below the arguments is a "
"callable object to call. ``CALL_FUNCTION`` pops all arguments and the "
"callable object off the stack, calls the callable object with those "
"arguments, and pushes the return value returned by the callable object."
msgstr ""
"调用一个可调用对象并传入位置参数。 *argc* 指明位置参数的数量。 栈顶包含位置参"
"数，其中最右边的参数在最顶端。 在参数之下是一个待调用的可调用对象。 "
"``CALL_FUNCTION`` 会从栈中弹出所有参数以及可调用对象，附带这些参数调用该可调"
"用对象，并将可调用对象所返回的返回值推入栈顶。"

#: ../../library/dis.rst:1077
msgid "This opcode is used only for calls with positional arguments."
msgstr "此操作码仅用于附带位置参数的调用。"

#: ../../library/dis.rst:1083
msgid ""
"Calls a callable object with positional (if any) and keyword arguments. "
"*argc* indicates the total number of positional and keyword arguments. The "
"top element on the stack contains a tuple with the names of the keyword "
"arguments, which must be strings. Below that are the values for the keyword "
"arguments, in the order corresponding to the tuple. Below that are "
"positional arguments, with the right-most parameter on top.  Below the "
"arguments is a callable object to call. ``CALL_FUNCTION_KW`` pops all "
"arguments and the callable object off the stack, calls the callable object "
"with those arguments, and pushes the return value returned by the callable "
"object."
msgstr ""
"调用一个可调用对象并传入位置参数（如果有的话）和关键字参数。 *argc* 指明位置"
"参数和关键字参数的总数量。 栈顶元素包含一个关键字参数名称的元组，名称必须为字"
"符串。 在元组之下是与元组顺序相对应的关键字参数值。 在它之下则是位置参数，其"
"中最右边的参数在最顶端。 在参数之下是要调用的可调用对象。 "
"``CALL_FUNCTION_KW`` 会从栈中弹出所有参数及可调用对象，附带这些参数调用该可调"
"用对象，并将可调用对象所返回的返回值推入栈顶。"

#: ../../library/dis.rst:1095
msgid ""
"Keyword arguments are packed in a tuple instead of a dictionary, *argc* "
"indicates the total number of arguments."
msgstr "关键字参数会被打包为一个元组而非字典，*argc* 指明参数的总数量。"

#: ../../library/dis.rst:1102
msgid ""
"Calls a callable object with variable set of positional and keyword "
"arguments.  If the lowest bit of *flags* is set, the top of the stack "
"contains a mapping object containing additional keyword arguments. Before "
"the callable is called, the mapping object and iterable object are each "
"\"unpacked\" and their contents passed in as keyword and positional "
"arguments respectively. ``CALL_FUNCTION_EX`` pops all arguments and the "
"callable object off the stack, calls the callable object with those "
"arguments, and pushes the return value returned by the callable object."
msgstr ""
"Викликає викликаний об’єкт зі змінним набором позиційних і ключових "
"аргументів. Якщо встановлено найнижчий біт *flags*, верхня частина стека "
"містить об’єкт відображення, що містить додаткові аргументи ключового слова. "
"Перед викликом викликаного об’єкта відображення та ітерованого об’єкта кожен "
"\"розпаковується\", а їхній вміст передається як ключове слово та позиційний "
"аргумент відповідно. ``CALL_FUNCTION_EX`` видаляє зі стеку всі аргументи та "
"об’єкт, який викликається, викликає об’єкт, який викликається, з цими "
"аргументами та надсилає значення, яке повертає об’єкт, який викликається."

#: ../../library/dis.rst:1117
msgid ""
"Loads a method named ``co_names[namei]`` from the TOS object. TOS is popped. "
"This bytecode distinguishes two cases: if TOS has a method with the correct "
"name, the bytecode pushes the unbound method and TOS. TOS will be used as "
"the first argument (``self``) by :opcode:`CALL_METHOD` when calling the "
"unbound method. Otherwise, ``NULL`` and the object return by the attribute "
"lookup are pushed."
msgstr ""
"从 TOS 对象加载一个名为 ``co_names[namei]`` 的方法。 TOS 将被弹出。 此字节码"
"可区分两种情况：如果 TOS 有一个名称正确的方法，字节码会将未绑定方法和 TOS 推"
"入栈顶。 TOS 将在调用未绑定方法时被用作 :opcode:`CALL_METHOD` 的第一个参数 "
"(``self``)。 否则会将 ``NULL`` 和属性查找所返回的对象推入栈顶。"

#: ../../library/dis.rst:1129
msgid ""
"Calls a method.  *argc* is the number of positional arguments. Keyword "
"arguments are not supported.  This opcode is designed to be used with :"
"opcode:`LOAD_METHOD`.  Positional arguments are on top of the stack. Below "
"them, the two items described in :opcode:`LOAD_METHOD` are on the stack "
"(either ``self`` and an unbound method object or ``NULL`` and an arbitrary "
"callable). All of them are popped and the return value is pushed."
msgstr ""
"调用一个方法。 *argc* 是位置参数的数量。 关键字参数不受支持。 此操作码被设计"
"用于配合 :opcode:`LOAD_METHOD` 使用。 位置参数放在栈顶。 在它们之下放在栈中的"
"是由 :opcode:`LOAD_METHOD` 所描述的两个条目（或者是 ``self`` 和一个未绑定方法"
"对象，或者是 ``NULL`` 和一个任意可调用对象）。 它们会被全部弹出并将返回值推入"
"栈顶。"

#: ../../library/dis.rst:1141
msgid ""
"Pushes a new function object on the stack.  From bottom to top, the consumed "
"stack must consist of values if the argument carries a specified flag value"
msgstr ""
"Поміщає новий функціональний об’єкт у стек. Знизу вгору споживаний стек "
"повинен складатися зі значень, якщо аргумент містить вказане значення прапора"

#: ../../library/dis.rst:1144
msgid ""
"``0x01`` a tuple of default values for positional-only and positional-or-"
"keyword parameters in positional order"
msgstr ""
"``0x01`` кортеж значень за замовчуванням для позиційних параметрів і "
"параметрів позиційного або ключового слова в позиційному порядку"

#: ../../library/dis.rst:1146
msgid "``0x02`` a dictionary of keyword-only parameters' default values"
msgstr ""
"``0x02`` словник значень за замовчуванням параметрів лише ключових слів"

#: ../../library/dis.rst:1147
msgid "``0x04`` an annotation dictionary"
msgstr ""

#: ../../library/dis.rst:1148
msgid "``0x08`` a tuple containing cells for free variables, making a closure"
msgstr ""
"``0x08`` кортеж, що містить комірки для вільних змінних, створюючи закриття"

#: ../../library/dis.rst:1149
msgid "the code associated with the function (at TOS1)"
msgstr "код, пов’язаний із функцією (в TOS1)"

#: ../../library/dis.rst:1150
msgid "the :term:`qualified name` of the function (at TOS)"
msgstr ":term:`qualified name` функції (у TOS)"

#: ../../library/dis.rst:1157
msgid ""
"Pushes a slice object on the stack.  *argc* must be 2 or 3.  If it is 2, "
"``slice(TOS1, TOS)`` is pushed; if it is 3, ``slice(TOS2, TOS1, TOS)`` is "
"pushed. See the :func:`slice` built-in function for more information."
msgstr ""
"Штовхає об’єкт-скибочку на стек. *argc* має бути 2 або 3. Якщо воно дорівнює "
"2, надсилається ``slice(TOS1, TOS)``; якщо він дорівнює 3, надсилається "
"``slice(TOS2, TOS1, TOS)``. Дивіться вбудовану функцію :func:`slice` для "
"отримання додаткової інформації."

#: ../../library/dis.rst:1164
msgid ""
"Prefixes any opcode which has an argument too big to fit into the default "
"one byte. *ext* holds an additional byte which act as higher bits in the "
"argument. For each opcode, at most three prefixal ``EXTENDED_ARG`` are "
"allowed, forming an argument from two-byte to four-byte."
msgstr ""
"Додає префікс до будь-якого коду операції, який має занадто великий "
"аргумент, щоб поміститися в стандартний один байт. *ext* містить додатковий "
"байт, який діє як старші біти в аргументі. Для кожного коду операції "
"дозволено не більше трьох префіксів ``EXTENDED_ARG``, які утворюють аргумент "
"розміром від двох до чотирьох байтів."

#: ../../library/dis.rst:1172
msgid ""
"Used for implementing formatted literal strings (f-strings).  Pops an "
"optional *fmt_spec* from the stack, then a required *value*. *flags* is "
"interpreted as follows:"
msgstr ""
"Використовується для реалізації форматованих літеральних рядків (f-рядків). "
"Витягує необов’язковий *fmt_spec* зі стеку, а потім обов’язкове *значення*. "
"*flags* інтерпретується таким чином:"

#: ../../library/dis.rst:1176
msgid "``(flags & 0x03) == 0x00``: *value* is formatted as-is."
msgstr "``(flags & 0x03) == 0x00``: *значення* відформатовано як є."

#: ../../library/dis.rst:1177
msgid ""
"``(flags & 0x03) == 0x01``: call :func:`str` on *value* before formatting it."
msgstr ""
"``(flags & 0x03) == 0x01``: виклик :func:`str` для *значення* перед його "
"форматуванням."

#: ../../library/dis.rst:1179
msgid ""
"``(flags & 0x03) == 0x02``: call :func:`repr` on *value* before formatting "
"it."
msgstr ""
"``(flags & 0x03) == 0x02``: виклик :func:`repr` для *значення* перед його "
"форматуванням."

#: ../../library/dis.rst:1181
msgid ""
"``(flags & 0x03) == 0x03``: call :func:`ascii` on *value* before formatting "
"it."
msgstr ""
"``(flags & 0x03) == 0x03``: виклик :func:`ascii` для *значення* перед його "
"форматуванням."

#: ../../library/dis.rst:1183
msgid ""
"``(flags & 0x04) == 0x04``: pop *fmt_spec* from the stack and use it, else "
"use an empty *fmt_spec*."
msgstr ""
"``(flags & 0x04) == 0x04``: витягніть *fmt_spec* зі стеку та використовуйте "
"його, інакше використовуйте порожній *fmt_spec*."

#: ../../library/dis.rst:1186
msgid ""
"Formatting is performed using :c:func:`PyObject_Format`.  The result is "
"pushed on the stack."
msgstr ""
"Форматування виконується за допомогою :c:func:`PyObject_Format`. Результат "
"поміщається в стек."

#: ../../library/dis.rst:1194
msgid ""
"This is not really an opcode.  It identifies the dividing line between "
"opcodes which don't use their argument and those that do (``< "
"HAVE_ARGUMENT`` and ``>= HAVE_ARGUMENT``, respectively)."
msgstr ""
"这不是一个真正的操作码。 它标明了不使用参数和使用参数的操作码 (分别是 ``< "
"HAVE_ARGUMENT`` 和 ``>= HAVE_ARGUMENT``) 之间的分隔线。"

#: ../../library/dis.rst:1198
msgid ""
"Now every instruction has an argument, but opcodes ``< HAVE_ARGUMENT`` "
"ignore it. Before, only opcodes ``>= HAVE_ARGUMENT`` had an argument."
msgstr ""
"Тепер кожна інструкція має аргумент, але коди операцій ``< HAVE_ARGUMENT`` "
"ignore it. Before, only opcodes ``> = HAVE_ARGUMENT`` мали аргумент."

#: ../../library/dis.rst:1206
msgid "Opcode collections"
msgstr "Колекції кодів операцій"

#: ../../library/dis.rst:1208
msgid ""
"These collections are provided for automatic introspection of bytecode "
"instructions:"
msgstr "Ці колекції надаються для автоматичного аналізу інструкцій байт-коду:"

#: ../../library/dis.rst:1213
msgid "Sequence of operation names, indexable using the bytecode."
msgstr "Послідовність імен операцій, індексованих за допомогою байт-коду."

#: ../../library/dis.rst:1218
msgid "Dictionary mapping operation names to bytecodes."
msgstr "Словник зіставляє назви операцій із байт-кодами."

#: ../../library/dis.rst:1223
msgid "Sequence of all compare operation names."
msgstr "Послідовність імен усіх операцій порівняння."

#: ../../library/dis.rst:1228
msgid "Sequence of bytecodes that access a constant."
msgstr "Послідовність байт-кодів, які звертаються до константи."

#: ../../library/dis.rst:1233
msgid ""
"Sequence of bytecodes that access a free variable (note that 'free' in this "
"context refers to names in the current scope that are referenced by inner "
"scopes or names in outer scopes that are referenced from this scope.  It "
"does *not* include references to global or builtin scopes)."
msgstr ""
"Послідовність байт-кодів, які мають доступ до вільної змінної (зауважте, що "
"\"вільний\" у цьому контексті стосується імен у поточній області, на які "
"посилаються внутрішні області, або імен у зовнішніх областях, на які "
"посилається ця область. Він *не* включає посилання на глобальні або "
"вбудовані області)."

#: ../../library/dis.rst:1241
msgid "Sequence of bytecodes that access an attribute by name."
msgstr "Послідовність байт-кодів, які звертаються до атрибута за назвою."

#: ../../library/dis.rst:1246
msgid "Sequence of bytecodes that have a relative jump target."
msgstr "Послідовність байт-кодів, які мають відносну ціль переходу."

#: ../../library/dis.rst:1251
msgid "Sequence of bytecodes that have an absolute jump target."
msgstr "Послідовність байт-кодів, які мають абсолютну ціль переходу."

#: ../../library/dis.rst:1256
msgid "Sequence of bytecodes that access a local variable."
msgstr "Послідовність байт-кодів, які звертаються до локальної змінної."

#: ../../library/dis.rst:1261
msgid "Sequence of bytecodes of Boolean operations."
msgstr "Послідовність байт-кодів булевих операцій."
