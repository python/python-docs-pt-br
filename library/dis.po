# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2018-09-18 05:41+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/"
"python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../library/dis.rst:2
msgid ":mod:`dis` --- Disassembler for Python bytecode"
msgstr ":mod:`dis` --- Disassembler do bytecode do Python "

#: ../../library/dis.rst:7
msgid "**Source code:** :source:`Lib/dis.py`"
msgstr "**Código Fonte:** :source:`Lib/dis.py`"

#: ../../library/dis.rst:11
msgid ""
"The :mod:`dis` module supports the analysis of CPython :term:`bytecode` by "
"disassembling it. The CPython bytecode which this module takes as an input "
"is defined in the file :file:`Include/opcode.h` and used by the compiler and "
"the interpreter."
msgstr ""
"O módulo :mod:`dis` suporta a análise dos termos :term:`bytecode` CPython, "
"desmontando-o. O bytecode do CPython que o módulo leva como entrada é "
"definido no arquivo arquivoi :file:`Incluir/opcode.h` e usado pelo "
"compilador e pelo intérprete."

#: ../../library/dis.rst:18
msgid ""
"Bytecode is an implementation detail of the CPython interpreter!  No "
"guarantees are made that bytecode will not be added, removed, or changed "
"between versions of Python.  Use of this module should not be considered to "
"work across Python VMs or Python releases."
msgstr ""

#: ../../library/dis.rst:23
msgid "Example: Given the function :func:`myfunc`::"
msgstr "Exemplo: Dada a função :func:`myfunc`::"

#: ../../library/dis.rst:28
msgid ""
"the following command can be used to get the disassembly of :func:`myfunc`::"
msgstr ""

#: ../../library/dis.rst:36
msgid "(The \"2\" is a line number)."
msgstr "(O \"2\" é um número da linha)."

#: ../../library/dis.rst:38
msgid "The :mod:`dis` module defines the following functions and constants:"
msgstr ""

#: ../../library/dis.rst:43
msgid ""
"Disassemble the *bytesource* object. *bytesource* can denote either a "
"module, a class, a method, a function, or a code object.  For a module, it "
"disassembles all functions.  For a class, it disassembles all methods.  For "
"a single code sequence, it prints one line per bytecode instruction.  If no "
"object is provided, it disassembles the last traceback."
msgstr ""

#: ../../library/dis.rst:52
msgid ""
"Disassembles the top-of-stack function of a traceback, using the last "
"traceback if none was passed.  The instruction causing the exception is "
"indicated."
msgstr ""

#: ../../library/dis.rst:59
msgid ""
"Disassembles a code object, indicating the last instruction if *lasti* was "
"provided.  The output is divided in the following columns:"
msgstr ""

#: ../../library/dis.rst:62
msgid "the line number, for the first instruction of each line"
msgstr "o número da linha, para a primeira instrução de cada linha"

#: ../../library/dis.rst:63
msgid "the current instruction, indicated as ``-->``,"
msgstr "a instrução atual, indicada por ``-->``,"

#: ../../library/dis.rst:64
msgid "a labelled instruction, indicated with ``>>``,"
msgstr "um rótulo da instrução, indicado com ``>>``,"

#: ../../library/dis.rst:65
msgid "the address of the instruction,"
msgstr "o endereço da instrução"

#: ../../library/dis.rst:66
msgid "the operation code name,"
msgstr "o nome do código da operação,"

#: ../../library/dis.rst:67
msgid "operation parameters, and"
msgstr "os parâmetros da operação, e"

#: ../../library/dis.rst:68
msgid "interpretation of the parameters in parentheses."
msgstr "a interpretação dos parâmetros, em parênteses."

#: ../../library/dis.rst:70
msgid ""
"The parameter interpretation recognizes local and global variable names, "
"constant values, branch targets, and compare operators."
msgstr ""
"A interpretação dos parâmetros reconhece nomes de variáveis locais e "
"globais, valores de constantes, alvos de ramificações, e operadores de "
"comparação."

#: ../../library/dis.rst:76
msgid ""
"A synonym for :func:`disassemble`.  It is more convenient to type, and kept "
"for compatibility with earlier Python releases."
msgstr ""

#: ../../library/dis.rst:82
msgid ""
"This generator function uses the ``co_firstlineno`` and ``co_lnotab`` "
"attributes of the code object *code* to find the offsets which are starts of "
"lines in the source code.  They are generated as ``(offset, lineno)`` pairs."
msgstr ""

#: ../../library/dis.rst:89
msgid ""
"Detect all offsets in the code object *code* which are jump targets, and "
"return a list of these offsets."
msgstr ""

#: ../../library/dis.rst:95
msgid "Sequence of operation names, indexable using the bytecode."
msgstr ""

#: ../../library/dis.rst:100
msgid "Dictionary mapping operation names to bytecodes."
msgstr ""

#: ../../library/dis.rst:105
msgid "Sequence of all compare operation names."
msgstr ""

#: ../../library/dis.rst:110
msgid "Sequence of bytecodes that access a constant."
msgstr ""

#: ../../library/dis.rst:115
msgid "Sequence of bytecodes that access a free variable."
msgstr ""

#: ../../library/dis.rst:120
msgid "Sequence of bytecodes that access an attribute by name."
msgstr ""

#: ../../library/dis.rst:125
msgid "Sequence of bytecodes that have a relative jump target."
msgstr ""

#: ../../library/dis.rst:130
msgid "Sequence of bytecodes that have an absolute jump target."
msgstr ""

#: ../../library/dis.rst:135
msgid "Sequence of bytecodes that access a local variable."
msgstr ""

#: ../../library/dis.rst:140
msgid "Sequence of bytecodes of Boolean operations."
msgstr ""

#: ../../library/dis.rst:146
msgid "Python Bytecode Instructions"
msgstr "Instruções em bytecode do Python"

#: ../../library/dis.rst:148
msgid ""
"The Python compiler currently generates the following bytecode instructions."
msgstr ""
"O compilador de Python atualmente gera as seguintes instruções de bytecode."

#: ../../library/dis.rst:153
msgid "Indicates end-of-code to the compiler, not used by the interpreter."
msgstr ""

#: ../../library/dis.rst:158
msgid "Do nothing code.  Used as a placeholder by the bytecode optimizer."
msgstr ""

#: ../../library/dis.rst:163
msgid "Removes the top-of-stack (TOS) item."
msgstr ""

#: ../../library/dis.rst:168
msgid "Swaps the two top-most stack items."
msgstr ""

#: ../../library/dis.rst:173
msgid ""
"Lifts second and third stack item one position up, moves top down to "
"position three."
msgstr ""

#: ../../library/dis.rst:179
msgid ""
"Lifts second, third and forth stack item one position up, moves top down to "
"position four."
msgstr ""

#: ../../library/dis.rst:185
msgid "Duplicates the reference on top of the stack."
msgstr ""

#: ../../library/dis.rst:187
msgid ""
"Unary Operations take the top of the stack, apply the operation, and push "
"the result back on the stack."
msgstr ""

#: ../../library/dis.rst:193
msgid "Implements ``TOS = +TOS``."
msgstr ""

#: ../../library/dis.rst:198
msgid "Implements ``TOS = -TOS``."
msgstr ""

#: ../../library/dis.rst:203
msgid "Implements ``TOS = not TOS``."
msgstr ""

#: ../../library/dis.rst:208
msgid "Implements ``TOS = `TOS```."
msgstr ""

#: ../../library/dis.rst:213
msgid "Implements ``TOS = ~TOS``."
msgstr "Implementação ``TOS = ~TOS``."

#: ../../library/dis.rst:218
msgid "Implements ``TOS = iter(TOS)``."
msgstr "Implementa ``TOS = iter(TOS)``."

#: ../../library/dis.rst:220
msgid ""
"Binary operations remove the top of the stack (TOS) and the second top-most "
"stack item (TOS1) from the stack.  They perform the operation, and put the "
"result back on the stack."
msgstr ""

#: ../../library/dis.rst:227
msgid "Implements ``TOS = TOS1 ** TOS``."
msgstr "Implementa ``TOS = TOS1 ** TOS``."

#: ../../library/dis.rst:232
msgid "Implements ``TOS = TOS1 * TOS``."
msgstr ""

#: ../../library/dis.rst:237
msgid ""
"Implements ``TOS = TOS1 / TOS`` when ``from __future__ import division`` is "
"not in effect."
msgstr ""

#: ../../library/dis.rst:243
msgid "Implements ``TOS = TOS1 // TOS``."
msgstr "Implementa ``TOS = TOS1 // TOS``."

#: ../../library/dis.rst:248
msgid ""
"Implements ``TOS = TOS1 / TOS`` when ``from __future__ import division`` is "
"in effect."
msgstr ""

#: ../../library/dis.rst:254
msgid "Implements ``TOS = TOS1 % TOS``."
msgstr "Implementa ``TOS = TOS1 % TOS``."

#: ../../library/dis.rst:259
msgid "Implements ``TOS = TOS1 + TOS``."
msgstr ""

#: ../../library/dis.rst:264
msgid "Implements ``TOS = TOS1 - TOS``."
msgstr ""

#: ../../library/dis.rst:269
msgid "Implements ``TOS = TOS1[TOS]``."
msgstr ""

#: ../../library/dis.rst:274
msgid "Implements ``TOS = TOS1 << TOS``."
msgstr ""

#: ../../library/dis.rst:279
msgid "Implements ``TOS = TOS1 >> TOS``."
msgstr ""

#: ../../library/dis.rst:284
msgid "Implements ``TOS = TOS1 & TOS``."
msgstr ""

#: ../../library/dis.rst:289
msgid "Implements ``TOS = TOS1 ^ TOS``."
msgstr ""

#: ../../library/dis.rst:294
msgid "Implements ``TOS = TOS1 | TOS``."
msgstr ""

#: ../../library/dis.rst:296
msgid ""
"In-place operations are like binary operations, in that they remove TOS and "
"TOS1, and push the result back on the stack, but the operation is done in-"
"place when TOS1 supports it, and the resulting TOS may be (but does not have "
"to be) the original TOS1."
msgstr ""

#: ../../library/dis.rst:304
msgid "Implements in-place ``TOS = TOS1 ** TOS``."
msgstr ""

#: ../../library/dis.rst:309
msgid "Implements in-place ``TOS = TOS1 * TOS``."
msgstr ""

#: ../../library/dis.rst:314
msgid ""
"Implements in-place ``TOS = TOS1 / TOS`` when ``from __future__ import "
"division`` is not in effect."
msgstr ""

#: ../../library/dis.rst:320
msgid "Implements in-place ``TOS = TOS1 // TOS``."
msgstr ""

#: ../../library/dis.rst:325
msgid ""
"Implements in-place ``TOS = TOS1 / TOS`` when ``from __future__ import "
"division`` is in effect."
msgstr ""

#: ../../library/dis.rst:331
msgid "Implements in-place ``TOS = TOS1 % TOS``."
msgstr ""

#: ../../library/dis.rst:336
msgid "Implements in-place ``TOS = TOS1 + TOS``."
msgstr ""

#: ../../library/dis.rst:341
msgid "Implements in-place ``TOS = TOS1 - TOS``."
msgstr ""

#: ../../library/dis.rst:346
msgid "Implements in-place ``TOS = TOS1 << TOS``."
msgstr ""

#: ../../library/dis.rst:351
msgid "Implements in-place ``TOS = TOS1 >> TOS``."
msgstr ""

#: ../../library/dis.rst:356
msgid "Implements in-place ``TOS = TOS1 & TOS``."
msgstr ""

#: ../../library/dis.rst:361
msgid "Implements in-place ``TOS = TOS1 ^ TOS``."
msgstr ""

#: ../../library/dis.rst:366
msgid "Implements in-place ``TOS = TOS1 | TOS``."
msgstr ""

#: ../../library/dis.rst:368
msgid "The slice opcodes take up to three parameters."
msgstr ""

#: ../../library/dis.rst:373
msgid "Implements ``TOS = TOS[:]``."
msgstr ""

#: ../../library/dis.rst:378
msgid "Implements ``TOS = TOS1[TOS:]``."
msgstr ""

#: ../../library/dis.rst:383
msgid "Implements ``TOS = TOS1[:TOS]``."
msgstr ""

#: ../../library/dis.rst:388
msgid "Implements ``TOS = TOS2[TOS1:TOS]``."
msgstr ""

#: ../../library/dis.rst:390
msgid ""
"Slice assignment needs even an additional parameter.  As any statement, they "
"put nothing on the stack."
msgstr ""

#: ../../library/dis.rst:396
msgid "Implements ``TOS[:] = TOS1``."
msgstr ""

#: ../../library/dis.rst:401
msgid "Implements ``TOS1[TOS:] = TOS2``."
msgstr ""

#: ../../library/dis.rst:406
msgid "Implements ``TOS1[:TOS] = TOS2``."
msgstr ""

#: ../../library/dis.rst:411
msgid "Implements ``TOS2[TOS1:TOS] = TOS3``."
msgstr ""

#: ../../library/dis.rst:416
msgid "Implements ``del TOS[:]``."
msgstr ""

#: ../../library/dis.rst:421
msgid "Implements ``del TOS1[TOS:]``."
msgstr ""

#: ../../library/dis.rst:426
msgid "Implements ``del TOS1[:TOS]``."
msgstr ""

#: ../../library/dis.rst:431
msgid "Implements ``del TOS2[TOS1:TOS]``."
msgstr ""

#: ../../library/dis.rst:436
msgid "Implements ``TOS1[TOS] = TOS2``."
msgstr ""

#: ../../library/dis.rst:441
msgid "Implements ``del TOS1[TOS]``."
msgstr ""

#: ../../library/dis.rst:443
msgid "Miscellaneous opcodes."
msgstr ""

#: ../../library/dis.rst:448
msgid ""
"Implements the expression statement for the interactive mode.  TOS is "
"removed from the stack and printed.  In non-interactive mode, an expression "
"statement is terminated with :opcode:`POP_TOP`."
msgstr ""

#: ../../library/dis.rst:455
msgid ""
"Prints TOS to the file-like object bound to ``sys.stdout``.  There is one "
"such instruction for each item in the :keyword:`print` statement."
msgstr ""

#: ../../library/dis.rst:461
msgid ""
"Like ``PRINT_ITEM``, but prints the item second from TOS to the file-like "
"object at TOS.  This is used by the extended print statement."
msgstr ""

#: ../../library/dis.rst:467
msgid ""
"Prints a new line on ``sys.stdout``.  This is generated as the last "
"operation of a :keyword:`print` statement, unless the statement ends with a "
"comma."
msgstr ""

#: ../../library/dis.rst:473
msgid ""
"Like ``PRINT_NEWLINE``, but prints the new line on the file-like object on "
"the TOS.  This is used by the extended print statement."
msgstr ""

#: ../../library/dis.rst:479
msgid "Terminates a loop due to a :keyword:`break` statement."
msgstr ""

#: ../../library/dis.rst:484
msgid ""
"Continues a loop due to a :keyword:`continue` statement.  *target* is the "
"address to jump to (which should be a :opcode:`FOR_ITER` instruction)."
msgstr ""

#: ../../library/dis.rst:490
msgid ""
"Calls ``list.append(TOS[-i], TOS)``.  Used to implement list comprehensions. "
"While the appended value is popped off, the list object remains on the stack "
"so that it is available for further iterations of the loop."
msgstr ""

#: ../../library/dis.rst:497
msgid ""
"Pushes a reference to the locals of the current scope on the stack. This is "
"used in the code for a class definition: After the class body is evaluated, "
"the locals are passed to the class definition."
msgstr ""

#: ../../library/dis.rst:504
msgid "Returns with TOS to the caller of the function."
msgstr ""

#: ../../library/dis.rst:509
msgid "Pops ``TOS`` and yields it from a :term:`generator`."
msgstr ""

#: ../../library/dis.rst:514
msgid ""
"Loads all symbols not starting with ``'_'`` directly from the module TOS to "
"the local namespace. The module is popped after loading all names. This "
"opcode implements ``from module import *``."
msgstr ""

#: ../../library/dis.rst:521
msgid ""
"Implements ``exec TOS2,TOS1,TOS``.  The compiler fills missing optional "
"parameters with ``None``."
msgstr ""

#: ../../library/dis.rst:527
msgid ""
"Removes one block from the block stack.  Per frame, there is a stack of "
"blocks, denoting nested loops, try statements, and such."
msgstr ""

#: ../../library/dis.rst:533
msgid ""
"Terminates a :keyword:`finally` clause.  The interpreter recalls whether the "
"exception has to be re-raised, or whether the function returns, and "
"continues with the outer-next block."
msgstr ""

#: ../../library/dis.rst:540
msgid ""
"Creates a new class object.  TOS is the methods dictionary, TOS1 the tuple "
"of the names of the base classes, and TOS2 the class name."
msgstr ""

#: ../../library/dis.rst:546
msgid ""
"This opcode performs several operations before a with block starts.  First, "
"it loads :meth:`~object.__exit__` from the context manager and pushes it "
"onto the stack for later use by :opcode:`WITH_CLEANUP`.  Then, :meth:"
"`~object.__enter__` is called, and a finally block pointing to *delta* is "
"pushed.  Finally, the result of calling the enter method is pushed onto the "
"stack.  The next opcode will either ignore it (:opcode:`POP_TOP`), or store "
"it in (a) variable(s) (:opcode:`STORE_FAST`, :opcode:`STORE_NAME`, or :"
"opcode:`UNPACK_SEQUENCE`)."
msgstr ""

#: ../../library/dis.rst:558
msgid ""
"Cleans up the stack when a :keyword:`with` statement block exits.  On top of "
"the stack are 1--3 values indicating how/why the finally clause was entered:"
msgstr ""

#: ../../library/dis.rst:561
msgid "TOP = ``None``"
msgstr ""

#: ../../library/dis.rst:562
msgid "(TOP, SECOND) = (``WHY_{RETURN,CONTINUE}``), retval"
msgstr ""

#: ../../library/dis.rst:563
msgid "TOP = ``WHY_*``; no retval below it"
msgstr ""

#: ../../library/dis.rst:564
msgid "(TOP, SECOND, THIRD) = exc_info()"
msgstr ""

#: ../../library/dis.rst:566
msgid ""
"Under them is EXIT, the context manager's :meth:`__exit__` bound method."
msgstr ""

#: ../../library/dis.rst:568
msgid ""
"In the last case, ``EXIT(TOP, SECOND, THIRD)`` is called, otherwise "
"``EXIT(None, None, None)``."
msgstr ""

#: ../../library/dis.rst:571
msgid ""
"EXIT is removed from the stack, leaving the values above it in the same "
"order. In addition, if the stack represents an exception, *and* the function "
"call returns a 'true' value, this information is \"zapped\", to prevent "
"``END_FINALLY`` from re-raising the exception.  (But non-local gotos should "
"still be resumed.)"
msgstr ""

#: ../../library/dis.rst:580
msgid ""
"All of the following opcodes expect arguments.  An argument is two bytes, "
"with the more significant byte last."
msgstr ""

#: ../../library/dis.rst:585
msgid ""
"Implements ``name = TOS``. *namei* is the index of *name* in the attribute :"
"attr:`co_names` of the code object. The compiler tries to use ``STORE_FAST`` "
"or ``STORE_GLOBAL`` if possible."
msgstr ""

#: ../../library/dis.rst:592
msgid ""
"Implements ``del name``, where *namei* is the index into :attr:`co_names` "
"attribute of the code object."
msgstr ""

#: ../../library/dis.rst:598
msgid ""
"Unpacks TOS into *count* individual values, which are put onto the stack "
"right-to-left."
msgstr ""

#: ../../library/dis.rst:604
msgid ""
"Duplicate *count* items, keeping them in the same order. Due to "
"implementation limits, *count* should be between 1 and 5 inclusive."
msgstr ""

#: ../../library/dis.rst:610
msgid ""
"Implements ``TOS.name = TOS1``, where *namei* is the index of name in :attr:"
"`co_names`."
msgstr ""

#: ../../library/dis.rst:616
msgid ""
"Implements ``del TOS.name``, using *namei* as index into :attr:`co_names`."
msgstr ""

#: ../../library/dis.rst:621
msgid "Works as ``STORE_NAME``, but stores the name as a global."
msgstr ""

#: ../../library/dis.rst:626
msgid "Works as ``DELETE_NAME``, but deletes a global name."
msgstr ""

#: ../../library/dis.rst:631
msgid "Pushes ``co_consts[consti]`` onto the stack."
msgstr "Põe ``co_consts[consti]`` no topo da pilha."

#: ../../library/dis.rst:636
msgid "Pushes the value associated with ``co_names[namei]`` onto the stack."
msgstr ""

#: ../../library/dis.rst:641
msgid ""
"Creates a tuple consuming *count* items from the stack, and pushes the "
"resulting tuple onto the stack."
msgstr ""

#: ../../library/dis.rst:647
msgid "Works as ``BUILD_TUPLE``, but creates a list."
msgstr ""

#: ../../library/dis.rst:652
msgid "Works as ``BUILD_TUPLE``, but creates a set."
msgstr ""

#: ../../library/dis.rst:659
msgid ""
"Pushes a new dictionary object onto the stack.  The dictionary is pre-sized "
"to hold *count* entries."
msgstr ""

#: ../../library/dis.rst:665
msgid "Replaces TOS with ``getattr(TOS, co_names[namei])``."
msgstr ""

#: ../../library/dis.rst:670
msgid ""
"Performs a Boolean operation.  The operation name can be found in "
"``cmp_op[opname]``."
msgstr ""

#: ../../library/dis.rst:676
msgid ""
"Imports the module ``co_names[namei]``.  TOS and TOS1 are popped and provide "
"the *fromlist* and *level* arguments of :func:`__import__`.  The module "
"object is pushed onto the stack.  The current namespace is not affected: for "
"a proper import statement, a subsequent ``STORE_FAST`` instruction modifies "
"the namespace."
msgstr ""

#: ../../library/dis.rst:685
msgid ""
"Loads the attribute ``co_names[namei]`` from the module found in TOS. The "
"resulting object is pushed onto the stack, to be subsequently stored by a "
"``STORE_FAST`` instruction."
msgstr ""

#: ../../library/dis.rst:692
msgid "Increments bytecode counter by *delta*."
msgstr ""

#: ../../library/dis.rst:697
msgid "If TOS is true, sets the bytecode counter to *target*.  TOS is popped."
msgstr ""

#: ../../library/dis.rst:702
msgid "If TOS is false, sets the bytecode counter to *target*.  TOS is popped."
msgstr ""

#: ../../library/dis.rst:707
msgid ""
"If TOS is true, sets the bytecode counter to *target* and leaves TOS on the "
"stack.  Otherwise (TOS is false), TOS is popped."
msgstr ""

#: ../../library/dis.rst:713
msgid ""
"If TOS is false, sets the bytecode counter to *target* and leaves TOS on the "
"stack.  Otherwise (TOS is true), TOS is popped."
msgstr ""

#: ../../library/dis.rst:719
msgid "Set bytecode counter to *target*."
msgstr ""

#: ../../library/dis.rst:724
msgid ""
"``TOS`` is an :term:`iterator`.  Call its :meth:`!next` method.  If this "
"yields a new value, push it on the stack (leaving the iterator below it).  "
"If the iterator indicates it is exhausted ``TOS`` is popped, and the "
"bytecode counter is incremented by *delta*."
msgstr ""

#: ../../library/dis.rst:732
msgid "Loads the global named ``co_names[namei]`` onto the stack."
msgstr ""

#: ../../library/dis.rst:737
msgid ""
"Pushes a block for a loop onto the block stack.  The block spans from the "
"current instruction with a size of *delta* bytes."
msgstr ""

#: ../../library/dis.rst:743
msgid ""
"Pushes a try block from a try-except clause onto the block stack. *delta* "
"points to the first except block."
msgstr ""

#: ../../library/dis.rst:749
msgid ""
"Pushes a try block from a try-except clause onto the block stack. *delta* "
"points to the finally block."
msgstr ""

#: ../../library/dis.rst:754
msgid ""
"Store a key and value pair in a dictionary.  Pops the key and value while "
"leaving the dictionary on the stack."
msgstr ""

#: ../../library/dis.rst:759
msgid ""
"Pushes a reference to the local ``co_varnames[var_num]`` onto the stack."
msgstr ""

#: ../../library/dis.rst:764
msgid "Stores TOS into the local ``co_varnames[var_num]``."
msgstr ""

#: ../../library/dis.rst:769
msgid "Deletes local ``co_varnames[var_num]``."
msgstr ""

#: ../../library/dis.rst:774
msgid ""
"Pushes a reference to the cell contained in slot *i* of the cell and free "
"variable storage.  The name of the variable is ``co_cellvars[i]`` if *i* is "
"less than the length of *co_cellvars*.  Otherwise it is ``co_freevars[i - "
"len(co_cellvars)]``."
msgstr ""

#: ../../library/dis.rst:782
msgid ""
"Loads the cell contained in slot *i* of the cell and free variable storage. "
"Pushes a reference to the object the cell contains on the stack."
msgstr ""

#: ../../library/dis.rst:788
msgid ""
"Stores TOS into the cell contained in slot *i* of the cell and free variable "
"storage."
msgstr ""

#: ../../library/dis.rst:794
msgid "This opcode is obsolete."
msgstr ""

#: ../../library/dis.rst:799
msgid ""
"Raises an exception. *argc* indicates the number of arguments to the raise "
"statement, ranging from 0 to 3.  The handler will find the traceback as "
"TOS2, the parameter as TOS1, and the exception as TOS."
msgstr ""

#: ../../library/dis.rst:806
msgid ""
"Calls a callable object.  The low byte of *argc* indicates the number of "
"positional arguments, the high byte the number of keyword arguments. The "
"stack contains keyword arguments on top (if any), then the positional "
"arguments below that (if any), then the callable object to call below that. "
"Each keyword argument is represented with two values on the stack: the "
"argument's name, and its value, with the argument's value above the name on "
"the stack. The positional arguments are pushed in the order that they are "
"passed in to the callable object, with the right-most positional argument on "
"top. ``CALL_FUNCTION`` pops all arguments and the callable object off the "
"stack, calls the callable object with those arguments, and pushes the return "
"value returned by the callable object."
msgstr ""

#: ../../library/dis.rst:822
msgid ""
"Pushes a new function object on the stack.  TOS is the code associated with "
"the function.  The function object is defined to have *argc* default "
"parameters, which are found below TOS."
msgstr ""

#: ../../library/dis.rst:829
msgid ""
"Creates a new function object, sets its *func_closure* slot, and pushes it "
"on the stack.  TOS is the code associated with the function, TOS1 the tuple "
"containing cells for the closure's free variables.  The function also has "
"*argc* default parameters, which are found below the cells."
msgstr ""

#: ../../library/dis.rst:839
msgid ""
"Pushes a slice object on the stack.  *argc* must be 2 or 3.  If it is 2, "
"``slice(TOS1, TOS)`` is pushed; if it is 3, ``slice(TOS2, TOS1, TOS)`` is "
"pushed. See the :func:`slice` built-in function for more information."
msgstr ""

#: ../../library/dis.rst:846
msgid ""
"Prefixes any opcode which has an argument too big to fit into the default "
"two bytes.  *ext* holds two additional bytes which, taken together with the "
"subsequent opcode's argument, comprise a four-byte argument, *ext* being the "
"two most-significant bytes."
msgstr ""

#: ../../library/dis.rst:854
msgid ""
"Calls a callable object, similarly to :opcode:`CALL_FUNCTION`. *argc* "
"represents the number of keyword and positional arguments, identically to :"
"opcode:`CALL_FUNCTION`. The top of the stack contains an iterable object "
"containing additional positional arguments. Below that are keyword arguments "
"(if any), positional arguments (if any) and a callable object, identically "
"to :opcode:`CALL_FUNCTION`. Before the callable object is called, the "
"iterable object is \"unpacked\" and its contents are appended to the "
"positional arguments passed in. The iterable object is ignored when "
"computing the value of ``argc``."
msgstr ""

#: ../../library/dis.rst:870
msgid ""
"Calls a callable object, similarly to :opcode:`CALL_FUNCTION`. *argc* "
"represents the number of keyword and positional arguments, identically to :"
"opcode:`CALL_FUNCTION`. The top of the stack contains a mapping object "
"containing additional keyword arguments. Below that are keyword arguments "
"(if any), positional arguments (if any) and a callable object, identically "
"to :opcode:`CALL_FUNCTION`. Before the callable is called, the mapping "
"object at the top of the stack is \"unpacked\" and its contents are appended "
"to the keyword arguments passed in. The mapping object at the top of the "
"stack is ignored when computing the value of ``argc``."
msgstr ""

#: ../../library/dis.rst:885
msgid ""
"Calls a callable object, similarly to :opcode:`CALL_FUNCTION_VAR` and :"
"opcode:`CALL_FUNCTION_KW`. *argc* represents the number of keyword and "
"positional arguments, identically to :opcode:`CALL_FUNCTION`. The top of the "
"stack contains a mapping object, as per :opcode:`CALL_FUNCTION_KW`. Below "
"that is an iterable object, as per :opcode:`CALL_FUNCTION_VAR`. Below that "
"are keyword arguments (if any), positional arguments (if any) and a callable "
"object, identically to :opcode:`CALL_FUNCTION`. Before the callable is "
"called, the mapping object and iterable object are each \"unpacked\" and "
"their contents passed in as keyword and positional arguments respectively, "
"identically to :opcode:`CALL_FUNCTION_VAR` and :opcode:`CALL_FUNCTION_KW`. "
"The mapping object and iterable object are both ignored when computing the "
"value of ``argc``."
msgstr ""

#: ../../library/dis.rst:905
msgid ""
"This is not really an opcode.  It identifies the dividing line between "
"opcodes which don't take arguments ``< HAVE_ARGUMENT`` and those which do "
"``>= HAVE_ARGUMENT``."
msgstr ""
