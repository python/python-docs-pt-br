# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Italo Penaforte <italo.penaforte@gmail.com>, 2019
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-13 03:09+0000\n"
"PO-Revision-Date: 2019-09-01 03:26+0000\n"
"Last-Translator: Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, "
"2019\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../library/dis.rst:2
msgid ":mod:`dis` --- Disassembler for Python bytecode"
msgstr ":mod:`dis` --- Disassembler do bytecode do Python "

#: ../../library/dis.rst:7
msgid "**Source code:** :source:`Lib/dis.py`"
msgstr "**Código Fonte:** :source:`Lib/dis.py`"

#: ../../library/dis.rst:11
msgid ""
"The :mod:`dis` module supports the analysis of CPython :term:`bytecode` by "
"disassembling it. The CPython bytecode which this module takes as an input "
"is defined in the file :file:`Include/opcode.h` and used by the compiler and "
"the interpreter."
msgstr ""
"O módulo :mod:`dis` suporta a análise dos termos :term:`bytecode` CPython, "
"desmontando-o. O bytecode do CPython que o módulo leva como entrada é "
"definido no arquivo arquivoi :file:`Incluir/opcode.h` e usado pelo "
"compilador e pelo intérprete."

#: ../../library/dis.rst:18
msgid ""
"Bytecode is an implementation detail of the CPython interpreter.  No "
"guarantees are made that bytecode will not be added, removed, or changed "
"between versions of Python.  Use of this module should not be considered to "
"work across Python VMs or Python releases."
msgstr ""
"O Bytecode é um detalhe de implementação do intérprete do CPython. Não há "
"garantias de que o bytecode não será adicionado, removido ou alterado entre "
"as versões do Python. O uso deste módulo não deve ser considerado que "
"funcionará em todas as VMs do Python ou mesmo em verões futuras."

#: ../../library/dis.rst:23
msgid ""
"Use 2 bytes for each instruction. Previously the number of bytes varied by "
"instruction."
msgstr ""
"Use 2 bytes para cada instrução. Anteriormente, o número de bytes variava de "
"acordo com as instruções."

#: ../../library/dis.rst:28
msgid "Example: Given the function :func:`myfunc`::"
msgstr "Exemplo: Dada a função :func:`myfunc`::"

#: ../../library/dis.rst:33
msgid ""
"the following command can be used to display the disassembly of :func:"
"`myfunc`::"
msgstr ""
"o seguinte comando pode ser usado para exibir a desmontagem da função :func:"
"`myfunc`::"

#: ../../library/dis.rst:42
msgid "(The \"2\" is a line number)."
msgstr "(O \"2\" é um número da linha)."

#: ../../library/dis.rst:45
msgid "Bytecode analysis"
msgstr "Analise do Bytecode"

#: ../../library/dis.rst:49
msgid ""
"The bytecode analysis API allows pieces of Python code to be wrapped in a :"
"class:`Bytecode` object that provides easy access to details of the compiled "
"code."
msgstr ""
"A API de análise de bytecode permite que partes do código Python sejam "
"Wrapped em um objeto da :class:`Bytecode` que facilite o acesso aos detalhes "
"do código compilado."

#: ../../library/dis.rst:56
msgid ""
"Analyse the bytecode corresponding to a function, generator, asynchronous "
"generator, coroutine, method, string of source code, or a code object (as "
"returned by :func:`compile`)."
msgstr ""
"Analisa o bytecode correspondente a uma função, um gerador, um gerador "
"assíncrono, uma corrotina, um método, uma string de código-fonte, ou um "
"objeto de código (conforme retornado por :func:`compile`)."

#: ../../library/dis.rst:60
msgid ""
"This is a convenience wrapper around many of the functions listed below, "
"most notably :func:`get_instructions`, as iterating over a :class:`Bytecode` "
"instance yields the bytecode operations as :class:`Instruction` instances."
msgstr ""
"Este é um Wrapper de conveniência em torno de muitas das funções listadas "
"abaixo, mais notavelmente a funçõa :func:`get_instructions`, como iterando "
"sobre uma instância :class:`Bytecode` produz as operações bytecode como nas "
"instância :class:`Instruction`."

#: ../../library/dis.rst:64 ../../library/dis.rst:225
msgid ""
"If *first_line* is not ``None``, it indicates the line number that should be "
"reported for the first source line in the disassembled code.  Otherwise, the "
"source line information (if any) is taken directly from the disassembled "
"code object."
msgstr ""
"Se *first_line* não for ``None``, ele indica o número de linha que deve ser "
"reportado para a primeira linha de código-fonte no código desmontado.  Caso "
"contrário, a informação de linha de código-fonte (se houver) é extraída "
"diretamente da desconstrução do objeto de código."

#: ../../library/dis.rst:69
msgid ""
"If *current_offset* is not ``None``, it refers to an instruction offset in "
"the disassembled code. Setting this means :meth:`.dis` will display a "
"\"current instruction\" marker against the specified opcode."
msgstr ""
"Se *current_offset* não for ``None``, ele é um deslocamento em instruções no "
"código desconstruído. Definir este argumento significa que o :meth:`.dis` "
"vai mostrar um marcador de \"instrução atual\" sobre o opcode especificado."

#: ../../library/dis.rst:75
msgid ""
"Construct a :class:`Bytecode` instance from the given traceback, setting "
"*current_offset* to the instruction responsible for the exception."
msgstr ""
"Constrói uma instância de :class:`Bytecode` a partir do traceback fornecido, "
"definindo *current_offset* apontando para a instrução responsável pela "
"exceção."

#: ../../library/dis.rst:80
msgid "The compiled code object."
msgstr "O objeto de código compilado."

#: ../../library/dis.rst:84
msgid "The first source line of the code object (if available)"
msgstr ""
"A primeira linha de código-fonte do objeto de código (caso disponível)."

#: ../../library/dis.rst:88
msgid ""
"Return a formatted view of the bytecode operations (the same as printed by :"
"func:`dis.dis`, but returned as a multi-line string)."
msgstr ""
"Retorna uma visualização formatada das operações em bytecode (as mesmas que "
"seriam impressas pela :func:`dis.dis`, mas retornadas como uma string "
"multilinha)."

#: ../../library/dis.rst:93
msgid ""
"Return a formatted multi-line string with detailed information about the "
"code object, like :func:`code_info`."
msgstr ""
"Retorna uma string multilinha formatada com informação detalhada sobre o "
"objeto de código, como :func:`code_info`."

#: ../../library/dis.rst:96 ../../library/dis.rst:130 ../../library/dis.rst:176
msgid "This can now handle coroutine and asynchronous generator objects."
msgstr ""
"Este método agora lida com objetos de corrotina e de gerador assíncrono."

#: ../../library/dis.rst:99
msgid "Example::"
msgstr "Exemplo::"

#: ../../library/dis.rst:112
msgid "Analysis functions"
msgstr "Funções de análise"

#: ../../library/dis.rst:114
msgid ""
"The :mod:`dis` module also defines the following analysis functions that "
"convert the input directly to the desired output. They can be useful if only "
"a single operation is being performed, so the intermediate analysis object "
"isn't useful:"
msgstr ""
"O módulo :mod:`dis` também define as seguintes funções que convertem a "
"entrada diretamente para a saída desejada. Elas podem ser úteis se somente "
"uma única operação está sendo feita, de forma que o objeto de análise "
"intermediário não é útil:"

#: ../../library/dis.rst:120
msgid ""
"Return a formatted multi-line string with detailed code object information "
"for the supplied function, generator, asynchronous generator, coroutine, "
"method, source code string or code object."
msgstr ""
"Retorna uma string multilinha formatada com informação detalhada sobre o "
"objeto de código correspondente à função, gerador, gerador assíncrono, "
"corrotina, método, string de código-fonte ou objeto de código fornecido."

#: ../../library/dis.rst:124
msgid ""
"Note that the exact contents of code info strings are highly implementation "
"dependent and they may change arbitrarily across Python VMs or Python "
"releases."
msgstr ""
"Observe que o conteúdo exato de strings de informação de código são "
"altamente dependentes da implementação e podem mudar de forma arbitrária "
"através de VMs Python ou lançamentos do Python."

#: ../../library/dis.rst:136
msgid ""
"Print detailed code object information for the supplied function, method, "
"source code string or code object to *file* (or ``sys.stdout`` if *file* is "
"not specified)."
msgstr ""
"Imprime no arquivo *file* (ou ``sys.stdout`` caso *file* não seja "
"especificado) informações detalhadas sobre o objeto de código correspondente "
"à função, método, string de código-fonte fornecido."

#: ../../library/dis.rst:140
msgid ""
"This is a convenient shorthand for ``print(code_info(x), file=file)``, "
"intended for interactive exploration at the interpreter prompt."
msgstr ""
"Este é um atalho conveniente para ``print(code_info(x), file=file)``, "
"destinado à exploração interativa no prompt do interpretador."

#: ../../library/dis.rst:145 ../../library/dis.rst:170
#: ../../library/dis.rst:189 ../../library/dis.rst:213
msgid "Added *file* parameter."
msgstr "Adicionado o parâmetro *file*."

#: ../../library/dis.rst:151
msgid ""
"Disassemble the *x* object.  *x* can denote either a module, a class, a "
"method, a function, a generator, an asynchronous generator, a coroutine, a "
"code object, a string of source code or a byte sequence of raw bytecode. For "
"a module, it disassembles all functions. For a class, it disassembles all "
"methods (including class and static methods). For a code object or sequence "
"of raw bytecode, it prints one line per bytecode instruction. It also "
"recursively disassembles nested code objects (the code of comprehensions, "
"generator expressions and nested functions, and the code used for building "
"nested classes). Strings are first compiled to code objects with the :func:"
"`compile` built-in function before being disassembled.  If no object is "
"provided, this function disassembles the last traceback."
msgstr ""

#: ../../library/dis.rst:164 ../../library/dis.rst:186
#: ../../library/dis.rst:210
msgid ""
"The disassembly is written as text to the supplied *file* argument if "
"provided and to ``sys.stdout`` otherwise."
msgstr ""
"O resultado é escrito como texto no arquivo *file* caso tenha sido fornecido "
"como argumento, ou para ``sys.stdout`` caso contrário."

#: ../../library/dis.rst:167
msgid ""
"The maximal depth of recursion is limited by *depth* unless it is ``None``. "
"``depth=0`` means no recursion."
msgstr ""
"A profundidade máxima de recursão é limitada por *depth* a menos que seja "
"``None``. ``depth=0`` significa não fazer recursão."

#: ../../library/dis.rst:173
msgid "Implemented recursive disassembling and added *depth* parameter."
msgstr ""
"Foi implementada a desmontagem recursiva, e adicionado o parâmetro *depth*."

#: ../../library/dis.rst:182
msgid ""
"Disassemble the top-of-stack function of a traceback, using the last "
"traceback if none was passed.  The instruction causing the exception is "
"indicated."
msgstr ""
"Desmonta a função no topo da pilha de um traceback, usando o último "
"traceback caso nenhum tenha sido passado.  A instrução que causou a exceção "
"é indicada."

#: ../../library/dis.rst:196
msgid ""
"Disassemble a code object, indicating the last instruction if *lasti* was "
"provided.  The output is divided in the following columns:"
msgstr ""
"Desmonta um objeto de código, indicando a última instrução se *lasti* tiver "
"sido fornecido.  A saída é dividida em colunas da seguinte forma:"

#: ../../library/dis.rst:199
msgid "the line number, for the first instruction of each line"
msgstr "o número da linha, para a primeira instrução de cada linha"

#: ../../library/dis.rst:200
msgid "the current instruction, indicated as ``-->``,"
msgstr "a instrução atual, indicada por ``-->``,"

#: ../../library/dis.rst:201
msgid "a labelled instruction, indicated with ``>>``,"
msgstr "um rótulo da instrução, indicado com ``>>``,"

#: ../../library/dis.rst:202
msgid "the address of the instruction,"
msgstr "o endereço da instrução"

#: ../../library/dis.rst:203
msgid "the operation code name,"
msgstr "o nome do código da operação,"

#: ../../library/dis.rst:204
msgid "operation parameters, and"
msgstr "os parâmetros da operação, e"

#: ../../library/dis.rst:205
msgid "interpretation of the parameters in parentheses."
msgstr "a interpretação dos parâmetros, em parênteses."

#: ../../library/dis.rst:207
msgid ""
"The parameter interpretation recognizes local and global variable names, "
"constant values, branch targets, and compare operators."
msgstr ""
"A interpretação dos parâmetros reconhece nomes de variáveis locais e "
"globais, valores de constantes, alvos de ramificações, e operadores de "
"comparação."

#: ../../library/dis.rst:219
msgid ""
"Return an iterator over the instructions in the supplied function, method, "
"source code string or code object."
msgstr ""
"Retorna um iterador sobre as instruções na função, método, string de código-"
"fonte ou objeto de código fornecido."

#: ../../library/dis.rst:222
msgid ""
"The iterator generates a series of :class:`Instruction` named tuples giving "
"the details of each operation in the supplied code."
msgstr ""
"O iterador gera uma série de tuplas nomeadas :class:`Instruction` contendo "
"detalhes de cada operação no código fornecido."

#: ../../library/dis.rst:235
msgid ""
"This generator function uses the ``co_firstlineno`` and ``co_lnotab`` "
"attributes of the code object *code* to find the offsets which are starts of "
"lines in the source code.  They are generated as ``(offset, lineno)`` pairs. "
"See :source:`Objects/lnotab_notes.txt` for the ``co_lnotab`` format and how "
"to decode it."
msgstr ""

#: ../../library/dis.rst:241
msgid "Line numbers can be decreasing. Before, they were always increasing."
msgstr ""
"Números de linhas podem ser decrescentes. Antes, eles eram sempre crescentes."

#: ../../library/dis.rst:247
msgid ""
"Detect all offsets in the raw compiled bytecode string *code* which are jump "
"targets, and return a list of these offsets."
msgstr ""
"Detecta todas as posições na string de bytecode compilado bruto *code* que "
"são alvos de pulos, e as retorna em uma lista."

#: ../../library/dis.rst:253
msgid "Compute the stack effect of *opcode* with argument *oparg*."
msgstr "Calcula o efeito que o *opcode* com argumento *oparg* tem na pilha."

#: ../../library/dis.rst:260
msgid "Python Bytecode Instructions"
msgstr "Instruções em bytecode do Python"

#: ../../library/dis.rst:262
msgid ""
"The :func:`get_instructions` function and :class:`Bytecode` class provide "
"details of bytecode instructions as :class:`Instruction` instances:"
msgstr ""
"A função :func:`get_instructions` e a classe :class:`Bytecode` fornecem "
"detalhes de instruções de bytecode como instâncias de :class:`Instruction`:"

#: ../../library/dis.rst:267
msgid "Details for a bytecode operation"
msgstr "Detalhes de uma operação em bytecode"

#: ../../library/dis.rst:271
msgid ""
"numeric code for operation, corresponding to the opcode values listed below "
"and the bytecode values in the :ref:`opcode_collections`."
msgstr ""
"código numérico da operação, correspondendo aos valores dos opcodes listados "
"abaixo e aos valores dos bytecodes nas :ref:`opcode_collections`."

#: ../../library/dis.rst:277
msgid "human readable name for operation"
msgstr "nome legível por humanos para a operação"

#: ../../library/dis.rst:282
msgid "numeric argument to operation (if any), otherwise ``None``"
msgstr ""
"argumento numérico para a operação (se houver), caso contrário ``None``"

#: ../../library/dis.rst:287
msgid "resolved arg value (if known), otherwise same as arg"
msgstr ""

#: ../../library/dis.rst:292
msgid "human readable description of operation argument"
msgstr ""

#: ../../library/dis.rst:297
msgid "start index of operation within bytecode sequence"
msgstr "índice de início da operação dentro da sequência de bytecodes"

#: ../../library/dis.rst:302
msgid "line started by this opcode (if any), otherwise ``None``"
msgstr ""

#: ../../library/dis.rst:307
msgid "``True`` if other code jumps to here, otherwise ``False``"
msgstr "``True`` se algum outro código pula para cá, senão ``False``"

#: ../../library/dis.rst:312
msgid ""
"The Python compiler currently generates the following bytecode instructions."
msgstr ""
"O compilador de Python atualmente gera as seguintes instruções de bytecode."

#: ../../library/dis.rst:315
msgid "**General instructions**"
msgstr "**Instruções gerais**"

#: ../../library/dis.rst:319
msgid "Do nothing code.  Used as a placeholder by the bytecode optimizer."
msgstr ""

#: ../../library/dis.rst:324
msgid "Removes the top-of-stack (TOS) item."
msgstr ""

#: ../../library/dis.rst:329
msgid "Swaps the two top-most stack items."
msgstr ""

#: ../../library/dis.rst:334
msgid ""
"Lifts second and third stack item one position up, moves top down to "
"position three."
msgstr ""

#: ../../library/dis.rst:340
msgid "Duplicates the reference on top of the stack."
msgstr ""

#: ../../library/dis.rst:347
msgid ""
"Duplicates the two references on top of the stack, leaving them in the same "
"order."
msgstr ""

#: ../../library/dis.rst:353
msgid "**Unary operations**"
msgstr "**Operações unárias**"

#: ../../library/dis.rst:355
msgid ""
"Unary operations take the top of the stack, apply the operation, and push "
"the result back on the stack."
msgstr ""
"Operações unárias tiram o topo da pilha, aplicam a operação, e põem o "
"resultado de volta na pilha."

#: ../../library/dis.rst:360
msgid "Implements ``TOS = +TOS``."
msgstr ""

#: ../../library/dis.rst:365
msgid "Implements ``TOS = -TOS``."
msgstr ""

#: ../../library/dis.rst:370
msgid "Implements ``TOS = not TOS``."
msgstr ""

#: ../../library/dis.rst:375
msgid "Implements ``TOS = ~TOS``."
msgstr "Implementação ``TOS = ~TOS``."

#: ../../library/dis.rst:380
msgid "Implements ``TOS = iter(TOS)``."
msgstr "Implementa ``TOS = iter(TOS)``."

#: ../../library/dis.rst:385
msgid ""
"If ``TOS`` is a :term:`generator iterator` or :term:`coroutine` object it is "
"left as is.  Otherwise, implements ``TOS = iter(TOS)``."
msgstr ""

#: ../../library/dis.rst:391
msgid "**Binary operations**"
msgstr "**Operações Binárias**"

#: ../../library/dis.rst:393
msgid ""
"Binary operations remove the top of the stack (TOS) and the second top-most "
"stack item (TOS1) from the stack.  They perform the operation, and put the "
"result back on the stack."
msgstr ""

#: ../../library/dis.rst:399
msgid "Implements ``TOS = TOS1 ** TOS``."
msgstr "Implementa ``TOS = TOS1 ** TOS``."

#: ../../library/dis.rst:404
msgid "Implements ``TOS = TOS1 * TOS``."
msgstr ""

#: ../../library/dis.rst:409
msgid "Implements ``TOS = TOS1 @ TOS``."
msgstr "Implementado ``TOS = TOS1 @ TOS``."

#: ../../library/dis.rst:416
msgid "Implements ``TOS = TOS1 // TOS``."
msgstr "Implementa ``TOS = TOS1 // TOS``."

#: ../../library/dis.rst:421
msgid "Implements ``TOS = TOS1 / TOS``."
msgstr "Implementa ``TOS = TOS1 / TOS``."

#: ../../library/dis.rst:426
msgid "Implements ``TOS = TOS1 % TOS``."
msgstr "Implementa ``TOS = TOS1 % TOS``."

#: ../../library/dis.rst:431
msgid "Implements ``TOS = TOS1 + TOS``."
msgstr ""

#: ../../library/dis.rst:436
msgid "Implements ``TOS = TOS1 - TOS``."
msgstr ""

#: ../../library/dis.rst:441
msgid "Implements ``TOS = TOS1[TOS]``."
msgstr ""

#: ../../library/dis.rst:446
msgid "Implements ``TOS = TOS1 << TOS``."
msgstr ""

#: ../../library/dis.rst:451
msgid "Implements ``TOS = TOS1 >> TOS``."
msgstr ""

#: ../../library/dis.rst:456
msgid "Implements ``TOS = TOS1 & TOS``."
msgstr ""

#: ../../library/dis.rst:461
msgid "Implements ``TOS = TOS1 ^ TOS``."
msgstr ""

#: ../../library/dis.rst:466
msgid "Implements ``TOS = TOS1 | TOS``."
msgstr ""

#: ../../library/dis.rst:469
msgid "**In-place operations**"
msgstr ""

#: ../../library/dis.rst:471
msgid ""
"In-place operations are like binary operations, in that they remove TOS and "
"TOS1, and push the result back on the stack, but the operation is done in-"
"place when TOS1 supports it, and the resulting TOS may be (but does not have "
"to be) the original TOS1."
msgstr ""

#: ../../library/dis.rst:478
msgid "Implements in-place ``TOS = TOS1 ** TOS``."
msgstr ""

#: ../../library/dis.rst:483
msgid "Implements in-place ``TOS = TOS1 * TOS``."
msgstr ""

#: ../../library/dis.rst:488
msgid "Implements in-place ``TOS = TOS1 @ TOS``."
msgstr ""

#: ../../library/dis.rst:495
msgid "Implements in-place ``TOS = TOS1 // TOS``."
msgstr ""

#: ../../library/dis.rst:500
msgid "Implements in-place ``TOS = TOS1 / TOS``."
msgstr ""

#: ../../library/dis.rst:505
msgid "Implements in-place ``TOS = TOS1 % TOS``."
msgstr ""

#: ../../library/dis.rst:510
msgid "Implements in-place ``TOS = TOS1 + TOS``."
msgstr ""

#: ../../library/dis.rst:515
msgid "Implements in-place ``TOS = TOS1 - TOS``."
msgstr ""

#: ../../library/dis.rst:520
msgid "Implements in-place ``TOS = TOS1 << TOS``."
msgstr ""

#: ../../library/dis.rst:525
msgid "Implements in-place ``TOS = TOS1 >> TOS``."
msgstr ""

#: ../../library/dis.rst:530
msgid "Implements in-place ``TOS = TOS1 & TOS``."
msgstr ""

#: ../../library/dis.rst:535
msgid "Implements in-place ``TOS = TOS1 ^ TOS``."
msgstr ""

#: ../../library/dis.rst:540
msgid "Implements in-place ``TOS = TOS1 | TOS``."
msgstr ""

#: ../../library/dis.rst:545
msgid "Implements ``TOS1[TOS] = TOS2``."
msgstr ""

#: ../../library/dis.rst:550
msgid "Implements ``del TOS1[TOS]``."
msgstr ""

#: ../../library/dis.rst:553
msgid "**Coroutine opcodes**"
msgstr "**Opcodes para corrotinas**"

#: ../../library/dis.rst:557
msgid ""
"Implements ``TOS = get_awaitable(TOS)``, where ``get_awaitable(o)`` returns "
"``o`` if ``o`` is a coroutine object or a generator object with the "
"CO_ITERABLE_COROUTINE flag, or resolves ``o.__await__``."
msgstr ""

#: ../../library/dis.rst:567
msgid "Implements ``TOS = TOS.__aiter__()``."
msgstr ""

#: ../../library/dis.rst:570
msgid "Returning awaitable objects from ``__aiter__`` is no longer supported."
msgstr "Não é mais aceitado que o ``__aiter__`` retorne objetos aguardáveis."

#: ../../library/dis.rst:577
msgid ""
"Implements ``PUSH(get_awaitable(TOS.__anext__()))``.  See ``GET_AWAITABLE`` "
"for details about ``get_awaitable``"
msgstr ""

#: ../../library/dis.rst:585
msgid ""
"Resolves ``__aenter__`` and ``__aexit__`` from the object on top of the "
"stack.  Pushes ``__aexit__`` and result of ``__aenter__()`` to the stack."
msgstr ""

#: ../../library/dis.rst:593
msgid "Creates a new frame object."
msgstr ""

#: ../../library/dis.rst:599
msgid "**Miscellaneous opcodes**"
msgstr "**Opcodes genéricos**"

#: ../../library/dis.rst:603
msgid ""
"Implements the expression statement for the interactive mode.  TOS is "
"removed from the stack and printed.  In non-interactive mode, an expression "
"statement is terminated with :opcode:`POP_TOP`."
msgstr ""

#: ../../library/dis.rst:610
msgid "Terminates a loop due to a :keyword:`break` statement."
msgstr ""

#: ../../library/dis.rst:615
msgid ""
"Continues a loop due to a :keyword:`continue` statement.  *target* is the "
"address to jump to (which should be a :opcode:`FOR_ITER` instruction)."
msgstr ""

#: ../../library/dis.rst:621
msgid ""
"Calls ``set.add(TOS1[-i], TOS)``.  Used to implement set comprehensions."
msgstr ""

#: ../../library/dis.rst:626
msgid ""
"Calls ``list.append(TOS[-i], TOS)``.  Used to implement list comprehensions."
msgstr ""

#: ../../library/dis.rst:631
msgid ""
"Calls ``dict.setitem(TOS1[-i], TOS, TOS1)``.  Used to implement dict "
"comprehensions."
msgstr ""

#: ../../library/dis.rst:636
msgid ""
"For all of the :opcode:`SET_ADD`, :opcode:`LIST_APPEND` and :opcode:"
"`MAP_ADD` instructions, while the added value or key/value pair is popped "
"off, the container object remains on the stack so that it is available for "
"further iterations of the loop."
msgstr ""
"Para as instruções :opcode:`SET_ADD`, :opcode:`LIST_APPEND` e :opcode:"
"`MAP_ADD`, o valor ou par chave/valor é removido da pilha, mas o objeto de "
"contêiner continua na pilha para que ele esteja disponível para as iterações "
"seguintes do laço."

#: ../../library/dis.rst:644
msgid "Returns with TOS to the caller of the function."
msgstr ""

#: ../../library/dis.rst:649
msgid "Pops TOS and yields it from a :term:`generator`."
msgstr ""

#: ../../library/dis.rst:654
msgid "Pops TOS and delegates to it as a subiterator from a :term:`generator`."
msgstr ""

#: ../../library/dis.rst:661
msgid ""
"Checks whether ``__annotations__`` is defined in ``locals()``, if not it is "
"set up to an empty ``dict``. This opcode is only emitted if a class or "
"module body contains :term:`variable annotations <variable annotation>` "
"statically."
msgstr ""
"Verifica se ``__annotations__`` está definido em ``locals()`` e, se não "
"estiver, é inicializado como um ``dict`` vazio. Este opcode é emitido "
"somente se o corpo de uma classe ou módulo contém :term:`anotações de "
"variáveis <anotação de variável>` estaticamente."

#: ../../library/dis.rst:671
msgid ""
"Loads all symbols not starting with ``'_'`` directly from the module TOS to "
"the local namespace. The module is popped after loading all names. This "
"opcode implements ``from module import *``."
msgstr ""

#: ../../library/dis.rst:678
msgid ""
"Removes one block from the block stack.  Per frame, there is a stack of "
"blocks, denoting nested loops, try statements, and such."
msgstr ""

#: ../../library/dis.rst:684
msgid ""
"Removes one block from the block stack. The popped block must be an "
"exception handler block, as implicitly created when entering an except "
"handler.  In addition to popping extraneous values from the frame stack, the "
"last three popped values are used to restore the exception state."
msgstr ""

#: ../../library/dis.rst:692
msgid ""
"Terminates a :keyword:`finally` clause.  The interpreter recalls whether the "
"exception has to be re-raised, or whether the function returns, and "
"continues with the outer-next block."
msgstr ""

#: ../../library/dis.rst:699
msgid ""
"Pushes :func:`builtins.__build_class__` onto the stack.  It is later called "
"by :opcode:`CALL_FUNCTION` to construct a class."
msgstr ""

#: ../../library/dis.rst:705
msgid ""
"This opcode performs several operations before a with block starts.  First, "
"it loads :meth:`~object.__exit__` from the context manager and pushes it "
"onto the stack for later use by :opcode:`WITH_CLEANUP`.  Then, :meth:"
"`~object.__enter__` is called, and a finally block pointing to *delta* is "
"pushed.  Finally, the result of calling the enter method is pushed onto the "
"stack.  The next opcode will either ignore it (:opcode:`POP_TOP`), or store "
"it in (a) variable(s) (:opcode:`STORE_FAST`, :opcode:`STORE_NAME`, or :"
"opcode:`UNPACK_SEQUENCE`)."
msgstr ""

#: ../../library/dis.rst:719
msgid ""
"Cleans up the stack when a :keyword:`with` statement block exits.  TOS is "
"the context manager's :meth:`__exit__` bound method. Below TOS are 1--3 "
"values indicating how/why the finally clause was entered:"
msgstr ""

#: ../../library/dis.rst:723
msgid "SECOND = ``None``"
msgstr ""

#: ../../library/dis.rst:724
msgid "(SECOND, THIRD) = (``WHY_{RETURN,CONTINUE}``), retval"
msgstr ""

#: ../../library/dis.rst:725
msgid "SECOND = ``WHY_*``; no retval below it"
msgstr ""

#: ../../library/dis.rst:726
msgid "(SECOND, THIRD, FOURTH) = exc_info()"
msgstr "(SECOND, THIRD, FOURTH) = exc_info()"

#: ../../library/dis.rst:728
msgid ""
"In the last case, ``TOS(SECOND, THIRD, FOURTH)`` is called, otherwise "
"``TOS(None, None, None)``.  Pushes SECOND and result of the call to the "
"stack."
msgstr ""

#: ../../library/dis.rst:735
msgid "Pops exception type and result of 'exit' function call from the stack."
msgstr ""

#: ../../library/dis.rst:737
msgid ""
"If the stack represents an exception, *and* the function call returns a "
"'true' value, this information is \"zapped\" and replaced with a single "
"``WHY_SILENCED`` to prevent :opcode:`END_FINALLY` from re-raising the "
"exception.  (But non-local gotos will still be resumed.)"
msgstr ""

#: ../../library/dis.rst:745
msgid "All of the following opcodes use their arguments."
msgstr ""

#: ../../library/dis.rst:749
msgid ""
"Implements ``name = TOS``. *namei* is the index of *name* in the attribute :"
"attr:`co_names` of the code object. The compiler tries to use :opcode:"
"`STORE_FAST` or :opcode:`STORE_GLOBAL` if possible."
msgstr ""

#: ../../library/dis.rst:756
msgid ""
"Implements ``del name``, where *namei* is the index into :attr:`co_names` "
"attribute of the code object."
msgstr ""

#: ../../library/dis.rst:762
msgid ""
"Unpacks TOS into *count* individual values, which are put onto the stack "
"right-to-left."
msgstr ""

#: ../../library/dis.rst:768
msgid ""
"Implements assignment with a starred target: Unpacks an iterable in TOS into "
"individual values, where the total number of values can be smaller than the "
"number of items in the iterable: one of the new values will be a list of all "
"leftover items."
msgstr ""

#: ../../library/dis.rst:773
msgid ""
"The low byte of *counts* is the number of values before the list value, the "
"high byte of *counts* the number of values after it.  The resulting values "
"are put onto the stack right-to-left."
msgstr ""

#: ../../library/dis.rst:780
msgid ""
"Implements ``TOS.name = TOS1``, where *namei* is the index of name in :attr:"
"`co_names`."
msgstr ""

#: ../../library/dis.rst:786
msgid ""
"Implements ``del TOS.name``, using *namei* as index into :attr:`co_names`."
msgstr ""

#: ../../library/dis.rst:791
msgid "Works as :opcode:`STORE_NAME`, but stores the name as a global."
msgstr ""
"Funciona como o :opcode:`STORE_NAME`, mas o nome é armazenado com um nome "
"global."

#: ../../library/dis.rst:796
msgid "Works as :opcode:`DELETE_NAME`, but deletes a global name."
msgstr "Funciona como o :opcode:`DELETE_NAME`, mas deleta um nome global."

#: ../../library/dis.rst:801
msgid "Pushes ``co_consts[consti]`` onto the stack."
msgstr "Põe ``co_consts[consti]`` no topo da pilha."

#: ../../library/dis.rst:806
msgid "Pushes the value associated with ``co_names[namei]`` onto the stack."
msgstr ""

#: ../../library/dis.rst:811
msgid ""
"Creates a tuple consuming *count* items from the stack, and pushes the "
"resulting tuple onto the stack."
msgstr ""

#: ../../library/dis.rst:817
msgid "Works as :opcode:`BUILD_TUPLE`, but creates a list."
msgstr ""

#: ../../library/dis.rst:822
msgid "Works as :opcode:`BUILD_TUPLE`, but creates a set."
msgstr ""

#: ../../library/dis.rst:827
msgid ""
"Pushes a new dictionary object onto the stack.  Pops ``2 * count`` items so "
"that the dictionary holds *count* entries: ``{..., TOS3: TOS2, TOS1: TOS}``."
msgstr ""

#: ../../library/dis.rst:831
msgid ""
"The dictionary is created from stack items instead of creating an empty "
"dictionary pre-sized to hold *count* items."
msgstr ""

#: ../../library/dis.rst:838
msgid ""
"The version of :opcode:`BUILD_MAP` specialized for constant keys. Pops the "
"top element on the stack which contains a tuple of keys, then starting from "
"``TOS1``, pops *count* values to form values in the built dictionary."
msgstr ""

#: ../../library/dis.rst:847
msgid ""
"Concatenates *count* strings from the stack and pushes the resulting string "
"onto the stack."
msgstr ""

#: ../../library/dis.rst:855
msgid ""
"Pops *count* iterables from the stack, joins them in a single tuple, and "
"pushes the result.  Implements iterable unpacking in tuple displays ``(*x, "
"*y, *z)``."
msgstr ""

#: ../../library/dis.rst:864
msgid ""
"This is similar to :opcode:`BUILD_TUPLE_UNPACK`, but is used for ``f(*x, *y, "
"*z)`` call syntax. The stack item at position ``count + 1`` should be the "
"corresponding callable ``f``."
msgstr ""

#: ../../library/dis.rst:873
msgid ""
"This is similar to :opcode:`BUILD_TUPLE_UNPACK`, but pushes a list instead "
"of tuple.  Implements iterable unpacking in list displays ``[*x, *y, *z]``."
msgstr ""

#: ../../library/dis.rst:882
msgid ""
"This is similar to :opcode:`BUILD_TUPLE_UNPACK`, but pushes a set instead of "
"tuple.  Implements iterable unpacking in set displays ``{*x, *y, *z}``."
msgstr ""

#: ../../library/dis.rst:891
msgid ""
"Pops *count* mappings from the stack, merges them into a single dictionary, "
"and pushes the result.  Implements dictionary unpacking in dictionary "
"displays ``{**x, **y, **z}``."
msgstr ""

#: ../../library/dis.rst:900
msgid ""
"This is similar to :opcode:`BUILD_MAP_UNPACK`, but is used for ``f(**x, **y, "
"**z)`` call syntax.  The stack item at position ``count + 2`` should be the "
"corresponding callable ``f``."
msgstr ""

#: ../../library/dis.rst:905
msgid ""
"The position of the callable is determined by adding 2 to the opcode "
"argument instead of encoding it in the second byte of the argument."
msgstr ""

#: ../../library/dis.rst:912
msgid "Replaces TOS with ``getattr(TOS, co_names[namei])``."
msgstr ""

#: ../../library/dis.rst:917
msgid ""
"Performs a Boolean operation.  The operation name can be found in "
"``cmp_op[opname]``."
msgstr ""

#: ../../library/dis.rst:923
msgid ""
"Imports the module ``co_names[namei]``.  TOS and TOS1 are popped and provide "
"the *fromlist* and *level* arguments of :func:`__import__`.  The module "
"object is pushed onto the stack.  The current namespace is not affected: for "
"a proper import statement, a subsequent :opcode:`STORE_FAST` instruction "
"modifies the namespace."
msgstr ""

#: ../../library/dis.rst:932
msgid ""
"Loads the attribute ``co_names[namei]`` from the module found in TOS. The "
"resulting object is pushed onto the stack, to be subsequently stored by a :"
"opcode:`STORE_FAST` instruction."
msgstr ""

#: ../../library/dis.rst:939
msgid "Increments bytecode counter by *delta*."
msgstr ""

#: ../../library/dis.rst:944
msgid "If TOS is true, sets the bytecode counter to *target*.  TOS is popped."
msgstr ""

#: ../../library/dis.rst:951
msgid "If TOS is false, sets the bytecode counter to *target*.  TOS is popped."
msgstr ""

#: ../../library/dis.rst:958
msgid ""
"If TOS is true, sets the bytecode counter to *target* and leaves TOS on the "
"stack.  Otherwise (TOS is false), TOS is popped."
msgstr ""

#: ../../library/dis.rst:966
msgid ""
"If TOS is false, sets the bytecode counter to *target* and leaves TOS on the "
"stack.  Otherwise (TOS is true), TOS is popped."
msgstr ""

#: ../../library/dis.rst:974
msgid "Set bytecode counter to *target*."
msgstr ""

#: ../../library/dis.rst:979
msgid ""
"TOS is an :term:`iterator`.  Call its :meth:`~iterator.__next__` method.  If "
"this yields a new value, push it on the stack (leaving the iterator below "
"it).  If the iterator indicates it is exhausted TOS is popped, and the byte "
"code counter is incremented by *delta*."
msgstr ""

#: ../../library/dis.rst:987
msgid "Loads the global named ``co_names[namei]`` onto the stack."
msgstr ""

#: ../../library/dis.rst:992
msgid ""
"Pushes a block for a loop onto the block stack.  The block spans from the "
"current instruction with a size of *delta* bytes."
msgstr ""

#: ../../library/dis.rst:998
msgid ""
"Pushes a try block from a try-except clause onto the block stack. *delta* "
"points to the first except block."
msgstr ""

#: ../../library/dis.rst:1004
msgid ""
"Pushes a try block from a try-except clause onto the block stack. *delta* "
"points to the finally block."
msgstr ""

#: ../../library/dis.rst:1010
msgid ""
"Pushes a reference to the local ``co_varnames[var_num]`` onto the stack."
msgstr ""

#: ../../library/dis.rst:1015
msgid "Stores TOS into the local ``co_varnames[var_num]``."
msgstr ""

#: ../../library/dis.rst:1020
msgid "Deletes local ``co_varnames[var_num]``."
msgstr ""

#: ../../library/dis.rst:1025
msgid ""
"Pushes a reference to the cell contained in slot *i* of the cell and free "
"variable storage.  The name of the variable is ``co_cellvars[i]`` if *i* is "
"less than the length of *co_cellvars*.  Otherwise it is ``co_freevars[i - "
"len(co_cellvars)]``."
msgstr ""

#: ../../library/dis.rst:1033
msgid ""
"Loads the cell contained in slot *i* of the cell and free variable storage. "
"Pushes a reference to the object the cell contains on the stack."
msgstr ""

#: ../../library/dis.rst:1039
msgid ""
"Much like :opcode:`LOAD_DEREF` but first checks the locals dictionary before "
"consulting the cell.  This is used for loading free variables in class "
"bodies."
msgstr ""

#: ../../library/dis.rst:1048
msgid ""
"Stores TOS into the cell contained in slot *i* of the cell and free variable "
"storage."
msgstr ""

#: ../../library/dis.rst:1054
msgid ""
"Empties the cell contained in slot *i* of the cell and free variable "
"storage. Used by the :keyword:`del` statement."
msgstr ""

#: ../../library/dis.rst:1062
msgid ""
"Raises an exception using one of the 3 forms of the ``raise`` statement, "
"depending on the value of *argc*:"
msgstr ""

#: ../../library/dis.rst:1065
msgid "0: ``raise`` (re-raise previous exception)"
msgstr ""

#: ../../library/dis.rst:1066
msgid "1: ``raise TOS`` (raise exception instance or type at ``TOS``)"
msgstr ""

#: ../../library/dis.rst:1067
msgid ""
"2: ``raise TOS1 from TOS`` (raise exception instance or type at ``TOS1`` "
"with ``__cause__`` set to ``TOS``)"
msgstr ""

#: ../../library/dis.rst:1073
msgid ""
"Calls a callable object with positional arguments. *argc* indicates the "
"number of positional arguments. The top of the stack contains positional "
"arguments, with the right-most argument on top.  Below the arguments is a "
"callable object to call. ``CALL_FUNCTION`` pops all arguments and the "
"callable object off the stack, calls the callable object with those "
"arguments, and pushes the return value returned by the callable object."
msgstr ""

#: ../../library/dis.rst:1081
msgid "This opcode is used only for calls with positional arguments."
msgstr ""

#: ../../library/dis.rst:1087
msgid ""
"Calls a callable object with positional (if any) and keyword arguments. "
"*argc* indicates the total number of positional and keyword arguments. The "
"top element on the stack contains a tuple of keyword argument names. Below "
"that are keyword arguments in the order corresponding to the tuple. Below "
"that are positional arguments, with the right-most parameter on top.  Below "
"the arguments is a callable object to call. ``CALL_FUNCTION_KW`` pops all "
"arguments and the callable object off the stack, calls the callable object "
"with those arguments, and pushes the return value returned by the callable "
"object."
msgstr ""

#: ../../library/dis.rst:1097
msgid ""
"Keyword arguments are packed in a tuple instead of a dictionary, *argc* "
"indicates the total number of arguments."
msgstr ""

#: ../../library/dis.rst:1104
msgid ""
"Calls a callable object with variable set of positional and keyword "
"arguments.  If the lowest bit of *flags* is set, the top of the stack "
"contains a mapping object containing additional keyword arguments. Below "
"that is an iterable object containing positional arguments and a callable "
"object to call.  :opcode:`BUILD_MAP_UNPACK_WITH_CALL` and :opcode:"
"`BUILD_TUPLE_UNPACK_WITH_CALL` can be used for merging multiple mapping "
"objects and iterables containing arguments. Before the callable is called, "
"the mapping object and iterable object are each \"unpacked\" and their "
"contents passed in as keyword and positional arguments respectively. "
"``CALL_FUNCTION_EX`` pops all arguments and the callable object off the "
"stack, calls the callable object with those arguments, and pushes the return "
"value returned by the callable object."
msgstr ""

#: ../../library/dis.rst:1123
msgid ""
"Loads a method named ``co_names[namei]`` from the TOS object. TOS is popped. "
"This bytecode distinguishes two cases: if TOS has a method with the correct "
"name, the bytecode pushes the unbound method and TOS. TOS will be used as "
"the first argument (``self``) by :opcode:`CALL_METHOD` when calling the "
"unbound method. Otherwise, ``NULL`` and the object return by the attribute "
"lookup are pushed."
msgstr ""

#: ../../library/dis.rst:1135
msgid ""
"Calls a method.  *argc* is the number of positional arguments. Keyword "
"arguments are not supported.  This opcode is designed to be used with :"
"opcode:`LOAD_METHOD`.  Positional arguments are on top of the stack. Below "
"them, the two items described in :opcode:`LOAD_METHOD` are on the stack "
"(either ``self`` and an unbound method object or ``NULL`` and an arbitrary "
"callable). All of them are popped and the return value is pushed."
msgstr ""

#: ../../library/dis.rst:1147
msgid ""
"Pushes a new function object on the stack.  From bottom to top, the consumed "
"stack must consist of values if the argument carries a specified flag value"
msgstr ""

#: ../../library/dis.rst:1150
msgid ""
"``0x01`` a tuple of default values for positional-only and positional-or-"
"keyword parameters in positional order"
msgstr ""

#: ../../library/dis.rst:1152
msgid "``0x02`` a dictionary of keyword-only parameters' default values"
msgstr ""

#: ../../library/dis.rst:1153
msgid "``0x04`` an annotation dictionary"
msgstr ""

#: ../../library/dis.rst:1154
msgid "``0x08`` a tuple containing cells for free variables, making a closure"
msgstr ""

#: ../../library/dis.rst:1155
msgid "the code associated with the function (at TOS1)"
msgstr ""

#: ../../library/dis.rst:1156
msgid "the :term:`qualified name` of the function (at TOS)"
msgstr ""

#: ../../library/dis.rst:1163
msgid ""
"Pushes a slice object on the stack.  *argc* must be 2 or 3.  If it is 2, "
"``slice(TOS1, TOS)`` is pushed; if it is 3, ``slice(TOS2, TOS1, TOS)`` is "
"pushed. See the :func:`slice` built-in function for more information."
msgstr ""

#: ../../library/dis.rst:1170
msgid ""
"Prefixes any opcode which has an argument too big to fit into the default "
"one byte. *ext* holds an additional byte which act as higher bits in the "
"argument. For each opcode, at most three prefixal ``EXTENDED_ARG`` are "
"allowed, forming an argument from two-byte to four-byte."
msgstr ""

#: ../../library/dis.rst:1178
msgid ""
"Used for implementing formatted literal strings (f-strings).  Pops an "
"optional *fmt_spec* from the stack, then a required *value*. *flags* is "
"interpreted as follows:"
msgstr ""

#: ../../library/dis.rst:1182
msgid "``(flags & 0x03) == 0x00``: *value* is formatted as-is."
msgstr ""

#: ../../library/dis.rst:1183
msgid ""
"``(flags & 0x03) == 0x01``: call :func:`str` on *value* before formatting it."
msgstr ""

#: ../../library/dis.rst:1185
msgid ""
"``(flags & 0x03) == 0x02``: call :func:`repr` on *value* before formatting "
"it."
msgstr ""

#: ../../library/dis.rst:1187
msgid ""
"``(flags & 0x03) == 0x03``: call :func:`ascii` on *value* before formatting "
"it."
msgstr ""

#: ../../library/dis.rst:1189
msgid ""
"``(flags & 0x04) == 0x04``: pop *fmt_spec* from the stack and use it, else "
"use an empty *fmt_spec*."
msgstr ""

#: ../../library/dis.rst:1192
msgid ""
"Formatting is performed using :c:func:`PyObject_Format`.  The result is "
"pushed on the stack."
msgstr ""

#: ../../library/dis.rst:1200
msgid ""
"This is not really an opcode.  It identifies the dividing line between "
"opcodes which don't use their argument and those that do (``< "
"HAVE_ARGUMENT`` and ``>= HAVE_ARGUMENT``, respectively)."
msgstr ""

#: ../../library/dis.rst:1204
msgid ""
"Now every instruction has an argument, but opcodes ``< HAVE_ARGUMENT`` "
"ignore it. Before, only opcodes ``>= HAVE_ARGUMENT`` had an argument."
msgstr ""

#: ../../library/dis.rst:1212
msgid "Opcode collections"
msgstr ""

#: ../../library/dis.rst:1214
msgid ""
"These collections are provided for automatic introspection of bytecode "
"instructions:"
msgstr ""

#: ../../library/dis.rst:1219
msgid "Sequence of operation names, indexable using the bytecode."
msgstr ""

#: ../../library/dis.rst:1224
msgid "Dictionary mapping operation names to bytecodes."
msgstr ""

#: ../../library/dis.rst:1229
msgid "Sequence of all compare operation names."
msgstr ""

#: ../../library/dis.rst:1234
msgid "Sequence of bytecodes that access a constant."
msgstr ""

#: ../../library/dis.rst:1239
msgid ""
"Sequence of bytecodes that access a free variable (note that 'free' in this "
"context refers to names in the current scope that are referenced by inner "
"scopes or names in outer scopes that are referenced from this scope.  It "
"does *not* include references to global or builtin scopes)."
msgstr ""

#: ../../library/dis.rst:1247
msgid "Sequence of bytecodes that access an attribute by name."
msgstr ""

#: ../../library/dis.rst:1252
msgid "Sequence of bytecodes that have a relative jump target."
msgstr ""

#: ../../library/dis.rst:1257
msgid "Sequence of bytecodes that have an absolute jump target."
msgstr ""

#: ../../library/dis.rst:1262
msgid "Sequence of bytecodes that access a local variable."
msgstr ""

#: ../../library/dis.rst:1267
msgid "Sequence of bytecodes of Boolean operations."
msgstr ""
