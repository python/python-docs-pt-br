# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-01 14:52+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/argparse.rst:2
msgid ""
":mod:`!argparse` --- Parser for command-line options, arguments and "
"subcommands"
msgstr ""

#: ../../library/argparse.rst:12
msgid "**Source code:** :source:`Lib/argparse.py`"
msgstr "**Código-fonte:** :source:`Lib/argparse.py`"

#: ../../library/argparse.rst-1
msgid "Tutorial"
msgstr "Tutorial"

#: ../../library/argparse.rst:18
msgid ""
"This page contains the API reference information. For a more gentle "
"introduction to Python command-line parsing, have a look at the :ref:"
"`argparse tutorial <argparse-tutorial>`."
msgstr ""
"Esta página contém informações da API de Referência. Para uma introdução "
"mais prática para o parser de linha de comando Python, acesse o :ref:"
"`tutorial do argparse <argparse-tutorial>`."

#: ../../library/argparse.rst:22
msgid ""
"The :mod:`!argparse` module makes it easy to write user-friendly command-"
"line interfaces. The program defines what arguments it requires, and :mod:`!"
"argparse` will figure out how to parse those out of :data:`sys.argv`.  The :"
"mod:`!argparse` module also automatically generates help and usage "
"messages.  The module will also issue errors when users give the program "
"invalid arguments."
msgstr ""

#: ../../library/argparse.rst:28
msgid ""
"The :mod:`!argparse` module's support for command-line interfaces is built "
"around an instance of :class:`argparse.ArgumentParser`.  It is a container "
"for argument specifications and has options that apply to the parser as "
"whole::"
msgstr ""

#: ../../library/argparse.rst:32
msgid ""
"parser = argparse.ArgumentParser(\n"
"                    prog='ProgramName',\n"
"                    description='What the program does',\n"
"                    epilog='Text at the bottom of help')"
msgstr ""

#: ../../library/argparse.rst:37
msgid ""
"The :meth:`ArgumentParser.add_argument` method attaches individual argument "
"specifications to the parser.  It supports positional arguments, options "
"that accept values, and on/off flags::"
msgstr ""
"O método :meth:`ArgumentParser.add_argument` anexa especificações de "
"argumentos individuais ao analisador. Ele oferece suporte a argumentos "
"posicionais, opções que aceitam valores e sinalizadores liga/desliga::"

#: ../../library/argparse.rst:41
msgid ""
"parser.add_argument('filename')           # positional argument\n"
"parser.add_argument('-c', '--count')      # option that takes a value\n"
"parser.add_argument('-v', '--verbose',\n"
"                    action='store_true')  # on/off flag"
msgstr ""

#: ../../library/argparse.rst:46
msgid ""
"The :meth:`ArgumentParser.parse_args` method runs the parser and places the "
"extracted data in a :class:`argparse.Namespace` object::"
msgstr ""
"O método :meth:`ArgumentParser.parse_args` executa o analisador e coloca os "
"dados extraídos em um objeto :class:`argparse.Namespace`::"

#: ../../library/argparse.rst:49
msgid ""
"args = parser.parse_args()\n"
"print(args.filename, args.count, args.verbose)"
msgstr ""

#: ../../library/argparse.rst:53
msgid ""
"If you're looking for a guide about how to upgrade :mod:`optparse` code to :"
"mod:`!argparse`, see :ref:`Upgrading Optparse Code <upgrading-optparse-"
"code>`."
msgstr ""

#: ../../library/argparse.rst:57
msgid "ArgumentParser objects"
msgstr "Objetos ArgumentParser"

#: ../../library/argparse.rst:66
msgid ""
"Create a new :class:`ArgumentParser` object. All parameters should be passed "
"as keyword arguments. Each parameter has its own more detailed description "
"below, but in short they are:"
msgstr ""
"Cria um novo objeto :class:`ArgumentParser`. Todos os parâmetros devem ser "
"passados como argumentos nomeados. Cada parâmetro tem sua própria descrição "
"mais detalhada abaixo, mas em resumo eles são:"

#: ../../library/argparse.rst:70
msgid ""
"prog_ - The name of the program (default: ``os.path.basename(sys.argv[0])``)"
msgstr "prog_ - O nome do programa (padrão: ``os.path.basename(sys.argv[0])``)"

#: ../../library/argparse.rst:73
msgid ""
"usage_ - The string describing the program usage (default: generated from "
"arguments added to parser)"
msgstr ""
"usage_ - A string que descreve o uso do programa (padrão: gerado a partir de "
"argumentos adicionados ao analisador sintático)"

#: ../../library/argparse.rst:76
msgid ""
"description_ - Text to display before the argument help (by default, no text)"
msgstr ""
"description_ - Texto para exibir antes da ajuda dos argumentos (por padrão, "
"nenhum texto)"

#: ../../library/argparse.rst:79
msgid "epilog_ - Text to display after the argument help (by default, no text)"
msgstr ""
"epilog_ - Texto para exibir após da ajuda dos argumentos (por padrão, nenhum "
"texto)"

#: ../../library/argparse.rst:81
msgid ""
"parents_ - A list of :class:`ArgumentParser` objects whose arguments should "
"also be included"
msgstr ""
"parents_ - Uma lista de objetos :class:`ArgumentParser` cujos argumentos "
"também devem ser incluídos"

#: ../../library/argparse.rst:84
msgid "formatter_class_ - A class for customizing the help output"
msgstr "formatter_class_ - Uma classe para personalizar a saída de ajuda"

#: ../../library/argparse.rst:86
msgid ""
"prefix_chars_ - The set of characters that prefix optional arguments "
"(default: '-')"
msgstr ""
"prefix_chars_ - O conjunto de caracteres que prefixam argumentos opcionais "
"(padrão: \"-\")"

#: ../../library/argparse.rst:89
msgid ""
"fromfile_prefix_chars_ - The set of characters that prefix files from which "
"additional arguments should be read (default: ``None``)"
msgstr ""
"fromfile_prefix_chars_ - O conjunto de caracteres que prefixam os arquivos "
"dos quais os argumentos adicionais devem ser lidos (padrão: ``None``)"

#: ../../library/argparse.rst:92
msgid ""
"argument_default_ - The global default value for arguments (default: "
"``None``)"
msgstr ""
"argument_default_ - O valor padrão global para argumentos (padrão: ``None``)"

#: ../../library/argparse.rst:95
msgid ""
"conflict_handler_ - The strategy for resolving conflicting optionals "
"(usually unnecessary)"
msgstr ""
"conflict_handler_ - A estratégia para resolver opcionais conflitantes "
"(geralmente desnecessário)"

#: ../../library/argparse.rst:98
msgid ""
"add_help_ - Add a ``-h/--help`` option to the parser (default: ``True``)"
msgstr ""
"add_help_ - Adiciona uma opção ``-h/--help`` para o analisador sintático "
"(padrão: ``True``)"

#: ../../library/argparse.rst:100
msgid ""
"allow_abbrev_ - Allows long options to be abbreviated if the abbreviation is "
"unambiguous. (default: ``True``)"
msgstr ""
"allow_abbrev_ - Permite que opções longas sejam abreviadas se a abreviação "
"não for ambígua. (padrão: ``True``)"

#: ../../library/argparse.rst:103
msgid ""
"exit_on_error_ - Determines whether or not :class:`!ArgumentParser` exits "
"with error info when an error occurs. (default: ``True``)"
msgstr ""

#: ../../library/argparse.rst:106
msgid "*allow_abbrev* parameter was added."
msgstr "O parâmetro *allow_abbrev* foi adicionado."

#: ../../library/argparse.rst:109
msgid ""
"In previous versions, *allow_abbrev* also disabled grouping of short flags "
"such as ``-vv`` to mean ``-v -v``."
msgstr ""
"Em versões anteriores, *allow_abbrev* também desabilitava o agrupamento de "
"sinalizadores curtos, como ``-vv`` para significar ``-v -v``."

#: ../../library/argparse.rst:113
msgid "*exit_on_error* parameter was added."
msgstr "O parâmetro *exit_on_error* foi adicionado."

#: ../../library/argparse.rst:116 ../../library/argparse.rst:596
msgid "The following sections describe how each of these are used."
msgstr "As seções a seguir descrevem como cada um deles é usado."

#: ../../library/argparse.rst:122
msgid "prog"
msgstr "prog"

#: ../../library/argparse.rst:125
msgid ""
"By default, :class:`ArgumentParser` calculates the name of the program to "
"display in help messages depending on the way the Python interpreter was run:"
msgstr ""

#: ../../library/argparse.rst:128
msgid ""
"The :func:`base name <os.path.basename>` of ``sys.argv[0]`` if a file was "
"passed as argument."
msgstr ""

#: ../../library/argparse.rst:130
msgid ""
"The Python interpreter name followed by ``sys.argv[0]`` if a directory or a "
"zipfile was passed as argument."
msgstr ""

#: ../../library/argparse.rst:132
msgid ""
"The Python interpreter name followed by ``-m`` followed by the module or "
"package name if the :option:`-m` option was used."
msgstr ""

#: ../../library/argparse.rst:135
msgid ""
"This default is almost always desirable because it will make the help "
"messages match the string that was used to invoke the program on the command "
"line. However, to change this default behavior, another value can be "
"supplied using the ``prog=`` argument to :class:`ArgumentParser`::"
msgstr ""

#: ../../library/argparse.rst:140
msgid ""
">>> parser = argparse.ArgumentParser(prog='myprogram')\n"
">>> parser.print_help()\n"
"usage: myprogram [-h]\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit"
msgstr ""

#: ../../library/argparse.rst:147
msgid ""
"Note that the program name, whether determined from ``sys.argv[0]`` or from "
"the ``prog=`` argument, is available to help messages using the ``%(prog)s`` "
"format specifier."
msgstr ""
"Observe que o nome do programa, seja determinado a partir de ``sys.argv[0]`` "
"ou do argumento ``prog=``, está disponível para mensagens de ajuda usando o "
"especificador de formato ``%(prog)s``."

#: ../../library/argparse.rst:153
msgid ""
">>> parser = argparse.ArgumentParser(prog='myprogram')\n"
">>> parser.add_argument('--foo', help='foo of the %(prog)s program')\n"
">>> parser.print_help()\n"
"usage: myprogram [-h] [--foo FOO]\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
" --foo FOO   foo of the myprogram program"
msgstr ""

#: ../../library/argparse.rst:164
msgid "usage"
msgstr "usage"

#: ../../library/argparse.rst:166
msgid ""
"By default, :class:`ArgumentParser` calculates the usage message from the "
"arguments it contains. The default message can be overridden with the "
"``usage=`` keyword argument::"
msgstr ""

#: ../../library/argparse.rst:170
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', usage='%(prog)s "
"[options]')\n"
">>> parser.add_argument('--foo', nargs='?', help='foo help')\n"
">>> parser.add_argument('bar', nargs='+', help='bar help')\n"
">>> parser.print_help()\n"
"usage: PROG [options]\n"
"\n"
"positional arguments:\n"
" bar          bar help\n"
"\n"
"options:\n"
" -h, --help   show this help message and exit\n"
" --foo [FOO]  foo help"
msgstr ""

#: ../../library/argparse.rst:183
msgid ""
"The ``%(prog)s`` format specifier is available to fill in the program name "
"in your usage messages."
msgstr ""
"O especificador de formato ``%(prog)s`` está disponível para preencher o "
"nome do programa em suas mensagens de uso."

#: ../../library/argparse.rst:190
msgid "description"
msgstr "description"

#: ../../library/argparse.rst:192
msgid ""
"Most calls to the :class:`ArgumentParser` constructor will use the "
"``description=`` keyword argument.  This argument gives a brief description "
"of what the program does and how it works.  In help messages, the "
"description is displayed between the command-line usage string and the help "
"messages for the various arguments."
msgstr ""

#: ../../library/argparse.rst:198
msgid ""
"By default, the description will be line-wrapped so that it fits within the "
"given space.  To change this behavior, see the formatter_class_ argument."
msgstr ""
"Por padrão, a descrição terá sua linha quebrada para que se encaixe no "
"espaço fornecido. Para alterar esse comportamento, consulte o argumento "
"formatter_class_."

#: ../../library/argparse.rst:203
msgid "epilog"
msgstr "epilog"

#: ../../library/argparse.rst:205
msgid ""
"Some programs like to display additional description of the program after "
"the description of the arguments.  Such text can be specified using the "
"``epilog=`` argument to :class:`ArgumentParser`::"
msgstr ""
"Alguns programas gostam de exibir uma descrição adicional do programa após a "
"descrição dos argumentos. Esse texto pode ser especificado usando o "
"argumento ``epilog=`` para :class:`ArgumentParser`::"

#: ../../library/argparse.rst:209
msgid ""
">>> parser = argparse.ArgumentParser(\n"
"...     description='A foo that bars',\n"
"...     epilog=\"And that's how you'd foo a bar\")\n"
">>> parser.print_help()\n"
"usage: argparse.py [-h]\n"
"\n"
"A foo that bars\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
"\n"
"And that's how you'd foo a bar"
msgstr ""

#: ../../library/argparse.rst:222
msgid ""
"As with the description_ argument, the ``epilog=`` text is by default line-"
"wrapped, but this behavior can be adjusted with the formatter_class_ "
"argument to :class:`ArgumentParser`."
msgstr ""
"Tal como acontece com o argumento description_, o texto de ``epilog=`` tem "
"sua quebra de linha habilitada por padrão, mas este comportamento pode ser "
"ajustado com o argumento formatter_class_ para :class:`ArgumentParser`."

#: ../../library/argparse.rst:228
msgid "parents"
msgstr "parents"

#: ../../library/argparse.rst:230
msgid ""
"Sometimes, several parsers share a common set of arguments. Rather than "
"repeating the definitions of these arguments, a single parser with all the "
"shared arguments and passed to ``parents=`` argument to :class:"
"`ArgumentParser` can be used.  The ``parents=`` argument takes a list of :"
"class:`ArgumentParser` objects, collects all the positional and optional "
"actions from them, and adds these actions to the :class:`ArgumentParser` "
"object being constructed::"
msgstr ""
"Às vezes, vários analisadores sintáticos compartilham um conjunto comum de "
"argumentos. Ao invés de repetir as definições desses argumentos, um único "
"analisador com todos os argumentos compartilhados e passado para o argumento "
"``parents=`` para :class:`ArgumentParser` pode ser usado. O argumento "
"``parents=`` pega uma lista de objetos :class:`ArgumentParser`, coleta todas "
"as ações posicionais e opcionais deles, e adiciona essas ações ao objeto :"
"class:`ArgumentParser` sendo construído::"

#: ../../library/argparse.rst:237
msgid ""
">>> parent_parser = argparse.ArgumentParser(add_help=False)\n"
">>> parent_parser.add_argument('--parent', type=int)\n"
"\n"
">>> foo_parser = argparse.ArgumentParser(parents=[parent_parser])\n"
">>> foo_parser.add_argument('foo')\n"
">>> foo_parser.parse_args(['--parent', '2', 'XXX'])\n"
"Namespace(foo='XXX', parent=2)\n"
"\n"
">>> bar_parser = argparse.ArgumentParser(parents=[parent_parser])\n"
">>> bar_parser.add_argument('--bar')\n"
">>> bar_parser.parse_args(['--bar', 'YYY'])\n"
"Namespace(bar='YYY', parent=None)"
msgstr ""

#: ../../library/argparse.rst:250
msgid ""
"Note that most parent parsers will specify ``add_help=False``.  Otherwise, "
"the :class:`ArgumentParser` will see two ``-h/--help`` options (one in the "
"parent and one in the child) and raise an error."
msgstr ""
"Observe que a maioria dos analisadores sintáticos pais especificará "
"``add_help=False``. Caso contrário, o :class:`ArgumentParser` verá duas "
"opções ``-h/--help`` (uma no pai e outra no filho) e levantará um erro."

#: ../../library/argparse.rst:255
msgid ""
"You must fully initialize the parsers before passing them via ``parents=``. "
"If you change the parent parsers after the child parser, those changes will "
"not be reflected in the child."
msgstr ""
"Você deve inicializar totalmente os analisadores sintáticos antes de passá-"
"los via ``parents=``. Se você alterar os analisadores pais após o analisador "
"filho, essas mudanças não serão refletidas no filho."

#: ../../library/argparse.rst:263
msgid "formatter_class"
msgstr "formatter_class"

#: ../../library/argparse.rst:265
msgid ""
":class:`ArgumentParser` objects allow the help formatting to be customized "
"by specifying an alternate formatting class.  Currently, there are four such "
"classes:"
msgstr ""
"Objetos :class:`ArgumentParser` permitem que a  formação do texto de ajuda "
"seja personalizada por meio da especificação de uma classe de formatação "
"alternativa. Atualmente, há quatro dessas classes:"

#: ../../library/argparse.rst:274
msgid ""
":class:`RawDescriptionHelpFormatter` and :class:`RawTextHelpFormatter` give "
"more control over how textual descriptions are displayed. By default, :class:"
"`ArgumentParser` objects line-wrap the description_ and epilog_ texts in "
"command-line help messages::"
msgstr ""
":class:`RawDescriptionHelpFormatter` e :class:`RawTextHelpFormatter` dão "
"mais controle sobre como as descrições textuais são exibidas. Por padrão, "
"objetos :class:`ArgumentParser` quebram em linha os textos description_ e "
"epilog_ nas mensagens de ajuda da linha de comando::"

#: ../../library/argparse.rst:279
msgid ""
">>> parser = argparse.ArgumentParser(\n"
"...     prog='PROG',\n"
"...     description='''this description\n"
"...         was indented weird\n"
"...             but that is okay''',\n"
"...     epilog='''\n"
"...             likewise for this epilog whose whitespace will\n"
"...         be cleaned up and whose words will be wrapped\n"
"...         across a couple lines''')\n"
">>> parser.print_help()\n"
"usage: PROG [-h]\n"
"\n"
"this description was indented weird but that is okay\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
"\n"
"likewise for this epilog whose whitespace will be cleaned up and whose "
"words\n"
"will be wrapped across a couple lines"
msgstr ""

#: ../../library/argparse.rst:299
msgid ""
"Passing :class:`RawDescriptionHelpFormatter` as ``formatter_class=`` "
"indicates that description_ and epilog_ are already correctly formatted and "
"should not be line-wrapped::"
msgstr ""
"Passar :class:`RawDescriptionHelpFormatter` como ``formatter_class=`` indica "
"que description_ e epilog_ já estão formatados corretamente e não devem ter "
"suas linhas quebradas::"

#: ../../library/argparse.rst:303
msgid ""
">>> parser = argparse.ArgumentParser(\n"
"...     prog='PROG',\n"
"...     formatter_class=argparse.RawDescriptionHelpFormatter,\n"
"...     description=textwrap.dedent('''\\\n"
"...         Please do not mess up this text!\n"
"...         --------------------------------\n"
"...             I have indented it\n"
"...             exactly the way\n"
"...             I want it\n"
"...         '''))\n"
">>> parser.print_help()\n"
"usage: PROG [-h]\n"
"\n"
"Please do not mess up this text!\n"
"--------------------------------\n"
"   I have indented it\n"
"   exactly the way\n"
"   I want it\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit"
msgstr ""

#: ../../library/argparse.rst:325
msgid ""
":class:`RawTextHelpFormatter` maintains whitespace for all sorts of help "
"text, including argument descriptions. However, multiple newlines are "
"replaced with one. If you wish to preserve multiple blank lines, add spaces "
"between the newlines."
msgstr ""

#: ../../library/argparse.rst:330
msgid ""
":class:`ArgumentDefaultsHelpFormatter` automatically adds information about "
"default values to each of the argument help messages::"
msgstr ""
":class:`ArgumentDefaultsHelpFormatter` adiciona automaticamente informações "
"sobre os valores padrão para cada uma das mensagens de ajuda do argumento::"

#: ../../library/argparse.rst:333
msgid ""
">>> parser = argparse.ArgumentParser(\n"
"...     prog='PROG',\n"
"...     formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n"
">>> parser.add_argument('--foo', type=int, default=42, help='FOO!')\n"
">>> parser.add_argument('bar', nargs='*', default=[1, 2, 3], help='BAR!')\n"
">>> parser.print_help()\n"
"usage: PROG [-h] [--foo FOO] [bar ...]\n"
"\n"
"positional arguments:\n"
" bar         BAR! (default: [1, 2, 3])\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
" --foo FOO   FOO! (default: 42)"
msgstr ""

#: ../../library/argparse.rst:348
msgid ""
":class:`MetavarTypeHelpFormatter` uses the name of the type_ argument for "
"each argument as the display name for its values (rather than using the "
"dest_ as the regular formatter does)::"
msgstr ""
":class:`MetavarTypeHelpFormatter` usa o nome de argumento type_ para cada "
"argumento como o nome de exibição para seus valores (em vez de usar o dest_ "
"como o formatador regular faz)::"

#: ../../library/argparse.rst:352
msgid ""
">>> parser = argparse.ArgumentParser(\n"
"...     prog='PROG',\n"
"...     formatter_class=argparse.MetavarTypeHelpFormatter)\n"
">>> parser.add_argument('--foo', type=int)\n"
">>> parser.add_argument('bar', type=float)\n"
">>> parser.print_help()\n"
"usage: PROG [-h] [--foo int] float\n"
"\n"
"positional arguments:\n"
"  float\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"  --foo int"
msgstr ""

#: ../../library/argparse.rst:369
msgid "prefix_chars"
msgstr "prefix_chars"

#: ../../library/argparse.rst:371
msgid ""
"Most command-line options will use ``-`` as the prefix, e.g. ``-f/--foo``. "
"Parsers that need to support different or additional prefix characters, e.g. "
"for options like ``+f`` or ``/foo``, may specify them using the "
"``prefix_chars=`` argument to the :class:`ArgumentParser` constructor::"
msgstr ""

#: ../../library/argparse.rst:377
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', prefix_chars='-+')\n"
">>> parser.add_argument('+f')\n"
">>> parser.add_argument('++bar')\n"
">>> parser.parse_args('+f X ++bar Y'.split())\n"
"Namespace(bar='Y', f='X')"
msgstr ""

#: ../../library/argparse.rst:383
msgid ""
"The ``prefix_chars=`` argument defaults to ``'-'``. Supplying a set of "
"characters that does not include ``-`` will cause ``-f/--foo`` options to be "
"disallowed."
msgstr ""
"O argumento ``prefix_chars=`` é padronizado como ``'-'``. Fornecer um "
"conjunto de caracteres que não inclua ``-`` fará com que as opções ``-f/--"
"foo`` não sejam permitidas."

#: ../../library/argparse.rst:389
msgid "fromfile_prefix_chars"
msgstr "fromfile_prefix_chars"

#: ../../library/argparse.rst:391
msgid ""
"Sometimes, when dealing with a particularly long argument list, it may make "
"sense to keep the list of arguments in a file rather than typing it out at "
"the command line.  If the ``fromfile_prefix_chars=`` argument is given to "
"the :class:`ArgumentParser` constructor, then arguments that start with any "
"of the specified characters will be treated as files, and will be replaced "
"by the arguments they contain.  For example::"
msgstr ""
"Às vezes ao lidar com uma lista de argumentos particularmente longa, pode "
"fazer sentido manter a lista de argumentos em um arquivo em vez de digitá-la "
"na linha de comando. Se o argumento ``fromfile_prefix_chars=`` for dado ao "
"construtor :class:`ArgumentParser`, então os argumentos que começam com "
"qualquer um dos caracteres especificados serão tratados como arquivos e "
"serão substituídos pelos argumentos que eles contêm. Por exemplo::"

#: ../../library/argparse.rst:398
msgid ""
">>> with open('args.txt', 'w', encoding=sys.getfilesystemencoding()) as fp:\n"
"...     fp.write('-f\\nbar')\n"
"...\n"
">>> parser = argparse.ArgumentParser(fromfile_prefix_chars='@')\n"
">>> parser.add_argument('-f')\n"
">>> parser.parse_args(['-f', 'foo', '@args.txt'])\n"
"Namespace(f='bar')"
msgstr ""

#: ../../library/argparse.rst:406
msgid ""
"Arguments read from a file must by default be one per line (but see also :"
"meth:`~ArgumentParser.convert_arg_line_to_args`) and are treated as if they "
"were in the same place as the original file referencing argument on the "
"command line.  So in the example above, the expression ``['-f', 'foo', "
"'@args.txt']`` is considered equivalent to the expression ``['-f', 'foo', '-"
"f', 'bar']``."
msgstr ""
"Os argumentos lidos de um arquivo devem, por padrão, ser um por linha (mas "
"veja também :meth:`~ArgumentParser.convert_arg_line_to_args`) e são tratados "
"como se estivessem no mesmo lugar que o argumento de referência do arquivo "
"original na linha de comando. Portanto, no exemplo acima, a expressão ``['-"
"f', 'foo', '@args.txt']`` é considerada equivalente à expressão ``['-f', "
"'foo', '-f', 'bar']``."

#: ../../library/argparse.rst:412
msgid ""
":class:`ArgumentParser` uses :term:`filesystem encoding and error handler` "
"to read the file containing arguments."
msgstr ""
":class:`ArgumentParser` usa :term:`tratador de erros e codificação do "
"sistema de arquivos` para ler o arquivo que contém argumentos."

#: ../../library/argparse.rst:415
msgid ""
"The ``fromfile_prefix_chars=`` argument defaults to ``None``, meaning that "
"arguments will never be treated as file references."
msgstr ""
"O argumento ``fromfile_prefix_chars=`` é padronizado como ``None``, "
"significando que os argumentos nunca serão tratados como referências de "
"arquivo."

#: ../../library/argparse.rst:418
msgid ""
":class:`ArgumentParser` changed encoding and errors to read arguments files "
"from default (e.g. :func:`locale.getpreferredencoding(False) <locale."
"getpreferredencoding>` and ``\"strict\"``) to the :term:`filesystem encoding "
"and error handler`. Arguments file should be encoded in UTF-8 instead of "
"ANSI Codepage on Windows."
msgstr ""

#: ../../library/argparse.rst:426
msgid "argument_default"
msgstr "argument_default"

#: ../../library/argparse.rst:428
msgid ""
"Generally, argument defaults are specified either by passing a default to :"
"meth:`~ArgumentParser.add_argument` or by calling the :meth:`~ArgumentParser."
"set_defaults` methods with a specific set of name-value pairs.  Sometimes "
"however, it may be useful to specify a single parser-wide default for "
"arguments.  This can be accomplished by passing the ``argument_default=`` "
"keyword argument to :class:`ArgumentParser`.  For example, to globally "
"suppress attribute creation on :meth:`~ArgumentParser.parse_args` calls, we "
"supply ``argument_default=SUPPRESS``::"
msgstr ""
"Geralmente, os padrões dos argumentos são especificados passando um padrão "
"para :meth:`~ArgumentParser.add_argument` ou chamando os métodos :meth:"
"`~ArgumentParser.set_defaults` com um conjunto específico de pares nome-"
"valor. Às vezes, no entanto, pode ser útil especificar um único padrão para "
"todo o analisador para argumentos. Isso pode ser feito passando o argumento "
"nomeado ``argument_default=`` para :class:`ArgumentParser`. Por exemplo, "
"para suprimir globalmente a criação de atributos em chamadas :meth:"
"`~ArgumentParser.parse_args`, fornecemos ``argument_default=SUPPRESS``::"

#: ../../library/argparse.rst:437
msgid ""
">>> parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS)\n"
">>> parser.add_argument('--foo')\n"
">>> parser.add_argument('bar', nargs='?')\n"
">>> parser.parse_args(['--foo', '1', 'BAR'])\n"
"Namespace(bar='BAR', foo='1')\n"
">>> parser.parse_args([])\n"
"Namespace()"
msgstr ""

#: ../../library/argparse.rst:448
msgid "allow_abbrev"
msgstr "allow_abbrev"

#: ../../library/argparse.rst:450
msgid ""
"Normally, when you pass an argument list to the :meth:`~ArgumentParser."
"parse_args` method of an :class:`ArgumentParser`, it :ref:`recognizes "
"abbreviations <prefix-matching>` of long options."
msgstr ""
"Normalmente, quando você passa uma lista de argumentos para o método :meth:"
"`~ArgumentParser.parse_args` de um :class:`ArgumentParser`, ele :ref:"
"`reconhece as abreviações <prefix-matching>` de opções longas."

#: ../../library/argparse.rst:454
msgid "This feature can be disabled by setting ``allow_abbrev`` to ``False``::"
msgstr ""
"Este recurso pode ser desabilitado configurando ``allow_abbrev`` para "
"``False``::"

#: ../../library/argparse.rst:456
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', allow_abbrev=False)\n"
">>> parser.add_argument('--foobar', action='store_true')\n"
">>> parser.add_argument('--foonley', action='store_false')\n"
">>> parser.parse_args(['--foon'])\n"
"usage: PROG [-h] [--foobar] [--foonley]\n"
"PROG: error: unrecognized arguments: --foon"
msgstr ""

#: ../../library/argparse.rst:467
msgid "conflict_handler"
msgstr "conflict_handler"

#: ../../library/argparse.rst:469
msgid ""
":class:`ArgumentParser` objects do not allow two actions with the same "
"option string.  By default, :class:`ArgumentParser` objects raise an "
"exception if an attempt is made to create an argument with an option string "
"that is already in use::"
msgstr ""
"Objetos :class:`ArgumentParser` não permitem duas ações com a mesma string "
"de opções. Por padrão, objetos :class:`ArgumentParser` levantam uma exceção "
"se for feita uma tentativa de criar um argumento com uma string de opção que "
"já esteja em uso::"

#: ../../library/argparse.rst:474
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-f', '--foo', help='old foo help')\n"
">>> parser.add_argument('--foo', help='new foo help')\n"
"Traceback (most recent call last):\n"
" ..\n"
"ArgumentError: argument --foo: conflicting option string(s): --foo"
msgstr ""

#: ../../library/argparse.rst:481
msgid ""
"Sometimes (e.g. when using parents_) it may be useful to simply override any "
"older arguments with the same option string.  To get this behavior, the "
"value ``'resolve'`` can be supplied to the ``conflict_handler=`` argument "
"of :class:`ArgumentParser`::"
msgstr ""
"Às vezes (por exemplo, ao usar os parents_) pode ser útil simplesmente "
"substituir quaisquer argumentos mais antigos com a mesma string de opções. "
"Para obter este comportamento, o valor ``'resolve'`` pode ser fornecido ao "
"argumento ``conflict_handler=`` de :class:`ArgumentParser`::"

#: ../../library/argparse.rst:486
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', "
"conflict_handler='resolve')\n"
">>> parser.add_argument('-f', '--foo', help='old foo help')\n"
">>> parser.add_argument('--foo', help='new foo help')\n"
">>> parser.print_help()\n"
"usage: PROG [-h] [-f FOO] [--foo FOO]\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
" -f FOO      old foo help\n"
" --foo FOO   new foo help"
msgstr ""

#: ../../library/argparse.rst:497
msgid ""
"Note that :class:`ArgumentParser` objects only remove an action if all of "
"its option strings are overridden.  So, in the example above, the old ``-f/--"
"foo`` action is retained as the ``-f`` action, because only the ``--foo`` "
"option string was overridden."
msgstr ""
"Observe que os objetos :class:`ArgumentParser` só removem uma ação se todas "
"as suas strings de opção forem substituídas. Assim, no exemplo acima, a "
"antiga ação ``-f/--foo`` é mantida como a ação ``-f``, porque apenas a "
"string de opção ``--foo`` foi substituída."

#: ../../library/argparse.rst:504
msgid "add_help"
msgstr "add_help"

#: ../../library/argparse.rst:506
msgid ""
"By default, :class:`ArgumentParser` objects add an option which simply "
"displays the parser's help message. If ``-h`` or ``--help`` is supplied at "
"the command line, the :class:`!ArgumentParser` help will be printed."
msgstr ""

#: ../../library/argparse.rst:510
msgid ""
"Occasionally, it may be useful to disable the addition of this help option. "
"This can be achieved by passing ``False`` as the ``add_help=`` argument to :"
"class:`ArgumentParser`::"
msgstr ""
"Às vezes, pode ser útil desabilitar o acréscimo desta opção de ajuda. Isto "
"pode ser feito passando ``False`` como o argumento ``add_help=`` para a "
"classe :class:`ArgumentParser`::"

#: ../../library/argparse.rst:514
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', add_help=False)\n"
">>> parser.add_argument('--foo', help='foo help')\n"
">>> parser.print_help()\n"
"usage: PROG [--foo FOO]\n"
"\n"
"options:\n"
" --foo FOO  foo help"
msgstr ""

#: ../../library/argparse.rst:522
msgid ""
"The help option is typically ``-h/--help``. The exception to this is if the "
"``prefix_chars=`` is specified and does not include ``-``, in which case ``-"
"h`` and ``--help`` are not valid options.  In this case, the first character "
"in ``prefix_chars`` is used to prefix the help options::"
msgstr ""
"A opção de ajuda é normalmente ``-h/--help``. A exceção a isso é se o "
"``prefix_chars=`` for especificado e não incluir ``-``, neste caso ``-h`` e "
"``--help`` não são opções válidas. Neste caso, o primeiro caractere em "
"``prefix_chars`` é usado para prefixar as opções de ajuda::"

#: ../../library/argparse.rst:528
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', prefix_chars='+/')\n"
">>> parser.print_help()\n"
"usage: PROG [+h]\n"
"\n"
"options:\n"
"  +h, ++help  show this help message and exit"
msgstr ""

#: ../../library/argparse.rst:537
msgid "exit_on_error"
msgstr "exit_on_error"

#: ../../library/argparse.rst:539
msgid ""
"Normally, when you pass an invalid argument list to the :meth:"
"`~ArgumentParser.parse_args` method of an :class:`ArgumentParser`, it will "
"print a *message* to :data:`sys.stderr` and exit with a status code of 2."
msgstr ""

#: ../../library/argparse.rst:543
msgid ""
"If the user would like to catch errors manually, the feature can be enabled "
"by setting ``exit_on_error`` to ``False``::"
msgstr ""
"Se o usuário quiser detectar erros manualmente, o recurso pode ser "
"habilitado configurando ``exit_on_error`` para ``False``::"

#: ../../library/argparse.rst:546
msgid ""
">>> parser = argparse.ArgumentParser(exit_on_error=False)\n"
">>> parser.add_argument('--integers', type=int)\n"
"_StoreAction(option_strings=['--integers'], dest='integers', nargs=None, "
"const=None, default=None, type=<class 'int'>, choices=None, help=None, "
"metavar=None)\n"
">>> try:\n"
"...     parser.parse_args('--integers a'.split())\n"
"... except argparse.ArgumentError:\n"
"...     print('Catching an argumentError')\n"
"...\n"
"Catching an argumentError"
msgstr ""

#: ../../library/argparse.rst:560
msgid "The add_argument() method"
msgstr "O método add_argument()"

#: ../../library/argparse.rst:566
msgid ""
"Define how a single command-line argument should be parsed.  Each parameter "
"has its own more detailed description below, but in short they are:"
msgstr ""
"Define como um único argumento de linha de comando deve ser analisado. Cada "
"parâmetro tem sua própria descrição mais detalhada abaixo, mas resumidamente "
"são eles:"

#: ../../library/argparse.rst:569
msgid ""
"`name or flags`_ - Either a name or a list of option strings, e.g. ``'foo'`` "
"or ``'-f', '--foo'``."
msgstr ""

#: ../../library/argparse.rst:572
msgid ""
"action_ - The basic type of action to be taken when this argument is "
"encountered at the command line."
msgstr ""
"action_ - O tipo básico de ação a ser executada quando esse argumento é "
"encontrado na linha de comando."

#: ../../library/argparse.rst:575
msgid "nargs_ - The number of command-line arguments that should be consumed."
msgstr ""
"nargs_ - O número de argumentos de linha de comando que devem ser consumidos."

#: ../../library/argparse.rst:577
msgid ""
"const_ - A constant value required by some action_ and nargs_ selections."
msgstr ""
"const_ - Um valor constante exigido por algumas seleções action_ e nargs_."

#: ../../library/argparse.rst:579
msgid ""
"default_ - The value produced if the argument is absent from the command "
"line and if it is absent from the namespace object."
msgstr ""
"default_ - O valor produzido se o argumento estiver ausente da linha de "
"comando e se estiver ausente do objeto espaço de nomes."

#: ../../library/argparse.rst:582
msgid ""
"type_ - The type to which the command-line argument should be converted."
msgstr ""
"type_ - O tipo para o qual o argumento de linha de comando deve ser "
"convertido."

#: ../../library/argparse.rst:584
msgid "choices_ - A sequence of the allowable values for the argument."
msgstr "choices_ - Uma sequência dos valores permitidos para o argumento."

#: ../../library/argparse.rst:586
msgid ""
"required_ - Whether or not the command-line option may be omitted (optionals "
"only)."
msgstr ""
"required_ - Se a opção de linha de comando pode ou não ser omitida (somente "
"opcionais)."

#: ../../library/argparse.rst:589
msgid "help_ - A brief description of what the argument does."
msgstr "help_ - Uma breve descrição do que o argumento faz."

#: ../../library/argparse.rst:591
msgid "metavar_ - A name for the argument in usage messages."
msgstr "metavar_ - Um nome para o argumento nas mensagens de uso."

#: ../../library/argparse.rst:593
msgid ""
"dest_ - The name of the attribute to be added to the object returned by :"
"meth:`parse_args`."
msgstr ""
"dest_ - O nome do atributo a ser adicionado ao objeto retornado por :meth:"
"`parse_args`."

#: ../../library/argparse.rst:602
msgid "name or flags"
msgstr "name ou flags"

#: ../../library/argparse.rst:604
msgid ""
"The :meth:`~ArgumentParser.add_argument` method must know whether an "
"optional argument, like ``-f`` or ``--foo``, or a positional argument, like "
"a list of filenames, is expected.  The first arguments passed to :meth:"
"`~ArgumentParser.add_argument` must therefore be either a series of flags, "
"or a simple argument name."
msgstr ""
"O método :meth:`~ArgumentParser.add_argument` deve saber se um argumento "
"opcional, como ``-f`` ou ``--foo``, ou um argumento posicional, como uma "
"lista de nomes de arquivos, é esperado. Os primeiros argumentos passados ​​"
"para :meth:`~ArgumentParser.add_argument` devem, portanto, ser uma série de "
"sinalizadores ou um simples nome de argumento."

#: ../../library/argparse.rst:610
msgid "For example, an optional argument could be created like::"
msgstr "Por exemplo, um argumento opcional poderia ser criado como::"

#: ../../library/argparse.rst:612
msgid ">>> parser.add_argument('-f', '--foo')"
msgstr ""

#: ../../library/argparse.rst:614
msgid "while a positional argument could be created like::"
msgstr "enquanto um argumento posicional pode ser criado como::"

#: ../../library/argparse.rst:616
msgid ">>> parser.add_argument('bar')"
msgstr ""

#: ../../library/argparse.rst:618
msgid ""
"When :meth:`~ArgumentParser.parse_args` is called, optional arguments will "
"be identified by the ``-`` prefix, and the remaining arguments will be "
"assumed to be positional::"
msgstr ""
"Quando :meth:`~ArgumentParser.parse_args` é chamado, argumentos opcionais "
"serão identificados pelo prefixo ``-``, e os argumentos restantes serão "
"considerados posicionais::"

#: ../../library/argparse.rst:622
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-f', '--foo')\n"
">>> parser.add_argument('bar')\n"
">>> parser.parse_args(['BAR'])\n"
"Namespace(bar='BAR', foo=None)\n"
">>> parser.parse_args(['BAR', '--foo', 'FOO'])\n"
"Namespace(bar='BAR', foo='FOO')\n"
">>> parser.parse_args(['--foo', 'FOO'])\n"
"usage: PROG [-h] [-f FOO] bar\n"
"PROG: error: the following arguments are required: bar"
msgstr ""

#: ../../library/argparse.rst:637
msgid "action"
msgstr "ação"

#: ../../library/argparse.rst:639
msgid ""
":class:`ArgumentParser` objects associate command-line arguments with "
"actions.  These actions can do just about anything with the command-line "
"arguments associated with them, though most actions simply add an attribute "
"to the object returned by :meth:`~ArgumentParser.parse_args`.  The "
"``action`` keyword argument specifies how the command-line arguments should "
"be handled. The supplied actions are:"
msgstr ""
"Objetos :class:`ArgumentParser` associam argumentos de linha de comando com "
"ações. Essas ações podem fazer praticamente qualquer coisa com os argumentos "
"de linha de comando associados a elas, embora a maioria das ações "
"simplesmente adicione um atributo ao objeto retornado por :meth:"
"`~ArgumentParser.parse_args`. O argumento nomeado ``action`` especifica como "
"os argumentos da linha de comando devem ser tratados. As ações fornecidas "
"são:"

#: ../../library/argparse.rst:645
msgid ""
"``'store'`` - This just stores the argument's value.  This is the default "
"action."
msgstr ""

#: ../../library/argparse.rst:648
msgid ""
"``'store_const'`` - This stores the value specified by the const_ keyword "
"argument; note that the const_ keyword argument defaults to ``None``.  The "
"``'store_const'`` action is most commonly used with optional arguments that "
"specify some sort of flag.  For example::"
msgstr ""
"``'store_const'`` - Isso armazena o valor especificado pelo argumento "
"nomeado const_; observe que o argumento nomeado const_ tem como padrão "
"``None``. A ação ``'store_const'`` é mais comumente usada com argumentos "
"opcionais que especificam algum tipo de sinalizador. Por exemplo::"

#: ../../library/argparse.rst:653
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action='store_const', const=42)\n"
">>> parser.parse_args(['--foo'])\n"
"Namespace(foo=42)"
msgstr ""

#: ../../library/argparse.rst:658
msgid ""
"``'store_true'`` and ``'store_false'`` - These are special cases of "
"``'store_const'`` used for storing the values ``True`` and ``False`` "
"respectively.  In addition, they create default values of ``False`` and "
"``True`` respectively::"
msgstr ""

#: ../../library/argparse.rst:663
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action='store_true')\n"
">>> parser.add_argument('--bar', action='store_false')\n"
">>> parser.add_argument('--baz', action='store_false')\n"
">>> parser.parse_args('--foo --bar'.split())\n"
"Namespace(foo=True, bar=False, baz=True)"
msgstr ""

#: ../../library/argparse.rst:670
msgid ""
"``'append'`` - This stores a list, and appends each argument value to the "
"list. It is useful to allow an option to be specified multiple times. If the "
"default value is non-empty, the default elements will be present in the "
"parsed value for the option, with any values from the command line appended "
"after those default values. Example usage::"
msgstr ""
"``'append'`` - Isso armazena uma lista e anexa cada valor de argumento à "
"lista.  É útil permitir que uma opção seja especificada várias vezes. Se o "
"valor padrão não estiver vazio, os elementos padrão estarão presentes no "
"valor analisado da opção, com quaisquer valores da linha de comando anexados "
"após esses valores padrão. Exemplo de uso::"

#: ../../library/argparse.rst:676
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action='append')\n"
">>> parser.parse_args('--foo 1 --foo 2'.split())\n"
"Namespace(foo=['1', '2'])"
msgstr ""

#: ../../library/argparse.rst:681
msgid ""
"``'append_const'`` - This stores a list, and appends the value specified by "
"the const_ keyword argument to the list; note that the const_ keyword "
"argument defaults to ``None``. The ``'append_const'`` action is typically "
"useful when multiple arguments need to store constants to the same list. For "
"example::"
msgstr ""
"``'append_const'`` - Isso armazena uma lista e anexa o valor especificado "
"pelo argumento nomeado const_ à lista; observe que o argumento nomeado "
"const_ tem como padrão ``None``. A ação ``'append_const'`` é normalmente "
"útil quando vários argumentos precisam armazenar constantes na mesma lista. "
"Por exemplo::"

#: ../../library/argparse.rst:687
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--str', dest='types', action='append_const', "
"const=str)\n"
">>> parser.add_argument('--int', dest='types', action='append_const', "
"const=int)\n"
">>> parser.parse_args('--str --int'.split())\n"
"Namespace(types=[<class 'str'>, <class 'int'>])"
msgstr ""

#: ../../library/argparse.rst:693
msgid ""
"``'extend'`` - This stores a list and appends each item from the multi-value "
"argument list to it. The ``'extend'`` action is typically used with the "
"nargs_ keyword argument value ``'+'`` or ``'*'``. Note that when nargs_ is "
"``None`` (the default) or ``'?'``, each character of the argument string "
"will be appended to the list. Example usage::"
msgstr ""

#: ../../library/argparse.rst:701
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument(\"--foo\", action=\"extend\", nargs=\"+\", "
"type=str)\n"
">>> parser.parse_args([\"--foo\", \"f1\", \"--foo\", \"f2\", \"f3\", "
"\"f4\"])\n"
"Namespace(foo=['f1', 'f2', 'f3', 'f4'])"
msgstr ""

#: ../../library/argparse.rst:708
msgid ""
"``'count'`` - This counts the number of times a keyword argument occurs. For "
"example, this is useful for increasing verbosity levels::"
msgstr ""
"``'count'`` - Isso conta o número de vezes que um argumento nomeado ocorre. "
"Por exemplo, isso é útil para aumentar os níveis de verbosidade::"

#: ../../library/argparse.rst:711
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--verbose', '-v', action='count', default=0)\n"
">>> parser.parse_args(['-vvv'])\n"
"Namespace(verbose=3)"
msgstr ""

#: ../../library/argparse.rst:716
msgid "Note, the *default* will be ``None`` unless explicitly set to *0*."
msgstr ""
"Observe que o *padrão* será ``None``, a menos que seja explicitamente "
"definido como *0*."

#: ../../library/argparse.rst:718
msgid ""
"``'help'`` - This prints a complete help message for all the options in the "
"current parser and then exits. By default a help action is automatically "
"added to the parser. See :class:`ArgumentParser` for details of how the "
"output is created."
msgstr ""
"``'help'`` - Isso imprime uma mensagem de ajuda completa para todas as "
"opções no analisador sintático atual e sai. Por padrão, uma ação de ajuda é "
"adicionada automaticamente ao analisador sintático. Veja :class:"
"`ArgumentParser` para detalhes de como a saída é criada."

#: ../../library/argparse.rst:723
msgid ""
"``'version'`` - This expects a ``version=`` keyword argument in the :meth:"
"`~ArgumentParser.add_argument` call, and prints version information and "
"exits when invoked::"
msgstr ""
"``'version'`` - Isso espera um argumento nomeado ``version=`` na chamada :"
"meth:`~ArgumentParser.add_argument` e imprime informações de versão e sai "
"quando invocado::"

#: ../../library/argparse.rst:727
msgid ""
">>> import argparse\n"
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('--version', action='version', version='%(prog)s "
"2.0')\n"
">>> parser.parse_args(['--version'])\n"
"PROG 2.0"
msgstr ""

#: ../../library/argparse.rst:733
msgid ""
"Only actions that consume command-line arguments (e.g. ``'store'``, "
"``'append'`` or ``'extend'``) can be used with positional arguments."
msgstr ""

#: ../../library/argparse.rst:738
msgid ""
"You may also specify an arbitrary action by passing an :class:`Action` "
"subclass or other object that implements the same interface. The :class:`!"
"BooleanOptionalAction` is available in :mod:`!argparse` and adds support for "
"boolean actions such as ``--foo`` and ``--no-foo``::"
msgstr ""

#: ../../library/argparse.rst:743
msgid ""
">>> import argparse\n"
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action=argparse.BooleanOptionalAction)\n"
">>> parser.parse_args(['--no-foo'])\n"
"Namespace(foo=False)"
msgstr ""

#: ../../library/argparse.rst:751
msgid ""
"The recommended way to create a custom action is to extend :class:`Action`, "
"overriding the :meth:`!__call__` method and optionally the :meth:`!__init__` "
"and :meth:`!format_usage` methods."
msgstr ""

#: ../../library/argparse.rst:755
msgid "An example of a custom action::"
msgstr "Um exemplo de uma ação personalizada::"

#: ../../library/argparse.rst:757
msgid ""
">>> class FooAction(argparse.Action):\n"
"...     def __init__(self, option_strings, dest, nargs=None, **kwargs):\n"
"...         if nargs is not None:\n"
"...             raise ValueError(\"nargs not allowed\")\n"
"...         super().__init__(option_strings, dest, **kwargs)\n"
"...     def __call__(self, parser, namespace, values, option_string=None):\n"
"...         print('%r %r %r' % (namespace, values, option_string))\n"
"...         setattr(namespace, self.dest, values)\n"
"...\n"
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action=FooAction)\n"
">>> parser.add_argument('bar', action=FooAction)\n"
">>> args = parser.parse_args('1 --foo 2'.split())\n"
"Namespace(bar=None, foo=None) '1' None\n"
"Namespace(bar='1', foo=None) '2' '--foo'\n"
">>> args\n"
"Namespace(bar='1', foo='2')"
msgstr ""

#: ../../library/argparse.rst:775
msgid "For more details, see :class:`Action`."
msgstr "Para mais detalhes, veja :class:`Action`."

#: ../../library/argparse.rst:781
msgid "nargs"
msgstr "nargs"

#: ../../library/argparse.rst:783
msgid ""
":class:`ArgumentParser` objects usually associate a single command-line "
"argument with a single action to be taken.  The ``nargs`` keyword argument "
"associates a different number of command-line arguments with a single "
"action. See also :ref:`specifying-ambiguous-arguments`. The supported values "
"are:"
msgstr ""

#: ../../library/argparse.rst:788
msgid ""
"``N`` (an integer).  ``N`` arguments from the command line will be gathered "
"together into a list.  For example::"
msgstr ""
"``N`` (um inteiro). Os argumentos ``N`` da linha de comando serão reunidos "
"em uma lista. Por exemplo::"

#: ../../library/argparse.rst:791
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', nargs=2)\n"
">>> parser.add_argument('bar', nargs=1)\n"
">>> parser.parse_args('c --foo a b'.split())\n"
"Namespace(bar=['c'], foo=['a', 'b'])"
msgstr ""

#: ../../library/argparse.rst:797
msgid ""
"Note that ``nargs=1`` produces a list of one item.  This is different from "
"the default, in which the item is produced by itself."
msgstr ""
"Observe que ``nargs=1`` produz uma lista de um item. Isso é diferente do "
"padrão, em que o item é produzido sozinho."

#: ../../library/argparse.rst:802
msgid ""
"``'?'``. One argument will be consumed from the command line if possible, "
"and produced as a single item.  If no command-line argument is present, the "
"value from default_ will be produced.  Note that for optional arguments, "
"there is an additional case - the option string is present but not followed "
"by a command-line argument.  In this case the value from const_ will be "
"produced.  Some examples to illustrate this::"
msgstr ""
"``'?'``. Um argumento será consumido da linha de comando, se possível, e "
"produzido como um único item. Se nenhum argumento de linha de comando "
"estiver presente, o valor de default_ será produzido. Observe que, para "
"argumentos opcionais, há um caso adicional - a string de opções está "
"presente, mas não é seguida por um argumento de linha de comando. Neste caso "
"o valor de const_ será produzido. Alguns exemplos para ilustrar isso::"

#: ../../library/argparse.rst:809
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', nargs='?', const='c', default='d')\n"
">>> parser.add_argument('bar', nargs='?', default='d')\n"
">>> parser.parse_args(['XX', '--foo', 'YY'])\n"
"Namespace(bar='XX', foo='YY')\n"
">>> parser.parse_args(['XX', '--foo'])\n"
"Namespace(bar='XX', foo='c')\n"
">>> parser.parse_args([])\n"
"Namespace(bar='d', foo='d')"
msgstr ""

#: ../../library/argparse.rst:819
msgid ""
"One of the more common uses of ``nargs='?'`` is to allow optional input and "
"output files::"
msgstr ""
"Um dos usos mais comuns de ``nargs='?'`` é permitir arquivos de entrada e "
"saída opcionais::"

#: ../../library/argparse.rst:822
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('infile', nargs='?', type=argparse.FileType('r'),\n"
"...                     default=sys.stdin)\n"
">>> parser.add_argument('outfile', nargs='?', type=argparse.FileType('w'),\n"
"...                     default=sys.stdout)\n"
">>> parser.parse_args(['input.txt', 'output.txt'])\n"
"Namespace(infile=<_io.TextIOWrapper name='input.txt' encoding='UTF-8'>,\n"
"          outfile=<_io.TextIOWrapper name='output.txt' encoding='UTF-8'>)\n"
">>> parser.parse_args([])\n"
"Namespace(infile=<_io.TextIOWrapper name='<stdin>' encoding='UTF-8'>,\n"
"          outfile=<_io.TextIOWrapper name='<stdout>' encoding='UTF-8'>)"
msgstr ""

#: ../../library/argparse.rst:836
msgid ""
"``'*'``.  All command-line arguments present are gathered into a list.  Note "
"that it generally doesn't make much sense to have more than one positional "
"argument with ``nargs='*'``, but multiple optional arguments with "
"``nargs='*'`` is possible.  For example::"
msgstr ""
"``'*'``. Todos os argumentos de linha de comando presentes são reunidos em "
"uma lista. Note que geralmente não faz muito sentido ter mais de um "
"argumento posicional com ``nargs='*'``, mas vários argumentos opcionais com "
"``nargs='*'`` são possíveis. Por exemplo::"

#: ../../library/argparse.rst:841
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', nargs='*')\n"
">>> parser.add_argument('--bar', nargs='*')\n"
">>> parser.add_argument('baz', nargs='*')\n"
">>> parser.parse_args('a b --foo x y --bar 1 2'.split())\n"
"Namespace(bar=['1', '2'], baz=['a', 'b'], foo=['x', 'y'])"
msgstr ""

#: ../../library/argparse.rst:850
msgid ""
"``'+'``. Just like ``'*'``, all command-line args present are gathered into "
"a list.  Additionally, an error message will be generated if there wasn't at "
"least one command-line argument present.  For example::"
msgstr ""
"``'+'``. Assim como ``'*'``, todos os argumentos de linha de comando "
"presentes são reunidos em uma lista. Além disso, uma mensagem de erro será "
"gerada se não houver pelo menos um argumento de linha de comando presente. "
"Por exemplo::"

#: ../../library/argparse.rst:854
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('foo', nargs='+')\n"
">>> parser.parse_args(['a', 'b'])\n"
"Namespace(foo=['a', 'b'])\n"
">>> parser.parse_args([])\n"
"usage: PROG [-h] foo [foo ...]\n"
"PROG: error: the following arguments are required: foo"
msgstr ""

#: ../../library/argparse.rst:862
msgid ""
"If the ``nargs`` keyword argument is not provided, the number of arguments "
"consumed is determined by the action_.  Generally this means a single "
"command-line argument will be consumed and a single item (not a list) will "
"be produced. Actions that do not consume command-line arguments (e.g. "
"``'store_const'``) set ``nargs=0``."
msgstr ""

#: ../../library/argparse.rst:872
msgid "const"
msgstr "const"

#: ../../library/argparse.rst:874
msgid ""
"The ``const`` argument of :meth:`~ArgumentParser.add_argument` is used to "
"hold constant values that are not read from the command line but are "
"required for the various :class:`ArgumentParser` actions.  The two most "
"common uses of it are:"
msgstr ""
"O argumento ``const`` de :meth:`~ArgumentParser.add_argument` é usado para "
"manter valores constantes que não são lidos da linha de comando, mas são "
"necessários para as várias ações :class:`ArgumentParser`. Os dois usos mais "
"comuns são:"

#: ../../library/argparse.rst:878
msgid ""
"When :meth:`~ArgumentParser.add_argument` is called with "
"``action='store_const'`` or ``action='append_const'``.  These actions add "
"the ``const`` value to one of the attributes of the object returned by :meth:"
"`~ArgumentParser.parse_args`. See the action_ description for examples. If "
"``const`` is not provided to :meth:`~ArgumentParser.add_argument`, it will "
"receive a default value of ``None``."
msgstr ""
"Quando :meth:`~ArgumentParser.add_argument` é chamado com "
"``action='store_const'`` ou ``action='append_const'``. Essas ações adicionam "
"o valor ``const`` a um dos atributos do objeto retornado por :meth:"
"`~ArgumentParser.parse_args`. Consulte a descrição da action_ para obter "
"exemplos. Se ``const`` não for fornecido :meth:`~ArgumentParser."
"add_argument`, será recebido um valor padrão de ``None``."

#: ../../library/argparse.rst:886
msgid ""
"When :meth:`~ArgumentParser.add_argument` is called with option strings "
"(like ``-f`` or ``--foo``) and ``nargs='?'``.  This creates an optional "
"argument that can be followed by zero or one command-line arguments. When "
"parsing the command line, if the option string is encountered with no "
"command-line argument following it, the value of ``const`` will be assumed "
"to be ``None`` instead.  See the nargs_ description for examples."
msgstr ""
"Quando :meth:`~ArgumentParser.add_argument` é chamado com strings de opções "
"(como ``-f`` ou ``--foo``) e ``nargs='?'``. Isso cria um argumento opcional "
"que pode ser seguido por zero ou um argumento de linha de comando. Ao "
"analisar a linha de comando, se a string de opções for encontrada sem nenhum "
"argumento de linha de comando seguindo, o valor de ``const`` será presumido "
"como sendo ``None``. Veja a descrição de nargs_ para exemplos."

#: ../../library/argparse.rst:893
msgid ""
"``const=None`` by default, including when ``action='append_const'`` or "
"``action='store_const'``."
msgstr ""
"``const=None`` por padrão, incluindo quando ``action='append_const'`` ou "
"``action='store_const'``."

#: ../../library/argparse.rst:900
msgid "default"
msgstr "default"

#: ../../library/argparse.rst:902
msgid ""
"All optional arguments and some positional arguments may be omitted at the "
"command line.  The ``default`` keyword argument of :meth:`~ArgumentParser."
"add_argument`, whose value defaults to ``None``, specifies what value should "
"be used if the command-line argument is not present. For optional arguments, "
"the ``default`` value is used when the option string was not present at the "
"command line::"
msgstr ""
"Todos os argumentos opcionais e alguns argumentos posicionais podem ser "
"omitidos na linha de comando. O argumento nomeado ``default`` de :meth:"
"`~ArgumentParser.add_argument`, cujo valor padrão é ``None``, especifica "
"qual valor deve ser usado se o argumento de linha de comando não estiver "
"presente. Para argumentos opcionais, o valor ``default`` é usado quando a "
"string de opção não estava presente na linha de comando::"

#: ../../library/argparse.rst:909
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', default=42)\n"
">>> parser.parse_args(['--foo', '2'])\n"
"Namespace(foo='2')\n"
">>> parser.parse_args([])\n"
"Namespace(foo=42)"
msgstr ""

#: ../../library/argparse.rst:916
msgid ""
"If the target namespace already has an attribute set, the action *default* "
"will not overwrite it::"
msgstr ""

#: ../../library/argparse.rst:919
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', default=42)\n"
">>> parser.parse_args([], namespace=argparse.Namespace(foo=101))\n"
"Namespace(foo=101)"
msgstr ""

#: ../../library/argparse.rst:924
msgid ""
"If the ``default`` value is a string, the parser parses the value as if it "
"were a command-line argument.  In particular, the parser applies any type_ "
"conversion argument, if provided, before setting the attribute on the :class:"
"`Namespace` return value.  Otherwise, the parser uses the value as is::"
msgstr ""
"Se o valor ``default`` for uma string, o analisador analisa o valor como se "
"fosse um argumento de linha de comando. Em particular, o analisador aplica "
"qualquer argumento de conversão type_, se fornecido, antes de definir o "
"atributo no valor de retorno :class:`Namespace`. Caso contrário, o "
"analisador usa o valor como está::"

#: ../../library/argparse.rst:929
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--length', default='10', type=int)\n"
">>> parser.add_argument('--width', default=10.5, type=int)\n"
">>> parser.parse_args()\n"
"Namespace(length=10, width=10.5)"
msgstr ""

#: ../../library/argparse.rst:935
msgid ""
"For positional arguments with nargs_ equal to ``?`` or ``*``, the "
"``default`` value is used when no command-line argument was present::"
msgstr ""
"Para argumentos posicionais com nargs_ igual a ``?`` ou ``*``, o valor "
"``default`` é usado quando nenhum argumento de linha de comando estava "
"presente::"

#: ../../library/argparse.rst:938
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('foo', nargs='?', default=42)\n"
">>> parser.parse_args(['a'])\n"
"Namespace(foo='a')\n"
">>> parser.parse_args([])\n"
"Namespace(foo=42)"
msgstr ""

#: ../../library/argparse.rst:945
msgid ""
"For required_ arguments, the ``default`` value is ignored. For example, this "
"applies to positional arguments with nargs_ values other than ``?`` or "
"``*``, or optional arguments marked as ``required=True``."
msgstr ""

#: ../../library/argparse.rst:949
msgid ""
"Providing ``default=argparse.SUPPRESS`` causes no attribute to be added if "
"the command-line argument was not present::"
msgstr ""
"Fornecer ``default=argparse.SUPPRESS`` faz com que nenhum atributo seja "
"adicionado se o argumento da linha de comando não estiver presente::"

#: ../../library/argparse.rst:952
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', default=argparse.SUPPRESS)\n"
">>> parser.parse_args([])\n"
"Namespace()\n"
">>> parser.parse_args(['--foo', '1'])\n"
"Namespace(foo='1')"
msgstr ""

#: ../../library/argparse.rst:963
msgid "type"
msgstr "tipo"

#: ../../library/argparse.rst:965
msgid ""
"By default, the parser reads command-line arguments in as simple strings. "
"However, quite often the command-line string should instead be interpreted "
"as another type, such as a :class:`float` or :class:`int`.  The ``type`` "
"keyword for :meth:`~ArgumentParser.add_argument` allows any necessary type-"
"checking and type conversions to be performed."
msgstr ""
"Por padrão, o analisador sintático lê argumentos de linha de comando como "
"strings simples. No entanto, muitas vezes a string da linha de comando deve "
"ser interpretada como outro tipo, como :class:`float` ou :class:`int`. O "
"argumento nomeado ``type`` para :meth:`~ArgumentParser.add_argument` permite "
"que qualquer verificação de tipo e conversões de tipo necessárias sejam "
"realizadas."

#: ../../library/argparse.rst:971
msgid ""
"If the type_ keyword is used with the default_ keyword, the type converter "
"is only applied if the default is a string."
msgstr ""
"Se o argumento nomeado type_ for usado com default_, o conversor de tipo só "
"será aplicado se o padrão for uma string."

#: ../../library/argparse.rst:974
msgid ""
"The argument to ``type`` can be any callable that accepts a single string. "
"If the function raises :exc:`ArgumentTypeError`, :exc:`TypeError`, or :exc:"
"`ValueError`, the exception is caught and a nicely formatted error message "
"is displayed.  No other exception types are handled."
msgstr ""
"O argumento para ``type`` pode ser qualquer chamável que aceite uma única "
"string. Se a função levantar :exc:`ArgumentTypeError`, :exc:`TypeError` ou :"
"exc:`ValueError`, a exceção será capturada e uma mensagem de erro bem "
"formatada será exibida. Nenhum outro tipo de exceção é tratado."

#: ../../library/argparse.rst:979
msgid "Common built-in types and functions can be used as type converters:"
msgstr ""
"Tipos e funções embutidas comuns podem ser usados ​​como conversores de tipo:"

#: ../../library/argparse.rst:981
msgid ""
"import argparse\n"
"import pathlib\n"
"\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument('count', type=int)\n"
"parser.add_argument('distance', type=float)\n"
"parser.add_argument('street', type=ascii)\n"
"parser.add_argument('code_point', type=ord)\n"
"parser.add_argument('dest_file', type=argparse.FileType('w', "
"encoding='latin-1'))\n"
"parser.add_argument('datapath', type=pathlib.Path)"
msgstr ""

#: ../../library/argparse.rst:994
msgid "User defined functions can be used as well:"
msgstr "Funções definidas pelo usuário também podem ser usadas:"

#: ../../library/argparse.rst:996
msgid ""
">>> def hyphenated(string):\n"
"...     return '-'.join([word[:4] for word in string.casefold().split()])\n"
"...\n"
">>> parser = argparse.ArgumentParser()\n"
">>> _ = parser.add_argument('short_title', type=hyphenated)\n"
">>> parser.parse_args(['\"The Tale of Two Cities\"'])\n"
"Namespace(short_title='\"the-tale-of-two-citi')"
msgstr ""

#: ../../library/argparse.rst:1006
msgid ""
"The :func:`bool` function is not recommended as a type converter.  All it "
"does is convert empty strings to ``False`` and non-empty strings to "
"``True``. This is usually not what is desired."
msgstr ""
"A função :func:`bool` não é recomendada como conversor de tipo. Tudo o que "
"ele faz é converter strings vazias em ``False`` e strings não vazias em "
"``True``. Geralmente não é isso que se deseja."

#: ../../library/argparse.rst:1010
msgid ""
"In general, the ``type`` keyword is a convenience that should only be used "
"for simple conversions that can only raise one of the three supported "
"exceptions. Anything with more interesting error-handling or resource "
"management should be done downstream after the arguments are parsed."
msgstr ""
"Em geral, o argumento nomeado ``type`` é uma conveniência que só deve ser "
"usada para conversões simples que só podem gerar uma das três exceções "
"suportadas. Qualquer coisa com tratamento de erros ou gerenciamento de "
"recursos mais interessante deve ser feita posteriormente, após a análise dos "
"argumentos."

#: ../../library/argparse.rst:1015
msgid ""
"For example, JSON or YAML conversions have complex error cases that require "
"better reporting than can be given by the ``type`` keyword.  A :exc:`~json."
"JSONDecodeError` would not be well formatted and a :exc:`FileNotFoundError` "
"exception would not be handled at all."
msgstr ""
"Por exemplo, conversões JSON ou YAML têm casos de erros complexos que exigem "
"relatórios melhores do que os fornecidos pelo argumento nomeado ``type``. "
"Um :exc:`~json.JSONDecodeError` não seria bem formatado e uma exceção :exc:"
"`FileNotFoundError` não seria tratada."

#: ../../library/argparse.rst:1020
msgid ""
"Even :class:`~argparse.FileType` has its limitations for use with the "
"``type`` keyword.  If one argument uses :class:`~argparse.FileType` and then "
"a subsequent argument fails, an error is reported but the file is not "
"automatically closed.  In this case, it would be better to wait until after "
"the parser has run and then use the :keyword:`with`-statement to manage the "
"files."
msgstr ""

#: ../../library/argparse.rst:1027
msgid ""
"For type checkers that simply check against a fixed set of values, consider "
"using the choices_ keyword instead."
msgstr ""
"Para verificadores de tipo que simplesmente verificam um conjunto fixo de "
"valores, considere usar o argumento nomeado choices_."

#: ../../library/argparse.rst:1034
msgid "choices"
msgstr "choices"

#: ../../library/argparse.rst:1036
msgid ""
"Some command-line arguments should be selected from a restricted set of "
"values. These can be handled by passing a sequence object as the *choices* "
"keyword argument to :meth:`~ArgumentParser.add_argument`.  When the command "
"line is parsed, argument values will be checked, and an error message will "
"be displayed if the argument was not one of the acceptable values::"
msgstr ""
"Alguns argumentos de linha de comando devem ser selecionados em um conjunto "
"restrito de valores. Eles podem ser tratados passando um objeto sequência "
"como o argumento nomeado *choices* para :meth:`~ArgumentParser."
"add_argument`. Quando a linha de comando for analisada, os valores dos "
"argumentos serão verificados e uma mensagem de erro será exibida se o "
"argumento não for um dos valores aceitáveis::"

#: ../../library/argparse.rst:1042
msgid ""
">>> parser = argparse.ArgumentParser(prog='game.py')\n"
">>> parser.add_argument('move', choices=['rock', 'paper', 'scissors'])\n"
">>> parser.parse_args(['rock'])\n"
"Namespace(move='rock')\n"
">>> parser.parse_args(['fire'])\n"
"usage: game.py [-h] {rock,paper,scissors}\n"
"game.py: error: argument move: invalid choice: 'fire' (choose from 'rock',\n"
"'paper', 'scissors')"
msgstr ""

#: ../../library/argparse.rst:1051
msgid ""
"Note that inclusion in the *choices* sequence is checked after any type_ "
"conversions have been performed, so the type of the objects in the *choices* "
"sequence should match the type_ specified."
msgstr ""

#: ../../library/argparse.rst:1055
msgid ""
"Any sequence can be passed as the *choices* value, so :class:`list` "
"objects, :class:`tuple` objects, and custom sequences are all supported."
msgstr ""
"Qualquer sequência pode ser passada como o valor *choices*, portanto "
"objetos :class:`list`, objetos :class:`tuple` e sequências personalizadas "
"são todos suportados."

#: ../../library/argparse.rst:1058
msgid ""
"Use of :class:`enum.Enum` is not recommended because it is difficult to "
"control its appearance in usage, help, and error messages."
msgstr ""
"O uso de :class:`enum.Enum` não é recomendado porque é difícil controlar sua "
"aparência no uso, na ajuda e nas mensagens de erro."

#: ../../library/argparse.rst:1061
msgid ""
"Formatted choices override the default *metavar* which is normally derived "
"from *dest*.  This is usually what you want because the user never sees the "
"*dest* parameter.  If this display isn't desirable (perhaps because there "
"are many choices), just specify an explicit metavar_."
msgstr ""
"As opções formatadas substituem o *metavar* padrão que normalmente é "
"derivado de *dest*. Geralmente é isso que você deseja porque o usuário nunca "
"vê o parâmetro *dest*. Se esta exibição não for desejável (talvez porque "
"haja muitas opções), basta especificar um metavar_ explícito."

#: ../../library/argparse.rst:1070
msgid "required"
msgstr "required"

#: ../../library/argparse.rst:1072
msgid ""
"In general, the :mod:`!argparse` module assumes that flags like ``-f`` and "
"``--bar`` indicate *optional* arguments, which can always be omitted at the "
"command line. To make an option *required*, ``True`` can be specified for "
"the ``required=`` keyword argument to :meth:`~ArgumentParser.add_argument`::"
msgstr ""

#: ../../library/argparse.rst:1077
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', required=True)\n"
">>> parser.parse_args(['--foo', 'BAR'])\n"
"Namespace(foo='BAR')\n"
">>> parser.parse_args([])\n"
"usage: [-h] --foo FOO\n"
": error: the following arguments are required: --foo"
msgstr ""

#: ../../library/argparse.rst:1085
msgid ""
"As the example shows, if an option is marked as ``required``, :meth:"
"`~ArgumentParser.parse_args` will report an error if that option is not "
"present at the command line."
msgstr ""
"Como mostra o exemplo, se uma opção estiver marcada como ``required``, :meth:"
"`~ArgumentParser.parse_args` reportará um erro se essa opção não estiver "
"presente na linha de comando."

#: ../../library/argparse.rst:1091
msgid ""
"Required options are generally considered bad form because users expect "
"*options* to be *optional*, and thus they should be avoided when possible."
msgstr ""
"As opções obrigatórias são geralmente consideradas inadequadas porque os "
"usuários esperam que as *opções* sejam *opcionais* e, portanto, devem ser "
"evitadas quando possível."

#: ../../library/argparse.rst:1098
msgid "help"
msgstr "help"

#: ../../library/argparse.rst:1100
msgid ""
"The ``help`` value is a string containing a brief description of the "
"argument. When a user requests help (usually by using ``-h`` or ``--help`` "
"at the command line), these ``help`` descriptions will be displayed with "
"each argument."
msgstr ""

#: ../../library/argparse.rst:1105
msgid ""
"The ``help`` strings can include various format specifiers to avoid "
"repetition of things like the program name or the argument default_.  The "
"available specifiers include the program name, ``%(prog)s`` and most keyword "
"arguments to :meth:`~ArgumentParser.add_argument`, e.g. ``%(default)s``, "
"``%(type)s``, etc.::"
msgstr ""
"As strings ``help`` podem incluir vários especificadores de formato para "
"evitar a repetição de coisas como o nome do programa ou o argumento "
"default_. Os especificadores disponíveis incluem o nome do programa, "
"``%(prog)s`` e a maioria dos argumentos nomeados para :meth:`~ArgumentParser."
"add_argument`, por exemplo. ``%(default)s``, ``%(type)s``, etc.::"

#: ../../library/argparse.rst:1110
msgid ""
">>> parser = argparse.ArgumentParser(prog='frobble')\n"
">>> parser.add_argument('bar', nargs='?', type=int, default=42,\n"
"...                     help='the bar to %(prog)s (default: %(default)s)')\n"
">>> parser.print_help()\n"
"usage: frobble [-h] [bar]\n"
"\n"
"positional arguments:\n"
" bar     the bar to frobble (default: 42)\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit"
msgstr ""

#: ../../library/argparse.rst:1122
msgid ""
"As the help string supports %-formatting, if you want a literal ``%`` to "
"appear in the help string, you must escape it as ``%%``."
msgstr ""
"Como a string de ajuda oferece suporte à formatação com %, se você quiser "
"que um literal ``%`` apareça na string de ajuda, você deve escapá-lo como ``%"
"%``."

#: ../../library/argparse.rst:1125
msgid ""
":mod:`!argparse` supports silencing the help entry for certain options, by "
"setting the ``help`` value to ``argparse.SUPPRESS``::"
msgstr ""

#: ../../library/argparse.rst:1128
msgid ""
">>> parser = argparse.ArgumentParser(prog='frobble')\n"
">>> parser.add_argument('--foo', help=argparse.SUPPRESS)\n"
">>> parser.print_help()\n"
"usage: frobble [-h]\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit"
msgstr ""

#: ../../library/argparse.rst:1140
msgid "metavar"
msgstr "metavar"

#: ../../library/argparse.rst:1142
msgid ""
"When :class:`ArgumentParser` generates help messages, it needs some way to "
"refer to each expected argument.  By default, :class:`!ArgumentParser` "
"objects use the dest_ value as the \"name\" of each object.  By default, for "
"positional argument actions, the dest_ value is used directly, and for "
"optional argument actions, the dest_ value is uppercased.  So, a single "
"positional argument with ``dest='bar'`` will be referred to as ``bar``. A "
"single optional argument ``--foo`` that should be followed by a single "
"command-line argument will be referred to as ``FOO``.  An example::"
msgstr ""

#: ../../library/argparse.rst:1151
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo')\n"
">>> parser.add_argument('bar')\n"
">>> parser.parse_args('X --foo Y'.split())\n"
"Namespace(bar='X', foo='Y')\n"
">>> parser.print_help()\n"
"usage:  [-h] [--foo FOO] bar\n"
"\n"
"positional arguments:\n"
" bar\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
" --foo FOO"
msgstr ""

#: ../../library/argparse.rst:1166
msgid "An alternative name can be specified with ``metavar``::"
msgstr "Um nome alternativo pode ser especificado com ``metavar``::"

#: ../../library/argparse.rst:1168
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', metavar='YYY')\n"
">>> parser.add_argument('bar', metavar='XXX')\n"
">>> parser.parse_args('X --foo Y'.split())\n"
"Namespace(bar='X', foo='Y')\n"
">>> parser.print_help()\n"
"usage:  [-h] [--foo YYY] XXX\n"
"\n"
"positional arguments:\n"
" XXX\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
" --foo YYY"
msgstr ""

#: ../../library/argparse.rst:1183
msgid ""
"Note that ``metavar`` only changes the *displayed* name - the name of the "
"attribute on the :meth:`~ArgumentParser.parse_args` object is still "
"determined by the dest_ value."
msgstr ""
"Observe que ``metavar`` apenas altera o nome *exibido* - o nome do atributo "
"no objeto :meth:`~ArgumentParser.parse_args` ainda é determinado pelo valor "
"dest_."

#: ../../library/argparse.rst:1187
msgid ""
"Different values of ``nargs`` may cause the metavar to be used multiple "
"times. Providing a tuple to ``metavar`` specifies a different display for "
"each of the arguments::"
msgstr ""
"Valores diferentes de ``nargs`` podem fazer com que o metavar seja usado "
"múltiplas vezes. Fornecer uma tupla para ``metavar`` especifica uma exibição "
"diferente para cada um dos argumentos::"

#: ../../library/argparse.rst:1191
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-x', nargs=2)\n"
">>> parser.add_argument('--foo', nargs=2, metavar=('bar', 'baz'))\n"
">>> parser.print_help()\n"
"usage: PROG [-h] [-x X X] [--foo bar baz]\n"
"\n"
"options:\n"
" -h, --help     show this help message and exit\n"
" -x X X\n"
" --foo bar baz"
msgstr ""

#: ../../library/argparse.rst:1206
msgid "dest"
msgstr "dest"

#: ../../library/argparse.rst:1208
msgid ""
"Most :class:`ArgumentParser` actions add some value as an attribute of the "
"object returned by :meth:`~ArgumentParser.parse_args`.  The name of this "
"attribute is determined by the ``dest`` keyword argument of :meth:"
"`~ArgumentParser.add_argument`.  For positional argument actions, ``dest`` "
"is normally supplied as the first argument to :meth:`~ArgumentParser."
"add_argument`::"
msgstr ""
"A maioria das ações :class:`ArgumentParser` adiciona algum valor como um "
"atributo do objeto retornado por :meth:`~ArgumentParser.parse_args`. O nome "
"deste atributo é determinado pelo argumento nomeado ``dest`` de :meth:"
"`~ArgumentParser.add_argument`. Para ações de argumento posicional, ``dest`` "
"é normalmente fornecido como o primeiro argumento para :meth:"
"`~ArgumentParser.add_argument`::"

#: ../../library/argparse.rst:1215
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('bar')\n"
">>> parser.parse_args(['XXX'])\n"
"Namespace(bar='XXX')"
msgstr ""

#: ../../library/argparse.rst:1220
msgid ""
"For optional argument actions, the value of ``dest`` is normally inferred "
"from the option strings.  :class:`ArgumentParser` generates the value of "
"``dest`` by taking the first long option string and stripping away the "
"initial ``--`` string.  If no long option strings were supplied, ``dest`` "
"will be derived from the first short option string by stripping the initial "
"``-`` character.  Any internal ``-`` characters will be converted to ``_`` "
"characters to make sure the string is a valid attribute name.  The examples "
"below illustrate this behavior::"
msgstr ""
"Para ações de argumentos opcionais, o valor de ``dest`` é normalmente "
"inferido das strings de opções. :class:`ArgumentParser` gera o valor de "
"``dest`` pegando a primeira string de opção longa e removendo a string "
"inicial ``--``. Se nenhuma string de opção longa for fornecida, ``dest`` "
"será derivado da primeira string de opção curta removendo o caractere ``-`` "
"inicial.  Quaisquer caracteres ``-`` internos serão convertidos em "
"caracteres ``_`` para garantir que a string seja um nome de atributo válido. "
"Os exemplos abaixo ilustram esse comportamento:"

#: ../../library/argparse.rst:1229
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('-f', '--foo-bar', '--foo')\n"
">>> parser.add_argument('-x', '-y')\n"
">>> parser.parse_args('-f 1 -x 2'.split())\n"
"Namespace(foo_bar='1', x='2')\n"
">>> parser.parse_args('--foo 1 -y 2'.split())\n"
"Namespace(foo_bar='1', x='2')"
msgstr ""

#: ../../library/argparse.rst:1237
msgid "``dest`` allows a custom attribute name to be provided::"
msgstr ""
"``dest`` permite que um nome de atributo personalizado seja fornecido::"

#: ../../library/argparse.rst:1239
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', dest='bar')\n"
">>> parser.parse_args('--foo XXX'.split())\n"
"Namespace(bar='XXX')"
msgstr ""

#: ../../library/argparse.rst:1245
msgid "Action classes"
msgstr "Classes de ação"

#: ../../library/argparse.rst:1247
msgid ""
":class:`!Action` classes implement the Action API, a callable which returns "
"a callable which processes arguments from the command-line. Any object which "
"follows this API may be passed as the ``action`` parameter to :meth:"
"`~ArgumentParser.add_argument`."
msgstr ""

#: ../../library/argparse.rst:1256
msgid ""
":class:`!Action` objects are used by an :class:`ArgumentParser` to represent "
"the information needed to parse a single argument from one or more strings "
"from the command line. The :class:`!Action` class must accept the two "
"positional arguments plus any keyword arguments passed to :meth:"
"`ArgumentParser.add_argument` except for the ``action`` itself."
msgstr ""

#: ../../library/argparse.rst:1262
msgid ""
"Instances of :class:`!Action` (or return value of any callable to the "
"``action`` parameter) should have attributes :attr:`!dest`, :attr:`!"
"option_strings`, :attr:`!default`, :attr:`!type`, :attr:`!required`, :attr:`!"
"help`, etc. defined. The easiest way to ensure these attributes are defined "
"is to call :meth:`!Action.__init__`."
msgstr ""

#: ../../library/argparse.rst:1270
msgid ""
":class:`!Action` instances should be callable, so subclasses must override "
"the :meth:`!__call__` method, which should accept four parameters:"
msgstr ""

#: ../../library/argparse.rst:1273
msgid ""
"*parser* - The :class:`ArgumentParser` object which contains this action."
msgstr ""

#: ../../library/argparse.rst:1275
msgid ""
"*namespace* - The :class:`Namespace` object that will be returned by :meth:"
"`~ArgumentParser.parse_args`.  Most actions add an attribute to this object "
"using :func:`setattr`."
msgstr ""

#: ../../library/argparse.rst:1279
msgid ""
"*values* - The associated command-line arguments, with any type conversions "
"applied.  Type conversions are specified with the type_ keyword argument to :"
"meth:`~ArgumentParser.add_argument`."
msgstr ""

#: ../../library/argparse.rst:1283
msgid ""
"*option_string* - The option string that was used to invoke this action. The "
"``option_string`` argument is optional, and will be absent if the action is "
"associated with a positional argument."
msgstr ""

#: ../../library/argparse.rst:1287
msgid ""
"The :meth:`!__call__` method may perform arbitrary actions, but will "
"typically set attributes on the ``namespace`` based on ``dest`` and "
"``values``."
msgstr ""

#: ../../library/argparse.rst:1292
msgid ""
":class:`!Action` subclasses can define a :meth:`!format_usage` method that "
"takes no argument and return a string which will be used when printing the "
"usage of the program. If such method is not provided, a sensible default "
"will be used."
msgstr ""

#: ../../library/argparse.rst:1298
msgid "The parse_args() method"
msgstr ""

#: ../../library/argparse.rst:1302
msgid ""
"Convert argument strings to objects and assign them as attributes of the "
"namespace.  Return the populated namespace."
msgstr ""

#: ../../library/argparse.rst:1305
msgid ""
"Previous calls to :meth:`add_argument` determine exactly what objects are "
"created and how they are assigned. See the documentation for :meth:`!"
"add_argument` for details."
msgstr ""

#: ../../library/argparse.rst:1309
msgid ""
"args_ - List of strings to parse.  The default is taken from :data:`sys."
"argv`."
msgstr ""

#: ../../library/argparse.rst:1312
msgid ""
"namespace_ - An object to take the attributes.  The default is a new empty :"
"class:`Namespace` object."
msgstr ""

#: ../../library/argparse.rst:1317
msgid "Option value syntax"
msgstr ""

#: ../../library/argparse.rst:1319
msgid ""
"The :meth:`~ArgumentParser.parse_args` method supports several ways of "
"specifying the value of an option (if it takes one).  In the simplest case, "
"the option and its value are passed as two separate arguments::"
msgstr ""

#: ../../library/argparse.rst:1323
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-x')\n"
">>> parser.add_argument('--foo')\n"
">>> parser.parse_args(['-x', 'X'])\n"
"Namespace(foo=None, x='X')\n"
">>> parser.parse_args(['--foo', 'FOO'])\n"
"Namespace(foo='FOO', x=None)"
msgstr ""

#: ../../library/argparse.rst:1331
msgid ""
"For long options (options with names longer than a single character), the "
"option and value can also be passed as a single command-line argument, using "
"``=`` to separate them::"
msgstr ""

#: ../../library/argparse.rst:1335
msgid ""
">>> parser.parse_args(['--foo=FOO'])\n"
"Namespace(foo='FOO', x=None)"
msgstr ""

#: ../../library/argparse.rst:1338
msgid ""
"For short options (options only one character long), the option and its "
"value can be concatenated::"
msgstr ""

#: ../../library/argparse.rst:1341
msgid ""
">>> parser.parse_args(['-xX'])\n"
"Namespace(foo=None, x='X')"
msgstr ""

#: ../../library/argparse.rst:1344
msgid ""
"Several short options can be joined together, using only a single ``-`` "
"prefix, as long as only the last option (or none of them) requires a value::"
msgstr ""

#: ../../library/argparse.rst:1347
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-x', action='store_true')\n"
">>> parser.add_argument('-y', action='store_true')\n"
">>> parser.add_argument('-z')\n"
">>> parser.parse_args(['-xyzZ'])\n"
"Namespace(x=True, y=True, z='Z')"
msgstr ""

#: ../../library/argparse.rst:1356
msgid "Invalid arguments"
msgstr "Argumentos inválidos"

#: ../../library/argparse.rst:1358
msgid ""
"While parsing the command line, :meth:`~ArgumentParser.parse_args` checks "
"for a variety of errors, including ambiguous options, invalid types, invalid "
"options, wrong number of positional arguments, etc.  When it encounters such "
"an error, it exits and prints the error along with a usage message::"
msgstr ""

#: ../../library/argparse.rst:1363
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('--foo', type=int)\n"
">>> parser.add_argument('bar', nargs='?')\n"
"\n"
">>> # invalid type\n"
">>> parser.parse_args(['--foo', 'spam'])\n"
"usage: PROG [-h] [--foo FOO] [bar]\n"
"PROG: error: argument --foo: invalid int value: 'spam'\n"
"\n"
">>> # invalid option\n"
">>> parser.parse_args(['--bar'])\n"
"usage: PROG [-h] [--foo FOO] [bar]\n"
"PROG: error: no such option: --bar\n"
"\n"
">>> # wrong number of arguments\n"
">>> parser.parse_args(['spam', 'badger'])\n"
"usage: PROG [-h] [--foo FOO] [bar]\n"
"PROG: error: extra arguments found: badger"
msgstr ""

#: ../../library/argparse.rst:1384
msgid "Arguments containing ``-``"
msgstr "Argumentos contendo ``-``"

#: ../../library/argparse.rst:1386
msgid ""
"The :meth:`~ArgumentParser.parse_args` method attempts to give errors "
"whenever the user has clearly made a mistake, but some situations are "
"inherently ambiguous.  For example, the command-line argument ``-1`` could "
"either be an attempt to specify an option or an attempt to provide a "
"positional argument. The :meth:`~ArgumentParser.parse_args` method is "
"cautious here: positional arguments may only begin with ``-`` if they look "
"like negative numbers and there are no options in the parser that look like "
"negative numbers::"
msgstr ""

#: ../../library/argparse.rst:1394
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-x')\n"
">>> parser.add_argument('foo', nargs='?')\n"
"\n"
">>> # no negative number options, so -1 is a positional argument\n"
">>> parser.parse_args(['-x', '-1'])\n"
"Namespace(foo=None, x='-1')\n"
"\n"
">>> # no negative number options, so -1 and -5 are positional arguments\n"
">>> parser.parse_args(['-x', '-1', '-5'])\n"
"Namespace(foo='-5', x='-1')\n"
"\n"
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-1', dest='one')\n"
">>> parser.add_argument('foo', nargs='?')\n"
"\n"
">>> # negative number options present, so -1 is an option\n"
">>> parser.parse_args(['-1', 'X'])\n"
"Namespace(foo=None, one='X')\n"
"\n"
">>> # negative number options present, so -2 is an option\n"
">>> parser.parse_args(['-2'])\n"
"usage: PROG [-h] [-1 ONE] [foo]\n"
"PROG: error: no such option: -2\n"
"\n"
">>> # negative number options present, so both -1s are options\n"
">>> parser.parse_args(['-1', '-1'])\n"
"usage: PROG [-h] [-1 ONE] [foo]\n"
"PROG: error: argument -1: expected one argument"
msgstr ""

#: ../../library/argparse.rst:1424
msgid ""
"If you have positional arguments that must begin with ``-`` and don't look "
"like negative numbers, you can insert the pseudo-argument ``'--'`` which "
"tells :meth:`~ArgumentParser.parse_args` that everything after that is a "
"positional argument::"
msgstr ""

#: ../../library/argparse.rst:1429
msgid ""
">>> parser.parse_args(['--', '-f'])\n"
"Namespace(foo='-f', one=None)"
msgstr ""

#: ../../library/argparse.rst:1432
msgid ""
"See also :ref:`the argparse howto on ambiguous arguments <specifying-"
"ambiguous-arguments>` for more details."
msgstr ""

#: ../../library/argparse.rst:1438
msgid "Argument abbreviations (prefix matching)"
msgstr ""

#: ../../library/argparse.rst:1440
msgid ""
"The :meth:`~ArgumentParser.parse_args` method :ref:`by default "
"<allow_abbrev>` allows long options to be abbreviated to a prefix, if the "
"abbreviation is unambiguous (the prefix matches a unique option)::"
msgstr ""

#: ../../library/argparse.rst:1444
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-bacon')\n"
">>> parser.add_argument('-badger')\n"
">>> parser.parse_args('-bac MMM'.split())\n"
"Namespace(bacon='MMM', badger=None)\n"
">>> parser.parse_args('-bad WOOD'.split())\n"
"Namespace(bacon=None, badger='WOOD')\n"
">>> parser.parse_args('-ba BA'.split())\n"
"usage: PROG [-h] [-bacon BACON] [-badger BADGER]\n"
"PROG: error: ambiguous option: -ba could match -badger, -bacon"
msgstr ""

#: ../../library/argparse.rst:1455
msgid ""
"An error is produced for arguments that could produce more than one options. "
"This feature can be disabled by setting :ref:`allow_abbrev` to ``False``."
msgstr ""

#: ../../library/argparse.rst:1461
msgid "Beyond ``sys.argv``"
msgstr "Além do ``sys.argv``"

#: ../../library/argparse.rst:1463
msgid ""
"Sometimes it may be useful to have an :class:`ArgumentParser` parse "
"arguments other than those of :data:`sys.argv`.  This can be accomplished by "
"passing a list of strings to :meth:`~ArgumentParser.parse_args`.  This is "
"useful for testing at the interactive prompt::"
msgstr ""

#: ../../library/argparse.rst:1468
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument(\n"
"...     'integers', metavar='int', type=int, choices=range(10),\n"
"...     nargs='+', help='an integer in the range 0..9')\n"
">>> parser.add_argument(\n"
"...     '--sum', dest='accumulate', action='store_const', const=sum,\n"
"...     default=max, help='sum the integers (default: find the max)')\n"
">>> parser.parse_args(['1', '2', '3', '4'])\n"
"Namespace(accumulate=<built-in function max>, integers=[1, 2, 3, 4])\n"
">>> parser.parse_args(['1', '2', '3', '4', '--sum'])\n"
"Namespace(accumulate=<built-in function sum>, integers=[1, 2, 3, 4])"
msgstr ""

#: ../../library/argparse.rst:1483
msgid "The Namespace object"
msgstr "O objeto Namespace"

#: ../../library/argparse.rst:1487
msgid ""
"Simple class used by default by :meth:`~ArgumentParser.parse_args` to create "
"an object holding attributes and return it."
msgstr ""

#: ../../library/argparse.rst:1490
msgid ""
"This class is deliberately simple, just an :class:`object` subclass with a "
"readable string representation. If you prefer to have dict-like view of the "
"attributes, you can use the standard Python idiom, :func:`vars`::"
msgstr ""

#: ../../library/argparse.rst:1494
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo')\n"
">>> args = parser.parse_args(['--foo', 'BAR'])\n"
">>> vars(args)\n"
"{'foo': 'BAR'}"
msgstr ""

#: ../../library/argparse.rst:1500
msgid ""
"It may also be useful to have an :class:`ArgumentParser` assign attributes "
"to an already existing object, rather than a new :class:`Namespace` object.  "
"This can be achieved by specifying the ``namespace=`` keyword argument::"
msgstr ""

#: ../../library/argparse.rst:1504
msgid ""
">>> class C:\n"
"...     pass\n"
"...\n"
">>> c = C()\n"
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo')\n"
">>> parser.parse_args(args=['--foo', 'BAR'], namespace=c)\n"
">>> c.foo\n"
"'BAR'"
msgstr ""

#: ../../library/argparse.rst:1516
msgid "Other utilities"
msgstr ""

#: ../../library/argparse.rst:1519
msgid "Sub-commands"
msgstr "Sub-comandos"

#: ../../library/argparse.rst:1526
msgid ""
"Many programs split up their functionality into a number of subcommands, for "
"example, the ``svn`` program can invoke subcommands like ``svn checkout``, "
"``svn update``, and ``svn commit``.  Splitting up functionality this way can "
"be a particularly good idea when a program performs several different "
"functions which require different kinds of command-line arguments. :class:"
"`ArgumentParser` supports the creation of such subcommands with the :meth:`!"
"add_subparsers` method.  The :meth:`!add_subparsers` method is normally "
"called with no arguments and returns a special action object.  This object "
"has a single method, :meth:`~_SubParsersAction.add_parser`, which takes a "
"command name and any :class:`!ArgumentParser` constructor arguments, and "
"returns an :class:`!ArgumentParser` object that can be modified as usual."
msgstr ""

#: ../../library/argparse.rst:1538
msgid "Description of parameters:"
msgstr "Descrição de parâmetros:"

#: ../../library/argparse.rst:1540
msgid ""
"*title* - title for the sub-parser group in help output; by default "
"\"subcommands\" if description is provided, otherwise uses title for "
"positional arguments"
msgstr ""

#: ../../library/argparse.rst:1544
msgid ""
"*description* - description for the sub-parser group in help output, by "
"default ``None``"
msgstr ""

#: ../../library/argparse.rst:1547
msgid ""
"*prog* - usage information that will be displayed with sub-command help, by "
"default the name of the program and any positional arguments before the "
"subparser argument"
msgstr ""

#: ../../library/argparse.rst:1551
msgid ""
"*parser_class* - class which will be used to create sub-parser instances, by "
"default the class of the current parser (e.g. :class:`ArgumentParser`)"
msgstr ""

#: ../../library/argparse.rst:1554
msgid ""
"action_ - the basic type of action to be taken when this argument is "
"encountered at the command line"
msgstr ""

#: ../../library/argparse.rst:1557
msgid ""
"dest_ - name of the attribute under which sub-command name will be stored; "
"by default ``None`` and no value is stored"
msgstr ""

#: ../../library/argparse.rst:1560
msgid ""
"required_ - Whether or not a subcommand must be provided, by default "
"``False`` (added in 3.7)"
msgstr ""

#: ../../library/argparse.rst:1563
msgid "help_ - help for sub-parser group in help output, by default ``None``"
msgstr ""

#: ../../library/argparse.rst:1565
msgid ""
"metavar_ - string presenting available subcommands in help; by default it is "
"``None`` and presents subcommands in form {cmd1, cmd2, ..}"
msgstr ""

#: ../../library/argparse.rst:1568
msgid "Some example usage::"
msgstr "Alguns exemplos de uso::"

#: ../../library/argparse.rst:1570
msgid ""
">>> # create the top-level parser\n"
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('--foo', action='store_true', help='foo help')\n"
">>> subparsers = parser.add_subparsers(help='subcommand help')\n"
">>>\n"
">>> # create the parser for the \"a\" command\n"
">>> parser_a = subparsers.add_parser('a', help='a help')\n"
">>> parser_a.add_argument('bar', type=int, help='bar help')\n"
">>>\n"
">>> # create the parser for the \"b\" command\n"
">>> parser_b = subparsers.add_parser('b', help='b help')\n"
">>> parser_b.add_argument('--baz', choices=('X', 'Y', 'Z'), help='baz "
"help')\n"
">>>\n"
">>> # parse some argument lists\n"
">>> parser.parse_args(['a', '12'])\n"
"Namespace(bar=12, foo=False)\n"
">>> parser.parse_args(['--foo', 'b', '--baz', 'Z'])\n"
"Namespace(baz='Z', foo=True)"
msgstr ""

#: ../../library/argparse.rst:1589
msgid ""
"Note that the object returned by :meth:`parse_args` will only contain "
"attributes for the main parser and the subparser that was selected by the "
"command line (and not any other subparsers).  So in the example above, when "
"the ``a`` command is specified, only the ``foo`` and ``bar`` attributes are "
"present, and when the ``b`` command is specified, only the ``foo`` and "
"``baz`` attributes are present."
msgstr ""

#: ../../library/argparse.rst:1596
msgid ""
"Similarly, when a help message is requested from a subparser, only the help "
"for that particular parser will be printed.  The help message will not "
"include parent parser or sibling parser messages.  (A help message for each "
"subparser command, however, can be given by supplying the ``help=`` argument "
"to :meth:`~_SubParsersAction.add_parser` as above.)"
msgstr ""

#: ../../library/argparse.rst:1604
msgid ""
">>> parser.parse_args(['--help'])\n"
"usage: PROG [-h] [--foo] {a,b} ...\n"
"\n"
"positional arguments:\n"
"  {a,b}   subcommand help\n"
"    a     a help\n"
"    b     b help\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"  --foo   foo help\n"
"\n"
">>> parser.parse_args(['a', '--help'])\n"
"usage: PROG a [-h] bar\n"
"\n"
"positional arguments:\n"
"  bar     bar help\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"\n"
">>> parser.parse_args(['b', '--help'])\n"
"usage: PROG b [-h] [--baz {X,Y,Z}]\n"
"\n"
"options:\n"
"  -h, --help     show this help message and exit\n"
"  --baz {X,Y,Z}  baz help"
msgstr ""

#: ../../library/argparse.rst:1632
msgid ""
"The :meth:`add_subparsers` method also supports ``title`` and "
"``description`` keyword arguments.  When either is present, the subparser's "
"commands will appear in their own group in the help output.  For example::"
msgstr ""

#: ../../library/argparse.rst:1636
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> subparsers = parser.add_subparsers(title='subcommands',\n"
"...                                    description='valid subcommands',\n"
"...                                    help='additional help')\n"
">>> subparsers.add_parser('foo')\n"
">>> subparsers.add_parser('bar')\n"
">>> parser.parse_args(['-h'])\n"
"usage:  [-h] {foo,bar} ...\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"\n"
"subcommands:\n"
"  valid subcommands\n"
"\n"
"  {foo,bar}   additional help"
msgstr ""

#: ../../library/argparse.rst:1653
msgid ""
"Furthermore, ``add_parser`` supports an additional ``aliases`` argument, "
"which allows multiple strings to refer to the same subparser. This example, "
"like ``svn``, aliases ``co`` as a shorthand for ``checkout``::"
msgstr ""

#: ../../library/argparse.rst:1657
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> subparsers = parser.add_subparsers()\n"
">>> checkout = subparsers.add_parser('checkout', aliases=['co'])\n"
">>> checkout.add_argument('foo')\n"
">>> parser.parse_args(['co', 'bar'])\n"
"Namespace(foo='bar')"
msgstr ""

#: ../../library/argparse.rst:1664
msgid ""
"One particularly effective way of handling sub-commands is to combine the "
"use of the :meth:`add_subparsers` method with calls to :meth:`set_defaults` "
"so that each subparser knows which Python function it should execute.  For "
"example::"
msgstr ""

#: ../../library/argparse.rst:1669
msgid ""
">>> # subcommand functions\n"
">>> def foo(args):\n"
"...     print(args.x * args.y)\n"
"...\n"
">>> def bar(args):\n"
"...     print('((%s))' % args.z)\n"
"...\n"
">>> # create the top-level parser\n"
">>> parser = argparse.ArgumentParser()\n"
">>> subparsers = parser.add_subparsers(required=True)\n"
">>>\n"
">>> # create the parser for the \"foo\" command\n"
">>> parser_foo = subparsers.add_parser('foo')\n"
">>> parser_foo.add_argument('-x', type=int, default=1)\n"
">>> parser_foo.add_argument('y', type=float)\n"
">>> parser_foo.set_defaults(func=foo)\n"
">>>\n"
">>> # create the parser for the \"bar\" command\n"
">>> parser_bar = subparsers.add_parser('bar')\n"
">>> parser_bar.add_argument('z')\n"
">>> parser_bar.set_defaults(func=bar)\n"
">>>\n"
">>> # parse the args and call whatever function was selected\n"
">>> args = parser.parse_args('foo 1 -x 2'.split())\n"
">>> args.func(args)\n"
"2.0\n"
">>>\n"
">>> # parse the args and call whatever function was selected\n"
">>> args = parser.parse_args('bar XYZYX'.split())\n"
">>> args.func(args)\n"
"((XYZYX))"
msgstr ""

#: ../../library/argparse.rst:1701
msgid ""
"This way, you can let :meth:`parse_args` do the job of calling the "
"appropriate function after argument parsing is complete.  Associating "
"functions with actions like this is typically the easiest way to handle the "
"different actions for each of your subparsers.  However, if it is necessary "
"to check the name of the subparser that was invoked, the ``dest`` keyword "
"argument to the :meth:`add_subparsers` call will work::"
msgstr ""

#: ../../library/argparse.rst:1708
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> subparsers = parser.add_subparsers(dest='subparser_name')\n"
">>> subparser1 = subparsers.add_parser('1')\n"
">>> subparser1.add_argument('-x')\n"
">>> subparser2 = subparsers.add_parser('2')\n"
">>> subparser2.add_argument('y')\n"
">>> parser.parse_args(['2', 'frobble'])\n"
"Namespace(subparser_name='2', y='frobble')"
msgstr ""

#: ../../library/argparse.rst:1717
msgid "New *required* keyword-only parameter."
msgstr ""

#: ../../library/argparse.rst:1722
msgid "FileType objects"
msgstr "Objetos FileType"

#: ../../library/argparse.rst:1726
msgid ""
"The :class:`FileType` factory creates objects that can be passed to the type "
"argument of :meth:`ArgumentParser.add_argument`.  Arguments that have :class:"
"`FileType` objects as their type will open command-line arguments as files "
"with the requested modes, buffer sizes, encodings and error handling (see "
"the :func:`open` function for more details)::"
msgstr ""

#: ../../library/argparse.rst:1732
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--raw', type=argparse.FileType('wb', 0))\n"
">>> parser.add_argument('out', type=argparse.FileType('w', "
"encoding='UTF-8'))\n"
">>> parser.parse_args(['--raw', 'raw.dat', 'file.txt'])\n"
"Namespace(out=<_io.TextIOWrapper name='file.txt' mode='w' encoding='UTF-8'>, "
"raw=<_io.FileIO name='raw.dat' mode='wb'>)"
msgstr ""

#: ../../library/argparse.rst:1738
msgid ""
"FileType objects understand the pseudo-argument ``'-'`` and automatically "
"convert this into :data:`sys.stdin` for readable :class:`FileType` objects "
"and :data:`sys.stdout` for writable :class:`FileType` objects::"
msgstr ""

#: ../../library/argparse.rst:1742
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('infile', type=argparse.FileType('r'))\n"
">>> parser.parse_args(['-'])\n"
"Namespace(infile=<_io.TextIOWrapper name='<stdin>' encoding='UTF-8'>)"
msgstr ""

#: ../../library/argparse.rst:1747
msgid "Added the *encodings* and *errors* parameters."
msgstr ""

#: ../../library/argparse.rst:1752
msgid "Argument groups"
msgstr "Grupos de Argumentos"

#: ../../library/argparse.rst:1757
msgid ""
"By default, :class:`ArgumentParser` groups command-line arguments into "
"\"positional arguments\" and \"options\" when displaying help messages. When "
"there is a better conceptual grouping of arguments than this default one, "
"appropriate groups can be created using the :meth:`!add_argument_group` "
"method::"
msgstr ""

#: ../../library/argparse.rst:1763
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', add_help=False)\n"
">>> group = parser.add_argument_group('group')\n"
">>> group.add_argument('--foo', help='foo help')\n"
">>> group.add_argument('bar', help='bar help')\n"
">>> parser.print_help()\n"
"usage: PROG [--foo FOO] bar\n"
"\n"
"group:\n"
"  bar    bar help\n"
"  --foo FOO  foo help"
msgstr ""

#: ../../library/argparse.rst:1774
msgid ""
"The :meth:`add_argument_group` method returns an argument group object which "
"has an :meth:`~ArgumentParser.add_argument` method just like a regular :"
"class:`ArgumentParser`.  When an argument is added to the group, the parser "
"treats it just like a normal argument, but displays the argument in a "
"separate group for help messages.  The :meth:`!add_argument_group` method "
"accepts *title* and *description* arguments which can be used to customize "
"this display::"
msgstr ""

#: ../../library/argparse.rst:1782
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', add_help=False)\n"
">>> group1 = parser.add_argument_group('group1', 'group1 description')\n"
">>> group1.add_argument('foo', help='foo help')\n"
">>> group2 = parser.add_argument_group('group2', 'group2 description')\n"
">>> group2.add_argument('--bar', help='bar help')\n"
">>> parser.print_help()\n"
"usage: PROG [--bar BAR] foo\n"
"\n"
"group1:\n"
"  group1 description\n"
"\n"
"  foo    foo help\n"
"\n"
"group2:\n"
"  group2 description\n"
"\n"
"  --bar BAR  bar help"
msgstr ""

#: ../../library/argparse.rst:1800
msgid ""
"The optional, keyword-only parameters argument_default_ and "
"conflict_handler_ allow for finer-grained control of the behavior of the "
"argument group. These parameters have the same meaning as in the :class:"
"`ArgumentParser` constructor, but apply specifically to the argument group "
"rather than the entire parser."
msgstr ""

#: ../../library/argparse.rst:1805
msgid ""
"Note that any arguments not in your user-defined groups will end up back in "
"the usual \"positional arguments\" and \"optional arguments\" sections."
msgstr ""

#: ../../library/argparse.rst:1808
msgid ""
"Calling :meth:`add_argument_group` on an argument group is deprecated. This "
"feature was never supported and does not always work correctly. The function "
"exists on the API by accident through inheritance and will be removed in the "
"future."
msgstr ""

#: ../../library/argparse.rst:1816
msgid "Mutual exclusion"
msgstr "Exclusão Mútua"

#: ../../library/argparse.rst:1820
msgid ""
"Create a mutually exclusive group. :mod:`!argparse` will make sure that only "
"one of the arguments in the mutually exclusive group was present on the "
"command line::"
msgstr ""

#: ../../library/argparse.rst:1824
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> group = parser.add_mutually_exclusive_group()\n"
">>> group.add_argument('--foo', action='store_true')\n"
">>> group.add_argument('--bar', action='store_false')\n"
">>> parser.parse_args(['--foo'])\n"
"Namespace(bar=True, foo=True)\n"
">>> parser.parse_args(['--bar'])\n"
"Namespace(bar=False, foo=False)\n"
">>> parser.parse_args(['--foo', '--bar'])\n"
"usage: PROG [-h] [--foo | --bar]\n"
"PROG: error: argument --bar: not allowed with argument --foo"
msgstr ""

#: ../../library/argparse.rst:1836
msgid ""
"The :meth:`add_mutually_exclusive_group` method also accepts a *required* "
"argument, to indicate that at least one of the mutually exclusive arguments "
"is required::"
msgstr ""

#: ../../library/argparse.rst:1840
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> group = parser.add_mutually_exclusive_group(required=True)\n"
">>> group.add_argument('--foo', action='store_true')\n"
">>> group.add_argument('--bar', action='store_false')\n"
">>> parser.parse_args([])\n"
"usage: PROG [-h] (--foo | --bar)\n"
"PROG: error: one of the arguments --foo --bar is required"
msgstr ""

#: ../../library/argparse.rst:1848
msgid ""
"Note that currently mutually exclusive argument groups do not support the "
"*title* and *description* arguments of :meth:`~ArgumentParser."
"add_argument_group`. However, a mutually exclusive group can be added to an "
"argument group that has a title and description. For example::"
msgstr ""

#: ../../library/argparse.rst:1854
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> group = parser.add_argument_group('Group title', 'Group description')\n"
">>> exclusive_group = group.add_mutually_exclusive_group(required=True)\n"
">>> exclusive_group.add_argument('--foo', help='foo help')\n"
">>> exclusive_group.add_argument('--bar', help='bar help')\n"
">>> parser.print_help()\n"
"usage: PROG [-h] (--foo FOO | --bar BAR)\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"\n"
"Group title:\n"
"  Group description\n"
"\n"
"  --foo FOO   foo help\n"
"  --bar BAR   bar help"
msgstr ""

#: ../../library/argparse.rst:1871
msgid ""
"Calling :meth:`add_argument_group` or :meth:`add_mutually_exclusive_group` "
"on a mutually exclusive group is deprecated. These features were never "
"supported and do not always work correctly. The functions exist on the API "
"by accident through inheritance and will be removed in the future."
msgstr ""

#: ../../library/argparse.rst:1879
msgid "Parser defaults"
msgstr ""

#: ../../library/argparse.rst:1883
msgid ""
"Most of the time, the attributes of the object returned by :meth:"
"`parse_args` will be fully determined by inspecting the command-line "
"arguments and the argument actions.  :meth:`set_defaults` allows some "
"additional attributes that are determined without any inspection of the "
"command line to be added::"
msgstr ""

#: ../../library/argparse.rst:1889
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('foo', type=int)\n"
">>> parser.set_defaults(bar=42, baz='badger')\n"
">>> parser.parse_args(['736'])\n"
"Namespace(bar=42, baz='badger', foo=736)"
msgstr ""

#: ../../library/argparse.rst:1895
msgid ""
"Note that parser-level defaults always override argument-level defaults::"
msgstr ""

#: ../../library/argparse.rst:1897
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', default='bar')\n"
">>> parser.set_defaults(foo='spam')\n"
">>> parser.parse_args([])\n"
"Namespace(foo='spam')"
msgstr ""

#: ../../library/argparse.rst:1903
msgid ""
"Parser-level defaults can be particularly useful when working with multiple "
"parsers.  See the :meth:`~ArgumentParser.add_subparsers` method for an "
"example of this type."
msgstr ""

#: ../../library/argparse.rst:1909
msgid ""
"Get the default value for a namespace attribute, as set by either :meth:"
"`~ArgumentParser.add_argument` or by :meth:`~ArgumentParser.set_defaults`::"
msgstr ""

#: ../../library/argparse.rst:1913
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', default='badger')\n"
">>> parser.get_default('foo')\n"
"'badger'"
msgstr ""

#: ../../library/argparse.rst:1920
msgid "Printing help"
msgstr "Imprimindo a ajuda"

#: ../../library/argparse.rst:1922
msgid ""
"In most typical applications, :meth:`~ArgumentParser.parse_args` will take "
"care of formatting and printing any usage or error messages.  However, "
"several formatting methods are available:"
msgstr ""

#: ../../library/argparse.rst:1928
msgid ""
"Print a brief description of how the :class:`ArgumentParser` should be "
"invoked on the command line.  If *file* is ``None``, :data:`sys.stdout` is "
"assumed."
msgstr ""

#: ../../library/argparse.rst:1934
msgid ""
"Print a help message, including the program usage and information about the "
"arguments registered with the :class:`ArgumentParser`.  If *file* is "
"``None``, :data:`sys.stdout` is assumed."
msgstr ""

#: ../../library/argparse.rst:1938
msgid ""
"There are also variants of these methods that simply return a string instead "
"of printing it:"
msgstr ""

#: ../../library/argparse.rst:1943
msgid ""
"Return a string containing a brief description of how the :class:"
"`ArgumentParser` should be invoked on the command line."
msgstr ""

#: ../../library/argparse.rst:1948
msgid ""
"Return a string containing a help message, including the program usage and "
"information about the arguments registered with the :class:`ArgumentParser`."
msgstr ""

#: ../../library/argparse.rst:1953
msgid "Partial parsing"
msgstr "Análise parcial"

#: ../../library/argparse.rst:1957
msgid ""
"Sometimes a script may only parse a few of the command-line arguments, "
"passing the remaining arguments on to another script or program. In these "
"cases, the :meth:`~ArgumentParser.parse_known_args` method can be useful.  "
"It works much like :meth:`~ArgumentParser.parse_args` except that it does "
"not produce an error when extra arguments are present.  Instead, it returns "
"a two item tuple containing the populated namespace and the list of "
"remaining argument strings."
msgstr ""

#: ../../library/argparse.rst:1966
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action='store_true')\n"
">>> parser.add_argument('bar')\n"
">>> parser.parse_known_args(['--foo', '--badger', 'BAR', 'spam'])\n"
"(Namespace(bar='BAR', foo=True), ['--badger', 'spam'])"
msgstr ""

#: ../../library/argparse.rst:1973
msgid ""
":ref:`Prefix matching <prefix-matching>` rules apply to :meth:"
"`~ArgumentParser.parse_known_args`. The parser may consume an option even if "
"it's just a prefix of one of its known options, instead of leaving it in the "
"remaining arguments list."
msgstr ""

#: ../../library/argparse.rst:1980
msgid "Customizing file parsing"
msgstr ""

#: ../../library/argparse.rst:1984
msgid ""
"Arguments that are read from a file (see the *fromfile_prefix_chars* keyword "
"argument to the :class:`ArgumentParser` constructor) are read one argument "
"per line. :meth:`convert_arg_line_to_args` can be overridden for fancier "
"reading."
msgstr ""

#: ../../library/argparse.rst:1989
msgid ""
"This method takes a single argument *arg_line* which is a string read from "
"the argument file.  It returns a list of arguments parsed from this string. "
"The method is called once per line read from the argument file, in order."
msgstr ""

#: ../../library/argparse.rst:1993
msgid ""
"A useful override of this method is one that treats each space-separated "
"word as an argument.  The following example demonstrates how to do this::"
msgstr ""

#: ../../library/argparse.rst:1996
msgid ""
"class MyArgumentParser(argparse.ArgumentParser):\n"
"    def convert_arg_line_to_args(self, arg_line):\n"
"        return arg_line.split()"
msgstr ""

#: ../../library/argparse.rst:2002
msgid "Exiting methods"
msgstr "Métodos existentes"

#: ../../library/argparse.rst:2006
msgid ""
"This method terminates the program, exiting with the specified *status* and, "
"if given, it prints a *message* to :data:`sys.stderr` before that. The user "
"can override this method to handle these steps differently::"
msgstr ""

#: ../../library/argparse.rst:2010
msgid ""
"class ErrorCatchingArgumentParser(argparse.ArgumentParser):\n"
"    def exit(self, status=0, message=None):\n"
"        if status:\n"
"            raise Exception(f'Exiting because of an error: {message}')\n"
"        exit(status)"
msgstr ""

#: ../../library/argparse.rst:2018
msgid ""
"This method prints a usage message, including the *message*, to :data:`sys."
"stderr` and terminates the program with a status code of 2."
msgstr ""

#: ../../library/argparse.rst:2023
msgid "Intermixed parsing"
msgstr ""

#: ../../library/argparse.rst:2028
msgid ""
"A number of Unix commands allow the user to intermix optional arguments with "
"positional arguments.  The :meth:`~ArgumentParser.parse_intermixed_args` "
"and :meth:`~ArgumentParser.parse_known_intermixed_args` methods support this "
"parsing style."
msgstr ""

#: ../../library/argparse.rst:2033
msgid ""
"These parsers do not support all the :mod:`!argparse` features, and will "
"raise exceptions if unsupported features are used.  In particular, "
"subparsers, and mutually exclusive groups that include both optionals and "
"positionals are not supported."
msgstr ""

#: ../../library/argparse.rst:2038
msgid ""
"The following example shows the difference between :meth:`~ArgumentParser."
"parse_known_args` and :meth:`~ArgumentParser.parse_intermixed_args`: the "
"former returns ``['2', '3']`` as unparsed arguments, while the latter "
"collects all the positionals into ``rest``.  ::"
msgstr ""

#: ../../library/argparse.rst:2044
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo')\n"
">>> parser.add_argument('cmd')\n"
">>> parser.add_argument('rest', nargs='*', type=int)\n"
">>> parser.parse_known_args('doit 1 --foo bar 2 3'.split())\n"
"(Namespace(cmd='doit', foo='bar', rest=[1]), ['2', '3'])\n"
">>> parser.parse_intermixed_args('doit 1 --foo bar 2 3'.split())\n"
"Namespace(cmd='doit', foo='bar', rest=[1, 2, 3])"
msgstr ""

#: ../../library/argparse.rst:2053
msgid ""
":meth:`~ArgumentParser.parse_known_intermixed_args` returns a two item tuple "
"containing the populated namespace and the list of remaining argument "
"strings. :meth:`~ArgumentParser.parse_intermixed_args` raises an error if "
"there are any remaining unparsed argument strings."
msgstr ""

#: ../../library/argparse.rst:2062
msgid "Exceptions"
msgstr "Exceções"

#: ../../library/argparse.rst:2066
msgid "An error from creating or using an argument (optional or positional)."
msgstr ""

#: ../../library/argparse.rst:2068
msgid ""
"The string value of this exception is the message, augmented with "
"information about the argument that caused it."
msgstr ""

#: ../../library/argparse.rst:2073
msgid ""
"Raised when something goes wrong converting a command line string to a type."
msgstr ""

#: ../../library/argparse.rst:2077
msgid "Guides and Tutorials"
msgstr "Guias e tutoriais"

#: ../../library/argparse.rst:800
msgid "? (question mark)"
msgstr "? (interrogação)"

#: ../../library/argparse.rst:800 ../../library/argparse.rst:834
#: ../../library/argparse.rst:848
msgid "in argparse module"
msgstr ""

#: ../../library/argparse.rst:834
msgid "* (asterisk)"
msgstr "* (asterisco)"

#: ../../library/argparse.rst:848
msgid "+ (plus)"
msgstr "+ (mais)"
