# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-13 17:35+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/cmd.rst:2
msgid ":mod:`cmd` --- Support for line-oriented command interpreters"
msgstr ""
":mod:`cmd` --- Suporte para interpretadores de comando orientado a linhas"

#: ../../library/cmd.rst:9
msgid "**Source code:** :source:`Lib/cmd.py`"
msgstr "**Código-fonte:** :source:`Lib/cmd.py`"

#: ../../library/cmd.rst:13
msgid ""
"The :class:`Cmd` class provides a simple framework for writing line-oriented "
"command interpreters.  These are often useful for test harnesses, "
"administrative tools, and prototypes that will later be wrapped in a more "
"sophisticated interface."
msgstr ""
"A classe :class:`Cmd` fornece um framework simples para escrever "
"interpretadores de comando orientados a linhas. Eles são frequentemente "
"úteis para melhorar testes, ferramentas administrativas e protótipos que "
"mais tarde serão encapsulados em uma interface mais sofisticada."

#: ../../library/cmd.rst:20
msgid ""
"A :class:`Cmd` instance or subclass instance is a line-oriented interpreter "
"framework.  There is no good reason to instantiate :class:`Cmd` itself; "
"rather, it's useful as a superclass of an interpreter class you define "
"yourself in order to inherit :class:`Cmd`'s methods and encapsulate action "
"methods."
msgstr ""
"Uma instância de :class:`Cmd` ou instância de sua subclasse é um framework "
"de interpretador orientado a linhas. Não há um bom motivo para instanciar :"
"class:`Cmd` em si; em vez disso, ele é útil como uma superclasse de uma "
"classe de interpretador que você mesmo define para herdar os métodos de :"
"class:`Cmd` e encapsular métodos de ação."

#: ../../library/cmd.rst:25
msgid ""
"The optional argument *completekey* is the :mod:`readline` name of a "
"completion key; it defaults to :kbd:`Tab`. If *completekey* is not :const:"
"`None` and :mod:`readline` is available, command completion is done "
"automatically."
msgstr ""
"O argumento opcional *completekey* é o nome :mod:`readline` de uma chave de "
"conclusão; o padrão é :kbd:`Tab`. Se *completekey* não for :const:`None` e :"
"mod:`readline` estiver disponível, a conclusão do comando será feita "
"automaticamente."

#: ../../library/cmd.rst:29
msgid ""
"The optional arguments *stdin* and *stdout* specify the  input and output "
"file objects that the Cmd instance or subclass  instance will use for input "
"and output. If not specified, they will default to :data:`sys.stdin` and :"
"data:`sys.stdout`."
msgstr ""
"Os argumentos opcionais *stdin* e *stdout* especificam os objetos arquivo de "
"entrada e saída que a instância Cmd ou instância de sua subclasse usará para "
"entrada e saída. Se não forem especificados, eles serão padronizados para :"
"data:`sys.stdin` e :data:`sys.stdout`."

#: ../../library/cmd.rst:34
msgid ""
"If you want a given *stdin* to be used, make sure to set the instance's :"
"attr:`use_rawinput` attribute to ``False``, otherwise *stdin* will be "
"ignored."
msgstr ""
"Se você quiser que um determinado *stdin* seja usado, certifique-se de "
"definir o atributo :attr:`use_rawinput` da instância como ``False``, caso "
"contrário, *stdin* será ignorado."

#: ../../library/cmd.rst:42
msgid "Cmd Objects"
msgstr "Objetos Cmd"

#: ../../library/cmd.rst:44
msgid "A :class:`Cmd` instance has the following methods:"
msgstr "Uma instância :class:`Cmd` tem os seguintes métodos:"

#: ../../library/cmd.rst:49
msgid ""
"Repeatedly issue a prompt, accept input, parse an initial prefix off the "
"received input, and dispatch to action methods, passing them the remainder "
"of the line as argument."
msgstr ""
"Emite um prompt repetidamente, aceite a entrada, analise um prefixo inicial "
"da entrada recebida e despache para métodos de ação, passando a eles o "
"restante da linha como argumento."

#: ../../library/cmd.rst:53
msgid ""
"The optional argument is a banner or intro string to be issued before the "
"first prompt (this overrides the :attr:`intro` class attribute)."
msgstr ""
"O argumento opcional é um banner ou uma string de introdução a ser emitida "
"antes do primeiro prompt (isso substitui o atributo de classe :attr:`intro`)."

#: ../../library/cmd.rst:56
msgid ""
"If the :mod:`readline` module is loaded, input will automatically inherit :"
"program:`bash`\\ -like history-list editing (e.g. :kbd:`Control-P` scrolls "
"back to the last command, :kbd:`Control-N` forward to the next one, :kbd:"
"`Control-F` moves the cursor to the right non-destructively, :kbd:`Control-"
"B` moves the cursor to the left non-destructively, etc.)."
msgstr ""
"Se o módulo :mod:`readline` for carregado, a entrada vai herdar "
"automaticamente a edição de lista de histórico semelhante a :program:`bash` "
"(por exemplo, :kbd:`Control-P` retorna ao último comando, :kbd:`Control-N` "
"avança para o próximo, :kbd:`Control-F` move o cursor para a direita de "
"forma não destrutiva, :kbd:`Control-B` move o cursor para a esquerda de "
"forma não destrutiva, etc.)."

#: ../../library/cmd.rst:62
msgid "An end-of-file on input is passed back as the string ``'EOF'``."
msgstr "Um fim de arquivo na entrada é retornado como a string ``'EOF'``."

#: ../../library/cmd.rst:68
msgid ""
"An interpreter instance will recognize a command name ``foo`` if and only if "
"it has a method :meth:`do_foo`.  As a special case, a line beginning with "
"the character ``'?'`` is dispatched to the method :meth:`do_help`.  As "
"another special case, a line beginning with the character ``'!'`` is "
"dispatched to the method :meth:`do_shell` (if such a method is defined)."
msgstr ""

#: ../../library/cmd.rst:74
msgid ""
"This method will return when the :meth:`postcmd` method returns a true "
"value. The *stop* argument to :meth:`postcmd` is the return value from the "
"command's corresponding :meth:`do_\\*` method."
msgstr ""

#: ../../library/cmd.rst:78
msgid ""
"If completion is enabled, completing commands will be done automatically, "
"and completing of commands args is done by calling :meth:`complete_foo` with "
"arguments *text*, *line*, *begidx*, and *endidx*.  *text* is the string "
"prefix we are attempting to match: all returned matches must begin with it. "
"*line* is the current input line with leading whitespace removed, *begidx* "
"and *endidx* are the beginning and ending indexes of the prefix text, which "
"could be used to provide different completion depending upon which position "
"the argument is in."
msgstr ""

#: ../../library/cmd.rst:86
msgid ""
"All subclasses of :class:`Cmd` inherit a predefined :meth:`do_help`.  This "
"method, called with an argument ``'bar'``, invokes the corresponding method :"
"meth:`help_bar`, and if that is not present, prints the docstring of :meth:"
"`do_bar`, if available.  With no argument, :meth:`do_help` lists all "
"available help topics (that is, all commands with corresponding :meth:"
"`help_\\*` methods or commands that have docstrings), and also lists any "
"undocumented commands."
msgstr ""

#: ../../library/cmd.rst:97
msgid ""
"Interpret the argument as though it had been typed in response to the "
"prompt. This may be overridden, but should not normally need to be; see the :"
"meth:`precmd` and :meth:`postcmd` methods for useful execution hooks.  The "
"return value is a flag indicating whether interpretation of commands by the "
"interpreter should stop.  If there is a :meth:`do_\\*` method for the "
"command *str*, the return value of that method is returned, otherwise the "
"return value from the :meth:`default` method is returned."
msgstr ""

#: ../../library/cmd.rst:108
msgid ""
"Method called when an empty line is entered in response to the prompt. If "
"this method is not overridden, it repeats the last nonempty command entered."
msgstr ""
"Método chamado quando uma linha vazia é inserida em resposta ao prompt. Se "
"esse método não for substituído, ele repete o último comando não vazio "
"inserido."

#: ../../library/cmd.rst:114
msgid ""
"Method called on an input line when the command prefix is not recognized. If "
"this method is not overridden, it prints an error message and returns."
msgstr ""
"Método chamado em uma linha de entrada quando o prefixo do comando não é "
"reconhecido. Se esse método não for substituído, ele imprime uma mensagem de "
"erro e retorna."

#: ../../library/cmd.rst:120
msgid ""
"Method called to complete an input line when no command-specific :meth:"
"`complete_\\*` method is available.  By default, it returns an empty list."
msgstr ""

#: ../../library/cmd.rst:126
msgid ""
"Hook method executed just before the command line *line* is interpreted, but "
"after the input prompt is generated and issued.  This method is a stub in :"
"class:`Cmd`; it exists to be overridden by subclasses.  The return value is "
"used as the command which will be executed by the :meth:`onecmd` method; "
"the :meth:`precmd` implementation may re-write the command or simply return "
"*line* unchanged."
msgstr ""
"Método gancho executado logo antes da linha de comando *line* ser "
"interpretada, mas depois que o prompt de entrada é gerado e emitido. Este "
"método é um stub em :class:`Cmd`; ele existe para ser substituído por "
"subclasses. O valor de retorno é usado como o comando que será executado "
"pelo método :meth:`onecmd`; a implementação :meth:`precmd` pode reescrever o "
"comando ou simplesmente retornar *line* inalterado."

#: ../../library/cmd.rst:136
msgid ""
"Hook method executed just after a command dispatch is finished.  This method "
"is a stub in :class:`Cmd`; it exists to be overridden by subclasses.  *line* "
"is the command line which was executed, and *stop* is a flag which indicates "
"whether execution will be terminated after the call to :meth:`postcmd`; this "
"will be the return value of the :meth:`onecmd` method.  The return value of "
"this method will be used as the new value for the internal flag which "
"corresponds to *stop*; returning false will cause interpretation to continue."
msgstr ""
"Método gancho executado logo após o término do despacho de um comando. Este "
"método é um stub em :class:`Cmd`; ele existe para ser substituído por "
"subclasses. *line* é a linha de comando que foi executada, e *stop* é um "
"sinalizador que indica se a execução será encerrada após a chamada para :"
"meth:`postcmd`; este será o valor de retorno do método :meth:`onecmd`. O "
"valor de retorno deste método será usado como o novo valor para o "
"sinalizador interno que corresponde a *stop*; retornar false fará com que a "
"interpretação continue."

#: ../../library/cmd.rst:147
msgid ""
"Hook method executed once when :meth:`cmdloop` is called.  This method is a "
"stub in :class:`Cmd`; it exists to be overridden by subclasses."
msgstr ""
"Método gancho executado uma vez quando :meth:`cmdloop` é chamado. Este "
"método é um stub em :class:`Cmd`; ele existe para ser substituído por "
"subclasses."

#: ../../library/cmd.rst:153
msgid ""
"Hook method executed once when :meth:`cmdloop` is about to return. This "
"method is a stub in :class:`Cmd`; it exists to be overridden by subclasses."
msgstr ""
"Método gancho executado uma vez quando :meth:`cmdloop` está para ser "
"retornado. Este método é um stub em :class:`Cmd`; ele existe para ser "
"substituído por subclasses."

#: ../../library/cmd.rst:157
msgid ""
"Instances of :class:`Cmd` subclasses have some public instance variables:"
msgstr ""
"Instâncias das subclasses :class:`Cmd` têm algumas variáveis de instância "
"públicas:"

#: ../../library/cmd.rst:161
msgid "The prompt issued to solicit input."
msgstr "O prompt emitido para solicitar informações."

#: ../../library/cmd.rst:166
msgid "The string of characters accepted for the command prefix."
msgstr "A sequência de caracteres aceita para o prefixo do comando."

#: ../../library/cmd.rst:171
msgid "The last nonempty command prefix seen."
msgstr "O último prefixo de comando não vazio visto."

#: ../../library/cmd.rst:176
msgid ""
"A list of queued input lines.  The cmdqueue list is checked in :meth:"
"`cmdloop` when new input is needed; if it is nonempty, its elements will be "
"processed in order, as if entered at the prompt."
msgstr ""
"Uma lista de linhas de entrada enfileiradas. A lista cmdqueue é verificada "
"em :meth:`cmdloop` quando uma nova entrada é necessária; se não estiver "
"vazia, seus elementos serão processados em ordem, como se tivessem sido "
"inseridos no prompt."

#: ../../library/cmd.rst:183
msgid ""
"A string to issue as an intro or banner.  May be overridden by giving the :"
"meth:`cmdloop` method an argument."
msgstr ""
"Uma string para emitir como uma introdução ou banner. Pode ser substituída "
"dando ao método :meth:`cmdloop` um argumento."

#: ../../library/cmd.rst:189
msgid ""
"The header to issue if the help output has a section for documented commands."
msgstr ""
"O cabeçalho a ser emitido se a saída de ajuda tiver uma seção para comandos "
"documentados."

#: ../../library/cmd.rst:194
msgid ""
"The header to issue if the help output has a section for miscellaneous  help "
"topics (that is, there are :meth:`help_\\*` methods without corresponding :"
"meth:`do_\\*` methods)."
msgstr ""

#: ../../library/cmd.rst:201
msgid ""
"The header to issue if the help output has a section for undocumented  "
"commands (that is, there are :meth:`do_\\*` methods without corresponding :"
"meth:`help_\\*` methods)."
msgstr ""

#: ../../library/cmd.rst:208
msgid ""
"The character used to draw separator lines under the help-message headers.  "
"If empty, no ruler line is drawn.  It defaults to ``'='``."
msgstr ""
"O caractere usado para desenhar linhas separadoras sob os cabeçalhos de "
"mensagem de ajuda. Se estiver vazio, nenhuma linha de régua será desenhada. "
"O padrão é ``'='``."

#: ../../library/cmd.rst:214
msgid ""
"A flag, defaulting to true.  If true, :meth:`cmdloop` uses :func:`input` to "
"display a prompt and read the next command; if false, :meth:`sys.stdout."
"write` and :meth:`sys.stdin.readline` are used. (This means that by "
"importing :mod:`readline`, on systems that support it, the interpreter will "
"automatically support :program:`Emacs`\\ -like line editing  and command-"
"history keystrokes.)"
msgstr ""

#: ../../library/cmd.rst:224
msgid "Cmd Example"
msgstr "Exemplo do Cmd"

#: ../../library/cmd.rst:228
msgid ""
"The :mod:`cmd` module is mainly useful for building custom shells that let a "
"user work with a program interactively."
msgstr ""
"O módulo :mod:`cmd` é útil principalmente para criar shells personalizados "
"que permitem ao usuário trabalhar com um programa interativamente."

#: ../../library/cmd.rst:231
msgid ""
"This section presents a simple example of how to build a shell around a few "
"of the commands in the :mod:`turtle` module."
msgstr ""
"Esta seção apresenta um exemplo simples de como construir um shell em torno "
"de alguns dos comandos do módulo :mod:`turtle`."

#: ../../library/cmd.rst:234
msgid ""
"Basic turtle commands such as :meth:`~turtle.forward` are added to a :class:"
"`Cmd` subclass with method named :meth:`do_forward`.  The argument is "
"converted to a number and dispatched to the turtle module.  The docstring is "
"used in the help utility provided by the shell."
msgstr ""

#: ../../library/cmd.rst:239
msgid ""
"The example also includes a basic record and playback facility implemented "
"with the :meth:`~Cmd.precmd` method which is responsible for converting the "
"input to lowercase and writing the commands to a file.  The :meth:"
"`do_playback` method reads the file and adds the recorded commands to the :"
"attr:`cmdqueue` for immediate playback::"
msgstr ""

#: ../../library/cmd.rst:320
msgid ""
"Here is a sample session with the turtle shell showing the help functions, "
"using blank lines to repeat commands, and the simple record and playback "
"facility:"
msgstr ""
"Aqui está uma sessão de exemplo com o shell do turtle mostrando as funções "
"de ajuda, usando linhas em branco para repetir comandos e o recurso simples "
"de gravação e reprodução:"
