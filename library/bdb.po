# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2021
# Vitor Buxbaum Orlandi, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-08 02:53-0300\n"
"PO-Revision-Date: 2021-06-28 00:55+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/bdb.rst:2
msgid ":mod:`!bdb` --- Debugger framework"
msgstr ""

#: ../../library/bdb.rst:7
msgid "**Source code:** :source:`Lib/bdb.py`"
msgstr "**Código-fonte:** :source:`Lib/bdb.py`"

#: ../../library/bdb.rst:11
msgid ""
"The :mod:`bdb` module handles basic debugger functions, like setting "
"breakpoints or managing execution via the debugger."
msgstr ""

#: ../../library/bdb.rst:14
msgid "The following exception is defined:"
msgstr "A seguinte exceção é definida:"

#: ../../library/bdb.rst:18
msgid "Exception raised by the :class:`Bdb` class for quitting the debugger."
msgstr ""

#: ../../library/bdb.rst:21
msgid "The :mod:`bdb` module also defines two classes:"
msgstr ""

#: ../../library/bdb.rst:25
msgid ""
"This class implements temporary breakpoints, ignore counts, disabling and "
"(re-)enabling, and conditionals."
msgstr ""

#: ../../library/bdb.rst:28
msgid ""
"Breakpoints are indexed by number through a list called :attr:`bpbynumber` "
"and by ``(file, line)`` pairs through :attr:`bplist`.  The former points to "
"a single instance of class :class:`Breakpoint`.  The latter points to a list "
"of such instances since there may be more than one breakpoint per line."
msgstr ""

#: ../../library/bdb.rst:33
msgid ""
"When creating a breakpoint, its associated :attr:`file name <file>` should "
"be in canonical form.  If a :attr:`funcname` is defined, a breakpoint :attr:"
"`hit <hits>` will be counted when the first line of that function is "
"executed.  A :attr:`conditional <cond>` breakpoint always counts a :attr:"
"`hit <hits>`."
msgstr ""

#: ../../library/bdb.rst:39
msgid ":class:`Breakpoint` instances have the following methods:"
msgstr ""

#: ../../library/bdb.rst:43
msgid ""
"Delete the breakpoint from the list associated to a file/line.  If it is the "
"last breakpoint in that position, it also deletes the entry for the file/"
"line."
msgstr ""

#: ../../library/bdb.rst:50
msgid "Mark the breakpoint as enabled."
msgstr ""

#: ../../library/bdb.rst:55
msgid "Mark the breakpoint as disabled."
msgstr ""

#: ../../library/bdb.rst:60
msgid ""
"Return a string with all the information about the breakpoint, nicely "
"formatted:"
msgstr ""

#: ../../library/bdb.rst:63
msgid "Breakpoint number."
msgstr ""

#: ../../library/bdb.rst:64
msgid "Temporary status (del or keep)."
msgstr ""

#: ../../library/bdb.rst:65
msgid "File/line position."
msgstr ""

#: ../../library/bdb.rst:66
msgid "Break condition."
msgstr ""

#: ../../library/bdb.rst:67
msgid "Number of times to ignore."
msgstr "Número de vezes para ignorar."

#: ../../library/bdb.rst:68
msgid "Number of times hit."
msgstr ""

#: ../../library/bdb.rst:74
msgid ""
"Print the output of :meth:`bpformat` to the file *out*, or if it is "
"``None``, to standard output."
msgstr ""

#: ../../library/bdb.rst:77
msgid ":class:`Breakpoint` instances have the following attributes:"
msgstr ""

#: ../../library/bdb.rst:81
msgid "File name of the :class:`Breakpoint`."
msgstr "Nome do arquivo do :class:`Breakpoint`."

#: ../../library/bdb.rst:85
msgid "Line number of the :class:`Breakpoint` within :attr:`file`."
msgstr ""

#: ../../library/bdb.rst:89
msgid "``True`` if a :class:`Breakpoint` at (file, line) is temporary."
msgstr ""

#: ../../library/bdb.rst:93
msgid "Condition for evaluating a :class:`Breakpoint` at (file, line)."
msgstr ""

#: ../../library/bdb.rst:97
msgid ""
"Function name that defines whether a :class:`Breakpoint` is hit upon "
"entering the function."
msgstr ""

#: ../../library/bdb.rst:102
msgid "``True`` if :class:`Breakpoint` is enabled."
msgstr ""

#: ../../library/bdb.rst:106
msgid "Numeric index for a single instance of a :class:`Breakpoint`."
msgstr ""

#: ../../library/bdb.rst:110
msgid ""
"Dictionary of :class:`Breakpoint` instances indexed by (:attr:`file`, :attr:"
"`line`) tuples."
msgstr ""

#: ../../library/bdb.rst:115
msgid "Number of times to ignore a :class:`Breakpoint`."
msgstr ""

#: ../../library/bdb.rst:119
msgid "Count of the number of times a :class:`Breakpoint` has been hit."
msgstr ""

#: ../../library/bdb.rst:123
msgid "The :class:`Bdb` class acts as a generic Python debugger base class."
msgstr ""

#: ../../library/bdb.rst:125
msgid ""
"This class takes care of the details of the trace facility; a derived class "
"should implement user interaction.  The standard debugger class (:class:`pdb."
"Pdb`) is an example."
msgstr ""

#: ../../library/bdb.rst:129
msgid ""
"The *skip* argument, if given, must be an iterable of glob-style module name "
"patterns.  The debugger will not step into frames that originate in a module "
"that matches one of these patterns. Whether a frame is considered to "
"originate in a certain module is determined by the ``__name__`` in the frame "
"globals."
msgstr ""

#: ../../library/bdb.rst:135
msgid ""
"The *backend* argument specifies the backend to use for :class:`Bdb`. It can "
"be either ``'settrace'`` or ``'monitoring'``. ``'settrace'`` uses :func:`sys."
"settrace` which has the best backward compatibility. The ``'monitoring'`` "
"backend uses the new :mod:`sys.monitoring` that was introduced in Python "
"3.12, which can be much more efficient because it can disable unused events. "
"We are trying to keep the exact interfaces for both backends, but there are "
"some differences. The debugger developers are encouraged to use the "
"``'monitoring'`` backend to achieve better performance."
msgstr ""

#: ../../library/bdb.rst:145
msgid "Added the *skip* parameter."
msgstr "Adicionado o parâmetro *skip*."

#: ../../library/bdb.rst:148
msgid "Added the *backend* parameter."
msgstr ""

#: ../../library/bdb.rst:151
msgid ""
"The following methods of :class:`Bdb` normally don't need to be overridden."
msgstr ""

#: ../../library/bdb.rst:155
msgid "Return canonical form of *filename*."
msgstr ""

#: ../../library/bdb.rst:157
msgid ""
"For real file names, the canonical form is an operating-system-dependent, :"
"func:`case-normalized <os.path.normcase>` :func:`absolute path <os.path."
"abspath>`. A *filename* with angle brackets, such as ``\"<stdin>\"`` "
"generated in interactive mode, is returned unchanged."
msgstr ""

#: ../../library/bdb.rst:164
msgid ""
"Start tracing. For ``'settrace'`` backend, this method is equivalent to "
"``sys.settrace(self.trace_dispatch)``"
msgstr ""

#: ../../library/bdb.rst:171
msgid ""
"Stop tracing. For ``'settrace'`` backend, this method is equivalent to ``sys."
"settrace(None)``"
msgstr ""

#: ../../library/bdb.rst:178
msgid ""
"Set the :attr:`!botframe`, :attr:`!stopframe`, :attr:`!returnframe` and :"
"attr:`quitting <Bdb.set_quit>` attributes with values ready to start "
"debugging."
msgstr ""

#: ../../library/bdb.rst:183
msgid ""
"This function is installed as the trace function of debugged frames.  Its "
"return value is the new trace function (in most cases, that is, itself)."
msgstr ""

#: ../../library/bdb.rst:186
msgid ""
"The default implementation decides how to dispatch a frame, depending on the "
"type of event (passed as a string) that is about to be executed. *event* can "
"be one of the following:"
msgstr ""

#: ../../library/bdb.rst:190
msgid "``\"line\"``: A new line of code is going to be executed."
msgstr ""

#: ../../library/bdb.rst:191
msgid ""
"``\"call\"``: A function is about to be called, or another code block "
"entered."
msgstr ""

#: ../../library/bdb.rst:193
msgid "``\"return\"``: A function or other code block is about to return."
msgstr ""

#: ../../library/bdb.rst:194
msgid "``\"exception\"``: An exception has occurred."
msgstr ""

#: ../../library/bdb.rst:195
msgid "``\"c_call\"``: A C function is about to be called."
msgstr ""

#: ../../library/bdb.rst:196
msgid "``\"c_return\"``: A C function has returned."
msgstr ""

#: ../../library/bdb.rst:197
msgid "``\"c_exception\"``: A C function has raised an exception."
msgstr ""

#: ../../library/bdb.rst:199
msgid ""
"For the Python events, specialized functions (see below) are called.  For "
"the C events, no action is taken."
msgstr ""

#: ../../library/bdb.rst:202
msgid "The *arg* parameter depends on the previous event."
msgstr ""

#: ../../library/bdb.rst:204
msgid ""
"See the documentation for :func:`sys.settrace` for more information on the "
"trace function.  For more information on code and frame objects, refer to :"
"ref:`types`."
msgstr ""

#: ../../library/bdb.rst:210
msgid ""
"If the debugger should stop on the current line, invoke the :meth:"
"`user_line` method (which should be overridden in subclasses). Raise a :exc:"
"`BdbQuit` exception if the :attr:`quitting  <Bdb.set_quit>` flag is set "
"(which can be set from :meth:`user_line`).  Return a reference to the :meth:"
"`trace_dispatch` method for further tracing in that scope."
msgstr ""

#: ../../library/bdb.rst:218
msgid ""
"If the debugger should stop on this function call, invoke the :meth:"
"`user_call` method (which should be overridden in subclasses). Raise a :exc:"
"`BdbQuit` exception if the :attr:`quitting  <Bdb.set_quit>` flag is set "
"(which can be set from :meth:`user_call`).  Return a reference to the :meth:"
"`trace_dispatch` method for further tracing in that scope."
msgstr ""

#: ../../library/bdb.rst:226
msgid ""
"If the debugger should stop on this function return, invoke the :meth:"
"`user_return` method (which should be overridden in subclasses). Raise a :"
"exc:`BdbQuit` exception if the :attr:`quitting  <Bdb.set_quit>` flag is set "
"(which can be set from :meth:`user_return`).  Return a reference to the :"
"meth:`trace_dispatch` method for further tracing in that scope."
msgstr ""

#: ../../library/bdb.rst:234
msgid ""
"If the debugger should stop at this exception, invokes the :meth:"
"`user_exception` method (which should be overridden in subclasses). Raise a :"
"exc:`BdbQuit` exception if the :attr:`quitting  <Bdb.set_quit>` flag is set "
"(which can be set from :meth:`user_exception`).  Return a reference to the :"
"meth:`trace_dispatch` method for further tracing in that scope."
msgstr ""

#: ../../library/bdb.rst:240
msgid ""
"Normally derived classes don't override the following methods, but they may "
"if they want to redefine the definition of stopping and breakpoints."
msgstr ""

#: ../../library/bdb.rst:245
msgid "Return ``True`` if *module_name* matches any skip pattern."
msgstr ""

#: ../../library/bdb.rst:249
msgid "Return ``True`` if *frame* is below the starting frame in the stack."
msgstr ""

#: ../../library/bdb.rst:253
msgid "Return ``True`` if there is an effective breakpoint for this line."
msgstr ""

#: ../../library/bdb.rst:255
msgid ""
"Check whether a line or function breakpoint exists and is in effect.  Delete "
"temporary breakpoints based on information from :func:`effective`."
msgstr ""

#: ../../library/bdb.rst:260
msgid "Return ``True`` if any breakpoint exists for *frame*'s filename."
msgstr ""

#: ../../library/bdb.rst:262
msgid ""
"Derived classes should override these methods to gain control over debugger "
"operation."
msgstr ""

#: ../../library/bdb.rst:267
msgid ""
"Called from :meth:`dispatch_call` if a break might stop inside the called "
"function."
msgstr ""

#: ../../library/bdb.rst:270
msgid ""
"*argument_list* is not used anymore and will always be ``None``. The "
"argument is kept for backwards compatibility."
msgstr ""

#: ../../library/bdb.rst:275
msgid ""
"Called from :meth:`dispatch_line` when either :meth:`stop_here` or :meth:"
"`break_here` returns ``True``."
msgstr ""

#: ../../library/bdb.rst:280
msgid ""
"Called from :meth:`dispatch_return` when :meth:`stop_here` returns ``True``."
msgstr ""

#: ../../library/bdb.rst:284
msgid ""
"Called from :meth:`dispatch_exception` when :meth:`stop_here` returns "
"``True``."
msgstr ""

#: ../../library/bdb.rst:289
msgid "Handle how a breakpoint must be removed when it is a temporary one."
msgstr ""

#: ../../library/bdb.rst:291
msgid "This method must be implemented by derived classes."
msgstr ""

#: ../../library/bdb.rst:294
msgid ""
"Derived classes and clients can call the following methods to affect the "
"stepping state."
msgstr ""

#: ../../library/bdb.rst:299
msgid "Stop after one line of code."
msgstr ""

#: ../../library/bdb.rst:303
msgid "Stop on the next line in or below the given frame."
msgstr ""

#: ../../library/bdb.rst:307
msgid "Stop when returning from the given frame."
msgstr ""

#: ../../library/bdb.rst:311
msgid ""
"Stop when the line with the *lineno* greater than the current one is reached "
"or when returning from current frame."
msgstr ""

#: ../../library/bdb.rst:316
msgid ""
"Start debugging from *frame*.  If *frame* is not specified, debugging starts "
"from caller's frame."
msgstr ""

#: ../../library/bdb.rst:319
msgid ""
":func:`set_trace` will enter the debugger immediately, rather than on the "
"next line of code to be executed."
msgstr ""
":func:`set_trace` entrará no depurador imediatamente, em vez de na próxima "
"linha de código a ser executada."

#: ../../library/bdb.rst:325
msgid ""
"Stop only at breakpoints or when finished.  If there are no breakpoints, set "
"the system trace function to ``None``."
msgstr ""

#: ../../library/bdb.rst:332
msgid ""
"Set the :attr:`!quitting` attribute to ``True``.  This raises :exc:`BdbQuit` "
"in the next call to one of the :meth:`!dispatch_\\*` methods."
msgstr ""

#: ../../library/bdb.rst:336
msgid ""
"Derived classes and clients can call the following methods to manipulate "
"breakpoints.  These methods return a string containing an error message if "
"something went wrong, or ``None`` if all is well."
msgstr ""

#: ../../library/bdb.rst:342
msgid ""
"Set a new breakpoint.  If the *lineno* line doesn't exist for the *filename* "
"passed as argument, return an error message.  The *filename* should be in "
"canonical form, as described in the :meth:`canonic` method."
msgstr ""

#: ../../library/bdb.rst:348
msgid ""
"Delete the breakpoints in *filename* and *lineno*.  If none were set, return "
"an error message."
msgstr ""

#: ../../library/bdb.rst:353
msgid ""
"Delete the breakpoint which has the index *arg* in the :attr:`Breakpoint."
"bpbynumber`.  If *arg* is not numeric or out of range, return an error "
"message."
msgstr ""

#: ../../library/bdb.rst:359
msgid ""
"Delete all breakpoints in *filename*.  If none were set, return an error "
"message."
msgstr ""

#: ../../library/bdb.rst:364
msgid ""
"Delete all existing breakpoints.  If none were set, return an error message."
msgstr ""

#: ../../library/bdb.rst:369
msgid ""
"Return a breakpoint specified by the given number.  If *arg* is a string, it "
"will be converted to a number.  If *arg* is a non-numeric string, if the "
"given breakpoint never existed or has been deleted, a :exc:`ValueError` is "
"raised."
msgstr ""

#: ../../library/bdb.rst:378
msgid "Return ``True`` if there is a breakpoint for *lineno* in *filename*."
msgstr ""

#: ../../library/bdb.rst:382
msgid ""
"Return all breakpoints for *lineno* in *filename*, or an empty list if none "
"are set."
msgstr ""

#: ../../library/bdb.rst:387
msgid "Return all breakpoints in *filename*, or an empty list if none are set."
msgstr ""

#: ../../library/bdb.rst:391
msgid "Return all breakpoints that are set."
msgstr ""

#: ../../library/bdb.rst:394
msgid ""
"Derived classes and clients can call the following methods to disable and "
"restart events to achieve better performance. These methods only work when "
"using the ``'monitoring'`` backend."
msgstr ""

#: ../../library/bdb.rst:400
msgid ""
"Disable the current event until the next time :func:`restart_events` is "
"called. This is helpful when the debugger is not interested in the current "
"line."
msgstr ""

#: ../../library/bdb.rst:408
msgid ""
"Restart all the disabled events. This function is automatically called in "
"``dispatch_*`` methods after ``user_*`` methods are called. If the "
"``dispatch_*`` methods are not overridden, the disabled events will be "
"restarted after each user interaction."
msgstr ""

#: ../../library/bdb.rst:416
msgid ""
"Derived classes and clients can call the following methods to get a data "
"structure representing a stack trace."
msgstr ""

#: ../../library/bdb.rst:421
msgid "Return a list of (frame, lineno) tuples in a stack trace, and a size."
msgstr ""

#: ../../library/bdb.rst:423
msgid ""
"The most recently called frame is last in the list. The size is the number "
"of frames below the frame where the debugger was invoked."
msgstr ""

#: ../../library/bdb.rst:428
msgid ""
"Return a string with information about a stack entry, which is a ``(frame, "
"lineno)`` tuple.  The return string contains:"
msgstr ""

#: ../../library/bdb.rst:431
msgid "The canonical filename which contains the frame."
msgstr ""

#: ../../library/bdb.rst:432
msgid "The function name or ``\"<lambda>\"``."
msgstr "O nome da função ou ``\"<lambda>\"``."

#: ../../library/bdb.rst:433
msgid "The input arguments."
msgstr "O argumento de entrada."

#: ../../library/bdb.rst:434
msgid "The return value."
msgstr ""

#: ../../library/bdb.rst:435
msgid "The line of code (if it exists)."
msgstr ""

#: ../../library/bdb.rst:438
msgid ""
"The following two methods can be called by clients to use a debugger to "
"debug a :term:`statement`, given as a string."
msgstr ""
"Os dois métodos a seguir podem ser chamados pelos clientes para usar um "
"depurador e depurar uma :term:`instrução <statement>`, fornecida como uma "
"string."

#: ../../library/bdb.rst:443
msgid ""
"Debug a statement executed via the :func:`exec` function.  *globals* "
"defaults to :attr:`!__main__.__dict__`, *locals* defaults to *globals*."
msgstr ""

#: ../../library/bdb.rst:448
msgid ""
"Debug an expression executed via the :func:`eval` function.  *globals* and "
"*locals* have the same meaning as in :meth:`run`."
msgstr ""

#: ../../library/bdb.rst:453
msgid "For backwards compatibility.  Calls the :meth:`run` method."
msgstr ""

#: ../../library/bdb.rst:457
msgid "Debug a single function call, and return its result."
msgstr ""

#: ../../library/bdb.rst:460
msgid "Finally, the module defines the following functions:"
msgstr ""

#: ../../library/bdb.rst:464
msgid ""
"Return ``True`` if we should break here, depending on the way the :class:"
"`Breakpoint` *b* was set."
msgstr ""

#: ../../library/bdb.rst:467
msgid ""
"If it was set via line number, it checks if :attr:`b.line <bdb.Breakpoint."
"line>` is the same as the one in *frame*. If the breakpoint was set via :"
"attr:`function name <bdb.Breakpoint.funcname>`, we have to check we are in "
"the right *frame* (the right function) and if we are on its first executable "
"line."
msgstr ""

#: ../../library/bdb.rst:476
msgid ""
"Return ``(active breakpoint, delete temporary flag)`` or ``(None, None)`` as "
"the breakpoint to act upon."
msgstr ""

#: ../../library/bdb.rst:479
msgid ""
"The *active breakpoint* is the first entry in :attr:`bplist <bdb.Breakpoint."
"bplist>` for the (:attr:`file <bdb.Breakpoint.file>`, :attr:`line <bdb."
"Breakpoint.line>`) (which must exist) that is :attr:`enabled <bdb.Breakpoint."
"enabled>`, for which :func:`checkfuncname` is true, and that has neither a "
"false :attr:`condition <bdb.Breakpoint.cond>` nor positive :attr:`ignore "
"<bdb.Breakpoint.ignore>` count.  The *flag*, meaning that a temporary "
"breakpoint should be deleted, is ``False`` only when the :attr:`cond <bdb."
"Breakpoint.cond>` cannot be evaluated (in which case, :attr:`ignore <bdb."
"Breakpoint.ignore>` count is ignored)."
msgstr ""

#: ../../library/bdb.rst:490
msgid "If no such entry exists, then ``(None, None)`` is returned."
msgstr ""

#: ../../library/bdb.rst:495
msgid "Start debugging with a :class:`Bdb` instance from caller's frame."
msgstr ""

#: ../../library/bdb.rst:330
msgid "quitting (bdb.Bdb attribute)"
msgstr ""
