# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-06 14:20+0000\n"
"PO-Revision-Date: 2025-07-18 18:48+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/compileall.rst:2
msgid ":mod:`!compileall` --- Byte-compile Python libraries"
msgstr ""

#: ../../library/compileall.rst:7
msgid "**Source code:** :source:`Lib/compileall.py`"
msgstr ""

#: ../../library/compileall.rst:11
msgid ""
"This module provides some utility functions to support installing Python "
"libraries.  These functions compile Python source files in a directory tree. "
"This module can be used to create the cached byte-code files at library "
"installation time, which makes them available for use even by users who "
"don't have write permission to the library directories."
msgstr ""

#: ../../includes/wasm-notavail.rst:3
msgid "Availability"
msgstr "Disponibilidade"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See :ref:`wasm-"
"availability` for more information."
msgstr ""

#: ../../library/compileall.rst:22
msgid "Command-line use"
msgstr ""

#: ../../library/compileall.rst:24
msgid ""
"This module can work as a script (using :program:`python -m compileall`) to "
"compile Python sources."
msgstr ""

#: ../../library/compileall.rst:32
msgid ""
"Positional arguments are files to compile or directories that contain source "
"files, traversed recursively.  If no argument is given, behave as if the "
"command line was :samp:`-l {<directories from sys.path>}`."
msgstr ""

#: ../../library/compileall.rst:38
msgid ""
"Do not recurse into subdirectories, only compile source code files directly "
"contained in the named or implied directories."
msgstr ""

#: ../../library/compileall.rst:43
msgid "Force rebuild even if timestamps are up-to-date."
msgstr ""

#: ../../library/compileall.rst:47
msgid ""
"Do not print the list of files compiled. If passed once, error messages will "
"still be printed. If passed twice (``-qq``), all output is suppressed."
msgstr ""

#: ../../library/compileall.rst:52
msgid ""
"Directory prepended to the path to each file being compiled.  This will "
"appear in compilation time tracebacks, and is also compiled in to the byte-"
"code file, where it will be used in tracebacks and other messages in cases "
"where the source file does not exist at the time the byte-code file is "
"executed."
msgstr ""

#: ../../library/compileall.rst:60
msgid ""
"Remove the given prefix from paths recorded in the ``.pyc`` files. Paths are "
"made relative to the prefix."
msgstr ""

#: ../../library/compileall.rst:63
msgid "This option can be used with ``-p`` but not with ``-d``."
msgstr ""

#: ../../library/compileall.rst:67
msgid ""
"Prepend the given prefix to paths recorded in the ``.pyc`` files. Use ``-p /"
"`` to make the paths absolute."
msgstr ""

#: ../../library/compileall.rst:70
msgid "This option can be used with ``-s`` but not with ``-d``."
msgstr ""

#: ../../library/compileall.rst:74
msgid ""
"regex is used to search the full path to each file considered for "
"compilation, and if the regex produces a match, the file is skipped."
msgstr ""

#: ../../library/compileall.rst:79
msgid ""
"Read the file ``list`` and add each line that it contains to the list of "
"files and directories to compile.  If ``list`` is ``-``, read lines from "
"``stdin``."
msgstr ""

#: ../../library/compileall.rst:85
msgid ""
"Write the byte-code files to their legacy locations and names, which may "
"overwrite byte-code files created by another version of Python.  The default "
"is to write files to their :pep:`3147` locations and names, which allows "
"byte-code files from multiple versions of Python to coexist."
msgstr ""

#: ../../library/compileall.rst:92
msgid ""
"Control the maximum recursion level for subdirectories. If this is given, "
"then ``-l`` option will not be taken into account. :program:`python -m "
"compileall <directory> -r 0` is equivalent to :program:`python -m compileall "
"<directory> -l`."
msgstr ""

#: ../../library/compileall.rst:99
msgid ""
"Use *N* workers to compile the files within the given directory. If ``0`` is "
"used, then the result of :func:`os.process_cpu_count` will be used."
msgstr ""

#: ../../library/compileall.rst:105
msgid ""
"Control how the generated byte-code files are invalidated at runtime. The "
"``timestamp`` value, means that ``.pyc`` files with the source timestamp and "
"size embedded will be generated. The ``checked-hash`` and ``unchecked-hash`` "
"values cause hash-based pycs to be generated. Hash-based pycs embed a hash "
"of the source file contents rather than a timestamp. See :ref:`pyc-"
"invalidation` for more information on how Python validates bytecode cache "
"files at runtime. The default is ``timestamp`` if the :envvar:"
"`SOURCE_DATE_EPOCH` environment variable is not set, and ``checked-hash`` if "
"the ``SOURCE_DATE_EPOCH`` environment variable is set."
msgstr ""

#: ../../library/compileall.rst:118
msgid ""
"Compile with the given optimization level. May be used multiple times to "
"compile for multiple levels at a time (for example, ``compileall -o 1 -o "
"2``)."
msgstr ""

#: ../../library/compileall.rst:124
msgid "Ignore symlinks pointing outside the given directory."
msgstr ""

#: ../../library/compileall.rst:128
msgid ""
"If two ``.pyc`` files with different optimization level have the same "
"content, use hard links to consolidate duplicate files."
msgstr ""

#: ../../library/compileall.rst:131
msgid "Added the ``-i``, ``-b`` and ``-h`` options."
msgstr ""

#: ../../library/compileall.rst:134
msgid ""
"Added the  ``-j``, ``-r``, and ``-qq`` options.  ``-q`` option was changed "
"to a multilevel value.  ``-b`` will always produce a byte-code file ending "
"in ``.pyc``, never ``.pyo``."
msgstr ""

#: ../../library/compileall.rst:139
msgid "Added the ``--invalidation-mode`` option."
msgstr ""

#: ../../library/compileall.rst:142
msgid ""
"Added the ``-s``, ``-p``, ``-e`` and ``--hardlink-dupes`` options. Raised "
"the default recursion limit from 10 to :py:func:`sys.getrecursionlimit()`. "
"Added the possibility to specify the ``-o`` option multiple times."
msgstr ""

#: ../../library/compileall.rst:149
msgid ""
"There is no command-line option to control the optimization level used by "
"the :func:`compile` function, because the Python interpreter itself already "
"provides the option: :program:`python -O -m compileall`."
msgstr ""

#: ../../library/compileall.rst:153
msgid ""
"Similarly, the :func:`compile` function respects the :data:`sys."
"pycache_prefix` setting. The generated bytecode cache will only be useful "
"if :func:`compile` is run with the same :data:`sys.pycache_prefix` (if any) "
"that will be used at runtime."
msgstr ""

#: ../../library/compileall.rst:159
msgid "Public functions"
msgstr ""

#: ../../library/compileall.rst:163
msgid ""
"Recursively descend the directory tree named by *dir*, compiling all :file:`."
"py` files along the way. Return a true value if all the files compiled "
"successfully, and a false value otherwise."
msgstr ""

#: ../../library/compileall.rst:167
msgid ""
"The *maxlevels* parameter is used to limit the depth of the recursion; it "
"defaults to ``sys.getrecursionlimit()``."
msgstr ""

#: ../../library/compileall.rst:170
msgid ""
"If *ddir* is given, it is prepended to the path to each file being compiled "
"for use in compilation time tracebacks, and is also compiled in to the byte-"
"code file, where it will be used in tracebacks and other messages in cases "
"where the source file does not exist at the time the byte-code file is "
"executed."
msgstr ""

#: ../../library/compileall.rst:176
msgid ""
"If *force* is true, modules are re-compiled even if the timestamps are up to "
"date."
msgstr ""

#: ../../library/compileall.rst:179
msgid ""
"If *rx* is given, its ``search`` method is called on the complete path to "
"each file considered for compilation, and if it returns a true value, the "
"file is skipped. This can be used to exclude files matching a regular "
"expression, given as a :ref:`re.Pattern <re-objects>` object."
msgstr ""

#: ../../library/compileall.rst:184 ../../library/compileall.rst:261
msgid ""
"If *quiet* is ``False`` or ``0`` (the default), the filenames and other "
"information are printed to standard out. Set to ``1``, only errors are "
"printed. Set to ``2``, all output is suppressed."
msgstr ""

#: ../../library/compileall.rst:188 ../../library/compileall.rst:265
msgid ""
"If *legacy* is true, byte-code files are written to their legacy locations "
"and names, which may overwrite byte-code files created by another version of "
"Python.  The default is to write files to their :pep:`3147` locations and "
"names, which allows byte-code files from multiple versions of Python to "
"coexist."
msgstr ""

#: ../../library/compileall.rst:194 ../../library/compileall.rst:271
msgid ""
"*optimize* specifies the optimization level for the compiler.  It is passed "
"to the built-in :func:`compile` function. Accepts also a sequence of "
"optimization levels which lead to multiple compilations of one :file:`.py` "
"file in one call."
msgstr ""

#: ../../library/compileall.rst:198
msgid ""
"The argument *workers* specifies how many workers are used to compile files "
"in parallel. The default is to not use multiple workers. If the platform "
"can't use multiple workers and *workers* argument is given, then sequential "
"compilation will be used as a fallback.  If *workers* is 0, the number of "
"cores in the system is used.  If *workers* is lower than ``0``, a :exc:"
"`ValueError` will be raised."
msgstr ""

#: ../../library/compileall.rst:205 ../../library/compileall.rst:275
msgid ""
"*invalidation_mode* should be a member of the :class:`py_compile."
"PycInvalidationMode` enum and controls how the generated pycs are "
"invalidated at runtime."
msgstr ""

#: ../../library/compileall.rst:209 ../../library/compileall.rst:279
msgid ""
"The *stripdir*, *prependdir* and *limit_sl_dest* arguments correspond to the "
"``-s``, ``-p`` and ``-e`` options described above. They may be specified as "
"``str`` or :py:class:`os.PathLike`."
msgstr ""

#: ../../library/compileall.rst:213 ../../library/compileall.rst:283
msgid ""
"If *hardlink_dupes* is true and two ``.pyc`` files with different "
"optimization level have the same content, use hard links to consolidate "
"duplicate files."
msgstr ""

#: ../../library/compileall.rst:216 ../../library/compileall.rst:314
msgid "Added the *legacy* and *optimize* parameter."
msgstr ""

#: ../../library/compileall.rst:219
msgid "Added the *workers* parameter."
msgstr ""

#: ../../library/compileall.rst:222 ../../library/compileall.rst:288
#: ../../library/compileall.rst:317
msgid "*quiet* parameter was changed to a multilevel value."
msgstr ""

#: ../../library/compileall.rst:225 ../../library/compileall.rst:291
#: ../../library/compileall.rst:320
msgid ""
"The *legacy* parameter only writes out ``.pyc`` files, not ``.pyo`` files no "
"matter what the value of *optimize* is."
msgstr ""

#: ../../library/compileall.rst:229
msgid "Accepts a :term:`path-like object`."
msgstr ""

#: ../../library/compileall.rst:232 ../../library/compileall.rst:295
#: ../../library/compileall.rst:324
msgid "The *invalidation_mode* parameter was added."
msgstr ""

#: ../../library/compileall.rst:235 ../../library/compileall.rst:298
#: ../../library/compileall.rst:327
msgid ""
"The *invalidation_mode* parameter's default value is updated to ``None``."
msgstr ""

#: ../../library/compileall.rst:238
msgid "Setting *workers* to 0 now chooses the optimal number of cores."
msgstr ""

#: ../../library/compileall.rst:241
msgid ""
"Added *stripdir*, *prependdir*, *limit_sl_dest* and *hardlink_dupes* "
"arguments. Default value of *maxlevels* was changed from ``10`` to ``sys."
"getrecursionlimit()``"
msgstr ""

#: ../../library/compileall.rst:247
msgid ""
"Compile the file with path *fullname*. Return a true value if the file "
"compiled successfully, and a false value otherwise."
msgstr ""

#: ../../library/compileall.rst:250
msgid ""
"If *ddir* is given, it is prepended to the path to the file being compiled "
"for use in compilation time tracebacks, and is also compiled in to the byte-"
"code file, where it will be used in tracebacks and other messages in cases "
"where the source file does not exist at the time the byte-code file is "
"executed."
msgstr ""

#: ../../library/compileall.rst:256
msgid ""
"If *rx* is given, its ``search`` method is passed the full path name to the "
"file being compiled, and if it returns a true value, the file is not "
"compiled and ``True`` is returned. This can be used to exclude files "
"matching a regular expression, given as a :ref:`re.Pattern <re-objects>` "
"object."
msgstr ""

#: ../../library/compileall.rst:301
msgid ""
"Added *stripdir*, *prependdir*, *limit_sl_dest* and *hardlink_dupes* "
"arguments."
msgstr ""

#: ../../library/compileall.rst:306
msgid ""
"Byte-compile all the :file:`.py` files found along ``sys.path``. Return a "
"true value if all the files compiled successfully, and a false value "
"otherwise."
msgstr ""

#: ../../library/compileall.rst:309
msgid ""
"If *skip_curdir* is true (the default), the current directory is not "
"included in the search.  All other parameters are passed to the :func:"
"`compile_dir` function.  Note that unlike the other compile functions, "
"``maxlevels`` defaults to ``0``."
msgstr ""

#: ../../library/compileall.rst:330
msgid ""
"To force a recompile of all the :file:`.py` files in the :file:`Lib/` "
"subdirectory and all its subdirectories::"
msgstr ""

#: ../../library/compileall.rst:333
msgid ""
"import compileall\n"
"\n"
"compileall.compile_dir('Lib/', force=True)\n"
"\n"
"# Perform same compilation, excluding files in .svn directories.\n"
"import re\n"
"compileall.compile_dir('Lib/', rx=re.compile(r'[/\\\\][.]svn'), force=True)\n"
"\n"
"# pathlib.Path objects can also be used.\n"
"import pathlib\n"
"compileall.compile_dir(pathlib.Path('Lib/'), force=True)"
msgstr ""

#: ../../library/compileall.rst:347
msgid "Module :mod:`py_compile`"
msgstr ""

#: ../../library/compileall.rst:348
msgid "Byte-compile a single source file."
msgstr ""
