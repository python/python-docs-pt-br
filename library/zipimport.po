# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Raphael Mendonça, 2021
# Christian Janiake <cjaniake@gmail.com>, 2021
# i17obot <i17obot@rougeth.com>, 2021
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# Adorilson Bezerra <adorilson@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-25 14:19+0000\n"
"PO-Revision-Date: 2021-06-28 01:18+0000\n"
"Last-Translator: Adorilson Bezerra <adorilson@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/zipimport.rst:2
msgid ":mod:`!zipimport` --- Import modules from Zip archives"
msgstr ":mod:`!zipimport` - Importa módulos de arquivos Zip"

#: ../../library/zipimport.rst:9
msgid "**Source code:** :source:`Lib/zipimport.py`"
msgstr "**Código-fonte:** :source:`Lib/zipimport.py`"

#: ../../library/zipimport.rst:13
msgid ""
"This module adds the ability to import Python modules (:file:`\\*.py`, :file:"
"`\\*.pyc`) and packages from ZIP-format archives. It is usually not needed "
"to use the :mod:`zipimport` module explicitly; it is automatically used by "
"the built-in :keyword:`import` mechanism for :data:`sys.path` items that are "
"paths to ZIP archives."
msgstr ""
"Este módulo adiciona a capacidade de importar módulos Python (:file:`\\*."
"py`, :file:`\\*.pyc`) e pacotes de arquivos em formato ZIP. Normalmente, não "
"é necessário usar o módulo :mod:`zipimport` explicitamente; ele é usado "
"automaticamente pelo mecanismo embutido :keyword:`import` para itens :data:"
"`sys.path` que são caminhos para arquivos ZIP."

#: ../../library/zipimport.rst:19
msgid ""
"Typically, :data:`sys.path` is a list of directory names as strings.  This "
"module also allows an item of :data:`sys.path` to be a string naming a ZIP "
"file archive. The ZIP archive can contain a subdirectory structure to "
"support package imports, and a path within the archive can be specified to "
"only import from a subdirectory.  For example, the path :file:`example.zip/"
"lib/` would only import from the :file:`lib/` subdirectory within the "
"archive."
msgstr ""
"Normalmente, :data:`sys.path` é uma lista de nomes de diretórios como "
"strings. Este módulo também permite que um item de :data:`sys.path` seja uma "
"string que nomeia um arquivo ZIP. O arquivo ZIP pode conter uma estrutura de "
"subdiretório para suportar importações de pacotes, e um caminho dentro do "
"arquivo pode ser especificado para importar apenas de um subdiretório. Por "
"exemplo, o caminho :file:`example.zip/lib/` importaria apenas do "
"subdiretório :file:`lib/` dentro do arquivo."

#: ../../library/zipimport.rst:26
msgid ""
"Any files may be present in the ZIP archive, but importers are only invoked "
"for :file:`.py` and :file:`.pyc` files.  ZIP import of dynamic modules (:"
"file:`.pyd`, :file:`.so`) is disallowed. Note that if an archive only "
"contains :file:`.py` files, Python will not attempt to modify the archive by "
"adding the corresponding :file:`.pyc` file, meaning that if a ZIP archive "
"doesn't contain :file:`.pyc` files, importing may be rather slow."
msgstr ""
"Quaisquer arquivos podem estar presentes no arquivo ZIP, mas os importadores "
"são invocados apenas para os arquivos :file:`.py` e :file:`.pyc`. A "
"importação ZIP de módulos dinâmicos (:file:`.pyd`, :file:`.so`) não é "
"permitida. Observe que, se um arquivo contiver apenas arquivos :file:`.py`, "
"o Python não tentará modificá-lo adicionando o arquivo :file:`.pyc` "
"correspondente, o que significa que, se um arquivo ZIP não contiver "
"arquivos :file:`.pyc`, a importação poderá ser bastante lenta."

#: ../../library/zipimport.rst:33
msgid "ZIP64 is supported"
msgstr "ZIP64 é suportado"

#: ../../library/zipimport.rst:36
msgid "Previously, ZIP archives with an archive comment were not supported."
msgstr ""
"Anteriormente, arquivos ZIP com um comentário de arquivo não eram suportados."

#: ../../library/zipimport.rst:41
msgid ""
"`PKZIP Application Note <https://pkware.cachefly.net/webdocs/casestudies/"
"APPNOTE.TXT>`_"
msgstr ""
"`Nota da aplicação PKZIP <https://pkware.cachefly.net/webdocs/casestudies/"
"APPNOTE.TXT>`_"

#: ../../library/zipimport.rst:42
msgid ""
"Documentation on the ZIP file format by Phil Katz, the creator of the format "
"and algorithms used."
msgstr ""
"Documentação do formato de arquivo ZIP feita por Phil Katz, criador do "
"formato e dos algoritmos usados."

#: ../../library/zipimport.rst:45
msgid ":pep:`273` - Import Modules from Zip Archives"
msgstr ":pep:`273` - Importar módulos de arquivos Zip"

#: ../../library/zipimport.rst:46
msgid ""
"Written by James C. Ahlstrom, who also provided an implementation. Python "
"2.3 follows the specification in :pep:`273`, but uses an implementation "
"written by Just van Rossum that uses the import hooks described in :pep:"
"`302`."
msgstr ""
"Escrito por James C. Ahlstrom, que também forneceu uma implementação. O "
"Python 2.3 segue a especificação em :pep:`273`, mas usa uma implementação "
"escrita por Just van Rossum que utiliza os ganchos de importação descritos "
"em :pep:`302`."

#: ../../library/zipimport.rst:50
msgid ":mod:`importlib` - The implementation of the import machinery"
msgstr ":mod:`importlib` - A importação do maquinário de importação"

#: ../../library/zipimport.rst:51
msgid ""
"Package providing the relevant protocols for all importers to implement."
msgstr ""
"Pacote que fornece os protocolos relevantes para todos os importadores "
"implementarem."

#: ../../library/zipimport.rst:55
msgid "This module defines an exception:"
msgstr "Este módulo define uma exceção:"

#: ../../library/zipimport.rst:59
msgid ""
"Exception raised by zipimporter objects. It's a subclass of :exc:"
"`ImportError`, so it can be caught as :exc:`ImportError`, too."
msgstr ""
"Exceção levantada por objetos zipimporter. É uma subclasse de :exc:"
"`ImportError`, portanto, também pode ser capturada como :exc:`ImportError`."

#: ../../library/zipimport.rst:66
msgid "zipimporter Objects"
msgstr "Objetos zipimporter"

#: ../../library/zipimport.rst:68
msgid ":class:`zipimporter` is the class for importing ZIP files."
msgstr ":class:`zipimporter` é a classe para importar arquivos ZIP."

#: ../../library/zipimport.rst:72
msgid ""
"Create a new zipimporter instance. *archivepath* must be a path to a ZIP "
"file, or to a specific path within a ZIP file.  For example, an "
"*archivepath* of :file:`foo/bar.zip/lib` will look for modules in the :file:"
"`lib` directory inside the ZIP file :file:`foo/bar.zip` (provided that it "
"exists)."
msgstr ""
"Cria uma nova instância do zipimporter. *archivepath* deve ser um caminho "
"para um arquivo ZIP ou para um caminho específico dentro de um arquivo ZIP. "
"Por exemplo, um *archivepath* de :file:`foo/bar.zip/lib` procurará módulos "
"no diretório :file:`lib` dentro do arquivo ZIP :file:`foo/bar.zip` (desde "
"que exista)."

#: ../../library/zipimport.rst:77
msgid ""
":exc:`ZipImportError` is raised if *archivepath* doesn't point to a valid "
"ZIP archive."
msgstr ""
":exc:`ZipImportError` é levantada se *archivepath* não apontar para um "
"arquivo ZIP válido."

#: ../../library/zipimport.rst:82
msgid ""
"Methods ``find_loader()`` and ``find_module()``, deprecated in 3.10 are now "
"removed.  Use :meth:`find_spec` instead."
msgstr ""
"Os métodos ``find_loader()`` e ``find_module()``, descontinuados na versão "
"3.10, foram removidos. Em vez disso, use :meth:`find_spec`."

#: ../../library/zipimport.rst:87
msgid ""
"Implementation of :meth:`importlib.abc.Loader.create_module` that returns :"
"const:`None` to explicitly request the default semantics."
msgstr ""
"Implementação de :meth:`importlib.abc.Loader.create_module` que retorna :"
"const:`None` para solicitar explicitamente a semântica padrão."

#: ../../library/zipimport.rst:95
msgid "Implementation of :meth:`importlib.abc.Loader.exec_module`."
msgstr "Implementação de :meth:`importlib.abc.Loader.exec_module`."

#: ../../library/zipimport.rst:102
msgid "An implementation of :meth:`importlib.abc.PathEntryFinder.find_spec`."
msgstr "A implementação de :meth:`importlib.abc.PathEntryFinder.find_spec`."

#: ../../library/zipimport.rst:109
msgid ""
"Return the code object for the specified module. Raise :exc:`ZipImportError` "
"if the module couldn't be imported."
msgstr ""
"Retorna o objeto código para o módulo especificado. Gera :exc:"
"`ZipImportError` se o módulo não puder ser importado."

#: ../../library/zipimport.rst:115
msgid ""
"Return the data associated with *pathname*. Raise :exc:`OSError` if the file "
"wasn't found."
msgstr ""
"Retorna os dados associados a *pathname*. Levanta :exc:`OSError` se o "
"arquivo não for encontrado."

#: ../../library/zipimport.rst:118
msgid ":exc:`IOError` used to be raised, it is now an alias of :exc:`OSError`."
msgstr ""
":exc:`IOError` costumava ser levantada, agora ele é um apelido para :exc:"
"`OSError`."

#: ../../library/zipimport.rst:124
msgid ""
"Return the value ``__file__`` would be set to if the specified module was "
"imported. Raise :exc:`ZipImportError` if the module couldn't be imported."
msgstr ""
"Retorna o valor que ``__file__`` seria definido se o módulo especificado "
"fosse importado. Levanta :exc:`ZipImportError` se o módulo não puder ser "
"importado."

#: ../../library/zipimport.rst:133
msgid ""
"Return the source code for the specified module. Raise :exc:`ZipImportError` "
"if the module couldn't be found, return :const:`None` if the archive does "
"contain the module, but has no source for it."
msgstr ""
"Retorna o código-fonte do módulo especificado. Levanta :exc:`ZipImportError` "
"se o módulo não puder ser encontrado, e retorna :const:`None` se o arquivo "
"contiver o módulo, mas não tiver o código-fonte para ele."

#: ../../library/zipimport.rst:141
msgid ""
"Return ``True`` if the module specified by *fullname* is a package. Raise :"
"exc:`ZipImportError` if the module couldn't be found."
msgstr ""
"Devolve ``True`` se o módulo especificado por *fullname* é um pacote. "
"Levanta :exc:`ZipImportError` se o módulo não pode ser localizado."

#: ../../library/zipimport.rst:147
msgid ""
"Load the module specified by *fullname*. *fullname* must be the fully "
"qualified (dotted) module name. Returns the imported module on success, "
"raises :exc:`ZipImportError` on failure."
msgstr ""
"Carrega o módulo especificado por *fullname*. *fullname* deve ser o nome "
"completo (com pontos) do módulo. Retorna o módulo importado em caso de "
"sucesso e levanta :exc:`ZipImportError` em caso de falha."

#: ../../library/zipimport.rst:153
msgid "Use :meth:`exec_module` instead."
msgstr "Use :meth:`exec_module`."

#: ../../library/zipimport.rst:158
msgid ""
"Clear out the internal cache of information about files found within the ZIP "
"archive."
msgstr ""
"Limpa o cache interno de informações sobre arquivos encontrados no arquivo "
"ZIP."

#: ../../library/zipimport.rst:166
msgid ""
"The file name of the importer's associated ZIP file, without a possible "
"subpath."
msgstr ""
"O nome do arquivo ZIP associado ao importador, sem um possível subcaminho."

#: ../../library/zipimport.rst:172
msgid ""
"The subpath within the ZIP file where modules are searched.  This is the "
"empty string for zipimporter objects which point to the root of the ZIP file."
msgstr ""
"O subcaminho dentro do arquivo ZIP onde os módulos são pesquisados. Esta é a "
"string vazia para objetos zipimporter que apontam para a raiz do arquivo ZIP."

#: ../../library/zipimport.rst:176
msgid ""
"The :attr:`archive` and :attr:`prefix` attributes, when combined with a "
"slash, equal the original *archivepath* argument given to the :class:"
"`zipimporter` constructor."
msgstr ""
"Os atributos :attr:`archive` e :attr:`prefix`, quando combinados com uma "
"barra, são iguais ao argumento original *archivepath* fornecido ao "
"construtor da :class:`zipimporter`."

#: ../../library/zipimport.rst:184
msgid "Examples"
msgstr "Exemplos"

#: ../../library/zipimport.rst:186
msgid ""
"Here is an example that imports a module from a ZIP archive - note that the :"
"mod:`zipimport` module is not explicitly used."
msgstr ""
"Aqui está um exemplo que importa um módulo de um arquivo ZIP - observe que o "
"módulo :mod:`zipimport` não é usado explicitamente."

#: ../../library/zipimport.rst:189
msgid ""
"$ unzip -l example.zip\n"
"Archive:  example.zip\n"
"  Length     Date   Time    Name\n"
" --------    ----   ----    ----\n"
"     8467  11-26-02 22:30   jwzthreading.py\n"
" --------                   -------\n"
"     8467                   1 file\n"
"$ ./python\n"
"Python 2.3 (#1, Aug 1 2003, 19:54:32)\n"
">>> import sys\n"
">>> sys.path.insert(0, 'example.zip')  # Add .zip file to front of path\n"
">>> import jwzthreading\n"
">>> jwzthreading.__file__\n"
"'example.zip/jwzthreading.py'"
msgstr ""
"$ unzip -l example.zip\n"
"Archive:  example.zip\n"
"  Length     Date   Time    Name\n"
" --------    ----   ----    ----\n"
"     8467  11-26-02 22:30   jwzthreading.py\n"
" --------                   -------\n"
"     8467                   1 file\n"
"$ ./python\n"
"Python 2.3 (#1, Aug 1 2003, 19:54:32)\n"
">>> import sys\n"
">>> sys.path.insert(0, 'example.zip')  # Adiciona arquivo .zip para a frente "
"do caminho\n"
">>> import jwzthreading\n"
">>> jwzthreading.__file__\n"
"'example.zip/jwzthreading.py'"
