# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Alexandre B A Villares, 2021
# Renan Lopes <renans.l@icloud.com>, 2021
# i17obot <i17obot@rougeth.com>, 2021
# Raphael Mendonça, 2022
# mvpetri <mvpetri@gmail.com>, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-25 14:19+0000\n"
"PO-Revision-Date: 2021-06-28 01:13+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/signal.rst:2
msgid ":mod:`!signal` --- Set handlers for asynchronous events"
msgstr ":mod:`!signal` --- Define manipuladores para eventos assíncronos"

#: ../../library/signal.rst:7
msgid "**Source code:** :source:`Lib/signal.py`"
msgstr "**Código-fonte:** :source:`Lib/signal.py`"

#: ../../library/signal.rst:11
msgid "This module provides mechanisms to use signal handlers in Python."
msgstr ""
"Este módulo fornece mecanismos para usar manipuladores de sinal em Python."

#: ../../library/signal.rst:15
msgid "General rules"
msgstr "Regras gerais"

#: ../../library/signal.rst:17
msgid ""
"The :func:`signal.signal` function allows defining custom handlers to be "
"executed when a signal is received.  A small number of default handlers are "
"installed: :const:`SIGPIPE` is ignored (so write errors on pipes and sockets "
"can be reported as ordinary Python exceptions) and :const:`SIGINT` is "
"translated into a :exc:`KeyboardInterrupt` exception if the parent process "
"has not changed it."
msgstr ""
"A função :func:`signal.signal` permite definir manipuladores personalizados "
"a serem executados quando um sinal é recebido. Um pequeno número de "
"manipuladores padrão são instalados: :const:`SIGPIPE` é ignorado (então "
"erros de gravação em encadeamentos e sockets podem ser relatados como "
"exceções comuns do Python) e :const:`SIGINT` é traduzido em uma exceção :exc:"
"`KeyboardInterrupt` se o processo pai não a tiver alterado."

#: ../../library/signal.rst:24
msgid ""
"A handler for a particular signal, once set, remains installed until it is "
"explicitly reset (Python emulates the BSD style interface regardless of the "
"underlying implementation), with the exception of the handler for :const:"
"`SIGCHLD`, which follows the underlying implementation."
msgstr ""
"Um manipulador para um sinal específico, uma vez definido, permanece "
"instalado até ser explicitamente redefinido (o Python emula a interface de "
"estilo BSD independentemente da implementação subjacente), com exceção do "
"manipulador para :const:`SIGCHLD`, que segue a implementação subjacente."

#: ../../library/signal.rst:29
msgid ""
"On WebAssembly platforms, signals are emulated and therefore behave "
"differently. Several functions and signals are not available on these "
"platforms."
msgstr ""
"Em plataformas WebAssembly, os sinais são emulados e, portanto, se comportam "
"de forma diferente. Várias funções e sinais não estão disponíveis nessas "
"plataformas."

#: ../../library/signal.rst:34
msgid "Execution of Python signal handlers"
msgstr "Execução de manipuladores de sinais Python"

#: ../../library/signal.rst:36
msgid ""
"A Python signal handler does not get executed inside the low-level (C) "
"signal handler.  Instead, the low-level signal handler sets a flag which "
"tells the :term:`virtual machine` to execute the corresponding Python signal "
"handler at a later point(for example at the next :term:`bytecode` "
"instruction). This has consequences:"
msgstr ""
"Um manipulador de sinal Python não é executado dentro do manipulador de "
"sinal de baixo nível (C). Em vez disso, o manipulador de sinal de baixo "
"nível define um sinalizador que diz à :term:`máquina virtual` para executar "
"o manipulador de sinal Python correspondente em um ponto posterior (por "
"exemplo, na próxima instrução :term:`bytecode`). Isso tem consequências:"

#: ../../library/signal.rst:42
msgid ""
"It makes little sense to catch synchronous errors like :const:`SIGFPE` or :"
"const:`SIGSEGV` that are caused by an invalid operation in C code.  Python "
"will return from the signal handler to the C code, which is likely to raise "
"the same signal again, causing Python to apparently hang.  From Python 3.3 "
"onwards, you can use the :mod:`faulthandler` module to report on synchronous "
"errors."
msgstr ""
"Faz pouco sentido capturar erros síncronos como :const:`SIGFPE` ou :const:"
"`SIGSEGV` que são causados por uma operação inválida no código C. O Python "
"retornará do manipulador de sinais para o código C, o que provavelmente "
"levantará o mesmo sinal novamente, fazendo com que o Python aparentemente "
"trave. Do Python 3.3 em diante, você pode usar o módulo :mod:`faulthandler` "
"para relatar erros síncronos."

#: ../../library/signal.rst:49
msgid ""
"A long-running calculation implemented purely in C (such as regular "
"expression matching on a large body of text) may run uninterrupted for an "
"arbitrary amount of time, regardless of any signals received.  The Python "
"signal handlers will be called when the calculation finishes."
msgstr ""
"Um cálculo de longa duração implementado puramente em C (como "
"correspondência de expressão regular em um grande corpo de texto) pode ser "
"executado ininterruptamente por um período de tempo arbitrário, "
"independentemente de quaisquer sinais recebidos. Os manipuladores de sinal "
"do Python serão chamados quando o cálculo terminar."

#: ../../library/signal.rst:54
msgid ""
"If the handler raises an exception, it will be raised \"out of thin air\" in "
"the main thread. See the :ref:`note below <handlers-and-exceptions>` for a "
"discussion."
msgstr ""
"Se o manipulador levantar uma exceção, ela será levantada \"do nada\" na "
"thread principal. Veja a :ref:`nota abaixo <handlers-and-exceptions>` para "
"uma discussão."

#: ../../library/signal.rst:62
msgid "Signals and threads"
msgstr "Sinais e threads"

#: ../../library/signal.rst:64
msgid ""
"Python signal handlers are always executed in the main Python thread of the "
"main interpreter, even if the signal was received in another thread.  This "
"means that signals can't be used as a means of inter-thread communication.  "
"You can use the synchronization primitives from the :mod:`threading` module "
"instead."
msgstr ""
"Os manipuladores de sinais Python são sempre executados na thread principal "
"do Python do interpretador principal, mesmo se o sinal foi recebido em outra "
"thread. Isso significa que os sinais não podem ser usados como um meio de "
"comunicação entre threads. Você pode usar as primitivas de sincronização do "
"módulo :mod:`threading` em vez disso."

#: ../../library/signal.rst:69
msgid ""
"Besides, only the main thread of the main interpreter is allowed to set a "
"new signal handler."
msgstr ""
"Além disso, somente a thread principal do interpretador principal tem "
"permissão para definir um novo manipulador de sinal."

#: ../../library/signal.rst:73
msgid "Module contents"
msgstr "Conteúdo do módulo"

#: ../../library/signal.rst:75
msgid ""
"signal (SIG*), handler (:const:`SIG_DFL`, :const:`SIG_IGN`) and sigmask (:"
"const:`SIG_BLOCK`, :const:`SIG_UNBLOCK`, :const:`SIG_SETMASK`) related "
"constants listed below were turned into :class:`enums <enum.IntEnum>` (:"
"class:`Signals`, :class:`Handlers` and :class:`Sigmasks` respectively). :"
"func:`getsignal`, :func:`pthread_sigmask`, :func:`sigpending` and :func:"
"`sigwait` functions return human-readable :class:`enums <enum.IntEnum>` as :"
"class:`Signals` objects."
msgstr ""
"As constantes relacionadas a sinal (SIG*), manipulador (:const:`SIG_DFL`, :"
"const:`SIG_IGN`) e sigmask (:const:`SIG_BLOCK`, :const:`SIG_UNBLOCK`, :const:"
"`SIG_SETMASK`) listadas abaixo foram transformadas em :class:`enums <enum."
"IntEnum>` (:class:`Signals`, :class:`Handlers` e :class:`Sigmasks` "
"respectivamente). As funções :func:`getsignal`, :func:`pthread_sigmask`, :"
"func:`sigpending` e :func:`sigwait` retornam :class:`enums <enum.IntEnum>` "
"legíveis por humanos como objetos :class:`Signals`."

#: ../../library/signal.rst:85
msgid "The signal module defines three enums:"
msgstr "O módulo de sinal define três enumerações:"

#: ../../library/signal.rst:89
msgid ""
":class:`enum.IntEnum` collection of SIG* constants and the CTRL_* constants."
msgstr ""
"Coleção de :class:`enum.IntEnum` de constantes SIG* e constantes CTRL_*."

#: ../../library/signal.rst:95
msgid ""
":class:`enum.IntEnum` collection the constants :const:`SIG_DFL` and :const:"
"`SIG_IGN`."
msgstr ""
"Coleção de :class:`enum.IntEnum` das constantes :const:`SIG_DFL` e :const:"
"`SIG_IGN`."

#: ../../library/signal.rst:101
msgid ""
":class:`enum.IntEnum` collection the constants :const:`SIG_BLOCK`, :const:"
"`SIG_UNBLOCK` and :const:`SIG_SETMASK`."
msgstr ""
"Coleção de :class:`enum.IntEnum` das constantes :const:`SIG_BLOCK`, :const:"
"`SIG_UNBLOCK` e :const:`SIG_SETMASK`."

#: ../../library/signal.rst:103 ../../library/signal.rst:136
#: ../../library/signal.rst:142 ../../library/signal.rst:148
#: ../../library/signal.rst:154 ../../library/signal.rst:160
#: ../../library/signal.rst:166 ../../library/signal.rst:180
#: ../../library/signal.rst:198 ../../library/signal.rst:206
#: ../../library/signal.rst:217 ../../library/signal.rst:232
#: ../../library/signal.rst:238 ../../library/signal.rst:244
#: ../../library/signal.rst:262 ../../library/signal.rst:272
#: ../../library/signal.rst:351 ../../library/signal.rst:390
#: ../../library/signal.rst:414 ../../library/signal.rst:437
#: ../../library/signal.rst:471 ../../library/signal.rst:501
#: ../../library/signal.rst:508 ../../library/signal.rst:563
#: ../../library/signal.rst:605 ../../library/signal.rst:620
#: ../../library/signal.rst:646 ../../library/signal.rst:666
msgid "Availability"
msgstr "Disponibilidade"

#: ../../library/signal.rst:105 ../../library/signal.rst:473
msgid ""
"See the man page :manpage:`sigprocmask(2)` and :manpage:`pthread_sigmask(3)` "
"for further information."
msgstr ""
"Veja a página man :manpage:`sigprocmask(2)` e :manpage:`pthread_sigmask(3)` "
"para mais informações."

#: ../../library/signal.rst:111
msgid "The variables defined in the :mod:`signal` module are:"
msgstr "As variáveis definidas no módulo :mod:`signal` são:"

#: ../../library/signal.rst:116
msgid ""
"This is one of two standard signal handling options; it will simply perform "
"the default function for the signal.  For example, on most systems the "
"default action for :const:`SIGQUIT` is to dump core and exit, while the "
"default action for :const:`SIGCHLD` is to simply ignore it."
msgstr ""
"Esta é uma das duas opções de manipulação de sinal padrão; ela simplesmente "
"executará a função padrão para o sinal. Por exemplo, na maioria dos "
"sistemas, a ação padrão para :const:`SIGQUIT` é despejar o núcleo e sair, "
"enquanto a ação padrão para :const:`SIGCHLD` é simplesmente ignorá-lo."

#: ../../library/signal.rst:124
msgid ""
"This is another standard signal handler, which will simply ignore the given "
"signal."
msgstr ""
"Este é outro manipulador de sinal padrão, que simplesmente ignorará o sinal "
"fornecido."

#: ../../library/signal.rst:130
msgid "Abort signal from :manpage:`abort(3)`."
msgstr "Sinal de abortar de :manpage:`abort(3)`."

#: ../../library/signal.rst:134
msgid "Timer signal from :manpage:`alarm(2)`."
msgstr "Sinal do temporizador de :manpage:`alarm(2)`."

#: ../../library/signal.rst:140
msgid "Interrupt from keyboard (CTRL + BREAK)."
msgstr "Interrupção do teclado (CTRL + BREAK)."

#: ../../library/signal.rst:146
msgid "Bus error (bad memory access)."
msgstr "Erro de barramento (acesso incorreto à memória)."

#: ../../library/signal.rst:152
msgid "Child process stopped or terminated."
msgstr "Processo filho interrompido ou encerrado."

#: ../../library/signal.rst:158
msgid "Alias to :data:`SIGCHLD`."
msgstr "Apelido para :data:`SIGCHLD`."

#: ../../library/signal.rst:164
msgid "Continue the process if it is currently stopped"
msgstr "Continua o processo se ele estiver parado no momento"

#: ../../library/signal.rst:170
msgid "Floating-point exception. For example, division by zero."
msgstr "Exceção de ponto flutuante. Por exemplo, divisão por zero."

#: ../../library/signal.rst:173
msgid ""
":exc:`ZeroDivisionError` is raised when the second argument of a division or "
"modulo operation is zero."
msgstr ""
":exc:`ZeroDivisionError` é levatanda quando o segundo argumento de uma "
"operação de divisão ou módulo é zero."

#: ../../library/signal.rst:178
msgid ""
"Hangup detected on controlling terminal or death of controlling process."
msgstr ""
"Travamento detectado no terminal de controle ou morte do processo de "
"controle."

#: ../../library/signal.rst:184
msgid "Illegal instruction."
msgstr "Instrução ilegal."

#: ../../library/signal.rst:188
msgid "Interrupt from keyboard (CTRL + C)."
msgstr "Interrupção do teclado (CTRL + C)."

#: ../../library/signal.rst:190
msgid "Default action is to raise :exc:`KeyboardInterrupt`."
msgstr "A ação padrão é levantar :exc:`KeyboardInterrupt`."

#: ../../library/signal.rst:194
msgid "Kill signal."
msgstr "Sinal de matar."

#: ../../library/signal.rst:196
msgid "It cannot be caught, blocked, or ignored."
msgstr "Ele não pode ser capturado, bloqueado ou ignorado."

#: ../../library/signal.rst:202
msgid "Broken pipe: write to pipe with no readers."
msgstr "Encadeamento quebrado: escreve no encadeamento sem leitores."

#: ../../library/signal.rst:204
msgid "Default action is to ignore the signal."
msgstr "A ação padrão é ignorar o sinal."

#: ../../library/signal.rst:210
msgid "Segmentation fault: invalid memory reference."
msgstr "Falha de segmentação: referência de memória inválida."

#: ../../library/signal.rst:214
msgid ""
"Stack fault on coprocessor. The Linux kernel does not raise this signal: it "
"can only be raised in user space."
msgstr ""
"Falha de pilha no coprocessador. O kernel Linux não levanta esse sinal: ele "
"só pode ser emitido no espaço do usuário."

#: ../../library/signal.rst:219
msgid ""
"On architectures where the signal is available. See the man page :manpage:"
"`signal(7)` for further information."
msgstr ""
"Em arquiteturas onde o sinal está disponível. Veja a página man :manpage:"
"`signal(7)` para mais informações."

#: ../../library/signal.rst:226
msgid "Termination signal."
msgstr "Sinal de encerramento."

#: ../../library/signal.rst:230
msgid "User-defined signal 1."
msgstr "Sinal definido pelo usuário 1."

#: ../../library/signal.rst:236
msgid "User-defined signal 2."
msgstr "Sinal definido pelo usuário 2."

#: ../../library/signal.rst:242
msgid "Window resize signal."
msgstr "Sinal de redimensionamento do Windows."

#: ../../library/signal.rst:248
msgid ""
"All the signal numbers are defined symbolically.  For example, the hangup "
"signal is defined as :const:`signal.SIGHUP`; the variable names are "
"identical to the names used in C programs, as found in ``<signal.h>``.  The "
"Unix man page for ':c:func:`signal`' lists the existing signals (on some "
"systems this is :manpage:`signal(2)`, on others the list is in :manpage:"
"`signal(7)`). Note that not all systems define the same set of signal names; "
"only those names defined by the system are defined by this module."
msgstr ""
"Todos os números de sinal são definidos simbolicamente. Por exemplo, o sinal "
"de desligamento é definido como :const:`signal.SIGHUP`; os nomes das "
"variáveis ​​são idênticos aos usados ​​em programas C, como encontrados em "
"``<signal.h>``. A página man do Unix para ':c:func:`signal`' lista os sinais "
"existentes (em alguns sistemas, é :manpage:`signal(2)`, em outros, a lista "
"está em :manpage:`signal(7)`). Observe que nem todos os sistemas definem o "
"mesmo conjunto de nomes de sinais; apenas os nomes definidos pelo sistema "
"são definidos por este módulo."

#: ../../library/signal.rst:259
msgid ""
"The signal corresponding to the :kbd:`Ctrl+C` keystroke event. This signal "
"can only be used with :func:`os.kill`."
msgstr ""
"O sinal correspondente ao evento de pressionamento de tecla :kbd:`Ctrl+C`. "
"Este sinal só pode ser usado com :func:`os.kill`."

#: ../../library/signal.rst:269
msgid ""
"The signal corresponding to the :kbd:`Ctrl+Break` keystroke event. This "
"signal can only be used with :func:`os.kill`."
msgstr ""
"O sinal correspondente ao evento de pressionamento de tecla :kbd:"
"`Ctrl+Break`. Este sinal só pode ser usado com :func:`os.kill`."

#: ../../library/signal.rst:279
msgid ""
"One more than the number of the highest signal number. Use :func:"
"`valid_signals` to get valid signal numbers."
msgstr ""
"Um a mais que o número do sinal mais alto. Use :func:`valid_signals` para "
"obter números de sinais válidos."

#: ../../library/signal.rst:285
msgid ""
"Decrements interval timer in real time, and delivers :const:`SIGALRM` upon "
"expiration."
msgstr ""
"Diminui o intervalo do temporizador em tempo real e entrega :const:`SIGALRM` "
"ao expirar."

#: ../../library/signal.rst:291
msgid ""
"Decrements interval timer only when the process is executing, and delivers "
"SIGVTALRM upon expiration."
msgstr ""
"Diminui o intervalo do temporizador somente quando o processo está em "
"execução e entrega SIGVTALRM após a expiração."

#: ../../library/signal.rst:297
msgid ""
"Decrements interval timer both when the process executes and when the system "
"is executing on behalf of the process. Coupled with ITIMER_VIRTUAL, this "
"timer is usually used to profile the time spent by the application in user "
"and kernel space. SIGPROF is delivered upon expiration."
msgstr ""
"Diminui o temporizador de intervalo tanto quando o processo é executado "
"quanto quando o sistema está executando em nome do processo. Juntamente com "
"o ITIMER_VIRTUAL, este temporizador é geralmente usado para criar um perfil "
"do tempo gasto pelo aplicativo nos espaços do usuário e do kernel. O SIGPROF "
"é fornecido após a expiração."

#: ../../library/signal.rst:305
msgid ""
"A possible value for the *how* parameter to :func:`pthread_sigmask` "
"indicating that signals are to be blocked."
msgstr ""
"Um possível valor para o parâmetro *how* para :func:`pthread_sigmask` "
"indicando que os sinais devem ser bloqueados."

#: ../../library/signal.rst:312
msgid ""
"A possible value for the *how* parameter to :func:`pthread_sigmask` "
"indicating that signals are to be unblocked."
msgstr ""
"Um possível valor para o parâmetro *how* para :func:`pthread_sigmask` "
"indicando que os sinais devem ser desbloqueados."

#: ../../library/signal.rst:319
msgid ""
"A possible value for the *how* parameter to :func:`pthread_sigmask` "
"indicating that the signal mask is to be replaced."
msgstr ""
"Um possível valor para o parâmetro *how* para :func:`pthread_sigmask` "
"indicando que a máscara de sinal deve ser substituída."

#: ../../library/signal.rst:325
msgid "The :mod:`signal` module defines one exception:"
msgstr "O módulo :mod:`signal` define uma exceção:"

#: ../../library/signal.rst:329
msgid ""
"Raised to signal an error from the underlying :func:`setitimer` or :func:"
"`getitimer` implementation. Expect this error if an invalid interval timer "
"or a negative time is passed to :func:`setitimer`. This error is a subtype "
"of :exc:`OSError`."
msgstr ""
"Levantada para sinalizar um erro da implementação subjacente de :func:"
"`setitimer` ou :func:`getitimer`. Espere este erro se um temporizador de "
"intervalo inválido ou um tempo negativo for passado para :func:`setitimer`. "
"Este erro é um subtipo de :exc:`OSError`."

#: ../../library/signal.rst:334
msgid ""
"This error used to be a subtype of :exc:`IOError`, which is now an alias of :"
"exc:`OSError`."
msgstr ""
"Este erro costumava ser um subtipo de :exc:`IOError`, que agora é um apelido "
"de :exc:`OSError`."

#: ../../library/signal.rst:339
msgid "The :mod:`signal` module defines the following functions:"
msgstr "O módulo :mod:`signal` define as seguintes funções:"

#: ../../library/signal.rst:344
msgid ""
"If *time* is non-zero, this function requests that a :const:`SIGALRM` signal "
"be sent to the process in *time* seconds. Any previously scheduled alarm is "
"canceled (only one alarm can be scheduled at any time).  The returned value "
"is then the number of seconds before any previously set alarm was to have "
"been delivered. If *time* is zero, no alarm is scheduled, and any scheduled "
"alarm is canceled.  If the return value is zero, no alarm is currently "
"scheduled."
msgstr ""
"Se *time* for diferente de zero, esta função solicita que um sinal :const:"
"`SIGALRM` seja enviado ao processo em *time* segundos. Qualquer alarme "
"previamente agendado será cancelado (apenas um alarme pode ser agendado por "
"vez). O valor retornado será o número de segundos antes de qualquer alarme "
"previamente configurado ter sido emitido. Se *time* for zero, nenhum alarme "
"será agendado e qualquer alarme agendado será cancelado. Se o valor "
"retornado for zero, nenhum alarme será agendado no momento."

#: ../../library/signal.rst:353
msgid "See the man page :manpage:`alarm(2)` for further information."
msgstr "Veja a página man :manpage:`alarm(2)` para mais informações."

#: ../../library/signal.rst:358
msgid ""
"Return the current signal handler for the signal *signalnum*. The returned "
"value may be a callable Python object, or one of the special values :const:"
"`signal.SIG_IGN`, :const:`signal.SIG_DFL` or :const:`None`.  Here, :const:"
"`signal.SIG_IGN` means that the signal was previously ignored, :const:"
"`signal.SIG_DFL` means that the default way of handling the signal was "
"previously in use, and ``None`` means that the previous signal handler was "
"not installed from Python."
msgstr ""
"Retorna o manipulador de sinal atual para o sinal *signalnum*. O valor "
"retornado pode ser um objeto Python invocável ou um dos valores especiais :"
"const:`signal.SIG_IGN`, :const:`signal.SIG_DFL` ou :const:`None`. Aqui, :"
"const:`signal.SIG_IGN` significa que o sinal foi ignorado anteriormente, :"
"const:`signal.SIG_DFL` significa que a maneira padrão de manipular o sinal "
"estava em uso anteriormente e ``None`` significa que o manipulador de sinal "
"anterior não foi instalado a partir do Python."

#: ../../library/signal.rst:369
msgid ""
"Returns the description of signal *signalnum*, such as \"Interrupt\" for :"
"const:`SIGINT`. Returns :const:`None` if *signalnum* has no description. "
"Raises :exc:`ValueError` if *signalnum* is invalid."
msgstr ""
"Retorna a descrição do sinal *signalnum*, como \"Interrupt\" para :const:"
"`SIGINT`. Retorna :const:`None` se *signalnum* não tiver descrição. Levanta :"
"exc:`ValueError` se *signalnum* for inválido."

#: ../../library/signal.rst:378
msgid ""
"Return the set of valid signal numbers on this platform.  This can be less "
"than ``range(1, NSIG)`` if some signals are reserved by the system for "
"internal use."
msgstr ""
"Retorna o conjunto de números de sinais válidos nesta plataforma. Pode ser "
"menor que ``range(1, NSIG)`` se alguns sinais forem reservados pelo sistema "
"para uso interno."

#: ../../library/signal.rst:387
msgid ""
"Cause the process to sleep until a signal is received; the appropriate "
"handler will then be called.  Returns nothing."
msgstr ""
"Faz o processo hibernar até que um sinal seja recebido; o manipulador "
"apropriado será então chamado. Não retorna nada."

#: ../../library/signal.rst:392
msgid "See the man page :manpage:`signal(2)` for further information."
msgstr "Veja a página man :manpage:`signal(2)` para mais informações."

#: ../../library/signal.rst:394
msgid ""
"See also :func:`sigwait`, :func:`sigwaitinfo`, :func:`sigtimedwait` and :"
"func:`sigpending`."
msgstr ""
"veja também :func:`sigwait`, :func:`sigwaitinfo`, :func:`sigtimedwait` e :"
"func:`sigpending`."

#: ../../library/signal.rst:400
msgid "Sends a signal to the calling process. Returns nothing."
msgstr "Envia um sinal para o processo de chamada. Não retorna nada."

#: ../../library/signal.rst:407
msgid ""
"Send signal *sig* to the process referred to by file descriptor *pidfd*. "
"Python does not currently support the *siginfo* parameter; it must be "
"``None``.  The *flags* argument is provided for future extensions; no flag "
"values are currently defined."
msgstr ""
"Envia o sinal *sig* para o processo referenciado pelo descritor de arquivo "
"*pidfd*. Atualmente, o Python não suporta o parâmetro *siginfo*; ele deve "
"ser ``None``. O argumento *flags* é fornecido para futuras extensões; nenhum "
"valor de sinalizador está definido no momento."

#: ../../library/signal.rst:412
msgid "See the :manpage:`pidfd_send_signal(2)` man page for more information."
msgstr ""
"Veja a página man :manpage:`pidfd_send_signal(2)` para mais informações."

#: ../../library/signal.rst:420
msgid ""
"Send the signal *signalnum* to the thread *thread_id*, another thread in the "
"same process as the caller.  The target thread can be executing any code "
"(Python or not).  However, if the target thread is executing the Python "
"interpreter, the Python signal handlers will be :ref:`executed by the main "
"thread of the main interpreter <signals-and-threads>`.  Therefore, the only "
"point of sending a signal to a particular Python thread would be to force a "
"running system call to fail with :exc:`InterruptedError`."
msgstr ""
"Envia o sinal *signalnum* para a thread *thread_id*, outra thread no mesmo "
"processo que a chamadora. A thread alvo pode estar executando qualquer "
"código (Python ou não). No entanto, se a thread alvo estiver executando o "
"interpretador Python, os manipuladores de sinal Python serão :ref:"
"`executados pela thread principal do interpretador principal <signals-and-"
"threads>`. Portanto, o único objetivo de enviar um sinal para uma thread "
"Python específica seria forçar uma chamada de sistema em execução a falhar "
"com :exc:`InterruptedError`."

#: ../../library/signal.rst:428
msgid ""
"Use :func:`threading.get_ident` or the :attr:`~threading.Thread.ident` "
"attribute of :class:`threading.Thread` objects to get a suitable value for "
"*thread_id*."
msgstr ""
"Utilize a :func:`threading.get_ident` ou o atributo :attr:`~threading.Thread."
"ident` dos objetos :class:`threading.Thread` para obter um valor adequado "
"para *thread_id*."

#: ../../library/signal.rst:432
msgid ""
"If *signalnum* is 0, then no signal is sent, but error checking is still "
"performed; this can be used to check if the target thread is still running."
msgstr ""
"Se *signalnum* for 0, nenhum sinal será enviado, mas a verificação de erros "
"ainda será realizada; isso pode ser usado para verificar se a thread de "
"destino ainda está em execução."

#: ../../library/signal.rst:435
msgid ""
"Raises an :ref:`auditing event <auditing>` ``signal.pthread_kill`` with "
"arguments ``thread_id``, ``signalnum``."
msgstr ""
"Levanta um :ref:`evento de auditoria <auditing>` ``signal.pthread_kill`` com "
"os argumentos ``thread_id``, ``signalnum``."

#: ../../library/signal.rst:439
msgid "See the man page :manpage:`pthread_kill(3)` for further  information."
msgstr "Veja a página man :manpage:`pthread_kill(3)` para mais informações."

#: ../../library/signal.rst:441
msgid "See also :func:`os.kill`."
msgstr "Veja também :func:`os.kill`."

#: ../../library/signal.rst:448
msgid ""
"Fetch and/or change the signal mask of the calling thread.  The signal mask "
"is the set of signals whose delivery is currently blocked for the caller. "
"Return the old signal mask as a set of signals."
msgstr ""
"Busca e/ou altera a máscara de sinal da thread chamadora. A máscara de sinal "
"é o conjunto de sinais cuja entrega está atualmente bloqueada para o "
"chamador. Retorna a máscara de sinal antiga como um conjunto de sinais."

#: ../../library/signal.rst:452
msgid ""
"The behavior of the call is dependent on the value of *how*, as follows."
msgstr "O comportamento da chamada depende do valor de *how*, como segue."

#: ../../library/signal.rst:454
msgid ""
":data:`SIG_BLOCK`: The set of blocked signals is the union of the current "
"set and the *mask* argument."
msgstr ""
":data:`SIG_BLOCK`: O conjunto de sinais bloqueados é a união do conjunto "
"atual e do argumento *mask*."

#: ../../library/signal.rst:456
msgid ""
":data:`SIG_UNBLOCK`: The signals in *mask* are removed from the current set "
"of blocked signals.  It is permissible to attempt to unblock a signal which "
"is not blocked."
msgstr ""
":data:`SIG_UNBLOCK`: Os sinais em *mask* são removidos do conjunto atual de "
"sinais bloqueados. É permitido tentar desbloquear um sinal que não esteja "
"bloqueado."

#: ../../library/signal.rst:459
msgid ""
":data:`SIG_SETMASK`: The set of blocked signals is set to the *mask* "
"argument."
msgstr ""
":data:`SIG_SETMASK`: O conjunto de sinais bloqueados é definido como o "
"argumento *mask*."

#: ../../library/signal.rst:462
msgid ""
"*mask* is a set of signal numbers (e.g. {:const:`signal.SIGINT`, :const:"
"`signal.SIGTERM`}). Use :func:`~signal.valid_signals` for a full mask "
"including all signals."
msgstr ""
"*mask* é um conjunto de números de sinais (ex.: {:const:`signal.SIGINT`, :"
"const:`signal.SIGTERM`}). Use :func:`~signal.valid_signals` para uma máscara "
"completa, incluindo todos os sinais."

#: ../../library/signal.rst:466
msgid ""
"For example, ``signal.pthread_sigmask(signal.SIG_BLOCK, [])`` reads the "
"signal mask of the calling thread."
msgstr ""
"Por exemplo, ``signal.pthread_sigmask(signal.SIG_BLOCK, [])`` lê a máscara "
"de sinal da thread de chamada."

#: ../../library/signal.rst:469
msgid ":data:`SIGKILL` and :data:`SIGSTOP` cannot be blocked."
msgstr ":data:`SIGKILL` e :data:`SIGSTOP` não podem ser bloqueados."

#: ../../library/signal.rst:476
msgid "See also :func:`pause`, :func:`sigpending` and :func:`sigwait`."
msgstr "Veja também :func:`pause`, :func:`sigpending` e :func:`sigwait`."

#: ../../library/signal.rst:483
msgid ""
"Sets given interval timer (one of :const:`signal.ITIMER_REAL`, :const:"
"`signal.ITIMER_VIRTUAL` or :const:`signal.ITIMER_PROF`) specified by *which* "
"to fire after *seconds* (float is accepted, different from :func:`alarm`) "
"and after that every *interval* seconds (if *interval* is non-zero). The "
"interval timer specified by *which* can be cleared by setting *seconds* to "
"zero."
msgstr ""
"Define o temporizador de intervalo fornecido (um dos seguintes: :const:"
"`signal.ITIMER_REAL`, :const:`signal.ITIMER_VIRTUAL` ou :const:`signal."
"ITIMER_PROF`) especificado por *which* para disparar após *seconds* (float é "
"aceito, diferente de :func:`alarm`) e, depois disso, a cada *interval* "
"segundos (se *interval* for diferente de zero). O temporizador de intervalo "
"especificado por *which* pode ser zerado definindo *seconds* como zero."

#: ../../library/signal.rst:490
msgid ""
"When an interval timer fires, a signal is sent to the process. The signal "
"sent is dependent on the timer being used; :const:`signal.ITIMER_REAL` will "
"deliver :const:`SIGALRM`, :const:`signal.ITIMER_VIRTUAL` sends :const:"
"`SIGVTALRM`, and :const:`signal.ITIMER_PROF` will deliver :const:`SIGPROF`."
msgstr ""
"Quando um temporizador de intervalo dispara, um sinal é enviado ao processo. "
"O sinal enviado depende do temporizador utilizado; :const:`signal."
"ITIMER_REAL` enviará :const:`SIGALRM`, :const:`signal.ITIMER_VIRTUAL` "
"enviará :const:`SIGVTALRM` e :const:`signal.ITIMER_PROF` enviará :const:"
"`SIGPROF`."

#: ../../library/signal.rst:496
msgid "The old values are returned as a tuple: (delay, interval)."
msgstr "Os valores antigos são retornados como uma tupla: (atraso, intervalo)."

#: ../../library/signal.rst:498
msgid ""
"Attempting to pass an invalid interval timer will cause an :exc:"
"`ItimerError`."
msgstr ""
"Tentar passar um intervalo de tempo inválido causará uma :exc:`ItimerError`."

#: ../../library/signal.rst:506
msgid "Returns current value of a given interval timer specified by *which*."
msgstr ""
"Retorna o valor atual de um intervalo de tempo especificado por *which*."

#: ../../library/signal.rst:513
msgid ""
"Set the wakeup file descriptor to *fd*.  When a signal your program has "
"registered a signal handler for is received, the signal number is written as "
"a single byte into the fd.  If you haven't registered a signal handler for "
"the signals you care about, then nothing will be written to the wakeup fd. "
"This can be used by a library to wakeup a poll or select call, allowing the "
"signal to be fully processed."
msgstr ""
"Define o descritor de arquivo de ativação como *fd*. Quando um sinal para o "
"qual seu programa registrou um manipulador de sinais é recebido, o número do "
"sinal é escrito como um único byte no fd. Se você não registrou um "
"manipulador de sinais para os sinais de seu interesse, nada será escrito no "
"fd de ativação. Isso pode ser usado por uma biblioteca para ativar uma "
"chamada de poll ou seleção, permitindo que o sinal seja totalmente "
"processado."

#: ../../library/signal.rst:520
msgid ""
"The old wakeup fd is returned (or -1 if file descriptor wakeup was not "
"enabled).  If *fd* is -1, file descriptor wakeup is disabled. If not -1, "
"*fd* must be non-blocking.  It is up to the library to remove any bytes from "
"*fd* before calling poll or select again."
msgstr ""
"O antigo fd de ativação é retornado (ou -1 se a ativação do descritor de "
"arquivo não estava habilitada). Se *fd* for -1, a ativação do descritor de "
"arquivo está desabilitada. Se não for -1, *fd* deve ser não bloqueante. Cabe "
"à biblioteca remover quaisquer bytes de *fd* antes de chamar poll ou select "
"novamente."

#: ../../library/signal.rst:525 ../../library/signal.rst:580
msgid ""
"When threads are enabled, this function can only be called from :ref:`the "
"main thread of the main interpreter <signals-and-threads>`; attempting to "
"call it from other threads will cause a :exc:`ValueError` exception to be "
"raised."
msgstr ""
"Quando threads estão habilitadas, esta função só pode ser chamada da :ref:"
"`thread principal do interpretador principal <signals-and-threads>`; tentar "
"chamá-la de outras threads levantará uma exceção :exc:`ValueError`."

#: ../../library/signal.rst:530
msgid ""
"There are two common ways to use this function. In both approaches, you use "
"the fd to wake up when a signal arrives, but then they differ in how they "
"determine *which* signal or signals have arrived."
msgstr ""
"Há duas maneiras comuns de usar esta função. Em ambas as abordagens, você "
"usa o fd para despertar quando um sinal chega, mas elas diferem na forma "
"como determinam *which* sinal ou sinais chegaram."

#: ../../library/signal.rst:535
msgid ""
"In the first approach, we read the data out of the fd's buffer, and the byte "
"values give you the signal numbers. This is simple, but in rare cases it can "
"run into a problem: generally the fd will have a limited amount of buffer "
"space, and if too many signals arrive too quickly, then the buffer may "
"become full, and some signals may be lost. If you use this approach, then "
"you should set ``warn_on_full_buffer=True``, which will at least cause a "
"warning to be printed to stderr when signals are lost."
msgstr ""
"Na primeira abordagem, lemos os dados do buffer do fd, e os valores dos "
"bytes fornecem os números dos sinais. Isso é simples, mas em casos raros "
"pode apresentar um problema: geralmente, o fd terá um espaço de buffer "
"limitado e, se muitos sinais chegarem muito rápido, o buffer pode ficar "
"cheio e alguns sinais podem ser perdidos. Se você usar essa abordagem, "
"defina ``warn_on_full_buffer=True``, o que pelo menos fará com que um aviso "
"seja impresso no stderr quando os sinais forem perdidos."

#: ../../library/signal.rst:544
msgid ""
"In the second approach, we use the wakeup fd *only* for wakeups, and ignore "
"the actual byte values. In this case, all we care about is whether the fd's "
"buffer is empty or non-empty; a full buffer doesn't indicate a problem at "
"all. If you use this approach, then you should set "
"``warn_on_full_buffer=False``, so that your users are not confused by "
"spurious warning messages."
msgstr ""
"Na segunda abordagem, usamos o fd de ativação *apenas* para ativações e "
"ignoramos os valores de bytes reais. Nesse caso, tudo o que importa é se o "
"buffer do fd está vazio ou não; um buffer cheio não indica nenhum problema. "
"Se você usar essa abordagem, defina ``warn_on_full_buffer=False`` para que "
"seus usuários não sejam confundidos por mensagens de aviso falsas."

#: ../../library/signal.rst:551
msgid "On Windows, the function now also supports socket handles."
msgstr "No Windows, a função agora também suporta manipuladores de socket."

#: ../../library/signal.rst:554
msgid "Added ``warn_on_full_buffer`` parameter."
msgstr "Adiciona o parâmetro ``warn_on_full_buffer``."

#: ../../library/signal.rst:559
msgid ""
"Change system call restart behaviour: if *flag* is :const:`False`, system "
"calls will be restarted when interrupted by signal *signalnum*, otherwise "
"system calls will be interrupted.  Returns nothing."
msgstr ""
"Altera o comportamento de reinicialização de chamadas de sistema: se *flag* "
"for :const:`False`, as chamadas de sistema serão reiniciadas quando "
"interrompidas pelo sinal *signalnum*; caso contrário, as chamadas de sistema "
"serão interrompidas. Não retorna nada."

#: ../../library/signal.rst:565
msgid "See the man page :manpage:`siginterrupt(3)` for further information."
msgstr "Veja a página man :manpage:`siginterrupt(3)` para mais informações."

#: ../../library/signal.rst:567
msgid ""
"Note that installing a signal handler with :func:`signal` will reset the "
"restart behaviour to interruptible by implicitly calling :c:func:`!"
"siginterrupt` with a true *flag* value for the given signal."
msgstr ""
"Observe que a instalação de um manipulador de sinal com :func:`signal` "
"redefinirá o comportamento de reinicialização para interrompível ao chamar "
"implicitamente :c:func:`!siginterrupt` com *flag* contendo valor verdadeiro "
"para o sinal fornecido."

#: ../../library/signal.rst:574
msgid ""
"Set the handler for signal *signalnum* to the function *handler*.  *handler* "
"can be a callable Python object taking two arguments (see below), or one of "
"the special values :const:`signal.SIG_IGN` or :const:`signal.SIG_DFL`.  The "
"previous signal handler will be returned (see the description of :func:"
"`getsignal` above).  (See the Unix man page :manpage:`signal(2)` for further "
"information.)"
msgstr ""
"Define o manipulador do sinal *signalnum* para a função *handler*. *handler* "
"pode ser um objeto Python invocável que recebe dois argumentos (veja "
"abaixo), ou um dos valores especiais :const:`signal.SIG_IGN` ou :const:"
"`signal.SIG_DFL`. O manipulador de sinal anterior será retornado (veja a "
"descrição de :func:`getsignal` acima). (Consulte a página man do Unix :"
"manpage:`signal(2)` para mais informações.)"

#: ../../library/signal.rst:585
msgid ""
"The *handler* is called with two arguments: the signal number and the "
"current stack frame (``None`` or a frame object; for a description of frame "
"objects, see the :ref:`description in the type hierarchy <frame-objects>` or "
"see the attribute descriptions in the :mod:`inspect` module)."
msgstr ""
"O *handler* é chamado com dois argumentos: o número do sinal e o quadro de "
"pilha atual (``None`` ou um objeto quadro; para uma descrição dos objetos "
"quadro, consulte a :ref:`descrição na hierarquia de tipo <frame-objects>` ou "
"consulte as descrições de atributo no módulo :mod:`inspect`)."

#: ../../library/signal.rst:590
msgid ""
"On Windows, :func:`signal` can only be called with :const:`SIGABRT`, :const:"
"`SIGFPE`, :const:`SIGILL`, :const:`SIGINT`, :const:`SIGSEGV`, :const:"
"`SIGTERM`, or :const:`SIGBREAK`. A :exc:`ValueError` will be raised in any "
"other case. Note that not all systems define the same set of signal names; "
"an :exc:`AttributeError` will be raised if a signal name is not defined as "
"``SIG*`` module level constant."
msgstr ""
"No Windows, :func:`signal` só pode ser chamado com :const:`SIGABRT`, :const:"
"`SIGFPE`, :const:`SIGILL`, :const:`SIGINT`, :const:`SIGSEGV`, :const:"
"`SIGTERM` ou :const:`SIGBREAK`. Uma exceção :exc:`ValueError` será levantada "
"em qualquer outro caso. Observe que nem todos os sistemas definem o mesmo "
"conjunto de nomes de sinais; uma exceção :exc:`AttributeError` será "
"levantada se um nome de sinal não for definido como constante de nível de "
"módulo ``SIG*``."

#: ../../library/signal.rst:601
msgid ""
"Examine the set of signals that are pending for delivery to the calling "
"thread (i.e., the signals which have been raised while blocked).  Return the "
"set of the pending signals."
msgstr ""
"Examine o conjunto de sinais pendentes para entrega ao thread de chamada (ou "
"seja, os sinais que foram gerados enquanto bloqueados). Retorne o conjunto "
"de sinais pendentes."

#: ../../library/signal.rst:607
msgid "See the man page :manpage:`sigpending(2)` for further information."
msgstr "Veja a página man :manpage:`sigpending(2)` para mais informações."

#: ../../library/signal.rst:609
msgid "See also :func:`pause`, :func:`pthread_sigmask` and :func:`sigwait`."
msgstr "Veja também :func:`pause`, :func:`pthread_sigmask` e :func:`sigwait`."

#: ../../library/signal.rst:616
msgid ""
"Suspend execution of the calling thread until the delivery of one of the "
"signals specified in the signal set *sigset*.  The function accepts the "
"signal (removes it from the pending list of signals), and returns the signal "
"number."
msgstr ""
"Suspende a execução do thread de chamada até a entrega de um dos sinais "
"especificados no conjunto de sinais *sigset*. A função aceita o sinal "
"(remove-o da lista de sinais pendentes) e retorna o número do sinal."

#: ../../library/signal.rst:622
msgid "See the man page :manpage:`sigwait(3)` for further information."
msgstr "Veja a página man :manpage:`sigwait(3)` para mais informações."

#: ../../library/signal.rst:624
msgid ""
"See also :func:`pause`, :func:`pthread_sigmask`, :func:`sigpending`, :func:"
"`sigwaitinfo` and :func:`sigtimedwait`."
msgstr ""
"Veja também :func:`pause`, :func:`pthread_sigmask`, :func:`sigpending`, :"
"func:`sigwaitinfo` e :func:`sigtimedwait`."

#: ../../library/signal.rst:632
msgid ""
"Suspend execution of the calling thread until the delivery of one of the "
"signals specified in the signal set *sigset*.  The function accepts the "
"signal and removes it from the pending list of signals. If one of the "
"signals in *sigset* is already pending for the calling thread, the function "
"will return immediately with information about that signal. The signal "
"handler is not called for the delivered signal. The function raises an :exc:"
"`InterruptedError` if it is interrupted by a signal that is not in *sigset*."
msgstr ""
"Suspende a execução da thread chamadora até a entrega de um dos sinais "
"especificados no conjunto de sinais *sigset*. A função aceita o sinal e o "
"remove da lista de sinais pendentes. Se um dos sinais em *sigset* já estiver "
"pendente para a thread chamadora, a função retornará imediatamente com "
"informações sobre esse sinal. O manipulador de sinais não é chamado para o "
"sinal entregue. A função levanta :exc:`InterruptedError` se for interrompida "
"por um sinal que não esteja em *sigset*."

#: ../../library/signal.rst:641
msgid ""
"The return value is an object representing the data contained in the :c:type:"
"`siginfo_t` structure, namely: :attr:`si_signo`, :attr:`si_code`, :attr:"
"`si_errno`, :attr:`si_pid`, :attr:`si_uid`, :attr:`si_status`, :attr:"
"`si_band`."
msgstr ""
"O valor de retorno é um objeto que representa os dados contidos na estrutura "
"de :c:type:`siginfo_t`, a saber: :attr:`si_signo`, :attr:`si_code`, :attr:"
"`si_errno`, :attr:`si_pid`, :attr:`si_uid`, :attr:`si_status`, :attr:"
"`si_band`."

#: ../../library/signal.rst:648
msgid "See the man page :manpage:`sigwaitinfo(2)` for further information."
msgstr "Veja a página man :manpage:`sigwaitinfo(2)` para mais informações."

#: ../../library/signal.rst:650
msgid "See also :func:`pause`, :func:`sigwait` and :func:`sigtimedwait`."
msgstr "Veja também :func:`pause`, :func:`sigwait` e :func:`sigtimedwait`."

#: ../../library/signal.rst:654
msgid ""
"The function is now retried if interrupted by a signal not in *sigset* and "
"the signal handler does not raise an exception (see :pep:`475` for the "
"rationale)."
msgstr ""
"A função agora é tentada novamente se interrompida por um sinal que não "
"esteja em *sigset* e o manipulador de sinal não levanta uma exceção (veja :"
"pep:`475` para a justificativa)."

#: ../../library/signal.rst:662
msgid ""
"Like :func:`sigwaitinfo`, but takes an additional *timeout* argument "
"specifying a timeout. If *timeout* is specified as ``0``, a poll is "
"performed. Returns :const:`None` if a timeout occurs."
msgstr ""
"Semelhante a :func:`sigwaitinfo`, mas recebe um argumento *timeout* "
"adicional que especifica um tempo limite. Se *timeout* for especificado como "
"``0``, uma consulta será realizada. Retorna :const:`None` se ocorrer um "
"tempo limite."

#: ../../library/signal.rst:668
msgid "See the man page :manpage:`sigtimedwait(2)` for further information."
msgstr "Veja a página man :manpage:`sigtimedwait(2)` para mais informações."

#: ../../library/signal.rst:670
msgid "See also :func:`pause`, :func:`sigwait` and :func:`sigwaitinfo`."
msgstr "Veja também :func:`pause`, :func:`sigwait` e :func:`sigwaitinfo`."

#: ../../library/signal.rst:674
msgid ""
"The function is now retried with the recomputed *timeout* if interrupted by "
"a signal not in *sigset* and the signal handler does not raise an exception "
"(see :pep:`475` for the rationale)."
msgstr ""
"A função agora é tentada novamente com o *timeout* recalculado se "
"interrompida por um sinal que não esteja em *sigset* e o manipulador de "
"sinal não levanta uma exceção (veja :pep:`475` para a justificativa)."

#: ../../library/signal.rst:683
msgid "Examples"
msgstr "Exemplos"

#: ../../library/signal.rst:685
msgid ""
"Here is a minimal example program. It uses the :func:`alarm` function to "
"limit the time spent waiting to open a file; this is useful if the file is "
"for a serial device that may not be turned on, which would normally cause "
"the :func:`os.open` to hang indefinitely.  The solution is to set a 5-second "
"alarm before opening the file; if the operation takes too long, the alarm "
"signal will be sent, and the handler raises an exception. ::"
msgstr ""
"Aqui está um programa de exemplo mínimo. Ele usa a função :func:`alarm` para "
"limitar o tempo gasto esperando para abrir um arquivo; isso é útil se o "
"arquivo for para um dispositivo serial que pode não estar ligado, o que "
"normalmente faria com que o :func:`os.open` travasse indefinidamente. A "
"solução é definir um alarme de 5 segundos antes de abrir o arquivo; se a "
"operação demorar muito, o sinal de alarme será enviado e o manipulador "
"levantará uma exceção. ::"

#: ../../library/signal.rst:692
msgid ""
"import signal, os\n"
"\n"
"def handler(signum, frame):\n"
"    signame = signal.Signals(signum).name\n"
"    print(f'Signal handler called with signal {signame} ({signum})')\n"
"    raise OSError(\"Couldn't open device!\")\n"
"\n"
"# Set the signal handler and a 5-second alarm\n"
"signal.signal(signal.SIGALRM, handler)\n"
"signal.alarm(5)\n"
"\n"
"# This open() may hang indefinitely\n"
"fd = os.open('/dev/ttyS0', os.O_RDWR)\n"
"\n"
"signal.alarm(0)          # Disable the alarm"
msgstr ""
"import signal, os\n"
"\n"
"def handler(signum, frame):\n"
"    signame = signal.Signals(signum).name\n"
"    print(f'Signal handler called with signal {signame} ({signum})')\n"
"    raise OSError(\"Couldn't open device!\")\n"
"\n"
"# Define o manipulador de sinal e um alarme de 5 segundos\n"
"signal.signal(signal.SIGALRM, handler)\n"
"signal.alarm(5)\n"
"\n"
"# Este open() pode travar indefinidamente\n"
"fd = os.open('/dev/ttyS0', os.O_RDWR)\n"
"\n"
"signal.alarm(0)          # Desabilita o alarme"

#: ../../library/signal.rst:709
msgid "Note on SIGPIPE"
msgstr "Nota sobre SIGPIPE"

#: ../../library/signal.rst:711
msgid ""
"Piping output of your program to tools like :manpage:`head(1)` will cause a :"
"const:`SIGPIPE` signal to be sent to your process when the receiver of its "
"standard output closes early.  This results in an exception like :code:"
"`BrokenPipeError: [Errno 32] Broken pipe`.  To handle this case, wrap your "
"entry point to catch this exception as follows::"
msgstr ""
"Canalizar a saída do seu programa para ferramentas como :manpage:`head(1)` "
"fará com que um sinal :const:`SIGPIPE` seja enviado ao seu processo quando o "
"receptor da saída padrão fechar antes do tempo. Isso resulta em uma exceção "
"como :code:`BrokenPipeError: [Errno 32] Broken pipe`. Para lidar com esse "
"caso, envolva seu ponto de entrada para capturar essa exceção da seguinte "
"maneira:"

#: ../../library/signal.rst:717
msgid ""
"import os\n"
"import sys\n"
"\n"
"def main():\n"
"    try:\n"
"        # simulate large output (your code replaces this loop)\n"
"        for x in range(10000):\n"
"            print(\"y\")\n"
"        # flush output here to force SIGPIPE to be triggered\n"
"        # while inside this try block.\n"
"        sys.stdout.flush()\n"
"    except BrokenPipeError:\n"
"        # Python flushes standard streams on exit; redirect remaining "
"output\n"
"        # to devnull to avoid another BrokenPipeError at shutdown\n"
"        devnull = os.open(os.devnull, os.O_WRONLY)\n"
"        os.dup2(devnull, sys.stdout.fileno())\n"
"        sys.exit(1)  # Python exits with error code 1 on EPIPE\n"
"\n"
"if __name__ == '__main__':\n"
"    main()"
msgstr ""
"import os\n"
"import sys\n"
"\n"
"def main():\n"
"    try:\n"
"        # simula uma saída grande (seu código substitui este loop)\n"
"        for x in range(10000):\n"
"            print(\"y\")\n"
"        # limpa a saída aqui para forçar o acionamento do SIGPIPE\n"
"        # enquanto estiver dentro deste bloco try.\n"
"        sys.stdout.flush()\n"
"    except BrokenPipeError:\n"
"        # Python libera fluxos padrão na saída; redireciona a saída "
"restante\n"
"        # para devnull para evitar outro BrokenPipeError no desligamento\n"
"        devnull = os.open(os.devnull, os.O_WRONLY)\n"
"        os.dup2(devnull, sys.stdout.fileno())\n"
"        sys.exit(1)  # Python exits with error code 1 on EPIPE\n"
"\n"
"if __name__ == '__main__':\n"
"    main()"

#: ../../library/signal.rst:738
msgid ""
"Do not set :const:`SIGPIPE`'s disposition to :const:`SIG_DFL` in order to "
"avoid :exc:`BrokenPipeError`.  Doing that would cause your program to exit "
"unexpectedly whenever any socket connection is interrupted while your "
"program is still writing to it."
msgstr ""
"Não defina a disposição de :const:`SIGPIPE` como :const:`SIG_DFL` para "
"evitar :exc:`BrokenPipeError`. Isso faria com que seu programa encerrasse "
"inesperadamente sempre que qualquer conexão de soquete fosse interrompida "
"enquanto o programa ainda estivesse escrevendo nele."

#: ../../library/signal.rst:747
msgid "Note on Signal Handlers and Exceptions"
msgstr "Nota sobre manipuladores de sinais e exceções"

#: ../../library/signal.rst:749
msgid ""
"If a signal handler raises an exception, the exception will be propagated to "
"the main thread and may be raised after any :term:`bytecode` instruction. "
"Most notably, a :exc:`KeyboardInterrupt` may appear at any point during "
"execution. Most Python code, including the standard library, cannot be made "
"robust against this, and so a :exc:`KeyboardInterrupt` (or any other "
"exception resulting from a signal handler) may on rare occasions put the "
"program in an unexpected state."
msgstr ""
"Se um manipulador de sinais levantar uma exceção, a exceção será propagada "
"para a thread principal e poderá ser levantada após qualquer instrução :term:"
"`bytecode`. Mais notavelmente, uma :exc:`KeyboardInterrupt` pode aparecer a "
"qualquer momento durante a execução. A maioria dos códigos Python, incluindo "
"a biblioteca padrão, não pode ser robusta contra isso, e, portanto, uma :exc:"
"`KeyboardInterrupt` (ou qualquer outra exceção resultante de um manipulador "
"de sinais) pode, em raras ocasiões, colocar o programa em um estado "
"inesperado."

#: ../../library/signal.rst:756
msgid "To illustrate this issue, consider the following code::"
msgstr "Para ilustrar esse problema, considere o seguinte código:"

#: ../../library/signal.rst:758
msgid ""
"class SpamContext:\n"
"    def __init__(self):\n"
"        self.lock = threading.Lock()\n"
"\n"
"    def __enter__(self):\n"
"        # If KeyboardInterrupt occurs here, everything is fine\n"
"        self.lock.acquire()\n"
"        # If KeyboardInterrupt occurs here, __exit__ will not be called\n"
"        ...\n"
"        # KeyboardInterrupt could occur just before the function returns\n"
"\n"
"    def __exit__(self, exc_type, exc_val, exc_tb):\n"
"        ...\n"
"        self.lock.release()"
msgstr ""
"class SpamContext:\n"
"    def __init__(self):\n"
"        self.lock = threading.Lock()\n"
"\n"
"    def __enter__(self):\n"
"        # Se ocorrer KeyboardInterrupt aqui, está tudo bem\n"
"        self.lock.acquire()\n"
"        # Se KeyboardInterrupt ocorrer aqui, __exit__ não será chamado\n"
"        ...\n"
"        # KeyboardInterrupt pode ocorrer logo antes do retorno da função\n"
"\n"
"    def __exit__(self, exc_type, exc_val, exc_tb):\n"
"        ...\n"
"        self.lock.release()"

#: ../../library/signal.rst:773
msgid ""
"For many programs, especially those that merely want to exit on :exc:"
"`KeyboardInterrupt`, this is not a problem, but applications that are "
"complex or require high reliability should avoid raising exceptions from "
"signal handlers. They should also avoid catching :exc:`KeyboardInterrupt` as "
"a means of gracefully shutting down.  Instead, they should install their "
"own :const:`SIGINT` handler. Below is an example of an HTTP server that "
"avoids :exc:`KeyboardInterrupt`::"
msgstr ""
"Para muitos programas, especialmente aqueles que simplesmente desejam "
"encerrar em :exc:`KeyboardInterrupt`, isso não é um problema, mas aplicações "
"complexos ou que exigem alta confiabilidade devem evitar levantar exceções "
"de manipuladores de sinal. Eles também devem evitar capturar :exc:"
"`KeyboardInterrupt` como forma de encerrar o programa sem problemas. Em vez "
"disso, devem instalar seu próprio manipulador :const:`SIGINT`. Abaixo está "
"um exemplo de um servidor HTTP que evita :exc:`KeyboardInterrupt`::"

#: ../../library/signal.rst:781
msgid ""
"import signal\n"
"import socket\n"
"from selectors import DefaultSelector, EVENT_READ\n"
"from http.server import HTTPServer, SimpleHTTPRequestHandler\n"
"\n"
"interrupt_read, interrupt_write = socket.socketpair()\n"
"\n"
"def handler(signum, frame):\n"
"    print('Signal handler called with signal', signum)\n"
"    interrupt_write.send(b'\\0')\n"
"signal.signal(signal.SIGINT, handler)\n"
"\n"
"def serve_forever(httpd):\n"
"    sel = DefaultSelector()\n"
"    sel.register(interrupt_read, EVENT_READ)\n"
"    sel.register(httpd, EVENT_READ)\n"
"\n"
"    while True:\n"
"        for key, _ in sel.select():\n"
"            if key.fileobj == interrupt_read:\n"
"                interrupt_read.recv(1)\n"
"                return\n"
"            if key.fileobj == httpd:\n"
"                httpd.handle_request()\n"
"\n"
"print(\"Serving on port 8000\")\n"
"httpd = HTTPServer(('', 8000), SimpleHTTPRequestHandler)\n"
"serve_forever(httpd)\n"
"print(\"Shutdown...\")"
msgstr ""
"import signal\n"
"import socket\n"
"from selectors import DefaultSelector, EVENT_READ\n"
"from http.server import HTTPServer, SimpleHTTPRequestHandler\n"
"\n"
"interrupt_read, interrupt_write = socket.socketpair()\n"
"\n"
"def handler(signum, frame):\n"
"    print('Signal handler called with signal', signum)\n"
"    interrupt_write.send(b'\\0')\n"
"signal.signal(signal.SIGINT, handler)\n"
"\n"
"def serve_forever(httpd):\n"
"    sel = DefaultSelector()\n"
"    sel.register(interrupt_read, EVENT_READ)\n"
"    sel.register(httpd, EVENT_READ)\n"
"\n"
"    while True:\n"
"        for key, _ in sel.select():\n"
"            if key.fileobj == interrupt_read:\n"
"                interrupt_read.recv(1)\n"
"                return\n"
"            if key.fileobj == httpd:\n"
"                httpd.handle_request()\n"
"\n"
"print(\"Serving on port 8000\")\n"
"httpd = HTTPServer(('', 8000), SimpleHTTPRequestHandler)\n"
"serve_forever(httpd)\n"
"print(\"Shutdown...\")"
