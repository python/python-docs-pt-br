# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Vinicius Gubiani Ferreira <vini.g.fer@gmail.com>, 2021
# Adorilson Bezerra <adorilson@gmail.com>, 2022
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-08 02:53-0300\n"
"PO-Revision-Date: 2021-06-28 00:55+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/asyncio-policy.rst:8
msgid "Policies"
msgstr "Políticas"

#: ../../library/asyncio-policy.rst:12
msgid ""
"Policies are deprecated and will be removed in Python 3.16. Users are "
"encouraged to use the :func:`asyncio.run` function or the :class:`asyncio."
"Runner` with *loop_factory* to use the desired loop implementation."
msgstr ""

#: ../../library/asyncio-policy.rst:18
msgid ""
"An event loop policy is a global object used to get and set the current :ref:"
"`event loop <asyncio-event-loop>`, as well as create new event loops. The "
"default policy can be :ref:`replaced <asyncio-policy-get-set>` with :ref:"
"`built-in alternatives <asyncio-policy-builtin>` to use different event loop "
"implementations, or substituted by a :ref:`custom policy <asyncio-custom-"
"policies>` that can override these behaviors."
msgstr ""

#: ../../library/asyncio-policy.rst:27
msgid ""
"The :ref:`policy object <asyncio-policy-objects>` gets and sets a separate "
"event loop per *context*. This is per-thread by default, though custom "
"policies could define *context* differently."
msgstr ""

#: ../../library/asyncio-policy.rst:32
msgid ""
"Custom event loop policies can control the behavior of :func:"
"`get_event_loop`, :func:`set_event_loop`, and :func:`new_event_loop`."
msgstr ""

#: ../../library/asyncio-policy.rst:35
msgid ""
"Policy objects should implement the APIs defined in the :class:"
"`AbstractEventLoopPolicy` abstract base class."
msgstr ""

#: ../../library/asyncio-policy.rst:42
msgid "Getting and Setting the Policy"
msgstr ""

#: ../../library/asyncio-policy.rst:44
msgid ""
"The following functions can be used to get and set the policy for the "
"current process:"
msgstr ""

#: ../../library/asyncio-policy.rst:49
msgid "Return the current process-wide policy."
msgstr "Retorna a política de todo o processo atual."

#: ../../library/asyncio-policy.rst:51
msgid ""
"The :func:`get_event_loop_policy` function is deprecated and will be removed "
"in Python 3.16."
msgstr ""

#: ../../library/asyncio-policy.rst:57
msgid "Set the current process-wide policy to *policy*."
msgstr ""

#: ../../library/asyncio-policy.rst:59
msgid "If *policy* is set to ``None``, the default policy is restored."
msgstr ""

#: ../../library/asyncio-policy.rst:61
msgid ""
"The :func:`set_event_loop_policy` function is deprecated and will be removed "
"in Python 3.16."
msgstr ""

#: ../../library/asyncio-policy.rst:69
msgid "Policy Objects"
msgstr ""

#: ../../library/asyncio-policy.rst:71
msgid "The abstract event loop policy base class is defined as follows:"
msgstr ""

#: ../../library/asyncio-policy.rst:75
msgid "An abstract base class for asyncio policies."
msgstr ""

#: ../../library/asyncio-policy.rst:79
msgid "Get the event loop for the current context."
msgstr "Obtém o laço de eventos para o contexto atual."

#: ../../library/asyncio-policy.rst:81
msgid ""
"Return an event loop object implementing the :class:`AbstractEventLoop` "
"interface."
msgstr ""

#: ../../library/asyncio-policy.rst:84 ../../library/asyncio-policy.rst:96
msgid "This method should never return ``None``."
msgstr ""

#: ../../library/asyncio-policy.rst:90
msgid "Set the event loop for the current context to *loop*."
msgstr "Define o laço de eventos do contexto atual como *loop*."

#: ../../library/asyncio-policy.rst:94
msgid "Create and return a new event loop object."
msgstr "Cria e retorna um novo objeto de laço de eventos."

#: ../../library/asyncio-policy.rst:98
msgid ""
"The :class:`AbstractEventLoopPolicy` class is deprecated and will be removed "
"in Python 3.16."
msgstr ""

#: ../../library/asyncio-policy.rst:105
msgid "asyncio ships with the following built-in policies:"
msgstr ""

#: ../../library/asyncio-policy.rst:110
msgid ""
"The default asyncio policy.  Uses :class:`SelectorEventLoop` on Unix and :"
"class:`ProactorEventLoop` on Windows."
msgstr ""

#: ../../library/asyncio-policy.rst:113
msgid ""
"There is no need to install the default policy manually. asyncio is "
"configured to use the default policy automatically."
msgstr ""

#: ../../library/asyncio-policy.rst:118
msgid "On Windows, :class:`ProactorEventLoop` is now used by default."
msgstr ""

#: ../../library/asyncio-policy.rst:120
msgid ""
"The :meth:`get_event_loop` method of the default asyncio policy now raises "
"a :exc:`RuntimeError` if there is no set event loop."
msgstr ""

#: ../../library/asyncio-policy.rst:124
msgid ""
"The :class:`DefaultEventLoopPolicy` class is deprecated and will be removed "
"in Python 3.16."
msgstr ""

#: ../../library/asyncio-policy.rst:131
msgid ""
"An alternative event loop policy that uses the :class:`SelectorEventLoop` "
"event loop implementation."
msgstr ""

#: ../../library/asyncio-policy.rst:134 ../../library/asyncio-policy.rst:146
msgid "Availability"
msgstr "Disponibilidade"

#: ../../library/asyncio-policy.rst:136
msgid ""
"The :class:`WindowsSelectorEventLoopPolicy` class is deprecated and will be "
"removed in Python 3.16."
msgstr ""

#: ../../library/asyncio-policy.rst:143
msgid ""
"An alternative event loop policy that uses the :class:`ProactorEventLoop` "
"event loop implementation."
msgstr ""

#: ../../library/asyncio-policy.rst:148
msgid ""
"The :class:`WindowsProactorEventLoopPolicy` class is deprecated and will be "
"removed in Python 3.16."
msgstr ""

#: ../../library/asyncio-policy.rst:156
msgid "Custom Policies"
msgstr ""

#: ../../library/asyncio-policy.rst:158
msgid ""
"To implement a new event loop policy, it is recommended to subclass :class:"
"`DefaultEventLoopPolicy` and override the methods for which custom behavior "
"is wanted, e.g.::"
msgstr ""

#: ../../library/asyncio-policy.rst:162
msgid ""
"class MyEventLoopPolicy(asyncio.DefaultEventLoopPolicy):\n"
"\n"
"    def get_event_loop(self):\n"
"        \"\"\"Get the event loop.\n"
"\n"
"        This may be None or an instance of EventLoop.\n"
"        \"\"\"\n"
"        loop = super().get_event_loop()\n"
"        # Do something with loop ...\n"
"        return loop\n"
"\n"
"asyncio.set_event_loop_policy(MyEventLoopPolicy())"
msgstr ""
