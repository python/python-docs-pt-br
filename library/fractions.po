# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-13 14:16+0000\n"
"PO-Revision-Date: 2021-06-28 01:06+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/fractions.rst:2
msgid ":mod:`!fractions` --- Rational numbers"
msgstr ":mod:`!fractions` --- Números racionais"

#: ../../library/fractions.rst:10
msgid "**Source code:** :source:`Lib/fractions.py`"
msgstr "**Código-fonte:** :source:`Lib/fractions.py`"

#: ../../library/fractions.rst:14
msgid ""
"The :mod:`fractions` module provides support for rational number arithmetic."
msgstr ""
"O módulo :mod:`fractions` fornece suporte para aritmética de números "
"racionais."

#: ../../library/fractions.rst:17
msgid ""
"A Fraction instance can be constructed from a pair of integers, from another "
"rational number, or from a string."
msgstr ""
"Uma instância de Fraction pode ser construída a partir de um par de números "
"inteiros, de outro número racional ou de uma string."

#: ../../library/fractions.rst:26
msgid ""
"The first version requires that *numerator* and *denominator* are instances "
"of :class:`numbers.Rational` and returns a new :class:`Fraction` instance "
"with value ``numerator/denominator``. If *denominator* is ``0``, it raises "
"a :exc:`ZeroDivisionError`. The second version requires that "
"*other_fraction* is an instance of :class:`numbers.Rational` and returns a :"
"class:`Fraction` instance with the same value.  The next two versions accept "
"either a :class:`float` or a :class:`decimal.Decimal` instance, and return "
"a :class:`Fraction` instance with exactly the same value.  Note that due to "
"the usual issues with binary floating point (see :ref:`tut-fp-issues`), the "
"argument to ``Fraction(1.1)`` is not exactly equal to 11/10, and so "
"``Fraction(1.1)`` does *not* return ``Fraction(11, 10)`` as one might "
"expect. (But see the documentation for the :meth:`limit_denominator` method "
"below.) The last version of the constructor expects a string or unicode "
"instance. The usual form for this instance is::"
msgstr ""
"A primeira versão requer que *numerator* e *denominator* sejam instâncias "
"de :class:`numbers.Rational` e retorna uma nova instância de :class:"
"`Fraction` com o valor ``numerator/denominator``. Se *denominator* for "
"``0``, ele levanta uma :exc:`ZeroDivisionError`. A segunda versão requer que "
"*other_fraction* seja uma instância de :class:`numbers.Rational` e retorna "
"uma instância de :class:`Fraction` com o mesmo valor. As próximas duas "
"versões aceitam uma instância de :class:`float` ou :class:`decimal.Decimal` "
"e retornam uma instância de :class:`Fraction` com exatamente o mesmo valor. "
"Note que devido aos problemas usuais com ponto flutuante binário (veja :ref:"
"`tut-fp-issues`), o argumento para ``Fraction(1.1)`` não é exatamente igual "
"a 11/10, e então ``Fraction(1.1)`` *não* retorna ``Fraction(11, 10)`` como "
"seria de se esperar. (Mas veja a documentação para o método :meth:"
"`limit_denominator` abaixo.) A última versão do construtor espera uma "
"instância de string ou unicode. A forma usual para esta instância é::"

#: ../../library/fractions.rst:41
msgid "[sign] numerator ['/' denominator]"
msgstr ""

#: ../../library/fractions.rst:43
msgid ""
"where the optional ``sign`` may be either '+' or '-' and ``numerator`` and "
"``denominator`` (if present) are strings of decimal digits (underscores may "
"be used to delimit digits as with integral literals in code).  In addition, "
"any string that represents a finite value and is accepted by the :class:"
"`float` constructor is also accepted by the :class:`Fraction` constructor.  "
"In either form the input string may also have leading and/or trailing "
"whitespace. Here are some examples::"
msgstr ""
"onde o ``sign`` opcional pode ser '+' ou '-' e ``numerator`` e "
"``denominator`` (se presente) são strings de dígitos decimais (sublinhados "
"podem ser usados ​​para delimitar dígitos como com literais integrais no "
"código). Além disso, qualquer string que represente um valor finito e seja "
"aceita pelo construtor :class:`float` também é aceita pelo construtor :class:"
"`Fraction`. Em qualquer forma, a string de entrada também pode ter espaços "
"em branco à esquerda e/ou à direita. Aqui estão alguns exemplos::"

#: ../../library/fractions.rst:52
msgid ""
">>> from fractions import Fraction\n"
">>> Fraction(16, -10)\n"
"Fraction(-8, 5)\n"
">>> Fraction(123)\n"
"Fraction(123, 1)\n"
">>> Fraction()\n"
"Fraction(0, 1)\n"
">>> Fraction('3/7')\n"
"Fraction(3, 7)\n"
">>> Fraction(' -3/7 ')\n"
"Fraction(-3, 7)\n"
">>> Fraction('1.414213 \\t\\n')\n"
"Fraction(1414213, 1000000)\n"
">>> Fraction('-.125')\n"
"Fraction(-1, 8)\n"
">>> Fraction('7e-6')\n"
"Fraction(7, 1000000)\n"
">>> Fraction(2.25)\n"
"Fraction(9, 4)\n"
">>> Fraction(1.1)\n"
"Fraction(2476979795053773, 2251799813685248)\n"
">>> from decimal import Decimal\n"
">>> Fraction(Decimal('1.1'))\n"
"Fraction(11, 10)"
msgstr ""

#: ../../library/fractions.rst:78
msgid ""
"The :class:`Fraction` class inherits from the abstract base class :class:"
"`numbers.Rational`, and implements all of the methods and operations from "
"that class.  :class:`Fraction` instances are :term:`hashable`, and should be "
"treated as immutable.  In addition, :class:`Fraction` has the following "
"properties and methods:"
msgstr ""
"A classe :class:`Fraction` herda da classe base abstrata :class:`numbers."
"Rational` e implementa todos os métodos e operações dessa classe. As "
"instâncias de :class:`Fraction` são :term:`hasheável` e devem ser tratadas "
"como imutáveis. Além disso, :class:`Fraction` tem as seguintes propriedades "
"e métodos:"

#: ../../library/fractions.rst:84
msgid ""
"The :class:`Fraction` constructor now accepts :class:`float` and :class:"
"`decimal.Decimal` instances."
msgstr ""
"O construtor :class:`Fraction` agora aceita instâncias :class:`float` e :"
"class:`decimal.Decimal`."

#: ../../library/fractions.rst:88
msgid ""
"The :func:`math.gcd` function is now used to normalize the *numerator* and "
"*denominator*. :func:`math.gcd` always returns an :class:`int` type. "
"Previously, the GCD type depended on *numerator* and *denominator*."
msgstr ""
"A função :func:`math.gcd` agora é usada para normalizar o *numerator* e o "
"*denominator*. :func:`math.gcd` sempre retorna um tipo :class:`int`. "
"Anteriormente, o tipo GCD dependia do *numerator* e do *denominator*."

#: ../../library/fractions.rst:93
msgid ""
"Underscores are now permitted when creating a :class:`Fraction` instance "
"from a string, following :PEP:`515` rules."
msgstr ""
"Sublinhados agora são permitidos ao criar uma instância :class:`Fraction` a "
"partir de uma string, seguindo as regras :PEP:`515`."

#: ../../library/fractions.rst:97
msgid ""
":class:`Fraction` implements ``__int__`` now to satisfy ``typing."
"SupportsInt`` instance checks."
msgstr ""
":class:`Fraction` implementa ``__int__`` agora para satisfazer verificações "
"de instância ``typing.SupportsInt``."

#: ../../library/fractions.rst:101
msgid ""
"Space is allowed around the slash for string inputs: ``Fraction('2 / 3')``."
msgstr ""
"É permitido espaço ao redor da barra para entradas de string: "
"``Fraction('2 / 3')``."

#: ../../library/fractions.rst:104
msgid ""
":class:`Fraction` instances now support float-style formatting, with "
"presentation types ``\"e\"``, ``\"E\"``, ``\"f\"``, ``\"F\"``, ``\"g\"``, "
"``\"G\"`` and ``\"%\"\"``."
msgstr ""
"Instâncias de :class:`Fraction` agora oferecem suporte à formatação no "
"estilo float, com tipos de apresentação ``\"e\"``, ``\"E\"``, ``\"f\"``, "
"``\"F\"``, ``\"g\"``, ``\"G\"`` e ``\"%\"\"``."

#: ../../library/fractions.rst:109
msgid ""
"Formatting of :class:`Fraction` instances without a presentation type now "
"supports fill, alignment, sign handling, minimum width and grouping."
msgstr ""
"A formatação de instâncias :class:`Fraction` sem um tipo de apresentação "
"agora oferece suporte a preenchimento, alinhamento, tratamento de sinais, "
"largura mínima e agrupamento."

#: ../../library/fractions.rst:115
msgid "Numerator of the Fraction in lowest term."
msgstr "Numerador de Fraction no menor termo."

#: ../../library/fractions.rst:119
msgid "Denominator of the Fraction in lowest term."
msgstr "Denominador de Fraction no menor termo."

#: ../../library/fractions.rst:124
msgid ""
"Return a tuple of two integers, whose ratio is equal to the original "
"Fraction.  The ratio is in lowest terms and has a positive denominator."
msgstr ""
"Retorna uma tupla de dois inteiros, cuja razão é igual a Fraction original. "
"A razão está em termos mais baixos e tem um denominador positivo."

#: ../../library/fractions.rst:132
msgid "Return ``True`` if the Fraction is an integer."
msgstr "Retorna ``True`` se a Fraction for um inteiro."

#: ../../library/fractions.rst:138
msgid ""
"Alternative constructor which only accepts instances of :class:`float` or :"
"class:`numbers.Integral`. Beware that ``Fraction.from_float(0.3)`` is not "
"the same value as ``Fraction(3, 10)``."
msgstr ""
"Construtor alternativo que aceita apenas instâncias de :class:`float` ou :"
"class:`numbers.Integral`. Esteja ciente de que ``Fraction.from_float(0.3)`` "
"não é o mesmo valor que ``Fraction(3, 10)``."

#: ../../library/fractions.rst:144
msgid ""
"From Python 3.2 onwards, you can also construct a :class:`Fraction` instance "
"directly from a :class:`float`."
msgstr ""
"A partir do Python 3.2, você também pode construir uma instância :class:"
"`Fraction` diretamente de um :class:`float`."

#: ../../library/fractions.rst:150
msgid ""
"Alternative constructor which only accepts instances of :class:`decimal."
"Decimal` or :class:`numbers.Integral`."
msgstr ""
"Construtor alternativo que aceita somente instâncias de :class:`decimal."
"Decimal` ou :class:`numbers.Integral`."

#: ../../library/fractions.rst:155
msgid ""
"From Python 3.2 onwards, you can also construct a :class:`Fraction` instance "
"directly from a :class:`decimal.Decimal` instance."
msgstr ""
"A partir do Python 3.2, você também pode construir uma instância :class:"
"`Fraction` diretamente de uma instância de :class:`decimal.Decimal`."

#: ../../library/fractions.rst:162
msgid ""
"Finds and returns the closest :class:`Fraction` to ``self`` that has "
"denominator at most max_denominator.  This method is useful for finding "
"rational approximations to a given floating-point number:"
msgstr ""
"Encontra e retorna o :class:`Fraction` mais próximo de ``self`` que tem "
"denominador no máximo max_denominator. Este método é útil para encontrar "
"aproximações racionais para um dado número de ponto flutuante:"

#: ../../library/fractions.rst:170
msgid "or for recovering a rational number that's represented as a float:"
msgstr ""
"ou para recuperar um número racional que é representado como um ponto "
"flutuante:"

#: ../../library/fractions.rst:183
msgid ""
"Returns the greatest :class:`int` ``<= self``.  This method can also be "
"accessed through the :func:`math.floor` function:"
msgstr ""
"Retorna o maior :class:`int` ``<= self``. Este método também pode ser "
"acessado por meio da função :func:`math.floor`:"

#: ../../library/fractions.rst:193
msgid ""
"Returns the least :class:`int` ``>= self``.  This method can also be "
"accessed through the :func:`math.ceil` function."
msgstr ""
"Retorna o menor :class:`int` ``>= self``. Este método também pode ser "
"acessado por meio da função :func:`math.ceil`."

#: ../../library/fractions.rst:200
msgid ""
"The first version returns the nearest :class:`int` to ``self``, rounding "
"half to even. The second version rounds ``self`` to the nearest multiple of "
"``Fraction(1, 10**ndigits)`` (logically, if ``ndigits`` is negative), again "
"rounding half toward even.  This method can also be accessed through the :"
"func:`round` function."
msgstr ""
"A primeira versão retorna o :class:`int` mais próximo de ``self``, "
"arredondando a metade para par. A segunda versão arredonda ``self`` para o "
"múltiplo mais próximo de ``Fraction(1, 10**ndigits)`` (logicamente, se "
"``ndigits`` for negativo), novamente arredondando a metade para par. Este "
"método também pode ser acessado por meio da função :func:`round`."

#: ../../library/fractions.rst:208
msgid ""
"Provides support for formatting of :class:`Fraction` instances via the :meth:"
"`str.format` method, the :func:`format` built-in function, or :ref:"
"`Formatted string literals <f-strings>`."
msgstr ""
"Fornece suporte para formatação de instâncias de :class:`Fraction` por meio "
"do método :meth:`str.format`, da função embutida :func:`format` ou :ref:"
"`literais de strings formatadas <f-strings>`."

#: ../../library/fractions.rst:212
msgid ""
"If the ``format_spec`` format specification string does not end with one of "
"the presentation types ``'e'``, ``'E'``, ``'f'``, ``'F'``, ``'g'``, ``'G'`` "
"or ``'%'`` then formatting follows the general rules for fill, alignment, "
"sign handling, minimum width, and grouping as described in the :ref:`format "
"specification mini-language <formatspec>`. The \"alternate form\" flag "
"``'#'`` is supported: if present, it forces the output string to always "
"include an explicit denominator, even when the value being formatted is an "
"exact integer. The zero-fill flag ``'0'`` is not supported."
msgstr ""
"Se a string de especificação de formato ``format_spec`` não terminar com um "
"dos tipos de apresentação ``'e'``, ``'E'``, ``'f'``, ``'F'``, ``'g'``, "
"``'G'`` ou ``'%'``, então a formatação segue as regras gerais para "
"preenchimento, alinhamento, tratamento de sinais, largura mínima e "
"agrupamento, conforme descrito na :ref:`minilinguagem de especificação de "
"formato <formatspec>`. O sinalizador de \"formato alternativo\" ``'#'`` é "
"suportado: se presente, ele força a string de saída a sempre incluir um "
"denominador explícito, mesmo quando o valor que está sendo formatado é um "
"inteiro exato. O sinalizador de preenchimento de zeros ``'0'`` não é "
"suportado."

#: ../../library/fractions.rst:222
msgid ""
"If the ``format_spec`` format specification string ends with one of the "
"presentation types ``'e'``, ``'E'``, ``'f'``, ``'F'``, ``'g'``, ``'G'`` or "
"``'%'`` then formatting follows the rules outlined for the :class:`float` "
"type in the :ref:`formatspec` section."
msgstr ""
"Se a string de especificação de formato ``format_spec`` terminar com um dos "
"tipos de apresentação ``'e'``, ``'E'``, ``'f'``, ``'F'``, ``'g'``, ``'G'`` "
"ou ``'%'``, então a formatação segue as regras descritas para o tipo :class:"
"`float` na seção :ref:`formatspec`."

#: ../../library/fractions.rst:227
msgid "Here are some examples::"
msgstr "Veja alguns exemplos::"

#: ../../library/fractions.rst:229
msgid ""
">>> from fractions import Fraction\n"
">>> format(Fraction(103993, 33102), '_')\n"
"'103_993/33_102'\n"
">>> format(Fraction(1, 7), '.^+10')\n"
"'...+1/7...'\n"
">>> format(Fraction(3, 1), '')\n"
"'3'\n"
">>> format(Fraction(3, 1), '#')\n"
"'3/1'\n"
">>> format(Fraction(1, 7), '.40g')\n"
"'0.1428571428571428571428571428571428571429'\n"
">>> format(Fraction('1234567.855'), '_.2f')\n"
"'1_234_567.86'\n"
">>> f\"{Fraction(355, 113):*>20.6e}\"\n"
"'********3.141593e+00'\n"
">>> old_price, new_price = 499, 672\n"
">>> \"{:.2%} price increase\".format(Fraction(new_price, old_price) - 1)\n"
"'34.67% price increase'"
msgstr ""

#: ../../library/fractions.rst:251
msgid "Module :mod:`numbers`"
msgstr "Módulo :mod:`numbers`"

#: ../../library/fractions.rst:252
msgid "The abstract base classes making up the numeric tower."
msgstr "As classes base abstratas que compõem a torre numérica."
