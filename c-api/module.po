# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2018-01-20 20:55+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/"
"python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../c-api/module.rst:6
msgid "Module Objects"
msgstr "Objeto Module"

#: ../../c-api/module.rst:10
msgid "There are only a few functions special to module objects."
msgstr ""

#: ../../c-api/module.rst:17
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python module type.  "
"This is exposed to Python programs as ``types.ModuleType``."
msgstr ""
"Esta instância de :c:type:`PyTypeObject` representa o tipo de módulo Python. "
"Isso é exposto a programas Python como ``types.ModuleType``."

#: ../../c-api/module.rst:23
msgid "Return true if *p* is a module object, or a subtype of a module object."
msgstr ""

#: ../../c-api/module.rst:25
msgid "Allowed subtypes to be accepted."
msgstr ""

#: ../../c-api/module.rst:31
msgid ""
"Return true if *p* is a module object, but not a subtype of :c:data:"
"`PyModule_Type`."
msgstr ""

#: ../../c-api/module.rst:44
msgid ""
"Return a new module object with the :attr:`__name__` attribute set to "
"*name*. Only the module's :attr:`__doc__` and :attr:`__name__` attributes "
"are filled in; the caller is responsible for providing a :attr:`__file__` "
"attribute."
msgstr ""

#: ../../c-api/module.rst:53
msgid ""
"Return the dictionary object that implements *module*'s namespace; this "
"object is the same as the :attr:`~object.__dict__` attribute of the module "
"object.  This function never fails.  It is recommended extensions use other :"
"c:func:`PyModule_\\*` and :c:func:`PyObject_\\*` functions rather than "
"directly manipulate a module's :attr:`~object.__dict__`."
msgstr ""

#: ../../c-api/module.rst:66
msgid ""
"Return *module*'s :attr:`__name__` value.  If the module does not provide "
"one, or if it is not a string, :exc:`SystemError` is raised and *NULL* is "
"returned."
msgstr ""

#: ../../c-api/module.rst:76
msgid ""
"Return the name of the file from which *module* was loaded using *module*'s :"
"attr:`__file__` attribute.  If this is not defined, or if it is not a "
"string, raise :exc:`SystemError` and return *NULL*."
msgstr ""

#: ../../c-api/module.rst:83
msgid ""
"Add an object to *module* as *name*.  This is a convenience function which "
"can be used from the module's initialization function.  This steals a "
"reference to *value*.  Return ``-1`` on error, ``0`` on success."
msgstr ""

#: ../../c-api/module.rst:92
msgid ""
"Add an integer constant to *module* as *name*.  This convenience function "
"can be used from the module's initialization function. Return ``-1`` on "
"error, ``0`` on success."
msgstr ""

#: ../../c-api/module.rst:101
msgid ""
"Add a string constant to *module* as *name*.  This convenience function can "
"be used from the module's initialization function.  The string *value* must "
"be null-terminated.  Return ``-1`` on error, ``0`` on success."
msgstr ""

#: ../../c-api/module.rst:109
msgid ""
"Add an int constant to *module*. The name and the value are taken from "
"*macro*. For example ``PyModule_AddIntMacro(module, AF_INET)`` adds the int "
"constant *AF_INET* with the value of *AF_INET* to *module*. Return ``-1`` on "
"error, ``0`` on success."
msgstr ""

#: ../../c-api/module.rst:118
msgid "Add a string constant to *module*."
msgstr ""
