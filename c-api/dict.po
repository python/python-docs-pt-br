# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2021
# Aline Balogh <linecrist@hotmail.com>, 2021
# felipe caridade fernandes <caridade500@gmail.com>, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Karen Tinoco, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-21 14:16+0000\n"
"PO-Revision-Date: 2021-06-28 00:48+0000\n"
"Last-Translator: Karen Tinoco, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/dict.rst:6
msgid "Dictionary Objects"
msgstr "Objetos dicionários"

#: ../../c-api/dict.rst:13
msgid ""
"This subtype of :c:type:`PyObject` represents a Python dictionary object."
msgstr ""
"Este subtipo do :c:type:`PyObject` representa um objeto dicionário Python."

#: ../../c-api/dict.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python dictionary "
"type.  This is the same object as :class:`dict` in the Python layer."
msgstr ""
"Esta instância do :c:type:`PyTypeObject` representa o tipo do dicionário "
"Python. Este é o mesmo objeto :class:`dict` na camada do Python."

#: ../../c-api/dict.rst:24
msgid ""
"Return true if *p* is a dict object or an instance of a subtype of the dict "
"type.  This function always succeeds."
msgstr ""
"Retorna verdadeiro se *p* é um objeto dicionário ou uma instância de um "
"subtipo do tipo dicionário. Esta função sempre tem sucesso."

#: ../../c-api/dict.rst:30
msgid ""
"Return true if *p* is a dict object, but not an instance of a subtype of the "
"dict type.  This function always succeeds."
msgstr ""
"Retorna verdadeiro se *p* é um objeto dicionário, mas não uma instância de "
"um subtipo do tipo dicionário. Esta função sempre tem sucesso."

#: ../../c-api/dict.rst:36
msgid "Return a new empty dictionary, or ``NULL`` on failure."
msgstr "Retorna um novo dicionário vazio ou ``NULL`` em caso de falha."

#: ../../c-api/dict.rst:41
msgid ""
"Return a :class:`types.MappingProxyType` object for a mapping which enforces "
"read-only behavior.  This is normally used to create a view to prevent "
"modification of the dictionary for non-dynamic class types."
msgstr ""
"Retorna um objeto :class:`types.MappingProxyType` para um mapeamento que "
"reforça o comportamento somente leitura. Isso normalmente é usado para criar "
"uma visão para evitar a modificação do dicionário para tipos de classes não "
"dinâmicas."

#: ../../c-api/dict.rst:48
msgid "Empty an existing dictionary of all key-value pairs."
msgstr "Esvazia um dicionário existente de todos os pares chave-valor."

#: ../../c-api/dict.rst:53
msgid ""
"Determine if dictionary *p* contains *key*.  If an item in *p* is matches "
"*key*, return ``1``, otherwise return ``0``.  On error, return ``-1``. This "
"is equivalent to the Python expression ``key in p``."
msgstr ""
"Determina se o dicionário *p* contém *key*. Se um item em *p* corresponder à "
"*key*, retorna ``1``, caso contrário, retorna ``0``. Em caso de erro, "
"retorna ``-1``. Isso é equivalente à expressão Python ``key in p``."

#: ../../c-api/dict.rst:60
msgid ""
"This is the same as :c:func:`PyDict_Contains`, but *key* is specified as a :"
"c:expr:`const char*` UTF-8 encoded bytes string, rather than a :c:expr:"
"`PyObject*`."
msgstr ""
"É o mesmo que :c:func:`PyDict_Contains`, mas *key* é especificada como uma "
"string de bytes :c:expr:`const char*` codificada em UTF-8, em vez de um :c:"
"expr:`PyObject*`."

#: ../../c-api/dict.rst:69
msgid "Return a new dictionary that contains the same key-value pairs as *p*."
msgstr "Retorna um novo dicionário que contém o mesmo chave-valor como *p*."

#: ../../c-api/dict.rst:74
msgid ""
"Insert *val* into the dictionary *p* with a key of *key*.  *key* must be :"
"term:`hashable`; if it isn't, :exc:`TypeError` will be raised. Return ``0`` "
"on success or ``-1`` on failure.  This function *does not* steal a reference "
"to *val*."
msgstr ""
"Insere *val* no dicionário *p* com a tecla *key*. *key* deve ser :term:"
"`hasheável <hashable>`; se não for, :exc:`TypeError` será levantada. Retorna "
"``0`` em caso de sucesso ou ``-1`` em caso de falha. Esta função *não* rouba "
"uma referência a *val*."

#: ../../c-api/dict.rst:82
msgid ""
"This is the same as :c:func:`PyDict_SetItem`, but *key* is specified as a :c:"
"expr:`const char*` UTF-8 encoded bytes string, rather than a :c:expr:"
"`PyObject*`."
msgstr ""
"É o mesmo que :c:func:`PyDict_SetItem`, mas *key* é especificada como uma "
"string de bytes :c:expr:`const char*` codificada em UTF-8, em vez de um :c:"
"expr:`PyObject*`."

#: ../../c-api/dict.rst:89
msgid ""
"Remove the entry in dictionary *p* with key *key*. *key* must be :term:"
"`hashable`; if it isn't, :exc:`TypeError` is raised. If *key* is not in the "
"dictionary, :exc:`KeyError` is raised. Return ``0`` on success or ``-1`` on "
"failure."
msgstr ""
"Remove a entrada no dicionário *p* com a chave *key*. *key* deve ser :term:"
"`hasheável`; se não for, :exc:`TypeError` é levantada. Se *key* não estiver "
"no dicionário, :exc:`KeyError` é levantada. Retorna ``0`` em caso de sucesso "
"ou ``-1`` em caso de falha."

#: ../../c-api/dict.rst:97
msgid ""
"This is the same as :c:func:`PyDict_DelItem`, but *key* is specified as a :c:"
"expr:`const char*` UTF-8 encoded bytes string, rather than a :c:expr:"
"`PyObject*`."
msgstr ""
"É o mesmo que :c:func:`PyDict_DelItem`, mas *key* é especificada como uma "
"string de bytes :c:expr:`const char*` codificada em UTF-8, em vez de um :c:"
"expr:`PyObject*`."

#: ../../c-api/dict.rst:104
msgid ""
"Return a new :term:`strong reference` to the object from dictionary *p* "
"which has a key *key*:"
msgstr ""
"Retorna uma nova :term:`referência forte` para o objeto dicionário *p* que "
"possui uma chave *key*:"

#: ../../c-api/dict.rst:107
msgid ""
"If the key is present, set *\\*result* to a new :term:`strong reference` to "
"the value and return ``1``."
msgstr ""
"Se a chave estiver presente, define *\\*result* como uma nova :term:"
"`referência forte` para o valor e retorna ``1``."

#: ../../c-api/dict.rst:109
msgid "If the key is missing, set *\\*result* to ``NULL`` and return ``0``."
msgstr ""
"Se a chave estiver ausente, define *\\*result* como ``NULL`` e retorna ``0``."

#: ../../c-api/dict.rst:110 ../../c-api/dict.rst:207
msgid "On error, raise an exception and return ``-1``."
msgstr "Em caso de erro, levanta uma exceção e retorna ``-1``."

#: ../../c-api/dict.rst:114
msgid "See also the :c:func:`PyObject_GetItem` function."
msgstr "Veja também a função :c:func:`PyObject_GetItem`."

#: ../../c-api/dict.rst:119
msgid ""
"Return a :term:`borrowed reference` to the object from dictionary *p* which "
"has a key *key*.  Return ``NULL`` if the key *key* is missing *without* "
"setting an exception."
msgstr ""
"Retorna um :term:`referência emprestada` para o objeto do dicionário *p* que "
"possui uma chave *key*. Retorna ``NULL`` se a chave *key* não estiver "
"presente, mas *sem* definir uma exceção."

#: ../../c-api/dict.rst:125
msgid ""
"Exceptions that occur while this calls :meth:`~object.__hash__` and :meth:"
"`~object.__eq__` methods are silently ignored. Prefer the :c:func:"
"`PyDict_GetItemWithError` function instead."
msgstr ""
"Exceções que ocorrem ao chamar os métodos :meth:`~object.__hash__` e :meth:"
"`~object.__eq__` são ignoradas silenciosamente. Ao invés disso, use a "
"função :c:func:`PyDict_GetItemWithError`."

#: ../../c-api/dict.rst:129
msgid ""
"Calling this API without :term:`GIL` held had been allowed for historical "
"reason. It is no longer allowed."
msgstr ""
"Chamar esta API sem :term:`GIL` retida era permitido por motivos históricos. "
"Não é mais permitido."

#: ../../c-api/dict.rst:136
msgid ""
"Variant of :c:func:`PyDict_GetItem` that does not suppress exceptions. "
"Return ``NULL`` **with** an exception set if an exception occurred.  Return "
"``NULL`` **without** an exception set if the key wasn't present."
msgstr ""
"Variante de :c:func:`PyDict_GetItem` que não suprime exceções. Retorna "
"``NULL`` **com** uma exceção definida se uma exceção ocorreu. Retorna "
"``NULL`` ** sem ** uma exceção definida se a chave não estiver presente."

#: ../../c-api/dict.rst:144
msgid ""
"This is the same as :c:func:`PyDict_GetItem`, but *key* is specified as a :c:"
"expr:`const char*` UTF-8 encoded bytes string, rather than a :c:expr:"
"`PyObject*`."
msgstr ""
"É o mesmo que :c:func:`PyDict_GetItem`, mas *key* é especificada como uma "
"string de bytes :c:expr:`const char*` codificada em UTF-8, em vez de um :c:"
"expr:`PyObject*`."

#: ../../c-api/dict.rst:150
msgid ""
"Exceptions that occur while this calls :meth:`~object.__hash__` and :meth:"
"`~object.__eq__` methods or while creating the temporary :class:`str` object "
"are silently ignored. Prefer using the :c:func:`PyDict_GetItemWithError` "
"function with your own :c:func:`PyUnicode_FromString` *key* instead."
msgstr ""
"Exceções que ocorrem ao chamar os métodos :meth:`~object.__hash__` e :meth:"
"`~object.__eq__` ou ao criar objetos temporários da classe :class:`str` são "
"ignoradas silenciosamente. Ao invés disso, prefira usar a função :c:func:"
"`PyDict_GetItemWithError` com sua própria *key* de :c:func:"
"`PyUnicode_FromString`."

#: ../../c-api/dict.rst:159
msgid ""
"Similar to :c:func:`PyDict_GetItemRef`, but *key* is specified as a :c:expr:"
"`const char*` UTF-8 encoded bytes string, rather than a :c:expr:`PyObject*`."
msgstr ""

#: ../../c-api/dict.rst:168
msgid ""
"This is the same as the Python-level :meth:`dict.setdefault`.  If present, "
"it returns the value corresponding to *key* from the dictionary *p*.  If the "
"key is not in the dict, it is inserted with value *defaultobj* and "
"*defaultobj* is returned.  This function evaluates the hash function of "
"*key* only once, instead of evaluating it independently for the lookup and "
"the insertion."
msgstr ""
"Isso é o mesmo que o :meth:`dict.setdefault` de nível Python. Se presente, "
"ele retorna o valor correspondente a *key* do dicionário *p*. Se a chave não "
"estiver no dict, ela será inserida com o valor *defaultobj* e *defaultobj* "
"será retornado. Esta função avalia a função hash de *key* apenas uma vez, em "
"vez de avaliá-la independentemente para a pesquisa e a inserção."

#: ../../c-api/dict.rst:179
msgid ""
"Inserts *default_value* into the dictionary *p* with a key of *key* if the "
"key is not already present in the dictionary. If *result* is not ``NULL``, "
"then *\\*result* is set to a :term:`strong reference` to either "
"*default_value*, if the key was not present, or the existing value, if *key* "
"was already present in the dictionary. Returns ``1`` if the key was present "
"and *default_value* was not inserted, or ``0`` if the key was not present "
"and *default_value* was inserted. On failure, returns ``-1``, sets an "
"exception, and sets ``*result`` to ``NULL``."
msgstr ""
"Insere *default_value* no dicionário *p* com uma chave *key* se a chave "
"ainda não estiver presente no dicionário. Se *result* não for ``NULL``, "
"então *\\*result* é definido como uma :term:`referência forte` para "
"*default_value*, se a chave não estiver presente, ou para o valor existente, "
"se *key* já estava presente no dicionário. Retorna ``1`` se a chave estava "
"presente e *default_value* não foi inserido, ou ``0`` se a chave não estava "
"presente e *default_value* foi inserido. Em caso de falha, retorna ``-1``, "
"define uma exceção e define ``*result`` como ``NULL``."

#: ../../c-api/dict.rst:189
msgid ""
"For clarity: if you have a strong reference to *default_value* before "
"calling this function, then after it returns, you hold a strong reference to "
"both *default_value* and *\\*result* (if it's not ``NULL``). These may refer "
"to the same object: in that case you hold two separate references to it."
msgstr ""
"Para maior clareza: se você tiver uma referência forte para *default_value* "
"antes de chamar esta função, então depois que ela retornar, você terá uma "
"referência forte para *default_value* e *\\*result* (se não for ``NULL``). "
"Estes podem referir-se ao mesmo objeto: nesse caso você mantém duas "
"referências separadas para ele."

#: ../../c-api/dict.rst:200
msgid ""
"Remove *key* from dictionary *p* and optionally return the removed value. Do "
"not raise :exc:`KeyError` if the key missing."
msgstr ""
"Remove *key* do dicionário *p* e, opcionalmente, retorna o valor removido. "
"Não levanta :exc:`KeyError` se a chave estiver ausente."

#: ../../c-api/dict.rst:203
msgid ""
"If the key is present, set *\\*result* to a new reference to the removed "
"value if *result* is not ``NULL``, and return ``1``."
msgstr ""
"Se a chave estiver presente, define *\\*result* como uma nova referência "
"para o valor se *result* não for ``NULL`` e retorna ``1``."

#: ../../c-api/dict.rst:205
msgid ""
"If the key is missing, set *\\*result* to ``NULL`` if *result* is not "
"``NULL``, and return ``0``."
msgstr ""
"Se a chave estiver ausente, define *\\*result* como ``NULL`` se *result* não "
"for ``NULL`` e retorna ``0``."

#: ../../c-api/dict.rst:209
msgid ""
"Similar to :meth:`dict.pop`, but without the default value and not raising :"
"exc:`KeyError` if the key missing."
msgstr ""

#: ../../c-api/dict.rst:217
msgid ""
"Similar to :c:func:`PyDict_Pop`, but *key* is specified as a :c:expr:`const "
"char*` UTF-8 encoded bytes string, rather than a :c:expr:`PyObject*`."
msgstr ""
"Similar a :c:func:`PyDict_Pop`, mas *key* é especificada como uma string de "
"bytes :c:expr:`const char*` codificada em UTF-8, em vez de um :c:expr:"
"`PyObject*`."

#: ../../c-api/dict.rst:226
msgid ""
"Return a :c:type:`PyListObject` containing all the items from the dictionary."
msgstr ""
"Retorna um :c:type:`PyListObject` contendo todos os itens do dicionário."

#: ../../c-api/dict.rst:231
msgid ""
"Return a :c:type:`PyListObject` containing all the keys from the dictionary."
msgstr ""
"Retorna um :c:type:`PyListObject` contendo todas as chaves do dicionário."

#: ../../c-api/dict.rst:236
msgid ""
"Return a :c:type:`PyListObject` containing all the values from the "
"dictionary *p*."
msgstr ""
"Retorna um :c:type:`PyListObject` contendo todos os valores do dicionário "
"*p*."

#: ../../c-api/dict.rst:244
msgid ""
"Return the number of items in the dictionary.  This is equivalent to "
"``len(p)`` on a dictionary."
msgstr ""
"Retorna o número de itens no dicionário. Isso é equivalente a ``len(p)`` em "
"um dicionário."

#: ../../c-api/dict.rst:250
msgid ""
"Iterate over all key-value pairs in the dictionary *p*.  The :c:type:"
"`Py_ssize_t` referred to by *ppos* must be initialized to ``0`` prior to the "
"first call to this function to start the iteration; the function returns "
"true for each pair in the dictionary, and false once all pairs have been "
"reported.  The parameters *pkey* and *pvalue* should either point to :c:expr:"
"`PyObject*` variables that will be filled in with each key and value, "
"respectively, or may be ``NULL``.  Any references returned through them are "
"borrowed.  *ppos* should not be altered during iteration. Its value "
"represents offsets within the internal dictionary structure, and since the "
"structure is sparse, the offsets are not consecutive."
msgstr ""
"Itera todos os pares de valores-chave no dicionário *p*. O :c:type:"
"`Py_ssize_t` referido por *ppos* deve ser inicializado para ``0`` antes da "
"primeira chamada para esta função para iniciar a iteração; a função retorna "
"true para cada par no dicionário e false quando todos os pares forem "
"relatados. Os parâmetros *pkey* e *pvalue* devem apontar para variáveis de :"
"c:expr:`PyObject*` que serão preenchidas com cada chave e valor, "
"respectivamente, ou podem ser ``NULL``. Todas as referências retornadas por "
"meio deles são emprestadas. *ppos* não deve ser alterado durante a iteração. "
"Seu valor representa deslocamentos dentro da estrutura do dicionário interno "
"e, como a estrutura é esparsa, os deslocamentos não são consecutivos."

#: ../../c-api/dict.rst:261
msgid "For example::"
msgstr "Por exemplo::"

#: ../../c-api/dict.rst:263
msgid ""
"PyObject *key, *value;\n"
"Py_ssize_t pos = 0;\n"
"\n"
"while (PyDict_Next(self->dict, &pos, &key, &value)) {\n"
"    /* do something interesting with the values... */\n"
"    ...\n"
"}"
msgstr ""
"PyObject *key, *value;\n"
"Py_ssize_t pos = 0;\n"
"\n"
"while (PyDict_Next(self->dict, &pos, &key, &value)) {\n"
"    /* fazer algo de interessante com os valores... */\n"
"    ...\n"
"}"

#: ../../c-api/dict.rst:271
msgid ""
"The dictionary *p* should not be mutated during iteration.  It is safe to "
"modify the values of the keys as you iterate over the dictionary, but only "
"so long as the set of keys does not change.  For example::"
msgstr ""
"O dicionário *p* não deve sofrer mutação durante a iteração. É seguro "
"modificar os valores das chaves à medida que você itera no dicionário, mas "
"apenas enquanto o conjunto de chaves não mudar. Por exemplo::"

#: ../../c-api/dict.rst:275
msgid ""
"PyObject *key, *value;\n"
"Py_ssize_t pos = 0;\n"
"\n"
"while (PyDict_Next(self->dict, &pos, &key, &value)) {\n"
"    long i = PyLong_AsLong(value);\n"
"    if (i == -1 && PyErr_Occurred()) {\n"
"        return -1;\n"
"    }\n"
"    PyObject *o = PyLong_FromLong(i + 1);\n"
"    if (o == NULL)\n"
"        return -1;\n"
"    if (PyDict_SetItem(self->dict, key, o) < 0) {\n"
"        Py_DECREF(o);\n"
"        return -1;\n"
"    }\n"
"    Py_DECREF(o);\n"
"}"
msgstr ""
"PyObject *key, *value;\n"
"Py_ssize_t pos = 0;\n"
"\n"
"while (PyDict_Next(self->dict, &pos, &key, &value)) {\n"
"    long i = PyLong_AsLong(value);\n"
"    if (i == -1 && PyErr_Occurred()) {\n"
"        return -1;\n"
"    }\n"
"    PyObject *o = PyLong_FromLong(i + 1);\n"
"    if (o == NULL)\n"
"        return -1;\n"
"    if (PyDict_SetItem(self->dict, key, o) < 0) {\n"
"        Py_DECREF(o);\n"
"        return -1;\n"
"    }\n"
"    Py_DECREF(o);\n"
"}"

#: ../../c-api/dict.rst:293
msgid ""
"The function is not thread-safe in the :term:`free-threaded <free "
"threading>` build without external synchronization.  You can use :c:macro:"
"`Py_BEGIN_CRITICAL_SECTION` to lock the dictionary while iterating over it::"
msgstr ""
"A função não é segura para thread na construção com :term:`threads livres "
"<free threading>` sem sincronização externa. Você pode usar :c:macro:"
"`Py_BEGIN_CRITICAL_SECTION` para travar o dicionário enquanto itera sobre "
"ele::"

#: ../../c-api/dict.rst:298
msgid ""
"Py_BEGIN_CRITICAL_SECTION(self->dict);\n"
"while (PyDict_Next(self->dict, &pos, &key, &value)) {\n"
"    ...\n"
"}\n"
"Py_END_CRITICAL_SECTION();"
msgstr ""
"Py_BEGIN_CRITICAL_SECTION(self->dict);\n"
"while (PyDict_Next(self->dict, &pos, &key, &value)) {\n"
"    ...\n"
"}\n"
"Py_END_CRITICAL_SECTION();"

#: ../../c-api/dict.rst:307
msgid ""
"Iterate over mapping object *b* adding key-value pairs to dictionary *a*. "
"*b* may be a dictionary, or any object supporting :c:func:`PyMapping_Keys` "
"and :c:func:`PyObject_GetItem`. If *override* is true, existing pairs in *a* "
"will be replaced if a matching key is found in *b*, otherwise pairs will "
"only be added if there is not a matching key in *a*. Return ``0`` on success "
"or ``-1`` if an exception was raised."
msgstr ""
"Itera sobre o objeto de mapeamento *b* adicionando pares de valores-chave ao "
"dicionário *a*. *b* pode ser um dicionário, ou qualquer objeto que suporte :"
"c:func:`PyMapping_Keys` e :c:func:`PyObject_GetItem`. Se *override* for "
"verdadeiro, os pares existentes em *a* serão substituídos se uma chave "
"correspondente for encontrada em *b*, caso contrário, os pares serão "
"adicionados apenas se não houver uma chave correspondente em *a*. Retorna "
"``0`` em caso de sucesso ou ``-1`` se uma exceção foi levantada."

#: ../../c-api/dict.rst:317
msgid ""
"This is the same as ``PyDict_Merge(a, b, 1)`` in C, and is similar to ``a."
"update(b)`` in Python except that :c:func:`PyDict_Update` doesn't fall back "
"to the iterating over a sequence of key value pairs if the second argument "
"has no \"keys\" attribute.  Return ``0`` on success or ``-1`` if an "
"exception was raised."
msgstr ""
"É o mesmo que ``PyDict_Merge(a, b, 1)`` em C, e é semelhante a ``a."
"update(b)`` em Python, exceto que :c:func:`PyDict_Update` não cai na "
"iteração em uma sequência de pares de valores de chave se o segundo "
"argumento não tiver o atributo \"keys\". Retorna ``0`` em caso de sucesso ou "
"``-1`` se uma exceção foi levantada."

#: ../../c-api/dict.rst:326
msgid ""
"Update or merge into dictionary *a*, from the key-value pairs in *seq2*. "
"*seq2* must be an iterable object producing iterable objects of length 2, "
"viewed as key-value pairs.  In case of duplicate keys, the last wins if "
"*override* is true, else the first wins. Return ``0`` on success or ``-1`` "
"if an exception was raised. Equivalent Python (except for the return value)::"
msgstr ""
"Atualiza ou mescla no dicionário *a*, a partir dos pares de chave-valor em "
"*seq2*. *seq2* deve ser um objeto iterável produzindo objetos iteráveis de "
"comprimento 2, vistos como pares chave-valor. No caso de chaves duplicadas, "
"a última vence se *override* for verdadeiro, caso contrário, a primeira "
"vence. Retorne ``0`` em caso de sucesso ou ``-1`` se uma exceção foi "
"levantada. Python equivalente (exceto para o valor de retorno)::"

#: ../../c-api/dict.rst:333
msgid ""
"def PyDict_MergeFromSeq2(a, seq2, override):\n"
"    for key, value in seq2:\n"
"        if override or key not in a:\n"
"            a[key] = value"
msgstr ""
"def PyDict_MergeFromSeq2(a, seq2, override):\n"
"    for key, value in seq2:\n"
"        if override or key not in a:\n"
"            a[key] = value"

#: ../../c-api/dict.rst:340
msgid ""
"Register *callback* as a dictionary watcher. Return a non-negative integer "
"id which must be passed to future calls to :c:func:`PyDict_Watch`. In case "
"of error (e.g. no more watcher IDs available), return ``-1`` and set an "
"exception."
msgstr ""
"Registra *callback* como um observador de dicionário. Retorna um ID inteiro "
"não negativo que deve ser passado para futuras chamadas a :c:func:"
"`PyDict_Watch`. Em caso de erro (por exemplo, não há mais IDs de observador "
"disponíveis), retorna ``-1`` e define uma exceção."

#: ../../c-api/dict.rst:349
msgid ""
"Clear watcher identified by *watcher_id* previously returned from :c:func:"
"`PyDict_AddWatcher`. Return ``0`` on success, ``-1`` on error (e.g. if the "
"given *watcher_id* was never registered.)"
msgstr ""
"Limpa o observador identificado por *watcher_id* retornado anteriormente de :"
"c:func:`PyDict_AddWatcher`. Retorna ``0`` em caso de sucesso, ``-1`` em caso "
"de erro (por exemplo, se o *watcher_id* fornecido nunca foi registrado)."

#: ../../c-api/dict.rst:357
msgid ""
"Mark dictionary *dict* as watched. The callback granted *watcher_id* by :c:"
"func:`PyDict_AddWatcher` will be called when *dict* is modified or "
"deallocated. Return ``0`` on success or ``-1`` on error."
msgstr ""
"Marca o dicionário *dict* como observado. A função de retorno concedida a "
"*watcher_id* por :c:func:`PyDict_AddWatcher` será chamada quando *dict* for "
"modificado ou desalocado. Retorna ``0`` em caso de sucesso ou ``-1`` em caso "
"de erro."

#: ../../c-api/dict.rst:365
msgid ""
"Mark dictionary *dict* as no longer watched. The callback granted "
"*watcher_id* by :c:func:`PyDict_AddWatcher` will no longer be called when "
"*dict* is modified or deallocated. The dict must previously have been "
"watched by this watcher. Return ``0`` on success or ``-1`` on error."
msgstr ""
"Marca o dicionário *dict* como não mais observado. A função de retorno "
"concedida a *watcher_id* por :c:func:`PyDict_AddWatcher` será chamada quando "
"*dict* for modificado ou desalocado. O dicionário deve ter sido observado "
"anteriormente por este observador. Retorna ``0`` em caso de sucesso ou "
"``-1`` em caso de erro."

#: ../../c-api/dict.rst:374
msgid ""
"Enumeration of possible dictionary watcher events: ``PyDict_EVENT_ADDED``, "
"``PyDict_EVENT_MODIFIED``, ``PyDict_EVENT_DELETED``, "
"``PyDict_EVENT_CLONED``, ``PyDict_EVENT_CLEARED``, or "
"``PyDict_EVENT_DEALLOCATED``."
msgstr ""
"Enumeração de possíveis eventos de observador de dicionário: "
"``PyDict_EVENT_ADDED``, ``PyDict_EVENT_MODIFIED``, ``PyDict_EVENT_DELETED``, "
"``PyDict_EVENT_CLONED``, ``PyDict_EVENT_CLEARED`` ou "
"``PyDict_EVENT_DEALLOCATED``."

#: ../../c-api/dict.rst:382
msgid "Type of a dict watcher callback function."
msgstr "Tipo de uma função de retorno de chamada de observador de dicionário."

#: ../../c-api/dict.rst:384
msgid ""
"If *event* is ``PyDict_EVENT_CLEARED`` or ``PyDict_EVENT_DEALLOCATED``, both "
"*key* and *new_value* will be ``NULL``. If *event* is ``PyDict_EVENT_ADDED`` "
"or ``PyDict_EVENT_MODIFIED``, *new_value* will be the new value for *key*. "
"If *event* is ``PyDict_EVENT_DELETED``, *key* is being deleted from the "
"dictionary and *new_value* will be ``NULL``."
msgstr ""
"Se *event* for ``PyDict_EVENT_CLEARED`` ou ``PyDict_EVENT_DEALLOCATED``, "
"tanto *key* quanto *new_value* serão ``NULL``. Se *event* for "
"``PyDict_EVENT_ADDED`` ou ``PyDict_EVENT_MODIFIED``, *new_value* será o novo "
"valor de *key*. Se *event* for ``PyDict_EVENT_DELETED``, *key* estará sendo "
"excluída do dicionário e *new_value* será ``NULL``."

#: ../../c-api/dict.rst:390
msgid ""
"``PyDict_EVENT_CLONED`` occurs when *dict* was previously empty and another "
"dict is merged into it. To maintain efficiency of this operation, per-key "
"``PyDict_EVENT_ADDED`` events are not issued in this case; instead a single "
"``PyDict_EVENT_CLONED`` is issued, and *key* will be the source dictionary."
msgstr ""
"``PyDict_EVENT_CLONED`` ocorre quando *dict* estava anteriormente vazio e "
"outro dict é mesclado a ele. Para manter a eficiência dessa operação, os "
"eventos ``PyDict_EVENT_ADDED`` por chave não são emitidos nesse caso; em vez "
"disso, um único ``PyDict_EVENT_CLONED`` é emitido e *key* será o dicionário "
"de origem."

#: ../../c-api/dict.rst:396
msgid ""
"The callback may inspect but must not modify *dict*; doing so could have "
"unpredictable effects, including infinite recursion. Do not trigger Python "
"code execution in the callback, as it could modify the dict as a side effect."
msgstr ""
"A função de retorno pode inspecionar, mas não deve modificar o *dict*; isso "
"pode ter efeitos imprevisíveis, inclusive recursão infinita. Não acione a "
"execução do código Python na função de retorno, pois isso poderia modificar "
"o dict como um efeito colateral."

#: ../../c-api/dict.rst:400
msgid ""
"If *event* is ``PyDict_EVENT_DEALLOCATED``, taking a new reference in the "
"callback to the about-to-be-destroyed dictionary will resurrect it and "
"prevent it from being freed at this time. When the resurrected object is "
"destroyed later, any watcher callbacks active at that time will be called "
"again."
msgstr ""
"Se *event* for ``PyDict_EVENT_DEALLOCATED``, a obtenção de uma nova "
"referência na função de retorno para o dicionário prestes a ser destruído o "
"ressuscitará e impedirá que ele seja liberado nesse momento. Quando o objeto "
"ressuscitado for destruído mais tarde, quaisquer funções de retorno do "
"observador ativos naquele momento serão chamados novamente."

#: ../../c-api/dict.rst:406
msgid ""
"Callbacks occur before the notified modification to *dict* takes place, so "
"the prior state of *dict* can be inspected."
msgstr ""
"As funções de retorno ocorrem antes que a modificação notificada no *dict* "
"ocorra, de modo que o estado anterior do *dict* possa ser inspecionado."

#: ../../c-api/dict.rst:409
msgid ""
"If the callback sets an exception, it must return ``-1``; this exception "
"will be printed as an unraisable exception using :c:func:"
"`PyErr_WriteUnraisable`. Otherwise it should return ``0``."
msgstr ""
"Se a função de retorno definir uma exceção, ela deverá retornar ``-1``; essa "
"exceção será impressa como uma exceção não reprovável usando :c:func:"
"`PyErr_WriteUnraisable`. Caso contrário, deverá retornar ``0``."

#: ../../c-api/dict.rst:413
msgid ""
"There may already be a pending exception set on entry to the callback. In "
"this case, the callback should return ``0`` with the same exception still "
"set. This means the callback may not call any other API that can set an "
"exception unless it saves and clears the exception state first, and restores "
"it before returning."
msgstr ""
"É possível que já exista uma exceção pendente definida na entrada da função "
"de retorno. Nesse caso, a função de retorno deve retornar ``0`` com a mesma "
"exceção ainda definida. Isso significa que a função de retorno não pode "
"chamar nenhuma outra API que possa definir uma exceção, a menos que salve e "
"limpe o estado da exceção primeiro e o restaure antes de retornar."

#: ../../c-api/dict.rst:8
msgid "object"
msgstr "objeto"

#: ../../c-api/dict.rst:8
msgid "dictionary"
msgstr "dicionário"

#: ../../c-api/dict.rst:242
msgid "built-in function"
msgstr "função embutida"

#: ../../c-api/dict.rst:242
msgid "len"
msgstr "len"
