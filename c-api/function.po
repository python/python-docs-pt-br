# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Italo Penaforte <italo.penaforte@gmail.com>, 2017
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-31 13:14+0000\n"
"PO-Revision-Date: 2017-02-16 17:35+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/function.rst:6
msgid "Function Objects"
msgstr "Objetos Function"

#: ../../c-api/function.rst:10
msgid "There are a few functions specific to Python functions."
msgstr "Existem algumas funções específicas para as funções do Python."

#: ../../c-api/function.rst:15
msgid "The C structure used for functions."
msgstr "A estrutura C usada para funções."

#: ../../c-api/function.rst:22
msgid ""
"This is an instance of :c:type:`PyTypeObject` and represents the Python "
"function type.  It is exposed to Python programmers as ``types."
"FunctionType``."
msgstr ""
"Esta é uma instância de :c:type:`PyTypeObject` e representa o tipo de função "
"Python. Está exposto aos programadores Python como ``types.FunctionType``."

#: ../../c-api/function.rst:28
msgid ""
"Return true if *o* is a function object (has type :c:data:"
"`PyFunction_Type`). The parameter must not be ``NULL``.  This function "
"always succeeds."
msgstr ""
"Retorna verdadeiro se *o* é um objeto de função (tem tipo :c:data:"
"`PyFunction_Type`). O parâmetro não deve ser ``NULL``. Esta função sempre "
"tem sucesso."

#: ../../c-api/function.rst:34
msgid ""
"Return a new function object associated with the code object *code*. "
"*globals* must be a dictionary with the global variables accessible to the "
"function."
msgstr ""
"Retorna um novo objeto função associado ao código objeto *code*. *globals* "
"deve ser um dicionário com as variáveis globais acessíveis à função."

#: ../../c-api/function.rst:37
msgid ""
"The function's docstring and name are retrieved from the code object. "
"*__module__* is retrieved from *globals*. The argument defaults, annotations "
"and closure are set to ``NULL``. *__qualname__* is set to the same value as "
"the function's name."
msgstr ""
"A docstring e o nome da função são recuperados do objeto de código. "
"*__module__ * é recuperado de *globals*. Os padrões de argumento, as "
"anotações e o encerramento são definidos como ``NULL``. *__qualname__* está "
"definido para o mesmo valor que o nome da função."

#: ../../c-api/function.rst:44
msgid ""
"As :c:func:`PyFunction_New`, but also allows setting the function object's "
"``__qualname__`` attribute.  *qualname* should be a unicode object or "
"``NULL``; if ``NULL``, the ``__qualname__`` attribute is set to the same "
"value as its ``__name__`` attribute."
msgstr ""
"Como :c:func:`PyFunction_New`, mas também permite configurar o atributo "
"``__qualname__`` do objeto da função. *qualname* deve ser um objeto unicode "
"ou ``NULL``; Se ``NULL``, o atributo ``__qualname__`` é definido como o "
"mesmo valor que o atributo ``__name__``."

#: ../../c-api/function.rst:54
msgid "Return the code object associated with the function object *op*."
msgstr "Retorna o objeto de código associado ao objeto função *op*."

#: ../../c-api/function.rst:59
msgid "Return the globals dictionary associated with the function object *op*."
msgstr "Retorna o dicionário global associado ao objeto função *op*."

#: ../../c-api/function.rst:64
msgid ""
"Return the *__module__* attribute of the function object *op*. This is "
"normally a string containing the module name, but can be set to any other "
"object by Python code."
msgstr ""
"Retorna o atributo *__module__* do objeto função *op*. Esta é normalmente "
"uma string contendo o nome do módulo, mas pode ser configurada para qualquer "
"outro objeto pelo código Python."

#: ../../c-api/function.rst:71
msgid ""
"Return the argument default values of the function object *op*. This can be "
"a tuple of arguments or ``NULL``."
msgstr ""
"Retorna o argumento os valores padrão do objeto função *op*. Isso pode ser "
"uma tupla de argumentos ou ``NULL``."

#: ../../c-api/function.rst:77
msgid ""
"Set the argument default values for the function object *op*. *defaults* "
"must be ``Py_None`` or a tuple."
msgstr ""
"Define o argumento valores padrão para o objeto função *op*. *defaults* deve "
"ser ``Py_None`` ou uma tupla."

#: ../../c-api/function.rst:80 ../../c-api/function.rst:94
#: ../../c-api/function.rst:108
msgid "Raises :exc:`SystemError` and returns ``-1`` on failure."
msgstr "Levanta :exc:`SystemError` e retorna ``-1`` em falha."

#: ../../c-api/function.rst:85
msgid ""
"Return the closure associated with the function object *op*. This can be "
"``NULL`` or a tuple of cell objects."
msgstr ""
"Retorna o fechamento associado ao objeto função *op*. Isso pode ser ``NULL`` "
"ou uma tupla de objetos de célula."

#: ../../c-api/function.rst:91
msgid ""
"Set the closure associated with the function object *op*. *closure* must be "
"``Py_None`` or a tuple of cell objects."
msgstr ""
"Define o fechamento associado ao objeto função *op*. *closure* deve ser "
"``Py_None`` ou uma tupla de objetos de célula."

#: ../../c-api/function.rst:99
msgid ""
"Return the annotations of the function object *op*. This can be a mutable "
"dictionary or ``NULL``."
msgstr ""
"Retorna as anotações do objeto função *op*. Este pode ser um dicionário "
"mutável ou ``NULL``."

#: ../../c-api/function.rst:105
msgid ""
"Set the annotations for the function object *op*. *annotations* must be a "
"dictionary or ``Py_None``."
msgstr ""
"Define as anotações para o objeto função *op*. *annotations* deve ser um "
"dicionário ou ``Py_None``."
