# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Italo Penaforte <italo.penaforte@gmail.com>, 2021
# Jones Martins, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-18 14:18+0000\n"
"PO-Revision-Date: 2021-06-28 00:48+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/function.rst:6
msgid "Function Objects"
msgstr "Objetos Função"

#: ../../c-api/function.rst:10
msgid "There are a few functions specific to Python functions."
msgstr "Existem algumas funções específicas para as funções do Python."

#: ../../c-api/function.rst:15
msgid "The C structure used for functions."
msgstr "A estrutura C usada para funções."

#: ../../c-api/function.rst:22
msgid ""
"This is an instance of :c:type:`PyTypeObject` and represents the Python "
"function type.  It is exposed to Python programmers as ``types."
"FunctionType``."
msgstr ""
"Esta é uma instância de :c:type:`PyTypeObject` e representa o tipo de função "
"Python. Está exposta a programadores Python como ``types.FunctionType``."

#: ../../c-api/function.rst:28
msgid ""
"Return true if *o* is a function object (has type :c:data:"
"`PyFunction_Type`). The parameter must not be ``NULL``.  This function "
"always succeeds."
msgstr ""
"Retorna verdadeiro se *o* for um objeto função (tem tipo :c:data:"
"`PyFunction_Type`). O parâmetro não deve ser ``NULL``. Esta função sempre "
"obtém sucesso."

#: ../../c-api/function.rst:34
msgid ""
"Return a new function object associated with the code object *code*. "
"*globals* must be a dictionary with the global variables accessible to the "
"function."
msgstr ""
"Retorna um novo objeto função associado ao objeto código *code*. *globals* "
"deve ser um dicionário com as variáveis globais acessíveis à função."

#: ../../c-api/function.rst:37
msgid ""
"The function's docstring and name are retrieved from the code object. :attr:"
"`~function.__module__` is retrieved from *globals*. The argument defaults, "
"annotations and closure are set to ``NULL``. :attr:`~function.__qualname__` "
"is set to the same value as the code object's :attr:`~codeobject."
"co_qualname` field."
msgstr ""
"O nome e *docstring* da função são adquiridos pelo objeto código. O "
"atributo :attr:`~function.__module__` é adquirido por meio de *globals*. Os "
"valores-padrão de argumentos, anotações, e fechamento são definidos como "
"``NULL``. O atributo :attr:`~function.__qualname__` é definido com o mesmo "
"valor do campo :attr:`~codeobject.co_qualname` de um objeto código."

#: ../../c-api/function.rst:46
msgid ""
"As :c:func:`PyFunction_New`, but also allows setting the function object's :"
"attr:`~function.__qualname__` attribute. *qualname* should be a unicode "
"object or ``NULL``; if ``NULL``, the :attr:`!__qualname__` attribute is set "
"to the same value as the code object's :attr:`~codeobject.co_qualname` field."
msgstr ""
"Similar a :c:func:`PyFunction_New`, mas também permite definir o atributo :"
"attr:`~function.__qualname__` do objeto função. *qualname* deve ser um "
"objeto Unicode ou ``NULL``. Se ``NULL``, o atributo :attr:`!__qualname__` é "
"definido com o mesmo valor do campo :attr:`~codeobject.co_qualname` do "
"objeto código."

#: ../../c-api/function.rst:57
msgid "Return the code object associated with the function object *op*."
msgstr "Retorna o objeto código associado ao objeto função *op*."

#: ../../c-api/function.rst:62
msgid "Return the globals dictionary associated with the function object *op*."
msgstr "Retorna o dicionário global associado ao objeto função *op*."

#: ../../c-api/function.rst:67
msgid ""
"Return a :term:`borrowed reference` to the :attr:`~function.__module__` "
"attribute of the :ref:`function object <user-defined-funcs>` *op*. It can be "
"*NULL*."
msgstr ""
"Retorna uma :term:`referência emprestada` ao atributo :attr:`~function."
"__module__` do :ref:`objeto função <user-defined-funcs>` *op*. Pode ser "
"`NULL`."

#: ../../c-api/function.rst:71
msgid ""
"This is normally a :class:`string <str>` containing the module name, but can "
"be set to any other object by Python code."
msgstr ""
"Normalmente, trata-se de um :class:`string <str>` contendo o nome do módulo, "
"mas pode ser definido como qualquer outro objeto pelo código Python."

#: ../../c-api/function.rst:77
msgid ""
"Return the argument default values of the function object *op*. This can be "
"a tuple of arguments or ``NULL``."
msgstr ""
"Retorna os valores-padrão de argumentos do objeto função *op*. Pode ser uma "
"tupla de argumentos ou ``NULL``."

#: ../../c-api/function.rst:83
msgid ""
"Set the argument default values for the function object *op*. *defaults* "
"must be ``Py_None`` or a tuple."
msgstr ""
"Define os valores-padrão dos argumentos do objeto função *op*. *defaults* "
"deve ser ``Py_None`` ou uma tupla."

#: ../../c-api/function.rst:86 ../../c-api/function.rst:109
#: ../../c-api/function.rst:123
msgid "Raises :exc:`SystemError` and returns ``-1`` on failure."
msgstr "Levanta :exc:`SystemError` e retorna ``-1`` em caso de falha."

#: ../../c-api/function.rst:91
msgid "Set the vectorcall field of a given function object *func*."
msgstr "Define o campo *vectorcall* de um objeto função *func*."

#: ../../c-api/function.rst:93
msgid ""
"Warning: extensions using this API must preserve the behavior of the "
"unaltered (default) vectorcall function!"
msgstr ""
"Atenção: extensões que usam essa API devem preservar o comportamento "
"inalterado (padrão) de uma função *vectorcall*!"

#: ../../c-api/function.rst:100
msgid ""
"Return the closure associated with the function object *op*. This can be "
"``NULL`` or a tuple of cell objects."
msgstr ""
"Retorna o fechamento associado ao objeto função *op*. Pode ser ``NULL`` ou "
"uma tupla de objetos célula."

#: ../../c-api/function.rst:106
msgid ""
"Set the closure associated with the function object *op*. *closure* must be "
"``Py_None`` or a tuple of cell objects."
msgstr ""
"Define o fechamento associado ao objeto função *op*. *closure* deve ser "
"``Py_None`` ou uma tupla de objetos de célula."

#: ../../c-api/function.rst:114
msgid ""
"Return the annotations of the function object *op*. This can be a mutable "
"dictionary or ``NULL``."
msgstr ""
"Retorna as anotações do objeto função *op*. Este pode ser um dicionário "
"mutável ou ``NULL``."

#: ../../c-api/function.rst:120
msgid ""
"Set the annotations for the function object *op*. *annotations* must be a "
"dictionary or ``Py_None``."
msgstr ""
"Define as anotações para o objeto função *op*. *annotations* deve ser um "
"dicionário ou ``Py_None``."

#: ../../c-api/function.rst:128
msgid ""
"Register *callback* as a function watcher for the current interpreter. "
"Return an ID which may be passed to :c:func:`PyFunction_ClearWatcher`. In "
"case of error (e.g. no more watcher IDs available), return ``-1`` and set an "
"exception."
msgstr ""
"Registra *callback* como uma sentinela de função para o interpretador atual. "
"Retorna um ID que pode ser passado para :c:func:`PyFunction_ClearWatcher`. "
"Em caso de erro (por exemplo, sem novos IDs de sentinelas disponíveis), "
"retorna ``-1`` e define uma exceção."

#: ../../c-api/function.rst:138
msgid ""
"Clear watcher identified by *watcher_id* previously returned from :c:func:"
"`PyFunction_AddWatcher` for the current interpreter. Return ``0`` on "
"success, or ``-1`` and set an exception on error (e.g.  if the given "
"*watcher_id* was never registered.)"
msgstr ""
"Cancela o registro da sentinela identificada pelo *watcher_id* retornado "
"por :c:func:`PyFunction_AddWatcher` para o interpretador atual. Retorna "
"``0`` em caso de sucesso, ou ``-1`` e define uma exceção em caso de erro "
"(por exemplo, ao receber um *watcher_id* desconhecido.)"

#: ../../c-api/function.rst:148
msgid "Enumeration of possible function watcher events:"
msgstr ""

#: ../../c-api/function.rst:150
msgid "``PyFunction_EVENT_CREATE``"
msgstr ""

#: ../../c-api/function.rst:151
msgid "``PyFunction_EVENT_DESTROY``"
msgstr ""

#: ../../c-api/function.rst:152
msgid "``PyFunction_EVENT_MODIFY_CODE``"
msgstr ""

#: ../../c-api/function.rst:153
msgid "``PyFunction_EVENT_MODIFY_DEFAULTS``"
msgstr ""

#: ../../c-api/function.rst:154
msgid "``PyFunction_EVENT_MODIFY_KWDEFAULTS``"
msgstr ""

#: ../../c-api/function.rst:161
msgid "Type of a function watcher callback function."
msgstr "Tipo de uma função de retorno de sentinela de função."

#: ../../c-api/function.rst:163
msgid ""
"If *event* is ``PyFunction_EVENT_CREATE`` or ``PyFunction_EVENT_DESTROY`` "
"then *new_value* will be ``NULL``. Otherwise, *new_value* will hold a :term:"
"`borrowed reference` to the new value that is about to be stored in *func* "
"for the attribute that is being modified."
msgstr ""
"Se *event* for ``PyFunction_EVENT_CREATE`` ou ``PyFunction_EVENT_DESTROY``, "
"*new_value* será ``NULL``. Senão, *new_value* portará uma :term:`referência "
"emprestada` ao novo valor prestes a ser guardado em *func* para o atributo "
"que está sendo modificado."

#: ../../c-api/function.rst:168
msgid ""
"The callback may inspect but must not modify *func*; doing so could have "
"unpredictable effects, including infinite recursion."
msgstr ""
"A função de retorno poderá somente inspecionar, e não modificar *func*. Caso "
"contrário, poderíamos ter efeitos imprevisíveis, incluindo recursão infinita."

#: ../../c-api/function.rst:171
msgid ""
"If *event* is ``PyFunction_EVENT_CREATE``, then the callback is invoked "
"after `func` has been fully initialized. Otherwise, the callback is invoked "
"before the modification to *func* takes place, so the prior state of *func* "
"can be inspected. The runtime is permitted to optimize away the creation of "
"function objects when possible. In such cases no event will be emitted. "
"Although this creates the possibility of an observable difference of runtime "
"behavior depending on optimization decisions, it does not change the "
"semantics of the Python code being executed."
msgstr ""
"Se *event* for ``PyFunction_EVENT_CREATE``, a função de retorno será "
"invocada após *func* ter sido completamente inicializada. Caso contrário, a "
"função de retorno será invocada antes de modificar *func*, então o estado "
"anterior de *func* poderá ser inspecionado. O ambiente de execução pode "
"otimizar a criação de objetos função, quando possível, ao ignorá-las. Nesses "
"casos, nenhum evento será emitido. Apesar de decisões de otimização criarem "
"diferenças de comportamento em tempo de execução, elas não mudam a semântica "
"do código Python sendo executado."

#: ../../c-api/function.rst:180
msgid ""
"If *event* is ``PyFunction_EVENT_DESTROY``,  Taking a reference in the "
"callback to the about-to-be-destroyed function will resurrect it, preventing "
"it from being freed at this time. When the resurrected object is destroyed "
"later, any watcher callbacks active at that time will be called again."
msgstr ""
"Se *event* for ``PyFunction_EVENT_DESTROY``, então obter uma referência "
"dentro da função de retorno para a função prestes a ser destruída irá revivê-"
"la, impedindo que esta função seja liberada nesse tempo. Quando o objeto "
"revivido for destruído, quaisquer funções de retorno sentinelas ativas nesse "
"momento poderão ser chamadas novamente."

#: ../../c-api/function.rst:185
msgid ""
"If the callback sets an exception, it must return ``-1``; this exception "
"will be printed as an unraisable exception using :c:func:"
"`PyErr_WriteUnraisable`. Otherwise it should return ``0``."
msgstr ""
"Se a função de retorno definir uma exceção, ela deverá retornar ``-1``. Essa "
"exceção será exibida como uma exceção não levantável usando :c:func:"
"`PyErr_WriteUnraisable`. Caso contrário, deverá retornar ``0``."

#: ../../c-api/function.rst:189
msgid ""
"There may already be a pending exception set on entry to the callback. In "
"this case, the callback should return ``0`` with the same exception still "
"set. This means the callback may not call any other API that can set an "
"exception unless it saves and clears the exception state first, and restores "
"it before returning."
msgstr ""
"É possível que já exista uma exceção pendente definida na entrada da função "
"de retorno. Nesse caso, a função de retorno deve retornar ``0`` com a mesma "
"exceção ainda definida. Isso significa que a função de retorno não pode "
"chamar nenhuma outra API que possa definir uma exceção, a menos que salve e "
"limpe o estado da exceção primeiro e restaure a exceção antes de retornar."

#: ../../c-api/function.rst:8
msgid "object"
msgstr "objeto"

#: ../../c-api/function.rst:8
msgid "function"
msgstr "função"

#: ../../c-api/function.rst:20
msgid "MethodType (in module types)"
msgstr "MethodType (em tipos de módulos)"
