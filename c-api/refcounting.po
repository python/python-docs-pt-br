# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-11 17:17+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/refcounting.rst:8
msgid "Reference Counting"
msgstr "Contagem de Referências"

#: ../../c-api/refcounting.rst:10
msgid ""
"The macros in this section are used for managing reference counts of Python "
"objects."
msgstr ""
"As macros nesta seção são usadas para gerenciar contagens de referências de "
"objetos Python."

#: ../../c-api/refcounting.rst:16
msgid ""
"Indicate taking a new :term:`strong reference` to object *o*, indicating it "
"is in use and should not be destroyed."
msgstr ""
"Укажите получение новой :term:`strong ссылки` на объект *o*, указывая, что "
"он используется и не должен быть уничтожен."

#: ../../c-api/refcounting.rst:19
msgid ""
"This function is usually used to convert a :term:`borrowed reference` to a :"
"term:`strong reference` in-place. The :c:func:`Py_NewRef` function can be "
"used to create a new :term:`strong reference`."
msgstr ""
"Ця функція зазвичай використовується для перетворення :term:`borrowed "
"reference` на :term:`strong reference` на місці. Функцію :c:func:`Py_NewRef` "
"можна використати для створення нового :term:`strong reference`."

#: ../../c-api/refcounting.rst:23
msgid "When done using the object, release it by calling :c:func:`Py_DECREF`."
msgstr ""
"Закончив использование объекта, освободите его, вызвав :c:func:`Py_DECREF`."

#: ../../c-api/refcounting.rst:25
msgid ""
"The object must not be ``NULL``; if you aren't sure that it isn't ``NULL``, "
"use :c:func:`Py_XINCREF`."
msgstr ""
"Об’єкт не має бути ``NULL``; якщо ви не впевнені, що це не ``NULL``, "
"використовуйте :c:func:`Py_XINCREF`."

#: ../../c-api/refcounting.rst:28 ../../c-api/refcounting.rst:89
msgid "Do not expect this function to actually modify *o* in any way."
msgstr ""

#: ../../c-api/refcounting.rst:33
msgid ""
"Similar to :c:func:`Py_INCREF`, but the object *o* can be ``NULL``, in which "
"case this has no effect."
msgstr ""
"Аналогично :c:func:`Py_INCREF`, но объект *o* может иметь значение ``NULL``, "
"и в этом случае это не имеет никакого эффекта."

#: ../../c-api/refcounting.rst:36
msgid "See also :c:func:`Py_XNewRef`."
msgstr "Дивіться також :c:func:`Py_XNewRef`."

#: ../../c-api/refcounting.rst:41
msgid ""
"Create a new :term:`strong reference` to an object: call :c:func:`Py_INCREF` "
"on *o* and return the object *o*."
msgstr ""
"Создайте новую :term:`строгую ссылку` на объект: вызовите :c:func:"
"`Py_INCREF` на *o* и верните объект *o*."

#: ../../c-api/refcounting.rst:44
msgid ""
"When the :term:`strong reference` is no longer needed, :c:func:`Py_DECREF` "
"should be called on it to release the reference."
msgstr ""
"Когда :term:`strong ссылка` больше не нужна, :c:func:`Py_DECREF` должен быть "
"вызван для освобождения ссылки."

#: ../../c-api/refcounting.rst:47
msgid ""
"The object *o* must not be ``NULL``; use :c:func:`Py_XNewRef` if *o* can be "
"``NULL``."
msgstr ""
"Об’єкт *o* не має бути ``NULL``; використовуйте :c:func:`Py_XNewRef`, якщо "
"*o* може бути ``NULL``."

#: ../../c-api/refcounting.rst:50
msgid "For example::"
msgstr "Por exemplo::"

#: ../../c-api/refcounting.rst:55
msgid "can be written as::"
msgstr "можна записати як::"

#: ../../c-api/refcounting.rst:59
msgid "See also :c:func:`Py_INCREF`."
msgstr "Дивіться також :c:func:`Py_INCREF`."

#: ../../c-api/refcounting.rst:66
msgid "Similar to :c:func:`Py_NewRef`, but the object *o* can be NULL."
msgstr ""
"Подібно до :c:func:`Py_NewRef`, але об’єкт *o* може мати значення NULL."

#: ../../c-api/refcounting.rst:68
msgid "If the object *o* is ``NULL``, the function just returns ``NULL``."
msgstr ""
"Якщо об’єкт *o* має значення ``NULL``, функція просто повертає ``NULL``."

#: ../../c-api/refcounting.rst:75
msgid ""
"Release a :term:`strong reference` to object *o*, indicating the reference "
"is no longer used."
msgstr ""
"Отпустите :term:`strong ссылку` на объект *o*, указывая, что ссылка больше "
"не используется."

#: ../../c-api/refcounting.rst:78
msgid ""
"Once the last :term:`strong reference` is released (i.e. the object's "
"reference count reaches 0), the object's type's deallocation function (which "
"must not be ``NULL``) is invoked."
msgstr ""
"Как только последняя :term:`strong ссылка` освобождается (т.е. счетчик "
"ссылок объекта достигает 0), вызывается функция освобождения типа объекта "
"(которая не должна быть ``NULL``)."

#: ../../c-api/refcounting.rst:83
msgid ""
"This function is usually used to delete a :term:`strong reference` before "
"exiting its scope."
msgstr ""
"Ця функція зазвичай використовується для видалення :term:`strong reference` "
"перед виходом з його області."

#: ../../c-api/refcounting.rst:86
msgid ""
"The object must not be ``NULL``; if you aren't sure that it isn't ``NULL``, "
"use :c:func:`Py_XDECREF`."
msgstr ""
"Об’єкт не має бути ``NULL``; якщо ви не впевнені, що це не ``NULL``, "
"використовуйте :c:func:`Py_XDECREF`."

#: ../../c-api/refcounting.rst:93
msgid ""
"The deallocation function can cause arbitrary Python code to be invoked (e."
"g. when a class instance with a :meth:`__del__` method is deallocated).  "
"While exceptions in such code are not propagated, the executed code has free "
"access to all Python global variables.  This means that any object that is "
"reachable from a global variable should be in a consistent state before :c:"
"func:`Py_DECREF` is invoked.  For example, code to delete an object from a "
"list should copy a reference to the deleted object in a temporary variable, "
"update the list data structure, and then call :c:func:`Py_DECREF` for the "
"temporary variable."
msgstr ""
"A função de desalocação pode fazer com que o código Python arbitrário seja "
"invocado (por exemplo, quando uma instância de classe com um método :meth:"
"`__del__` é desalocada). Embora as exceções em tal código não sejam "
"propagadas, o código executado tem acesso livre a todas as variáveis globais "
"do Python. Isso significa que qualquer objeto que é alcançável de uma "
"variável global deve estar em um estado consistente antes de :c:func:"
"`Py_DECREF` ser invocado. Por exemplo, o código para excluir um objeto de "
"uma lista deve copiar uma referência ao objeto excluído em uma variável "
"temporária, atualizar a estrutura de dados da lista e então chamar :c:func:"
"`Py_DECREF` para a variável temporária."

#: ../../c-api/refcounting.rst:105
msgid ""
"Similar to :c:func:`Py_DECREF`, but the object *o* can be ``NULL``, in which "
"case this has no effect. The same warning from :c:func:`Py_DECREF` applies "
"here as well."
msgstr ""
"Аналогично :c:func:`Py_DECREF`, но объект *o* может иметь значение ``NULL``, "
"и в этом случае это не имеет никакого эффекта. Здесь применимо то же "
"предупреждение из :c:func:`Py_DECREF`."

#: ../../c-api/refcounting.rst:112
msgid ""
"Release a :term:`strong reference` for object *o*. The object may be "
"``NULL``, in which case the macro has no effect; otherwise the effect is the "
"same as for :c:func:`Py_DECREF`, except that the argument is also set to "
"``NULL``.  The warning for :c:func:`Py_DECREF` does not apply with respect "
"to the object passed because the macro carefully uses a temporary variable "
"and sets the argument to ``NULL`` before releasing the reference."
msgstr ""
"Выпустите :term:`strong ссылку` для объекта *o*. Объект может иметь значение "
"NULL, и в этом случае макрос не имеет никакого эффекта; в противном случае "
"эффект тот же, что и для :c:func:`Py_DECREF`, за исключением того, что "
"аргумент также установлен в ``NULL``. Предупреждение для :c:func:`Py_DECREF` "
"не применяется к переданному объекту, поскольку макрос тщательно использует "
"временную переменную и устанавливает аргумент в ``NULL`` перед освобождением "
"ссылки."

#: ../../c-api/refcounting.rst:120
msgid ""
"It is a good idea to use this macro whenever releasing a reference to an "
"object that might be traversed during garbage collection."
msgstr ""
"Рекомендуется использовать этот макрос при каждом выпуске ссылки на объект, "
"который может быть пройден во время сборки мусора."

#: ../../c-api/refcounting.rst:125
msgid ""
"Indicate taking a new :term:`strong reference` to object *o*. A function "
"version of :c:func:`Py_XINCREF`. It can be used for runtime dynamic "
"embedding of Python."
msgstr ""
"Укажите получение новой :term:`сильной ссылки` на объект *o*. Функциональная "
"версия :c:func:`Py_XINCREF`. Его можно использовать для динамического "
"внедрения Python во время выполнения."

#: ../../c-api/refcounting.rst:132
msgid ""
"Release a :term:`strong reference` to object *o*. A function version of :c:"
"func:`Py_XDECREF`. It can be used for runtime dynamic embedding of Python."
msgstr ""
"Выпустите :term:`строгую ссылку` на объект *o*. Функциональная версия :c:"
"func:`Py_XDECREF`. Его можно использовать для динамического внедрения Python "
"во время выполнения."

#: ../../c-api/refcounting.rst:137
msgid ""
"The following functions or macros are only for use within the interpreter "
"core: :c:func:`_Py_Dealloc`, :c:func:`_Py_ForgetReference`, :c:func:"
"`_Py_NewReference`, as well as the global variable :c:data:`_Py_RefTotal`."
msgstr ""
"As seguintes funções ou macros são apenas para uso dentro do núcleo do "
"interpretador: :c:func:`_Py_Dealloc`, :c:func:`_Py_ForgetReference`, :c:func:"
"`_Py_NewReference`, bem como a variável global :c:data:`_Py_RefTotal`."
