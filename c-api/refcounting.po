# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-11 15:45+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/refcounting.rst:8
msgid "Reference Counting"
msgstr "Contagem de Referências"

#: ../../c-api/refcounting.rst:10
msgid ""
"The functions and macros in this section are used for managing reference "
"counts of Python objects."
msgstr ""
"Функции и макросы в этом разделе используются для управления счетчиком "
"ссылок объектов Python."

#: ../../c-api/refcounting.rst:16
msgid "Get the reference count of the Python object *o*."
msgstr "Отримати кількість посилань на об’єкт Python *o*."

#: ../../c-api/refcounting.rst:18
msgid ""
"Note that the returned value may not actually reflect how many references to "
"the object are actually held.  For example, some objects are \"immortal\" "
"and have a very high refcount that does not reflect the actual number of "
"references.  Consequently, do not rely on the returned value to be accurate, "
"other than a value of 0 or 1."
msgstr ""

#: ../../c-api/refcounting.rst:24
msgid ""
"Use the :c:func:`Py_SET_REFCNT()` function to set an object reference count."
msgstr ""
"Используйте функцию :c:func:`Py_SET_REFCNT()`, чтобы установить счетчик "
"ссылок на объекты."

#: ../../c-api/refcounting.rst:26
msgid ":c:func:`Py_REFCNT()` is changed to the inline static function."
msgstr ":c:func:`Py_REFCNT()` заменена на встроенную статическую функцию."

#: ../../c-api/refcounting.rst:29
msgid "The parameter type is no longer :c:expr:`const PyObject*`."
msgstr "Тип параметра больше не :c:expr:`const PyObject *`."

#: ../../c-api/refcounting.rst:35
msgid "Set the object *o* reference counter to *refcnt*."
msgstr "Встановіть лічильник посилань *o* на *refcnt*."

#: ../../c-api/refcounting.rst:37
msgid ""
"Note that this function has no effect on `immortal <https://peps.python.org/"
"pep-0683/>`_ objects."
msgstr ""

#: ../../c-api/refcounting.rst:43 ../../c-api/refcounting.rst:65
#: ../../c-api/refcounting.rst:142
msgid "Immortal objects are not modified."
msgstr "Бессмертные объекты не изменяются."

#: ../../c-api/refcounting.rst:49
msgid ""
"Indicate taking a new :term:`strong reference` to object *o*, indicating it "
"is in use and should not be destroyed."
msgstr ""
"Укажите получение новой :term:`strong ссылки` на объект *o*, указывая, что "
"он используется и не должен быть уничтожен."

#: ../../c-api/refcounting.rst:52
msgid ""
"This function is usually used to convert a :term:`borrowed reference` to a :"
"term:`strong reference` in-place. The :c:func:`Py_NewRef` function can be "
"used to create a new :term:`strong reference`."
msgstr ""
"Ця функція зазвичай використовується для перетворення :term:`borrowed "
"reference` на :term:`strong reference` на місці. Функцію :c:func:`Py_NewRef` "
"можна використати для створення нового :term:`strong reference`."

#: ../../c-api/refcounting.rst:56
msgid "When done using the object, release it by calling :c:func:`Py_DECREF`."
msgstr ""

#: ../../c-api/refcounting.rst:58
msgid ""
"The object must not be ``NULL``; if you aren't sure that it isn't ``NULL``, "
"use :c:func:`Py_XINCREF`."
msgstr ""
"Об’єкт не має бути ``NULL``; якщо ви не впевнені, що це не ``NULL``, "
"використовуйте :c:func:`Py_XINCREF`."

#: ../../c-api/refcounting.rst:61
msgid ""
"Do not expect this function to actually modify *o* in any way. For at least :"
"pep:`some objects <0683>`, this function has no effect."
msgstr ""
"Не ожидайте, что эта функция каким-либо образом изменит *o*. По крайней "
"мере, :pep:`некоторым объектам <0683>` эта функция не имеет никакого эффекта."

#: ../../c-api/refcounting.rst:71
msgid ""
"Similar to :c:func:`Py_INCREF`, but the object *o* can be ``NULL``, in which "
"case this has no effect."
msgstr ""
"Аналогично :c:func:`Py_INCREF`, но объект *o* может иметь значение ``NULL``, "
"и в этом случае это не имеет никакого эффекта."

#: ../../c-api/refcounting.rst:74
msgid "See also :c:func:`Py_XNewRef`."
msgstr "Дивіться також :c:func:`Py_XNewRef`."

#: ../../c-api/refcounting.rst:79
msgid ""
"Create a new :term:`strong reference` to an object: call :c:func:`Py_INCREF` "
"on *o* and return the object *o*."
msgstr ""
"Создайте новую :term:`строгую ссылку` на объект: вызовите :c:func:"
"`Py_INCREF` на *o* и верните объект *o*."

#: ../../c-api/refcounting.rst:82
msgid ""
"When the :term:`strong reference` is no longer needed, :c:func:`Py_DECREF` "
"should be called on it to release the reference."
msgstr ""
"Когда :term:`strong ссылка` больше не нужна, :c:func:`Py_DECREF` должен быть "
"вызван для освобождения ссылки."

#: ../../c-api/refcounting.rst:85
msgid ""
"The object *o* must not be ``NULL``; use :c:func:`Py_XNewRef` if *o* can be "
"``NULL``."
msgstr ""
"Об’єкт *o* не має бути ``NULL``; використовуйте :c:func:`Py_XNewRef`, якщо "
"*o* може бути ``NULL``."

#: ../../c-api/refcounting.rst:88
msgid "For example::"
msgstr "Por exemplo::"

#: ../../c-api/refcounting.rst:90
msgid ""
"Py_INCREF(obj);\n"
"self->attr = obj;"
msgstr ""
"Py_INCREF(obj);\n"
"self->attr = obj;"

#: ../../c-api/refcounting.rst:93
msgid "can be written as::"
msgstr "можна записати як::"

#: ../../c-api/refcounting.rst:95
msgid "self->attr = Py_NewRef(obj);"
msgstr "self->attr = Py_NewRef(obj);"

#: ../../c-api/refcounting.rst:97
msgid "See also :c:func:`Py_INCREF`."
msgstr "Дивіться також :c:func:`Py_INCREF`."

#: ../../c-api/refcounting.rst:104
msgid "Similar to :c:func:`Py_NewRef`, but the object *o* can be NULL."
msgstr ""
"Подібно до :c:func:`Py_NewRef`, але об’єкт *o* може мати значення NULL."

#: ../../c-api/refcounting.rst:106
msgid "If the object *o* is ``NULL``, the function just returns ``NULL``."
msgstr ""
"Якщо об’єкт *o* має значення ``NULL``, функція просто повертає ``NULL``."

#: ../../c-api/refcounting.rst:113
msgid ""
"Release a :term:`strong reference` to object *o*, indicating the reference "
"is no longer used."
msgstr ""
"Отпустите :term:`strong ссылку` на объект *o*, указывая, что ссылка больше "
"не используется."

#: ../../c-api/refcounting.rst:116
msgid ""
"Once the last :term:`strong reference` is released (i.e. the object's "
"reference count reaches 0), the object's type's deallocation function (which "
"must not be ``NULL``) is invoked."
msgstr ""
"Как только последняя :term:`strong ссылка` освобождается (т.е. счетчик "
"ссылок объекта достигает 0), вызывается функция освобождения типа объекта "
"(которая не должна быть ``NULL``)."

#: ../../c-api/refcounting.rst:121
msgid ""
"This function is usually used to delete a :term:`strong reference` before "
"exiting its scope."
msgstr ""
"Ця функція зазвичай використовується для видалення :term:`strong reference` "
"перед виходом з його області."

#: ../../c-api/refcounting.rst:124
msgid ""
"The object must not be ``NULL``; if you aren't sure that it isn't ``NULL``, "
"use :c:func:`Py_XDECREF`."
msgstr ""
"Об’єкт не має бути ``NULL``; якщо ви не впевнені, що це не ``NULL``, "
"використовуйте :c:func:`Py_XDECREF`."

#: ../../c-api/refcounting.rst:127
msgid ""
"Do not expect this function to actually modify *o* in any way. For at least :"
"pep:`some objects <683>`, this function has no effect."
msgstr ""
"Не ожидайте, что эта функция каким-либо образом изменит *o*. По крайней "
"мере, :pep:`некоторым объектам <683>` эта функция не имеет никакого эффекта."

#: ../../c-api/refcounting.rst:133
msgid ""
"The deallocation function can cause arbitrary Python code to be invoked (e."
"g. when a class instance with a :meth:`~object.__del__` method is "
"deallocated).  While exceptions in such code are not propagated, the "
"executed code has free access to all Python global variables.  This means "
"that any object that is reachable from a global variable should be in a "
"consistent state before :c:func:`Py_DECREF` is invoked.  For example, code "
"to delete an object from a list should copy a reference to the deleted "
"object in a temporary variable, update the list data structure, and then "
"call :c:func:`Py_DECREF` for the temporary variable."
msgstr ""
"Функция освобождения может вызвать вызов произвольного кода Python "
"(например, когда освобождается экземпляр класса с методом :meth:`~object."
"__del__`). Хотя исключения в таком коде не распространяются, исполняемый код "
"имеет свободный доступ ко всем глобальным переменным Python. Это означает, "
"что любой объект, доступный из глобальной переменной, должен находиться в "
"согласованном состоянии до вызова :c:func:`Py_DECREF`. Например, код для "
"удаления объекта из списка должен скопировать ссылку на удаленный объект во "
"временную переменную, обновить структуру данных списка, а затем вызвать :c:"
"func:`Py_DECREF` для временной переменной."

#: ../../c-api/refcounting.rst:148
msgid ""
"Similar to :c:func:`Py_DECREF`, but the object *o* can be ``NULL``, in which "
"case this has no effect. The same warning from :c:func:`Py_DECREF` applies "
"here as well."
msgstr ""
"Аналогично :c:func:`Py_DECREF`, но объект *o* может иметь значение ``NULL``, "
"и в этом случае это не имеет никакого эффекта. Здесь применимо то же "
"предупреждение из :c:func:`Py_DECREF`."

#: ../../c-api/refcounting.rst:155
msgid ""
"Release a :term:`strong reference` for object *o*. The object may be "
"``NULL``, in which case the macro has no effect; otherwise the effect is the "
"same as for :c:func:`Py_DECREF`, except that the argument is also set to "
"``NULL``.  The warning for :c:func:`Py_DECREF` does not apply with respect "
"to the object passed because the macro carefully uses a temporary variable "
"and sets the argument to ``NULL`` before releasing the reference."
msgstr ""
"Выпустите :term:`strong ссылку` для объекта *o*. Объект может иметь значение "
"NULL, и в этом случае макрос не имеет никакого эффекта; в противном случае "
"эффект тот же, что и для :c:func:`Py_DECREF`, за исключением того, что "
"аргумент также установлен в ``NULL``. Предупреждение для :c:func:`Py_DECREF` "
"не применяется к переданному объекту, поскольку макрос тщательно использует "
"временную переменную и устанавливает аргумент в ``NULL`` перед освобождением "
"ссылки."

#: ../../c-api/refcounting.rst:163
msgid ""
"It is a good idea to use this macro whenever releasing a reference to an "
"object that might be traversed during garbage collection."
msgstr ""
"Рекомендуется использовать этот макрос при каждом выпуске ссылки на объект, "
"который может быть пройден во время сборки мусора."

#: ../../c-api/refcounting.rst:166
msgid ""
"The macro argument is now only evaluated once. If the argument has side "
"effects, these are no longer duplicated."
msgstr ""
"Аргумент макроса теперь оценивается только один раз. Если аргумент имеет "
"побочные эффекты, они больше не дублируются."

#: ../../c-api/refcounting.rst:173
msgid ""
"Indicate taking a new :term:`strong reference` to object *o*. A function "
"version of :c:func:`Py_XINCREF`. It can be used for runtime dynamic "
"embedding of Python."
msgstr ""
"Укажите получение новой :term:`сильной ссылки` на объект *o*. Функциональная "
"версия :c:func:`Py_XINCREF`. Его можно использовать для динамического "
"внедрения Python во время выполнения."

#: ../../c-api/refcounting.rst:180
msgid ""
"Release a :term:`strong reference` to object *o*. A function version of :c:"
"func:`Py_XDECREF`. It can be used for runtime dynamic embedding of Python."
msgstr ""
"Выпустите :term:`строгую ссылку` на объект *o*. Функциональная версия :c:"
"func:`Py_XDECREF`. Его можно использовать для динамического внедрения Python "
"во время выполнения."

#: ../../c-api/refcounting.rst:187
msgid ""
"Macro safely releasing a :term:`strong reference` to object *dst* and "
"setting *dst* to *src*."
msgstr ""
"Макрос безопасно освобождает :term:`строгую ссылку` на объект *dst* и "
"устанавливает для *dst* значение *src*."

#: ../../c-api/refcounting.rst:190
msgid "As in case of :c:func:`Py_CLEAR`, \"the obvious\" code can be deadly::"
msgstr ""
"Как и в случае с :c:func:`Py_CLEAR`, «очевидный» код может быть смертельным:"

#: ../../c-api/refcounting.rst:192
msgid ""
"Py_DECREF(dst);\n"
"dst = src;"
msgstr ""
"Py_DECREF(dst);\n"
"dst = src;"

#: ../../c-api/refcounting.rst:195
msgid "The safe way is::"
msgstr "Безопасный способ:"

#: ../../c-api/refcounting.rst:197
msgid "Py_SETREF(dst, src);"
msgstr "Py_SETREF(dst, src);"

#: ../../c-api/refcounting.rst:199
msgid ""
"That arranges to set *dst* to *src* _before_ releasing the reference to the "
"old value of *dst*, so that any code triggered as a side-effect of *dst* "
"getting torn down no longer believes *dst* points to a valid object."
msgstr ""

#: ../../c-api/refcounting.rst:206 ../../c-api/refcounting.rst:218
msgid ""
"The macro arguments are now only evaluated once. If an argument has side "
"effects, these are no longer duplicated."
msgstr ""
"Аргументы макроса теперь оцениваются только один раз. Если аргумент имеет "
"побочные эффекты, они больше не дублируются."

#: ../../c-api/refcounting.rst:213
msgid ""
"Variant of :c:macro:`Py_SETREF` macro that uses :c:func:`Py_XDECREF` instead "
"of :c:func:`Py_DECREF`."
msgstr ""
"Вариант макроса :c:macro:`Py_SETREF`, который использует :c:func:"
"`Py_XDECREF` вместо :c:func:`Py_DECREF`."
