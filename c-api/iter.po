# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-31 11:30+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/iter.rst:6
msgid "Iterator Protocol"
msgstr "Protocolo Iterador"

#: ../../c-api/iter.rst:8
msgid "There are two functions specifically for working with iterators."
msgstr "Existem duas funções especificas para trabalhar com iteradores."

#: ../../c-api/iter.rst:12
msgid ""
"Return non-zero if the object *o* can be safely passed to :c:func:"
"`PyIter_Next`, and ``0`` otherwise.  This function always succeeds."
msgstr ""
"Retorna valor diferente de zero se o objeto *o* puder ser passado com "
"segurança para :c:func:`PyIter_Next`, e ``0`` caso contrário. Esta função "
"sempre é bem-sucedida."

#: ../../c-api/iter.rst:17
msgid ""
"Return non-zero if the object *o* provides the :class:`AsyncIterator` "
"protocol, and ``0`` otherwise.  This function always succeeds."
msgstr ""
"Retorna valor diferente de zero se o objeto *o* fornecer o protocolo :class:"
"`AsyncIterator` e ``0`` caso contrário. Esta função sempre é bem-sucedida."

#: ../../c-api/iter.rst:24
msgid ""
"Return the next value from the iterator *o*.  The object must be an iterator "
"according to :c:func:`PyIter_Check` (it is up to the caller to check this). "
"If there are no remaining values, returns ``NULL`` with no exception set. If "
"an error occurs while retrieving the item, returns ``NULL`` and passes along "
"the exception."
msgstr ""
"Retorna o próximo valor do iterador *o*. O objeto deve ser um iterador de "
"acordo com :c:func:`PyIter_Check` (cabe ao chamador verificar isso). Se não "
"houver valores restantes, retorna ``NULL`` sem nenhuma exceção definida. Se "
"ocorrer um erro ao recuperar o item, retorna ``NULL`` e passa a exceção."

#: ../../c-api/iter.rst:30
msgid ""
"To write a loop which iterates over an iterator, the C code should look "
"something like this::"
msgstr ""
"Para escrever um laço que itere sobre um iterador, o código C deve ser algo "
"como isto::"

#: ../../c-api/iter.rst:33
msgid ""
"PyObject *iterator = PyObject_GetIter(obj);\n"
"PyObject *item;\n"
"\n"
"if (iterator == NULL) {\n"
"    /* propagate error */\n"
"}\n"
"\n"
"while ((item = PyIter_Next(iterator))) {\n"
"    /* do something with item */\n"
"    ...\n"
"    /* release reference when done */\n"
"    Py_DECREF(item);\n"
"}\n"
"\n"
"Py_DECREF(iterator);\n"
"\n"
"if (PyErr_Occurred()) {\n"
"    /* propagate error */\n"
"}\n"
"else {\n"
"    /* continue doing useful work */\n"
"}"
msgstr ""

#: ../../c-api/iter.rst:59
msgid ""
"The enum value used to represent different results of :c:func:`PyIter_Send`."
msgstr ""
"O valor de enum usado para representar diferentes resultados de :c:func:"
"`PyIter_Send`."

#: ../../c-api/iter.rst:66
msgid "Sends the *arg* value into the iterator *iter*. Returns:"
msgstr "Envia o valor *arg* para o iterador *iter*. Retorna:"

#: ../../c-api/iter.rst:68
msgid ""
"``PYGEN_RETURN`` if iterator returns. Return value is returned via *presult*."
msgstr ""
"``PYGEN_RETURN`` se o iterador retornar. O valor de retorno é retornado via "
"*presult*."

#: ../../c-api/iter.rst:69
msgid ""
"``PYGEN_NEXT`` if iterator yields. Yielded value is returned via *presult*."
msgstr ""
"``PYGEN_NEXT`` se o iterador render. O valor preduzido é retornado via "
"*presult*."

#: ../../c-api/iter.rst:70
msgid ""
"``PYGEN_ERROR`` if iterator has raised and exception. *presult* is set to "
"``NULL``."
msgstr ""
"``PYGEN_ERROR`` se o iterador tiver levantado uma exceção. *presult* é "
"definido como ``NULL``."
