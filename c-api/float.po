# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 14:15+0000\n"
"PO-Revision-Date: 2025-09-16 00:00+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/float.rst:6
msgid "Floating-Point Objects"
msgstr "Objetos de ponto flutuante"

#: ../../c-api/float.rst:13
msgid ""
"This subtype of :c:type:`PyObject` represents a Python floating-point object."
msgstr ""
"Este subtipo de :c:type:`PyObject` representa um objeto de ponto flutuante "
"do Python."

#: ../../c-api/float.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python floating-point "
"type.  This is the same object as :class:`float` in the Python layer."
msgstr ""
"Esta instância do :c:type:`PyTypeObject` representa o tipo de ponto "
"flutuante do Python. Este é o mesmo objeto :class:`float` na camada do "
"Python."

#: ../../c-api/float.rst:24
msgid ""
"Return true if its argument is a :c:type:`PyFloatObject` or a subtype of :c:"
"type:`PyFloatObject`.  This function always succeeds."
msgstr ""
"Retorna true se seu argumento é um :c:type:`PyFloatObject` ou um subtipo de :"
"c:type:`PyFloatObject`. Esta função sempre tem sucesso."

#: ../../c-api/float.rst:30
msgid ""
"Return true if its argument is a :c:type:`PyFloatObject`, but not a subtype "
"of :c:type:`PyFloatObject`.  This function always succeeds."
msgstr ""
"Retorna true se seu argumento é um :c:type:`PyFloatObject`, mas um subtipo "
"de :c:type:`PyFloatObject`. Esta função sempre tem sucesso."

#: ../../c-api/float.rst:36
msgid ""
"Create a :c:type:`PyFloatObject` object based on the string value in *str*, "
"or ``NULL`` on failure."
msgstr ""
"Cria um objeto :c:type:`PyFloatObject` baseado em uma string de valor "
"\"str\" ou ``NULL`` em falha."

#: ../../c-api/float.rst:42
msgid ""
"Create a :c:type:`PyFloatObject` object from *v*, or ``NULL`` on failure."
msgstr "Cria um objeto :c:type:`PyFloatObject` de *v* ou ``NULL`` em falha."

#: ../../c-api/float.rst:47
msgid ""
"Return a C :c:expr:`double` representation of the contents of *pyfloat*.  If "
"*pyfloat* is not a Python floating-point object but has a :meth:`~object."
"__float__` method, this method will first be called to convert *pyfloat* "
"into a float. If :meth:`!__float__` is not defined then it falls back to :"
"meth:`~object.__index__`. This method returns ``-1.0`` upon failure, so one "
"should call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""
"Retorna uma representação C :c:expr:`double` do conteúdo de *pyfloat*. Se "
"*pyfloat* não é um objeto de ponto flutuante do Python, mas possui o método :"
"meth:`~object.__float__`, esse método será chamado primeiro para converter "
"*pyfloat* em um ponto flutuante. Se :meth:`!__float__` não estiver definido, "
"será usado :meth:`__index__`. Este método retorna ``-1.0`` em caso de falha, "
"portanto, deve-se chamar :c:func:`PyErr_Occurred` para verificar se há erros."

#: ../../c-api/float.rst:54
msgid "Use :meth:`~object.__index__` if available."
msgstr "Usa :meth:`~object.__index__`, se disponível."

#: ../../c-api/float.rst:60
msgid ""
"Return a C :c:expr:`double` representation of the contents of *pyfloat*, but "
"without error checking."
msgstr ""
"Retorna uma representação C :c:expr:`double` do conteúdo de *pyfloat*, mas "
"sem verificação de erro."

#: ../../c-api/float.rst:66
msgid ""
"Return a structseq instance which contains information about the precision, "
"minimum and maximum values of a float. It's a thin wrapper around the header "
"file :file:`float.h`."
msgstr ""
"Retorna uma instância de structseq que contém informações sobre a precisão, "
"os valores mínimo e máximo de um ponto flutuante. É um invólucro fino em "
"torno do arquivo de cabeçalho :file:`float.h`."

#: ../../c-api/float.rst:73
msgid ""
"Return the maximum representable finite float *DBL_MAX* as C :c:expr:"
"`double`."
msgstr ""
"Retorna o ponto flutuante finito máximo representável *DBL_MAX* como :c:expr:"
"`double` do C."

#: ../../c-api/float.rst:78
msgid ""
"Return the minimum normalized positive float *DBL_MIN* as C :c:expr:`double`."
msgstr ""
"Retorna o ponto flutuante positivo mínimo normalizado *DBL_MIN* como :c:expr:"
"`double` do C."

#: ../../c-api/float.rst:82
msgid "Pack and Unpack functions"
msgstr "As funções Pack e Unpack"

#: ../../c-api/float.rst:84
msgid ""
"The pack and unpack functions provide an efficient platform-independent way "
"to store floating-point values as byte strings. The Pack routines produce a "
"bytes string from a C :c:expr:`double`, and the Unpack routines produce a C :"
"c:expr:`double` from such a bytes string. The suffix (2, 4 or 8) specifies "
"the number of bytes in the bytes string."
msgstr ""
"As funções de empacotamento e desempacotamento, pack e unpack "
"respectivamente, fornecem uma maneira eficiente e independente de plataforma "
"de armazenar valores de ponto flutuante como strings de bytes. As rotinas de "
"Pack produzem uma string de bytes a partir de um C :c:expr:`double`, e as "
"rotinas de Unpack produzem um C :c:expr:`double` a partir dessa string de "
"bytes. O sufixo (2, 4 ou 8) especifica o número de bytes na string de bytes."

#: ../../c-api/float.rst:90
msgid ""
"On platforms that appear to use IEEE 754 formats these functions work by "
"copying bits. On other platforms, the 2-byte format is identical to the IEEE "
"754 binary16 half-precision format, the 4-byte format (32-bit) is identical "
"to the IEEE 754 binary32 single precision format, and the 8-byte format to "
"the IEEE 754 binary64 double precision format, although the packing of INFs "
"and NaNs (if such things exist on the platform) isn't handled correctly, and "
"attempting to unpack a bytes string containing an IEEE INF or NaN will raise "
"an exception."
msgstr ""
"Em plataformas que parecem usar o formato IEEE 754, essas funções funcionam "
"copiando bits. Em outras plataformas, o formato de 2 bytes é idêntico ao "
"formato de meia precisão binário 16 do IEEE 754, o formato de 4 bytes (32 "
"bits) é idêntico ao formato de precisão simples binário 32 do IEEE 754 e o "
"formato de 8 bytes ao formato de precisão dupla binário 64 do IEEE 754, "
"embora o empacotamento de INFs e NaNs (se tais recursos existirem na "
"plataforma) não seja tratado corretamente, e tentar desempacotar uma string "
"de bytes contendo um INF ou NaN do IEEE levantará uma exceção."

#: ../../c-api/float.rst:99
msgid ""
"Note that NaNs type may not be preserved on IEEE platforms (silent NaN "
"become quiet), for example on x86 systems in 32-bit mode."
msgstr ""
"Observe que o tipo NaNs pode não ser preservado em plataformas IEEE (NaN "
"silenciosos tornam-se silenciosos), por exemplo, em sistemas x86 no modo de "
"32 bits."

#: ../../c-api/float.rst:102
msgid ""
"On non-IEEE platforms with more precision, or larger dynamic range, than "
"IEEE 754 supports, not all values can be packed; on non-IEEE platforms with "
"less precision, or smaller dynamic range, not all values can be unpacked. "
"What happens in such cases is partly accidental (alas)."
msgstr ""
"Em plataformas que não aderem IEEE com maior precisão ou maior alcance "
"dinâmico do que o suportado pelo IEEE 754, nem todos os valores podem ser "
"empacotados; em plataformas que não aderem IEEE com menor precisão ou menor "
"alcance dinâmico, nem todos os valores podem ser desempacotados. O que "
"acontece nesses casos é em parte acidental (infelizmente)."

#: ../../c-api/float.rst:110
msgid "Pack functions"
msgstr "Funções Pack"

#: ../../c-api/float.rst:112
msgid ""
"The pack routines write 2, 4 or 8 bytes, starting at *p*. *le* is an :c:expr:"
"`int` argument, non-zero if you want the bytes string in little-endian "
"format (exponent last, at ``p+1``, ``p+3``, or ``p+6`` ``p+7``), zero if you "
"want big-endian format (exponent first, at *p*). The :c:macro:"
"`PY_BIG_ENDIAN` constant can be used to use the native endian: it is equal "
"to ``1`` on big endian processor, or ``0`` on little endian processor."
msgstr ""
"As rotinas de empacotamento gravam 2, 4 ou 8 bytes, começando em *p*. *le* é "
"um argumento :c:expr:`int`, diferente de zero se você quiser a sequência de "
"bytes no formato little-endian (expoente por último, em ``p+1``, ``p+3`` ou "
"``p+6`` ``p+7``), zero se você quiser o formato big-endian (expoente "
"primeiro, em *p*). A constante :c:macro:`PY_BIG_ENDIAN` pode ser usada para "
"usar o endian nativo: é igual a ``1`` em processadores big-endian ou ``0`` "
"em processadores little-endian."

#: ../../c-api/float.rst:119
msgid ""
"Return value: ``0`` if all is OK, ``-1`` if error (and an exception is set, "
"most likely :exc:`OverflowError`)."
msgstr ""
"Valor de retorno: ``0`` se tudo estiver OK, ``-1`` se houver erro (e uma "
"exceção for definida, provavelmente :exc:`OverflowError`)."

#: ../../c-api/float.rst:122
msgid "There are two problems on non-IEEE platforms:"
msgstr "Existem dois problemas em plataformas não IEEE:"

#: ../../c-api/float.rst:124
msgid "What this does is undefined if *x* is a NaN or infinity."
msgstr "O que isso faz é indefinido se *x* é um NaN ou infinito."

#: ../../c-api/float.rst:125
msgid "``-0.0`` and ``+0.0`` produce the same bytes string."
msgstr "``-0.0`` e ``+0.0`` produzem a mesma sequência de bytes."

#: ../../c-api/float.rst:129
msgid "Pack a C double as the IEEE 754 binary16 half-precision format."
msgstr ""
"Empacota um C duplo como o formato de meia precisão binário16 IEEE 754."

#: ../../c-api/float.rst:133
msgid "Pack a C double as the IEEE 754 binary32 single precision format."
msgstr ""
"Empacota um C duplo como o formato de precisão simples binário32 IEEE 754."

#: ../../c-api/float.rst:137
msgid "Pack a C double as the IEEE 754 binary64 double precision format."
msgstr ""
"Empacota um C duplo como o formato de precisão dupla binária 64 IEEE 754."

#: ../../c-api/float.rst:141
msgid "Unpack functions"
msgstr "Funções de Unpack"

#: ../../c-api/float.rst:143
msgid ""
"The unpack routines read 2, 4 or 8 bytes, starting at *p*.  *le* is an :c:"
"expr:`int` argument, non-zero if the bytes string is in little-endian format "
"(exponent last, at ``p+1``, ``p+3`` or ``p+6`` and ``p+7``), zero if big-"
"endian (exponent first, at *p*). The :c:macro:`PY_BIG_ENDIAN` constant can "
"be used to use the native endian: it is equal to ``1`` on big endian "
"processor, or ``0`` on little endian processor."
msgstr ""
"As rotinas de desempacotamento leem 2, 4 ou 8 bytes, começando em *p*. *le* "
"é um argumento :c:expr:`int`, diferente de zero se a sequência de bytes "
"estiver no formato little-endian (expoente por último, em ``p+1``, ``p+3`` "
"ou ``p+6`` e ``p+7``), zero se big-endian (expoente primeiro, em *p*). A "
"constante :c:macro:`PY_BIG_ENDIAN` pode ser usada para usar o endian nativo: "
"é igual a ``1`` em processadores big-endian ou ``0`` em processadores little-"
"endian."

#: ../../c-api/float.rst:150
msgid ""
"Return value: The unpacked double.  On error, this is ``-1.0`` and :c:func:"
"`PyErr_Occurred` is true (and an exception is set, most likely :exc:"
"`OverflowError`)."
msgstr ""
"Valor de retorno: O double descompactado. Em caso de erro, é ``-1.0`` e :c:"
"func:`PyErr_Occurred` é verdadeiro (e uma exceção é definida, provavelmente :"
"exc:`OverflowError`)."

#: ../../c-api/float.rst:154
msgid ""
"Note that on a non-IEEE platform this will refuse to unpack a bytes string "
"that represents a NaN or infinity."
msgstr ""
"Observe que em uma plataforma que não adere IEEE isso se recusará a "
"descompactar uma sequência de bytes que representa um NaN ou infinito."

#: ../../c-api/float.rst:159
msgid "Unpack the IEEE 754 binary16 half-precision format as a C double."
msgstr ""
"Descompacta o formato de meia precisão IEEE 754 binary16 como um double C."

#: ../../c-api/float.rst:163
msgid "Unpack the IEEE 754 binary32 single precision format as a C double."
msgstr ""
"Descompacta o formato IEEE 754 binary32 de precisão simples como um C double."

#: ../../c-api/float.rst:167
msgid "Unpack the IEEE 754 binary64 double precision format as a C double."
msgstr ""
"Descompacta o formato IEEE 754 binary64 de precisão dupla como um C double."

#: ../../c-api/float.rst:8
msgid "object"
msgstr "objeto"

#: ../../c-api/float.rst:8
msgid "floating-point"
msgstr "ponto flutuante"
