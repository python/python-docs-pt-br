# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Renan Lopes <renans.l@icloud.com>, 2019
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-31 13:14+0000\n"
"PO-Revision-Date: 2017-02-16 17:34+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/complex.rst:6
msgid "Complex Number Objects"
msgstr "Objetos números complexos"

#: ../../c-api/complex.rst:10
msgid ""
"Python's complex number objects are implemented as two distinct types when "
"viewed from the C API:  one is the Python object exposed to Python programs, "
"and the other is a C structure which represents the actual complex number "
"value. The API provides functions for working with both."
msgstr ""
"Os objetos números complexos do Python são implementados como dois tipos "
"distintos quando visualizados na API C: um é o objeto Python exposto aos "
"programas Python e o outro é uma estrutura C que representa o valor real do "
"número complexo. A API fornece funções para trabalhar com ambos."

#: ../../c-api/complex.rst:17
msgid "Complex Numbers as C Structures"
msgstr "Números complexos como estruturas C."

#: ../../c-api/complex.rst:19
msgid ""
"Note that the functions which accept these structures as parameters and "
"return them as results do so *by value* rather than dereferencing them "
"through pointers.  This is consistent throughout the API."
msgstr ""
"Observe que as funções que aceitam essas estruturas como parâmetros e as "
"retornam como resultados o fazem *por valor* em vez de desreferenciá-las por "
"meio de ponteiros. Isso é consistente em toda a API."

#: ../../c-api/complex.rst:26
msgid ""
"The C structure which corresponds to the value portion of a Python complex "
"number object.  Most of the functions for dealing with complex number "
"objects use structures of this type as input or output values, as "
"appropriate.  It is defined as::"
msgstr ""
"A estrutura C que corresponde à parte do valor de um objeto de número "
"complexo Python. A maioria das funções para lidar com objetos de números "
"complexos usa estruturas desse tipo como valores de entrada ou saída, "
"conforme apropriado. É definido como::"

#: ../../c-api/complex.rst:39
msgid ""
"Return the sum of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Retorna a soma de dois números complexos, utilizando a representação C :c:"
"type:`Py_complex`."

#: ../../c-api/complex.rst:45
msgid ""
"Return the difference between two complex numbers, using the C :c:type:"
"`Py_complex` representation."
msgstr ""
"Retorna a diferença entre dois números complexos, utilizando a representação "
"C :c:type:`Py_complex`."

#: ../../c-api/complex.rst:51
msgid ""
"Return the negation of the complex number *num*, using the C :c:type:"
"`Py_complex` representation."
msgstr ""
"Retorna a negação do número complexo *num*, utilizando a representação C :c:"
"type:`Py_complex`."

#: ../../c-api/complex.rst:57
msgid ""
"Return the product of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Retorna o produto de dois números complexos, utilizando a representação C :c:"
"type:`Py_complex`."

#: ../../c-api/complex.rst:63
msgid ""
"Return the quotient of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Retorna o quociente de dois números complexos, utilizando a representação C :"
"c:type:`Py_complex`."

#: ../../c-api/complex.rst:66
msgid ""
"If *divisor* is null, this method returns zero and sets :c:data:`errno` to :"
"c:data:`EDOM`."
msgstr ""
"Se *divisor* é nulo, este método retorna zero e define :c:data:`errno` para :"
"c:data:`EDOM`."

#: ../../c-api/complex.rst:72
msgid ""
"Return the exponentiation of *num* by *exp*, using the C :c:type:"
"`Py_complex` representation."
msgstr ""
"Retorna a exponenciação de *num* por *exp*, utilizando a representação C :c:"
"type:`Py_complex`"

#: ../../c-api/complex.rst:75
msgid ""
"If *num* is null and *exp* is not a positive real number, this method "
"returns zero and sets :c:data:`errno` to :c:data:`EDOM`."
msgstr ""
"Se *num* for nulo e *exp* não for um número real positivo, este método "
"retorna zero e define :c:data:`errno` para :c:data:`EDOM`."

#: ../../c-api/complex.rst:80
msgid "Complex Numbers as Python Objects"
msgstr "Números complexos como objetos Python"

#: ../../c-api/complex.rst:85
msgid ""
"This subtype of :c:type:`PyObject` represents a Python complex number object."
msgstr ""
"Este subtipo de :c:type:`PyObject` representa um objeto Python de número "
"complexo."

#: ../../c-api/complex.rst:90
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python complex number "
"type. It is the same object as :class:`complex` in the Python layer."
msgstr ""
"Esta instância de :c:type:`PyTypeObject` representa o tipo de número "
"complexo Python. É o mesmo objeto que :class:`complex` na camada Python."

#: ../../c-api/complex.rst:96
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject` or a subtype of :"
"c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"Retorna true se seu argumento é um :c:type:`PyComplexObject` ou um subtipo "
"de :c:type:`PyComplexObject`. Esta função sempre tem sucesso."

#: ../../c-api/complex.rst:102
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject`, but not a "
"subtype of :c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"Retorna true se seu argumento é um :c:type:`PyComplexObject`, mas não um "
"subtipo de :c:type:`PyComplexObject`. Esta função sempre tem sucesso."

#: ../../c-api/complex.rst:108
msgid ""
"Create a new Python complex number object from a C :c:type:`Py_complex` "
"value."
msgstr ""
"Cria um novo objeto de número complexo Python a partir de um valor C :c:type:"
"`Py_complex`."

#: ../../c-api/complex.rst:113
msgid "Return a new :c:type:`PyComplexObject` object from *real* and *imag*."
msgstr "Retorna um novo objeto :c:type:`PyComplexObject` de *real* e *imag*."

#: ../../c-api/complex.rst:118
msgid "Return the real part of *op* as a C :c:type:`double`."
msgstr "Retorna a parte real de *op* como um :c:type:`double` C."

#: ../../c-api/complex.rst:123
msgid "Return the imaginary part of *op* as a C :c:type:`double`."
msgstr "Retorna a parte imaginária de *op* como um :c:type:`double` C."

#: ../../c-api/complex.rst:128
msgid "Return the :c:type:`Py_complex` value of the complex number *op*."
msgstr "Retorna o valor :c:type:`Py_complex` do número complexo *op*."

#: ../../c-api/complex.rst:130
msgid ""
"If *op* is not a Python complex number object but has a :meth:`__complex__` "
"method, this method will first be called to convert *op* to a Python complex "
"number object.  If ``__complex__()`` is not defined then it falls back to :"
"meth:`__float__`.  If ``__float__()`` is not defined then it falls back to :"
"meth:`__index__`.  Upon failure, this method returns ``-1.0`` as a real "
"value."
msgstr ""
"Se *op* não é um objeto de número complexo Python, mas tem um método :meth:"
"`__complex__`, este método será primeiro chamado para converter *op* em um "
"objeto de número complexo Python. Se ``__complex__()`` não for definido, "
"então ele recorre a :meth:`__float__`. Se ``__float__()`` não estiver "
"definido, então ele volta para :meth:`__index__`. Em caso de falha, este "
"método retorna ``-1.0`` como um valor real."

#: ../../c-api/complex.rst:137
msgid "Use :meth:`__index__` if available."
msgstr "Usa :meth:`__index__`, se disponível."
