# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-25 14:54+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/sequence.rst:6
msgid "Sequence Protocol"
msgstr "Protocolo de sequência"

#: ../../c-api/sequence.rst:11
msgid ""
"Return ``1`` if the object provides the sequence protocol, and ``0`` "
"otherwise. Note that it returns ``1`` for Python classes with a :meth:"
"`~object.__getitem__` method, unless they are :class:`dict` subclasses, "
"since in general it is impossible to determine what type of keys the class "
"supports.  This function always succeeds."
msgstr ""
"Retorna ``1`` se o objeto fornecer o protocolo de sequência e ``0`` caso "
"contrário. Note que ele retorna ``1`` para classes Python com um método :"
"meth:`~object.__getitem__` a menos que sejam subclasses de :class:`dict` já "
"que no caso geral é impossível determinar que tipo de chaves a classe provê. "
"Esta função sempre obtém sucesso."

#: ../../c-api/sequence.rst:23
msgid ""
"Returns the number of objects in sequence *o* on success, and ``-1`` on "
"failure.  This is equivalent to the Python expression ``len(o)``."
msgstr ""
"Retorna o número de objetos na sequência *o* em caso de sucesso, ou ``-1`` "
"em caso de falha. Equivale à expressão Python ``len(o)``."

#: ../../c-api/sequence.rst:29
msgid ""
"Return the concatenation of *o1* and *o2* on success, and ``NULL`` on "
"failure. This is the equivalent of the Python expression ``o1 + o2``."
msgstr ""
"Retorna a concatenação de *o1* e *o2* em caso de sucesso, e ``NULL`` em caso "
"de falha. Equivale à expressão Python ``o1 + o2``."

#: ../../c-api/sequence.rst:35
msgid ""
"Return the result of repeating sequence object *o* *count* times, or "
"``NULL`` on failure.  This is the equivalent of the Python expression ``o * "
"count``."
msgstr ""
"Retorna o resultado da repetição do objeto sequência *o* *count* vezes ou "
"``NULL`` em caso de falha. Equivale à expressão Python ``o * count``."

#: ../../c-api/sequence.rst:41
msgid ""
"Return the concatenation of *o1* and *o2* on success, and ``NULL`` on "
"failure. The operation is done *in-place* when *o1* supports it.  This is "
"the equivalent of the Python expression ``o1 += o2``."
msgstr ""
"Retorna a concatenação de *o1* e *o2* em caso de sucesso, e ``NULL`` em caso "
"de falha. A operação é feita *localmente* se *o1* permitir. Equivale à "
"expressão Python ``o1 += o2``."

#: ../../c-api/sequence.rst:48
msgid ""
"Return the result of repeating sequence object *o* *count* times, or "
"``NULL`` on failure.  The operation is done *in-place* when *o* supports "
"it.  This is the equivalent of the Python expression ``o *= count``."
msgstr ""
"Retorna o resultado da repetição do objeto sequência *o* *count* vezes ou "
"``NULL`` em caso de falha. A operação é feita *localmente* se *o* permitir. "
"Equivale à expressão Python ``o *= count``."

#: ../../c-api/sequence.rst:55
msgid ""
"Return the *i*\\ th element of *o*, or ``NULL`` on failure. This is the "
"equivalent of the Python expression ``o[i]``."
msgstr ""
"Retorna o elemento *i* de *o* ou ``NULL`` em caso de falha. Equivale à "
"expressão Python ``o[i]``."

#: ../../c-api/sequence.rst:61
msgid ""
"Return the slice of sequence object *o* between *i1* and *i2*, or ``NULL`` "
"on failure. This is the equivalent of the Python expression ``o[i1:i2]``."
msgstr ""
"Retorna a fatia do objeto sequência *o* entre *i1* e *i2*, ou ``NULL`` em "
"caso de falha. Equivale à expressão Python ``o[i1:i2]``."

#: ../../c-api/sequence.rst:67
msgid ""
"Assign object *v* to the *i*\\ th element of *o*.  Raise an exception and "
"return ``-1`` on failure; return ``0`` on success.  This is the equivalent "
"of the Python statement ``o[i] = v``.  This function *does not* steal a "
"reference to *v*."
msgstr ""
"Atribui o objeto *v* ao elemento *i* de *o*. Levanta uma exceção e retorna "
"``-1`` em caso de falha; retorna ``0`` em caso de sucesso. Esta função *não* "
"rouba uma referência a *v*. Equivale à instrução Python ``o[i]=v``."

#: ../../c-api/sequence.rst:72
msgid ""
"If *v* is ``NULL``, the element is deleted, but this feature is deprecated "
"in favour of using :c:func:`PySequence_DelItem`."
msgstr ""
"Se *v* for ``NULL``, o elemento será removido, mas este recurso foi "
"descontinuado em favor do uso de :c:func:`PySequence_DelItem`."

#: ../../c-api/sequence.rst:78
msgid ""
"Delete the *i*\\ th element of object *o*.  Returns ``-1`` on failure.  This "
"is the equivalent of the Python statement ``del o[i]``."
msgstr ""
"Exclui o elemento *i* do objeto *o*. Retorna ``-1`` em caso de falha. "
"Equivale à instrução Python ``del o[i]``."

#: ../../c-api/sequence.rst:84
msgid ""
"Assign the sequence object *v* to the slice in sequence object *o* from *i1* "
"to *i2*.  This is the equivalent of the Python statement ``o[i1:i2] = v``."
msgstr ""
"Atribui o objeto sequência *v* à fatia no objeto sequência *o* de *i1* a "
"*i2*. Equivale à instrução Python ``o[i1:i2] = v``."

#: ../../c-api/sequence.rst:90
msgid ""
"Delete the slice in sequence object *o* from *i1* to *i2*.  Returns ``-1`` "
"on failure.  This is the equivalent of the Python statement ``del o[i1:i2]``."
msgstr ""
"Exclui a fatia no objeto sequência *o* de *i1* a *i2*. Retorna ``-1`` em "
"caso de falha. Equivale à instrução Python ``del o[i1:i2]``."

#: ../../c-api/sequence.rst:96
msgid ""
"Return the number of occurrences of *value* in *o*, that is, return the "
"number of keys for which ``o[key] == value``.  On failure, return ``-1``.  "
"This is equivalent to the Python expression ``o.count(value)``."
msgstr ""
"Retorna a quantidade de ocorrências de *value* em *o*, isto é, retorna a "
"quantidade de chaves onde ``o[key] == value``. Em caso de falha, retorna "
"``-1``. Equivale à expressão Python ``o.count(value)``."

#: ../../c-api/sequence.rst:103
msgid ""
"Determine if *o* contains *value*.  If an item in *o* is equal to *value*, "
"return ``1``, otherwise return ``0``. On error, return ``-1``.  This is "
"equivalent to the Python expression ``value in o``."
msgstr ""
"Determina se *o* contém *value*. Se um item em *o* for igual a *value*, "
"retorna ``1``, senão, retorna ``0``. Em caso de erro, retorna ``-1``. "
"Equivale à expressão Python ``value in o``."

#: ../../c-api/sequence.rst:110
msgid ""
"Return the first index *i* for which ``o[i] == value``.  On error, return "
"``-1``.    This is equivalent to the Python expression ``o.index(value)``."
msgstr ""
"Retorna o primeiro índice *i* tal que ``o[i] == value``. Em caso de erro, "
"retorna ``-1``. Equivale à expressão Python ``o.index(value)``."

#: ../../c-api/sequence.rst:116
msgid ""
"Return a list object with the same contents as the sequence or iterable *o*, "
"or ``NULL`` on failure.  The returned list is guaranteed to be new.  This is "
"equivalent to the Python expression ``list(o)``."
msgstr ""
"Retorna um objeto lista com o mesmo conteúdo da sequência ou iterável *o*, "
"ou ``NULL`` em caso de falha. Garante-se que a lista retornada será nova. "
"Equivale à expressão Python ``list(o)``."

#: ../../c-api/sequence.rst:125
msgid ""
"Return a tuple object with the same contents as the sequence or iterable "
"*o*, or ``NULL`` on failure.  If *o* is a tuple, a new reference will be "
"returned, otherwise a tuple will be constructed with the appropriate "
"contents.  This is equivalent to the Python expression ``tuple(o)``."
msgstr ""
"Retorna o objeto tupla com o mesmo conteúdo da sequência ou iterável *o*, ou "
"``NULL`` em caso de falha. Se *o* for uma tupla, retorna uma nova "
"referência. Senão, uma tupla será construída com o conteúdo apropriado. "
"Equivale à expressão Python ``tuple(o)``."

#: ../../c-api/sequence.rst:133
msgid ""
"Return the sequence or iterable *o* as an object usable by the other "
"``PySequence_Fast*`` family of functions. If the object is not a sequence or "
"iterable, raises :exc:`TypeError` with *m* as the message text. Returns "
"``NULL`` on failure."
msgstr ""
"Retorna a sequência ou iterável *o* como um objeto usável por outras funções "
"da família ``PySequence_Fast*``. Se o objeto não for uma sequência ou "
"iterável, levanta :exc:`TypeError` com *m* sendo o texto da mensagem. "
"Retorna ``NULL`` em caso de falha."

#: ../../c-api/sequence.rst:138
msgid ""
"The ``PySequence_Fast*`` functions are thus named because they assume *o* is "
"a :c:type:`PyTupleObject` or a :c:type:`PyListObject` and access the data "
"fields of *o* directly."
msgstr ""
"As funções ``PySequence_Fast*`` têm esse nome porque presumem que *o* é um :"
"c:type:`PyTupleObject` ou um :c:type:`PyListObject` e porque acessam os "
"campos de dados de *o* diretamente."

#: ../../c-api/sequence.rst:142
msgid ""
"As a CPython implementation detail, if *o* is already a sequence or list, it "
"will be returned."
msgstr ""
"Como detalhe de implementação de CPython, se *o* já for uma sequência ou "
"lista, ele será retornado."

#: ../../c-api/sequence.rst:148
msgid ""
"Returns the length of *o*, assuming that *o* was returned by :c:func:"
"`PySequence_Fast` and that *o* is not ``NULL``.  The size can also be "
"retrieved by calling :c:func:`PySequence_Size` on *o*, but :c:func:"
"`PySequence_Fast_GET_SIZE` is faster because it can assume *o* is a list or "
"tuple."
msgstr ""
"Retorna o comprimento de *o*, presumindo que *o* foi retornado por :c:func:"
"`PySequence_Fast` e que *o* não seja ``NULL``. O tamanho também pode ser "
"obtido ao chamar :c:func:`PySequence_Size` em *o*, mas :c:func:"
"`PySequence_Fast_GET_SIZE` é mais rápida, ao supor que *o* é uma lista ou "
"tupla."

#: ../../c-api/sequence.rst:157
msgid ""
"Return the *i*\\ th element of *o*, assuming that *o* was returned by :c:"
"func:`PySequence_Fast`, *o* is not ``NULL``, and that *i* is within bounds."
msgstr ""
"Retorna o elemento *i* de *o*, presumindo que *o* foi retornado por :c:func:"
"`PySequence_Fast`, que *o* seja ``NULL``, e que *i* esteja nos limites."

#: ../../c-api/sequence.rst:163
msgid ""
"Return the underlying array of PyObject pointers.  Assumes that *o* was "
"returned by :c:func:`PySequence_Fast` and *o* is not ``NULL``."
msgstr ""
"Retorna o vetor subjacente de ponteiros PyObject. Presume que *o* foi "
"retornado por :c:func:`PySequence_Fast` e que *o* não seja ``NULL``."

#: ../../c-api/sequence.rst:166
msgid ""
"Note, if a list gets resized, the reallocation may relocate the items array. "
"So, only use the underlying array pointer in contexts where the sequence "
"cannot change."
msgstr ""
"Note que, se uma lista for redimensionada, a realocação poderá reposicionar "
"o vetor de itens. Portanto, só use o ponteiro de vetor subjacente em "
"contextos onde a sequência não mudará."

#: ../../c-api/sequence.rst:173
msgid ""
"Return the *i*\\ th element of *o* or ``NULL`` on failure. Faster form of :c:"
"func:`PySequence_GetItem` but without checking that :c:func:"
"`PySequence_Check` on *o* is true and without adjustment for negative "
"indices."
msgstr ""
"Retorna o elemento *i* de *o*, ou ``NULL`` em caso de falha. É uma forma "
"mais rápida de :c:func:`PySequence_GetItem`, mas sem verificar se :c:func:"
"`PySequence_Check` em *o* é verdadeiro e sem ajustar índices negativos."

#: ../../c-api/sequence.rst:21 ../../c-api/sequence.rst:123
msgid "built-in function"
msgstr "função embutida"

#: ../../c-api/sequence.rst:21
msgid "len"
msgstr "len"

#: ../../c-api/sequence.rst:123
msgid "tuple"
msgstr "tupla"
