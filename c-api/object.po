# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-11 16:41+0000\n"
"PO-Revision-Date: 2023-05-24 02:09+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/object.rst:6
msgid "Object Protocol"
msgstr "Protocolo de objeto"

#: ../../c-api/object.rst:11
msgid ""
"The ``NotImplemented`` singleton, used to signal that an operation is not "
"implemented for the given type combination."
msgstr ""
"O singleton ``NotImplemented``, usado para sinalizar que uma operação não "
"foi implementada para a combinação de tipo fornecida."

#: ../../c-api/object.rst:17
msgid ""
"Properly handle returning :c:data:`Py_NotImplemented` from within a C "
"function (that is, create a new :term:`strong reference` to NotImplemented "
"and return it)."
msgstr ""

#: ../../c-api/object.rst:24
msgid ""
"Flag to be used with multiple functions that print the object (like :c:func:"
"`PyObject_Print` and :c:func:`PyFile_WriteObject`). If passed, these "
"function would use the :func:`str` of the object instead of the :func:`repr`."
msgstr ""
"Sinaliza a ser usado com múltiplas funções que imprimem o objeto (como :c:"
"func:`PyObject_Print` e :c:func:`PyFile_WriteObject`). Se passada, esta "
"função usaria o :func:`str` do objeto em vez do :func:`repr`."

#: ../../c-api/object.rst:32
msgid ""
"Print an object *o*, on file *fp*.  Returns ``-1`` on error.  The flags "
"argument is used to enable certain printing options.  The only option "
"currently supported is :c:macro:`Py_PRINT_RAW`; if given, the :func:`str` of "
"the object is written instead of the :func:`repr`."
msgstr ""
"Напечатайте объект *o* в файле *fp*. Возвращает ``-1`` в случае ошибки. "
"Аргумент flags используется для включения определенных параметров печати. В "
"настоящее время поддерживается только один вариант: c:macro:`Py_PRINT_RAW`; "
"если задано, вместо :func:`repr` записывается :func:`str` объекта."

#: ../../c-api/object.rst:40
msgid ""
"Returns ``1`` if *o* has the attribute *attr_name*, and ``0`` otherwise.  "
"This is equivalent to the Python expression ``hasattr(o, attr_name)``.  This "
"function always succeeds."
msgstr ""
"Повертає ``1``, якщо *o* має атрибут *attr_name*, і ``0`` інакше. Це "
"еквівалентно виразу Python ``hasattr(o, attr_name)``. Ця функція завжди "
"успішна."

#: ../../c-api/object.rst:46
msgid ""
"Exceptions that occur when this calls :meth:`~object.__getattr__` and :meth:"
"`~object.__getattribute__` methods are silently ignored. For proper error "
"handling, use :c:func:`PyObject_GetAttr` instead."
msgstr ""
"Исключения, возникающие при вызове методов :meth:`~object.__getattr__` и :"
"meth:`~object.__getattribute__`, молча игнорируются. Для правильной "
"обработки ошибок вместо этого используйте :c:func:`PyObject_GetAttr`."

#: ../../c-api/object.rst:53
msgid ""
"This is the same as :c:func:`PyObject_HasAttr`, but *attr_name* is specified "
"as a :c:expr:`const char*` UTF-8 encoded bytes string, rather than a :c:expr:"
"`PyObject*`."
msgstr ""
"Это то же самое, что :c:func:`PyObject_HasAttr`, но *attr_name* указывается "
"как :c:expr:`const char*` строка байтов в кодировке UTF-8, а не как :c:expr:"
"`PyObject* `."

#: ../../c-api/object.rst:59
msgid ""
"Exceptions that occur when this calls :meth:`~object.__getattr__` and :meth:"
"`~object.__getattribute__` methods or while creating the temporary :class:"
"`str` object are silently ignored. For proper error handling, use :c:func:"
"`PyObject_GetAttrString` instead."
msgstr ""
"Исключения, возникающие при вызове методов :meth:`~object.__getattr__` и :"
"meth:`~object.__getattribute__` или при создании временного объекта :class:"
"`str`, молча игнорируются. Для правильной обработки ошибок вместо этого "
"используйте :c:func:`PyObject_GetAttrString`."

#: ../../c-api/object.rst:67
msgid ""
"Retrieve an attribute named *attr_name* from object *o*. Returns the "
"attribute value on success, or ``NULL`` on failure.  This is the equivalent "
"of the Python expression ``o.attr_name``."
msgstr ""
"Отримати атрибут з назвою *attr_name* з об’єкта *o*. Повертає значення "
"атрибута в разі успіху або ``NULL`` у разі невдачі. Це еквівалент виразу "
"Python ``o.attr_name``."

#: ../../c-api/object.rst:74
msgid ""
"This is the same as :c:func:`PyObject_GetAttr`, but *attr_name* is specified "
"as a :c:expr:`const char*` UTF-8 encoded bytes string, rather than a :c:expr:"
"`PyObject*`."
msgstr ""
"Это то же самое, что :c:func:`PyObject_GetAttr`, но *attr_name* указывается "
"как :c:expr:`const char*` строка байтов в кодировке UTF-8, а не как :c:expr:"
"`PyObject* `."

#: ../../c-api/object.rst:81
msgid ""
"Generic attribute getter function that is meant to be put into a type "
"object's ``tp_getattro`` slot.  It looks for a descriptor in the dictionary "
"of classes in the object's MRO as well as an attribute in the object's :attr:"
"`~object.__dict__` (if present).  As outlined in :ref:`descriptors`, data "
"descriptors take preference over instance attributes, while non-data "
"descriptors don't.  Otherwise, an :exc:`AttributeError` is raised."
msgstr ""
"Загальна функція отримання атрибутів, яка призначена для розміщення в слоті "
"``tp_getattro`` об’єкта типу. Він шукає дескриптор у словнику класів у MRO "
"об’єкта, а також атрибут у :attr:`~object.__dict__` об’єкта (якщо є). Як "
"зазначено в :ref:`descriptors`, дескриптори даних мають перевагу над "
"атрибутами екземплярів, тоді як дескриптори, що не є даними, ні. В іншому "
"випадку виникає помилка :exc:`AttributeError`."

#: ../../c-api/object.rst:91
msgid ""
"Set the value of the attribute named *attr_name*, for object *o*, to the "
"value *v*. Raise an exception and return ``-1`` on failure; return ``0`` on "
"success.  This is the equivalent of the Python statement ``o.attr_name = v``."
msgstr ""
"Установіть значення атрибута *attr_name* для об’єкта *o* на значення *v*. "
"Викликати виняток і повертати ``-1`` у разі помилки; повернути ``0`` в разі "
"успіху. Це еквівалент оператора Python ``o.attr_name = v``."

#: ../../c-api/object.rst:96
msgid ""
"If *v* is ``NULL``, the attribute is deleted. This behaviour is deprecated "
"in favour of using :c:func:`PyObject_DelAttr`, but there are currently no "
"plans to remove it."
msgstr ""
"Якщо *v* має значення ``NULL``, атрибут видаляється. Ця поведінка застаріла "
"на користь використання :c:func:`PyObject_DelAttr`, але наразі немає планів "
"її видалення."

#: ../../c-api/object.rst:103
msgid ""
"This is the same as :c:func:`PyObject_SetAttr`, but *attr_name* is specified "
"as a :c:expr:`const char*` UTF-8 encoded bytes string, rather than a :c:expr:"
"`PyObject*`."
msgstr ""
"Это то же самое, что и :c:func:`PyObject_SetAttr`, но *attr_name* "
"указывается как :c:expr:`const char*` строка байтов в кодировке UTF-8, а не "
"как :c:expr:`PyObject* `."

#: ../../c-api/object.rst:107
msgid ""
"If *v* is ``NULL``, the attribute is deleted, but this feature is deprecated "
"in favour of using :c:func:`PyObject_DelAttrString`."
msgstr ""
"Якщо *v* має значення ``NULL``, атрибут видаляється, але ця функція "
"застаріла на користь використання :c:func:`PyObject_DelAttrString`."

#: ../../c-api/object.rst:113
msgid ""
"Generic attribute setter and deleter function that is meant to be put into a "
"type object's :c:member:`~PyTypeObject.tp_setattro` slot.  It looks for a "
"data descriptor in the dictionary of classes in the object's MRO, and if "
"found it takes preference over setting or deleting the attribute in the "
"instance dictionary. Otherwise, the attribute is set or deleted in the "
"object's :attr:`~object.__dict__` (if present). On success, ``0`` is "
"returned, otherwise an :exc:`AttributeError` is raised and ``-1`` is "
"returned."
msgstr ""
"Загальна функція встановлення та видалення атрибутів, яка призначена для "
"розміщення в слоті :c:member:`~PyTypeObject.tp_setattro` об’єкта типу. Він "
"шукає дескриптор даних у словнику класів у MRO об’єкта, і якщо його "
"знайдено, він надає перевагу над налаштуванням або видаленням атрибута в "
"словнику екземпляра. В іншому випадку атрибут встановлюється або видаляється "
"в об’єкті :attr:`~object.__dict__` (якщо є). У разі успіху повертається "
"``0``, інакше виникає :exc:`AttributeError` і повертається ``-1``."

#: ../../c-api/object.rst:125
msgid ""
"Delete attribute named *attr_name*, for object *o*. Returns ``-1`` on "
"failure. This is the equivalent of the Python statement ``del o.attr_name``."
msgstr ""
"Видалити атрибут з назвою *attr_name* для об’єкта *o*. Повертає ``-1`` у "
"разі помилки. Це еквівалент оператора Python ``del o.attr_name``."

#: ../../c-api/object.rst:131
msgid ""
"This is the same as :c:func:`PyObject_DelAttr`, but *attr_name* is specified "
"as a :c:expr:`const char*` UTF-8 encoded bytes string, rather than a :c:expr:"
"`PyObject*`."
msgstr ""
"Это то же самое, что :c:func:`PyObject_DelAttr`, но *attr_name* указывается "
"как :c:expr:`const char*` строка байтов в кодировке UTF-8, а не как :c:expr:"
"`PyObject* `."

#: ../../c-api/object.rst:138
msgid ""
"A generic implementation for the getter of a ``__dict__`` descriptor. It "
"creates the dictionary if necessary."
msgstr ""
"Загальна реалізація засобу отримання дескриптора ``__dict__``. Він створює "
"словник, якщо це необхідно."

#: ../../c-api/object.rst:141
msgid ""
"This function may also be called to get the :py:attr:`~object.__dict__` of "
"the object *o*. Pass ``NULL`` for *context* when calling it. Since this "
"function may need to allocate memory for the dictionary, it may be more "
"efficient to call :c:func:`PyObject_GetAttr` when accessing an attribute on "
"the object."
msgstr ""
"Эту функцию также можно вызвать для получения :py:attr:`~object.__dict__` "
"объекта *o*. Передайте ``NULL`` для *context* при вызове. Поскольку этой "
"функции может потребоваться выделить память для словаря, возможно, будет "
"более эффективно вызвать :c:func:`PyObject_GetAttr` при доступе к атрибуту "
"объекта."

#: ../../c-api/object.rst:147
msgid "On failure, returns ``NULL`` with an exception set."
msgstr "В случае неудачи возвращает NULL с установленным исключением."

#: ../../c-api/object.rst:154
msgid ""
"A generic implementation for the setter of a ``__dict__`` descriptor. This "
"implementation does not allow the dictionary to be deleted."
msgstr ""
"Загальна реалізація засобу налаштування дескриптора ``__dict__``. Ця "
"реалізація не дозволяє видаляти словник."

#: ../../c-api/object.rst:162
msgid ""
"Return a pointer to :py:attr:`~object.__dict__` of the object *obj*. If "
"there is no ``__dict__``, return ``NULL`` without setting an exception."
msgstr ""
"Верните указатель на :py:attr:`~object.__dict__` объекта *obj*. Если "
"``__dict__`` нет, верните ``NULL`` без установки исключения."

#: ../../c-api/object.rst:165
msgid ""
"This function may need to allocate memory for the dictionary, so it may be "
"more efficient to call :c:func:`PyObject_GetAttr` when accessing an "
"attribute on the object."
msgstr ""
"Этой функции может потребоваться выделить память для словаря, поэтому может "
"оказаться более эффективным вызвать :c:func:`PyObject_GetAttr` при доступе к "
"атрибуту объекта."

#: ../../c-api/object.rst:172
msgid ""
"Compare the values of *o1* and *o2* using the operation specified by *opid*, "
"which must be one of :c:macro:`Py_LT`, :c:macro:`Py_LE`, :c:macro:`Py_EQ`, :"
"c:macro:`Py_NE`, :c:macro:`Py_GT`, or :c:macro:`Py_GE`, corresponding to "
"``<``, ``<=``, ``==``, ``!=``, ``>``, or ``>=`` respectively. This is the "
"equivalent of the Python expression ``o1 op o2``, where ``op`` is the "
"operator corresponding to *opid*. Returns the value of the comparison on "
"success, or ``NULL`` on failure."
msgstr ""
"Сравните значения *o1* и *o2*, используя операцию, указанную в *opid*, "
"которая должна быть одной из :c:macro:`Py_LT`, :c:macro:`Py_LE`, :c:macro:"
"`Py_EQ `, :c:macro:`Py_NE`, :c:macro:`Py_GT` или :c:macro:`Py_GE`, "
"соответствующие ``<``, ``<=``, ``==` `, ``!=``, ``>`` или ``>=`` "
"соответственно. Это эквивалент выражения Python ``o1 op o2``, где ``op`` — "
"это оператор, соответствующий *opid*. Возвращает значение сравнения в случае "
"успеха или NULL в случае неудачи."

#: ../../c-api/object.rst:182
msgid ""
"Compare the values of *o1* and *o2* using the operation specified by *opid*, "
"like :c:func:`PyObject_RichCompare`, but returns ``-1`` on error, ``0`` if "
"the result is false, ``1`` otherwise."
msgstr ""
"Сравните значения *o1* и *o2*, используя операцию, указанную в *opid*, "
"например :c:func:`PyObject_RichCompare`, но возвращает ``-1`` в случае "
"ошибки, ``0``, если результат равен false, ``1`` в противном случае."

#: ../../c-api/object.rst:187
msgid ""
"If *o1* and *o2* are the same object, :c:func:`PyObject_RichCompareBool` "
"will always return ``1`` for :c:macro:`Py_EQ` and ``0`` for :c:macro:`Py_NE`."
msgstr ""
"Если *o1* и *o2* являются одним и тем же объектом, :c:func:"
"`PyObject_RichCompareBool` всегда будет возвращать ``1`` для :c:macro:"
"`Py_EQ` и ``0`` для :c:macro: `Пы_НЕ`."

#: ../../c-api/object.rst:192
msgid ""
"Format *obj* using *format_spec*. This is equivalent to the Python "
"expression ``format(obj, format_spec)``."
msgstr ""
"Отформатируйте *obj*, используя *format_spec*. Это эквивалентно выражению "
"Python «format(obj, format_spec)»."

#: ../../c-api/object.rst:195
msgid ""
"*format_spec* may be ``NULL``. In this case the call is equivalent to "
"``format(obj)``. Returns the formatted string on success, ``NULL`` on "
"failure."
msgstr ""
"*format_spec* может иметь значение ``NULL``. В этом случае вызов "
"эквивалентен ``format(obj)``. Возвращает отформатированную строку в случае "
"успеха и ``NULL`` в случае неудачи."

#: ../../c-api/object.rst:203
msgid ""
"Compute a string representation of object *o*.  Returns the string "
"representation on success, ``NULL`` on failure.  This is the equivalent of "
"the Python expression ``repr(o)``.  Called by the :func:`repr` built-in "
"function."
msgstr ""
"Обчислити рядкове представлення об’єкта *o*. Повертає рядкове представлення "
"в разі успіху, ``NULL`` у разі невдачі. Це еквівалент виразу Python "
"``repr(o)``. Викликається вбудованою функцією :func:`repr`."

#: ../../c-api/object.rst:207 ../../c-api/object.rst:231
msgid ""
"This function now includes a debug assertion to help ensure that it does not "
"silently discard an active exception."
msgstr ""
"Essa função agora inclui uma asserção de depuração para ajudar a garantir "
"que ela não descarte silenciosamente uma exceção ativa."

#: ../../c-api/object.rst:215
msgid ""
"As :c:func:`PyObject_Repr`, compute a string representation of object *o*, "
"but escape the non-ASCII characters in the string returned by :c:func:"
"`PyObject_Repr` with ``\\x``, ``\\u`` or ``\\U`` escapes.  This generates a "
"string similar to that returned by :c:func:`PyObject_Repr` in Python 2. "
"Called by the :func:`ascii` built-in function."
msgstr ""
"Як :c:func:`PyObject_Repr`, обчислити рядкове представлення об’єкта *o*, але "
"екранувати символи, відмінні від ASCII, у рядку, який повертає :c:func:"
"`PyObject_Repr`, за допомогою ``\\x``, ``\\u`` або ``\\U`` екранується. Це "
"створює рядок, подібний до того, який повертає :c:func:`PyObject_Repr` у "
"Python 2. Викликається вбудованою функцією :func:`ascii`."

#: ../../c-api/object.rst:226
msgid ""
"Compute a string representation of object *o*.  Returns the string "
"representation on success, ``NULL`` on failure.  This is the equivalent of "
"the Python expression ``str(o)``.  Called by the :func:`str` built-in "
"function and, therefore, by the :func:`print` function."
msgstr ""
"Обчислити рядкове представлення об’єкта *o*. Повертає рядкове представлення "
"в разі успіху, ``NULL`` у разі невдачі. Це еквівалент виразу Python "
"``str(o)``. Викликається вбудованою функцією :func:`str` і, отже, функцією :"
"func:`print`."

#: ../../c-api/object.rst:240
msgid ""
"Compute a bytes representation of object *o*.  ``NULL`` is returned on "
"failure and a bytes object on success.  This is equivalent to the Python "
"expression ``bytes(o)``, when *o* is not an integer.  Unlike ``bytes(o)``, a "
"TypeError is raised when *o* is an integer instead of a zero-initialized "
"bytes object."
msgstr ""
"Обчисліть байтове представлення об'єкта *o*. У разі помилки повертається "
"``NULL``, а в разі успіху — об’єкт bytes. Це еквівалентно виразу Python "
"``bytes(o)``, коли *o* не є цілим числом. На відміну від ``bytes(o)``, "
"помилка TypeError виникає, коли *o* є цілим числом замість об’єкта bytes, "
"ініціалізованого нулем."

#: ../../c-api/object.rst:249
msgid ""
"Return ``1`` if the class *derived* is identical to or derived from the "
"class *cls*, otherwise return ``0``.  In case of an error, return ``-1``."
msgstr ""
"Повертає ``1``, якщо клас *derived* ідентичний або походить від класу *cls*, "
"інакше повертає ``0``. У разі помилки поверніть ``-1``."

#: ../../c-api/object.rst:252 ../../c-api/object.rst:271
msgid ""
"If *cls* is a tuple, the check will be done against every entry in *cls*. "
"The result will be ``1`` when at least one of the checks returns ``1``, "
"otherwise it will be ``0``."
msgstr ""
"Якщо *cls* є кортежем, перевірятиметься кожен запис у *cls*. Результатом "
"буде ``1``, якщо хоча б одна з перевірок повертає ``1``, інакше він буде "
"``0``."

#: ../../c-api/object.rst:256
msgid ""
"If *cls* has a :meth:`~class.__subclasscheck__` method, it will be called to "
"determine the subclass status as described in :pep:`3119`.  Otherwise, "
"*derived* is a subclass of *cls* if it is a direct or indirect subclass, i."
"e. contained in ``cls.__mro__``."
msgstr ""

#: ../../c-api/object.rst:261
msgid ""
"Normally only class objects, i.e. instances of :class:`type` or a derived "
"class, are considered classes.  However, objects can override this by having "
"a :attr:`~class.__bases__` attribute (which must be a tuple of base classes)."
msgstr ""

#: ../../c-api/object.rst:268
msgid ""
"Return ``1`` if *inst* is an instance of the class *cls* or a subclass of "
"*cls*, or ``0`` if not.  On error, returns ``-1`` and sets an exception."
msgstr ""
"Повертає ``1``, якщо *inst* є екземпляром класу *cls* або підкласом *cls*, "
"або ``0``, якщо ні. У разі помилки повертає ``-1`` і встановлює виняток."

#: ../../c-api/object.rst:275
msgid ""
"If *cls* has a :meth:`~class.__instancecheck__` method, it will be called to "
"determine the subclass status as described in :pep:`3119`.  Otherwise, "
"*inst* is an instance of *cls* if its class is a subclass of *cls*."
msgstr ""

#: ../../c-api/object.rst:279
msgid ""
"An instance *inst* can override what is considered its class by having a :"
"attr:`~instance.__class__` attribute."
msgstr ""

#: ../../c-api/object.rst:282
msgid ""
"An object *cls* can override if it is considered a class, and what its base "
"classes are, by having a :attr:`~class.__bases__` attribute (which must be a "
"tuple of base classes)."
msgstr ""

#: ../../c-api/object.rst:291
msgid ""
"Compute and return the hash value of an object *o*.  On failure, return "
"``-1``. This is the equivalent of the Python expression ``hash(o)``."
msgstr ""
"Обчислити та повернути хеш-значення об’єкта *o*. У разі помилки поверніть "
"``-1``. Це еквівалент виразу Python ``hash(o)``."

#: ../../c-api/object.rst:294
msgid ""
"The return type is now Py_hash_t.  This is a signed integer the same size "
"as :c:type:`Py_ssize_t`."
msgstr ""
"Тип повернення тепер Py_hash_t. Це ціле число зі знаком такого ж розміру, "
"як :c:type:`Py_ssize_t`."

#: ../../c-api/object.rst:301
msgid ""
"Set a :exc:`TypeError` indicating that ``type(o)`` is not :term:`hashable` "
"and return ``-1``. This function receives special treatment when stored in a "
"``tp_hash`` slot, allowing a type to explicitly indicate to the interpreter "
"that it is not hashable."
msgstr ""
"Установите :exc:`TypeError`, указывающий, что ``type(o)`` не является :term:"
"`hashable`, и верните ``-1``. Эта функция получает специальную обработку при "
"хранении в слоте tp_hash, что позволяет типу явно указать интерпретатору, "
"что он не является хэшируемым."

#: ../../c-api/object.rst:309
msgid ""
"Returns ``1`` if the object *o* is considered to be true, and ``0`` "
"otherwise. This is equivalent to the Python expression ``not not o``.  On "
"failure, return ``-1``."
msgstr ""
"Повертає ``1``, якщо об’єкт *o* вважається істинним, і ``0`` в іншому "
"випадку. Це еквівалентно виразу Python ``not not o``. У разі помилки "
"поверніть ``-1``."

#: ../../c-api/object.rst:316
msgid ""
"Returns ``0`` if the object *o* is considered to be true, and ``1`` "
"otherwise. This is equivalent to the Python expression ``not o``.  On "
"failure, return ``-1``."
msgstr ""
"Повертає ``0``, якщо об’єкт *o* вважається істинним, і ``1`` інакше. Це "
"еквівалентно виразу Python ``not o``. У разі помилки поверніть ``-1``."

#: ../../c-api/object.rst:325
msgid ""
"When *o* is non-``NULL``, returns a type object corresponding to the object "
"type of object *o*. On failure, raises :exc:`SystemError` and returns "
"``NULL``.  This is equivalent to the Python expression ``type(o)``. This "
"function creates a new :term:`strong reference` to the return value. There's "
"really no reason to use this function instead of the :c:func:`Py_TYPE()` "
"function, which returns a pointer of type :c:expr:`PyTypeObject*`, except "
"when a new :term:`strong reference` is needed."
msgstr ""
"Если *o* не равно NULL, возвращается объект типа, соответствующий типу "
"объекта *o*. В случае неудачи вызывает :exc:`SystemError` и возвращает "
"``NULL``. Это эквивалентно выражению Python ``type(o)``. Эта функция создает "
"новую :term:`сильную ссылку` на возвращаемое значение. На самом деле нет "
"причин использовать эту функцию вместо функции :c:func:`Py_TYPE()`, которая "
"возвращает указатель типа :c:expr:`PyTypeObject*`, за исключением случаев, "
"когда появляется новая :term:`strong reference` необходим."

#: ../../c-api/object.rst:337
msgid ""
"Return non-zero if the object *o* is of type *type* or a subtype of *type*, "
"and ``0`` otherwise.  Both parameters must be non-``NULL``."
msgstr ""
"Повертає відмінне від нуля значення, якщо об’єкт *o* має тип *type* або "
"підтип *type*, і ``0`` інакше. Обидва параметри не мають бути ``NULL``."

#: ../../c-api/object.rst:346
msgid ""
"Return the length of object *o*.  If the object *o* provides either the "
"sequence and mapping protocols, the sequence length is returned.  On error, "
"``-1`` is returned.  This is the equivalent to the Python expression "
"``len(o)``."
msgstr ""
"Повертає довжину об'єкта *o*. Якщо об’єкт *o* надає протоколи послідовності "
"та відображення, повертається довжина послідовності. У разі помилки "
"повертається ``-1``. Це еквівалент виразу Python ``len(o)``."

#: ../../c-api/object.rst:353
msgid ""
"Return an estimated length for the object *o*. First try to return its "
"actual length, then an estimate using :meth:`~object.__length_hint__`, and "
"finally return the default value. On error return ``-1``. This is the "
"equivalent to the Python expression ``operator.length_hint(o, "
"defaultvalue)``."
msgstr ""
"Повертає приблизну довжину об’єкта *o*. Спочатку спробуйте повернути його "
"фактичну довжину, потім оцінку за допомогою :meth:`~object.__length_hint__` "
"і, нарешті, поверніть значення за замовчуванням. У разі помилки повертає "
"``-1``. Це еквівалент виразу Python ``operator.length_hint(o, "
"defaultvalue)``."

#: ../../c-api/object.rst:363
msgid ""
"Return element of *o* corresponding to the object *key* or ``NULL`` on "
"failure. This is the equivalent of the Python expression ``o[key]``."
msgstr ""
"Повертає елемент *o*, що відповідає об’єкту *key* або ``NULL`` у разі "
"помилки. Це еквівалент виразу Python ``o[key]``."

#: ../../c-api/object.rst:369
msgid ""
"Map the object *key* to the value *v*.  Raise an exception and return ``-1`` "
"on failure; return ``0`` on success.  This is the equivalent of the Python "
"statement ``o[key] = v``.  This function *does not* steal a reference to *v*."
msgstr ""
"Зіставте об’єкт *key* на значення *v*. Викликати виняток і повертати ``-1`` "
"у разі помилки; повернути ``0`` в разі успіху. Це еквівалент оператора "
"Python ``o[key] = v``. Ця функція *не* викрадає посилання на *v*."

#: ../../c-api/object.rst:377
msgid ""
"Remove the mapping for the object *key* from the object *o*.  Return ``-1`` "
"on failure.  This is equivalent to the Python statement ``del o[key]``."
msgstr ""
"Видаліть зіставлення для об’єкта *key* з об’єкта *o*. Повернути ``-1`` у "
"разі помилки. Це еквівалентно оператору Python ``del o[key]``."

#: ../../c-api/object.rst:383
msgid ""
"This is equivalent to the Python expression ``dir(o)``, returning a "
"(possibly empty) list of strings appropriate for the object argument, or "
"``NULL`` if there was an error.  If the argument is ``NULL``, this is like "
"the Python ``dir()``, returning the names of the current locals; in this "
"case, if no execution frame is active then ``NULL`` is returned but :c:func:"
"`PyErr_Occurred` will return false."
msgstr ""
"Це еквівалентно виразу Python ``dir(o)``, який повертає (можливо, порожній) "
"список рядків, відповідних для аргументу об’єкта, або ``NULL``, якщо була "
"помилка. Якщо аргумент ``NULL``, це схоже на ``dir()`` Python, що повертає "
"імена поточних локальних систем; у цьому випадку, якщо жоден кадр виконання "
"не активний, повертається ``NULL``, але :c:func:`PyErr_Occurred` повертатиме "
"false."

#: ../../c-api/object.rst:392
msgid ""
"This is equivalent to the Python expression ``iter(o)``. It returns a new "
"iterator for the object argument, or the object  itself if the object is "
"already an iterator.  Raises :exc:`TypeError` and returns ``NULL`` if the "
"object cannot be iterated."
msgstr ""
"Це еквівалентно виразу Python ``iter(o)``. Він повертає новий ітератор для "
"аргументу об’єкта або сам об’єкт, якщо об’єкт уже є ітератором. Викликає :"
"exc:`TypeError` і повертає ``NULL``, якщо об’єкт не можна повторити."

#: ../../c-api/object.rst:400
msgid ""
"This is the equivalent to the Python expression ``aiter(o)``. Takes an :"
"class:`AsyncIterable` object and returns an :class:`AsyncIterator` for it. "
"This is typically a new iterator but if the argument is an :class:"
"`AsyncIterator`, this returns itself. Raises :exc:`TypeError` and returns "
"``NULL`` if the object cannot be iterated."
msgstr ""
"Це еквівалент виразу Python ``aiter(o)``. Бере об’єкт :class:`AsyncIterable` "
"і повертає для нього :class:`AsyncIterator`. Зазвичай це новий ітератор, але "
"якщо аргументом є :class:`AsyncIterator`, він повертає сам себе. Викликає :"
"exc:`TypeError` і повертає ``NULL``, якщо об’єкт не можна повторити."

#: ../../c-api/object.rst:201 ../../c-api/object.rst:213
#: ../../c-api/object.rst:238 ../../c-api/object.rst:289
#: ../../c-api/object.rst:323 ../../c-api/object.rst:344
msgid "built-in function"
msgstr "função embutida"

#: ../../c-api/object.rst:201
msgid "repr"
msgstr "repr"

#: ../../c-api/object.rst:213
msgid "ascii"
msgstr "ascii"

#: ../../c-api/object.rst:221
msgid "string"
msgstr "string"

#: ../../c-api/object.rst:221
msgid "PyObject_Str (C function)"
msgstr "PyObject_Str (C function)"

#: ../../c-api/object.rst:238
msgid "bytes"
msgstr "bytes"

#: ../../c-api/object.rst:289
msgid "hash"
msgstr "hash"

#: ../../c-api/object.rst:323
msgid "type"
msgstr "tipo"

#: ../../c-api/object.rst:344
msgid "len"
msgstr "len"
