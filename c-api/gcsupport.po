# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-11 17:51+0000\n"
"PO-Revision-Date: 2017-02-16 17:35+0000\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/gcsupport.rst:6
msgid "Supporting Cyclic Garbage Collection"
msgstr "Suporte a Coleta Cíclica de Lixo"

#: ../../c-api/gcsupport.rst:8
msgid ""
"Python's support for detecting and collecting garbage which involves "
"circular references requires support from object types which are "
"\"containers\" for other objects which may also be containers.  Types which "
"do not store references to other objects, or which only store references to "
"atomic types (such as numbers or strings), do not need to provide any "
"explicit support for garbage collection."
msgstr ""
"O suporte do Python para detectar e coletar o lixo, que envolve referencias "
"circulares, requer suporte dos tipos de objetos que são \"contêiners\" para "
"outros objetos que também podem ser contêiners. Tipos que não armazenam "
"referências a outros tipos de objetos, ou que apenas armazenam referências a "
"tipos atômicos (como números ou strings), não precisam fornecer nenhum "
"suporte explicito para coleta de lixo."

#: ../../c-api/gcsupport.rst:15
msgid ""
"To create a container type, the :c:member:`~PyTypeObject.tp_flags` field of "
"the type object must include the :const:`Py_TPFLAGS_HAVE_GC` and provide an "
"implementation of the :c:member:`~PyTypeObject.tp_traverse` handler.  If "
"instances of the type are mutable, a :c:member:`~PyTypeObject.tp_clear` "
"implementation must also be provided."
msgstr ""

#: ../../c-api/gcsupport.rst:24
msgid ""
"Objects with a type with this flag set must conform with the rules "
"documented here.  For convenience these objects will be referred to as "
"container objects."
msgstr ""
"Objetos com esse tipo de sinalizador definido devem estar em conformidade "
"com regras documentadas aqui. Por conveniência esses objetos serão "
"referenciados como objetos de contêiner."

#: ../../c-api/gcsupport.rst:28
msgid "Constructors for container types must conform to two rules:"
msgstr "Construtores para tipos de contêiner devem obedecer a duas regras:"

#: ../../c-api/gcsupport.rst:30
msgid ""
"The memory for the object must be allocated using :c:func:`PyObject_GC_New` "
"or :c:func:`PyObject_GC_NewVar`."
msgstr ""
"A memória para o objeto deve ser alocada usando :c:func:`PyObject_GC_New` "
"ou :c:func:`PyObject_GC_NewVar`."

#: ../../c-api/gcsupport.rst:33
msgid ""
"Once all the fields which may contain references to other containers are "
"initialized, it must call :c:func:`PyObject_GC_Track`."
msgstr ""
"Uma vez que todos os campos que podem conter referências a outros containers "
"foram inicializados, deve-se chamar  :c:func:`PyObject_GC_Track`."

#: ../../c-api/gcsupport.rst:36
msgid ""
"Similarly, the deallocator for the object must conform to a similar pair of "
"rules:"
msgstr ""
"Da mesma forma, o desalocador para o objeto deve estar em conformidade com "
"regras semelhantes:"

#: ../../c-api/gcsupport.rst:39
msgid ""
"Before fields which refer to other containers are invalidated, :c:func:"
"`PyObject_GC_UnTrack` must be called."
msgstr ""
"Antes que os campos que fazer referência a outros containers sejam "
"invalidados,  :c:func:`PyObject_GC_UnTrack` deve ser chamado."

#: ../../c-api/gcsupport.rst:42
msgid ""
"The object's memory must be deallocated using :c:func:`PyObject_GC_Del`."
msgstr ""
"A memória destinada ao objeto deve ser desalocada usando :c:func:"
"`PyObject_GC_Del`."

#: ../../c-api/gcsupport.rst:45
msgid ""
"If a type adds the Py_TPFLAGS_HAVE_GC, then it *must* implement at least a :"
"c:member:`~PyTypeObject.tp_traverse` handler or explicitly use one from its "
"subclass or subclasses."
msgstr ""
"Якщо тип додає Py_TPFLAGS_HAVE_GC, тоді він *має* реалізувати принаймні "
"обробник :c:member:`~PyTypeObject.tp_traverse` або явно використовувати один "
"із свого підкласу або підкласів."

#: ../../c-api/gcsupport.rst:49
msgid ""
"When calling :c:func:`PyType_Ready` or some of the APIs that indirectly call "
"it like :c:func:`PyType_FromSpecWithBases` or :c:func:`PyType_FromSpec` the "
"interpreter will automatically populate the :c:member:`~PyTypeObject."
"tp_flags`, :c:member:`~PyTypeObject.tp_traverse` and :c:member:"
"`~PyTypeObject.tp_clear` fields if the type inherits from a class that "
"implements the garbage collector protocol and the child class does *not* "
"include the :const:`Py_TPFLAGS_HAVE_GC` flag."
msgstr ""

#: ../../c-api/gcsupport.rst:59
msgid ""
"Analogous to :c:func:`PyObject_New` but for container objects with the :"
"const:`Py_TPFLAGS_HAVE_GC` flag set."
msgstr ""

#: ../../c-api/gcsupport.rst:65
msgid ""
"Analogous to :c:func:`PyObject_NewVar` but for container objects with the :"
"const:`Py_TPFLAGS_HAVE_GC` flag set."
msgstr ""

#: ../../c-api/gcsupport.rst:71
msgid ""
"Resize an object allocated by :c:func:`PyObject_NewVar`.  Returns the "
"resized object or ``NULL`` on failure.  *op* must not be tracked by the "
"collector yet."
msgstr ""

#: ../../c-api/gcsupport.rst:77
msgid ""
"Adds the object *op* to the set of container objects tracked by the "
"collector.  The collector can run at unexpected times so objects must be "
"valid while being tracked.  This should be called once all the fields "
"followed by the :c:member:`~PyTypeObject.tp_traverse` handler become valid, "
"usually near the end of the constructor."
msgstr ""
"Додає об’єкт *op* до набору об’єктів-контейнерів, які відстежує збирач. "
"Збирач може запускатися в несподіваний час, тому об’єкти мають бути дійсними "
"під час відстеження. Його слід викликати, коли всі поля, за якими йде "
"обробник :c:member:`~PyTypeObject.tp_traverse`, стануть дійсними, як "
"правило, ближче до кінця конструктора."

#: ../../c-api/gcsupport.rst:86
msgid ""
"Returns non-zero if the object implements the garbage collector protocol, "
"otherwise returns 0."
msgstr ""
"Повертає ненульове значення, якщо об’єкт реалізує протокол збирача сміття, "
"інакше повертає 0."

#: ../../c-api/gcsupport.rst:89
msgid ""
"The object cannot be tracked by the garbage collector if this function "
"returns 0."
msgstr "Збирач сміття не може відстежувати об’єкт, якщо ця функція повертає 0."

#: ../../c-api/gcsupport.rst:94
msgid ""
"Returns 1 if the object type of *op* implements the GC protocol and *op* is "
"being currently tracked by the garbage collector and 0 otherwise."
msgstr ""
"Повертає 1, якщо тип об’єкта *op* реалізує протокол GC і *op* зараз "
"відстежується збирачем сміття, і 0 в іншому випадку."

#: ../../c-api/gcsupport.rst:97
msgid "This is analogous to the Python function :func:`gc.is_tracked`."
msgstr "Це аналогічно функції Python :func:`gc.is_tracked`."

#: ../../c-api/gcsupport.rst:104
msgid ""
"Returns 1 if the object type of *op* implements the GC protocol and *op* has "
"been already finalized by the garbage collector and 0 otherwise."
msgstr ""
"Повертає 1, якщо тип об’єкта *op* реалізує протокол GC і *op* вже завершено "
"збирачем сміття, і 0 в іншому випадку."

#: ../../c-api/gcsupport.rst:107
msgid "This is analogous to the Python function :func:`gc.is_finalized`."
msgstr "Це аналогічно функції Python :func:`gc.is_finalized`."

#: ../../c-api/gcsupport.rst:114
msgid ""
"Releases memory allocated to an object using :c:func:`PyObject_GC_New` or :c:"
"func:`PyObject_GC_NewVar`."
msgstr ""

#: ../../c-api/gcsupport.rst:120
msgid ""
"Remove the object *op* from the set of container objects tracked by the "
"collector.  Note that :c:func:`PyObject_GC_Track` can be called again on "
"this object to add it back to the set of tracked objects.  The deallocator (:"
"c:member:`~PyTypeObject.tp_dealloc` handler) should call this for the object "
"before any of the fields used by the :c:member:`~PyTypeObject.tp_traverse` "
"handler become invalid."
msgstr ""
"Видаліть об’єкт *op* із набору об’єктів-контейнерів, які відстежує збирач. "
"Зауважте, що :c:func:`PyObject_GC_Track` можна знову викликати для цього "
"об’єкта, щоб додати його назад до набору відстежуваних об’єктів. Deallocator "
"(:c:member:`~PyTypeObject.tp_dealloc` обробник) має викликати це для об’єкта "
"до того, як будь-яке з полів, що використовуються :c:member:`~PyTypeObject."
"tp_traverse` обробником, стане недійсним."

#: ../../c-api/gcsupport.rst:129
msgid ""
"The :c:func:`_PyObject_GC_TRACK` and :c:func:`_PyObject_GC_UNTRACK` macros "
"have been removed from the public C API."
msgstr ""

#: ../../c-api/gcsupport.rst:132
msgid ""
"The :c:member:`~PyTypeObject.tp_traverse` handler accepts a function "
"parameter of this type:"
msgstr ""
"Обробник :c:member:`~PyTypeObject.tp_traverse` приймає параметр функції "
"такого типу:"

#: ../../c-api/gcsupport.rst:137
msgid ""
"Type of the visitor function passed to the :c:member:`~PyTypeObject."
"tp_traverse` handler. The function should be called with an object to "
"traverse as *object* and the third parameter to the :c:member:`~PyTypeObject."
"tp_traverse` handler as *arg*.  The Python core uses several visitor "
"functions to implement cyclic garbage detection; it's not expected that "
"users will need to write their own visitor functions."
msgstr ""
"Тип функції відвідувача, переданої обробнику :c:member:`~PyTypeObject."
"tp_traverse`. Функція має бути викликана з об’єктом для проходження як "
"*object* і третім параметром для обробника :c:member:`~PyTypeObject."
"tp_traverse` як *arg*. Ядро Python використовує кілька функцій відвідувачів "
"для реалізації циклічного виявлення сміття; не очікується, що користувачам "
"доведеться писати власні функції відвідувачів."

#: ../../c-api/gcsupport.rst:144
msgid ""
"The :c:member:`~PyTypeObject.tp_traverse` handler must have the following "
"type:"
msgstr "Обробник :c:member:`~PyTypeObject.tp_traverse` повинен мати такий тип:"

#: ../../c-api/gcsupport.rst:149
msgid ""
"Traversal function for a container object.  Implementations must call the "
"*visit* function for each object directly contained by *self*, with the "
"parameters to *visit* being the contained object and the *arg* value passed "
"to the handler.  The *visit* function must not be called with a ``NULL`` "
"object argument.  If *visit* returns a non-zero value that value should be "
"returned immediately."
msgstr ""
"Функція обходу для об’єкта-контейнера. Реалізації повинні викликати функцію "
"*visit* для кожного об’єкта, який безпосередньо міститься в *self*, з "
"параметрами *visit*, які містять об’єкт, а значення *arg* передається "
"обробнику. Функцію *visit* не можна викликати з аргументом об’єкта ``NULL``. "
"Якщо *visit* повертає ненульове значення, це значення має бути повернуто "
"негайно."

#: ../../c-api/gcsupport.rst:156
msgid ""
"To simplify writing :c:member:`~PyTypeObject.tp_traverse` handlers, a :c:"
"func:`Py_VISIT` macro is provided.  In order to use this macro, the :c:"
"member:`~PyTypeObject.tp_traverse` implementation must name its arguments "
"exactly *visit* and *arg*:"
msgstr ""
"Для спрощення написання обробників :c:member:`~PyTypeObject.tp_traverse` "
"передбачено макрос :c:func:`Py_VISIT`. Щоб використовувати цей макрос, "
"реалізація :c:member:`~PyTypeObject.tp_traverse` має назвати свої аргументи "
"точно *visit* і *arg*:"

#: ../../c-api/gcsupport.rst:163
msgid ""
"If *o* is not ``NULL``, call the *visit* callback, with arguments *o* and "
"*arg*.  If *visit* returns a non-zero value, then return it. Using this "
"macro, :c:member:`~PyTypeObject.tp_traverse` handlers look like::"
msgstr ""
"Якщо *o* не є ``NULL``, викличте зворотній виклик *visit* з аргументами *o* "
"і *arg*. Якщо *visit* повертає ненульове значення, поверніть його. За "
"допомогою цього макросу обробники :c:member:`~PyTypeObject.tp_traverse` "
"виглядають так:"

#: ../../c-api/gcsupport.rst:176
msgid ""
"The :c:member:`~PyTypeObject.tp_clear` handler must be of the :c:type:"
"`inquiry` type, or ``NULL`` if the object is immutable."
msgstr ""
"Обробник :c:member:`~PyTypeObject.tp_clear` має бути типу :c:type:`inquiry` "
"або ``NULL``, якщо об’єкт є незмінним."

#: ../../c-api/gcsupport.rst:182
msgid ""
"Drop references that may have created reference cycles.  Immutable objects "
"do not have to define this method since they can never directly create "
"reference cycles.  Note that the object must still be valid after calling "
"this method (don't just call :c:func:`Py_DECREF` on a reference).  The "
"collector will call this method if it detects that this object is involved "
"in a reference cycle."
msgstr ""
"Видалити посилання, які могли створити цикли посилань. Незмінні об’єкти не "
"повинні визначати цей метод, оскільки вони ніколи не можуть безпосередньо "
"створювати еталонні цикли. Зауважте, що об’єкт все ще має бути дійсним після "
"виклику цього методу (не просто викликайте :c:func:`Py_DECREF` за "
"посиланням). Збирач викличе цей метод, якщо виявить, що цей об’єкт бере "
"участь у еталонному циклі."
