# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-08 02:53-0300\n"
"PO-Revision-Date: 2023-05-24 13:07+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/perfmaps.rst:6
msgid "Support for Perf Maps"
msgstr "Suporte a Mapas do Perf"

#: ../../c-api/perfmaps.rst:8
msgid ""
"On supported platforms (as of this writing, only Linux), the runtime can "
"take advantage of *perf map files* to make Python functions visible to an "
"external profiling tool (such as `perf <https://perf.wiki.kernel.org/index."
"php/Main_Page>`_). A running process may create a file in the ``/tmp`` "
"directory, which contains entries that can map a section of executable code "
"to a name. This interface is described in the `documentation of the Linux "
"Perf tool <https://git.kernel.org/pub/scm/linux/ kernel/git/torvalds/linux."
"git/tree/tools/perf/Documentation/jit-interface.txt>`_."
msgstr ""
"Em plataformas suportadas (no momento em que este livro foi escrito, apenas "
"Linux), o tempo de execução pode tirar vantagem dos *arquivos de mapa perf* "
"para tornar as funções Python visíveis para uma ferramenta de perfilação "
"externa (como `perf <https://perf.wiki.kernel.org/index.php/Main_Page>`_). "
"Um processo em execução pode criar um arquivo no diretório ``/tmp``, que "
"contém entradas que podem mapear uma seção de código executável para um "
"nome. Esta interface é descrita na `documentação da ferramenta Linux Perf "
"<https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/"
"tools/perf/Documentation/jit-interface.txt>`_."

#: ../../c-api/perfmaps.rst:16
msgid ""
"In Python, these helper APIs can be used by libraries and features that rely "
"on generating machine code on the fly."
msgstr ""
"Em Python, essas APIs auxiliares podem ser usadas por bibliotecas e recursos "
"que dependem da geração de código de máquina dinamicamente."

#: ../../c-api/perfmaps.rst:19
msgid ""
"Note that holding an :term:`attached thread state` is not required for these "
"APIs."
msgstr ""

#: ../../c-api/perfmaps.rst:23
msgid ""
"Open the ``/tmp/perf-$pid.map`` file, unless it's already opened, and create "
"a lock to ensure thread-safe writes to the file (provided the writes are "
"done through :c:func:`PyUnstable_WritePerfMapEntry`). Normally, there's no "
"need to call this explicitly; just use :c:func:"
"`PyUnstable_WritePerfMapEntry` and it will initialize the state on first "
"call."
msgstr ""
"Abre o arquivo ``/tmp/perf-$pid.map``, a menos que já esteja aberto, e cria "
"uma trava para garantir escritas seguras para thread no arquivo (desde que "
"as escritas sejam feitas através de :c:func:"
"`PyUnstable_WritePerfMapEntry` ). Normalmente, não há necessidade de chamar "
"isso explicitamente; basta usar :c:func:`PyUnstable_WritePerfMapEntry` e ele "
"inicializará o estado na primeira chamada."

#: ../../c-api/perfmaps.rst:29
msgid ""
"Returns ``0`` on success, ``-1`` on failure to create/open the perf map "
"file, or ``-2`` on failure to create a lock. Check ``errno`` for more "
"information about the cause of a failure."
msgstr ""
"Retorna ``0`` em caso de sucesso, ``-1`` em caso de falha ao criar/abrir o "
"arquivo de mapa de desempenho ou ``-2`` em caso de falha na criação de uma "
"trava. Verifique ``errno`` para mais informações sobre a causa de uma falha."

#: ../../c-api/perfmaps.rst:35
msgid ""
"Write one single entry to the ``/tmp/perf-$pid.map`` file. This function is "
"thread safe. Here is what an example entry looks like::"
msgstr ""
"Escreve uma única entrada no arquivo ``/tmp/perf-$pid.map``. Esta função é "
"segura para thread. Aqui está a aparência de um exemplo de entrada::"

#: ../../c-api/perfmaps.rst:38
msgid ""
"# address      size  name\n"
"7f3529fcf759 b     py::bar:/run/t.py"
msgstr ""
"# endereço  tamanho  nome\n"
"7f3529fcf759 b     py::bar:/run/t.py"

#: ../../c-api/perfmaps.rst:41
msgid ""
"Will call :c:func:`PyUnstable_PerfMapState_Init` before writing the entry, "
"if the perf map file is not already opened. Returns ``0`` on success, or the "
"same error codes as :c:func:`PyUnstable_PerfMapState_Init` on failure."
msgstr ""
"Chamará :c:func:`PyUnstable_PerfMapState_Init` antes de escrever a entrada, "
"se o arquivo de mapa de desempenho ainda não estiver aberto. Retorna ``0`` "
"em caso de sucesso ou os mesmos códigos de erro que :c:func:"
"`PyUnstable_PerfMapState_Init` em caso de falha."

#: ../../c-api/perfmaps.rst:47
msgid ""
"Close the perf map file opened by :c:func:`PyUnstable_PerfMapState_Init`. "
"This is called by the runtime itself during interpreter shut-down. In "
"general, there shouldn't be a reason to explicitly call this, except to "
"handle specific scenarios such as forking."
msgstr ""
"Fecha o arquivo de mapa do perf aberto por :c:func:"
"`PyUnstable_PerfMapState_Init`. Isso é chamado pelo próprio tempo de "
"execução durante o desligamento do interpretador. Em geral, não deve haver "
"motivo para chamar isso explicitamente, exceto para lidar com cenários "
"específicos, como bifurcação."
