# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Vitor Buxbaum Orlandi, 2021
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-22 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:50+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/typehints.rst:6
msgid "Objects for Type Hinting"
msgstr "Objetos de indicação de tipos"

#: ../../c-api/typehints.rst:8
msgid ""
"Various built-in types for type hinting are provided.  Currently, two types "
"exist -- :ref:`GenericAlias <types-genericalias>` and :ref:`Union <types-"
"union>`.  Only ``GenericAlias`` is exposed to C."
msgstr ""
"São fornecidos vários tipos embutidos para sugestão de tipo.  Atualmente, "
"dois tipos existem -- :ref:`GenericAlias <types-genericalias>` e :ref:`Union "
"<types-union>`.  Apenas ``GenericAlias`` está exposto ao C."

#: ../../c-api/typehints.rst:14
msgid ""
"Create a :ref:`GenericAlias <types-genericalias>` object. Equivalent to "
"calling the Python class :class:`types.GenericAlias`.  The *origin* and "
"*args* arguments set the ``GenericAlias``\\ 's ``__origin__`` and "
"``__args__`` attributes respectively. *origin* should be a :c:expr:"
"`PyTypeObject*`, and *args* can be a :c:expr:`PyTupleObject*` or any "
"``PyObject*``.  If *args* passed is not a tuple, a 1-tuple is automatically "
"constructed and ``__args__`` is set to ``(args,)``. Minimal checking is done "
"for the arguments, so the function will succeed even if *origin* is not a "
"type. The ``GenericAlias``\\ 's ``__parameters__`` attribute is constructed "
"lazily from ``__args__``.  On failure, an exception is raised and ``NULL`` "
"is returned."
msgstr ""
"Cria um objeto :ref:`GenericAlias ​<types-genericalias>`. Equivalente a "
"chamar a classe Python :class:`types.GenericAlias`. Os argumentos *origin* e "
"*args* definem os atributos ``__origin__`` e ``__args__`` de "
"``GenericAlias`` respectivamente. *origin* deve ser um :c:expr:"
"`PyTypeObject*`, e *args* pode ser um :c:expr:`PyTupleObject*` ou qualquer "
"``PyObject*``. Se *args* passado não for uma tupla, uma tupla de 1 elemento "
"é construída automaticamente e ``__args__`` é definido como ``(args,)``. A "
"verificação mínima é feita para os argumentos, então a função terá sucesso "
"mesmo se *origin* não for um tipo. O atributo ``__parameters__`` de "
"``GenericAlias`` é construído lentamente a partir de ``__args__``. Em caso "
"de falha, uma exceção é levantada e ``NULL`` é retornado."

#: ../../c-api/typehints.rst:28
msgid "Here's an example of how to make an extension type generic::"
msgstr "Aqui está um exemplo de como tornar um tipo de extensão genérico::"

#: ../../c-api/typehints.rst:30
msgid ""
"...\n"
"static PyMethodDef my_obj_methods[] = {\n"
"    // Other methods.\n"
"    ...\n"
"    {\"__class_getitem__\", Py_GenericAlias, METH_O|METH_CLASS, \"See PEP "
"585\"}\n"
"    ...\n"
"}"
msgstr ""
"...\n"
"static PyMethodDef my_obj_methods[] = {\n"
"    // Outros métodos.\n"
"    ...\n"
"    {\"__class_getitem__\", Py_GenericAlias, METH_O|METH_CLASS, \"Veja PEP "
"585\"}\n"
"    ...\n"
"}"

#: ../../c-api/typehints.rst:38
msgid "The data model method :meth:`~object.__class_getitem__`."
msgstr "O método de modelo de dados :meth:`~object.__class_getitem__`."

#: ../../c-api/typehints.rst:44
msgid ""
"The C type of the object returned by :c:func:`Py_GenericAlias`. Equivalent "
"to :class:`types.GenericAlias` in Python."
msgstr ""
"O tipo C do objeto retornado por :c:func:`Py_GenericAlias`. Equivalente a :"
"class:`types.GenericAlias` no Python."
