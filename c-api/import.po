# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-31 11:30+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/import.rst:6
msgid "Importing Modules"
msgstr "Importando módulos"

#: ../../c-api/import.rst:16
msgid ""
"This is a wrapper around :c:func:`PyImport_Import()` which takes a :c:expr:"
"`const char *` as an argument instead of a :c:expr:`PyObject *`."
msgstr ""

#: ../../c-api/import.rst:21
msgid "This function is a deprecated alias of :c:func:`PyImport_ImportModule`."
msgstr ""
"Esta função é um alias descontinuado de :c:func:`PyImport_ImportModule`."

#: ../../c-api/import.rst:23
msgid ""
"This function used to fail immediately when the import lock was held by "
"another thread.  In Python 3.3 though, the locking scheme switched to per-"
"module locks for most purposes, so this function's special behaviour isn't "
"needed anymore."
msgstr ""
"Essa função falhava em alguns casos, quando a trava de importação era "
"mantida por outra thread. No Python 3.3, no entanto, o esquema de trava "
"mudou passando a ser de travas por módulo na maior parte, dessa forma, o "
"comportamento especial dessa função não é mais necessário."

#: ../../c-api/import.rst:34
msgid ""
"Import a module.  This is best described by referring to the built-in Python "
"function :func:`__import__`."
msgstr ""
"Importa um módulo. Isso é melhor descrito referindo-se à função embutida do "
"Python :func:`__import__`."

#: ../../c-api/import.rst:37 ../../c-api/import.rst:53
msgid ""
"The return value is a new reference to the imported module or top-level "
"package, or ``NULL`` with an exception set on failure.  Like for :func:"
"`__import__`, the return value when a submodule of a package was requested "
"is normally the top-level package, unless a non-empty *fromlist* was given."
msgstr ""
"O valor de retorno é uma nova referência ao módulo importado ou pacote de "
"nível superior, ou ``NULL`` com uma exceção definida em caso de falha. Como "
"para :func:`__import__`, o valor de retorno quando um submódulo de um pacote "
"é solicitado é normalmente o pacote de nível superior, a menos que um "
"*fromlist* não vazio seja fornecido."

#: ../../c-api/import.rst:43
msgid ""
"Failing imports remove incomplete module objects, like with :c:func:"
"`PyImport_ImportModule`."
msgstr ""
"As importações com falhas removem objetos incompletos do módulo, como em :c:"
"func:`PyImport_ImportModule`."

#: ../../c-api/import.rst:49
msgid ""
"Import a module.  This is best described by referring to the built-in Python "
"function :func:`__import__`, as the standard :func:`__import__` function "
"calls this function directly."
msgstr ""
"Importa um módulo. Isso é melhor descrito referindo-se à função embutida do "
"Python :func:`__import__`, já que a função padrão :func:`__import__` chama "
"essa função diretamente."

#: ../../c-api/import.rst:63
msgid ""
"Similar to :c:func:`PyImport_ImportModuleLevelObject`, but the name is a "
"UTF-8 encoded string instead of a Unicode object."
msgstr ""
"Semelhante para :c:func:`PyImport_ImportModuleLevelObject`, mas o nome é uma "
"string codificada em UTF-8 de um objeto Unicode."

#: ../../c-api/import.rst:66
msgid "Negative values for *level* are no longer accepted."
msgstr "Valores negativos para *level* não são mais aceitos."

#: ../../c-api/import.rst:71
msgid ""
"This is a higher-level interface that calls the current \"import hook "
"function\" (with an explicit *level* of 0, meaning absolute import).  It "
"invokes the :func:`__import__` function from the ``__builtins__`` of the "
"current globals.  This means that the import is done using whatever import "
"hooks are installed in the current environment."
msgstr ""
"Essa é uma interface de alto nível que chama a atual \"função auxiliar de "
"importação\" (com um *level* explícito de 0, significando importação "
"absoluta). Invoca a função :func:`__import__` a partir de ``__builtins__`` "
"da global atual. Isso significa que a importação é feita usando quaisquer "
"extras de importação instalados no ambiente atual."

#: ../../c-api/import.rst:77
msgid "This function always uses absolute imports."
msgstr "Esta função sempre usa importações absolutas."

#: ../../c-api/import.rst:82
msgid ""
"Reload a module.  Return a new reference to the reloaded module, or ``NULL`` "
"with an exception set on failure (the module still exists in this case)."
msgstr ""
"Recarrega um módulo. Retorna uma nova referência para o módulo recarregado, "
"ou ``NULL`` com uma exceção definida em caso de falha (o módulo ainda existe "
"neste caso)."

#: ../../c-api/import.rst:88
msgid ""
"Return the module object corresponding to a module name.  The *name* "
"argument may be of the form ``package.module``. First check the modules "
"dictionary if there's one there, and if not, create a new one and insert it "
"in the modules dictionary. Return ``NULL`` with an exception set on failure."
msgstr ""
"Retorna o objeto módulo correspondente a um nome de módulo. O argumento "
"*name* pode ter a forma ``package.module``. Primeiro verifica o dicionário "
"de módulos se houver algum, caso contrário, cria um novo e insere-o no "
"dicionário de módulos. Retorna ``NULL`` com uma exceção definida em caso de "
"falha."

#: ../../c-api/import.rst:95
msgid ""
"This function does not load or import the module; if the module wasn't "
"already loaded, you will get an empty module object. Use :c:func:"
"`PyImport_ImportModule` or one of its variants to import a module.  Package "
"structures implied by a dotted name for *name* are not created if not "
"already present."
msgstr ""
"Esta função não carrega ou importa o módulo; se o módulo não foi carregado, "
"você receberá um objeto de módulo vazio. Use :c:func:`PyImport_ImportModule` "
"ou uma de suas variações para importar um módulo. Estruturas de pacotes "
"implícitos por um nome pontilhado para a *name* não são criados se não "
"estiverem presentes."

#: ../../c-api/import.rst:105
msgid ""
"Similar to :c:func:`PyImport_AddModuleObject`, but the name is a UTF-8 "
"encoded string instead of a Unicode object."
msgstr ""
"Semelhante para :c:func:`PyImport_AddModuleObject`, mas o nome é uma string "
"codifica em UTF-8 em vez de um objeto Unicode."

#: ../../c-api/import.rst:113
msgid ""
"Given a module name (possibly of the form ``package.module``) and a code "
"object read from a Python bytecode file or obtained from the built-in "
"function :func:`compile`, load the module.  Return a new reference to the "
"module object, or ``NULL`` with an exception set if an error occurred.  "
"*name* is removed from :data:`sys.modules` in error cases, even if *name* "
"was already in :data:`sys.modules` on entry to :c:func:"
"`PyImport_ExecCodeModule`.  Leaving incompletely initialized modules in :"
"data:`sys.modules` is dangerous, as imports of such modules have no way to "
"know that the module object is an unknown (and probably damaged with respect "
"to the module author's intents) state."
msgstr ""

#: ../../c-api/import.rst:123
msgid ""
"The module's :attr:`__spec__` and :attr:`__loader__` will be set, if not set "
"already, with the appropriate values.  The spec's loader will be set to the "
"module's ``__loader__`` (if set) and to an instance of :class:`~importlib."
"machinery.SourceFileLoader` otherwise."
msgstr ""

#: ../../c-api/import.rst:128
msgid ""
"The module's :attr:`__file__` attribute will be set to the code object's :"
"attr:`~codeobject.co_filename`.  If applicable, :attr:`__cached__` will also "
"be set."
msgstr ""

#: ../../c-api/import.rst:132
msgid ""
"This function will reload the module if it was already imported.  See :c:"
"func:`PyImport_ReloadModule` for the intended way to reload a module."
msgstr ""
"Esta função recarregará o módulo se este já tiver sido importado. Veja :c:"
"func:`PyImport_ReloadModule` para forma desejada de recarregar um módulo."

#: ../../c-api/import.rst:135
msgid ""
"If *name* points to a dotted name of the form ``package.module``, any "
"package structures not already created will still not be created."
msgstr ""
"Se *name* apontar para um nome pontilhado no formato de ``package.module``, "
"quaisquer estruturas de pacote ainda não criadas ainda não serão criadas."

#: ../../c-api/import.rst:138
msgid ""
"See also :c:func:`PyImport_ExecCodeModuleEx` and :c:func:"
"`PyImport_ExecCodeModuleWithPathnames`."
msgstr ""
"Veja também :c:func:`PyImport_ExecCodeModuleEx` e  :c:func:"
"`PyImport_ExecCodeModuleWithPathnames`."

#: ../../c-api/import.rst:141
msgid ""
"The setting of :attr:`__cached__` and :attr:`__loader__` is deprecated. See :"
"class:`~importlib.machinery.ModuleSpec` for alternatives."
msgstr ""

#: ../../c-api/import.rst:149
msgid ""
"Like :c:func:`PyImport_ExecCodeModule`, but the :attr:`__file__` attribute "
"of the module object is set to *pathname* if it is non-``NULL``."
msgstr ""
"Como :c:func:`PyImport_ExecCodeModule`, mas o atributo :attr:`__file__`  do "
"objeto módulo é definido como *pathname*  se não for ``NULL``."

#: ../../c-api/import.rst:152
msgid "See also :c:func:`PyImport_ExecCodeModuleWithPathnames`."
msgstr "Veja também :c:func:`PyImport_ExecCodeModuleWithPathnames`."

#: ../../c-api/import.rst:157
msgid ""
"Like :c:func:`PyImport_ExecCodeModuleEx`, but the :attr:`__cached__` "
"attribute of the module object is set to *cpathname* if it is non-``NULL``.  "
"Of the three functions, this is the preferred one to use."
msgstr ""
"Como :c:func:`PyImport_ExecCodeModuleEx`, mas o atributo :attr:`__cached__`  "
"do objeto módulo é definido como *cpathname*  se não for ``NULL``. Das três "
"funções, esta é a preferida para usar."

#: ../../c-api/import.rst:163
msgid ""
"Setting :attr:`__cached__` is deprecated. See :class:`~importlib.machinery."
"ModuleSpec` for alternatives."
msgstr ""

#: ../../c-api/import.rst:170
msgid ""
"Like :c:func:`PyImport_ExecCodeModuleObject`, but *name*, *pathname* and "
"*cpathname* are UTF-8 encoded strings. Attempts are also made to figure out "
"what the value for *pathname* should be from *cpathname* if the former is "
"set to ``NULL``."
msgstr ""
"Como :c:func:`PyImport_ExecCodeModuleObject`, mas *name*, *pathname* e "
"*cpathname* são strings codificadas em UTF-8. Também são feitas tentativas "
"para descobrir qual valor para *pathname* deve ser de *cpathname* se o "
"primeiro estiver definido como ``NULL``."

#: ../../c-api/import.rst:176
msgid ""
"Uses :func:`!imp.source_from_cache` in calculating the source path if only "
"the bytecode path is provided."
msgstr ""

#: ../../c-api/import.rst:179
msgid "No longer uses the removed :mod:`!imp` module."
msgstr ""

#: ../../c-api/import.rst:185
msgid ""
"Return the magic number for Python bytecode files (a.k.a. :file:`.pyc` "
"file). The magic number should be present in the first four bytes of the "
"bytecode file, in little-endian byte order. Returns ``-1`` on error."
msgstr ""
"Retorna o número mágico para arquivos de bytecode Python (também conhecido "
"como arquivo :file:`.pyc`). O número mágico deve estar presente nos "
"primeiros quatro bytes do arquivo bytecode, na ordem de bytes little-endian. "
"Retorna ``-1`` em caso de erro."

#: ../../c-api/import.rst:189
msgid "Return value of ``-1`` upon failure."
msgstr "Retorna o valor de ``-1`` no caso de falha."

#: ../../c-api/import.rst:195
msgid ""
"Return the magic tag string for :pep:`3147` format Python bytecode file "
"names.  Keep in mind that the value at ``sys.implementation.cache_tag`` is "
"authoritative and should be used instead of this function."
msgstr ""
"Retorna a string de tag mágica para nomes de arquivo de bytecode Python no "
"formato de :pep:`3147`. Tenha em mente que o valor em ``sys.implementation."
"cache_tag`` é autoritativo e deve ser usado no lugar desta função."

#: ../../c-api/import.rst:203
msgid ""
"Return the dictionary used for the module administration (a.k.a. ``sys."
"modules``).  Note that this is a per-interpreter variable."
msgstr ""
"Retorna o dicionário usado para a administração do módulo (também conhecido "
"como ``sys.modules``). Observe que esta é uma variável por interpretador."

#: ../../c-api/import.rst:208
msgid ""
"Return the already imported module with the given name.  If the module has "
"not been imported yet then returns ``NULL`` but does not set an error.  "
"Returns ``NULL`` and sets an error if the lookup failed."
msgstr ""
"Retorna o módulo já importado com o nome fornecido. Se o módulo ainda não "
"foi importado, retorna ``NULL``, mas não define um erro. Retorna ``NULL`` e "
"define um erro se a pesquisa falhar."

#: ../../c-api/import.rst:216
msgid ""
"Return a finder object for a :data:`sys.path`/:attr:`!pkg.__path__` item "
"*path*, possibly by fetching it from the :data:`sys.path_importer_cache` "
"dict.  If it wasn't yet cached, traverse :data:`sys.path_hooks` until a hook "
"is found that can handle the path item.  Return ``None`` if no hook could; "
"this tells our caller that the :term:`path based finder` could not find a "
"finder for this path item. Cache the result in :data:`sys."
"path_importer_cache`. Return a new reference to the finder object."
msgstr ""

#: ../../c-api/import.rst:227
msgid ""
"Load a frozen module named *name*.  Return ``1`` for success, ``0`` if the "
"module is not found, and ``-1`` with an exception set if the initialization "
"failed.  To access the imported module on a successful load, use :c:func:"
"`PyImport_ImportModule`.  (Note the misnomer --- this function would reload "
"the module if it was already imported.)"
msgstr ""
"Carrega um módulo congelado chamado *name*. Retorna ``1`` para sucesso, "
"``0`` se o módulo não for encontrado e ``-1`` com uma exceção definida se a "
"inicialização falhar. Para acessar o módulo importado em um carregamento bem-"
"sucedido, use :c:func:`PyImport_ImportModule`. (Observe o nome incorreto --- "
"esta função recarregaria o módulo se ele já tivesse sido importado.)"

#: ../../c-api/import.rst:235
msgid "The ``__file__`` attribute is no longer set on the module."
msgstr "O atributo ``__file__`` não está mais definido no módulo."

#: ../../c-api/import.rst:241
msgid ""
"Similar to :c:func:`PyImport_ImportFrozenModuleObject`, but the name is a "
"UTF-8 encoded string instead of a Unicode object."
msgstr ""
"Semelhante a :c:func:`PyImport_ImportFrozenModuleObject`, mas o nome é uma "
"string codificada em UTF-8 em vez de um objeto Unicode."

#: ../../c-api/import.rst:249
msgid ""
"This is the structure type definition for frozen module descriptors, as "
"generated by the :program:`freeze` utility (see :file:`Tools/freeze/` in the "
"Python source distribution).  Its definition, found in :file:`Include/import."
"h`, is::"
msgstr ""
"Esta é a definição do tipo de estrutura para descritores de módulo "
"congelados, conforme gerado pelo utilitário :program:`freeze` (veja :file:"
"`Tools/freeze/` na distribuição fonte do Python). Sua definição, encontrada "
"em :file:`Include/import.h`, é::"

#: ../../c-api/import.rst:254
msgid ""
"struct _frozen {\n"
"    const char *name;\n"
"    const unsigned char *code;\n"
"    int size;\n"
"    bool is_package;\n"
"};"
msgstr ""

#: ../../c-api/import.rst:261
msgid ""
"The new ``is_package`` field indicates whether the module is a package or "
"not. This replaces setting the ``size`` field to a negative value."
msgstr ""
"O novo campo ``is_package`` indica se o módulo é um pacote ou não. Isso "
"substitui a configuração do campo ``size`` para um valor negativo."

#: ../../c-api/import.rst:267
msgid ""
"This pointer is initialized to point to an array of :c:struct:`_frozen` "
"records, terminated by one whose members are all ``NULL`` or zero.  When a "
"frozen module is imported, it is searched in this table.  Third-party code "
"could play tricks with this to provide a dynamically created collection of "
"frozen modules."
msgstr ""
"Este ponteiro é inicializado para apontar para um vetor de registros de :c:"
"struct:`_frozen`, terminado por um cujos membros são todos ``NULL`` ou zero. "
"Quando um módulo congelado é importado, ele é pesquisado nesta tabela. O "
"código de terceiros pode fazer truques com isso para fornecer uma coleção "
"criada dinamicamente de módulos congelados."

#: ../../c-api/import.rst:275
msgid ""
"Add a single module to the existing table of built-in modules.  This is a "
"convenience wrapper around :c:func:`PyImport_ExtendInittab`, returning "
"``-1`` if the table could not be extended.  The new module can be imported "
"by the name *name*, and uses the function *initfunc* as the initialization "
"function called on the first attempted import.  This should be called "
"before :c:func:`Py_Initialize`."
msgstr ""
"Adiciona um único módulo à tabela existente de módulos embutidos. Este é um "
"invólucro prático em torno de :c:func:`PyImport_ExtendInittab`, retornando "
"``-1`` se a tabela não puder ser estendida. O novo módulo pode ser importado "
"pelo nome *name* e usa a função *initfunc* como a função de inicialização "
"chamada na primeira tentativa de importação. Deve ser chamado antes de :c:"
"func:`Py_Initialize`."

#: ../../c-api/import.rst:285
msgid ""
"Structure describing a single entry in the list of built-in modules. "
"Programs which embed Python may use an array of these structures in "
"conjunction with :c:func:`PyImport_ExtendInittab` to provide additional "
"built-in modules. The structure consists of two members:"
msgstr ""

#: ../../c-api/import.rst:293
msgid "The module name, as an ASCII encoded string."
msgstr ""

#: ../../c-api/import.rst:297
msgid "Initialization function for a module built into the interpreter."
msgstr ""

#: ../../c-api/import.rst:302
msgid ""
"Add a collection of modules to the table of built-in modules.  The *newtab* "
"array must end with a sentinel entry which contains ``NULL`` for the :c:"
"member:`~_inittab.name` field; failure to provide the sentinel value can "
"result in a memory fault. Returns ``0`` on success or ``-1`` if insufficient "
"memory could be allocated to extend the internal table.  In the event of "
"failure, no modules are added to the internal table.  This must be called "
"before :c:func:`Py_Initialize`."
msgstr ""

#: ../../c-api/import.rst:309
msgid ""
"If Python is initialized multiple times, :c:func:`PyImport_AppendInittab` "
"or :c:func:`PyImport_ExtendInittab` must be called before each Python "
"initialization."
msgstr ""
"Se Python é inicializado várias vezes, :c:func:`PyImport_AppendInittab` ou :"
"c:func:`PyImport_ExtendInittab` devem ser chamados antes de cada "
"inicialização do Python."

#: ../../c-api/import.rst:11
msgid "package variable"
msgstr ""

#: ../../c-api/import.rst:11
msgid "__all__"
msgstr "__all__"

#: ../../c-api/import.rst:11
msgid "__all__ (package variable)"
msgstr ""

#: ../../c-api/import.rst:11
msgid "modules (in module sys)"
msgstr ""

#: ../../c-api/import.rst:32 ../../c-api/import.rst:111
msgid "built-in function"
msgstr "função embutida"

#: ../../c-api/import.rst:32
msgid "__import__"
msgstr ""

#: ../../c-api/import.rst:111
msgid "compile"
msgstr "compile"

#: ../../c-api/import.rst:247
msgid "freeze utility"
msgstr ""
