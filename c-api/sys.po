# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Italo Penaforte <italo.penaforte@gmail.com>, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:51+0000\n"
"Last-Translator: Italo Penaforte <italo.penaforte@gmail.com>, 2019\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../c-api/sys.rst:6
msgid "Operating System Utilities"
msgstr "Utilitários do Sistema Operacional"

#: ../../c-api/sys.rst:10
msgid ""
"Return the file system representation for *path*. If the object is a :class:"
"`str` or :class:`bytes` object, then its reference count is incremented. If "
"the object implements the :class:`os.PathLike` interface, then :meth:`~os."
"PathLike.__fspath__` is returned as long as it is a :class:`str` or :class:"
"`bytes` object. Otherwise :exc:`TypeError` is raised and ``NULL`` is "
"returned."
msgstr ""

#: ../../c-api/sys.rst:22
msgid ""
"Return true (nonzero) if the standard I/O file *fp* with name *filename* is "
"deemed interactive.  This is the case for files for which "
"``isatty(fileno(fp))`` is true.  If the global flag :c:data:"
"`Py_InteractiveFlag` is true, this function also returns true if the "
"*filename* pointer is *NULL* or if the name is equal to one of the strings "
"``'<stdin>'`` or ``'???'``."
msgstr ""
"Retornar verdadeiro (diferente de zero) se o arquivo de I/O padrão * fp * "
"com o nome *filename* for considerado interativo. Este é o caso dos arquivos "
"para os quais `` isatty (fileno (fp)) `` é verdade. Se o sinalizador global: "
"c: data: `Py_InteractiveFlag` é verdadeiro, esta função também retorna true "
"se o apontador * filename * for * NULL * ou se o nome for igual a uma das "
"strings` `'<stdin>'` ` Ou `` '???' ``."

#: ../../c-api/sys.rst:31
msgid ""
"Function to update some internal state after a process fork; this should be "
"called in the new process if the Python interpreter will continue to be "
"used. If a new executable is loaded into the new process, this function does "
"not need to be called."
msgstr ""
"Função para atualizar algum estado interno após um processo de garfo; Isso "
"deve ser chamado no novo processo se o intérprete do Python continuar a ser "
"usado. Se um novo executável é carregado no novo processo, esta função não "
"precisa ser chamada."

#: ../../c-api/sys.rst:39
msgid ""
"Return true when the interpreter runs out of stack space.  This is a "
"reliable check, but is only available when :const:`USE_STACKCHECK` is "
"defined (currently on Windows using the Microsoft Visual C++ compiler).  :"
"const:`USE_STACKCHECK` will be defined automatically; you should never "
"change the definition in your own code."
msgstr ""
"Retornar verdadeiro quando o intérprete ficar sem espaço de pilha. Esta é "
"uma verificação confiável, mas só está disponível quando: const: "
"`USE_STACKCHECK` está definido (atualmente no Windows usando o compilador "
"Microsoft Visual C ++). : Const: `USE_STACKCHECK` será definido "
"automaticamente; Você nunca deve mudar a definição em seu próprio código."

#: ../../c-api/sys.rst:48
msgid ""
"Return the current signal handler for signal *i*.  This is a thin wrapper "
"around either :c:func:`sigaction` or :c:func:`signal`.  Do not call those "
"functions directly! :c:type:`PyOS_sighandler_t` is a typedef alias for :c:"
"type:`void (\\*)(int)`."
msgstr ""
"Retorna o manipulador de sinal atual para o sinal * i *. Este é um invólucro "
"fino em torno de: c: func: `sigaction` ou: c: func:` signal`. Não ligue para "
"essas funções diretamente! : C: digite: `PyOS_sighandler_t` é um alias de "
"typedef para: c: digite:` void (\\ *) (int) `."

#: ../../c-api/sys.rst:56
msgid ""
"Set the signal handler for signal *i* to be *h*; return the old signal "
"handler. This is a thin wrapper around either :c:func:`sigaction` or :c:func:"
"`signal`.  Do not call those functions directly!  :c:type:"
"`PyOS_sighandler_t` is a typedef alias for :c:type:`void (\\*)(int)`."
msgstr ""
"Defina o manipulador de sinal para que o sinal * i * seja * h *; Devolva o "
"antigo manipulador de sinal. Este é um invólucro fino em torno de: c: func: "
"`sigaction` ou: c: func:` signal`. Não ligue para essas funções "
"diretamente! : C: digite: `PyOS_sighandler_t` é um alias de typedef para: c: "
"digite:` void (\\ *) (int) `."

#: ../../c-api/sys.rst:63
msgid ""
"Decode a byte string from the locale encoding with the :ref:`surrogateescape "
"error handler <surrogateescape>`: undecodable bytes are decoded as "
"characters in range U+DC80..U+DCFF. If a byte sequence can be decoded as a "
"surrogate character, escape the bytes using the surrogateescape error "
"handler instead of decoding them."
msgstr ""

#: ../../c-api/sys.rst:69 ../../c-api/sys.rst:106
msgid "Encoding, highest priority to lowest priority:"
msgstr ""

#: ../../c-api/sys.rst:71 ../../c-api/sys.rst:108
msgid "``UTF-8`` on macOS and Android;"
msgstr ""

#: ../../c-api/sys.rst:72
msgid ""
"``ASCII`` if the ``LC_CTYPE`` locale is ``\"C\"``, ``nl_langinfo(CODESET)`` "
"returns the ``ASCII`` encoding (or an alias), and :c:func:`mbstowcs` and :c:"
"func:`wcstombs` functions use the ``ISO-8859-1`` encoding."
msgstr ""

#: ../../c-api/sys.rst:76
msgid "the current locale encoding (``LC_CTYPE`` locale)."
msgstr ""

#: ../../c-api/sys.rst:78
msgid ""
"Return a pointer to a newly allocated wide character string, use :c:func:"
"`PyMem_RawFree` to free the memory. If size is not ``NULL``, write the "
"number of wide characters excluding the null character into ``*size``."
msgstr ""

#: ../../c-api/sys.rst:82
msgid ""
"Return ``NULL`` on decoding error or memory allocation error. If *size* is "
"not ``NULL``, ``*size`` is set to ``(size_t)-1`` on memory error or set to "
"``(size_t)-2`` on decoding error."
msgstr ""
"Retorna ``NULL`` em erro de decodificação ou erro de alocação de memória. Se "
"*size* não for ``NULL``, ``*size`` é definido como ``(size_t)-1`` em erro de "
"memória ou definido como ``(size_t)-2`` em erro de decodificação."

#: ../../c-api/sys.rst:86
msgid ""
"Decoding errors should never happen, unless there is a bug in the C library."
msgstr ""
"Erros de decodificação nunca devem acontecer, a menos que haja um bug na "
"biblioteca C."

#: ../../c-api/sys.rst:89
msgid ""
"Use the :c:func:`Py_EncodeLocale` function to encode the character string "
"back to a byte string."
msgstr ""
"Use a função :c:func:`Py_EncodeLocale` para codificar a string de caracteres "
"de volta para uma string de bytes."

#: ../../c-api/sys.rst:94
msgid ""
"The :c:func:`PyUnicode_DecodeFSDefaultAndSize` and :c:func:"
"`PyUnicode_DecodeLocaleAndSize` functions."
msgstr ""
"As funções :c:func:`PyUnicode_DecodeFSDefaultAndSize` e :c:func:"
"`PyUnicode_DecodeLocaleAndSize`."

#: ../../c-api/sys.rst:102
msgid ""
"Encode a wide character string to the locale encoding with the :ref:"
"`surrogateescape error handler <surrogateescape>`: surrogate characters in "
"the range U+DC80..U+DCFF are converted to bytes 0x80..0xFF."
msgstr ""

#: ../../c-api/sys.rst:109
msgid ""
"``ASCII`` if the ``LC_CTYPE`` locale is ``\"C\"``, ``nl_langinfo(CODESET)`` "
"returns the ``ASCII`` encoding (or an alias), and :c:func:`mbstowcs` and :c:"
"func:`wcstombs` functions uses the ``ISO-8859-1`` encoding."
msgstr ""

#: ../../c-api/sys.rst:113
msgid "the current locale encoding."
msgstr ""

#: ../../c-api/sys.rst:115
msgid ""
"Return a pointer to a newly allocated byte string, use :c:func:`PyMem_Free` "
"to free the memory. Return ``NULL`` on encoding error or memory allocation "
"error"
msgstr ""

#: ../../c-api/sys.rst:119
msgid ""
"If error_pos is not ``NULL``, ``*error_pos`` is set to the index of the "
"invalid character on encoding error, or set to ``(size_t)-1`` otherwise."
msgstr ""

#: ../../c-api/sys.rst:122
msgid ""
"Use the :c:func:`Py_DecodeLocale` function to decode the bytes string back "
"to a wide character string."
msgstr ""

#: ../../c-api/sys.rst:127
msgid ""
"The :c:func:`PyUnicode_EncodeFSDefault` and :c:func:`PyUnicode_EncodeLocale` "
"functions."
msgstr ""

#: ../../c-api/sys.rst:136
msgid "System Functions"
msgstr ""

#: ../../c-api/sys.rst:138
msgid ""
"These are utility functions that make functionality from the :mod:`sys` "
"module accessible to C code.  They all work with the current interpreter "
"thread's :mod:`sys` module's dict, which is contained in the internal thread "
"state structure."
msgstr ""

#: ../../c-api/sys.rst:144
msgid ""
"Return the object *name* from the :mod:`sys` module or *NULL* if it does not "
"exist, without setting an exception."
msgstr ""

#: ../../c-api/sys.rst:149
msgid ""
"Set *name* in the :mod:`sys` module to *v* unless *v* is *NULL*, in which "
"case *name* is deleted from the sys module. Returns ``0`` on success, ``-1`` "
"on error."
msgstr ""

#: ../../c-api/sys.rst:155
msgid "Reset :data:`sys.warnoptions` to an empty list."
msgstr ""

#: ../../c-api/sys.rst:159
msgid "Append *s* to :data:`sys.warnoptions`."
msgstr ""

#: ../../c-api/sys.rst:163
msgid "Append *unicode* to :data:`sys.warnoptions`."
msgstr ""

#: ../../c-api/sys.rst:167
msgid ""
"Set :data:`sys.path` to a list object of paths found in *path* which should "
"be a list of paths separated with the platform's search path delimiter (``:"
"`` on Unix, ``;`` on Windows)."
msgstr ""

#: ../../c-api/sys.rst:173
msgid ""
"Write the output string described by *format* to :data:`sys.stdout`.  No "
"exceptions are raised, even if truncation occurs (see below)."
msgstr ""

#: ../../c-api/sys.rst:176
msgid ""
"*format* should limit the total size of the formatted output string to 1000 "
"bytes or less -- after 1000 bytes, the output string is truncated. In "
"particular, this means that no unrestricted \"%s\" formats should occur; "
"these should be limited using \"%.<N>s\" where <N> is a decimal number "
"calculated so that <N> plus the maximum size of other formatted text does "
"not exceed 1000 bytes.  Also watch out for \"%f\", which can print hundreds "
"of digits for very large numbers."
msgstr ""

#: ../../c-api/sys.rst:184
msgid ""
"If a problem occurs, or :data:`sys.stdout` is unset, the formatted message "
"is written to the real (C level) *stdout*."
msgstr ""

#: ../../c-api/sys.rst:189
msgid ""
"As :c:func:`PySys_WriteStdout`, but write to :data:`sys.stderr` or *stderr* "
"instead."
msgstr ""

#: ../../c-api/sys.rst:194
msgid ""
"Function similar to PySys_WriteStdout() but format the message using :c:func:"
"`PyUnicode_FromFormatV` and don't truncate the message to an arbitrary "
"length."
msgstr ""

#: ../../c-api/sys.rst:202
msgid ""
"As :c:func:`PySys_FormatStdout`, but write to :data:`sys.stderr` or *stderr* "
"instead."
msgstr ""

#: ../../c-api/sys.rst:209
msgid ""
"Parse *s* as a set of :option:`-X` options and add them to the current "
"options mapping as returned by :c:func:`PySys_GetXOptions`."
msgstr ""

#: ../../c-api/sys.rst:216
msgid ""
"Return the current dictionary of :option:`-X` options, similarly to :data:"
"`sys._xoptions`.  On error, *NULL* is returned and an exception is set."
msgstr ""

#: ../../c-api/sys.rst:226
msgid "Process Control"
msgstr ""

#: ../../c-api/sys.rst:233
msgid ""
"Print a fatal error message and kill the process.  No cleanup is performed. "
"This function should only be invoked when a condition is detected that would "
"make it dangerous to continue using the Python interpreter; e.g., when the "
"object administration appears to be corrupted.  On Unix, the standard C "
"library function :c:func:`abort` is called which will attempt to produce a :"
"file:`core` file."
msgstr ""

#: ../../c-api/sys.rst:247
msgid ""
"Exit the current process.  This calls :c:func:`Py_FinalizeEx` and then calls "
"the standard C library function ``exit(status)``.  If :c:func:"
"`Py_FinalizeEx` indicates an error, the exit status is set to 120."
msgstr ""

#: ../../c-api/sys.rst:251
msgid "Errors from finalization no longer ignored."
msgstr ""

#: ../../c-api/sys.rst:261
msgid ""
"Register a cleanup function to be called by :c:func:`Py_FinalizeEx`.  The "
"cleanup function will be called with no arguments and should return no "
"value.  At most 32 cleanup functions can be registered.  When the "
"registration is successful, :c:func:`Py_AtExit` returns ``0``; on failure, "
"it returns ``-1``.  The cleanup function registered last is called first. "
"Each cleanup function will be called at most once.  Since Python's internal "
"finalization will have completed before the cleanup function, no Python APIs "
"should be called by *func*."
msgstr ""
