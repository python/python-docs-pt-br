# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Welington Carlos <wcarlos3@gmail.com>, 2021
# Felipefpl, 2021
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-14 14:13+0000\n"
"PO-Revision-Date: 2021-06-28 00:47+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/allocation.rst:6
msgid "Allocating Objects on the Heap"
msgstr "Alocando Objetos na Pilha"

#: ../../c-api/allocation.rst:17
msgid ""
"Initialize a newly allocated object *op* with its type and initial "
"reference.  Returns the initialized object.  If *type* indicates that the "
"object participates in the cyclic garbage detector, it is added to the "
"detector's set of observed objects. Other fields of the object are not "
"affected."
msgstr ""
"Inicializa um objeto *op* recém-alocado com seu tipo e referência inicial.  "
"Retorna o objeto inicializado. Se o *type* indica que o objeto participa no "
"detector de lixo cíclico ele é adicionado ao grupo do detector de objetos "
"observados. Outros campos do objeto não são afetados."

#: ../../c-api/allocation.rst:26
msgid ""
"This does everything :c:func:`PyObject_Init` does, and also initializes the "
"length information for a variable-size object."
msgstr ""
"Isto faz tudo que o :c:func:`PyObject_Init` faz e também inicializa a "
"informação de comprimento para um objeto de tamanho variável."

#: ../../c-api/allocation.rst:32
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object header "
"are not initialized; the object's reference count will be one.  The size of "
"the memory allocation is determined from the :c:member:`~PyTypeObject."
"tp_basicsize` field of the type object."
msgstr ""
"Aloca um novo objeto Python usando o tipo de estrutura do C *TYPE* e o "
"objeto Python do tipo *type*. Campos não definidos pelo cabeçalho do objeto "
"Python não são inicializados; a contagem de referências do objeto será um. O "
"tamanho da alocação de memória é determinado do campo :c:member:"
"`~PyTypeObject.tp_basicsize` do objeto tipo."

#: ../../c-api/allocation.rst:41
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object header "
"are not initialized.  The allocated memory allows for the *TYPE* structure "
"plus *size* fields of the size given by the :c:member:`~PyTypeObject."
"tp_itemsize` field of *type*.  This is useful for implementing objects like "
"tuples, which are able to determine their size at construction time.  "
"Embedding the array of fields into the same allocation decreases the number "
"of allocations, improving the memory management efficiency."
msgstr ""
"Aloca um novo objeto Python usando o tipo de estrutura do C *TYPE* e o "
"objeto Python do tipo *type*. Campos não definidos pelo cabeçalho do objeto "
"Python não são inicializados. A memória alocada permite a estrutura *TYPE* e "
"os campos *size* do tamanho dado pelo campo :c:member:`~PyTypeObject."
"tp_itemsize` do tipo *type*. Isto é útil para implementar objetos como "
"tuplas, as quais são capazes de determinar seu tamanho no tempo da "
"construção. Incorporando o vetor de campos dentro da mesma alocação "
"diminuindo o numero de alocações, melhorando a eficiência do gerenciamento "
"de memória."

#: ../../c-api/allocation.rst:53
msgid ""
"Releases memory allocated to an object using :c:func:`PyObject_New` or :c:"
"func:`PyObject_NewVar`.  This is normally called from the :c:member:"
"`~PyTypeObject.tp_dealloc` handler specified in the object's type.  The "
"fields of the object should not be accessed after this call as the memory is "
"no longer a valid Python object."
msgstr ""
"Libera memória alocada a um objeto usando :c:func:`PyObject_New` ou :c:func:"
"`PyObject_NewVar`. Isto é normalmente chamado pelo :c:member:`~PyTypeObject."
"tp_dealloc` manipulador especificado no tipo do objeto. Os campos do objeto "
"não devem ser acessados após esta chamada como a memória não é mais um "
"objeto Python válido."

#: ../../c-api/allocation.rst:62
msgid ""
"Object which is visible in Python as ``None``.  This should only be accessed "
"using the :c:macro:`Py_None` macro, which evaluates to a pointer to this "
"object."
msgstr ""
"Objeto o qual é visível no Python como ``None``. Isto só deve ser acessado "
"usando a macro :c:macro:`Py_None`, o qual avalia como um ponteiro para este "
"objeto."

#: ../../c-api/allocation.rst:69
msgid ":c:func:`PyModule_Create`"
msgstr ":c:func:`PyModule_Create`"

#: ../../c-api/allocation.rst:70
msgid "To allocate and create extension modules."
msgstr "Para alocar e criar módulos de extensão."
