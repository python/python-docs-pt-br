# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2024
# Italo Penaforte <italo.penaforte@gmail.com>, 2024
# Vitor Buxbaum Orlandi, 2024
# Rodrigo Cândido, 2024
# Hélio Júnior <hb2araujo@gmail.com>, 2024
# Vinícius Muniz de Melo <viniciusdesk@icloud.com>, 2024
# Marco Rougeth <marco@rougeth.com>, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-16 17:24+0000\n"
"PO-Revision-Date: 2020-05-30 11:49+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/init_config.rst:7
msgid "Python Initialization Configuration"
msgstr "Configuração de Inicialização do Python"

#: ../../c-api/init_config.rst:11
msgid "Structures:"
msgstr "Estruturas:"

#: ../../c-api/init_config.rst:13
msgid ":c:type:`PyConfig`"
msgstr ":c:type:`PyConfig`"

#: ../../c-api/init_config.rst:14
msgid ":c:type:`PyPreConfig`"
msgstr ":c:type:`PyPreConfig`"

#: ../../c-api/init_config.rst:15
msgid ":c:type:`PyStatus`"
msgstr ":c:type:`PyStatus`"

#: ../../c-api/init_config.rst:16
msgid ":c:type:`PyWideStringList`"
msgstr ":c:type:`PyWideStringList`"

#: ../../c-api/init_config.rst:18
msgid "Functions:"
msgstr "Funções:"

#: ../../c-api/init_config.rst:20
msgid ":c:func:`PyConfig_Clear`"
msgstr ":c:func:`PyConfig_Clear`"

#: ../../c-api/init_config.rst:21
msgid ":c:func:`PyConfig_InitIsolatedConfig`"
msgstr ":c:func:`PyConfig_InitIsolatedConfig`"

#: ../../c-api/init_config.rst:22
msgid ":c:func:`PyConfig_InitPythonConfig`"
msgstr ":c:func:`PyConfig_InitPythonConfig`"

#: ../../c-api/init_config.rst:23
msgid ":c:func:`PyConfig_Read`"
msgstr ":c:func:`PyConfig_Read`"

#: ../../c-api/init_config.rst:24
msgid ":c:func:`PyConfig_SetArgv`"
msgstr ":c:func:`PyConfig_SetArgv`"

#: ../../c-api/init_config.rst:25
msgid ":c:func:`PyConfig_SetBytesArgv`"
msgstr ":c:func:`PyConfig_SetBytesArgv`"

#: ../../c-api/init_config.rst:26
msgid ":c:func:`PyConfig_SetBytesString`"
msgstr ":c:func:`PyConfig_SetBytesString`"

#: ../../c-api/init_config.rst:27
msgid ":c:func:`PyConfig_SetString`"
msgstr ":c:func:`PyConfig_SetString`"

#: ../../c-api/init_config.rst:28
msgid ":c:func:`PyConfig_SetWideStringList`"
msgstr ":c:func:`PyConfig_SetWideStringList`"

#: ../../c-api/init_config.rst:29
msgid ":c:func:`PyPreConfig_InitIsolatedConfig`"
msgstr ":c:func:`PyPreConfig_InitIsolatedConfig`"

#: ../../c-api/init_config.rst:30
msgid ":c:func:`PyPreConfig_InitPythonConfig`"
msgstr ":c:func:`PyPreConfig_InitPythonConfig`"

#: ../../c-api/init_config.rst:31
msgid ":c:func:`PyStatus_Error`"
msgstr ":c:func:`PyStatus_Error`"

#: ../../c-api/init_config.rst:32
msgid ":c:func:`PyStatus_Exception`"
msgstr ":c:func:`PyStatus_Exception`"

#: ../../c-api/init_config.rst:33
msgid ":c:func:`PyStatus_Exit`"
msgstr ":c:func:`PyStatus_Exit`"

#: ../../c-api/init_config.rst:34
msgid ":c:func:`PyStatus_IsError`"
msgstr ":c:func:`PyStatus_IsError`"

#: ../../c-api/init_config.rst:35
msgid ":c:func:`PyStatus_IsExit`"
msgstr ":c:func:`PyStatus_IsExit`"

#: ../../c-api/init_config.rst:36
msgid ":c:func:`PyStatus_NoMemory`"
msgstr ":c:func:`PyStatus_NoMemory`"

#: ../../c-api/init_config.rst:37
msgid ":c:func:`PyStatus_Ok`"
msgstr ":c:func:`PyStatus_Ok`"

#: ../../c-api/init_config.rst:38
msgid ":c:func:`PyWideStringList_Append`"
msgstr ":c:func:`PyWideStringList_Append`"

#: ../../c-api/init_config.rst:39
msgid ":c:func:`PyWideStringList_Insert`"
msgstr ":c:func:`PyWideStringList_Insert`"

#: ../../c-api/init_config.rst:40
msgid ":c:func:`Py_ExitStatusException`"
msgstr ":c:func:`Py_ExitStatusException`"

#: ../../c-api/init_config.rst:41
msgid ":c:func:`Py_InitializeFromConfig`"
msgstr ":c:func:`Py_InitializeFromConfig`"

#: ../../c-api/init_config.rst:42
msgid ":c:func:`Py_PreInitialize`"
msgstr ":c:func:`Py_PreInitialize`"

#: ../../c-api/init_config.rst:43
msgid ":c:func:`Py_PreInitializeFromArgs`"
msgstr ":c:func:`Py_PreInitializeFromArgs`"

#: ../../c-api/init_config.rst:44
msgid ":c:func:`Py_PreInitializeFromBytesArgs`"
msgstr ":c:func:`Py_PreInitializeFromBytesArgs`"

#: ../../c-api/init_config.rst:45
msgid ":c:func:`Py_RunMain`"
msgstr ":c:func:`Py_RunMain`"

#: ../../c-api/init_config.rst:47
msgid ""
"The preconfiguration (``PyPreConfig`` type) is stored in "
"``_PyRuntime.preconfig`` and the configuration (``PyConfig`` type) is stored "
"in ``PyInterpreterState.config``."
msgstr ""
"A pré-configuração (tipo ``PyPreConfig``) é armazenado em "
"``_PyRuntime.preconfig`` e a configuração (tipo ``PyConfig``) é armazenado "
"em ``PyInterpreterState.config``."

#: ../../c-api/init_config.rst:51
msgid ""
"See also :ref:`Initialization, Finalization, and Threads <initialization>`."
msgstr ""
"Veja também :ref:`Inicialização, Finalização e Threads <initialization>`."

#: ../../c-api/init_config.rst:54
msgid ":pep:`587` \"Python Initialization Configuration\"."
msgstr ":pep:`587` \"Configuração da inicialização do Python\"."

#: ../../c-api/init_config.rst:58
msgid "PyWideStringList"
msgstr "PyWideStringList"

#: ../../c-api/init_config.rst:62
msgid "List of ``wchar_t*`` strings."
msgstr "Lista de strings ``wchar_t*``."

#: ../../c-api/init_config.rst:64
msgid ""
"If *length* is non-zero, *items* must be non-``NULL`` and all strings must "
"be non-``NULL``."
msgstr ""
"Se *length* é diferente de zero, *items* deve ser diferente de ``NULL`` e "
"todas as strings devem ser diferentes de ``NULL``."

#: ../../c-api/init_config.rst:67
msgid "Methods:"
msgstr "Métodos:"

#: ../../c-api/init_config.rst:71
msgid "Append *item* to *list*."
msgstr "Anexa *item* a *list*."

#: ../../c-api/init_config.rst:73 ../../c-api/init_config.rst:84
msgid "Python must be preinitialized to call this function."
msgstr "Python deve ser inicializado previamente antes de chamar essa função."

#: ../../c-api/init_config.rst:77
msgid "Insert *item* into *list* at *index*."
msgstr "Insere *item* na *list* na posição *index*."

#: ../../c-api/init_config.rst:79
msgid ""
"If *index* is greater than or equal to *list* length, append *item* to "
"*list*."
msgstr ""
"Se *index* for maior ou igual ao comprimento da *list*, anexa o *item* a "
"*list*."

#: ../../c-api/init_config.rst:82
msgid "*index* must be greater than or equal to 0."
msgstr "*index* deve ser maior que ou igual a 0."

#: ../../c-api/init_config.rst:86 ../../c-api/init_config.rst:106
#: ../../c-api/init_config.rst:209 ../../c-api/init_config.rst:416
msgid "Structure fields:"
msgstr "Campos de estrutura:"

#: ../../c-api/init_config.rst:90
msgid "List length."
msgstr "Comprimento da lista."

#: ../../c-api/init_config.rst:94
msgid "List items."
msgstr "Itens da lista."

#: ../../c-api/init_config.rst:97
msgid "PyStatus"
msgstr "PyStatus"

#: ../../c-api/init_config.rst:101
msgid ""
"Structure to store an initialization function status: success, error or exit."
msgstr ""
"Estrutura para armazenar o status de uma função de inicialização: sucesso, "
"erro ou saída."

#: ../../c-api/init_config.rst:104
msgid "For an error, it can store the C function name which created the error."
msgstr "Para um erro, ela pode armazenar o nome da função C que criou o erro."

#: ../../c-api/init_config.rst:110
msgid "Exit code. Argument passed to ``exit()``."
msgstr "Código de saída. Argumento passado para ``exit()``."

#: ../../c-api/init_config.rst:114
msgid "Error message."
msgstr "Mensagem de erro."

#: ../../c-api/init_config.rst:118
msgid "Name of the function which created an error, can be ``NULL``."
msgstr "Nome da função que criou um erro. Pode ser ``NULL``."

#: ../../c-api/init_config.rst:120
msgid "Functions to create a status:"
msgstr "Funções para criar um status:"

#: ../../c-api/init_config.rst:124
msgid "Success."
msgstr "Sucesso."

#: ../../c-api/init_config.rst:128
msgid "Initialization error with a message."
msgstr "Erro de inicialização com uma mensagem."

#: ../../c-api/init_config.rst:132
msgid "Memory allocation failure (out of memory)."
msgstr "Falha de alocação de memória (sem memória)."

#: ../../c-api/init_config.rst:136
msgid "Exit Python with the specified exit code."
msgstr "Sai do Python com o código de saída especificado."

#: ../../c-api/init_config.rst:138
msgid "Functions to handle a status:"
msgstr "Funções para manipular um status:"

#: ../../c-api/init_config.rst:142
msgid ""
"Is the status an error or an exit? If true, the exception must be handled; "
"by calling :c:func:`Py_ExitStatusException` for example."
msgstr ""
"O status é um erro ou uma saída? Se verdadeiro, a exceção deve ser tratada; "
"chamando :c:func:`Py_ExitStatusException`, por exemplo."

#: ../../c-api/init_config.rst:147
msgid "Is the result an error?"
msgstr "O resultado é um erro?"

#: ../../c-api/init_config.rst:151
msgid "Is the result an exit?"
msgstr "O resultado é uma saída?"

#: ../../c-api/init_config.rst:155
msgid ""
"Call ``exit(exitcode)`` if *status* is an exit. Print the error message and "
"exit with a non-zero exit code if *status* is an error.  Must only be called "
"if ``PyStatus_Exception(status)`` is non-zero."
msgstr ""
"Chama ``exit(exitcode)`` se *status* for uma saída. Exibe a mensagem de erro "
"e sai com um código de saída diferente de zero se *status* for um erro. Deve "
"ser chamado apenas se ``PyStatus_Exception(status)`` for diferente de zero."

#: ../../c-api/init_config.rst:160
msgid ""
"Internally, Python uses macros which set ``PyStatus.func``, whereas "
"functions to create a status set ``func`` to ``NULL``."
msgstr ""
"Internamente, Python usa macros que definem ``PyStatus.func``, enquanto "
"funções para criar um status definem ``func`` para ``NULL``."

#: ../../c-api/init_config.rst:163
msgid "Example::"
msgstr "Exemplo::"

#: ../../c-api/init_config.rst:187
msgid "PyPreConfig"
msgstr "PyPreConfig"

#: ../../c-api/init_config.rst:191
msgid "Structure used to preinitialize Python:"
msgstr "Estrutura usada para pré-inicializar o Python:"

#: ../../c-api/init_config.rst:193
msgid "Set the Python memory allocator"
msgstr "Define o alocador de memória do Python"

#: ../../c-api/init_config.rst:194
msgid "Configure the LC_CTYPE locale"
msgstr "Configura a localidade LC_CTYPE"

#: ../../c-api/init_config.rst:195
msgid "Set the UTF-8 mode"
msgstr "Define o modo UTF-8"

#: ../../c-api/init_config.rst:197
msgid "Function to initialize a preconfiguration:"
msgstr "A função para inicializar uma pré-configuração:"

#: ../../c-api/init_config.rst:201
msgid ""
"Initialize the preconfiguration with :ref:`Python Configuration <init-python-"
"config>`."
msgstr ""
"Inicializa a pré-configuração com :ref:`Configuração do Python <init-python-"
"config>`."

#: ../../c-api/init_config.rst:206
msgid ""
"Initialize the preconfiguration with :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr ""
"Inicializa a pré-configuração com :ref:`Configuração isolada <init-isolated-"
"conf>`."

#: ../../c-api/init_config.rst:213
msgid "Name of the memory allocator:"
msgstr "Nome do alocador de memória:"

#: ../../c-api/init_config.rst:215
msgid ""
"``PYMEM_ALLOCATOR_NOT_SET`` (``0``): don't change memory allocators (use "
"defaults)"
msgstr ""
"``PYMEM_ALLOCATOR_NOT_SET`` (``0``): não altera os alocadores de memória "
"(usa o padrão)"

#: ../../c-api/init_config.rst:217
msgid "``PYMEM_ALLOCATOR_DEFAULT`` (``1``): default memory allocators"
msgstr "``PYMEM_ALLOCATOR_DEFAULT`` (``1``): alocadores de memória padrão"

#: ../../c-api/init_config.rst:218
msgid ""
"``PYMEM_ALLOCATOR_DEBUG`` (``2``): default memory allocators with debug hooks"
msgstr ""
"``PYMEM_ALLOCATOR_DEBUG`` (``2``): alocadores de memória padrão com ganchos "
"de depuração"

#: ../../c-api/init_config.rst:220
msgid "``PYMEM_ALLOCATOR_MALLOC`` (``3``): force usage of ``malloc()``"
msgstr "``PYMEM_ALLOCATOR_MALLOC`` (``3``): força o uso de ``malloc()``"

#: ../../c-api/init_config.rst:221
msgid ""
"``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): force usage of ``malloc()`` with "
"debug hooks"
msgstr ""
"``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): força o uso de ``malloc()`` com "
"ganchos de depuração"

#: ../../c-api/init_config.rst:223
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` (``5``): :ref:`Python pymalloc memory allocator "
"<pymalloc>`"
msgstr ""
"``PYMEM_ALLOCATOR_PYMALLOC`` (``5``): :ref:`Alocador de memória do Python "
"pymalloc <pymalloc>`"

#: ../../c-api/init_config.rst:225
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` (``6``): :ref:`Python pymalloc memory "
"allocator <pymalloc>` with debug hooks"
msgstr ""
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` (``6``): :ref:`alocador de memória do "
"Python pymalloc <pymalloc>` com ganchos de depuração"

#: ../../c-api/init_config.rst:228
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` and ``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` are not "
"supported if Python is configured using ``--without-pymalloc``"
msgstr ""
"``PYMEM_ALLOCATOR_PYMALLOC`` e ``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` não são "
"suportados se Python estiver configurado usando ``--without-pymalloc``"

#: ../../c-api/init_config.rst:231
msgid "See :ref:`Memory Management <memory>`."
msgstr "Veja :ref:`Gerenciamento de memória <memory>`."

#: ../../c-api/init_config.rst:235
msgid ""
"Set the LC_CTYPE locale to the user preferred locale? If equals to 0, "
"set :c:member:`coerce_c_locale` and :c:member:`coerce_c_locale_warn` to 0."
msgstr ""
"Definir a localidade LC_CTYPE para a localidade preferida do usuário? Se for "
"igual a 0, define :c:member:`coerce_c_locale` "
"e :c:member:`coerce_c_locale_warn` para 0."

#: ../../c-api/init_config.rst:240
msgid ""
"If equals to 2, coerce the C locale; if equals to 1, read the LC_CTYPE "
"locale to decide if it should be coerced."
msgstr ""
"Se for igual a 2, força a localidade C; se for igual a 1, lê a localidade "
"LC_CTYPE para decidir se deve ser forçado."

#: ../../c-api/init_config.rst:245
msgid "If non-zero, emit a warning if the C locale is coerced."
msgstr "Se diferente de zero, emite um aviso se a localidade C for forçada."

#: ../../c-api/init_config.rst:249
msgid "See :c:member:`PyConfig.dev_mode`."
msgstr "Veja :c:member:`PyConfig.dev_mode`."

#: ../../c-api/init_config.rst:253
msgid "See :c:member:`PyConfig.isolated`."
msgstr "Veja :c:member:`PyConfig.isolated`."

#: ../../c-api/init_config.rst:257
msgid ""
"If non-zero, disable UTF-8 Mode, set the Python filesystem encoding to "
"``mbcs``, set the filesystem error handler to ``replace``."
msgstr ""
"Se diferente de zero, desabilita o modo UTF-8, define a codificação do "
"sistema de arquivos Python para ``mbcs``, define o tratador de erros do "
"sistema de arquivos para ``replace``."

#: ../../c-api/init_config.rst:260 ../../c-api/init_config.rst:546
msgid ""
"Only available on Windows. ``#ifdef MS_WINDOWS`` macro can be used for "
"Windows specific code."
msgstr ""
"Disponível apenas no Windows. A macro ``#ifdef MS_WINDOWS`` pode ser usada "
"para código específico do Windows."

#: ../../c-api/init_config.rst:265
msgid ""
"If non-zero, :c:func:`Py_PreInitializeFromArgs` "
"and :c:func:`Py_PreInitializeFromBytesArgs` parse their ``argv`` argument "
"the same way the regular Python parses command line arguments: "
"see :ref:`Command Line Arguments <using-on-cmdline>`."
msgstr ""
"Se diferente de zero, :c:func:`Py_PreInitializeFromArgs` "
"e :c:func:`Py_PreInitializeFromBytesArgs` analisam seu argumento ``argv`` da "
"mesma forma que o Python regular analisa argumentos de linha de comando: "
"veja :ref:`Argumentos de linha de comando <using-on-cmdline>`."

#: ../../c-api/init_config.rst:272
msgid "See :c:member:`PyConfig.use_environment`."
msgstr "Veja :c:member:`PyConfig.use_environment`."

#: ../../c-api/init_config.rst:276
msgid "If non-zero, enable the UTF-8 mode."
msgstr "Se não zero, habilita o modo UTF-8."

#: ../../c-api/init_config.rst:279
msgid "Preinitialization with PyPreConfig"
msgstr ""

#: ../../c-api/init_config.rst:281
msgid "Functions to preinitialize Python:"
msgstr "Funções para pré-inicializar Python:"

#: ../../c-api/init_config.rst:285
msgid "Preinitialize Python from *preconfig* preconfiguration."
msgstr "Pré-inicializa o Python a partir da pré-configuração *preconfig*."

#: ../../c-api/init_config.rst:289
msgid ""
"Preinitialize Python from *preconfig* preconfiguration and command line "
"arguments (bytes strings)."
msgstr ""

#: ../../c-api/init_config.rst:294
msgid ""
"Preinitialize Python from *preconfig* preconfiguration and command line "
"arguments (wide strings)."
msgstr ""

#: ../../c-api/init_config.rst:297 ../../c-api/init_config.rst:715
msgid ""
"The caller is responsible to handle exceptions (error or exit) "
"using :c:func:`PyStatus_Exception` and :c:func:`Py_ExitStatusException`."
msgstr ""
"O chamador é responsável por manipular exceções (erro ou saída) "
"usando :c:func:`PyStatus_Exception` e :c:func:`Py_ExitStatusException`."

#: ../../c-api/init_config.rst:300
msgid ""
"For :ref:`Python Configuration <init-python-config>` "
"(:c:func:`PyPreConfig_InitPythonConfig`), if Python is initialized with "
"command line arguments, the command line arguments must also be passed to "
"preinitialize Python, since they have an effect on the pre-configuration "
"like encodings. For example, the :option:`-X utf8 <-X>` command line option "
"enables the UTF-8 Mode."
msgstr ""

#: ../../c-api/init_config.rst:307
msgid ""
"``PyMem_SetAllocator()`` can be called after :c:func:`Py_PreInitialize` and "
"before :c:func:`Py_InitializeFromConfig` to install a custom memory "
"allocator. It can be called before :c:func:`Py_PreInitialize` "
"if :c:member:`PyPreConfig.allocator` is set to ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr ""
"``PyMem_SetAllocator()`` pode ser chamado depois "
"de :c:func:`Py_PreInitialize` e antes de :c:func:`Py_InitializeFromConfig` "
"para instalar um alocador de memória personalizado. Ele pode ser chamado "
"antes de :c:func:`Py_PreInitialize` se :c:member:`PyPreConfig.allocator` "
"estiver definido como ``PYMEM_ALLOCATOR_NOT_SET``."

#: ../../c-api/init_config.rst:312
msgid ""
"Python memory allocation functions like :c:func:`PyMem_RawMalloc` must not "
"be used before Python preinitialization, whereas calling directly "
"``malloc()`` and ``free()`` is always safe. :c:func:`Py_DecodeLocale` must "
"not be called before the preinitialization."
msgstr ""

#: ../../c-api/init_config.rst:317
msgid "Example using the preinitialization to enable the UTF-8 Mode::"
msgstr ""

#: ../../c-api/init_config.rst:338
msgid "PyConfig"
msgstr "PyConfig"

#: ../../c-api/init_config.rst:342
msgid "Structure containing most parameters to configure Python."
msgstr "Estrutura contendo a maioria dos parâmetros para configurar o Python."

#: ../../c-api/init_config.rst:344
msgid "Structure methods:"
msgstr ""

#: ../../c-api/init_config.rst:348
msgid ""
"Initialize configuration with :ref:`Python Configuration <init-python-"
"config>`."
msgstr ""

#: ../../c-api/init_config.rst:353
msgid ""
"Initialize configuration with :ref:`Isolated Configuration <init-isolated-"
"conf>`."
msgstr ""

#: ../../c-api/init_config.rst:358
msgid "Copy the wide character string *str* into ``*config_str``."
msgstr ""

#: ../../c-api/init_config.rst:360 ../../c-api/init_config.rst:366
#: ../../c-api/init_config.rst:372 ../../c-api/init_config.rst:378
#: ../../c-api/init_config.rst:384 ../../c-api/init_config.rst:392
msgid "Preinitialize Python if needed."
msgstr ""

#: ../../c-api/init_config.rst:364
msgid ""
"Decode *str* using ``Py_DecodeLocale()`` and set the result into "
"``*config_str``."
msgstr ""

#: ../../c-api/init_config.rst:370
msgid "Set command line arguments from wide character strings."
msgstr ""

#: ../../c-api/init_config.rst:376
msgid ""
"Set command line arguments: decode bytes using :c:func:`Py_DecodeLocale`."
msgstr ""

#: ../../c-api/init_config.rst:382
msgid "Set the list of wide strings *list* to *length* and *items*."
msgstr ""

#: ../../c-api/init_config.rst:388
msgid "Read all Python configuration."
msgstr ""

#: ../../c-api/init_config.rst:390
msgid "Fields which are already initialized are left unchanged."
msgstr ""

#: ../../c-api/init_config.rst:396
msgid "Release configuration memory."
msgstr ""

#: ../../c-api/init_config.rst:398
msgid ""
"Most ``PyConfig`` methods preinitialize Python if needed. In that case, the "
"Python preinitialization configuration in based on the :c:type:`PyConfig`. "
"If configuration fields which are in common with :c:type:`PyPreConfig` are "
"tuned, they must be set before calling a :c:type:`PyConfig` method:"
msgstr ""

#: ../../c-api/init_config.rst:403
msgid ":c:member:`~PyConfig.dev_mode`"
msgstr ":c:member:`~PyConfig.dev_mode`"

#: ../../c-api/init_config.rst:404
msgid ":c:member:`~PyConfig.isolated`"
msgstr ":c:member:`~PyConfig.isolated`"

#: ../../c-api/init_config.rst:405
msgid ":c:member:`~PyConfig.parse_argv`"
msgstr ":c:member:`~PyConfig.parse_argv`"

#: ../../c-api/init_config.rst:406
msgid ":c:member:`~PyConfig.use_environment`"
msgstr ":c:member:`~PyConfig.use_environment`"

#: ../../c-api/init_config.rst:408
msgid ""
"Moreover, if :c:func:`PyConfig_SetArgv` or :c:func:`PyConfig_SetBytesArgv` "
"is used, this method must be called first, before other methods, since the "
"preinitialization configuration depends on command line arguments "
"(if :c:member:`parse_argv` is non-zero)."
msgstr ""

#: ../../c-api/init_config.rst:413
msgid ""
"The caller of these methods is responsible to handle exceptions (error or "
"exit) using ``PyStatus_Exception()`` and ``Py_ExitStatusException()``."
msgstr ""

#: ../../c-api/init_config.rst:420
msgid ""
"Command line arguments, :data:`sys.argv`. "
"See :c:member:`~PyConfig.parse_argv` to parse :c:member:`~PyConfig.argv` the "
"same way the regular Python parses Python command line arguments. "
"If :c:member:`~PyConfig.argv` is empty, an empty string is added to ensure "
"that :data:`sys.argv` always exists and is never empty."
msgstr ""

#: ../../c-api/init_config.rst:428
msgid ":data:`sys.base_exec_prefix`."
msgstr ":data:`sys.base_exec_prefix`."

#: ../../c-api/init_config.rst:432
msgid ""
":data:`sys._base_executable`: ``__PYVENV_LAUNCHER__`` environment variable "
"value, or copy of :c:member:`PyConfig.executable`."
msgstr ""

#: ../../c-api/init_config.rst:437
msgid ":data:`sys.base_prefix`."
msgstr ":data:`sys.base_prefix`."

#: ../../c-api/init_config.rst:441
msgid ""
"If equals to 0, enable unbuffered mode, making the stdout and stderr streams "
"unbuffered."
msgstr ""

#: ../../c-api/init_config.rst:444
msgid "stdin is always opened in buffered mode."
msgstr ""

#: ../../c-api/init_config.rst:448
msgid ""
"If equals to 1, issue a warning when comparing :class:`bytes` "
"or :class:`bytearray` with :class:`str`, or comparing :class:`bytes` "
"with :class:`int`. If equal or greater to 2, raise a :exc:`BytesWarning` "
"exception."
msgstr ""

#: ../../c-api/init_config.rst:455
msgid ""
"Control the validation behavior of hash-based ``.pyc`` files "
"(see :pep:`552`): :option:`--check-hash-based-pycs` command line option "
"value."
msgstr ""

#: ../../c-api/init_config.rst:458
msgid "Valid values: ``always``, ``never`` and ``default``."
msgstr ""

#: ../../c-api/init_config.rst:460
msgid "The default value is: ``default``."
msgstr ""

#: ../../c-api/init_config.rst:464
msgid ""
"If non-zero, configure C standard streams (``stdio``, ``stdout``, "
"``stdout``). For example, set their mode to ``O_BINARY`` on Windows."
msgstr ""

#: ../../c-api/init_config.rst:469
msgid "Development mode: see :option:`-X dev <-X>`."
msgstr ""

#: ../../c-api/init_config.rst:473
msgid "If non-zero, dump all objects which are still alive at exit."
msgstr ""

#: ../../c-api/init_config.rst:475
msgid ""
"Require a debug build of Python (``Py_REF_DEBUG`` macro must be defined)."
msgstr ""

#: ../../c-api/init_config.rst:479
msgid ":data:`sys.exec_prefix`."
msgstr ":data:`sys.exec_prefix`."

#: ../../c-api/init_config.rst:483
msgid ":data:`sys.executable`."
msgstr ":data:`sys.executable`."

#: ../../c-api/init_config.rst:487
msgid "If non-zero, call :func:`faulthandler.enable` at startup."
msgstr ""

#: ../../c-api/init_config.rst:491
msgid "Filesystem encoding, :func:`sys.getfilesystemencoding`."
msgstr ""

#: ../../c-api/init_config.rst:495
msgid "Filesystem encoding errors, :func:`sys.getfilesystemencodeerrors`."
msgstr ""

#: ../../c-api/init_config.rst:500
msgid "Randomized hash function seed."
msgstr ""

#: ../../c-api/init_config.rst:502
msgid ""
"If :c:member:`~PyConfig.use_hash_seed` is zero, a seed is chosen randomly at "
"Pythonstartup, and :c:member:`~PyConfig.hash_seed` is ignored."
msgstr ""

#: ../../c-api/init_config.rst:507
msgid "Python home directory."
msgstr ""

#: ../../c-api/init_config.rst:509
msgid ""
"Initialized from :envvar:`PYTHONHOME` environment variable value by default."
msgstr ""

#: ../../c-api/init_config.rst:514
msgid "If non-zero, profile import time."
msgstr ""

#: ../../c-api/init_config.rst:518
msgid "Enter interactive mode after executing a script or a command."
msgstr ""

#: ../../c-api/init_config.rst:522
msgid "Install signal handlers?"
msgstr ""

#: ../../c-api/init_config.rst:526
msgid "Interactive mode."
msgstr ""

#: ../../c-api/init_config.rst:530
msgid "If greater than 0, enable isolated mode:"
msgstr ""

#: ../../c-api/init_config.rst:532
msgid ""
":data:`sys.path` contains neither the script's directory (computed from "
"``argv[0]`` or the current directory) nor the user's site-packages directory."
msgstr ""

#: ../../c-api/init_config.rst:535
msgid ""
"Python REPL doesn't import :mod:`readline` nor enable default readline "
"configuration on interactive prompts."
msgstr ""

#: ../../c-api/init_config.rst:537
msgid ""
"Set :c:member:`~PyConfig.use_environment` "
"and :c:member:`~PyConfig.user_site_directory` to 0."
msgstr ""

#: ../../c-api/init_config.rst:542
msgid ""
"If non-zero, use :class:`io.FileIO` instead of :class:`io.WindowsConsoleIO` "
"for :data:`sys.stdin`, :data:`sys.stdout` and :data:`sys.stderr`."
msgstr ""

#: ../../c-api/init_config.rst:551
msgid ""
"If non-zero, dump statistics on :ref:`Python pymalloc memory allocator "
"<pymalloc>` at exit."
msgstr ""

#: ../../c-api/init_config.rst:554
msgid "The option is ignored if Python is built using ``--without-pymalloc``."
msgstr ""

#: ../../c-api/init_config.rst:558
msgid ""
"Module search paths as a string separated by ``DELIM`` "
"(:data:`os.path.pathsep`)."
msgstr ""

#: ../../c-api/init_config.rst:561
msgid ""
"Initialized from :envvar:`PYTHONPATH` environment variable value by default."
msgstr ""

#: ../../c-api/init_config.rst:567
msgid ""
":data:`sys.path`. If :c:member:`~PyConfig.module_search_paths_set` is equal "
"to 0, the :c:member:`~PyConfig.module_search_paths` is overridden by the "
"function calculating the :ref:`Path Configuration <init-path-config>`."
msgstr ""

#: ../../c-api/init_config.rst:574
msgid "Compilation optimization level:"
msgstr ""

#: ../../c-api/init_config.rst:576
msgid "0: Peephole optimizer (and ``__debug__`` is set to ``True``)"
msgstr ""

#: ../../c-api/init_config.rst:577
msgid "1: Remove assertions, set ``__debug__`` to ``False``"
msgstr ""

#: ../../c-api/init_config.rst:578
msgid "2: Strip docstrings"
msgstr ""

#: ../../c-api/init_config.rst:582
msgid ""
"If non-zero, parse :c:member:`~PyConfig.argv` the same way the regular "
"Python command line arguments, and strip Python arguments "
"from :c:member:`~PyConfig.argv`: see :ref:`Command Line Arguments <using-on-"
"cmdline>`."
msgstr ""

#: ../../c-api/init_config.rst:589
msgid ""
"If non-zero, turn on parser debugging output (for expert only, depending on "
"compilation options)."
msgstr ""

#: ../../c-api/init_config.rst:594
msgid ""
"If equal to 0, suppress warnings when calculating the :ref:`Path "
"Configuration <init-path-config>` (Unix only, Windows does not log any "
"warning). Otherwise, warnings are written into ``stderr``."
msgstr ""

#: ../../c-api/init_config.rst:600
msgid ":data:`sys.prefix`."
msgstr ""

#: ../../c-api/init_config.rst:604
msgid ""
"Program name. Used to initialize :c:member:`~PyConfig.executable`, and in "
"early error messages."
msgstr ""

#: ../../c-api/init_config.rst:609
msgid ":data:`sys.pycache_prefix`: ``.pyc`` cache prefix."
msgstr ""

#: ../../c-api/init_config.rst:611
msgid "If ``NULL``, :data:`sys.pycache_prefix` is set to ``None``."
msgstr ""

#: ../../c-api/init_config.rst:615
msgid ""
"Quiet mode. For example, don't display the copyright and version messages in "
"interactive mode."
msgstr ""

#: ../../c-api/init_config.rst:620
msgid "``python3 -c COMMAND`` argument. Used by :c:func:`Py_RunMain`."
msgstr ""

#: ../../c-api/init_config.rst:624
msgid "``python3 FILENAME`` argument. Used by :c:func:`Py_RunMain`."
msgstr ""

#: ../../c-api/init_config.rst:628
msgid "``python3 -m MODULE`` argument. Used by :c:func:`Py_RunMain`."
msgstr ""

#: ../../c-api/init_config.rst:632
msgid "Show allocation counts at exit?"
msgstr ""

#: ../../c-api/init_config.rst:634
msgid "Set to 1 by :option:`-X showalloccount <-X>` command line option."
msgstr ""

#: ../../c-api/init_config.rst:636
msgid "Need a special Python build with ``COUNT_ALLOCS`` macro defined."
msgstr ""

#: ../../c-api/init_config.rst:640
msgid "Show total reference count at exit?"
msgstr ""

#: ../../c-api/init_config.rst:642
msgid "Set to 1 by :option:`-X showrefcount <-X>` command line option."
msgstr ""

#: ../../c-api/init_config.rst:644
msgid "Need a debug build of Python (``Py_REF_DEBUG`` macro must be defined)."
msgstr ""

#: ../../c-api/init_config.rst:648
msgid "Import the :mod:`site` module at startup?"
msgstr ""

#: ../../c-api/init_config.rst:652
msgid "Skip the first line of the source?"
msgstr ""

#: ../../c-api/init_config.rst:657
msgid ""
"Encoding and encoding errors of :data:`sys.stdin`, :data:`sys.stdout` "
"and :data:`sys.stderr`."
msgstr ""

#: ../../c-api/init_config.rst:662
msgid "If non-zero, call :func:`tracemalloc.start` at startup."
msgstr ""

#: ../../c-api/init_config.rst:666
msgid "If greater than 0, use :ref:`environment variables <using-on-envvars>`."
msgstr ""

#: ../../c-api/init_config.rst:670
msgid "If non-zero, add user site directory to :data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:674
msgid "If non-zero, enable verbose mode."
msgstr ""

#: ../../c-api/init_config.rst:678
msgid ""
":data:`sys.warnoptions`: options of the :mod:`warnings` module to build "
"warnings filters: lowest to highest priority."
msgstr ""

#: ../../c-api/init_config.rst:681
msgid ""
"The :mod:`warnings` module adds :data:`sys.warnoptions` in the reverse "
"order: the last :c:member:`PyConfig.warnoptions` item becomes the first item "
"of :data:`warnings.filters` which is checked first (highest priority)."
msgstr ""

#: ../../c-api/init_config.rst:688
msgid "If non-zero, write ``.pyc`` files."
msgstr ""

#: ../../c-api/init_config.rst:690
msgid ""
":data:`sys.dont_write_bytecode` is initialized to the inverted value "
"of :c:member:`~PyConfig.write_bytecode`."
msgstr ""

#: ../../c-api/init_config.rst:695
msgid ":data:`sys._xoptions`."
msgstr ""

#: ../../c-api/init_config.rst:697
msgid ""
"If ``parse_argv`` is non-zero, ``argv`` arguments are parsed the same way "
"the regular Python parses command line arguments, and Python arguments are "
"stripped from ``argv``: see :ref:`Command Line Arguments <using-on-cmdline>`."
msgstr ""

#: ../../c-api/init_config.rst:702
msgid ""
"The ``xoptions`` options are parsed to set other options: see :option:`-X` "
"option."
msgstr ""

#: ../../c-api/init_config.rst:707
msgid "Initialization with PyConfig"
msgstr ""

#: ../../c-api/init_config.rst:709
msgid "Function to initialize Python:"
msgstr ""

#: ../../c-api/init_config.rst:713
msgid "Initialize Python from *config* configuration."
msgstr ""

#: ../../c-api/init_config.rst:718
msgid ""
"If ``PyImport_FrozenModules``, ``PyImport_AppendInittab()`` or "
"``PyImport_ExtendInittab()`` are used, they must be set or called after "
"Python preinitialization and before the Python initialization."
msgstr ""

#: ../../c-api/init_config.rst:722
msgid "Example setting the program name::"
msgstr ""

#: ../../c-api/init_config.rst:750
msgid ""
"More complete example modifying the default configuration, read the "
"configuration, and then override some parameters::"
msgstr ""

#: ../../c-api/init_config.rst:801
msgid "Isolated Configuration"
msgstr ""

#: ../../c-api/init_config.rst:803
msgid ""
":c:func:`PyPreConfig_InitIsolatedConfig` "
"and :c:func:`PyConfig_InitIsolatedConfig` functions create a configuration "
"to isolate Python from the system. For example, to embed Python into an "
"application."
msgstr ""

#: ../../c-api/init_config.rst:808
msgid ""
"This configuration ignores global configuration variables, environments "
"variables, command line arguments (:c:member:`PyConfig.argv` is not parsed) "
"and user site directory. The C standard streams (ex: ``stdout``) and the "
"LC_CTYPE locale are left unchanged. Signal handlers are not installed."
msgstr ""

#: ../../c-api/init_config.rst:813
msgid ""
"Configuration files are still used with this configuration. Set "
"the :ref:`Path Configuration <init-path-config>` (\"output fields\") to "
"ignore these configuration files and avoid the function computing the "
"default path configuration."
msgstr ""

#: ../../c-api/init_config.rst:822
msgid "Python Configuration"
msgstr "Configuração do Python"

#: ../../c-api/init_config.rst:824
msgid ""
":c:func:`PyPreConfig_InitPythonConfig` "
"and :c:func:`PyConfig_InitPythonConfig` functions create a configuration to "
"build a customized Python which behaves as the regular Python."
msgstr ""

#: ../../c-api/init_config.rst:828
msgid ""
"Environments variables and command line arguments are used to configure "
"Python, whereas global configuration variables are ignored."
msgstr ""

#: ../../c-api/init_config.rst:831
msgid ""
"This function enables C locale coercion (:pep:`538`) and UTF-8 Mode "
"(:pep:`540`) depending on the LC_CTYPE locale, :envvar:`PYTHONUTF8` "
"and :envvar:`PYTHONCOERCECLOCALE` environment variables."
msgstr ""

#: ../../c-api/init_config.rst:835
msgid "Example of customized Python always running in isolated mode::"
msgstr ""
"Exemplo de Python personalizado sendo executado sempre em um modo isolado:"

#: ../../c-api/init_config.rst:874
msgid "Path Configuration"
msgstr ""

#: ../../c-api/init_config.rst:876
msgid ":c:type:`PyConfig` contains multiple fields for the path configuration:"
msgstr ""

#: ../../c-api/init_config.rst:878
msgid "Path configuration inputs:"
msgstr ""

#: ../../c-api/init_config.rst:880
msgid ":c:member:`PyConfig.home`"
msgstr ":c:member:`PyConfig.home`"

#: ../../c-api/init_config.rst:881
msgid ":c:member:`PyConfig.pathconfig_warnings`"
msgstr ":c:member:`PyConfig.pathconfig_warnings`"

#: ../../c-api/init_config.rst:882
msgid ":c:member:`PyConfig.program_name`"
msgstr ":c:member:`PyConfig.program_name`"

#: ../../c-api/init_config.rst:883
msgid ":c:member:`PyConfig.pythonpath_env`"
msgstr ":c:member:`PyConfig.pythonpath_env`"

#: ../../c-api/init_config.rst:884
msgid "current working directory: to get absolute paths"
msgstr ""

#: ../../c-api/init_config.rst:885
msgid ""
"``PATH`` environment variable to get the program full path "
"(from :c:member:`PyConfig.program_name`)"
msgstr ""

#: ../../c-api/init_config.rst:887
msgid "``__PYVENV_LAUNCHER__`` environment variable"
msgstr ""

#: ../../c-api/init_config.rst:888
msgid ""
"(Windows only) Application paths in the registry under "
"\"Software\\Python\\PythonCore\\X.Y\\PythonPath\" of HKEY_CURRENT_USER and "
"HKEY_LOCAL_MACHINE (where X.Y is the Python version)."
msgstr ""

#: ../../c-api/init_config.rst:892
msgid "Path configuration output fields:"
msgstr ""

#: ../../c-api/init_config.rst:894
msgid ":c:member:`PyConfig.base_exec_prefix`"
msgstr ":c:member:`PyConfig.base_exec_prefix`"

#: ../../c-api/init_config.rst:895
msgid ":c:member:`PyConfig.base_executable`"
msgstr ":c:member:`PyConfig.base_executable`"

#: ../../c-api/init_config.rst:896
msgid ":c:member:`PyConfig.base_prefix`"
msgstr ":c:member:`PyConfig.base_prefix`"

#: ../../c-api/init_config.rst:897
msgid ":c:member:`PyConfig.exec_prefix`"
msgstr ":c:member:`PyConfig.exec_prefix`"

#: ../../c-api/init_config.rst:898
msgid ":c:member:`PyConfig.executable`"
msgstr ":c:member:`PyConfig.executable`"

#: ../../c-api/init_config.rst:899
msgid ":c:member:`PyConfig.module_search_paths_set`, :c:member:`PyConfig.module_search_paths`"
msgstr ":c:member:`PyConfig.module_search_paths_set`, :c:member:`PyConfig.module_search_paths`"

#: ../../c-api/init_config.rst:901
msgid ":c:member:`PyConfig.prefix`"
msgstr ":c:member:`PyConfig.prefix`"

#: ../../c-api/init_config.rst:903
msgid ""
"If at least one \"output field\" is not set, Python calculates the path "
"configuration to fill unset fields. "
"If :c:member:`~PyConfig.module_search_paths_set` is equal to "
"0, :c:member:`~PyConfig.module_search_paths` is overridden "
"and :c:member:`~PyConfig.module_search_paths_set` is set to 1."
msgstr ""

#: ../../c-api/init_config.rst:909
msgid ""
"It is possible to completely ignore the function calculating the default "
"path configuration by setting explicitly all path configuration output "
"fields listed above. A string is considered as set even if it is non-empty. "
"``module_search_paths`` is considered as set if ``module_search_paths_set`` "
"is set to 1. In this case, path configuration input fields are ignored as "
"well."
msgstr ""

#: ../../c-api/init_config.rst:916
msgid ""
"Set :c:member:`~PyConfig.pathconfig_warnings` to 0 to suppress warnings when "
"calculating the path configuration (Unix only, Windows does not log any "
"warning)."
msgstr ""

#: ../../c-api/init_config.rst:919
msgid ""
"If :c:member:`~PyConfig.base_prefix` "
"or :c:member:`~PyConfig.base_exec_prefix` fields are not set, they inherit "
"their value from :c:member:`~PyConfig.prefix` "
"and :c:member:`~PyConfig.exec_prefix` respectively."
msgstr ""

#: ../../c-api/init_config.rst:923
msgid ":c:func:`Py_RunMain` and :c:func:`Py_Main` modify :data:`sys.path`:"
msgstr ""

#: ../../c-api/init_config.rst:925
msgid ""
"If :c:member:`~PyConfig.run_filename` is set and is a directory which "
"contains a ``__main__.py`` script, "
"prepend :c:member:`~PyConfig.run_filename` to :data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:928
msgid "If :c:member:`~PyConfig.isolated` is zero:"
msgstr ""

#: ../../c-api/init_config.rst:930
msgid ""
"If :c:member:`~PyConfig.run_module` is set, prepend the current directory "
"to :data:`sys.path`. Do nothing if the current directory cannot be read."
msgstr ""

#: ../../c-api/init_config.rst:932
msgid ""
"If :c:member:`~PyConfig.run_filename` is set, prepend the directory of the "
"filename to :data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:934
msgid "Otherwise, prepend an empty string to :data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:936
msgid ""
"If :c:member:`~PyConfig.site_import` is non-zero, :data:`sys.path` can be "
"modified by the :mod:`site` module. "
"If :c:member:`~PyConfig.user_site_directory` is non-zero and the user's site-"
"package directory exists, the :mod:`site` module appends the user's site-"
"package directory to :data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:942
msgid "The following configuration files are used by the path configuration:"
msgstr ""

#: ../../c-api/init_config.rst:944
msgid "``pyvenv.cfg``"
msgstr "``pyvenv.cfg``"

#: ../../c-api/init_config.rst:945
msgid "``python._pth`` (Windows only)"
msgstr ""

#: ../../c-api/init_config.rst:946
msgid "``pybuilddir.txt`` (Unix only)"
msgstr ""

#: ../../c-api/init_config.rst:948
msgid ""
"The ``__PYVENV_LAUNCHER__`` environment variable is used to "
"set :c:member:`PyConfig.base_executable`"
msgstr ""

#: ../../c-api/init_config.rst:953
msgid "Py_RunMain()"
msgstr "Py_RunMain()"

#: ../../c-api/init_config.rst:957
msgid ""
"Execute the command (:c:member:`PyConfig.run_command`), the script "
"(:c:member:`PyConfig.run_filename`) or the module "
"(:c:member:`PyConfig.run_module`) specified on the command line or in the "
"configuration."
msgstr ""

#: ../../c-api/init_config.rst:962
msgid "By default and when if :option:`-i` option is used, run the REPL."
msgstr ""

#: ../../c-api/init_config.rst:964
msgid ""
"Finally, finalizes Python and returns an exit status that can be passed to "
"the ``exit()`` function."
msgstr ""

#: ../../c-api/init_config.rst:967
msgid ""
"See :ref:`Python Configuration <init-python-config>` for an example of "
"customized Python always running in isolated mode using :c:func:`Py_RunMain`."
msgstr ""

#: ../../c-api/init_config.rst:973
msgid "Multi-Phase Initialization Private Provisional API"
msgstr ""

#: ../../c-api/init_config.rst:975
msgid ""
"This section is a private provisional API introducing multi-phase "
"initialization, the core feature of the :pep:`432`:"
msgstr ""

#: ../../c-api/init_config.rst:978
msgid "\"Core\" initialization phase, \"bare minimum Python\":"
msgstr ""

#: ../../c-api/init_config.rst:980
msgid "Builtin types;"
msgstr ""

#: ../../c-api/init_config.rst:981
msgid "Builtin exceptions;"
msgstr ""

#: ../../c-api/init_config.rst:982
msgid "Builtin and frozen modules;"
msgstr ""

#: ../../c-api/init_config.rst:983
msgid ""
"The :mod:`sys` module is only partially initialized (ex: :data:`sys.path` "
"doesn't exist yet)."
msgstr ""

#: ../../c-api/init_config.rst:986
msgid "\"Main\" initialization phase, Python is fully initialized:"
msgstr ""

#: ../../c-api/init_config.rst:988
msgid "Install and configure :mod:`importlib`;"
msgstr ""

#: ../../c-api/init_config.rst:989
msgid "Apply the :ref:`Path Configuration <init-path-config>`;"
msgstr ""

#: ../../c-api/init_config.rst:990
msgid "Install signal handlers;"
msgstr ""

#: ../../c-api/init_config.rst:991
msgid ""
"Finish :mod:`sys` module initialization (ex: create :data:`sys.stdout` "
"and :data:`sys.path`);"
msgstr ""

#: ../../c-api/init_config.rst:993
msgid ""
"Enable optional features like :mod:`faulthandler` and :mod:`tracemalloc`;"
msgstr ""

#: ../../c-api/init_config.rst:994
msgid "Import the :mod:`site` module;"
msgstr ""

#: ../../c-api/init_config.rst:995
msgid "etc."
msgstr "etc."

#: ../../c-api/init_config.rst:997
msgid "Private provisional API:"
msgstr ""

#: ../../c-api/init_config.rst:999
msgid ""
":c:member:`PyConfig._init_main`: if set to "
"0, :c:func:`Py_InitializeFromConfig` stops at the \"Core\" initialization "
"phase."
msgstr ""

#: ../../c-api/init_config.rst:1004
msgid ""
"Move to the \"Main\" initialization phase, finish the Python initialization."
msgstr ""

#: ../../c-api/init_config.rst:1006
msgid ""
"No module is imported during the \"Core\" phase and the ``importlib`` module "
"is not configured: the :ref:`Path Configuration <init-path-config>` is only "
"applied during the \"Main\" phase. It may allow to customize Python in "
"Python to override or tune the :ref:`Path Configuration <init-path-config>`, "
"maybe install a custom :data:`sys.meta_path` importer or an import hook, etc."
msgstr ""

#: ../../c-api/init_config.rst:1012
msgid ""
"It may become possible to calculatin the :ref:`Path Configuration <init-path-"
"config>` in Python, after the Core phase and before the Main phase, which is "
"one of the :pep:`432` motivation."
msgstr ""

#: ../../c-api/init_config.rst:1016
msgid ""
"The \"Core\" phase is not properly defined: what should be and what should "
"not be available at this phase is not specified yet. The API is marked as "
"private and provisional: the API can be modified or even be removed anytime "
"until a proper public API is designed."
msgstr ""

#: ../../c-api/init_config.rst:1021
msgid ""
"Example running Python code between \"Core\" and \"Main\" initialization "
"phases::"
msgstr ""
