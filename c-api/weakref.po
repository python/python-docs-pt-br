# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2020
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-06 22:14+0000\n"
"PO-Revision-Date: 2020-05-30 11:51+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/weakref.rst:6
msgid "Weak Reference Objects"
msgstr "Objetos referência fraca"

#: ../../c-api/weakref.rst:8
msgid ""
"Python supports *weak references* as first-class objects.  There are two "
"specific object types which directly implement weak references.  The first "
"is a simple reference object, and the second acts as a proxy for the "
"original object as much as it can."
msgstr ""
"O Python oferece suporte a *referências fracas* como objetos de primeira "
"classe. Existem dois tipos de objetos específicos que implementam "
"diretamente referências fracas. O primeiro é um objeto de referência "
"simples, e o segundo atua como um intermediário ao objeto original tanto "
"quanto ele pode."

#: ../../c-api/weakref.rst:16
msgid "Return true if *ob* is either a reference or proxy object."
msgstr "Retorna True se *ob* for um objeto de referência ou proxy."

#: ../../c-api/weakref.rst:21
msgid "Return true if *ob* is a reference object."
msgstr "Retornar True se *ob* for um objeto de referência."

#: ../../c-api/weakref.rst:26
msgid "Return true if *ob* is a proxy object."
msgstr "Retornar True se *ob* for um objeto proxy."

#: ../../c-api/weakref.rst:31
msgid ""
"Return a weak reference object for the object *ob*.  This will always return "
"a new reference, but is not guaranteed to create a new object; an existing "
"reference object may be returned.  The second parameter, *callback*, can be "
"a callable object that receives notification when *ob* is garbage collected; "
"it should accept a single parameter, which will be the weak reference object "
"itself. *callback* may also be ``None`` or ``NULL``.  If *ob* is not a "
"weakly-referencable object, or if *callback* is not callable, ``None``, or "
"``NULL``, this will return ``NULL`` and raise :exc:`TypeError`."
msgstr ""
"Retorna um objeto de referência fraco para o objeto *ob*. Isso sempre "
"retornará uma nova referência, mas não é garantido para criar um novo "
"objeto; um objeto de referência existente pode ser retornado. O segundo "
"parâmetro, *callback*, pode ser um objeto chamável que recebe notificação "
"quando *ob* for lixo coletado; ele deve aceitar um único parâmetro, que será "
"o objeto de referência fraco propriamente dito. *callback* também pode ser "
"``None`` ou ``NULL``. Se *ob* não for um objeto fracamente referenciável, ou "
"se *callback* não for um chamável, ``None``, ou ``NULL``, isso retornará "
"``NULL`` e levantará a :exc:`TypeError`."

#: ../../c-api/weakref.rst:43
msgid ""
"Return a weak reference proxy object for the object *ob*.  This will always "
"return a new reference, but is not guaranteed to create a new object; an "
"existing proxy object may be returned.  The second parameter, *callback*, "
"can be a callable object that receives notification when *ob* is garbage "
"collected; it should accept a single parameter, which will be the weak "
"reference object itself. *callback* may also be ``None`` or ``NULL``.  If "
"*ob* is not a weakly-referencable object, or if *callback* is not callable, "
"``None``, or ``NULL``, this will return ``NULL`` and raise :exc:`TypeError`."
msgstr ""
"Retorna um objeto de proxy de referência fraco para o objeto *ob*. Isso "
"sempre retornará uma nova referência, mas não é garantido para criar um novo "
"objeto; um objeto de proxy existente pode ser retornado. O segundo "
"parâmetro, *callback*, pode ser um objeto chamável que recebe notificação "
"quando *ob* for lixo coletado; ele deve aceitar um único parâmetro, que será "
"o objeto de referência fraco propriamente dito. *callback* também pode ser "
"``None`` ou ``NULL``. Se *ob* não for um objeto fracamente referenciável, ou "
"se *callback* não for um chamável, ``None``, ou ``NULL``, isso retornará "
"``NULL`` e levantará a :exc:`TypeError`."

#: ../../c-api/weakref.rst:55
msgid ""
"Return the referenced object from a weak reference, *ref*.  If the referent "
"is no longer live, returns :const:`Py_None`."
msgstr ""
"Retorna o objeto referenciado de uma referência fraca, *ref*. Se o referente "
"não estiver mais em tempo real, retorna :const:`Py_None`."

#: ../../c-api/weakref.rst:60
msgid ""
"This function returns a **borrowed reference** to the referenced object. "
"This means that you should always call :c:func:`Py_INCREF` on the object "
"except if you know that it cannot be destroyed while you are still using it."
msgstr ""
"Esta função retorna **referência emprestada** ao objeto referenciado. Isso "
"significa que você deve sempre chamar :c:func:`Py_INCREF` no objeto, exceto "
"se você souber que não pode ser destruído enquanto você ainda está usando."

#: ../../c-api/weakref.rst:68
msgid ""
"Similar to :c:func:`PyWeakref_GetObject`, but implemented as a macro that "
"does no error checking."
msgstr ""
"Semelhante a :c:func:`PyWeakref_GetObject`, mas implementado como uma macro "
"que não verifica erros."
