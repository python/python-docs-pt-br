# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-09 16:36+0000\n"
"PO-Revision-Date: 2021-06-28 00:50+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/weakref.rst:6
msgid "Weak Reference Objects"
msgstr "Objetos referência fraca"

#: ../../c-api/weakref.rst:8
msgid ""
"Python supports *weak references* as first-class objects.  There are two "
"specific object types which directly implement weak references.  The first "
"is a simple reference object, and the second acts as a proxy for the "
"original object as much as it can."
msgstr ""
"O Python oferece suporte a *referências fracas* como objetos de primeira "
"classe. Existem dois tipos de objetos específicos que implementam "
"diretamente referências fracas. O primeiro é um objeto de referência "
"simples, e o segundo atua como um intermediário ao objeto original tanto "
"quanto ele pode."

#: ../../c-api/weakref.rst:16
msgid ""
"Return non-zero if *ob* is either a reference or proxy object.  This "
"function always succeeds."
msgstr ""
"Retorna não zero se *ob* for um objeto referência ou um objeto "
"intermediário. Esta função sempre tem sucesso."

#: ../../c-api/weakref.rst:22
msgid ""
"Return non-zero if *ob* is a reference object.  This function always "
"succeeds."
msgstr ""
"Retorna não zero se *ob* for um objeto referência. Esta função sempre tem "
"sucesso."

#: ../../c-api/weakref.rst:27
msgid ""
"Return non-zero if *ob* is a proxy object.  This function always succeeds."
msgstr ""
"Retorna não zero se *ob* for um objeto intermediário. Esta função sempre tem "
"sucesso."

#: ../../c-api/weakref.rst:32
msgid ""
"Return a weak reference object for the object *ob*.  This will always return "
"a new reference, but is not guaranteed to create a new object; an existing "
"reference object may be returned.  The second parameter, *callback*, can be "
"a callable object that receives notification when *ob* is garbage collected; "
"it should accept a single parameter, which will be the weak reference object "
"itself. *callback* may also be ``None`` or ``NULL``.  If *ob* is not a "
"weakly referenceable object, or if *callback* is not callable, ``None``, or "
"``NULL``, this will return ``NULL`` and raise :exc:`TypeError`."
msgstr ""
"Retorna um objeto de referência fraco para o objeto *ob*. Isso sempre "
"retornará uma nova referência, mas não é garantido para criar um novo "
"objeto; um objeto de referência existente pode ser retornado. O segundo "
"parâmetro, *callback*, pode ser um objeto chamável que recebe notificação "
"quando *ob* for lixo coletado; ele deve aceitar um único parâmetro, que será "
"o objeto de referência fraco propriamente dito. *callback* também pode ser "
"``None`` ou ``NULL``. Se *ob* não for um objeto fracamente referenciável, ou "
"se *callback* não for um chamável, ``None``, ou ``NULL``, isso retornará "
"``NULL`` e levantará a :exc:`TypeError`."

#: ../../c-api/weakref.rst:44
msgid ""
"Return a weak reference proxy object for the object *ob*.  This will always "
"return a new reference, but is not guaranteed to create a new object; an "
"existing proxy object may be returned.  The second parameter, *callback*, "
"can be a callable object that receives notification when *ob* is garbage "
"collected; it should accept a single parameter, which will be the weak "
"reference object itself. *callback* may also be ``None`` or ``NULL``.  If "
"*ob* is not a weakly referenceable object, or if *callback* is not callable, "
"``None``, or ``NULL``, this will return ``NULL`` and raise :exc:`TypeError`."
msgstr ""
"Retorna um objeto de proxy de referência fraca para o objeto *ob*. Isso "
"sempre retornará uma nova referência, mas não é garantido para criar um novo "
"objeto; um objeto de proxy existente pode ser retornado. O segundo "
"parâmetro, *callback*, pode ser um objeto chamável que recebe notificação "
"quando *ob* for lixo coletado; ele deve aceitar um único parâmetro, que será "
"o objeto de referência fraco propriamente dito. *callback* também pode ser "
"``None`` ou ``NULL``. Se *ob* não for um objeto referência fraca, ou se "
"*callback* não for um chamável, ``None``, ou ``NULL``, isso retornará "
"``NULL`` e levantará a :exc:`TypeError`."

#: ../../c-api/weakref.rst:56
msgid ""
"Get a :term:`strong reference` to the referenced object from a weak "
"reference, *ref*, into *\\*pobj*."
msgstr ""
"Obtém uma :term:`referência forte` para o objeto referenciado a partir de "
"uma referência fraca, *ref*, em *\\*pobj*."

#: ../../c-api/weakref.rst:59
msgid ""
"On success, set *\\*pobj* to a new :term:`strong reference` to the "
"referenced object and return 1."
msgstr ""
"Em caso de sucesso, define *\\*pobj* como uma nova :term:`referência forte` "
"para o objeto referenciado e retorna 1."

#: ../../c-api/weakref.rst:61
msgid "If the reference is dead, set *\\*pobj* to ``NULL`` and return 0."
msgstr ""
"Se a referência estiver quebrada, define *\\*pobj* como ``NULL`` e retorna 0."

#: ../../c-api/weakref.rst:62
msgid "On error, raise an exception and return -1."
msgstr "Em caso de erro, levanta uma exceção e retorna -1."

#: ../../c-api/weakref.rst:69
msgid ""
"Return a :term:`borrowed reference` to the referenced object from a weak "
"reference, *ref*.  If the referent is no longer live, returns ``Py_None``."
msgstr ""
"Retorna uma :term:`referência emprestada` ao objeto referenciado a partir de "
"uma referência fraca, *ref*. Se o referente não estiver mais em tempo real, "
"retorna ``Py_None``."

#: ../../c-api/weakref.rst:74
msgid ""
"This function returns a :term:`borrowed reference` to the referenced object. "
"This means that you should always call :c:func:`Py_INCREF` on the object "
"except when it cannot be destroyed before the last usage of the borrowed "
"reference."
msgstr ""
"Esta função retorna uma :term:`referência emprestada` para o objeto "
"referenciado. Isso significa que você deve sempre chamar :c:func:`Py_INCREF` "
"no objeto, exceto quando ele não puder ser destruído antes do último uso da "
"referência emprestada."

#: ../../c-api/weakref.rst:79 ../../c-api/weakref.rst:87
msgid "Use :c:func:`PyWeakref_GetRef` instead."
msgstr "Usa :c:func:`PyWeakref_GetRef`."

#: ../../c-api/weakref.rst:85
msgid "Similar to :c:func:`PyWeakref_GetObject`, but does no error checking."
msgstr "Semelhante a :c:func:`PyWeakref_GetObject`, mas não verifica erros."

#: ../../c-api/weakref.rst:93
msgid ""
"This function is called by the :c:member:`~PyTypeObject.tp_dealloc` handler "
"to clear weak references."
msgstr ""
"Esta função é chamada pelo tratador :c:member:`~PyTypeObject.tp_dealloc` "
"para limpar referências fracas."

#: ../../c-api/weakref.rst:96
msgid ""
"This iterates through the weak references for *object* and calls callbacks "
"for those references which have one. It returns when all callbacks have been "
"attempted."
msgstr ""
"Isso itera pelas referências fracas para *object* e chama retornos de "
"chamada para as referências que possuem um. Ele retorna quando todos os "
"retornos de chamada foram tentados."

#: ../../c-api/weakref.rst:103
msgid "Clears the weakrefs for *object* without calling the callbacks."
msgstr ""
"Limpa as referências fracas para *object* sem chamar as funções de retorno"

#: ../../c-api/weakref.rst:105
msgid ""
"This function is called by the :c:member:`~PyTypeObject.tp_dealloc` handler "
"for types with finalizers (i.e., :meth:`~object.__del__`).  The handler for "
"those objects first calls :c:func:`PyObject_ClearWeakRefs` to clear weakrefs "
"and call their callbacks, then the finalizer, and finally this function to "
"clear any weakrefs that may have been created by the finalizer."
msgstr ""
"Esta função é chamada pelo manipulador :c:member:`~PyTypeObject.tp_dealloc` "
"para tipos com finalizadores (por exemplo, :meth:`~object.__del__`). O "
"manipulador para esses objetos primeiro chama :c:func:"
"`PyObject_ClearWeakRefs` para limpar referências fracas e chamar suas "
"funções de retorno, depois o finalizador e, finalmente, esta função para "
"limpar quaisquer referências fracas que possam ter sido criadas pelo "
"finalizador."

#: ../../c-api/weakref.rst:111
msgid ""
"In most circumstances, it's more appropriate to use :c:func:"
"`PyObject_ClearWeakRefs` to clear weakrefs instead of this function."
msgstr ""
"Na maioria das circunstâncias, é mais apropriado usar :c:func:"
"`PyObject_ClearWeakRefs` para limpar referências fracas em vez desta função."
