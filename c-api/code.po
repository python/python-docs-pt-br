# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Elvis da Silva de Menezes <elvisdasilvademenezes@hotmail.com>, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-25 14:54+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/code.rst:8
msgid "Code Objects"
msgstr "Objetos código"

#: ../../c-api/code.rst:12
msgid ""
"Code objects are a low-level detail of the CPython implementation. Each one "
"represents a chunk of executable code that hasn't yet been bound into a "
"function."
msgstr ""
"Os objetos código são um detalhe de baixo nível da implementação do CPython. "
"Cada um representa um pedaço de código executável que ainda não foi "
"vinculado a uma função."

#: ../../c-api/code.rst:18
msgid ""
"The C structure of the objects used to describe code objects.  The fields of "
"this type are subject to change at any time."
msgstr ""
"A estrutura C dos objetos usados para descrever objetos código. Os campos "
"deste tipo estão sujeitos a alterações a qualquer momento."

#: ../../c-api/code.rst:24
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :ref:"
"`code object <code-objects>`."
msgstr ""
"Esta é uma instância de :c:type:`PyTypeObject` representando o :ref:`objeto "
"código <code-objects>` Python."

#: ../../c-api/code.rst:30
msgid ""
"Return true if *co* is a :ref:`code object <code-objects>`. This function "
"always succeeds."
msgstr ""
"Retorna verdadeiro se *co* for um :ref:`objeto código <code-objects>`. Esta "
"função sempre tem sucesso."

#: ../../c-api/code.rst:35
msgid "Return the number of free variables in a code object."
msgstr "Retorna o número de variáveis livres em um objeto código."

#: ../../c-api/code.rst:39
msgid "Return the position of the first free variable in a code object."
msgstr "Retorna a posição da primeira variável livre em um objeto código."

#: ../../c-api/code.rst:43
msgid ""
"Return a new code object.  If you need a dummy code object to create a "
"frame, use :c:func:`PyCode_NewEmpty` instead."
msgstr ""
"Devolve um novo objeto código. Se precisar de um objeto código vazio para "
"criar um quadro, use :c:func:`PyCode_NewEmpty`"

#: ../../c-api/code.rst:46
msgid ""
"Since the definition of the bytecode changes often, calling :c:func:"
"`PyUnstable_Code_New` directly can bind you to a precise Python version."
msgstr ""
"Como a definição de bytecode muda constantemente, chamar :c:func:"
"`PyUnstable_Code_New` diretamente pode vinculá-lo a uma versão de Python "
"específica."

#: ../../c-api/code.rst:49
msgid ""
"The many arguments of this function are inter-dependent in complex ways, "
"meaning that subtle changes to values are likely to result in incorrect "
"execution or VM crashes. Use this function only with extreme care."
msgstr ""
"Os vários argumentos desta função são inter-dependentes de maneiras "
"complexas, significando que mesmo alterações discretas de valor tem chances "
"de resultar em execução incorreta ou erros fatais de VM. Tenha extremo "
"cuidado ao usar esta função."

#: ../../c-api/code.rst:53
msgid "Added ``qualname`` and ``exceptiontable`` parameters."
msgstr "Adicionou os parâmetros ``qualname`` e ``exceptiontable``"

#: ../../c-api/code.rst:60
msgid ""
"Renamed from ``PyCode_New`` as part of :ref:`unstable-c-api`. The old name "
"is deprecated, but will remain available until the signature changes again."
msgstr ""
"Renomeado de ``PyCode_New`` como parte da :ref:`unstable-c-api`. O nome "
"antigo foi descontinuado, mas continuará disponível até que a assinatura "
"mude novamente."

#: ../../c-api/code.rst:66
msgid ""
"Similar to :c:func:`PyUnstable_Code_New`, but with an extra "
"\"posonlyargcount\" for positional-only arguments. The same caveats that "
"apply to ``PyUnstable_Code_New`` also apply to this function."
msgstr ""
"Similar a :c:func:`PyUnstable_Code_New`, mas com um \"posonlyargcount\" "
"extra para argumentos somente-posicionais. As mesmas ressalvas que se "
"aplicam a ``PyUnstable_Code_New`` também se aplicam a essa função."

#: ../../c-api/code.rst:71
msgid "as ``PyCode_NewWithPosOnlyArgs``"
msgstr "Como ``PyCode_NewWithPosOnlyArgs``"

#: ../../c-api/code.rst:73
msgid "Added ``qualname`` and  ``exceptiontable`` parameters."
msgstr "Adicionados os parâmetros ``qualname`` e ``exceptiontable``"

#: ../../c-api/code.rst:78
msgid ""
"Renamed to ``PyUnstable_Code_NewWithPosOnlyArgs``. The old name is "
"deprecated, but will remain available until the signature changes again."
msgstr ""
"Renomeado para ``PyUnstable_Code_NewWithPosOnlyArgs``. O nome antigo foi "
"descontinuado, mas continuará disponível até que a assinatura mude novamente."

#: ../../c-api/code.rst:84
msgid ""
"Return a new empty code object with the specified filename, function name, "
"and first line number. The resulting code object will raise an ``Exception`` "
"if executed."
msgstr ""
"Retorna um novo objeto código vazio com o nome de arquivo, nome da função e "
"número da primeira linha especificados. O objeto código resultante irá "
"levantar uma ``Exception`` se executado."

#: ../../c-api/code.rst:90
msgid ""
"Return the line number of the instruction that occurs on or before "
"``byte_offset`` and ends after it. If you just need the line number of a "
"frame, use :c:func:`PyFrame_GetLineNumber` instead."
msgstr ""
"Retorna o número da linha da instrução que ocorre em ou antes de "
"``byte_offset`` e termina depois disso. Se você só precisa do número da "
"linha de um quadro, use :c:func:`PyFrame_GetLineNumber`."

#: ../../c-api/code.rst:93
msgid ""
"For efficiently iterating over the line numbers in a code object, use :pep:"
"`the API described in PEP 626 <0626#out-of-process-debuggers-and-profilers>`."
msgstr ""
"Para iterar eficientemente sobre os números de linha em um objeto código, "
"use :pep:`a API descrita na PEP 626 <0626#out-of-process-debuggers-and-"
"profilers>` ."

#: ../../c-api/code.rst:98
msgid ""
"Sets the passed ``int`` pointers to the source code line and column numbers "
"for the instruction at ``byte_offset``. Sets the value to ``0`` when "
"information is not available for any particular element."
msgstr ""
"Define os ponteiros ``int`` passados para a linha do código-fonte e os "
"números da coluna para a instrução em ``byte_offset``. Define o valor como "
"``0`` quando as informações não estão disponíveis para nenhum elemento em "
"particular."

#: ../../c-api/code.rst:102
msgid "Returns ``1`` if the function succeeds and 0 otherwise."
msgstr "Retorna ``1`` se a função for bem-sucedida e 0 caso contrário."

#: ../../c-api/code.rst:108
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_code')``. Returns a strong "
"reference to a :c:type:`PyBytesObject` representing the bytecode in a code "
"object. On error, ``NULL`` is returned and an exception is raised."
msgstr ""
"Equivalente ao código Python ``getattr(co, 'co_code')``. Retorna uma "
"referência forte a um :c:type:`PyBytesObject` representando o bytecode em um "
"objeto código. Em caso de erro, ``NULL`` é retornado e uma exceção é "
"levantada."

#: ../../c-api/code.rst:113
msgid ""
"This ``PyBytesObject`` may be created on-demand by the interpreter and does "
"not necessarily represent the bytecode actually executed by CPython. The "
"primary use case for this function is debuggers and profilers."
msgstr ""
"Este ``PyBytesObject`` pode ser criado sob demanda pelo interpretador e não "
"representa necessariamente o bytecode realmente executado pelo CPython. O "
"caso de uso primário para esta função são depuradores e criadores de perfil."

#: ../../c-api/code.rst:121
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_varnames')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the local "
"variables. On error, ``NULL`` is returned and an exception is raised."
msgstr ""
"Equivalente ao código Python ``getattr(co, 'co_varnames')``. Retorna uma "
"nova referência a um :c:type:`PyTupleObject` contendo os nomes das variáveis "
"locais. Em caso de erro, ``NULL`` é retornado e uma exceção é levantada."

#: ../../c-api/code.rst:130
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_cellvars')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the local "
"variables that are referenced by nested functions. On error, ``NULL`` is "
"returned and an exception is raised."
msgstr ""
"Equivalente ao código Python ``getattr(co, 'co_cellvars')``. Retorna uma "
"nova referência a um :c:type:`PyTupleObject` contendo os nomes das variáveis "
"locais referenciadas por funções aninhadas. Em caso de erro, ``NULL`` é "
"retornado e uma exceção é levantada."

#: ../../c-api/code.rst:139
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_freevars')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the free "
"variables. On error, ``NULL`` is returned and an exception is raised."
msgstr ""
"Equivalente ao código Python ``getattr(co, 'co_freevars')``. Retorna uma "
"nova referência a um :c:type:`PyTupleObject` contendo os nomes das variáveis "
"livres. Em caso de erro, ``NULL`` é retornado e uma exceção é levantada."

#: ../../c-api/code.rst:147
msgid ""
"Register *callback* as a code object watcher for the current interpreter. "
"Return an ID which may be passed to :c:func:`PyCode_ClearWatcher`. In case "
"of error (e.g. no more watcher IDs available), return ``-1`` and set an "
"exception."
msgstr ""
"Registra *callback* como um observador do objeto código para o interpretador "
"atual.  Devolve um ID que pode ser passado para :c:func:"
"`PyCode_ClearWatcher`. Em caso de erro (por exemplo, não há IDs de "
"observadores disponíveis), devolve ``-1`` e define uma exceção."

#: ../../c-api/code.rst:156
msgid ""
"Clear watcher identified by *watcher_id* previously returned from :c:func:"
"`PyCode_AddWatcher` for the current interpreter. Return ``0`` on success, or "
"``-1`` and set an exception on error (e.g. if the given *watcher_id* was "
"never registered.)"
msgstr ""
"Libera o observador identificado por *watcher_id* anteriormente retornado "
"por :c:func:`PyCode_AddWatcher` para o interpretador atual. Retorna ``0`` em "
"caso de sucesso ou ``-1`` em caso de erro e levanta uma exceção (ex., se o "
"*watcher_id* dado não foi registrado.)"

#: ../../c-api/code.rst:165
msgid ""
"Enumeration of possible code object watcher events: - "
"``PY_CODE_EVENT_CREATE`` - ``PY_CODE_EVENT_DESTROY``"
msgstr ""
"Enumeração dos possíveis eventos de observador do objeto código: "
"``PY_CODE_EVENT_CREATE`` - ``PY_CODE_EVENT_DESTROY``"

#: ../../c-api/code.rst:173
msgid "Type of a code object watcher callback function."
msgstr "Tipo de uma função de callback de observador de objeto código."

#: ../../c-api/code.rst:175
msgid ""
"If *event* is ``PY_CODE_EVENT_CREATE``, then the callback is invoked after "
"`co` has been fully initialized. Otherwise, the callback is invoked before "
"the destruction of *co* takes place, so the prior state of *co* can be "
"inspected."
msgstr ""
"Se *evento* é ``PY_CODE_EVENT_CREATE``, então a função de retorno é invocada "
"após `co`ter sido completamente inicializado. Senão, a função de retorno é "
"invocada antes que a destruição de `co` ocorra, para que o estado anterior "
"de *co* possa ser inspecionado."

#: ../../c-api/code.rst:180
msgid ""
"If *event* is ``PY_CODE_EVENT_DESTROY``, taking a reference in the callback "
"to the about-to-be-destroyed code object will resurrect it and prevent it "
"from being freed at this time. When the resurrected object is destroyed "
"later, any watcher callbacks active at that time will be called again."
msgstr ""
"Se *evento* for ``PY_CODE_EVENT_DESTROY``, obter uma referência para a "
"função de retorno do objeto-a-ser-destruído irá reativá-lo e impedirá que o "
"objeto seja liberado. Quando o objeto reativado é posteriormente destruído, "
"qualquer observador de funções de retorno ativos naquele momento serão "
"chamados novamente."

#: ../../c-api/code.rst:185
msgid ""
"Users of this API should not rely on internal runtime implementation "
"details. Such details may include, but are not limited to, the exact order "
"and timing of creation and destruction of code objects. While changes in "
"these details may result in differences observable by watchers (including "
"whether a callback is invoked or not), it does not change the semantics of "
"the Python code being executed."
msgstr ""
"Usuários desta API não devem depender de detalhes internos de implementação "
"em tempo de execução. Tais detalhes podem incluir, mas não estão limitados "
"a: o ordem e o momento exatos da criação e destruição de objetos código. "
"Enquanto alterações nestes detalhes podem resultar em diferenças que são "
"visíveis para os observadores (incluindo se uma função de retorno é chamada "
"ou não), isso não muda a semântica do código Python executado."

#: ../../c-api/code.rst:192
msgid ""
"If the callback sets an exception, it must return ``-1``; this exception "
"will be printed as an unraisable exception using :c:func:"
"`PyErr_WriteUnraisable`. Otherwise it should return ``0``."
msgstr ""
"Se a função de retorno definir uma exceção, ela deverá retornar ``-1``. Essa "
"exceção será exibida como uma exceção não levantável usando :c:func:"
"`PyErr_WriteUnraisable`. Caso contrário, deverá retornar ``0``."

#: ../../c-api/code.rst:196
msgid ""
"There may already be a pending exception set on entry to the callback. In "
"this case, the callback should return ``0`` with the same exception still "
"set. This means the callback may not call any other API that can set an "
"exception unless it saves and clears the exception state first, and restores "
"it before returning."
msgstr ""
"É possível que já exista uma exceção pendente definida na entrada da função "
"de retorno. Nesse caso, a função de retorno deve retornar ``0`` com a mesma "
"exceção ainda definida. Isso significa que a função de retorno não pode "
"chamar nenhuma outra API que possa definir uma exceção, a menos que salve e "
"limpe o estado da exceção primeiro e restaure a exceção antes de retornar."

#: ../../c-api/code.rst:206
msgid "Extra information"
msgstr "Informação adicional"

#: ../../c-api/code.rst:208
msgid ""
"To support low-level extensions to frame evaluation, such as external just-"
"in-time compilers, it is possible to attach arbitrary extra data to code "
"objects."
msgstr ""
"Para suportar extensões de baixo nível de avaliação de quadro (frame), tais "
"como compiladores \"just-in-time\", é possível anexar dados arbitrários "
"adicionais a objetos código."

#: ../../c-api/code.rst:212
msgid ""
"These functions are part of the unstable C API tier: this functionality is a "
"CPython implementation detail, and the API may change without deprecation "
"warnings."
msgstr ""
"Estas funções são parte da camada instável da API C: Essa funcionalidade é "
"um detalhe de implementação do CPython, e a API pode mudar sem avisos de "
"descontinuidade."

#: ../../c-api/code.rst:218
msgid "Return a new an opaque index value used to adding data to code objects."
msgstr ""
"Retorna um novo e opaco valor de índice usado para adicionar dados a objetos "
"código."

#: ../../c-api/code.rst:220
msgid ""
"You generally call this function once (per interpreter) and use the result "
"with ``PyCode_GetExtra`` and ``PyCode_SetExtra`` to manipulate data on "
"individual code objects."
msgstr ""
"Geralmente, você chama esta função apenas uma vez (por interpretador) e usa "
"o resultado com ``PyCode_GetExtra`` e ``PyCode_SetExtra`` para manipular "
"dados em objetos código individuais."

#: ../../c-api/code.rst:224
msgid ""
"If *free* is not ``NULL``: when a code object is deallocated, *free* will be "
"called on non-``NULL`` data stored under the new index. Use :c:func:"
"`Py_DecRef` when storing :c:type:`PyObject`."
msgstr ""
"Se *free* não for ``NULL``: quando o objeto código é desalocado, *free* será "
"chamado em dados não-``NULL`` armazenados sob o novo índice. Use :c:func:"
"`Py_DecRef` quando armazenar :c:type:`PyObject`."

#: ../../c-api/code.rst:230
msgid "as ``_PyEval_RequestCodeExtraIndex``"
msgstr "como ``_PyEval_RequestCodeExtraIndex``"

#: ../../c-api/code.rst:234
msgid ""
"Renamed to ``PyUnstable_Eval_RequestCodeExtraIndex``. The old private name "
"is deprecated, but will be available until the API changes."
msgstr ""
"Renomeado para ``PyUnstable_Eval_RequestCodeExtraIndex``. O nome antigo nome "
"privado foi descontinuado, mas continuará disponível até a mudança da API."

#: ../../c-api/code.rst:240
msgid ""
"Set *extra* to the extra data stored under the given index. Return 0 on "
"success. Set an exception and return -1 on failure."
msgstr ""
"Define *extra* para os dados adicionais armazenados sob o novo índice dado. "
"Retorna 0 em caso de sucesso. Define uma exceção e retorna -1 em caso de "
"erro."

#: ../../c-api/code.rst:243
msgid ""
"If no data was set under the index, set *extra* to ``NULL`` and return 0 "
"without setting an exception."
msgstr ""
"Se nenhum dado foi determinado sob o índice, define *extra* como ``NULL`` e "
"retorna 0 sem definir nenhuma exceção."

#: ../../c-api/code.rst:248
msgid "as ``_PyCode_GetExtra``"
msgstr "como ``_PyCode_GetExtra``"

#: ../../c-api/code.rst:252
msgid ""
"Renamed to ``PyUnstable_Code_GetExtra``. The old private name is deprecated, "
"but will be available until the API changes."
msgstr ""
"Renomeado para ``PyUnstable_Code_GetExtra``. O nome antigo privado foi "
"descontinuado, mas continuará disponível até a mudança da API."

#: ../../c-api/code.rst:258
msgid ""
"Set the extra data stored under the given index to *extra*. Return 0 on "
"success. Set an exception and return -1 on failure."
msgstr ""
"Define os dados extras armazenados sob o índice dado a *extra*. Retorna 0 em "
"caso de sucesso. Define uma exceção e retorna -1 em caso de erro."

#: ../../c-api/code.rst:263
msgid "as ``_PyCode_SetExtra``"
msgstr "como ``_PyCode_SetExtra``"

#: ../../c-api/code.rst:267
msgid ""
"Renamed to ``PyUnstable_Code_SetExtra``. The old private name is deprecated, "
"but will be available until the API changes."
msgstr ""
"Renomeado para ``PyUnstable_Code_SetExtra``. O nome antigo privado foi "
"descontinuado, mas continuará disponível até a mudança da API."

#: ../../c-api/code.rst:3
msgid "object"
msgstr "objeto"

#: ../../c-api/code.rst:3
msgid "code"
msgstr "código"

#: ../../c-api/code.rst:3
msgid "code object"
msgstr "objeto código"

#: ../../c-api/code.rst:56
msgid "PyCode_New (C function)"
msgstr "PyCode_New (função C)"

#: ../../c-api/code.rst:69
msgid "PyCode_NewWithPosOnlyArgs (C function)"
msgstr "PyCode_NewWithPosOnlyArgs (função C)"

#: ../../c-api/code.rst:228
msgid "_PyEval_RequestCodeExtraIndex (C function)"
msgstr "_PyEval_RequestCodeExtraIndex (função C)"

#: ../../c-api/code.rst:246
msgid "_PyCode_GetExtra (C function)"
msgstr "_PyCode_GetExtra (função C)"

#: ../../c-api/code.rst:261
msgid "_PyCode_SetExtra (C function)"
msgstr "_PyCode_SetExtra (função C)"
