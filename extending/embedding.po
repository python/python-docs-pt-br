# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-07 20:38+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../extending/embedding.rst:8
msgid "Embedding Python in Another Application"
msgstr "Incorporando o Python numa Outra Aplicação"

#: ../../extending/embedding.rst:10
msgid ""
"The previous chapters discussed how to extend Python, that is, how to extend "
"the functionality of Python by attaching a library of C functions to it.  It "
"is also possible to do it the other way around: enrich your C/C++ "
"application by embedding Python in it.  Embedding provides your application "
"with the ability to implement some of the functionality of your application "
"in Python rather than C or C++. This can be used for many purposes; one "
"example would be to allow users to tailor the application to their needs by "
"writing some scripts in Python.  You can also use it yourself if some of the "
"functionality can be written in Python more easily."
msgstr ""
"Os capítulos anteriores discutiram como estender o Python, ou seja, como "
"expandir a funcionalidade do Python anexando uma biblioteca de funções em C "
"a ele. Também é possível fazer o inverso: enriquecer sua aplicação em C/C++ "
"incorporando o Python nela. A incorporação fornece à sua aplicação a "
"capacidade de implementar parte da funcionalidade da aplicação em Python em "
"vez de C ou C++. Isso pode ser usado para diversos propósitos; um exemplo "
"seria permitir que os usuários personalizem a aplicação de acordo com suas "
"necessidades escrevendo alguns scripts em Python. Você também pode usá-la se "
"parte da funcionalidade puder ser escrita em Python mais facilmente."

#: ../../extending/embedding.rst:20
msgid ""
"Embedding Python is similar to extending it, but not quite.  The difference "
"is that when you extend Python, the main program of the application is still "
"the Python interpreter, while if you embed Python, the main program may have "
"nothing to do with Python --- instead, some parts of the application "
"occasionally call the Python interpreter to run some Python code."
msgstr ""
"Incorporar o Python é semelhante a estendê-lo, mas não exatamente. A "
"diferença é que, ao estender o Python, o programa principal da aplicação "
"ainda é o interpretador Python, enquanto que, se você incorporar o Python, o "
"programa principal pode não ter nada a ver com o Python — em vez disso, "
"algumas partes da aplicação chamam ocasionalmente o interpretador Python "
"para executar algum código Python."

#: ../../extending/embedding.rst:26
msgid ""
"So if you are embedding Python, you are providing your own main program.  "
"One of the things this main program has to do is initialize the Python "
"interpreter.  At the very least, you have to call the function :c:func:"
"`Py_Initialize`.  There are optional calls to pass command line arguments to "
"Python.  Then later you can call the interpreter from any part of the "
"application."
msgstr ""
"Отже, якщо ви вбудовуєте Python, ви надаєте свою власну основну програму. "
"Одна з речей, яку має зробити ця основна програма, це ініціалізувати "
"інтерпретатор Python. Принаймні, ви повинні викликати функцію :c:func:"
"`Py_Initialize`. Існують додаткові виклики для передачі аргументів "
"командного рядка в Python. Пізніше ви можете викликати перекладача з будь-"
"якої частини програми."

#: ../../extending/embedding.rst:32
msgid ""
"There are several different ways to call the interpreter: you can pass a "
"string containing Python statements to :c:func:`PyRun_SimpleString`, or you "
"can pass a stdio file pointer and a file name (for identification in error "
"messages only) to :c:func:`PyRun_SimpleFile`.  You can also call the lower-"
"level operations described in the previous chapters to construct and use "
"Python objects."
msgstr ""
"Існує кілька різних способів виклику інтерпретатора: ви можете передати "
"рядок, що містить оператори Python, до :c:func:`PyRun_SimpleString`, або ви "
"можете передати вказівник файлу stdio та ім’я файлу (лише для ідентифікації "
"в повідомленнях про помилки) до :c:func:`PyRun_SimpleFile`. Ви також можете "
"викликати операції нижчого рівня, описані в попередніх розділах, для "
"створення та використання об’єктів Python."

#: ../../extending/embedding.rst:41
msgid ":ref:`c-api-index`"
msgstr ":ref:`c-api-index`"

#: ../../extending/embedding.rst:42
msgid ""
"The details of Python's C interface are given in this manual. A great deal "
"of necessary information can be found here."
msgstr ""
"Подробиці інтерфейсу C Python наведено в цьому посібнику. Тут можна знайти "
"багато необхідної інформації."

#: ../../extending/embedding.rst:49
msgid "Very High Level Embedding"
msgstr "Дуже високий рівень вбудовування"

#: ../../extending/embedding.rst:51
msgid ""
"The simplest form of embedding Python is the use of the very high level "
"interface. This interface is intended to execute a Python script without "
"needing to interact with the application directly. This can for example be "
"used to perform some operation on a file. ::"
msgstr ""
"Найпростішою формою вбудовування Python є використання інтерфейсу дуже "
"високого рівня. Цей інтерфейс призначений для виконання сценарію Python без "
"необхідності безпосередньої взаємодії з програмою. Це можна, наприклад, "
"використати для виконання певної операції над файлом. ::"

#: ../../extending/embedding.rst:56
msgid ""
"#define PY_SSIZE_T_CLEAN\n"
"#include <Python.h>\n"
"\n"
"int\n"
"main(int argc, char *argv[])\n"
"{\n"
"    PyStatus status;\n"
"    PyConfig config;\n"
"    PyConfig_InitPythonConfig(&config);\n"
"\n"
"    /* optional but recommended */\n"
"    status = PyConfig_SetBytesString(&config, &config.program_name, "
"argv[0]);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto exception;\n"
"    }\n"
"\n"
"    status = Py_InitializeFromConfig(&config);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto exception;\n"
"    }\n"
"    PyConfig_Clear(&config);\n"
"\n"
"    PyRun_SimpleString(\"from time import time,ctime\\n\"\n"
"                       \"print('Today is', ctime(time()))\\n\");\n"
"    if (Py_FinalizeEx() < 0) {\n"
"        exit(120);\n"
"    }\n"
"    return 0;\n"
"\n"
"  exception:\n"
"     PyConfig_Clear(&config);\n"
"     Py_ExitStatusException(status);\n"
"}"
msgstr ""

#: ../../extending/embedding.rst:92
msgid ""
"``#define PY_SSIZE_T_CLEAN`` was used to indicate that ``Py_ssize_t`` should "
"be used in some APIs instead of ``int``. It is not necessary since Python "
"3.13, but we keep it here for backward compatibility. See :ref:`arg-parsing-"
"string-and-buffers` for a description of this macro."
msgstr ""

#: ../../extending/embedding.rst:97
msgid ""
"Setting :c:member:`PyConfig.program_name` should be called before :c:func:"
"`Py_InitializeFromConfig` to inform the interpreter about paths to Python "
"run-time libraries.  Next, the Python interpreter is initialized with :c:"
"func:`Py_Initialize`, followed by the execution of a hard-coded Python "
"script that prints the date and time.  Afterwards, the :c:func:"
"`Py_FinalizeEx` call shuts the interpreter down, followed by the end of the "
"program.  In a real program, you may want to get the Python script from "
"another source, perhaps a text-editor routine, a file, or a database.  "
"Getting the Python code from a file can better be done by using the :c:func:"
"`PyRun_SimpleFile` function, which saves you the trouble of allocating "
"memory space and loading the file contents."
msgstr ""

#: ../../extending/embedding.rst:112
msgid "Beyond Very High Level Embedding: An overview"
msgstr "Поза межами вбудовування дуже високого рівня: огляд"

#: ../../extending/embedding.rst:114
msgid ""
"The high level interface gives you the ability to execute arbitrary pieces "
"of Python code from your application, but exchanging data values is quite "
"cumbersome to say the least. If you want that, you should use lower level "
"calls. At the cost of having to write more C code, you can achieve almost "
"anything."
msgstr ""
"Інтерфейс високого рівня дає вам можливість виконувати довільні частини коду "
"Python із вашої програми, але обмін значеннями даних, м’яко кажучи, досить "
"громіздкий. Якщо ви цього хочете, вам слід використовувати виклики нижчого "
"рівня. Ціною необхідності писати більше коду на C ви можете досягти майже "
"чого завгодно."

#: ../../extending/embedding.rst:119
msgid ""
"It should be noted that extending Python and embedding Python is quite the "
"same activity, despite the different intent. Most topics discussed in the "
"previous chapters are still valid. To show this, consider what the extension "
"code from Python to C really does:"
msgstr ""
"Слід зазначити, що розширення Python і вбудовування Python — це однакова "
"діяльність, незважаючи на різні наміри. Більшість тем, розглянутих у "
"попередніх розділах, все ще актуальні. Щоб показати це, розглянемо, що "
"насправді робить код розширення з Python на C:"

#: ../../extending/embedding.rst:124
msgid "Convert data values from Python to C,"
msgstr "Перетворення значень даних з Python на C,"

#: ../../extending/embedding.rst:126
msgid "Perform a function call to a C routine using the converted values, and"
msgstr ""
"Виконайте виклик функції до підпрограми C, використовуючи перетворені "
"значення, і"

#: ../../extending/embedding.rst:128
msgid "Convert the data values from the call from C to Python."
msgstr "Перетворіть значення даних виклику з C на Python."

#: ../../extending/embedding.rst:130
msgid "When embedding Python, the interface code does:"
msgstr "Під час вбудовування Python код інтерфейсу виконує:"

#: ../../extending/embedding.rst:132
msgid "Convert data values from C to Python,"
msgstr "Перетворення значень даних із C на Python,"

#: ../../extending/embedding.rst:134
msgid ""
"Perform a function call to a Python interface routine using the converted "
"values, and"
msgstr ""
"Виконайте виклик функції до процедури інтерфейсу Python, використовуючи "
"перетворені значення, і"

#: ../../extending/embedding.rst:137
msgid "Convert the data values from the call from Python to C."
msgstr "Перетворіть значення даних виклику з Python на C."

#: ../../extending/embedding.rst:139
msgid ""
"As you can see, the data conversion steps are simply swapped to accommodate "
"the different direction of the cross-language transfer. The only difference "
"is the routine that you call between both data conversions. When extending, "
"you call a C routine, when embedding, you call a Python routine."
msgstr ""
"Як бачите, кроки перетворення даних просто поміняно місцями, щоб відповідати "
"різному напрямку передачі між мовами. Єдина відмінність полягає в процедурі, "
"яку ви викликаєте між двома перетвореннями даних. Під час розширення ви "
"викликаєте підпрограму C, під час вбудовування ви викликаєте підпрограму "
"Python."

#: ../../extending/embedding.rst:144
msgid ""
"This chapter will not discuss how to convert data from Python to C and vice "
"versa.  Also, proper use of references and dealing with errors is assumed to "
"be understood.  Since these aspects do not differ from extending the "
"interpreter, you can refer to earlier chapters for the required information."
msgstr ""
"У цьому розділі не розглядатиметься, як конвертувати дані з Python на C і "
"навпаки. Також передбачається, що належне використання посилань і робота з "
"помилками є зрозумілими. Оскільки ці аспекти не відрізняються від розширення "
"інтерпретатора, ви можете звернутися до попередніх розділів для отримання "
"необхідної інформації."

#: ../../extending/embedding.rst:153
msgid "Pure Embedding"
msgstr "Чисте вбудовування"

#: ../../extending/embedding.rst:155
msgid ""
"The first program aims to execute a function in a Python script. Like in the "
"section about the very high level interface, the Python interpreter does not "
"directly interact with the application (but that will change in the next "
"section)."
msgstr ""
"Перша програма спрямована на виконання функції в сценарії Python. Як і в "
"розділі про інтерфейс дуже високого рівня, інтерпретатор Python "
"безпосередньо не взаємодіє з програмою (але це зміниться в наступному "
"розділі)."

#: ../../extending/embedding.rst:160
msgid "The code to run a function defined in a Python script is:"
msgstr "Код для запуску функції, визначеної в сценарії Python, такий:"

#: ../../extending/embedding.rst:162
msgid ""
"#define PY_SSIZE_T_CLEAN\n"
"#include <Python.h>\n"
"\n"
"int\n"
"main(int argc, char *argv[])\n"
"{\n"
"    PyObject *pName, *pModule, *pFunc;\n"
"    PyObject *pArgs, *pValue;\n"
"    int i;\n"
"\n"
"    if (argc < 3) {\n"
"        fprintf(stderr,\"Usage: call pythonfile funcname [args]\\n\");\n"
"        return 1;\n"
"    }\n"
"\n"
"    Py_Initialize();\n"
"    pName = PyUnicode_DecodeFSDefault(argv[1]);\n"
"    /* Error checking of pName left out */\n"
"\n"
"    pModule = PyImport_Import(pName);\n"
"    Py_DECREF(pName);\n"
"\n"
"    if (pModule != NULL) {\n"
"        pFunc = PyObject_GetAttrString(pModule, argv[2]);\n"
"        /* pFunc is a new reference */\n"
"\n"
"        if (pFunc && PyCallable_Check(pFunc)) {\n"
"            pArgs = PyTuple_New(argc - 3);\n"
"            for (i = 0; i < argc - 3; ++i) {\n"
"                pValue = PyLong_FromLong(atoi(argv[i + 3]));\n"
"                if (!pValue) {\n"
"                    Py_DECREF(pArgs);\n"
"                    Py_DECREF(pModule);\n"
"                    fprintf(stderr, \"Cannot convert argument\\n\");\n"
"                    return 1;\n"
"                }\n"
"                /* pValue reference stolen here: */\n"
"                PyTuple_SetItem(pArgs, i, pValue);\n"
"            }\n"
"            pValue = PyObject_CallObject(pFunc, pArgs);\n"
"            Py_DECREF(pArgs);\n"
"            if (pValue != NULL) {\n"
"                printf(\"Result of call: %ld\\n\", PyLong_AsLong(pValue));\n"
"                Py_DECREF(pValue);\n"
"            }\n"
"            else {\n"
"                Py_DECREF(pFunc);\n"
"                Py_DECREF(pModule);\n"
"                PyErr_Print();\n"
"                fprintf(stderr,\"Call failed\\n\");\n"
"                return 1;\n"
"            }\n"
"        }\n"
"        else {\n"
"            if (PyErr_Occurred())\n"
"                PyErr_Print();\n"
"            fprintf(stderr, \"Cannot find function \\\"%s\\\"\\n\", "
"argv[2]);\n"
"        }\n"
"        Py_XDECREF(pFunc);\n"
"        Py_DECREF(pModule);\n"
"    }\n"
"    else {\n"
"        PyErr_Print();\n"
"        fprintf(stderr, \"Failed to load \\\"%s\\\"\\n\", argv[1]);\n"
"        return 1;\n"
"    }\n"
"    if (Py_FinalizeEx() < 0) {\n"
"        return 120;\n"
"    }\n"
"    return 0;\n"
"}\n"
msgstr ""

#: ../../extending/embedding.rst:165
msgid ""
"This code loads a Python script using ``argv[1]``, and calls the function "
"named in ``argv[2]``.  Its integer arguments are the other values of the "
"``argv`` array.  If you :ref:`compile and link <compiling>` this program "
"(let's call the finished executable :program:`call`), and use it to execute "
"a Python script, such as:"
msgstr ""
"Цей код завантажує сценарій Python за допомогою ``argv[1]`` і викликає "
"функцію, названу в ``argv[2]``. Його цілі аргументи є іншими значеннями "
"масиву ``argv``. Якщо ви :ref:`скомпілюєте та зв’яжете <compiling>` цю "
"програму (давайте назвемо готовий виконуваний файл :program:`call`), і "
"використаємо його для виконання сценарію Python, наприклад:"

#: ../../extending/embedding.rst:171
msgid ""
"def multiply(a,b):\n"
"    print(\"Will compute\", a, \"times\", b)\n"
"    c = 0\n"
"    for i in range(0, a):\n"
"        c = c + b\n"
"    return c"
msgstr ""

#: ../../extending/embedding.rst:180
msgid "then the result should be:"
msgstr "тоді результат має бути таким:"

#: ../../extending/embedding.rst:182
msgid ""
"$ call multiply multiply 3 2\n"
"Will compute 3 times 2\n"
"Result of call: 6"
msgstr ""

#: ../../extending/embedding.rst:188
msgid ""
"Although the program is quite large for its functionality, most of the code "
"is for data conversion between Python and C, and for error reporting.  The "
"interesting part with respect to embedding Python starts with ::"
msgstr ""
"Незважаючи на те, що програма досить велика за своїми функціями, більша "
"частина коду призначена для перетворення даних між Python і C, а також для "
"звітування про помилки. Цікава частина щодо вбудовування Python починається "
"з::"

#: ../../extending/embedding.rst:192
msgid ""
"Py_Initialize();\n"
"pName = PyUnicode_DecodeFSDefault(argv[1]);\n"
"/* Error checking of pName left out */\n"
"pModule = PyImport_Import(pName);"
msgstr ""

#: ../../extending/embedding.rst:197
msgid ""
"After initializing the interpreter, the script is loaded using :c:func:"
"`PyImport_Import`.  This routine needs a Python string as its argument, "
"which is constructed using the :c:func:`PyUnicode_DecodeFSDefault` data "
"conversion routine. ::"
msgstr ""

#: ../../extending/embedding.rst:202
msgid ""
"pFunc = PyObject_GetAttrString(pModule, argv[2]);\n"
"/* pFunc is a new reference */\n"
"\n"
"if (pFunc && PyCallable_Check(pFunc)) {\n"
"    ...\n"
"}\n"
"Py_XDECREF(pFunc);"
msgstr ""

#: ../../extending/embedding.rst:210
msgid ""
"Once the script is loaded, the name we're looking for is retrieved using :c:"
"func:`PyObject_GetAttrString`.  If the name exists, and the object returned "
"is callable, you can safely assume that it is a function.  The program then "
"proceeds by constructing a tuple of arguments as normal.  The call to the "
"Python function is then made with::"
msgstr ""
"Після завантаження сценарію ім’я, яке ми шукаємо, отримується за допомогою :"
"c:func:`PyObject_GetAttrString`. Якщо ім'я існує, а повернутий об'єкт можна "
"викликати, ви можете сміливо вважати, що це функція. Потім програма "
"продовжує створення кортежу аргументів у звичайному режимі. Потім виклик "
"функції Python виконується за допомогою::"

#: ../../extending/embedding.rst:216
msgid "pValue = PyObject_CallObject(pFunc, pArgs);"
msgstr ""

#: ../../extending/embedding.rst:218
msgid ""
"Upon return of the function, ``pValue`` is either ``NULL`` or it contains a "
"reference to the return value of the function.  Be sure to release the "
"reference after examining the value."
msgstr ""
"Після повернення функції ``pValue`` є або ``NULL``, або містить посилання на "
"значення, що повертається функцією. Обов’язково опублікуйте посилання після "
"вивчення значення."

#: ../../extending/embedding.rst:226
msgid "Extending Embedded Python"
msgstr "Розширення вбудованого Python"

#: ../../extending/embedding.rst:228
msgid ""
"Until now, the embedded Python interpreter had no access to functionality "
"from the application itself.  The Python API allows this by extending the "
"embedded interpreter.  That is, the embedded interpreter gets extended with "
"routines provided by the application. While it sounds complex, it is not so "
"bad.  Simply forget for a while that the application starts the Python "
"interpreter.  Instead, consider the application to be a set of subroutines, "
"and write some glue code that gives Python access to those routines, just "
"like you would write a normal Python extension.  For example::"
msgstr ""
"До цього часу вбудований інтерпретатор Python не мав доступу до "
"функціональних можливостей самої програми. Python API дозволяє це, "
"розширюючи вбудований інтерпретатор. Тобто вбудований інтерпретатор "
"розширюється підпрограмами, наданими програмою. Хоча це звучить складно, це "
"не так вже й погано. Просто забудьте на деякий час, що програма запускає "
"інтерпретатор Python. Замість цього розгляньте програму як набір підпрограм "
"і напишіть якийсь клейовий код, який надає Python доступ до цих підпрограм, "
"так само, як ви б написали звичайне розширення Python. Наприклад::"

#: ../../extending/embedding.rst:237
msgid ""
"static int numargs=0;\n"
"\n"
"/* Return the number of arguments of the application command line */\n"
"static PyObject*\n"
"emb_numargs(PyObject *self, PyObject *args)\n"
"{\n"
"    if(!PyArg_ParseTuple(args, \":numargs\"))\n"
"        return NULL;\n"
"    return PyLong_FromLong(numargs);\n"
"}\n"
"\n"
"static PyMethodDef emb_module_methods[] = {\n"
"    {\"numargs\", emb_numargs, METH_VARARGS,\n"
"     \"Return the number of arguments received by the process.\"},\n"
"    {NULL, NULL, 0, NULL}\n"
"};\n"
"\n"
"static struct PyModuleDef emb_module = {\n"
"    .m_base = PyModuleDef_HEAD_INIT,\n"
"    .m_name = \"emb\",\n"
"    .m_size = 0,\n"
"    .m_methods = emb_module_methods,\n"
"};\n"
"\n"
"static PyObject*\n"
"PyInit_emb(void)\n"
"{\n"
"    return PyModuleDef_Init(&emb_module);\n"
"}"
msgstr ""

#: ../../extending/embedding.rst:267
msgid ""
"Insert the above code just above the :c:func:`main` function. Also, insert "
"the following two statements before the call to :c:func:`Py_Initialize`::"
msgstr ""
"Вставте наведений вище код безпосередньо над функцією :c:func:`main`. Також "
"вставте наступні два оператори перед викликом :c:func:`Py_Initialize`::"

#: ../../extending/embedding.rst:270
msgid ""
"numargs = argc;\n"
"PyImport_AppendInittab(\"emb\", &PyInit_emb);"
msgstr ""

#: ../../extending/embedding.rst:273
msgid ""
"These two lines initialize the ``numargs`` variable, and make the :func:`!"
"emb.numargs` function accessible to the embedded Python interpreter. With "
"these extensions, the Python script can do things like"
msgstr ""

#: ../../extending/embedding.rst:277
msgid ""
"import emb\n"
"print(\"Number of arguments\", emb.numargs())"
msgstr ""

#: ../../extending/embedding.rst:282
msgid ""
"In a real application, the methods will expose an API of the application to "
"Python."
msgstr "У реальній програмі методи нададуть API програми Python."

#: ../../extending/embedding.rst:292
msgid "Embedding Python in C++"
msgstr "Вбудовування Python у C++"

#: ../../extending/embedding.rst:294
msgid ""
"It is also possible to embed Python in a C++ program; precisely how this is "
"done will depend on the details of the C++ system used; in general you will "
"need to write the main program in C++, and use the C++ compiler to compile "
"and link your program.  There is no need to recompile Python itself using C+"
"+."
msgstr ""
"Також можна вбудувати Python у програму C++; те, як це буде зроблено, "
"залежатиме від деталей використовуваної системи C++; загалом, вам потрібно "
"буде написати основну програму мовою C++ і використовувати компілятор C++ "
"для компіляції та компонування вашої програми. Немає необхідності "
"перекомпілювати сам Python за допомогою C++."

#: ../../extending/embedding.rst:303
msgid "Compiling and Linking under Unix-like systems"
msgstr "Компіляція та компонування в Unix-подібних системах"

#: ../../extending/embedding.rst:305
msgid ""
"It is not necessarily trivial to find the right flags to pass to your "
"compiler (and linker) in order to embed the Python interpreter into your "
"application, particularly because Python needs to load library modules "
"implemented as C dynamic extensions (:file:`.so` files) linked against it."
msgstr ""
"Не обов’язково тривіально знайти правильні позначки для передачі вашому "
"компілятору (і компонувальнику), щоб вбудувати інтерпретатор Python у вашу "
"програму, особливо тому, що Python має завантажувати бібліотечні модулі, "
"реалізовані як динамічні розширення C (:file:`.so` файли), пов’язані з ним."

#: ../../extending/embedding.rst:311
msgid ""
"To find out the required compiler and linker flags, you can execute the :"
"file:`python{X.Y}-config` script which is generated as part of the "
"installation process (a :file:`python3-config` script may also be "
"available).  This script has several options, of which the following will be "
"directly useful to you:"
msgstr ""
"Щоб дізнатися необхідні позначки компілятора та компонувальника, ви можете "
"виконати сценарій :file:`python{X.Y}-config`, який створюється як частина "
"процесу інсталяції (може також бути доступний сценарій :file:`python3-"
"config` ). Цей сценарій має кілька варіантів, з яких наступні будуть вам "
"безпосередньо корисні:"

#: ../../extending/embedding.rst:317
msgid ""
"``pythonX.Y-config --cflags`` will give you the recommended flags when "
"compiling:"
msgstr ""
"``pythonX.Y-config --cflags`` надасть вам рекомендовані позначки під час "
"компіляції:"

#: ../../extending/embedding.rst:320
msgid ""
"$ /opt/bin/python3.11-config --cflags\n"
"-I/opt/include/python3.11 -I/opt/include/python3.11 -Wsign-compare  -DNDEBUG "
"-g -fwrapv -O3 -Wall"
msgstr ""

#: ../../extending/embedding.rst:325
msgid ""
"``pythonX.Y-config --ldflags --embed`` will give you the recommended flags "
"when linking:"
msgstr ""

#: ../../extending/embedding.rst:328
msgid ""
"$ /opt/bin/python3.11-config --ldflags --embed\n"
"-L/opt/lib/python3.11/config-3.11-x86_64-linux-gnu -L/opt/lib -lpython3.11 -"
"lpthread -ldl  -lutil -lm"
msgstr ""

#: ../../extending/embedding.rst:334
msgid ""
"To avoid confusion between several Python installations (and especially "
"between the system Python and your own compiled Python), it is recommended "
"that you use the absolute path to :file:`python{X.Y}-config`, as in the "
"above example."
msgstr ""
"Щоб уникнути плутанини між кількома інсталяціями Python (і особливо між "
"системним Python і вашим власно скомпільованим Python), рекомендується "
"використовувати абсолютний шлях до :file:`python{X.Y}-config`, як у прикладі "
"вище."

#: ../../extending/embedding.rst:339
msgid ""
"If this procedure doesn't work for you (it is not guaranteed to work for all "
"Unix-like platforms; however, we welcome :ref:`bug reports <reporting-"
"bugs>`) you will have to read your system's documentation about dynamic "
"linking and/or examine Python's :file:`Makefile` (use :func:`sysconfig."
"get_makefile_filename` to find its location) and compilation options.  In "
"this case, the :mod:`sysconfig` module is a useful tool to programmatically "
"extract the configuration values that you will want to combine together.  "
"For example:"
msgstr ""
"Якщо ця процедура не працює для вас (вона не гарантує роботу для всіх Unix-"
"подібних платформ; однак ми вітаємо :ref:`звіти про помилки <reporting-"
"bugs>`), вам доведеться прочитати документацію вашої системи щодо "
"динамічного зв’язування та/або перевірте :file:`Makefile` Python "
"(використовуйте :func:`sysconfig.get_makefile_filename`, щоб знайти його "
"розташування) і параметри компіляції. У цьому випадку модуль :mod:"
"`sysconfig` є корисним інструментом для програмного вилучення значень "
"конфігурації, які ви хочете об’єднати. Наприклад:"

#: ../../extending/embedding.rst:348
msgid ""
">>> import sysconfig\n"
">>> sysconfig.get_config_var('LIBS')\n"
"'-lpthread -ldl  -lutil'\n"
">>> sysconfig.get_config_var('LINKFORSHARED')\n"
"'-Xlinker -export-dynamic'"
msgstr ""
