# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-11 16:41+0000\n"
"PO-Revision-Date: 2023-05-24 02:10+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../extending/newtypes.rst:7
msgid "Defining Extension Types: Assorted Topics"
msgstr "Визначення типів розширень: різні теми"

#: ../../extending/newtypes.rst:11
msgid ""
"This section aims to give a quick fly-by on the various type methods you can "
"implement and what they do."
msgstr ""
"Ten rozdział ma na celu szybko oblecieć różne sposoby postępowania typów "
"które możesz wypełnić i omówić co one robią."

#: ../../extending/newtypes.rst:14
msgid ""
"Here is the definition of :c:type:`PyTypeObject`, with some fields only used "
"in :ref:`debug builds <debug-build>` omitted:"
msgstr ""
"Ось визначення :c:type:`PyTypeObject` з деякими полями, які використовуються "
"лише в :ref:`debug builds <debug-build>` опущено:"

#: ../../extending/newtypes.rst:20
msgid ""
"Now that's a *lot* of methods.  Don't worry too much though -- if you have a "
"type you want to define, the chances are very good that you will only "
"implement a handful of these."
msgstr ""
"Тепер це *багато* методів. Однак не надто хвилюйтеся - якщо у вас є тип, "
"який ви хочете визначити, дуже високі шанси, що ви реалізуєте лише кілька з "
"них."

#: ../../extending/newtypes.rst:24
msgid ""
"As you probably expect by now, we're going to go over this and give more "
"information about the various handlers.  We won't go in the order they are "
"defined in the structure, because there is a lot of historical baggage that "
"impacts the ordering of the fields.  It's often easiest to find an example "
"that includes the fields you need and then change the values to suit your "
"new type. ::"
msgstr ""
"Як ви, мабуть, очікуєте, ми розглянемо це та надамо більше інформації про "
"різні обробники. Ми не будемо йти в тому порядку, в якому вони визначені в "
"структурі, тому що існує багато історичного багажу, який впливає на порядок "
"розташування полів. Зазвичай найлегше знайти приклад, який містить потрібні "
"вам поля, а потім змінити значення відповідно до нового типу. ::"

#: ../../extending/newtypes.rst:33
msgid ""
"The name of the type -- as mentioned in the previous chapter, this will "
"appear in various places, almost entirely for diagnostic purposes. Try to "
"choose something that will be helpful in such a situation! ::"
msgstr ""
"Назва типу — як згадувалося в попередньому розділі, вона з’являтиметься в "
"різних місцях, майже виключно для діагностичних цілей. Спробуйте вибрати те, "
"що допоможе в такій ситуації! ::"

#: ../../extending/newtypes.rst:39
msgid ""
"These fields tell the runtime how much memory to allocate when new objects "
"of this type are created.  Python has some built-in support for variable "
"length structures (think: strings, tuples) which is where the :c:member:"
"`~PyTypeObject.tp_itemsize` field comes in.  This will be dealt with "
"later. ::"
msgstr ""
"Ці поля повідомляють середовищі виконання, скільки пам’яті виділяти під час "
"створення нових об’єктів цього типу. У Python є деяка вбудована підтримка "
"структур змінної довжини (наприклад, рядків, кортежів), у яких і з’являється "
"поле :c:member:`~PyTypeObject.tp_itemsize`. Це буде розглянуто пізніше. ::"

#: ../../extending/newtypes.rst:46
msgid ""
"Here you can put a string (or its address) that you want returned when the "
"Python script references ``obj.__doc__`` to retrieve the doc string."
msgstr ""
"Tu możesz wstawić ciąg znaków (lub jego adres) który chcesz zwrócić gdy "
"skrypt języka pytonowskiego odnosi się do ``obj.__doc__`` aby otrzymać ciąg "
"znaków dokumentacji."

#: ../../extending/newtypes.rst:49
msgid ""
"Now we come to the basic type methods -- the ones most extension types will "
"implement."
msgstr ""
"Тепер ми підходимо до методів базового типу — тих, які реалізовуватимуть "
"більшість типів розширень."

#: ../../extending/newtypes.rst:54
msgid "Finalization and De-allocation"
msgstr "Finalizowanie i de-alokacja"

#: ../../extending/newtypes.rst:66
msgid ""
"This function is called when the reference count of the instance of your "
"type is reduced to zero and the Python interpreter wants to reclaim it.  If "
"your type has memory to free or other clean-up to perform, you can put it "
"here.  The object itself needs to be freed here as well.  Here is an example "
"of this function::"
msgstr ""
"Ця функція викликається, коли кількість посилань екземпляра вашого типу "
"зменшується до нуля, і інтерпретатор Python хоче відновити його. Якщо у "
"вашому типі є пам’ять, яку потрібно звільнити або виконати інше очищення, ви "
"можете розмістити це тут. Тут також потрібно звільнити сам об'єкт. Ось "
"приклад цієї функції:"

#: ../../extending/newtypes.rst:79
msgid ""
"If your type supports garbage collection, the destructor should call :c:func:"
"`PyObject_GC_UnTrack` before clearing any member fields::"
msgstr ""
"Якщо ваш тип підтримує збирання сміття, деструктор має викликати :c:func:"
"`PyObject_GC_UnTrack` перед очищенням будь-яких полів-членів::"

#: ../../extending/newtypes.rst:95
msgid ""
"One important requirement of the deallocator function is that it leaves any "
"pending exceptions alone.  This is important since deallocators are "
"frequently called as the interpreter unwinds the Python stack; when the "
"stack is unwound due to an exception (rather than normal returns), nothing "
"is done to protect the deallocators from seeing that an exception has "
"already been set.  Any actions which a deallocator performs which may cause "
"additional Python code to be executed may detect that an exception has been "
"set.  This can lead to misleading errors from the interpreter.  The proper "
"way to protect against this is to save a pending exception before performing "
"the unsafe action, and restoring it when done.  This can be done using the :"
"c:func:`PyErr_Fetch` and :c:func:`PyErr_Restore` functions::"
msgstr ""
"Однією з важливих вимог до функції розповсюджувача є те, що вона залишає "
"будь-які незавершені винятки. Це важливо, оскільки делокатори часто "
"викликаються, коли інтерпретатор розгортає стек Python; коли стек "
"розгортається через виняток (а не звичайні повернення), нічого не робиться "
"для захисту розповсюджувачів від того, що виняток уже встановлено. Будь-які "
"дії, які виконує розповсюджувач, які можуть спричинити виконання додаткового "
"коду Python, можуть виявити, що встановлено виняток. Це може призвести до "
"оманливих помилок перекладача. Правильний спосіб захисту від цього — "
"зберегти очікуваний виняток перед виконанням небезпечної дії та відновити "
"його після завершення. Це можна зробити за допомогою функцій :c:func:"
"`PyErr_Fetch` і :c:func:`PyErr_Restore`:"

#: ../../extending/newtypes.rst:134
msgid ""
"There are limitations to what you can safely do in a deallocator function. "
"First, if your type supports garbage collection (using :c:member:"
"`~PyTypeObject.tp_traverse` and/or :c:member:`~PyTypeObject.tp_clear`), some "
"of the object's members can have been cleared or finalized by the time :c:"
"member:`~PyTypeObject.tp_dealloc` is called.  Second, in :c:member:"
"`~PyTypeObject.tp_dealloc`, your object is in an unstable state: its "
"reference count is equal to zero.  Any call to a non-trivial object or API "
"(as in the example above) might end up calling :c:member:`~PyTypeObject."
"tp_dealloc` again, causing a double free and a crash."
msgstr ""
"Існують обмеження щодо того, що ви можете безпечно робити у функції "
"розповсюджувача. По-перше, якщо ваш тип підтримує збирання сміття (за "
"допомогою :c:member:`~PyTypeObject.tp_traverse` та/або :c:member:"
"`~PyTypeObject.tp_clear`), деякі члени об’єкта можуть бути очищені або "
"завершені за допомогою час виклику :c:member:`~PyTypeObject.tp_dealloc`. По-"
"друге, у :c:member:`~PyTypeObject.tp_dealloc` ваш об’єкт перебуває в "
"нестабільному стані: його кількість посилань дорівнює нулю. Будь-який виклик "
"нетривіального об’єкта або API (як у наведеному вище прикладі) може "
"призвести до повторного виклику :c:member:`~PyTypeObject.tp_dealloc`, "
"викликаючи подвійне звільнення та збій."

#: ../../extending/newtypes.rst:143
msgid ""
"Starting with Python 3.4, it is recommended not to put any complex "
"finalization code in :c:member:`~PyTypeObject.tp_dealloc`, and instead use "
"the new :c:member:`~PyTypeObject.tp_finalize` type method."
msgstr ""
"Починаючи з Python 3.4, рекомендується не розміщувати будь-який складний код "
"фіналізації в :c:member:`~PyTypeObject.tp_dealloc`, а замість цього "
"використовувати новий метод типу :c:member:`~PyTypeObject.tp_finalize`."

#: ../../extending/newtypes.rst:148
msgid ":pep:`442` explains the new finalization scheme."
msgstr ":pep:`442` пояснює нову схему завершення."

#: ../../extending/newtypes.rst:155
msgid "Object Presentation"
msgstr "Prezentacja Przedmiotów"

#: ../../extending/newtypes.rst:157
msgid ""
"In Python, there are two ways to generate a textual representation of an "
"object: the :func:`repr` function, and the :func:`str` function.  (The :func:"
"`print` function just calls :func:`str`.)  These handlers are both optional."
msgstr ""
"W Pythonie istnieją dwa sposoby aby wygenerować tekstową reprezentację "
"przedmiotu: funkcja :func:`repr`, i funkcja :func:`str`. (Zadanie :func:"
"`print` po prostu wywołuje zadanie :func:`str`.) Ta zadania obsługi są oba "
"opcjonalne."

#: ../../extending/newtypes.rst:166
msgid ""
"The :c:member:`~PyTypeObject.tp_repr` handler should return a string object "
"containing a representation of the instance for which it is called.  Here is "
"a simple example::"
msgstr ""
"Обробник :c:member:`~PyTypeObject.tp_repr` має повертати рядковий об’єкт, що "
"містить представлення примірника, для якого він викликається. Ось простий "
"приклад::"

#: ../../extending/newtypes.rst:177
msgid ""
"If no :c:member:`~PyTypeObject.tp_repr` handler is specified, the "
"interpreter will supply a representation that uses the type's :c:member:"
"`~PyTypeObject.tp_name` and a uniquely identifying value for the object."
msgstr ""
"Если обработчик :c:member:`~PyTypeObject.tp_repr` не указан, интерпретатор "
"предоставит представление, которое использует тип :c:member:`~PyTypeObject."
"tp_name` и уникально идентифицирующее значение для объекта."

#: ../../extending/newtypes.rst:181
msgid ""
"The :c:member:`~PyTypeObject.tp_str` handler is to :func:`str` what the :c:"
"member:`~PyTypeObject.tp_repr` handler described above is to :func:`repr`; "
"that is, it is called when Python code calls :func:`str` on an instance of "
"your object.  Its implementation is very similar to the :c:member:"
"`~PyTypeObject.tp_repr` function, but the resulting string is intended for "
"human consumption.  If :c:member:`~PyTypeObject.tp_str` is not specified, "
"the :c:member:`~PyTypeObject.tp_repr` handler is used instead."
msgstr ""
"Обробник :c:member:`~PyTypeObject.tp_str` є :func:`str` тим же, що описаний "
"вище обробник :c:member:`~PyTypeObject.tp_repr` :func:`repr`; тобто він "
"викликається, коли код Python викликає :func:`str` для екземпляра вашого "
"об’єкта. Його реалізація дуже схожа на функцію :c:member:`~PyTypeObject."
"tp_repr`, але отриманий рядок призначений для використання людиною. Якщо :c:"
"member:`~PyTypeObject.tp_str` не вказано, замість нього використовується "
"обробник :c:member:`~PyTypeObject.tp_repr`."

#: ../../extending/newtypes.rst:188
msgid "Here is a simple example::"
msgstr "Tu jest prosty przykład::"

#: ../../extending/newtypes.rst:200
msgid "Attribute Management"
msgstr "Zarządzanie własnościami"

#: ../../extending/newtypes.rst:202
msgid ""
"For every object which can support attributes, the corresponding type must "
"provide the functions that control how the attributes are resolved.  There "
"needs to be a function which can retrieve attributes (if any are defined), "
"and another to set attributes (if setting attributes is allowed).  Removing "
"an attribute is a special case, for which the new value passed to the "
"handler is ``NULL``."
msgstr ""
"Для кожного об’єкта, який може підтримувати атрибути, відповідний тип "
"повинен забезпечувати функції, які контролюють, як атрибути вирішуються. "
"Потрібна функція, яка може отримувати атрибути (якщо такі визначені), і інша "
"для встановлення атрибутів (якщо встановлення атрибутів дозволено). "
"Видалення атрибута є особливим випадком, для якого нове значення, передане "
"обробнику, є ``NULL``."

#: ../../extending/newtypes.rst:208
msgid ""
"Python supports two pairs of attribute handlers; a type that supports "
"attributes only needs to implement the functions for one pair.  The "
"difference is that one pair takes the name of the attribute as a :c:expr:"
"`char\\*`, while the other accepts a :c:expr:`PyObject*`.  Each type can use "
"whichever pair makes more sense for the implementation's convenience. ::"
msgstr ""
"Python поддерживает две пары обработчиков атрибутов; тип, поддерживающий "
"атрибуты, должен реализовывать функции только для одной пары. Разница в том, "
"что одна пара принимает имя атрибута как :c:expr:`char\\*`, а другая "
"принимает :c:expr:`PyObject*`. Каждый тип может использовать любую пару, "
"которая имеет больше смысла для удобства реализации. ::"

#: ../../extending/newtypes.rst:220
msgid ""
"If accessing attributes of an object is always a simple operation (this will "
"be explained shortly), there are generic implementations which can be used "
"to provide the :c:expr:`PyObject*` version of the attribute management "
"functions. The actual need for type-specific attribute handlers almost "
"completely disappeared starting with Python 2.2, though there are many "
"examples which have not been updated to use some of the new generic "
"mechanism that is available."
msgstr ""
"Если доступ к атрибутам объекта всегда является простой операцией (это будет "
"объяснено ниже), существуют общие реализации, которые можно использовать для "
"предоставления версии :c:expr:`PyObject*` функций управления атрибутами. "
"Фактическая необходимость в обработчиках атрибутов, специфичных для "
"конкретного типа, почти полностью исчезла, начиная с Python 2.2, хотя "
"существует множество примеров, которые не были обновлены для использования "
"некоторых доступных новых универсальных механизмов."

#: ../../extending/newtypes.rst:231
msgid "Generic Attribute Management"
msgstr "Zastępcze zarządzanie właściwościami"

#: ../../extending/newtypes.rst:233
msgid ""
"Most extension types only use *simple* attributes.  So, what makes the "
"attributes simple?  There are only a couple of conditions that must be met:"
msgstr ""
"Większość typów rozszerzeń używa tylko *prostych* właściwości. Więc, co "
"sprawia że właściwości są proste? Istnieje tylko kilka warunków które należy "
"spełnić:"

#: ../../extending/newtypes.rst:236
msgid ""
"The name of the attributes must be known when :c:func:`PyType_Ready` is "
"called."
msgstr ""
"Під час виклику :c:func:`PyType_Ready` мають бути відомі назви атрибутів."

#: ../../extending/newtypes.rst:239
msgid ""
"No special processing is needed to record that an attribute was looked up or "
"set, nor do actions need to be taken based on the value."
msgstr ""
"Żadne szczególne przetwarzanie nie jest potrzebne aby zarejestrować, że "
"właściwość została pobrana lub ustawiona, ani też działania nie muszą być "
"podejmowane w oparciu o wartość."

#: ../../extending/newtypes.rst:242
msgid ""
"Note that this list does not place any restrictions on the values of the "
"attributes, when the values are computed, or how relevant data is stored."
msgstr ""
"Zauważ że ta lista nie umieszcza żadnych ograniczeń na wartościach "
"właściwości, gdy wartości są obliczane, lub jak istotne dane są "
"przechowywane."

#: ../../extending/newtypes.rst:245
msgid ""
"When :c:func:`PyType_Ready` is called, it uses three tables referenced by "
"the type object to create :term:`descriptor`\\s which are placed in the "
"dictionary of the type object.  Each descriptor controls access to one "
"attribute of the instance object.  Each of the tables is optional; if all "
"three are ``NULL``, instances of the type will only have attributes that are "
"inherited from their base type, and should leave the :c:member:"
"`~PyTypeObject.tp_getattro` and :c:member:`~PyTypeObject.tp_setattro` fields "
"``NULL`` as well, allowing the base type to handle attributes."
msgstr ""
"Коли викликається :c:func:`PyType_Ready`, він використовує три таблиці, на "
"які посилається об’єкт типу, щоб створити :term:`descriptor`\\, які "
"розміщуються в словнику об’єкта типу. Кожен дескриптор керує доступом до "
"одного атрибута об'єкта екземпляра. Кожна з таблиць необов'язкова; якщо всі "
"три мають значення ``NULL``, екземпляри типу матимуть лише атрибути, "
"успадковані від їх базового типу, і повинні залишити поля :c:member:"
"`~PyTypeObject.tp_getattro` і :c:member:`~PyTypeObject.tp_setattro` як "
"``NULL``, що дозволяє базовому типу обробляти атрибути."

#: ../../extending/newtypes.rst:253
msgid "The tables are declared as three fields of the type object::"
msgstr "Tabele są zadeklarowane jako trzy pola przedmiotu typu::"

#: ../../extending/newtypes.rst:259
msgid ""
"If :c:member:`~PyTypeObject.tp_methods` is not ``NULL``, it must refer to an "
"array of :c:type:`PyMethodDef` structures.  Each entry in the table is an "
"instance of this structure::"
msgstr ""
"Якщо :c:member:`~PyTypeObject.tp_methods` не є ``NULL``, він має посилатися "
"на масив структур :c:type:`PyMethodDef`. Кожен запис у таблиці є екземпляром "
"цієї структури:"

#: ../../extending/newtypes.rst:270
msgid ""
"One entry should be defined for each method provided by the type; no entries "
"are needed for methods inherited from a base type.  One additional entry is "
"needed at the end; it is a sentinel that marks the end of the array.  The :c:"
"member:`~PyMethodDef.ml_name` field of the sentinel must be ``NULL``."
msgstr ""
"Для каждого метода, предоставляемого типом, должна быть определена одна "
"запись; для методов, унаследованных от базового типа, записи не требуются. В "
"конце необходима еще одна запись; это индикатор, отмечающий конец массива. "
"Поле :c:member:`~PyMethodDef.ml_name` дозорного должно быть ``NULL``."

#: ../../extending/newtypes.rst:275
msgid ""
"The second table is used to define attributes which map directly to data "
"stored in the instance.  A variety of primitive C types are supported, and "
"access may be read-only or read-write.  The structures in the table are "
"defined as::"
msgstr ""
"Druga tabela jest używana aby określać właściwości które odnoszą się "
"bezpośrednio do danych przechowywanych w przykładzie. Różnorodne podstawowe "
"typy C są wspierane, i dostęp może być albo tylko-do-odczytu lub odczyt-i-"
"zapis. Struktury w tabeli są określone jako::"

#: ../../extending/newtypes.rst:287
msgid ""
"For each entry in the table, a :term:`descriptor` will be constructed and "
"added to the type which will be able to extract a value from the instance "
"structure.  The :c:member:`~PyMemberDef.type` field should contain one of "
"the type codes defined in the :file:`structmember.h` header; the value will "
"be used to determine how to convert Python values to and from C values.  "
"The :c:member:`~PyMemberDef.flags` field is used to store flags which "
"control how the attribute can be accessed."
msgstr ""

#: ../../extending/newtypes.rst:294
msgid ""
"The following flag constants are defined in :file:`structmember.h`; they may "
"be combined using bitwise-OR."
msgstr ""

#: ../../extending/newtypes.rst:298
msgid "Constant"
msgstr "Constante"

#: ../../extending/newtypes.rst:298
msgid "Meaning"
msgstr "Significado"

#: ../../extending/newtypes.rst:300
msgid ":const:`READONLY`"
msgstr ":const:`READONLY`"

#: ../../extending/newtypes.rst:300
msgid "Never writable."
msgstr ""

#: ../../extending/newtypes.rst:302
msgid ":const:`PY_AUDIT_READ`"
msgstr ""

#: ../../extending/newtypes.rst:302
msgid ""
"Emit an ``object.__getattr__`` :ref:`audit events <audit-events>` before "
"reading."
msgstr ""

#: ../../extending/newtypes.rst:307
msgid ""
":c:macro:`RESTRICTED`, :c:macro:`READ_RESTRICTED` and :c:macro:"
"`WRITE_RESTRICTED` are deprecated. However, :c:macro:`READ_RESTRICTED` is an "
"alias for :c:macro:`PY_AUDIT_READ`, so fields that specify either :c:macro:"
"`RESTRICTED` or :c:macro:`READ_RESTRICTED` will also raise an audit event."
msgstr ""

#: ../../extending/newtypes.rst:320
msgid ""
"An interesting advantage of using the :c:member:`~PyTypeObject.tp_members` "
"table to build descriptors that are used at runtime is that any attribute "
"defined this way can have an associated doc string simply by providing the "
"text in the table.  An application can use the introspection API to retrieve "
"the descriptor from the class object, and get the doc string using its :attr:"
"`!__doc__` attribute."
msgstr ""

#: ../../extending/newtypes.rst:326
msgid ""
"As with the :c:member:`~PyTypeObject.tp_methods` table, a sentinel entry "
"with a :c:member:`~PyMethodDef.ml_name` value of ``NULL`` is required."
msgstr ""
"Как и в случае с таблицей :c:member:`~PyTypeObject.tp_methods`, требуется "
"контрольная запись со значением :c:member:`~PyMethodDef.ml_name`, равным "
"``NULL``."

#: ../../extending/newtypes.rst:340
msgid "Type-specific Attribute Management"
msgstr "Szczególne-dla-typu-przedmiotu zarządzanie właściwościami"

#: ../../extending/newtypes.rst:342
msgid ""
"For simplicity, only the :c:expr:`char\\*` version will be demonstrated "
"here; the type of the name parameter is the only difference between the :c:"
"expr:`char\\*` and :c:expr:`PyObject*` flavors of the interface. This "
"example effectively does the same thing as the generic example above, but "
"does not use the generic support added in Python 2.2.  It explains how the "
"handler functions are called, so that if you do need to extend their "
"functionality, you'll understand what needs to be done."
msgstr ""
"Для простоты здесь будет продемонстрирована только версия :c:expr:`char\\*`; "
"тип параметра name — единственное различие между вариантами интерфейса :c:"
"expr:`char\\*` и :c:expr:`PyObject*`. Этот пример фактически делает то же "
"самое, что и общий пример выше, но не использует универсальную поддержку, "
"добавленную в Python 2.2. Там объясняется, как вызываются функции-"
"обработчики, так что если вам понадобится расширить их функциональность, вы "
"поймете, что нужно сделать."

#: ../../extending/newtypes.rst:350
msgid ""
"The :c:member:`~PyTypeObject.tp_getattr` handler is called when the object "
"requires an attribute look-up.  It is called in the same situations where "
"the :meth:`~object.__getattr__` method of a class would be called."
msgstr ""
"Обработчик :c:member:`~PyTypeObject.tp_getattr` вызывается, когда объекту "
"требуется поиск атрибута. Он вызывается в тех же ситуациях, когда вызывается "
"метод :meth:`~object.__getattr__` класса."

#: ../../extending/newtypes.rst:354
msgid "Here is an example::"
msgstr "Aqui está um exemplo::"

#: ../../extending/newtypes.rst:370
msgid ""
"The :c:member:`~PyTypeObject.tp_setattr` handler is called when the :meth:"
"`~object.__setattr__` or :meth:`~object.__delattr__` method of a class "
"instance would be called.  When an attribute should be deleted, the third "
"parameter will be ``NULL``.  Here is an example that simply raises an "
"exception; if this were really all you wanted, the :c:member:`~PyTypeObject."
"tp_setattr` handler should be set to ``NULL``. ::"
msgstr ""
"Обработчик :c:member:`~PyTypeObject.tp_setattr` вызывается, когда будет "
"вызван метод :meth:`~object.__setattr__` или :meth:`~object.__delattr__` "
"экземпляра класса. Если атрибут необходимо удалить, третьим параметром будет "
"значение NULL. Вот пример, который просто вызывает исключение; если бы это "
"было действительно все, что вам нужно, обработчик :c:member:`~PyTypeObject."
"tp_setattr` должен быть установлен в значение ``NULL``. ::"

#: ../../extending/newtypes.rst:384
msgid "Object Comparison"
msgstr "Porównywanie przedmiotów"

#: ../../extending/newtypes.rst:390
msgid ""
"The :c:member:`~PyTypeObject.tp_richcompare` handler is called when "
"comparisons are needed.  It is analogous to the :ref:`rich comparison "
"methods <richcmpfuncs>`, like :meth:`!__lt__`, and also called by :c:func:"
"`PyObject_RichCompare` and :c:func:`PyObject_RichCompareBool`."
msgstr ""
"Обработчик :c:member:`~PyTypeObject.tp_richcompare` вызывается, когда "
"необходимо сравнение. Он аналогичен :ref:`методам расширенного сравнения "
"<richcmpfuncs>`, например :meth:`!__lt__`, и также вызывается :c:func:"
"`PyObject_RichCompare` и :c:func:`PyObject_RichCompareBool`."

#: ../../extending/newtypes.rst:395
msgid ""
"This function is called with two Python objects and the operator as "
"arguments, where the operator is one of ``Py_EQ``, ``Py_NE``, ``Py_LE``, "
"``Py_GE``, ``Py_LT`` or ``Py_GT``.  It should compare the two objects with "
"respect to the specified operator and return ``Py_True`` or ``Py_False`` if "
"the comparison is successful, ``Py_NotImplemented`` to indicate that "
"comparison is not implemented and the other object's comparison method "
"should be tried, or ``NULL`` if an exception was set."
msgstr ""
"Ця функція викликається з двома об’єктами Python і оператором як "
"аргументами, де оператор є одним із ``Py_EQ``, ``Py_NE``, ``Py_LE``, "
"``Py_GE``, ``Py_LT`` або ``Py_GT``. Він має порівняти два об’єкти щодо "
"вказаного оператора та повернути ``Py_True`` або ``Py_False``, якщо "
"порівняння успішне, ``Py_NotImplemented``, щоб вказати, що порівняння не "
"реалізовано, а метод порівняння іншого об’єкта має спробувати, або ``NULL``, "
"якщо встановлено виняток."

#: ../../extending/newtypes.rst:403
msgid ""
"Here is a sample implementation, for a datatype that is considered equal if "
"the size of an internal pointer is equal::"
msgstr ""
"Tu jest przykładowe wypełnienie, dla typu danych który jest uznawany za "
"równy, jeśli rozmiar wewnętrznego wskaźnika jest równy::"

#: ../../extending/newtypes.rst:433
msgid "Abstract Protocol Support"
msgstr "Wsparcie protokołu abstrakcyjnego"

#: ../../extending/newtypes.rst:435
msgid ""
"Python supports a variety of *abstract* 'protocols;' the specific interfaces "
"provided to use these interfaces are documented in :ref:`abstract`."
msgstr ""
"Python wspiera różne *abstrakcyjne* 'protokoły;' szczegółowe interfejsy "
"dostarczone do użycia tych interfejsów są udokumentowane w :ref:`abstract`."

#: ../../extending/newtypes.rst:439
msgid ""
"A number of these abstract interfaces were defined early in the development "
"of the Python implementation.  In particular, the number, mapping, and "
"sequence protocols have been part of Python since the beginning.  Other "
"protocols have been added over time.  For protocols which depend on several "
"handler routines from the type implementation, the older protocols have been "
"defined as optional blocks of handlers referenced by the type object.  For "
"newer protocols there are additional slots in the main type object, with a "
"flag bit being set to indicate that the slots are present and should be "
"checked by the interpreter.  (The flag bit does not indicate that the slot "
"values are non-``NULL``. The flag may be set to indicate the presence of a "
"slot, but a slot may still be unfilled.) ::"
msgstr ""
"Деякі з цих абстрактних інтерфейсів були визначені на початку розробки "
"реалізації Python. Зокрема, протоколи чисел, відображення та послідовності "
"були частиною Python з самого початку. З часом були додані інші протоколи. "
"Для протоколів, які залежать від кількох підпрограм обробників із реалізації "
"типу, старіші протоколи були визначені як додаткові блоки обробників, на які "
"посилається об’єкт типу. Для новіших протоколів є додаткові слоти в об’єкті "
"основного типу, із встановленим бітом прапора, який вказує, що слоти "
"присутні та повинні бути перевірені інтерпретатором. (Біт прапора не вказує "
"на те, що значення слота не є ``NULL``. Прапор може бути встановлений для "
"вказівки на наявність слота, але слот все ще може бути незаповненим.) ::"

#: ../../extending/newtypes.rst:454
msgid ""
"If you wish your object to be able to act like a number, a sequence, or a "
"mapping object, then you place the address of a structure that implements "
"the C type :c:type:`PyNumberMethods`, :c:type:`PySequenceMethods`, or :c:"
"type:`PyMappingMethods`, respectively. It is up to you to fill in this "
"structure with appropriate values. You can find examples of the use of each "
"of these in the :file:`Objects` directory of the Python source "
"distribution. ::"
msgstr ""
"Якщо ви бажаєте, щоб ваш об’єкт діяв як число, послідовність або об’єкт "
"відображення, тоді ви розміщуєте адресу структури, яка реалізує тип C :c:"
"type:`PyNumberMethods`, :c:type:`PySequenceMethods` або :c:type:"
"`PyMappingMethods` відповідно. Ви повинні заповнити цю структуру "
"відповідними значеннями. Ви можете знайти приклади використання кожного з "
"них у каталозі :file:`Objects` вихідного коду Python. ::"

#: ../../extending/newtypes.rst:463
msgid ""
"This function, if you choose to provide it, should return a hash number for "
"an instance of your data type. Here is a simple example::"
msgstr ""
"Ця функція, якщо ви вирішите її надати, має повертати хеш-номер для "
"екземпляра вашого типу даних. Ось простий приклад::"

#: ../../extending/newtypes.rst:476
msgid ""
":c:type:`!Py_hash_t` is a signed integer type with a platform-varying width. "
"Returning ``-1`` from :c:member:`~PyTypeObject.tp_hash` indicates an error, "
"which is why you should be careful to avoid returning it when hash "
"computation is successful, as seen above."
msgstr ""
":c:type:`!Py_hash_t` — это целочисленный тип со знаком, ширина которого "
"зависит от платформы. Возврат ``-1`` из :c:member:`~PyTypeObject.tp_hash` "
"указывает на ошибку, поэтому вам следует быть осторожным, чтобы не "
"возвращать его при успешном вычислении хэша, как показано выше."

#: ../../extending/newtypes.rst:485
msgid ""
"This function is called when an instance of your data type is \"called\", "
"for example, if ``obj1`` is an instance of your data type and the Python "
"script contains ``obj1('hello')``, the :c:member:`~PyTypeObject.tp_call` "
"handler is invoked."
msgstr ""
"Ця функція викликається, коли \"викликається\" екземпляр вашого типу даних, "
"наприклад, якщо ``obj1`` є екземпляром вашого типу даних і сценарій Python "
"містить ``obj1('hello')``, то :c:member:`~PyTypeObject.tp_call` обробник "
"викликається."

#: ../../extending/newtypes.rst:489
msgid "This function takes three arguments:"
msgstr "To zadanie pobiera trzy parametry:"

#: ../../extending/newtypes.rst:491
msgid ""
"*self* is the instance of the data type which is the subject of the call. If "
"the call is ``obj1('hello')``, then *self* is ``obj1``."
msgstr ""
"*self* — це екземпляр типу даних, який є предметом виклику. Якщо виклик "
"``obj1('hello')``, то *self* є ``obj1``."

#: ../../extending/newtypes.rst:494
msgid ""
"*args* is a tuple containing the arguments to the call.  You can use :c:func:"
"`PyArg_ParseTuple` to extract the arguments."
msgstr ""
"*args* — це кортеж, що містить аргументи виклику. Ви можете використовувати :"
"c:func:`PyArg_ParseTuple`, щоб отримати аргументи."

#: ../../extending/newtypes.rst:497
msgid ""
"*kwds* is a dictionary of keyword arguments that were passed. If this is non-"
"``NULL`` and you support keyword arguments, use :c:func:"
"`PyArg_ParseTupleAndKeywords` to extract the arguments.  If you do not want "
"to support keyword arguments and this is non-``NULL``, raise a :exc:"
"`TypeError` with a message saying that keyword arguments are not supported."
msgstr ""
"*kwds* — це словник переданих ключових аргументів. Якщо це не ``NULL`` і ви "
"підтримуєте аргументи ключових слів, використовуйте :c:func:"
"`PyArg_ParseTupleAndKeywords`, щоб отримати аргументи. Якщо ви не хочете "
"підтримувати аргументи ключових слів і це не ``NULL``, викличте :exc:"
"`TypeError` із повідомленням про те, що аргументи ключових слів не "
"підтримуються."

#: ../../extending/newtypes.rst:503
msgid "Here is a toy ``tp_call`` implementation::"
msgstr "Ось реалізація іграшки ``tp_call``::"

#: ../../extending/newtypes.rst:529
msgid ""
"These functions provide support for the iterator protocol.  Both handlers "
"take exactly one parameter, the instance for which they are being called, "
"and return a new reference.  In the case of an error, they should set an "
"exception and return ``NULL``.  :c:member:`~PyTypeObject.tp_iter` "
"corresponds to the Python :meth:`~object.__iter__` method, while :c:member:"
"`~PyTypeObject.tp_iternext` corresponds to the Python :meth:`~iterator."
"__next__` method."
msgstr ""
"Эти функции обеспечивают поддержку протокола итератора. Оба обработчика "
"принимают ровно один параметр — экземпляр, для которого они вызываются, — и "
"возвращают новую ссылку. В случае ошибки они должны установить исключение и "
"вернуть NULL. :c:member:`~PyTypeObject.tp_iter` соответствует методу Python :"
"meth:`~object.__iter__`, а :c:member:`~PyTypeObject.tp_iternext` "
"соответствует методу Python :meth:`~iterator.__next__ `метод."

#: ../../extending/newtypes.rst:536
msgid ""
"Any :term:`iterable` object must implement the :c:member:`~PyTypeObject."
"tp_iter` handler, which must return an :term:`iterator` object.  Here the "
"same guidelines apply as for Python classes:"
msgstr ""
"Будь-який об’єкт :term:`iterable` повинен реалізовувати обробник :c:member:"
"`~PyTypeObject.tp_iter`, який має повертати об’єкт :term:`iterator`. Тут "
"застосовуються ті самі правила, що й для класів Python:"

#: ../../extending/newtypes.rst:540
msgid ""
"For collections (such as lists and tuples) which can support multiple "
"independent iterators, a new iterator should be created and returned by each "
"call to :c:member:`~PyTypeObject.tp_iter`."
msgstr ""
"Для колекцій (таких як списки та кортежі), які можуть підтримувати кілька "
"незалежних ітераторів, новий ітератор слід створювати та повертати під час "
"кожного виклику :c:member:`~PyTypeObject.tp_iter`."

#: ../../extending/newtypes.rst:543
msgid ""
"Objects which can only be iterated over once (usually due to side effects of "
"iteration, such as file objects) can implement :c:member:`~PyTypeObject."
"tp_iter` by returning a new reference to themselves -- and should also "
"therefore implement the :c:member:`~PyTypeObject.tp_iternext`  handler."
msgstr ""
"Об’єкти, які можна повторити лише один раз (зазвичай через побічні ефекти "
"ітерації, такі як файлові об’єкти), можуть реалізувати :c:member:"
"`~PyTypeObject.tp_iter`, повертаючи нове посилання на себе — і тому також "
"повинні реалізувати :c:member:`~PyTypeObject.tp_iternext` обробник."

#: ../../extending/newtypes.rst:548
msgid ""
"Any :term:`iterator` object should implement both :c:member:`~PyTypeObject."
"tp_iter` and :c:member:`~PyTypeObject.tp_iternext`.  An iterator's :c:member:"
"`~PyTypeObject.tp_iter` handler should return a new reference to the "
"iterator.  Its :c:member:`~PyTypeObject.tp_iternext` handler should return a "
"new reference to the next object in the iteration, if there is one. If the "
"iteration has reached the end, :c:member:`~PyTypeObject.tp_iternext` may "
"return ``NULL`` without setting an exception, or it may set :exc:"
"`StopIteration` *in addition* to returning ``NULL``; avoiding the exception "
"can yield slightly better performance.  If an actual error occurs, :c:member:"
"`~PyTypeObject.tp_iternext` should always set an exception and return "
"``NULL``."
msgstr ""
"Будь-який об’єкт :term:`iterator` повинен реалізовувати як :c:member:"
"`~PyTypeObject.tp_iter`, так і :c:member:`~PyTypeObject.tp_iternext`. "
"Обробник :c:member:`~PyTypeObject.tp_iter` ітератора має повертати нове "
"посилання на ітератор. Його :c:member:`~PyTypeObject.tp_iternext` обробник "
"має повернути нове посилання на наступний об’єкт у ітерації, якщо він є. "
"Якщо ітерація досягла кінця, :c:member:`~PyTypeObject.tp_iternext` може "
"повернути ``NULL`` без встановлення винятку, або він може встановити :exc:"
"`StopIteration` *на додаток* до повернення ``NULL``; уникнення винятку може "
"дати трохи кращу продуктивність. Якщо сталася фактична помилка, :c:member:"
"`~PyTypeObject.tp_iternext` має завжди встановлювати виняток і повертати "
"``NULL``."

#: ../../extending/newtypes.rst:564
msgid "Weak Reference Support"
msgstr "Wsparcie dla słabych odniesień"

#: ../../extending/newtypes.rst:566
msgid ""
"One of the goals of Python's weak reference implementation is to allow any "
"type to participate in the weak reference mechanism without incurring the "
"overhead on performance-critical objects (such as numbers)."
msgstr ""
"Одна з цілей реалізації слабкого посилання Python полягає в тому, щоб "
"дозволити будь-якому типу брати участь у механізмі слабкого посилання без "
"накладних витрат на критичні для продуктивності об’єкти (наприклад, числа)."

#: ../../extending/newtypes.rst:571
msgid "Documentation for the :mod:`weakref` module."
msgstr "Documentação do módulo :mod:`weakref`."

#: ../../extending/newtypes.rst:573
msgid ""
"For an object to be weakly referencable, the extension type must do two "
"things:"
msgstr ""

#: ../../extending/newtypes.rst:575
msgid ""
"Include a :c:expr:`PyObject*` field in the C object structure dedicated to "
"the weak reference mechanism.  The object's constructor should leave it "
"``NULL`` (which is automatic when using the default :c:member:`~PyTypeObject."
"tp_alloc`)."
msgstr ""

#: ../../extending/newtypes.rst:580
msgid ""
"Set the :c:member:`~PyTypeObject.tp_weaklistoffset` type member to the "
"offset of the aforementioned field in the C object structure, so that the "
"interpreter knows how to access and modify that field."
msgstr ""

#: ../../extending/newtypes.rst:584
msgid ""
"Concretely, here is how a trivial object structure would be augmented with "
"the required field::"
msgstr ""

#: ../../extending/newtypes.rst:592
msgid "And the corresponding member in the statically declared type object::"
msgstr ""

#: ../../extending/newtypes.rst:600
msgid ""
"The only further addition is that ``tp_dealloc`` needs to clear any weak "
"references (by calling :c:func:`PyObject_ClearWeakRefs`) if the field is non-"
"``NULL``::"
msgstr ""

#: ../../extending/newtypes.rst:616
msgid "More Suggestions"
msgstr "Więcej sugestii"

#: ../../extending/newtypes.rst:618
msgid ""
"In order to learn how to implement any specific method for your new data "
"type, get the :term:`CPython` source code.  Go to the :file:`Objects` "
"directory, then search the C source files for ``tp_`` plus the function you "
"want (for example, ``tp_richcompare``).  You will find examples of the "
"function you want to implement."
msgstr ""
"Щоб дізнатися, як реалізувати певний метод для вашого нового типу даних, "
"отримайте вихідний код :term:`CPython`. Перейдіть до каталогу :file:"
"`Objects`, потім знайдіть у вихідних файлах C ``tp_`` і потрібну функцію "
"(наприклад, ``tp_richcompare``). Ви знайдете приклади функцій, які ви хочете "
"реалізувати."

#: ../../extending/newtypes.rst:624
msgid ""
"When you need to verify that an object is a concrete instance of the type "
"you are implementing, use the :c:func:`PyObject_TypeCheck` function.  A "
"sample of its use might be something like the following::"
msgstr ""
"Якщо вам потрібно перевірити, чи об’єкт є конкретним екземпляром типу, який "
"ви реалізуєте, використовуйте функцію :c:func:`PyObject_TypeCheck`. Приклад "
"його використання може бути приблизно таким:"

#: ../../extending/newtypes.rst:635
msgid "Download CPython source releases."
msgstr "Завантажте вихідні версії CPython."

#: ../../extending/newtypes.rst:635
msgid "https://www.python.org/downloads/source/"
msgstr "https://www.python.org/downloads/source/"

#: ../../extending/newtypes.rst:637
msgid ""
"The CPython project on GitHub, where the CPython source code is developed."
msgstr "Проект CPython на GitHub, де розробляється вихідний код CPython."

#: ../../extending/newtypes.rst:638
msgid "https://github.com/python/cpython"
msgstr "https://github.com/python/cpython"

#: ../../extending/newtypes.rst:56
msgid "object"
msgstr "objeto"

#: ../../extending/newtypes.rst:56
msgid "deallocation"
msgstr "освобождение"

#: ../../extending/newtypes.rst:56
msgid "deallocation, object"
msgstr "освобождение, объект"

#: ../../extending/newtypes.rst:56
msgid "finalization"
msgstr "завершение"

#: ../../extending/newtypes.rst:56
msgid "finalization, of objects"
msgstr "доработка объектов"

#: ../../extending/newtypes.rst:91
msgid "PyErr_Fetch (C function)"
msgstr "PyErr_Fetch (C функция)"

#: ../../extending/newtypes.rst:91
msgid "PyErr_Restore (C function)"
msgstr "PyErr_Restore (C функция)"

#: ../../extending/newtypes.rst:150
msgid "string"
msgstr "string"

#: ../../extending/newtypes.rst:150
msgid "object representation"
msgstr "представление объекта"

#: ../../extending/newtypes.rst:150
msgid "built-in function"
msgstr "função embutida"

#: ../../extending/newtypes.rst:150
msgid "repr"
msgstr "repr"

#: ../../extending/newtypes.rst:313
msgid "READONLY"
msgstr ""

#: ../../extending/newtypes.rst:313
msgid "READ_RESTRICTED"
msgstr ""

#: ../../extending/newtypes.rst:313
msgid "WRITE_RESTRICTED"
msgstr ""

#: ../../extending/newtypes.rst:313
msgid "RESTRICTED"
msgstr ""

#: ../../extending/newtypes.rst:313
msgid "PY_AUDIT_READ"
msgstr ""
