# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-18 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:34+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../tutorial/stdlib.rst:5
msgid "Brief Tour of the Standard Library"
msgstr "Um breve passeio pela biblioteca padrão"

#: ../../tutorial/stdlib.rst:11
msgid "Operating System Interface"
msgstr "Interface com o sistema operacional"

#: ../../tutorial/stdlib.rst:13
msgid ""
"The :mod:`os` module provides dozens of functions for interacting with the "
"operating system::"
msgstr ""
"O módulo :mod:`os` fornece dúzias de funções para interagir com o sistema "
"operacional::"

#: ../../tutorial/stdlib.rst:16
msgid ""
">>> import os\n"
">>> os.getcwd()      # Return the current working directory\n"
"'C:\\\\Python312'\n"
">>> os.chdir('/server/accesslogs')   # Change current working directory\n"
">>> os.system('mkdir today')   # Run the command mkdir in the system shell\n"
"0"
msgstr ""

#: ../../tutorial/stdlib.rst:23
msgid ""
"Be sure to use the ``import os`` style instead of ``from os import *``.  "
"This will keep :func:`os.open` from shadowing the built-in :func:`open` "
"function which operates much differently."
msgstr ""
"Certifique-se de usar a forma ``import os`` ao invés de ``from os import "
"*``. Isso evitará que :func:`os.open` oculte a função :func:`open` que opera "
"de forma muito diferente."

#: ../../tutorial/stdlib.rst:29
msgid ""
"The built-in :func:`dir` and :func:`help` functions are useful as "
"interactive aids for working with large modules like :mod:`os`::"
msgstr ""
"As funções embutidas :func:`dir` e :func:`help` são úteis como um sistema de "
"ajuda interativa para lidar com módulos grandes como :mod:`os`::"

#: ../../tutorial/stdlib.rst:32
msgid ""
">>> import os\n"
">>> dir(os)\n"
"<returns a list of all module functions>\n"
">>> help(os)\n"
"<returns an extensive manual page created from the module's docstrings>"
msgstr ""
">>> import os\n"
">>> dir(os)\n"
"<retorna uma lista de todas as funções do módulo>\n"
">>> help(os)\n"
"<retorna uma página de manual extensa criada a partir das docstrings do "
"módulo>"

#: ../../tutorial/stdlib.rst:38
msgid ""
"For daily file and directory management tasks, the :mod:`shutil` module "
"provides a higher level interface that is easier to use::"
msgstr ""
"Para tarefas de gerenciamento cotidiano de arquivos e diretórios, o módulo :"
"mod:`shutil` fornece uma interface de alto nível que é mais simples de usar::"

#: ../../tutorial/stdlib.rst:41
msgid ""
">>> import shutil\n"
">>> shutil.copyfile('data.db', 'archive.db')\n"
"'archive.db'\n"
">>> shutil.move('/build/executables', 'installdir')\n"
"'installdir'"
msgstr ""
">>> import shutil\n"
">>> shutil.copyfile('dados.db', 'arquivo.db')\n"
"'arquivo.db'\n"
">>> shutil.move('/build/executáveis', 'dir_instal')\n"
"'dir_instal'"

#: ../../tutorial/stdlib.rst:51
msgid "File Wildcards"
msgstr "Caracteres curinga"

#: ../../tutorial/stdlib.rst:53
msgid ""
"The :mod:`glob` module provides a function for making file lists from "
"directory wildcard searches::"
msgstr ""
"O módulo :mod:`glob` fornece uma função para criar listas de arquivos a "
"partir de buscas em diretórios usando caracteres curinga::"

#: ../../tutorial/stdlib.rst:56
msgid ""
">>> import glob\n"
">>> glob.glob('*.py')\n"
"['primes.py', 'random.py', 'quote.py']"
msgstr ""
">>> import glob\n"
">>> glob.glob('*.py')\n"
"['primos.py', 'aleatorizar.py', 'aspas.py']"

#: ../../tutorial/stdlib.rst:64
msgid "Command Line Arguments"
msgstr "Argumentos de linha de comando"

#: ../../tutorial/stdlib.rst:66
msgid ""
"Common utility scripts often need to process command line arguments. These "
"arguments are stored in the :mod:`sys` module's *argv* attribute as a list.  "
"For instance, let's take the following :file:`demo.py` file::"
msgstr ""
"Scripts geralmente precisam processar argumentos passados na linha de "
"comando. Esses argumentos são armazenados como uma lista no atributo *argv* "
"do módulo :mod:`sys`. Por exemplo, consideremos o arquivo :file:`demo.py` a "
"seguir::"

#: ../../tutorial/stdlib.rst:70
msgid ""
"# File demo.py\n"
"import sys\n"
"print(sys.argv)"
msgstr ""
"# Arquivo demo.py\n"
"import sys\n"
"print(sys.argv)"

#: ../../tutorial/stdlib.rst:74
msgid ""
"Here is the output from running ``python demo.py one two three`` at the "
"command line::"
msgstr ""
"Aqui está a saída da execução ``python demo.py um dois três`` na linha de "
"comando::"

#: ../../tutorial/stdlib.rst:77
msgid "['demo.py', 'one', 'two', 'three']"
msgstr "['demo.py', 'um', 'dois, 'três']"

#: ../../tutorial/stdlib.rst:79
msgid ""
"The :mod:`argparse` module provides a more sophisticated mechanism to "
"process command line arguments.  The following script extracts one or more "
"filenames and an optional number of lines to be displayed::"
msgstr ""
"O módulo :mod:`argparse` fornece um mecanismo mais sofisticado para "
"processar argumentos de linha de comando. O script seguinte extrai e exibe "
"um ou mais nomes de arquivos e um número de linhas opcional::"

#: ../../tutorial/stdlib.rst:83
msgid ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser(\n"
"    prog='top',\n"
"    description='Show top lines from each file')\n"
"parser.add_argument('filenames', nargs='+')\n"
"parser.add_argument('-l', '--lines', type=int, default=10)\n"
"args = parser.parse_args()\n"
"print(args)"
msgstr ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser(\n"
"    prog='topo',\n"
"    description='Mostra as primeiras linhas de cada arquivo')\n"
"parser.add_argument('arquivos, nargs='+')\n"
"parser.add_argument('-l', '--linhas', type=int, default=10)\n"
"args = parser.parse_args()\n"
"print(args)"

#: ../../tutorial/stdlib.rst:93
msgid ""
"When run at the command line with ``python top.py --lines=5 alpha.txt beta."
"txt``, the script sets ``args.lines`` to ``5`` and ``args.filenames`` to "
"``['alpha.txt', 'beta.txt']``."
msgstr ""
"Quando executada na linha de comando ``python topo.py --linhas=5 alfa.txt "
"beta.txt``, o script define ``args.linhas`` para ``5`` e ``args.arquivos`` "
"para ``['alfa.txt', 'beta.txt']``."

#: ../../tutorial/stdlib.rst:101
msgid "Error Output Redirection and Program Termination"
msgstr "Redirecionamento de erros e encerramento do programa"

#: ../../tutorial/stdlib.rst:103
msgid ""
"The :mod:`sys` module also has attributes for *stdin*, *stdout*, and "
"*stderr*. The latter is useful for emitting warnings and error messages to "
"make them visible even when *stdout* has been redirected::"
msgstr ""
"O módulo :mod:`sys` também possui atributos para *stdin*, *stdout* e "
"*stderr*. O último é usado para emitir avisos e mensagens de erros visíveis "
"mesmo quando *stdout* foi redirecionado::"

#: ../../tutorial/stdlib.rst:107
msgid ""
">>> sys.stderr.write('Warning, log file not found starting a new one\\n')\n"
"Warning, log file not found starting a new one"
msgstr ""
">>> sys.stderr.write('Aviso, arquivo log não encontrado, iniciando um "
"novo\\n')\n"
"Aviso, arquivo log não encontrado, iniciando um novo"

#: ../../tutorial/stdlib.rst:110
msgid "The most direct way to terminate a script is to use ``sys.exit()``."
msgstr "A forma mais direta de encerrar um script é usando ``sys.exit()``."

#: ../../tutorial/stdlib.rst:116
msgid "String Pattern Matching"
msgstr "Reconhecimento de padrões em strings"

#: ../../tutorial/stdlib.rst:118
msgid ""
"The :mod:`re` module provides regular expression tools for advanced string "
"processing. For complex matching and manipulation, regular expressions offer "
"succinct, optimized solutions::"
msgstr ""
"O módulo :mod:`re` fornece ferramentas para lidar com processamento de "
"strings através de expressões regulares. Para reconhecimento de padrões "
"complexos, expressões regulares oferecem uma solução sucinta e eficiente::"

#: ../../tutorial/stdlib.rst:122
msgid ""
">>> import re\n"
">>> re.findall(r'\\bf[a-z]*', 'which foot or hand fell fastest')\n"
"['foot', 'fell', 'fastest']\n"
">>> re.sub(r'(\\b[a-z]+) \\1', r'\\1', 'cat in the the hat')\n"
"'cat in the hat'"
msgstr ""
">>> import re\n"
">>> re.findall(r'\\br[a-z]*', 'o rato roeu a roupa do rei de roma')\n"
"['rato', 'roeu', 'roupa', 'rei', 'roma']\n"
">>> re.sub(r'(\\b[a-z]+) \\1', r'\\1', 'o gato de de chapéu')\n"
"'o gato de chapéu'"

#: ../../tutorial/stdlib.rst:128
msgid ""
"When only simple capabilities are needed, string methods are preferred "
"because they are easier to read and debug::"
msgstr ""
"Quando as exigências são simples, métodos de strings são preferíveis por "
"serem mais fáceis de ler e depurar::"

#: ../../tutorial/stdlib.rst:131
msgid ""
">>> 'tea for too'.replace('too', 'two')\n"
"'tea for two'"
msgstr ""
">>> 'xá para dois'.replace('xá', 'chá')\n"
"'chá para dois'"

#: ../../tutorial/stdlib.rst:138
msgid "Mathematics"
msgstr "Matemática"

#: ../../tutorial/stdlib.rst:140
msgid ""
"The :mod:`math` module gives access to the underlying C library functions "
"for floating-point math::"
msgstr ""
"O módulo :mod:`math` oferece acesso às funções da biblioteca C para "
"matemática de ponto flutuante::"

#: ../../tutorial/stdlib.rst:143
msgid ""
">>> import math\n"
">>> math.cos(math.pi / 4)\n"
"0.70710678118654757\n"
">>> math.log(1024, 2)\n"
"10.0"
msgstr ""
">>> import math\n"
">>> math.cos(math.pi / 4)\n"
"0.70710678118654757\n"
">>> math.log(1024, 2)\n"
"10.0"

#: ../../tutorial/stdlib.rst:149
msgid "The :mod:`random` module provides tools for making random selections::"
msgstr ""
"O módulo :mod:`random` fornece ferramentas para gerar seleções aleatórias::"

#: ../../tutorial/stdlib.rst:151
msgid ""
">>> import random\n"
">>> random.choice(['apple', 'pear', 'banana'])\n"
"'apple'\n"
">>> random.sample(range(100), 10)   # sampling without replacement\n"
"[30, 83, 16, 4, 8, 81, 41, 50, 18, 33]\n"
">>> random.random()    # random float\n"
"0.17970987693706186\n"
">>> random.randrange(6)    # random integer chosen from range(6)\n"
"4"
msgstr ""

#: ../../tutorial/stdlib.rst:161
msgid ""
"The :mod:`statistics` module calculates basic statistical properties (the "
"mean, median, variance, etc.) of numeric data::"
msgstr ""
"O módulo :mod:`statistics` calcula as propriedades estatísticas básicas (a "
"média, a mediana, a variação, etc.) de dados numéricos::"

#: ../../tutorial/stdlib.rst:164
msgid ""
">>> import statistics\n"
">>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]\n"
">>> statistics.mean(data)\n"
"1.6071428571428572\n"
">>> statistics.median(data)\n"
"1.25\n"
">>> statistics.variance(data)\n"
"1.3720238095238095"
msgstr ""
">>> import statistics\n"
">>> dados = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]\n"
">>> statistics.mean(dados)\n"
"1.6071428571428572\n"
">>> statistics.median(dados)\n"
"1.25\n"
">>> statistics.variance(dados)\n"
"1.3720238095238095"

#: ../../tutorial/stdlib.rst:173
msgid ""
"The SciPy project <https://scipy.org> has many other modules for numerical "
"computations."
msgstr ""
"O projeto SciPy <https://scipy.org> tem muitos outros módulos para cálculos "
"numéricos."

#: ../../tutorial/stdlib.rst:179
msgid "Internet Access"
msgstr "Acesso à internet"

#: ../../tutorial/stdlib.rst:181
msgid ""
"There are a number of modules for accessing the internet and processing "
"internet protocols. Two of the simplest are :mod:`urllib.request` for "
"retrieving data from URLs and :mod:`smtplib` for sending mail::"
msgstr ""
"Há diversos módulos para acesso e processamento de protocolos da internet. "
"Dois dos mais simples são :mod:`urllib.request` para efetuar download de "
"dados a partir de URLs e :mod:`smtplib` para enviar mensagens de correio "
"eletrônico::"

#: ../../tutorial/stdlib.rst:185
msgid ""
">>> from urllib.request import urlopen\n"
">>> with urlopen('http://worldtimeapi.org/api/timezone/etc/UTC.txt') as "
"response:\n"
"...     for line in response:\n"
"...         line = line.decode()             # Convert bytes to a str\n"
"...         if line.startswith('datetime'):\n"
"...             print(line.rstrip())         # Remove trailing newline\n"
"...\n"
"datetime: 2022-01-01T01:36:47.689215+00:00\n"
"\n"
">>> import smtplib\n"
">>> server = smtplib.SMTP('localhost')\n"
">>> server.sendmail('soothsayer@example.org', 'jcaesar@example.org',\n"
"... \"\"\"To: jcaesar@example.org\n"
"... From: soothsayer@example.org\n"
"...\n"
"... Beware the Ides of March.\n"
"... \"\"\")\n"
">>> server.quit()"
msgstr ""
">>> from urllib.request import urlopen\n"
">>> with urlopen('http://worldtimeapi.org/api/timezone/etc/UTC.txt') as "
"response:\n"
"...     for line in response:\n"
"...         line = line.decode()             # Converte bytes para str\n"
"...         if line.startswith('datetime'):\n"
"...             print(line.rstrip())         # Remove nova linha ao final\n"
"...\n"
"datetime: 2022-01-01T01:36:47.689215+00:00\n"
"\n"
">>> import smtplib\n"
">>> server = smtplib.SMTP('localhost')\n"
">>> server.sendmail('soothsayer@example.org', 'jcaesar@example.org',\n"
"... \"\"\"To: jcaesar@example.org\n"
"... From: soothsayer@example.org\n"
"...\n"
"... Beware the Ides of March.\n"
"... \"\"\")\n"
">>> server.quit()"

#: ../../tutorial/stdlib.rst:204
msgid "(Note that the second example needs a mailserver running on localhost.)"
msgstr ""
"(Note que o segundo exemplo precisa de um servidor de email rodando em "
"localhost.)"

#: ../../tutorial/stdlib.rst:210
msgid "Dates and Times"
msgstr "Data e hora"

#: ../../tutorial/stdlib.rst:212
msgid ""
"The :mod:`datetime` module supplies classes for manipulating dates and times "
"in both simple and complex ways. While date and time arithmetic is "
"supported, the focus of the implementation is on efficient member extraction "
"for output formatting and manipulation.  The module also supports objects "
"that are timezone aware. ::"
msgstr ""
"O módulo :mod:`datetime` fornece classes para manipulação de datas e horas "
"nas mais variadas formas. Apesar da disponibilidade de aritmética com data e "
"hora, o foco da implementação é na extração eficiente dos membros para "
"formatação e manipulação. O módulo também oferece objetos que levam os fusos "
"horários em consideração. ::"

#: ../../tutorial/stdlib.rst:218
msgid ""
">>> # dates are easily constructed and formatted\n"
">>> from datetime import date\n"
">>> now = date.today()\n"
">>> now\n"
"datetime.date(2003, 12, 2)\n"
">>> now.strftime(\"%m-%d-%y. %d %b %Y is a %A on the %d day of %B.\")\n"
"'12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'\n"
"\n"
">>> # dates support calendar arithmetic\n"
">>> birthday = date(1964, 7, 31)\n"
">>> age = now - birthday\n"
">>> age.days\n"
"14368"
msgstr ""
">>> # datas são facilmente construídas e formatadas\n"
">>> from datetime import date\n"
">>> now = date.today()\n"
">>> now\n"
"datetime.date(2003, 12, 2)\n"
">>> now.strftime(\"%m-%d-%y. %d %b %Y is a %A on the %d day of %B.\")\n"
"'12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'\n"
"\n"
">>> # datas têm suporte a matemática de calendário\n"
">>> birthday = date(1964, 7, 31)\n"
">>> age = now - birthday\n"
">>> age.days\n"
"14368"

#: ../../tutorial/stdlib.rst:236
msgid "Data Compression"
msgstr "Compressão de dados"

#: ../../tutorial/stdlib.rst:238
msgid ""
"Common data archiving and compression formats are directly supported by "
"modules including: :mod:`zlib`, :mod:`gzip`, :mod:`bz2`, :mod:`lzma`, :mod:"
"`zipfile` and :mod:`tarfile`. ::"
msgstr ""
"Formatos comuns de arquivamento e compressão de dados estão disponíveis "
"diretamente através de alguns módulos, entre eles: :mod:`zlib`, :mod:"
"`gzip`, :mod:`bz2`, :mod:`lzma`, :mod:`zipfile` and :mod:`tarfile`. ::"

#: ../../tutorial/stdlib.rst:242
msgid ""
">>> import zlib\n"
">>> s = b'witch which has which witches wrist watch'\n"
">>> len(s)\n"
"41\n"
">>> t = zlib.compress(s)\n"
">>> len(t)\n"
"37\n"
">>> zlib.decompress(t)\n"
"b'witch which has which witches wrist watch'\n"
">>> zlib.crc32(s)\n"
"226805979"
msgstr ""
">>> import zlib\n"
">>> s = b'A vaca malhada foi molhada por outra vaca molhada e malhada.'\n"
">>> len(s)\n"
"60\n"
">>> t = zlib.compress(s)\n"
">>> len(t)\n"
"47\n"
">>> zlib.decompress(t)\n"
"b'A vaca malhada foi molhada por outra vaca molhada e malhada.'\n"
">>> zlib.crc32(s)\n"
"2444551089"

#: ../../tutorial/stdlib.rst:258
msgid "Performance Measurement"
msgstr "Medição de desempenho"

#: ../../tutorial/stdlib.rst:260
msgid ""
"Some Python users develop a deep interest in knowing the relative "
"performance of different approaches to the same problem. Python provides a "
"measurement tool that answers those questions immediately."
msgstr ""
"Alguns usuários de Python desenvolvem um interesse profundo pelo desempenho "
"relativo de diferentes abordagens para o mesmo problema. Python oferece uma "
"ferramenta de medição que esclarece essas dúvidas rapidamente."

#: ../../tutorial/stdlib.rst:264
msgid ""
"For example, it may be tempting to use the tuple packing and unpacking "
"feature instead of the traditional approach to swapping arguments. The :mod:"
"`timeit` module quickly demonstrates a modest performance advantage::"
msgstr ""
"Por exemplo, pode ser tentador usar o empacotamento e desempacotamento de "
"tuplas ao invés da abordagem tradicional de permutar os argumentos. O "
"módulo :mod:`timeit` rapidamente mostra uma modesta vantagem de desempenho::"

#: ../../tutorial/stdlib.rst:268
msgid ""
">>> from timeit import Timer\n"
">>> Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()\n"
"0.57535828626024577\n"
">>> Timer('a,b = b,a', 'a=1; b=2').timeit()\n"
"0.54962537085770791"
msgstr ""
">>> from timeit import Timer\n"
">>> Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()\n"
"0.57535828626024577\n"
">>> Timer('a,b = b,a', 'a=1; b=2').timeit()\n"
"0.54962537085770791"

#: ../../tutorial/stdlib.rst:274
msgid ""
"In contrast to :mod:`timeit`'s fine level of granularity, the :mod:`profile` "
"and :mod:`pstats` modules provide tools for identifying time critical "
"sections in larger blocks of code."
msgstr ""
"Em contraste com a granularidade fina do módulo :mod:`timeit`, os módulos :"
"mod:`profile` e :mod:`pstats` oferecem ferramentas para identificar os "
"trechos mais críticos em grandes blocos de código."

#: ../../tutorial/stdlib.rst:282
msgid "Quality Control"
msgstr "Controle de qualidade"

#: ../../tutorial/stdlib.rst:284
msgid ""
"One approach for developing high quality software is to write tests for each "
"function as it is developed and to run those tests frequently during the "
"development process."
msgstr ""
"Uma das abordagens usadas no desenvolvimento de software de alta qualidade é "
"escrever testes para cada função à medida que é desenvolvida e executar "
"esses testes frequentemente durante o processo de desenvolvimento."

#: ../../tutorial/stdlib.rst:288
msgid ""
"The :mod:`doctest` module provides a tool for scanning a module and "
"validating tests embedded in a program's docstrings.  Test construction is "
"as simple as cutting-and-pasting a typical call along with its results into "
"the docstring. This improves the documentation by providing the user with an "
"example and it allows the doctest module to make sure the code remains true "
"to the documentation::"
msgstr ""
"O módulo :mod:`doctest` oferece uma ferramenta para realizar um trabalho de "
"varredura e validação de testes escritos nas strings de documentação "
"(docstrings) de um programa. A construção dos testes é tão simples quanto "
"copiar uma chamada típica juntamente com seus resultados e colá-los na "
"docstring. Isto aprimora a documentação, fornecendo ao usuário um exemplo "
"real, e permite que o módulo doctest verifique se o código continua fiel à "
"documentação::"

#: ../../tutorial/stdlib.rst:295
msgid ""
"def average(values):\n"
"    \"\"\"Computes the arithmetic mean of a list of numbers.\n"
"\n"
"    >>> print(average([20, 30, 70]))\n"
"    40.0\n"
"    \"\"\"\n"
"    return sum(values) / len(values)\n"
"\n"
"import doctest\n"
"doctest.testmod()   # automatically validate the embedded tests"
msgstr ""
"def average(values):\n"
"    \"\"\"Calcula a média aritmética da lista de números.\n"
"\n"
"    >>> print(average([20, 30, 70]))\n"
"    40.0\n"
"    \"\"\"\n"
"    return sum(values) / len(values)\n"
"\n"
"import doctest\n"
"doctest.testmod()   # valida automaticamente os testes incorporados"

#: ../../tutorial/stdlib.rst:306
msgid ""
"The :mod:`unittest` module is not as effortless as the :mod:`doctest` "
"module, but it allows a more comprehensive set of tests to be maintained in "
"a separate file::"
msgstr ""
"O módulo :mod:`unittest` não é tão simples de usar quanto o módulo :mod:"
"`doctest`, mas permite que um conjunto muito maior de testes seja mantido em "
"um arquivo separado::"

#: ../../tutorial/stdlib.rst:310
msgid ""
"import unittest\n"
"\n"
"class TestStatisticalFunctions(unittest.TestCase):\n"
"\n"
"    def test_average(self):\n"
"        self.assertEqual(average([20, 30, 70]), 40.0)\n"
"        self.assertEqual(round(average([1, 5, 7]), 1), 4.3)\n"
"        with self.assertRaises(ZeroDivisionError):\n"
"            average([])\n"
"        with self.assertRaises(TypeError):\n"
"            average(20, 30, 70)\n"
"\n"
"unittest.main()  # Calling from the command line invokes all tests"
msgstr ""
"import unittest\n"
"\n"
"class TestStatisticalFunctions(unittest.TestCase):\n"
"\n"
"    def test_average(self):\n"
"        self.assertEqual(average([20, 30, 70]), 40.0)\n"
"        self.assertEqual(round(average([1, 5, 7]), 1), 4.3)\n"
"        with self.assertRaises(ZeroDivisionError):\n"
"            average([])\n"
"        with self.assertRaises(TypeError):\n"
"            average(20, 30, 70)\n"
"\n"
"unittest.main()  # Chamar a partir da linha de comando invoca todos os testes"

#: ../../tutorial/stdlib.rst:328
msgid "Batteries Included"
msgstr "Baterias incluídas"

#: ../../tutorial/stdlib.rst:330
msgid ""
"Python has a \"batteries included\" philosophy.  This is best seen through "
"the sophisticated and robust capabilities of its larger packages. For "
"example:"
msgstr ""
"Python tem uma filosofia de \"baterias incluídas\". Isso fica mais evidente "
"através da sofisticação e robustez dos seus maiores pacotes. Por exemplo:"

#: ../../tutorial/stdlib.rst:333
msgid ""
"The :mod:`xmlrpc.client` and :mod:`xmlrpc.server` modules make implementing "
"remote procedure calls into an almost trivial task.  Despite the modules' "
"names, no direct knowledge or handling of XML is needed."
msgstr ""
"Os módulos :mod:`xmlrpc.client` e :mod:`xmlrpc.server` tornam a "
"implementação de chamadas remotas (remote procedure calls) em uma tarefa "
"quase trivial. Apesar dos nomes dos módulos, nenhum conhecimento direto ou "
"manipulação de XML é necessário."

#: ../../tutorial/stdlib.rst:337
msgid ""
"The :mod:`email` package is a library for managing email messages, including "
"MIME and other :rfc:`2822`-based message documents. Unlike :mod:`smtplib` "
"and :mod:`poplib` which actually send and receive messages, the email "
"package has a complete toolset for building or decoding complex message "
"structures (including attachments) and for implementing internet encoding "
"and header protocols."
msgstr ""
"O pacote :mod:`email` é uma biblioteca para gerenciamento de mensagens de "
"correio eletrônico, incluindo MIME e outros baseados no :rfc:`2822`. "
"Diferente dos módulos :mod:`smtplib` e :mod:`poplib` que apenas enviam e "
"recebem mensagens, o pacote de email tem um conjunto completo de ferramentas "
"para construir ou decodificar a estrutura de mensagens complexas (incluindo "
"anexos) e para implementação de protocolos de codificação e cabeçalhos."

#: ../../tutorial/stdlib.rst:344
msgid ""
"The :mod:`json` package provides robust support for parsing this popular "
"data interchange format.  The :mod:`csv` module supports direct reading and "
"writing of files in Comma-Separated Value format, commonly supported by "
"databases and spreadsheets.  XML processing is supported by the :mod:`xml."
"etree.ElementTree`, :mod:`xml.dom` and :mod:`xml.sax` packages. Together, "
"these modules and packages greatly simplify data interchange between Python "
"applications and other tools."
msgstr ""
"O pacote :mod:`json` oferece um suporte robusto para analisar este popular "
"formato para troca de dados. O módulo :mod:`csv` oferece suporte para "
"leitura e escrita direta em arquivos no formato Comma-Separated Value, "
"comumente suportado por bancos de dados e planilhas. O processamento XML é "
"fornecido pelos pacotes :mod:`xml.etree.ElementTree`, :mod:`xml.dom` e :mod:"
"`xml.sax`. Juntos, esses módulos e pacotes simplificam muito a troca de "
"informações entre aplicativos Python e outras ferramentas."

#: ../../tutorial/stdlib.rst:353
msgid ""
"The :mod:`sqlite3` module is a wrapper for the SQLite database library, "
"providing a persistent database that can be updated and accessed using "
"slightly nonstandard SQL syntax."
msgstr ""
"O módulo :mod:`sqlite3` é um wrapper para a biblioteca de banco de dados "
"SQLite, fornecendo um banco de dados persistente que pode ser atualizado e "
"acessado usando sintaxe SQL ligeiramente fora do padrão."

#: ../../tutorial/stdlib.rst:357
msgid ""
"Internationalization is supported by a number of modules including :mod:"
"`gettext`, :mod:`locale`, and the :mod:`codecs` package."
msgstr ""
"Internacionalização está disponível através de diversos módulos, como :mod:"
"`gettext`, :mod:`locale`, e o pacote :mod:`codecs`."

#: ../../tutorial/stdlib.rst:27
msgid "built-in function"
msgstr "função embutida"

#: ../../tutorial/stdlib.rst:27
msgid "help"
msgstr "help"
