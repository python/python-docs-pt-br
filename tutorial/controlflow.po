# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Hildeberto Abreu Magalhães <hildeberto@gmail.com>, 2019
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2019
# Adorilson Bezerra <adorilson@gmail.com>, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-23 16:56+0000\n"
"PO-Revision-Date: 2019-09-01 02:42+0000\n"
"Last-Translator: Adorilson Bezerra <adorilson@gmail.com>, 2019\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:5
msgid "More Control Flow Tools"
msgstr "Mais ferramentas de controle de fluxo"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:7
msgid ""
"Besides the :keyword:`while` statement just introduced, Python uses the "
"usual flow control statements known from other languages, with some twists."
msgstr ""
"Além do comando :keyword:`while` recém apresentado, Python tem as estruturas "
"usuais de controle de fluxo conhecidas em outras linguagens, com algumas "
"particulares."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:14
msgid ":keyword:`!if` Statements"
msgstr "Comandos :keyword:`!if`"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:16
msgid ""
"Perhaps the most well-known statement type is the :keyword:`if` statement.  "
"For example::"
msgstr ""
"Provavelmente o mais conhecido comando de controle de fluxo é o :keyword:"
"`if`. Por exemplo::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:33
msgid ""
"There can be zero or more :keyword:`elif` parts, and the :keyword:`else` "
"part is optional.  The keyword ':keyword:`!elif`' is short for 'else if', "
"and is useful to avoid excessive indentation.  An  :keyword:`!if` ... :"
"keyword:`!elif` ... :keyword:`!elif` ... sequence is a substitute for the "
"``switch`` or ``case`` statements found in other languages."
msgstr ""
"Pode haver zero ou mais partes :keyword:`elif`, e a parte :keyword:`else` é "
"opcional. A palavra-chave ':keyword:`!elif`' é uma abreviação para 'else "
"if', e é útil para evitar identação excessiva. Uma sequência :keyword:`!"
"if` ... :keyword:`!elif` ... :keyword:`!elif` ... substitui os comandos "
"``switch`` ou ``case``, encontrados em outras linguagens."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:43
msgid ":keyword:`!for` Statements"
msgstr "Comandos :keyword:`!for`"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:48
msgid ""
"The :keyword:`for` statement in Python differs a bit from what you may be "
"used to in C or Pascal.  Rather than always iterating over an arithmetic "
"progression of numbers (like in Pascal), or giving the user the ability to "
"define both the iteration step and halting condition (as C), Python's :"
"keyword:`!for` statement iterates over the items of any sequence (a list or "
"a string), in the order that they appear in the sequence.  For example (no "
"pun intended):"
msgstr ""
"O comando :keyword:`for` em Python é um pouco diferente do que costuma ser "
"em C ou Pascal. Ao invés de sempre iterar sobre uma progressão aritmética de "
"números (como no Pascal), ou permitir ao usuário definir o passo de iteração "
"e a condição de parada (como C), o comando :keyword:`!for` do Python itera "
"sobre os itens de qualquer sequência (seja uma lista ou uma string), na "
"ordem que aparecem na sequência. Por exemplo (sem trocadilhos):"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:69
msgid ""
"If you need to modify the sequence you are iterating over while inside the "
"loop (for example to duplicate selected items), it is recommended that you "
"first make a copy.  Iterating over a sequence does not implicitly make a "
"copy.  The slice notation makes this especially convenient::"
msgstr ""
"Se for necessário modificar a sequência, sobre a qual está iterando, dentro "
"do laço de repetição (por exemplo, para duplicar itens selecionados), é "
"recomendado que primeiro crie-se uma cópia da sequência. Iterar sobre uma "
"sequência não cria implicitamente uma cópia. A notação de fatiamento é "
"bastante conveniente para isso::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:81
msgid ""
"With ``for w in words:``, the example would attempt to create an infinite "
"list, inserting ``defenestrate`` over and over again."
msgstr ""
"Com ``for w in words:``, o exemplo tentaria criar uma lista infinita, "
"inserindo ``defenestrate`` uma e outra vez."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:88
msgid "The :func:`range` Function"
msgstr "A função :func:`range`"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:90
msgid ""
"If you do need to iterate over a sequence of numbers, the built-in function :"
"func:`range` comes in handy.  It generates arithmetic progressions::"
msgstr ""
"Se você precisar iterar sobre sequências numéricas, a função embutida :func:"
"`range` é a resposta. Ela gera progressões aritméticas::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:102
msgid ""
"The given end point is never part of the generated sequence; ``range(10)`` "
"generates 10 values, the legal indices for items of a sequence of length "
"10.  It is possible to let the range start at another number, or to specify "
"a different increment (even negative; sometimes this is called the 'step')::"
msgstr ""
"O ponto de parada fornecido nunca é incluído na lista; ``range(10)`` gera "
"uma lista com 10 valores, exatamente os índices válidos para uma sequência "
"de comprimento 10. É possível iniciar o intervalo em outro número, ou "
"alterar a razão da progressão (inclusive com passo negativo)::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:116
msgid ""
"To iterate over the indices of a sequence, you can combine :func:`range` "
"and :func:`len` as follows::"
msgstr ""
"Para iterar sobre os índices de uma sequência, combine :func:`range` e :func:"
"`len` da seguinte forma:"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:129
msgid ""
"In most such cases, however, it is convenient to use the :func:`enumerate` "
"function, see :ref:`tut-loopidioms`."
msgstr ""
"Na maioria dos casos, porém, é mais conveniente usar a função :func:"
"`enumerate`, veja :ref:`tut-loopidioms`."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:132
msgid "A strange thing happens if you just print a range::"
msgstr "Uma coisa estranha acontece se imprime-se um range::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:137
msgid ""
"In many ways the object returned by :func:`range` behaves as if it is a "
"list, but in fact it isn't. It is an object which returns the successive "
"items of the desired sequence when you iterate over it, but it doesn't "
"really make the list, thus saving space."
msgstr ""
"Em muitos aspectos, o objeto retornado pela função :func:`range` se comporta "
"como se fosse uma lista, mas na verdade não é. É um objeto que retorna os "
"itens sucessivos da sequência desejada quando você itera sobre a mesma, mas "
"na verdade ele não gera a lista, economizando espaço."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:142
msgid ""
"We say such an object is *iterable*, that is, suitable as a target for "
"functions and constructs that expect something from which they can obtain "
"successive items until the supply is exhausted. We have seen that the :"
"keyword:`for` statement is such an *iterator*. The function :func:`list` is "
"another; it creates lists from iterables::"
msgstr ""
"Nós dizemos que tal objeto é *iterável*, isto é, adequado como um alvo para "
"funções e construções que esperam algo do qual possam obter itens sucessivos "
"até que o suprimento se  esgote. Vimos que a instrução :keyword:`for` é um "
"*iterador*. A função :func:`list` é outro; cria listas de iteráveis::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:152
msgid ""
"Later we will see more functions that return iterables and take iterables as "
"argument."
msgstr ""
"Mais tarde, veremos mais funções que retornam *iteráveis* e recebem "
"*iteráveis* como argumento."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:158
msgid ""
":keyword:`!break` and :keyword:`!continue` Statements, and :keyword:`!else` "
"Clauses on Loops"
msgstr ""
"Comandos :keyword:`!break` e :keyword:`!continue`, e cláusula :keyword:`!"
"else`, nos laços de repetição"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:160
msgid ""
"The :keyword:`break` statement, like in C, breaks out of the innermost "
"enclosing :keyword:`for` or :keyword:`while` loop."
msgstr ""
"O comando :keyword:`break`, como no C, sai imediatamente do laço de "
"repetição mais interno, seja :keyword:`for` ou :keyword:`while`."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:163
msgid ""
"Loop statements may have an :keyword:`!else` clause; it is executed when the "
"loop terminates through exhaustion of the list (with :keyword:`for`) or when "
"the condition becomes false (with :keyword:`while`), but not when the loop "
"is terminated by a :keyword:`break` statement.  This is exemplified by the "
"following loop, which searches for prime numbers::"
msgstr ""
"Comanos de repetição podem ter uma cláusula :keyword:`!else`; que é "
"executada quando o laço termina, pela exaustão da lista (com :keyword:`for`) "
"ou quando a condição se torna falsa (com :keyword:`while`), mas não quando a "
"repetição é terminada por um comando :keyword:`break`.  Exemplificado a "
"seguir por um laço de repetição que busca por números primos::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:187
msgid ""
"(Yes, this is the correct code.  Look closely: the ``else`` clause belongs "
"to the :keyword:`for` loop, **not** the :keyword:`if` statement.)"
msgstr ""
"(Sim, o código está correto. Olhe atentamente: a cláusula ``else`` pertence "
"ao laço :keyword:`for`, e **não** ao comando :keyword:`if`.)"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:190
msgid ""
"When used with a loop, the ``else`` clause has more in common with the "
"``else`` clause of a :keyword:`try` statement than it does that of :keyword:"
"`if` statements: a :keyword:`!try` statement's ``else`` clause runs when no "
"exception occurs, and a loop's ``else`` clause runs when no ``break`` "
"occurs. For more on the :keyword:`!try` statement and exceptions, see :ref:"
"`tut-handling`."
msgstr ""
"Quando usado com um laço de repetição, a cláusula ``else`` tem mais em comum "
"com o ``else`` do comando :keyword:`try`, do que aquele dos comandos :"
"keyword:`if`:: a cláusula ``else`` do comando   :keyword:`!try` executa "
"quando nenhuma exceção ocorre, e a cláusula ``else`` dos laços de repetição "
"executa quando nenhum ``break`` ocorre. Mais explicações do comando :keyword:"
"`!try` e exceções, consulte :ref:`tut-handling`."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:197
msgid ""
"The :keyword:`continue` statement, also borrowed from C, continues with the "
"next iteration of the loop::"
msgstr ""
"A instrução :keyword:`continue`, também emprestada da linguagem C, continua "
"com a próxima iteração do laço::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:217
msgid ":keyword:`!pass` Statements"
msgstr "Comandos :keyword:`!pass`"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:219
msgid ""
"The :keyword:`pass` statement does nothing. It can be used when a statement "
"is required syntactically but the program requires no action. For example::"
msgstr ""
"O comando :keyword:`pass` não faz nada. Ela pode ser usada quando a sintaxe "
"exige um comando mas a semântica do programa não requer nenhuma ação. Por "
"exemplo::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:226
msgid "This is commonly used for creating minimal classes::"
msgstr "Isto é usado muitas vezes para se definir classes mínimas::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:232
msgid ""
"Another place :keyword:`pass` can be used is as a place-holder for a "
"function or conditional body when you are working on new code, allowing you "
"to keep thinking at a more abstract level.  The :keyword:`!pass` is silently "
"ignored::"
msgstr ""
"Outra ocasião em que o :keyword:`pass` pode ser usado é como um substituto "
"temporário para uma função ou bloco condicional, quando se está trabalhando "
"com código novo, ainda indefinido, permitindo que mantenha-se o pensamento "
"num nível mais abstrato. O :keyword:`!pass` é silenciosamente ignorado::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:243
msgid "Defining Functions"
msgstr "Definindo Funções"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:245
msgid ""
"We can create a function that writes the Fibonacci series to an arbitrary "
"boundary::"
msgstr ""
"Podemos criar uma função que escreve a série de Fibonacci até um limite "
"arbitrário::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:265
msgid ""
"The keyword :keyword:`def` introduces a function *definition*.  It must be "
"followed by the function name and the parenthesized list of formal "
"parameters. The statements that form the body of the function start at the "
"next line, and must be indented."
msgstr ""
"A palavra reservada :keyword:`def` inicia a *definição* de uma função. Ela "
"deve ser seguida do nome da função e da lista de parâmetros formais entre "
"parênteses. Os comandos que formam o corpo da função começam na linha "
"seguinte e devem ser indentados."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:270
msgid ""
"The first statement of the function body can optionally be a string literal; "
"this string literal is the function's documentation string, or :dfn:"
"`docstring`. (More about docstrings can be found in the section :ref:`tut-"
"docstrings`.) There are tools which use docstrings to automatically produce "
"online or printed documentation, or to let the user interactively browse "
"through code; it's good practice to include docstrings in code that you "
"write, so make a habit of it."
msgstr ""
"Opcionalmente, a primeira linha do corpo da função pode ser uma literal "
"string, cujo propósito é documentar a função. Se presente, essa string chama-"
"se :dfn:`docstring`. (Há mais informação sobre docstrings na seção :ref:`tut-"
"docstrings`.) Existem ferramentas que utilizam docstrings para produzir "
"automaticamente documentação online ou para imprimir, ou ainda, permitir que "
"o usuário navegue interativamente pelo código. É uma boa prática incluir "
"sempre docstrings em suas funções, portanto, tente fazer disso um hábito."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:277
msgid ""
"The *execution* of a function introduces a new symbol table used for the "
"local variables of the function.  More precisely, all variable assignments "
"in a function store the value in the local symbol table; whereas variable "
"references first look in the local symbol table, then in the local symbol "
"tables of enclosing functions, then in the global symbol table, and finally "
"in the table of built-in names. Thus, global variables and variables of "
"enclosing functions cannot be directly assigned a value within a function "
"(unless, for global variables, named in a :keyword:`global` statement, or, "
"for variables of enclosing functions, named in a :keyword:`nonlocal` "
"statement), although they may be referenced."
msgstr ""
"A *execução* de uma função cria uma nova tabela de símbolos para as "
"variáveis locais da função.  Mais precisamente, todas as atribuições de "
"variáveis numa função são armazenadas na tabela de símbolos local; "
"referências a variáveis são buscadas primeiro na tabela de símbolos local, "
"em seguida na tabela de símbolos locais de funções delimitadoras ou "
"circundantes, depois na tabela de símbolos global e, finalmente, na tabela "
"de nomes da própria linguagem. Embora possam ser referenciadas, variáveis "
"globais e de funções externas não podem ter atribuições (a menos que seja "
"utilizado o comando :keyword:`global`, para variáveis globais, ou :keyword:"
"`nonlocal`, para variáveis de funções externas)."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:288
msgid ""
"The actual parameters (arguments) to a function call are introduced in the "
"local symbol table of the called function when it is called; thus, arguments "
"are passed using *call by value* (where the *value* is always an object "
"*reference*, not the value of the object). [#]_ When a function calls "
"another function, a new local symbol table is created for that call."
msgstr ""
"Os parâmetros reais (argumentos) de uma chamada de função são introduzidos "
"na tabela de símbolos local da função no momento da chamada; portanto, "
"argumentos são passados *por valor* (onde o *valor* é sempre uma "
"*referência* para objeto, não o valor do objeto). [#]_ Quando uma função "
"chama outra função, uma nova tabela de símbolos é criada para tal chamada."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:294
msgid ""
"A function definition introduces the function name in the current symbol "
"table. The value of the function name has a type that is recognized by the "
"interpreter as a user-defined function.  This value can be assigned to "
"another name which can then also be used as a function.  This serves as a "
"general renaming mechanism::"
msgstr ""
"Uma definição de função introduz o nome da função na tabela de símbolos "
"atual. O valor associado ao nome da função tem um tipo que é reconhecido "
"pelo interpretador como uma função definida pelo usuário. Esse valor pode "
"ser atribuído a outros nomes que também podem ser usados como funções. Esse "
"mecanismo serve para renomear funções::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:306
msgid ""
"Coming from other languages, you might object that ``fib`` is not a function "
"but a procedure since it doesn't return a value.  In fact, even functions "
"without a :keyword:`return` statement do return a value, albeit a rather "
"boring one.  This value is called ``None`` (it's a built-in name).  Writing "
"the value ``None`` is normally suppressed by the interpreter if it would be "
"the only value written. You can see it if you really want to using :func:"
"`print`::"
msgstr ""
"Conhecendo outras linguagens, pode-se questionar que ``fib`` não é uma "
"função, mas um procedimento, pois ela não devolve um valor. Na verdade, "
"mesmo funções que não usam o comando :keyword:`return` devolvem um valor, "
"ainda que pouco interessante. Esse valor é chamado ``None`` (é um nome "
"embutido). O interpretador interativo evita escrever ``None`` quando ele é o "
"único resultado de uma expressão. Mas se quiser vê-lo pode usar o comando :"
"keyword:`print`::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:317
msgid ""
"It is simple to write a function that returns a list of the numbers of the "
"Fibonacci series, instead of printing it::"
msgstr ""
"É fácil escrever uma função que devolve uma lista de números da série de "
"Fibonacci, ao invés de exibi-los:"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:333
msgid "This example, as usual, demonstrates some new Python features:"
msgstr "Este exemplo demonstra novos recursos de Python:"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:335
msgid ""
"The :keyword:`return` statement returns with a value from a function. :"
"keyword:`!return` without an expression argument returns ``None``. Falling "
"off the end of a function also returns ``None``."
msgstr ""
"A instrução :keyword:`return` finaliza a execução e retorna um valor da "
"função. :keyword:`!return` sem qualquer expressão como argumento retorna "
"``None``. Atingir o final da função também retorna ``None``."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:339
msgid ""
"The statement ``result.append(a)`` calls a *method* of the list object "
"``result``.  A method is a function that 'belongs' to an object and is named "
"``obj.methodname``, where ``obj`` is some object (this may be an "
"expression), and ``methodname`` is the name of a method that is defined by "
"the object's type. Different types define different methods.  Methods of "
"different types may have the same name without causing ambiguity.  (It is "
"possible to define your own object types and methods, using *classes*, see :"
"ref:`tut-classes`) The method :meth:`append` shown in the example is defined "
"for list objects; it adds a new element at the end of the list.  In this "
"example it is equivalent to ``result = result + [a]``, but more efficient."
msgstr ""
"A instrução ``result.append(a)`` chama um *método* do objeto lista "
"``result``. Um método é uma função que 'pertence' a um objeto, e é chamada "
"``obj.methodname``, onde ``obj`` é um objeto qualquer (pode ser uma "
"expressão), e ``methodname`` é o nome de um método que foi definido pelo "
"tipo do objeto. Tipos diferentes definem métodos diferentes. Métodos de "
"diferentes tipos podem ter o mesmo nome sem ambiguidade. (É possível definir "
"seus próprios tipos de objetos e métodos, utilizando *classes*, veja em :ref:"
"`tut-classes`) O método :meth:`append`, mostrado no exemplo é definido para "
"objetos do tipo lista; adiciona um novo elemento ao final da lista. Neste "
"exemplo, ele equivale a ``result = result + [a]``, só que mais eficiente."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:354
msgid "More on Defining Functions"
msgstr "Mais sobre definição de funções"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:356
msgid ""
"It is also possible to define functions with a variable number of arguments. "
"There are three forms, which can be combined."
msgstr ""
"É possível definir funções com um número variável de argumentos. Existem "
"três formas, que podem ser combinadas."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:363
msgid "Default Argument Values"
msgstr "Argumento com valores padronizados"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:365
msgid ""
"The most useful form is to specify a default value for one or more "
"arguments. This creates a function that can be called with fewer arguments "
"than it is defined to allow.  For example::"
msgstr ""
"A mais útil das três é especificar um valor padronizado para um ou mais "
"argumentos. Isso cria uma função que pode ser invocada com menos argumentos "
"do que os que foram definidos. Por exemplo::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:381
msgid "This function can be called in several ways:"
msgstr "Essa função pode ser chamada de várias formas:"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:383
msgid ""
"giving only the mandatory argument: ``ask_ok('Do you really want to quit?')``"
msgstr ""
"fornecendo apenas o argumento obrigatório: ``ask_ok('Do you really want to "
"quit?')``"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:385
msgid ""
"giving one of the optional arguments: ``ask_ok('OK to overwrite the file?', "
"2)``"
msgstr ""
"fornecendo um dos argumentos opcionais: ``ask_ok('OK to overwrite the "
"file?', 2)``"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:387
msgid ""
"or even giving all arguments: ``ask_ok('OK to overwrite the file?', 2, 'Come "
"on, only yes or no!')``"
msgstr ""
"ou fornecendo todos os argumentos: ``ask_ok('OK to overwrite the file?', 2, "
"'Come on, only yes or no!')``"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:390
msgid ""
"This example also introduces the :keyword:`in` keyword. This tests whether "
"or not a sequence contains a certain value."
msgstr ""
"Este exemplo também introduz o operador :keyword:`in`, que verifica se uma "
"sequência contém ou não um determinado valor."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:393
msgid ""
"The default values are evaluated at the point of function definition in the "
"*defining* scope, so that ::"
msgstr ""
"Os valores padronizados são avaliados no momento da definição da função, e "
"no escopo em que a função foi *definida*, portanto::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:404
msgid "will print ``5``."
msgstr "irá exibir ``5``."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:406
msgid ""
"**Important warning:**  The default value is evaluated only once. This makes "
"a difference when the default is a mutable object such as a list, "
"dictionary, or instances of most classes.  For example, the following "
"function accumulates the arguments passed to it on subsequent calls::"
msgstr ""
"**Aviso importante:** Valores padronizados são avaliados apenas uma vez. "
"Isso faz diferença quando o valor é um objeto mutável, como uma lista, "
"dicionário, ou instâncias de classes. Por exemplo, a função a seguir acumula "
"os argumentos passados, nas chamadas subsequentes::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:419
msgid "This will print ::"
msgstr "Isso exibirá::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:425
msgid ""
"If you don't want the default to be shared between subsequent calls, you can "
"write the function like this instead::"
msgstr ""
"Se não quiser que o valor padrão seja compartilhado entre chamadas "
"subsequentes, pode reescrever a função assim::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:438
msgid "Keyword Arguments"
msgstr "Argumentos nomeados"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:440
msgid ""
"Functions can also be called using :term:`keyword arguments <keyword "
"argument>` of the form ``kwarg=value``.  For instance, the following "
"function::"
msgstr ""
"Funções também podem ser chamadas usando :term:`keyword arguments <keyword "
"argument>` da forma  ``kwarg=value``.  Por exemplo, a função a seguir::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:449
msgid ""
"accepts one required argument (``voltage``) and three optional arguments "
"(``state``, ``action``, and ``type``).  This function can be called in any "
"of the following ways::"
msgstr ""
"aceita um argumento obrigatório (``voltage``) e três argumentos opcionais "
"(``state``, ``action``, e ``type``). Esta função pode ser chamada de "
"qualquer uma dessas formas::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:460
msgid "but all the following calls would be invalid::"
msgstr "mas todas as formas a seguir seriam inválidas::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:467
msgid ""
"In a function call, keyword arguments must follow positional arguments. All "
"the keyword arguments passed must match one of the arguments accepted by the "
"function (e.g. ``actor`` is not a valid argument for the ``parrot`` "
"function), and their order is not important.  This also includes non-"
"optional arguments (e.g. ``parrot(voltage=1000)`` is valid too). No argument "
"may receive a value more than once. Here's an example that fails due to this "
"restriction::"
msgstr ""
"Numa chamada de função, argumentos nomeados devem vir depois dos argumentos "
"posicionais. Todos os argumentos nomeados passados devem corresponder com "
"argumentos aceitos pela função (ex. ``actor`` não é um argumento nomeado "
"válido para a função ``parrot``), mas sua ordem é irrelevante. Isto também "
"inclui argumentos obrigatórios (ex.: ``parrot(voltage=1000)`` funciona). "
"Nenhum argumento pode receber mais de um valor. Eis um exemplo que não "
"funciona devido a esta restrição::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:483
msgid ""
"When a final formal parameter of the form ``**name`` is present, it receives "
"a dictionary (see :ref:`typesmapping`) containing all keyword arguments "
"except for those corresponding to a formal parameter.  This may be combined "
"with a formal parameter of the form ``*name`` (described in the next "
"subsection) which receives a :ref:`tuple <tut-tuples>` containing the "
"positional arguments beyond the formal parameter list.  (``*name`` must "
"occur before ``**name``.) For example, if we define a function like this::"
msgstr ""
"Quando um último parâmetro formal no formato ``**name`` está presente, ele "
"recebe um dicionário (veja :ref:`typesmapping`) contendo todos os argumentos "
"nomeados, exceto aqueles que correspondem a um parâmetro formal.  Isto pode "
"ser combinado com um parâmetro formal no formato ``*name`` (descrito na "
"próxima subseção) que recebe uma :ref:`tuple <tut-tuples>` contendo os "
"argumentos posicionais, além da lista de parâmetros formais.  (``*name`` "
"deve ocorrer antes de  ``**name``.) Por exemplo, se definirmos uma função "
"assim::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:500
msgid "It could be called like this::"
msgstr "Pode ser chamada assim::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:508
msgid "and of course it would print:"
msgstr "e, claro, exibiria:"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:521
msgid ""
"Note that the order in which the keyword arguments are printed is guaranteed "
"to match the order in which they were provided in the function call."
msgstr ""
"Observe que a ordem em que os argumentos nomeados são exibidos é garantida "
"corresponder à ordem em que foram fornecidos na chamada da função."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:528
msgid "Arbitrary Argument Lists"
msgstr "Listas de argumentos arbitrários"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:533
msgid ""
"Finally, the least frequently used option is to specify that a function can "
"be called with an arbitrary number of arguments.  These arguments will be "
"wrapped up in a tuple (see :ref:`tut-tuples`).  Before the variable number "
"of arguments, zero or more normal arguments may occur. ::"
msgstr ""
"Finalmente, a opção menos usada é especificar que a função pode ser chamada "
"com um número arbitrário de argumentos. Esses argumentos serão empacotados "
"em uma tupla (ver :ref:`tut-tuples`). Antes dos argumentos em número "
"variável, zero ou mais argumentos normais podem estar presentes. ::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:542
msgid ""
"Normally, these ``variadic`` arguments will be last in the list of formal "
"parameters, because they scoop up all remaining input arguments that are "
"passed to the function. Any formal parameters which occur after the "
"``*args`` parameter are 'keyword-only' arguments, meaning that they can only "
"be used as keywords rather than positional arguments. ::"
msgstr ""
"Normalmente, esses argumentos ``variadic`` estarão no final da lista de "
"parâmetros formais, porque eles englobam todos os argumentos de entrada "
"restantes, que são passados para a função. Quaisquer parâmetros formais que "
"ocorrem após o parâmetro ``*args`` são argumentos 'chave-valor' nomeados, o "
"que significa que eles só podem ser usados como chave-valor, em vez de "
"argumentos posicionais::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:559
msgid "Unpacking Argument Lists"
msgstr "Desempacotando listas de argumentos"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:561
msgid ""
"The reverse situation occurs when the arguments are already in a list or "
"tuple but need to be unpacked for a function call requiring separate "
"positional arguments.  For instance, the built-in :func:`range` function "
"expects separate *start* and *stop* arguments.  If they are not available "
"separately, write the function call with the  ``*`` operator to unpack the "
"arguments out of a list or tuple::"
msgstr ""
"A situação contrária ocorre quando os argumentos já estão numa lista ou "
"tupla, mas precisam ser desempacotados, para chamar uma função que requer "
"argumentos posicionais.  Por exemplo, a função embutida :func:`range` espera "
"argumentos separados *start* e *stop*.  Se eles não estão disponíveis "
"separadamente, escreva a chamada da função com o operador ``*`` para "
"desempacotar os argumentos da lista ou tupla::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:577
msgid ""
"In the same fashion, dictionaries can deliver keyword arguments with the "
"``**`` operator::"
msgstr ""
"Da mesma maneira, dicionário podem entregar argumentos nomeados com o "
"operador ``**``::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:593
msgid "Lambda Expressions"
msgstr "Expressões lambda"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:595
msgid ""
"Small anonymous functions can be created with the :keyword:`lambda` keyword. "
"This function returns the sum of its two arguments: ``lambda a, b: a+b``. "
"Lambda functions can be used wherever function objects are required.  They "
"are syntactically restricted to a single expression.  Semantically, they are "
"just syntactic sugar for a normal function definition.  Like nested function "
"definitions, lambda functions can reference variables from the containing "
"scope::"
msgstr ""
"Pequenas funções anônimas podem ser criadas com a palavra-chave :keyword:"
"`lambda`. Esta função retorna a soma de seus dois argumentos: ``lambda a, b: "
"a+b``. As funções Lambda podem ser usadas sempre que objetos função forem "
"necessários. Eles são sintaticamente restritos a uma única expressão. "
"Semanticamente, eles são apenas açúcar sintático para uma definição de "
"função normal. Como definições de funções aninhadas, as funções lambda podem "
"referenciar variáveis contidas no escopo::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:612
msgid ""
"The above example uses a lambda expression to return a function.  Another "
"use is to pass a small function as an argument::"
msgstr ""
"O exemplo acima usa uma expressão lambda para retornar uma função. Outro uso "
"é passar uma pequena função como um argumento::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:624
msgid "Documentation Strings"
msgstr "Strings de documentação"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:631
msgid ""
"Here are some conventions about the content and formatting of documentation "
"strings."
msgstr ""
"Aqui estão algumas convenções sobre o conteúdo e formatação de strings de "
"documentação."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:634
msgid ""
"The first line should always be a short, concise summary of the object's "
"purpose.  For brevity, it should not explicitly state the object's name or "
"type, since these are available by other means (except if the name happens "
"to be a verb describing a function's operation).  This line should begin "
"with a capital letter and end with a period."
msgstr ""
"A primeira linha deve sempre ser curta, um resumo conciso do propósito do "
"objeto. Por brevidade, não deve explicitamente se referir ao nome ou tipo do "
"objeto, uma vez que estas informações estão disponíveis por outros meios "
"(exceto se o nome da função for o próprio verbo que descreve a finalidade da "
"função). Essa linha deve começar com letra maiúscula e terminar com ponto."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:640
msgid ""
"If there are more lines in the documentation string, the second line should "
"be blank, visually separating the summary from the rest of the description.  "
"The following lines should be one or more paragraphs describing the object's "
"calling conventions, its side effects, etc."
msgstr ""
"Se existem mais linhas na string de documentação, a segunda linha deve estar "
"em branco, separando visualmente o resumo do resto da descrição. As linhas "
"seguintes devem conter um ou mais parágrafos descrevendo as convenções de "
"chamada ao objeto, seus efeitos colaterais, etc."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:645
msgid ""
"The Python parser does not strip indentation from multi-line string literals "
"in Python, so tools that process documentation have to strip indentation if "
"desired.  This is done using the following convention. The first non-blank "
"line *after* the first line of the string determines the amount of "
"indentation for the entire documentation string.  (We can't use the first "
"line since it is generally adjacent to the string's opening quotes so its "
"indentation is not apparent in the string literal.)  Whitespace "
"\"equivalent\" to this indentation is then stripped from the start of all "
"lines of the string.  Lines that are indented less should not occur, but if "
"they occur all their leading whitespace should be stripped.  Equivalence of "
"whitespace should be tested after expansion of tabs (to 8 spaces, normally)."
msgstr ""
"O analisador Python não remove a indentação de literais string multi-linha. "
"Portanto, ferramentas que processem strings de documentação precisam lidar "
"com isso, quando desejável. Existe uma convenção para isso. A primeira linha "
"não vazia após a linha de sumário determina a indentação para o resto da "
"string de documentação. (Não podemos usar a primeira linha para isso porque "
"ela em geral está adjacente às aspas que iniciam a string, portanto sua "
"indentação real não fica aparente.) Espaços em branco \"equivalentes\" a "
"essa indentação são então removidos do início das demais linhas da string. "
"Linhas com indentação menor não devem ocorrer, mas se ocorrerem, todos os "
"espaços à sua esquerda são removidos. A equivalência de espaços em branco "
"deve ser testada após a expansão das tabulações (8 espaços, normalmente)."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:657
msgid "Here is an example of a multi-line docstring::"
msgstr "Eis um exemplo de uma docstring multi-linha::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:675
msgid "Function Annotations"
msgstr "Anotações de Função"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:683
msgid ""
":ref:`Function annotations <function>` are completely optional metadata "
"information about the types used by user-defined functions (see :pep:`3107` "
"and :pep:`484` for more information)."
msgstr ""
":ref:`Function annotations <function>` são informações metadados "
"completamente opcionais sobre os tipos usados pels funções definidas pelo "
"usuário (veja :pep:`3107` e :pep:`484` para mais informações)."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:687
msgid ""
":term:`Annotations <function annotation>` are stored in the :attr:"
"`__annotations__` attribute of the function as a dictionary and have no "
"effect on any other part of the function.  Parameter annotations are defined "
"by a colon after the parameter name, followed by an expression evaluating to "
"the value of the annotation.  Return annotations are defined by a literal ``-"
">``, followed by an expression, between the parameter list and the colon "
"denoting the end of the :keyword:`def` statement.  The following example has "
"a positional argument, a keyword argument, and the return value annotated::"
msgstr ""
":term:`Annotations <function annotation>` são armazenadas no atributo :attr:"
"`__annotations__` da função, como um dicionário, e não tem efeito em nenhuma "
"otra parte da função.  Anotações nos parâmetros são definidas por um dois-"
"pontos após o nome do parâmetro, seguido por uma expressão que representa o "
"valor da anotação.  Anotações de retorno são definidas pelo literal ``->``, "
"seguido por uma expressão, entre a lista de parâmetros e os dois-pontos que "
"indica o final do comando :keyword:`def`.  O exemplo a seguir tem um "
"argumento posicional, um argumento nomeado e o seu valor de retorno está "
"anotado::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:709
msgid "Intermezzo: Coding Style"
msgstr "Intermezzo: estilo de codificação"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:714
msgid ""
"Now that you are about to write longer, more complex pieces of Python, it is "
"a good time to talk about *coding style*.  Most languages can be written (or "
"more concise, *formatted*) in different styles; some are more readable than "
"others. Making it easy for others to read your code is always a good idea, "
"and adopting a nice coding style helps tremendously for that."
msgstr ""
"Agora que está prestes a escrever códigos mais longos e complexos em Python, "
"é um bom momento para falar sobre *estilo de codificação*. A maioria das "
"linguagens podem ser escritas (ou *formatadas*) em diferentes estilos; "
"alguns são mais legíveis do que outros. Tornar o seu código mais fácil de "
"ler, para os outros, é sempre uma boa ideia, e adotar um estilo de "
"codificação agradável ajuda bastante."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:720
msgid ""
"For Python, :pep:`8` has emerged as the style guide that most projects "
"adhere to; it promotes a very readable and eye-pleasing coding style.  Every "
"Python developer should read it at some point; here are the most important "
"points extracted for you:"
msgstr ""
"Em Python, o :pep:`8` tornou-se o guia de estilo adotado pela maioria dos "
"projetos; promove um estilo de codificação muito legível e visualmente "
"agradável. Todo desenvolvedor Python deve lê-lo em algum momento; eis os "
"pontos mais importantes, selecionados para você:"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:725
msgid "Use 4-space indentation, and no tabs."
msgstr "Use indentação com 4 espaços, e não use tabulações."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:727
msgid ""
"4 spaces are a good compromise between small indentation (allows greater "
"nesting depth) and large indentation (easier to read).  Tabs introduce "
"confusion, and are best left out."
msgstr ""
" 4 espaços são um bom meio termo entre indentação estreita (permite maior "
"profundidade de aninhamento) e indentação larga (mais fácil de ler). "
"Tabulações trazem complicações, e o melhor é não usar."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:731
msgid "Wrap lines so that they don't exceed 79 characters."
msgstr "Quebre as linhas de modo que não excedam 79 caracteres."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:733
msgid ""
"This helps users with small displays and makes it possible to have several "
"code files side-by-side on larger displays."
msgstr ""
"Isso ajuda os usuários com telas pequenas e torna possível abrir vários "
"arquivos de código lado a lado em telas maiores."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:736
msgid ""
"Use blank lines to separate functions and classes, and larger blocks of code "
"inside functions."
msgstr ""
"Deixe linhas em branco para separar funções e classes, e blocos de código "
"dentro de funções."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:739
msgid "When possible, put comments on a line of their own."
msgstr "Quando possível, coloque comentários em uma linha própria."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:741
msgid "Use docstrings."
msgstr "Escreva strings de documentação."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:743
msgid ""
"Use spaces around operators and after commas, but not directly inside "
"bracketing constructs: ``a = f(1, 2) + g(3, 4)``."
msgstr ""
"Use espaços ao redor de operadores e após vírgulas, mas não diretamente "
"dentro de parênteses, colchetes e chaves: ``a = f(1, 2) + g(3, 4)``."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:746
msgid ""
"Name your classes and functions consistently; the convention is to use "
"``UpperCamelCase`` for classes and ``lowercase_with_underscores`` for "
"functions and methods.  Always use ``self`` as the name for the first method "
"argument (see :ref:`tut-firstclasses` for more on classes and methods)."
msgstr ""
"Nomeie suas classes e funções de forma consistente; a convenção é usar "
"``MaiusculoCamelCase`` para classes e ``minusculo_com_underscores`` para "
"funções e métodos.  Sempre use ``self`` como o nome para o primeiro "
"argumento dos métodos (veja :ref:`tut-firstclasses` para mais informações "
"sobre classes e métodos)."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:751
msgid ""
"Don't use fancy encodings if your code is meant to be used in international "
"environments.  Python's default, UTF-8, or even plain ASCII work best in any "
"case."
msgstr ""
"Não use codificações exóticas se o seu código é feito para ser usado em um "
"contexto internacional. O padrão do Python, UTF-8, ou mesmo ASCII puro "
"funciona bem em qualquer caso."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:755
msgid ""
"Likewise, don't use non-ASCII characters in identifiers if there is only the "
"slightest chance people speaking a different language will read or maintain "
"the code."
msgstr ""
"Da mesma forma, não use caracteres não-ASCII em identificadores se houver "
"apenas a menor chance de pessoas falando um idioma diferente ler ou manter o "
"código."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:761
msgid "Footnotes"
msgstr "Notas de rodapé"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:762
msgid ""
"Actually, *call by object reference* would be a better description, since if "
"a mutable object is passed, the caller will see any changes the callee makes "
"to it (items inserted into a list)."
msgstr ""
"Na verdade, *passagem por referência para objeto* seria uma descrição "
"melhor, pois, se um objeto mutável for passado, quem chamou verá as "
"alterações feitas por quem foi chamado (por exemplo, a inclusão de itens em "
"uma lista)."
