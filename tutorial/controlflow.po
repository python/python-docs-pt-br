# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Hildeberto Abreu Magalhães <hildeberto@gmail.com>, 2021
# Alexandre B A Villares, 2021
# Vinicius Gubiani Ferreira <vini.g.fer@gmail.com>, 2023
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2023
# Octavio von Sydow <ocvs00@gmail.com>, 2023
# Adorilson Bezerra <adorilson@gmail.com>, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-18 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:50+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../tutorial/controlflow.rst:5
msgid "More Control Flow Tools"
msgstr "Mais ferramentas de controle de fluxo"

#: ../../tutorial/controlflow.rst:7
msgid ""
"As well as the :keyword:`while` statement just introduced, Python uses a few "
"more that we will encounter in this chapter."
msgstr ""
"Assim como a instrução :keyword:`while` que acabou de ser apresentada, o "
"Python usa mais algumas que encontraremos neste capítulo."

#: ../../tutorial/controlflow.rst:14
msgid ":keyword:`!if` Statements"
msgstr "Instruções :keyword:`!if`"

#: ../../tutorial/controlflow.rst:16
msgid ""
"Perhaps the most well-known statement type is the :keyword:`if` statement.  "
"For example::"
msgstr ""
"Provavelmente a mais conhecida instrução de controle de fluxo é o :keyword:"
"`if`. Por exemplo::"

#: ../../tutorial/controlflow.rst:19
msgid ""
">>> x = int(input(\"Please enter an integer: \"))\n"
"Please enter an integer: 42\n"
">>> if x < 0:\n"
"...     x = 0\n"
"...     print('Negative changed to zero')\n"
"... elif x == 0:\n"
"...     print('Zero')\n"
"... elif x == 1:\n"
"...     print('Single')\n"
"... else:\n"
"...     print('More')\n"
"...\n"
"More"
msgstr ""
">>> x = int(input(\"Insira um número inteiro: \"))\n"
"Insira um número inteiro: 42\n"
">>> if x < 0:\n"
"...     x = 0\n"
"...     print('Negativo alterado para zero')\n"
"... elif x == 0:\n"
"...     print('Zero')\n"
"... elif x == 1:\n"
"...     print('Um')\n"
"... else:\n"
"...     print('Mais')\n"
"...\n"
"Mais"

#: ../../tutorial/controlflow.rst:33
msgid ""
"There can be zero or more :keyword:`elif` parts, and the :keyword:`else` "
"part is optional.  The keyword ':keyword:`!elif`' is short for 'else if', "
"and is useful to avoid excessive indentation.  An  :keyword:`!if` ... :"
"keyword:`!elif` ... :keyword:`!elif` ... sequence is a substitute for the "
"``switch`` or ``case`` statements found in other languages."
msgstr ""
"Pode haver zero ou mais partes :keyword:`elif`, e a parte :keyword:`else` é "
"opcional. A palavra-chave ':keyword:`!elif`' é uma abreviação para 'else "
"if', e é útil para evitar indentação excessiva. Uma sequência :keyword:`!"
"if` ... :keyword:`!elif` ... :keyword:`!elif` ... substitui as instruções "
"``switch`` ou ``case``, encontrados em outras linguagens."

#: ../../tutorial/controlflow.rst:39
msgid ""
"If you're comparing the same value to several constants, or checking for "
"specific types or attributes, you may also find the :keyword:`!match` "
"statement useful. For more details see :ref:`tut-match`."
msgstr ""
"Se você está comparando o mesmo valor com várias constantes, ou verificando "
"por tipos ou atributos específicos, você também pode achar a instrução :"
"keyword:`!match` útil. Para mais detalhes veja :ref:`tut-match`."

#: ../../tutorial/controlflow.rst:46
msgid ":keyword:`!for` Statements"
msgstr "Instruções :keyword:`!for`"

#: ../../tutorial/controlflow.rst:51
msgid ""
"The :keyword:`for` statement in Python differs a bit from what you may be "
"used to in C or Pascal.  Rather than always iterating over an arithmetic "
"progression of numbers (like in Pascal), or giving the user the ability to "
"define both the iteration step and halting condition (as C), Python's :"
"keyword:`!for` statement iterates over the items of any sequence (a list or "
"a string), in the order that they appear in the sequence.  For example (no "
"pun intended):"
msgstr ""
"A instrução :keyword:`for` em Python é um pouco diferente do que costuma ser "
"em C ou Pascal. Ao invés de sempre iterar sobre uma progressão aritmética de "
"números (como no Pascal), ou permitir ao usuário definir o passo de iteração "
"e a condição de parada (como C), a instrução :keyword:`!for` do Python itera "
"sobre os itens de qualquer sequência (seja uma lista ou uma string), na "
"ordem que aparecem na sequência. Por exemplo:"

#: ../../tutorial/controlflow.rst:63
msgid ""
">>> # Measure some strings:\n"
">>> words = ['cat', 'window', 'defenestrate']\n"
">>> for w in words:\n"
"...     print(w, len(w))\n"
"...\n"
"cat 3\n"
"window 6\n"
"defenestrate 12"
msgstr ""
">>> # Mede algumas strings:\n"
">>> palavras = ['gato', 'janela', 'defenestrar']\n"
">>> for p in palavras:\n"
"...     print(p, len(p))\n"
"...\n"
"gato 4\n"
"janela 6\n"
"defenestrar 11"

#: ../../tutorial/controlflow.rst:72
msgid ""
"Code that modifies a collection while iterating over that same collection "
"can be tricky to get right.  Instead, it is usually more straight-forward to "
"loop over a copy of the collection or to create a new collection::"
msgstr ""
"Código que modifica uma coleção sobre a qual está iterando pode ser "
"inseguro. No lugar disso, usualmente você deve iterar sobre uma cópia da "
"coleção ou criar uma nova coleção::"

#: ../../tutorial/controlflow.rst:76
msgid ""
"# Create a sample collection\n"
"users = {'Hans': 'active', 'Éléonore': 'inactive', '景太郎': 'active'}\n"
"\n"
"# Strategy:  Iterate over a copy\n"
"for user, status in users.copy().items():\n"
"    if status == 'inactive':\n"
"        del users[user]\n"
"\n"
"# Strategy:  Create a new collection\n"
"active_users = {}\n"
"for user, status in users.items():\n"
"    if status == 'active':\n"
"        active_users[user] = status"
msgstr ""
"# Cria uma amostra de coleção\n"
"users = {'Hans': 'active', 'Éléonore': 'inactive', '景太郎': 'active'}\n"
"\n"
"# Estratégia: iterar por uma cópia\n"
"for user, status in users.copy().items():\n"
"    if status == 'inactive':\n"
"        del users[user]\n"
"\n"
"# Estratégia: criar uma nova coleção\n"
"active_users = {}\n"
"for user, status in users.items():\n"
"    if status == 'active':\n"
"        active_users[user] = status"

#: ../../tutorial/controlflow.rst:94
msgid "The :func:`range` Function"
msgstr "A função :func:`range`"

#: ../../tutorial/controlflow.rst:96
msgid ""
"If you do need to iterate over a sequence of numbers, the built-in function :"
"func:`range` comes in handy.  It generates arithmetic progressions::"
msgstr ""
"Se você precisa iterar sobre sequências numéricas, a função embutida :func:"
"`range` é a resposta. Ela gera progressões aritméticas::"

#: ../../tutorial/controlflow.rst:99
msgid ""
">>> for i in range(5):\n"
"...     print(i)\n"
"...\n"
"0\n"
"1\n"
"2\n"
"3\n"
"4"
msgstr ""
">>> for i in range(5):\n"
"...     print(i)\n"
"...\n"
"0\n"
"1\n"
"2\n"
"3\n"
"4"

#: ../../tutorial/controlflow.rst:108
msgid ""
"The given end point is never part of the generated sequence; ``range(10)`` "
"generates 10 values, the legal indices for items of a sequence of length "
"10.  It is possible to let the range start at another number, or to specify "
"a different increment (even negative; sometimes this is called the 'step')::"
msgstr ""
"O ponto de parada fornecido nunca é incluído na lista; ``range(10)`` gera "
"uma lista com 10 valores, exatamente os índices válidos para uma sequência "
"de comprimento 10. É possível iniciar o intervalo com outro número, ou "
"alterar a razão da progressão (inclusive com passo negativo)::"

#: ../../tutorial/controlflow.rst:113
msgid ""
">>> list(range(5, 10))\n"
"[5, 6, 7, 8, 9]\n"
"\n"
">>> list(range(0, 10, 3))\n"
"[0, 3, 6, 9]\n"
"\n"
">>> list(range(-10, -100, -30))\n"
"[-10, -40, -70]"
msgstr ""
">>> list(range(5, 10))\n"
"[5, 6, 7, 8, 9]\n"
"\n"
">>> list(range(0, 10, 3))\n"
"[0, 3, 6, 9]\n"
"\n"
">>> list(range(-10, -100, -30))\n"
"[-10, -40, -70]"

#: ../../tutorial/controlflow.rst:122
msgid ""
"To iterate over the indices of a sequence, you can combine :func:`range` "
"and :func:`len` as follows::"
msgstr ""
"Para iterar sobre os índices de uma sequência, combine :func:`range` e :func:"
"`len` da seguinte forma::"

#: ../../tutorial/controlflow.rst:125
msgid ""
">>> a = ['Mary', 'had', 'a', 'little', 'lamb']\n"
">>> for i in range(len(a)):\n"
"...     print(i, a[i])\n"
"...\n"
"0 Mary\n"
"1 had\n"
"2 a\n"
"3 little\n"
"4 lamb"
msgstr ""
">>> a = ['Maria', 'tinha', 'um', 'carneirinho']\n"
">>> for i in range(len(a)):\n"
"...     print(i, a[i])\n"
"...\n"
"0 Maria\n"
"1 tinha\n"
"2 um\n"
"3 carneirinho"

#: ../../tutorial/controlflow.rst:135
msgid ""
"In most such cases, however, it is convenient to use the :func:`enumerate` "
"function, see :ref:`tut-loopidioms`."
msgstr ""
"Na maioria dos casos, porém, é mais conveniente usar a função :func:"
"`enumerate`, veja :ref:`tut-loopidioms`."

#: ../../tutorial/controlflow.rst:138
msgid "A strange thing happens if you just print a range::"
msgstr "Uma coisa estranha acontece se você imprime um intervalo::"

#: ../../tutorial/controlflow.rst:140
msgid ""
">>> range(10)\n"
"range(0, 10)"
msgstr ""
">>> range(10)\n"
"range(0, 10)"

#: ../../tutorial/controlflow.rst:143
msgid ""
"In many ways the object returned by :func:`range` behaves as if it is a "
"list, but in fact it isn't. It is an object which returns the successive "
"items of the desired sequence when you iterate over it, but it doesn't "
"really make the list, thus saving space."
msgstr ""
"Em muitos aspectos, o objeto retornado pela função :func:`range` se comporta "
"como se fosse uma lista, mas na verdade não é. É um objeto que retorna os "
"itens sucessivos da sequência desejada quando você itera sobre a mesma, mas "
"na verdade ele não gera a lista, economizando espaço."

#: ../../tutorial/controlflow.rst:148
msgid ""
"We say such an object is :term:`iterable`, that is, suitable as a target for "
"functions and constructs that expect something from which they can obtain "
"successive items until the supply is exhausted.  We have seen that the :"
"keyword:`for` statement is such a construct, while an example of a function "
"that takes an iterable is :func:`sum`::"
msgstr ""
"Dizemos que um objeto é :term:`iterável`, isso é, candidato a ser alvo de "
"uma função ou construção que espera alguma coisa capaz de retornar "
"sucessivamente seus elementos um de cada vez. Nós vimos que a instrução :"
"keyword:`for` é um exemplo de construção, enquanto que um exemplo de função "
"que recebe um iterável é :func:`sum`::"

#: ../../tutorial/controlflow.rst:154
msgid ""
">>> sum(range(4))  # 0 + 1 + 2 + 3\n"
"6"
msgstr ""
">>> sum(range(4))  # 0 + 1 + 2 + 3\n"
"6"

#: ../../tutorial/controlflow.rst:157
msgid ""
"Later we will see more functions that return iterables and take iterables as "
"arguments.  In chapter :ref:`tut-structures`, we will discuss in more detail "
"about :func:`list`."
msgstr ""
"Mais tarde, veremos mais funções que retornam iteráveis e tomam iteráveis "
"como argumentos. No capítulo :ref:`tut-structures`, iremos discutir em mais "
"detalhes sobre :func:`list`."

#: ../../tutorial/controlflow.rst:164
msgid ":keyword:`!break` and :keyword:`!continue` Statements"
msgstr "Instruções :keyword:`!break` e :keyword:`!continue`"

#: ../../tutorial/controlflow.rst:166
msgid ""
"The :keyword:`break` statement breaks out of the innermost enclosing :"
"keyword:`for` or :keyword:`while` loop::"
msgstr ""
"A instrução :keyword:`break` sai imediatamente do laço de repetição mais "
"interno, seja :keyword:`for` ou :keyword:`while`::"

#: ../../tutorial/controlflow.rst:169
msgid ""
">>> for n in range(2, 10):\n"
"...     for x in range(2, n):\n"
"...         if n % x == 0:\n"
"...             print(f\"{n} equals {x} * {n//x}\")\n"
"...             break\n"
"...\n"
"4 equals 2 * 2\n"
"6 equals 2 * 3\n"
"8 equals 2 * 4\n"
"9 equals 3 * 3"
msgstr ""
">>> for n in range(2, 10):\n"
"...     for x in range(2, n):\n"
"...         if n % x == 0:\n"
"...             print(f\"{n} igual a {x} * {n//x}\")\n"
"...             break\n"
"...\n"
"4 igual a 2 * 2\n"
"6 igual a 2 * 3\n"
"8 igual a 2 * 4\n"
"9 equals 3 * 3"

#: ../../tutorial/controlflow.rst:180
msgid ""
"The :keyword:`continue` statement continues with the next iteration of the "
"loop::"
msgstr ""
"A instrução :keyword:`continue` continua com a próxima iteração do laço::"

#: ../../tutorial/controlflow.rst:183
msgid ""
">>> for num in range(2, 10):\n"
"...     if num % 2 == 0:\n"
"...         print(f\"Found an even number {num}\")\n"
"...         continue\n"
"...     print(f\"Found an odd number {num}\")\n"
"...\n"
"Found an even number 2\n"
"Found an odd number 3\n"
"Found an even number 4\n"
"Found an odd number 5\n"
"Found an even number 6\n"
"Found an odd number 7\n"
"Found an even number 8\n"
"Found an odd number 9"
msgstr ""
">>> for num in range(2, 10):\n"
"...     if num % 2 == 0:\n"
"...         print(f\"Encontrado um número par {num}\")\n"
"...         continue\n"
"...     print(f\"Encontrado um número ímpar {num}\")\n"
"...\n"
"Encontrado um número par 2\n"
"Encontrado um número ímpar 3\n"
"Encontrado um número par 4\n"
"Encontrado um número ímpar 5\n"
"Encontrado um número par 6\n"
"Encontrado um número ímpar 7\n"
"Encontrado um número par 8\n"
"Encontrado um número ímpar 9"

#: ../../tutorial/controlflow.rst:201
msgid ":keyword:`!else` Clauses on Loops"
msgstr "Cláusulas :keyword:`!else` em laços"

#: ../../tutorial/controlflow.rst:203
msgid ""
"In a :keyword:`!for` or :keyword:`!while` loop the :keyword:`!break` "
"statement may be paired with an :keyword:`!else` clause.  If the loop "
"finishes without executing the :keyword:`!break`, the :keyword:`!else` "
"clause executes."
msgstr ""
"Em um laço :keyword:`!for` ou :keyword:`!while` a instrução :keyword:`!"
"break` pode ser pareada com uma cláusula :keyword:`!else`. Se o laço "
"terminar sem executar o :keyword:`!break`, a cláusula :keyword:`!else` será "
"executada."

#: ../../tutorial/controlflow.rst:207
msgid ""
"In a :keyword:`for` loop, the :keyword:`!else` clause is executed after the "
"loop finishes its final iteration, that is, if no break occurred."
msgstr ""
"Em um laço :keyword:`for`, a cláusula :keyword:`!else` é executada após o "
"laço finalizar sua iteração final, ou seja, se não ocorrer nenhuma "
"interrupção."

#: ../../tutorial/controlflow.rst:210
msgid ""
"In a :keyword:`while` loop, it's executed after the loop's condition becomes "
"false."
msgstr ""
"Em um laço :keyword:`while`, ele é executado após a condição do laço se "
"tornar falsa."

#: ../../tutorial/controlflow.rst:212
msgid ""
"In either kind of loop, the :keyword:`!else` clause is **not** executed if "
"the loop was terminated by a :keyword:`break`.  Of course, other ways of "
"ending the loop early, such as a :keyword:`return` or a raised exception, "
"will also skip execution of the :keyword:`else` clause."
msgstr ""
"Em qualquer tipo de laço, a cláusula :keyword:`!else` **não** é executada se "
"o laço foi encerrado por um :keyword:`break`. Claro, outras maneiras de "
"encerrar o laço mais cedo, como um :keyword:`return` ou uma exceção "
"levantada, também pularão a execução da cláusula :keyword:`else`."

#: ../../tutorial/controlflow.rst:217
msgid ""
"This is exemplified in the following :keyword:`!for` loop, which searches "
"for prime numbers::"
msgstr ""
"Isso é exemplificado no seguinte laço :keyword:`!for`, que procura por "
"números primos::"

#: ../../tutorial/controlflow.rst:220
msgid ""
">>> for n in range(2, 10):\n"
"...     for x in range(2, n):\n"
"...         if n % x == 0:\n"
"...             print(n, 'equals', x, '*', n//x)\n"
"...             break\n"
"...     else:\n"
"...         # loop fell through without finding a factor\n"
"...         print(n, 'is a prime number')\n"
"...\n"
"2 is a prime number\n"
"3 is a prime number\n"
"4 equals 2 * 2\n"
"5 is a prime number\n"
"6 equals 2 * 3\n"
"7 is a prime number\n"
"8 equals 2 * 4\n"
"9 equals 3 * 3"
msgstr ""
">>> for n in range(2, 10):\n"
"...     for x in range(2, n):\n"
"...         if n % x == 0:\n"
"...             print(n, 'igual a', x, '*', n//x)\n"
"...             break\n"
"...     else:\n"
"...         # a iteração passou direto sem encontrar um fator\n"
"...         print(n, 'é um número primo')\n"
"...\n"
"2 é um número primo\n"
"3 é um número primo\n"
"4 igual a 2 * 2\n"
"5 é um número primo\n"
"6 igual a 2 * 3\n"
"7 é um número primo\n"
"8 igual a 2 * 4\n"
"9 igual a 3 * 3"

#: ../../tutorial/controlflow.rst:238
msgid ""
"(Yes, this is the correct code.  Look closely: the ``else`` clause belongs "
"to the ``for`` loop, **not** the ``if`` statement.)"
msgstr ""
"(Sim, este é o código correto. Observe atentamente: a cláusula ``else`` "
"pertence ao laço ``for``, **não** à instrução ``if``.)"

#: ../../tutorial/controlflow.rst:241
msgid ""
"One way to think of the else clause is to imagine it paired with the ``if`` "
"inside the loop.  As the loop executes, it will run a sequence like if/if/if/"
"else. The ``if`` is inside the loop, encountered a number of times. If the "
"condition is ever true, a ``break`` will happen. If the condition is never "
"true, the ``else`` clause outside the loop will execute."
msgstr ""
"Uma maneira de pensar na cláusula else é imaginá-la pareada com o ``if`` "
"dentro do laço. Conforme o laço é executado, ele executará uma sequência "
"como if/if/if/else. O ``if`` está dentro do laço, encontrado várias vezes. "
"Se a condição for verdadeira, um ``break`` acontecerá. Se a condição nunca "
"for verdadeira, a cláusula ``else`` fora do laçoserá executada."

#: ../../tutorial/controlflow.rst:247
msgid ""
"When used with a loop, the ``else`` clause has more in common with the "
"``else`` clause of a :keyword:`try` statement than it does with that of "
"``if`` statements: a ``try`` statement's ``else`` clause runs when no "
"exception occurs, and a loop's ``else`` clause runs when no ``break`` "
"occurs. For more on the ``try`` statement and exceptions, see :ref:`tut-"
"handling`."
msgstr ""
"Quando usado em um laço, a cláusula ``else`` tem mais em comum com a "
"cláusula ``else`` de uma instrução :keyword:`try` do que com a de instruções "
"``if``: a cláusula ``else`` de uma instrução ``try`` é executada quando não "
"ocorre exceção, e a cláusula ``else`` de um laço é executada quando não "
"ocorre um ``break``. Para mais informações sobre instrução ``try`` e "
"exceções, veja :ref:`tut-handling`."

#: ../../tutorial/controlflow.rst:256
msgid ":keyword:`!pass` Statements"
msgstr "Instruções :keyword:`!pass`"

#: ../../tutorial/controlflow.rst:258
msgid ""
"The :keyword:`pass` statement does nothing. It can be used when a statement "
"is required syntactically but the program requires no action. For example::"
msgstr ""
"A instrução :keyword:`pass` não faz nada. Pode ser usada quando a sintaxe "
"exige uma instrução, mas a semântica do programa não requer nenhuma ação. "
"Por exemplo::"

#: ../../tutorial/controlflow.rst:261
msgid ""
">>> while True:\n"
"...     pass  # Busy-wait for keyboard interrupt (Ctrl+C)\n"
"..."
msgstr ""
">>> while True:\n"
"...     pass  # Ocupado, aguardando interrupção por teclado (Ctrl+C)\n"
"..."

#: ../../tutorial/controlflow.rst:265
msgid "This is commonly used for creating minimal classes::"
msgstr "Isto é usado muitas vezes para se definir classes mínimas::"

#: ../../tutorial/controlflow.rst:267
msgid ""
">>> class MyEmptyClass:\n"
"...     pass\n"
"..."
msgstr ""
">>> class MinhaClasseVazia:\n"
"...     pass\n"
"..."

#: ../../tutorial/controlflow.rst:271
msgid ""
"Another place :keyword:`pass` can be used is as a place-holder for a "
"function or conditional body when you are working on new code, allowing you "
"to keep thinking at a more abstract level.  The :keyword:`!pass` is silently "
"ignored::"
msgstr ""
"Outra ocasião em que o :keyword:`pass` pode ser usado é como um substituto "
"temporário para uma função ou bloco condicional, quando se está trabalhando "
"com código novo, ainda indefinido, permitindo que mantenha-se o pensamento "
"num nível mais abstrato. O :keyword:`!pass` é silenciosamente ignorado::"

#: ../../tutorial/controlflow.rst:275
msgid ""
">>> def initlog(*args):\n"
"...     pass   # Remember to implement this!\n"
"..."
msgstr ""
">>> def initlog(*args):\n"
"...     pass   # Lembre-se de implementar isso!\n"
"..."

#: ../../tutorial/controlflow.rst:283
msgid ":keyword:`!match` Statements"
msgstr "Instruções :keyword:`!match`"

#: ../../tutorial/controlflow.rst:285
msgid ""
"A :keyword:`match` statement takes an expression and compares its value to "
"successive patterns given as one or more case blocks.  This is superficially "
"similar to a switch statement in C, Java or JavaScript (and many other "
"languages), but it's more similar to pattern matching in languages like Rust "
"or Haskell. Only the first pattern that matches gets executed and it can "
"also extract components (sequence elements or object attributes) from the "
"value into variables."
msgstr ""
"Uma instrução :keyword:`match` pega uma expressão e compara seu valor com "
"padrões sucessivos fornecidos como um ou mais blocos de case. Isso é "
"superficialmente semelhante a uma instrução switch em C, Java ou JavaScript "
"(e muitas outras linguagens), mas também pode extrair componentes (elementos "
"de sequência ou atributos de objeto) do valor em variáveis, mas muito mais "
"parecido com a correspondência de padrões em linguages como Rust ou Haskell. "
"Apenas o primeiro padrão que corresponder será executado, podendo também "
"extrair componentes (elementos de sequência ou atributos de objetos) do "
"valor para variáveis."

#: ../../tutorial/controlflow.rst:293
msgid ""
"The simplest form compares a subject value against one or more literals::"
msgstr ""
"A forma mais simples compara um valor de assunto com um ou mais literais::"

#: ../../tutorial/controlflow.rst:295
msgid ""
"def http_error(status):\n"
"    match status:\n"
"        case 400:\n"
"            return \"Bad request\"\n"
"        case 404:\n"
"            return \"Not found\"\n"
"        case 418:\n"
"            return \"I'm a teapot\"\n"
"        case _:\n"
"            return \"Something's wrong with the internet\""
msgstr ""
"def http_error(status):\n"
"    match status:\n"
"        case 400:\n"
"            return \"Bad request\"\n"
"        case 404:\n"
"            return \"Not found\"\n"
"        case 418:\n"
"            return \"I'm a teapot\"\n"
"        case _:\n"
"            return \"Something's wrong with the internet\""

#: ../../tutorial/controlflow.rst:306
msgid ""
"Note the last block: the \"variable name\" ``_`` acts as a *wildcard* and "
"never fails to match. If no case matches, none of the branches is executed."
msgstr ""
"Observe o último bloco: o \"nome da variável\" ``_`` atua como um *curinga* "
"e nunca falha em corresponder. Se nenhum caso corresponder, nenhuma das "
"ramificações será executada."

#: ../../tutorial/controlflow.rst:309
msgid ""
"You can combine several literals in a single pattern using ``|`` (\"or\")::"
msgstr ""
"Você pode combinar vários literais em um único padrão usando ``|`` (\"ou\")::"

#: ../../tutorial/controlflow.rst:311
msgid ""
"case 401 | 403 | 404:\n"
"    return \"Not allowed\""
msgstr ""
"case 401 | 403 | 404:\n"
"    return \"Não permitido\""

#: ../../tutorial/controlflow.rst:314
msgid ""
"Patterns can look like unpacking assignments, and can be used to bind "
"variables::"
msgstr ""
"Os padrões podem se parecer com atribuições de desempacotamento e podem ser "
"usados para vincular variáveis::"

#: ../../tutorial/controlflow.rst:317
msgid ""
"# point is an (x, y) tuple\n"
"match point:\n"
"    case (0, 0):\n"
"        print(\"Origin\")\n"
"    case (0, y):\n"
"        print(f\"Y={y}\")\n"
"    case (x, 0):\n"
"        print(f\"X={x}\")\n"
"    case (x, y):\n"
"        print(f\"X={x}, Y={y}\")\n"
"    case _:\n"
"        raise ValueError(\"Not a point\")"
msgstr ""
"# ponto é uma tupla (x, y)\n"
"match ponto:\n"
"    case (0, 0):\n"
"        print(\"Origem\")\n"
"    case (0, y):\n"
"        print(f\"Y={y}\")\n"
"    case (x, 0):\n"
"        print(f\"X={x}\")\n"
"    case (x, y):\n"
"        print(f\"X={x}, Y={y}\")\n"
"    case _:\n"
"        raise ValueError(\"Não é um ponto\")"

#: ../../tutorial/controlflow.rst:330
msgid ""
"Study that one carefully!  The first pattern has two literals, and can be "
"thought of as an extension of the literal pattern shown above.  But the next "
"two patterns combine a literal and a variable, and the variable *binds* a "
"value from the subject (``point``).  The fourth pattern captures two values, "
"which makes it conceptually similar to the unpacking assignment ``(x, y) = "
"point``."
msgstr ""
"Estude isso com cuidado! O primeiro padrão tem dois literais e pode ser "
"considerado uma extensão do padrão literal mostrado acima. Mas os próximos "
"dois padrões combinam um literal e uma variável, e a variável *vincula* um "
"valor do assunto (``ponto``). O quarto padrão captura dois valores, o que o "
"torna conceitualmente semelhante à atribuição de desempacotamento ``(x, y) = "
"ponto``."

#: ../../tutorial/controlflow.rst:337
msgid ""
"If you are using classes to structure your data you can use the class name "
"followed by an argument list resembling a constructor, but with the ability "
"to capture attributes into variables::"
msgstr ""
"Se você estiver usando classes para estruturar seus dados, você pode usar o "
"nome da classe seguido por uma lista de argumentos semelhante a um "
"construtor, mas com a capacidade de capturar atributos em variáveis::"

#: ../../tutorial/controlflow.rst:341
msgid ""
"class Point:\n"
"    def __init__(self, x, y):\n"
"        self.x = x\n"
"        self.y = y\n"
"\n"
"def where_is(point):\n"
"    match point:\n"
"        case Point(x=0, y=0):\n"
"            print(\"Origin\")\n"
"        case Point(x=0, y=y):\n"
"            print(f\"Y={y}\")\n"
"        case Point(x=x, y=0):\n"
"            print(f\"X={x}\")\n"
"        case Point():\n"
"            print(\"Somewhere else\")\n"
"        case _:\n"
"            print(\"Not a point\")"
msgstr ""
"class Ponto:\n"
"    def __init__(self, x, y):\n"
"        self.x = x\n"
"        self.y = y\n"
"\n"
"def onde_está(ponto):\n"
"    match ponto:\n"
"        case Ponto(x=0, y=0):\n"
"            print(\"Origem\")\n"
"        case Ponto(x=0, y=y):\n"
"            print(f\"Y={y}\")\n"
"        case Ponto(x=x, y=0):\n"
"            print(f\"X={x}\")\n"
"        case Ponto():\n"
"            print(\"Em outro lugar\")\n"
"        case _:\n"
"            print(\"Não é um ponto\")"

#: ../../tutorial/controlflow.rst:359
msgid ""
"You can use positional parameters with some builtin classes that provide an "
"ordering for their attributes (e.g. dataclasses). You can also define a "
"specific position for attributes in patterns by setting the "
"``__match_args__`` special attribute in your classes. If it's set to (\"x\", "
"\"y\"), the following patterns are all equivalent (and all bind the ``y`` "
"attribute to the ``var`` variable)::"
msgstr ""
"Você pode usar parâmetros posicionais com algumas classes embutidas que "
"fornecem uma ordem para seus atributos (por exemplo, classes de dados). Você "
"também pode definir uma posição específica para atributos em padrões "
"configurando o atributo especial ``__match_args__`` em suas classes. Se for "
"definido como (\"x\", \"y\"), os seguintes padrões são todos equivalentes (e "
"todos vinculam o atributo ``y`` à variável ``var``)::"

#: ../../tutorial/controlflow.rst:365
msgid ""
"Point(1, var)\n"
"Point(1, y=var)\n"
"Point(x=1, y=var)\n"
"Point(y=var, x=1)"
msgstr ""
"Ponto(1, var)\n"
"Ponto(1, y=var)\n"
"Ponto(x=1, y=var)\n"
"Ponto(y=var, x=1)"

#: ../../tutorial/controlflow.rst:370
msgid ""
"A recommended way to read patterns is to look at them as an extended form of "
"what you would put on the left of an assignment, to understand which "
"variables would be set to what. Only the standalone names (like ``var`` "
"above) are assigned to by a match statement. Dotted names (like ``foo."
"bar``), attribute names (the ``x=`` and ``y=`` above) or class names "
"(recognized by the \"(...)\" next to them like ``Point`` above) are never "
"assigned to."
msgstr ""
"Uma maneira recomendada de ler padrões é vê-los como uma forma estendida do "
"que você colocaria à esquerda de uma atribuição, para entender quais "
"variáveis seriam definidas para quê. Apenas os nomes autônomos (como ``var`` "
"acima) são atribuídos por uma instrução de correspondência. Nomes "
"pontilhados (como ``foo.bar``), nomes de atributos (o ``x=`` e ``y=`` acima) "
"ou nomes de classes (reconhecidos pelo \"(...)\" próximo a eles, como "
"``Ponto`` acima) nunca são atribuídos."

#: ../../tutorial/controlflow.rst:377
msgid ""
"Patterns can be arbitrarily nested.  For example, if we have a short list of "
"Points, with ``__match_args__`` added, we could match it like this::"
msgstr ""
"Os padrões podem ser aninhados arbitrariamente. Por exemplo, se tivermos uma "
"pequena lista de Pontos, com ``__match_args__`` adicionado, poderíamos "
"correspondê-la assim::"

#: ../../tutorial/controlflow.rst:380
msgid ""
"class Point:\n"
"    __match_args__ = ('x', 'y')\n"
"    def __init__(self, x, y):\n"
"        self.x = x\n"
"        self.y = y\n"
"\n"
"match points:\n"
"    case []:\n"
"        print(\"No points\")\n"
"    case [Point(0, 0)]:\n"
"        print(\"The origin\")\n"
"    case [Point(x, y)]:\n"
"        print(f\"Single point {x}, {y}\")\n"
"    case [Point(0, y1), Point(0, y2)]:\n"
"        print(f\"Two on the Y axis at {y1}, {y2}\")\n"
"    case _:\n"
"        print(\"Something else\")"
msgstr ""
"class Ponto:\n"
"    __match_args__ = ('x', 'y')\n"
"    def __init__(self, x, y):\n"
"        self.x = x\n"
"        self.y = y\n"
"\n"
"match pontos:\n"
"    case []:\n"
"        print(\"Sem pontos\")\n"
"    case [Ponto(0, 0)]:\n"
"        print(\"A origem\")\n"
"    case [Ponto(x, y)]:\n"
"        print(f\"Ponto único {x}, {y}\")\n"
"    case [Ponto(0, y1), Ponto(0, y2)]:\n"
"        print(f\"Dois do eixo Y em {y1}, {y2}\")\n"
"    case _:\n"
"        print(\"Outra coisa\")"

#: ../../tutorial/controlflow.rst:398
msgid ""
"We can add an ``if`` clause to a pattern, known as a \"guard\".  If the "
"guard is false, ``match`` goes on to try the next case block.  Note that "
"value capture happens before the guard is evaluated::"
msgstr ""
"Podemos adicionar uma cláusula ``if`` a um padrão, conhecido como "
"\"guarda\". Se a guarda for falsa, ``match`` continua para tentar o próximo "
"bloco de caso. Observe que a captura de valor ocorre antes que a guarda seja "
"avaliada::"

#: ../../tutorial/controlflow.rst:402
msgid ""
"match point:\n"
"    case Point(x, y) if x == y:\n"
"        print(f\"Y=X at {x}\")\n"
"    case Point(x, y):\n"
"        print(f\"Not on the diagonal\")"
msgstr ""
"match ponto:\n"
"    case Ponto(x, y) if x == y:\n"
"        print(f\"Y=X at {x}\")\n"
"    case Ponto(x, y):\n"
"        print(f\"Não está na diagonal\")"

#: ../../tutorial/controlflow.rst:408
msgid "Several other key features of this statement:"
msgstr "Vários outros recursos importantes desta instrução::"

#: ../../tutorial/controlflow.rst:410
msgid ""
"Like unpacking assignments, tuple and list patterns have exactly the same "
"meaning and actually match arbitrary sequences.  An important exception is "
"that they don't match iterators or strings."
msgstr ""
"Assim como desempacotar atribuições, os padrões de tupla e lista têm "
"exatamente o mesmo significado e realmente correspondem a sequências "
"arbitrárias. Uma exceção importante é que eles não correspondem a iteradores "
"ou strings."

#: ../../tutorial/controlflow.rst:414
msgid ""
"Sequence patterns support extended unpacking: ``[x, y, *rest]`` and ``(x, y, "
"*rest)`` work similar to unpacking assignments.  The name after ``*`` may "
"also be ``_``, so ``(x, y, *_)`` matches a sequence of at least two items "
"without binding the remaining items."
msgstr ""
"Os padrões de sequência têm suporte ao desempacotamento estendido: ``[x, y, "
"*rest]`` e ``(x, y, *rest)`` funcionam de forma semelhante ao "
"desempacotamento de atribuições. O nome depois de ``*`` também pode ser "
"``_``, então ``(x, y, *_)`` corresponde a uma sequência de pelo menos dois "
"itens sem ligar os itens restantes."

#: ../../tutorial/controlflow.rst:419
msgid ""
"Mapping patterns: ``{\"bandwidth\": b, \"latency\": l}`` captures the "
"``\"bandwidth\"`` and ``\"latency\"`` values from a dictionary.  Unlike "
"sequence patterns, extra keys are ignored.  An unpacking like ``**rest`` is "
"also supported.  (But ``**_`` would be redundant, so it is not allowed.)"
msgstr ""
"Padrões de mapeamento: ``{\"bandwidth\": b, \"latency\": l}`` captura os "
"valores ``\"bandwidth\"`` e ``\"latency\"`` de um dicionário. Diferente dos "
"padrões de sequência, chaves extra são ignoradas.  Um desempacotamento como "
"``**rest`` também é permitido.  (Mas ``**_`` seria redundante, então não é "
"permitido.)"

#: ../../tutorial/controlflow.rst:424
msgid "Subpatterns may be captured using the ``as`` keyword::"
msgstr "Subpadrões podem ser capturados usando a palavra reservada ``as``::"

#: ../../tutorial/controlflow.rst:426
msgid "case (Point(x1, y1), Point(x2, y2) as p2): ..."
msgstr "case (Ponto(x1, y1), Ponto(x2, y2) as p2): ..."

#: ../../tutorial/controlflow.rst:428
msgid ""
"will capture the second element of the input as ``p2`` (as long as the input "
"is a sequence of two points)"
msgstr ""
"Vai capturar o segundo elemento da entrada como ``p2`` (se a entrada for uma "
"sequência de dois pontos)"

#: ../../tutorial/controlflow.rst:431
msgid ""
"Most literals are compared by equality, however the singletons ``True``, "
"``False`` and ``None`` are compared by identity."
msgstr ""
"A maioria dos literais são comparados por igualdade, no entando os "
"singletons ``True``, ``False`` e ``None`` são comparados por identidade."

#: ../../tutorial/controlflow.rst:434
msgid ""
"Patterns may use named constants.  These must be dotted names to prevent "
"them from being interpreted as capture variable::"
msgstr ""
"Padrões podem usar constantes nomeadas. Estas devem ser nomes pontilhados "
"para prevenir que sejam interpretadas como variáveis de captura::"

#: ../../tutorial/controlflow.rst:437
msgid ""
"from enum import Enum\n"
"class Color(Enum):\n"
"    RED = 'red'\n"
"    GREEN = 'green'\n"
"    BLUE = 'blue'\n"
"\n"
"color = Color(input(\"Enter your choice of 'red', 'blue' or 'green': \"))\n"
"\n"
"match color:\n"
"    case Color.RED:\n"
"        print(\"I see red!\")\n"
"    case Color.GREEN:\n"
"        print(\"Grass is green\")\n"
"    case Color.BLUE:\n"
"        print(\"I'm feeling the blues :(\")"
msgstr ""
"from enum import Enum\n"
"class Cor(Enum):\n"
"    VERMELHO = 'vermelho'\n"
"    VERDE = 'verde'\n"
"    AZUL = 'azul'\n"
"\n"
"cor = Cor(input(\"Insira sua escolha de 'vermelho, 'azul' ou 'verde': \"))\n"
"\n"
"match color:\n"
"    case Cor.VERMELHO:\n"
"        print(\"Eu vejo vermelho!\")\n"
"    case Cor.VERDE:\n"
"        print(\"Grama é verde\")\n"
"    case Cor.AZUL:\n"
"        print(\"O céu é azul :)\")"

#: ../../tutorial/controlflow.rst:453
msgid ""
"For a more detailed explanation and additional examples, you can look into :"
"pep:`636` which is written in a tutorial format."
msgstr ""
"Para uma explicação mais detalhada e exemplos adicionais, você pode olhar :"
"pep:`636` que foi escrita em formato de tutorial."

#: ../../tutorial/controlflow.rst:459
msgid "Defining Functions"
msgstr "Definindo funções"

#: ../../tutorial/controlflow.rst:461
msgid ""
"We can create a function that writes the Fibonacci series to an arbitrary "
"boundary::"
msgstr ""
"Podemos criar uma função que escreve a série de Fibonacci até um limite "
"arbitrário::"

#: ../../tutorial/controlflow.rst:464
msgid ""
">>> def fib(n):    # write Fibonacci series less than n\n"
"...     \"\"\"Print a Fibonacci series less than n.\"\"\"\n"
"...     a, b = 0, 1\n"
"...     while a < n:\n"
"...         print(a, end=' ')\n"
"...         a, b = b, a+b\n"
"...     print()\n"
"...\n"
">>> # Now call the function we just defined:\n"
">>> fib(2000)\n"
"0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597"
msgstr ""
">>> def fib(n):    # escreve série de Fibonacci menor que n\n"
"...     \"\"\"Imprime uma série de Fibonacci menor que n.\"\"\"\n"
"...     a, b = 0, 1\n"
"...     while a < n:\n"
"...         print(a, end=' ')\n"
"...         a, b = b, a+b\n"
"...     print()\n"
"...\n"
">>> # Agora chamamos a função que acabamos de definir:\n"
">>> fib(2000)\n"
"0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597"

#: ../../tutorial/controlflow.rst:481
msgid ""
"The keyword :keyword:`def` introduces a function *definition*.  It must be "
"followed by the function name and the parenthesized list of formal "
"parameters. The statements that form the body of the function start at the "
"next line, and must be indented."
msgstr ""
"A palavra reservada :keyword:`def` inicia a *definição* de uma função. Ela "
"deve ser seguida do nome da função e da lista de parâmetros formais entre "
"parênteses. As instruções que formam o corpo da função começam na linha "
"seguinte e devem ser indentados."

#: ../../tutorial/controlflow.rst:486
msgid ""
"The first statement of the function body can optionally be a string literal; "
"this string literal is the function's documentation string, or :dfn:"
"`docstring`. (More about docstrings can be found in the section :ref:`tut-"
"docstrings`.) There are tools which use docstrings to automatically produce "
"online or printed documentation, or to let the user interactively browse "
"through code; it's good practice to include docstrings in code that you "
"write, so make a habit of it."
msgstr ""
"Opcionalmente, a primeira linha do corpo da função pode ser uma literal "
"string, cujo propósito é documentar a função. Se presente, essa string chama-"
"se :dfn:`docstring`. (Há mais informação sobre docstrings na seção :ref:`tut-"
"docstrings`.) Existem ferramentas que utilizam docstrings para produzir "
"automaticamente documentação online ou para imprimir, ou ainda, permitir que "
"o usuário navegue interativamente pelo código. É uma boa prática incluir "
"sempre docstrings em suas funções, portanto, tente fazer disso um hábito."

#: ../../tutorial/controlflow.rst:493
msgid ""
"The *execution* of a function introduces a new symbol table used for the "
"local variables of the function.  More precisely, all variable assignments "
"in a function store the value in the local symbol table; whereas variable "
"references first look in the local symbol table, then in the local symbol "
"tables of enclosing functions, then in the global symbol table, and finally "
"in the table of built-in names. Thus, global variables and variables of "
"enclosing functions cannot be directly assigned a value within a function "
"(unless, for global variables, named in a :keyword:`global` statement, or, "
"for variables of enclosing functions, named in a :keyword:`nonlocal` "
"statement), although they may be referenced."
msgstr ""
"A *execução* de uma função cria uma nova tabela de símbolos para as "
"variáveis locais da função. Mais precisamente, todas as atribuições de "
"variáveis numa função são armazenadas na tabela de símbolos local; "
"referências a variáveis são buscadas primeiro na tabela de símbolos local, "
"em seguida na tabela de símbolos locais de funções delimitadoras ou "
"circundantes, depois na tabela de símbolos global e, finalmente, na tabela "
"de nomes da própria linguagem. Embora possam ser referenciadas, variáveis "
"globais e de funções externas não podem ter atribuições (a menos que seja "
"utilizada a instrução :keyword:`global`, para variáveis globais, ou :keyword:"
"`nonlocal`, para variáveis de funções externas)."

#: ../../tutorial/controlflow.rst:504
msgid ""
"The actual parameters (arguments) to a function call are introduced in the "
"local symbol table of the called function when it is called; thus, arguments "
"are passed using *call by value* (where the *value* is always an object "
"*reference*, not the value of the object). [#]_ When a function calls "
"another function, or calls itself recursively, a new local symbol table is "
"created for that call."
msgstr ""
"Os parâmetros reais (argumentos) de uma chamada de função são introduzidos "
"na tabela de símbolos local da função no momento da chamada; portanto, "
"argumentos são passados *por valor* (onde o *valor* é sempre uma "
"*referência* para objeto, não o valor do objeto). [#]_ Quando uma função "
"chama outra função, ou chama a si mesma recursivamente, uma nova tabela de "
"símbolos é criada para tal chamada."

#: ../../tutorial/controlflow.rst:511
msgid ""
"A function definition associates the function name with the function object "
"in the current symbol table.  The interpreter recognizes the object pointed "
"to by that name as a user-defined function.  Other names can also point to "
"that same function object and can also be used to access the function::"
msgstr ""
"Uma definição de função associa o nome da função com o objeto função na "
"tabela de símbolos atual. O interpretador reconhece o objeto apontado pelo "
"nome como uma função definida pelo usuário. Outros nomes também podem "
"apontar para o mesmo objeto função e também pode ser usados pra acessar a "
"função::"

#: ../../tutorial/controlflow.rst:516
msgid ""
">>> fib\n"
"<function fib at 10042ed0>\n"
">>> f = fib\n"
">>> f(100)\n"
"0 1 1 2 3 5 8 13 21 34 55 89"
msgstr ""
">>> fib\n"
"<function fib at 10042ed0>\n"
">>> f = fib\n"
">>> f(100)\n"
"0 1 1 2 3 5 8 13 21 34 55 89"

#: ../../tutorial/controlflow.rst:522
msgid ""
"Coming from other languages, you might object that ``fib`` is not a function "
"but a procedure since it doesn't return a value.  In fact, even functions "
"without a :keyword:`return` statement do return a value, albeit a rather "
"boring one.  This value is called ``None`` (it's a built-in name).  Writing "
"the value ``None`` is normally suppressed by the interpreter if it would be "
"the only value written. You can see it if you really want to using :func:"
"`print`::"
msgstr ""
"Conhecendo outras linguagens, pode-se questionar que ``fib`` não é uma "
"função, mas um procedimento, pois ela não devolve um valor. Na verdade, "
"mesmo funções que não usam a instrução :keyword:`return` devolvem um valor, "
"ainda que pouco interessante. Esse valor é chamado ``None`` (é um nome "
"embutido). O interpretador interativo evita escrever ``None`` quando ele é o "
"único resultado de uma expressão. Mas se quiser vê-lo pode usar a função :"
"func:`print`::"

#: ../../tutorial/controlflow.rst:529
msgid ""
">>> fib(0)\n"
">>> print(fib(0))\n"
"None"
msgstr ""
">>> fib(0)\n"
">>> print(fib(0))\n"
"None"

#: ../../tutorial/controlflow.rst:533
msgid ""
"It is simple to write a function that returns a list of the numbers of the "
"Fibonacci series, instead of printing it::"
msgstr ""
"É fácil escrever uma função que retorna uma lista de números da série de "
"Fibonacci, ao invés de exibi-los::"

#: ../../tutorial/controlflow.rst:536
msgid ""
">>> def fib2(n):  # return Fibonacci series up to n\n"
"...     \"\"\"Return a list containing the Fibonacci series up to n.\"\"\"\n"
"...     result = []\n"
"...     a, b = 0, 1\n"
"...     while a < n:\n"
"...         result.append(a)    # see below\n"
"...         a, b = b, a+b\n"
"...     return result\n"
"...\n"
">>> f100 = fib2(100)    # call it\n"
">>> f100                # write the result\n"
"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]"
msgstr ""
">>> def fib2(n):  # retorna série de  Fibonacci até n\n"
"...     \"\"\"Retorna uma lista contendo a série de Fibonacci até n.\"\"\"\n"
"...     resultado = []\n"
"...     a, b = 0, 1\n"
"...     while a < n:\n"
"...         resultado.append(a)    # veja abaixo\n"
"...         a, b = b, a+b\n"
"...     return resultado\n"
"...\n"
">>> f100 = fib2(100)    # chama-o\n"
">>> f100                # escreve o resultado\n"
"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]"

#: ../../tutorial/controlflow.rst:549
msgid "This example, as usual, demonstrates some new Python features:"
msgstr "Este exemplo demonstra novos recursos de Python:"

#: ../../tutorial/controlflow.rst:551
msgid ""
"The :keyword:`return` statement returns with a value from a function. :"
"keyword:`!return` without an expression argument returns ``None``. Falling "
"off the end of a function also returns ``None``."
msgstr ""
"A instrução :keyword:`return` finaliza a execução e retorna um valor da "
"função. :keyword:`!return` sem qualquer expressão como argumento retorna "
"``None``. Atingir o final da função também retorna ``None``."

#: ../../tutorial/controlflow.rst:555
msgid ""
"The statement ``result.append(a)`` calls a *method* of the list object "
"``result``.  A method is a function that 'belongs' to an object and is named "
"``obj.methodname``, where ``obj`` is some object (this may be an "
"expression), and ``methodname`` is the name of a method that is defined by "
"the object's type. Different types define different methods.  Methods of "
"different types may have the same name without causing ambiguity.  (It is "
"possible to define your own object types and methods, using *classes*, see :"
"ref:`tut-classes`) The method :meth:`!append` shown in the example is "
"defined for list objects; it adds a new element at the end of the list.  In "
"this example it is equivalent to ``result = result + [a]``, but more "
"efficient."
msgstr ""
"A instrução ``result.append(a)`` chama um *método* do objeto lista "
"``result``. Um método é uma função que 'pertence' a um objeto, e é chamada "
"``obj.nomemetodo``, onde ``obj`` é um objeto qualquer (pode ser uma "
"expressão), e ``nomemetodo`` é o nome de um método que foi definido pelo "
"tipo do objeto. Tipos diferentes definem métodos diferentes. Métodos de "
"diferentes tipos podem ter o mesmo nome sem ambiguidade. (É possível definir "
"seus próprios tipos de objetos e métodos, utilizando *classes*, veja em :ref:"
"`tut-classes`) O método :meth:`!append`, mostrado no exemplo é definido para "
"objetos do tipo lista; adiciona um novo elemento ao final da lista. Neste "
"exemplo, ele equivale a ``result = result + [a]``, só que mais eficiente."

#: ../../tutorial/controlflow.rst:570
msgid "More on Defining Functions"
msgstr "Mais sobre definição de funções"

#: ../../tutorial/controlflow.rst:572
msgid ""
"It is also possible to define functions with a variable number of arguments. "
"There are three forms, which can be combined."
msgstr ""
"É possível definir funções com um número variável de argumentos. Existem "
"três formas, que podem ser combinadas."

#: ../../tutorial/controlflow.rst:579
msgid "Default Argument Values"
msgstr "Argumentos com valor padrão"

#: ../../tutorial/controlflow.rst:581
msgid ""
"The most useful form is to specify a default value for one or more "
"arguments. This creates a function that can be called with fewer arguments "
"than it is defined to allow.  For example::"
msgstr ""
"A mais útil das três é especificar um valor padrão para um ou mais "
"argumentos. Isso cria uma função que pode ser invocada com menos argumentos "
"do que os que foram definidos. Por exemplo::"

#: ../../tutorial/controlflow.rst:585
msgid ""
"def ask_ok(prompt, retries=4, reminder='Please try again!'):\n"
"    while True:\n"
"        reply = input(prompt)\n"
"        if reply in {'y', 'ye', 'yes'}:\n"
"            return True\n"
"        if reply in {'n', 'no', 'nop', 'nope'}:\n"
"            return False\n"
"        retries = retries - 1\n"
"        if retries < 0:\n"
"            raise ValueError('invalid user response')\n"
"        print(reminder)"
msgstr ""
"def pergunta_ok(mensagem, tentativas=4, lembrete='Por favor, tente "
"novamente!'):\n"
"    while True:\n"
"        resposta = input(mensagem)\n"
"        if resposta in {'s', 'sim', 'é}:\n"
"            return True\n"
"        if resposta in {'n', 'não', 'nah'}:\n"
"            return False\n"
"        tentativas = tentativas - 1\n"
"        if tentativas < 0:\n"
"            raise ValueError('resposta inválida de usuário')\n"
"        print(lembrete)"

#: ../../tutorial/controlflow.rst:597
msgid "This function can be called in several ways:"
msgstr "Essa função pode ser chamada de várias formas:"

#: ../../tutorial/controlflow.rst:599
msgid ""
"giving only the mandatory argument: ``ask_ok('Do you really want to quit?')``"
msgstr ""
"fornecendo apenas o argumento obrigatório: ``ask_ok('Do you really want to "
"quit?')``"

#: ../../tutorial/controlflow.rst:601
msgid ""
"giving one of the optional arguments: ``ask_ok('OK to overwrite the file?', "
"2)``"
msgstr ""
"fornecendo um dos argumentos opcionais: ``ask_ok('OK to overwrite the "
"file?', 2)``"

#: ../../tutorial/controlflow.rst:603
msgid ""
"or even giving all arguments: ``ask_ok('OK to overwrite the file?', 2, 'Come "
"on, only yes or no!')``"
msgstr ""
"ou fornecendo todos os argumentos: ``ask_ok('OK to overwrite the file?', 2, "
"'Come on, only yes or no!')``"

#: ../../tutorial/controlflow.rst:606
msgid ""
"This example also introduces the :keyword:`in` keyword. This tests whether "
"or not a sequence contains a certain value."
msgstr ""
"Este exemplo também introduz a palavra-chave :keyword:`in`, que verifica se "
"uma sequência contém ou não um determinado valor."

#: ../../tutorial/controlflow.rst:609
msgid ""
"The default values are evaluated at the point of function definition in the "
"*defining* scope, so that ::"
msgstr ""
"Os valores padrões são avaliados no momento da definição da função, e no "
"escopo em que a função foi *definida*, portanto::"

#: ../../tutorial/controlflow.rst:612
msgid ""
"i = 5\n"
"\n"
"def f(arg=i):\n"
"    print(arg)\n"
"\n"
"i = 6\n"
"f()"
msgstr ""
"i = 5\n"
"\n"
"def f(arg=i):\n"
"    print(arg)\n"
"\n"
"i = 6\n"
"f()"

#: ../../tutorial/controlflow.rst:620
msgid "will print ``5``."
msgstr "irá exibir ``5``."

#: ../../tutorial/controlflow.rst:622
msgid ""
"**Important warning:**  The default value is evaluated only once. This makes "
"a difference when the default is a mutable object such as a list, "
"dictionary, or instances of most classes.  For example, the following "
"function accumulates the arguments passed to it on subsequent calls::"
msgstr ""
"**Aviso importante:** Valores padrões são avaliados apenas uma vez. Isso faz "
"diferença quando o valor é um objeto mutável, como uma lista, dicionário, ou "
"instâncias de classes. Por exemplo, a função a seguir acumula os argumentos "
"passados, nas chamadas subsequentes::"

#: ../../tutorial/controlflow.rst:627
msgid ""
"def f(a, L=[]):\n"
"    L.append(a)\n"
"    return L\n"
"\n"
"print(f(1))\n"
"print(f(2))\n"
"print(f(3))"
msgstr ""
"def f(a, L=[]):\n"
"    L.append(a)\n"
"    return L\n"
"\n"
"print(f(1))\n"
"print(f(2))\n"
"print(f(3))"

#: ../../tutorial/controlflow.rst:635
msgid "This will print ::"
msgstr "Isso exibirá::"

#: ../../tutorial/controlflow.rst:637
msgid ""
"[1]\n"
"[1, 2]\n"
"[1, 2, 3]"
msgstr ""
"[1]\n"
"[1, 2]\n"
"[1, 2, 3]"

#: ../../tutorial/controlflow.rst:641
msgid ""
"If you don't want the default to be shared between subsequent calls, you can "
"write the function like this instead::"
msgstr ""
"Se não quiser que o valor padrão seja compartilhado entre chamadas "
"subsequentes, pode reescrever a função assim::"

#: ../../tutorial/controlflow.rst:644
msgid ""
"def f(a, L=None):\n"
"    if L is None:\n"
"        L = []\n"
"    L.append(a)\n"
"    return L"
msgstr ""
"def f(a, L=None):\n"
"    if L is None:\n"
"        L = []\n"
"    L.append(a)\n"
"    return L"

#: ../../tutorial/controlflow.rst:654
msgid "Keyword Arguments"
msgstr "Argumentos nomeados"

#: ../../tutorial/controlflow.rst:656
msgid ""
"Functions can also be called using :term:`keyword arguments <keyword "
"argument>` of the form ``kwarg=value``.  For instance, the following "
"function::"
msgstr ""
"Funções também podem ser chamadas usando :term:`argumentos nomeados <keyword "
"argument>` da forma ``chave=valor``. Por exemplo, a função a seguir::"

#: ../../tutorial/controlflow.rst:659
msgid ""
"def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):\n"
"    print(\"-- This parrot wouldn't\", action, end=' ')\n"
"    print(\"if you put\", voltage, \"volts through it.\")\n"
"    print(\"-- Lovely plumage, the\", type)\n"
"    print(\"-- It's\", state, \"!\")"
msgstr ""
"def papagaio(voltagem, estado='é um cadáver', ação='voar', tipo='Azul "
"Norueguês'):\n"
"    print(\"-- Este papagaio não conseguiria\", ação, end=' ')\n"
"    print(\"nem se você desse um choque de\", voltagem, \"de volts nele.\")\n"
"    print(\"-- Plumagem formosa, o\", tipo)\n"
"    print(\"-- Ele\", estado, \"!\")"

#: ../../tutorial/controlflow.rst:665
msgid ""
"accepts one required argument (``voltage``) and three optional arguments "
"(``state``, ``action``, and ``type``).  This function can be called in any "
"of the following ways::"
msgstr ""
"aceita um argumento obrigatório (``voltagem``) e três argumentos opcionais "
"(``estado``, ``ação``, e ``tipo``). Esta função pode ser chamada de qualquer "
"uma dessas formas::"

#: ../../tutorial/controlflow.rst:669
msgid ""
"parrot(1000)                                          # 1 positional "
"argument\n"
"parrot(voltage=1000)                                  # 1 keyword argument\n"
"parrot(voltage=1000000, action='VOOOOOM')             # 2 keyword arguments\n"
"parrot(action='VOOOOOM', voltage=1000000)             # 2 keyword arguments\n"
"parrot('a million', 'bereft of life', 'jump')         # 3 positional "
"arguments\n"
"parrot('a thousand', state='pushing up the daisies')  # 1 positional, 1 "
"keyword"
msgstr ""
"papagaio(1000)                                        # 1 argumento "
"posicional\n"
"papagaio(voltagem=1000)                               # 1 argumento nomeado\n"
"papagaio(voltagem=1000000, ação='fazer VOOOOOM')      # 2 argumentos "
"nomeados\n"
"papagaio(ação='fazer VOOOOOM', voltagem=1000000)      # 2 argumentos "
"nomeados\n"
"papagaio('um milhão', 'sem vida', 'pular')            # 3 argumentos "
"posicionais\n"
"papagaio('mil', estado='estaria no céu')              # 1 posicional, 1 "
"argumento"

#: ../../tutorial/controlflow.rst:676
msgid "but all the following calls would be invalid::"
msgstr "mas todas as formas a seguir seriam inválidas::"

#: ../../tutorial/controlflow.rst:678
msgid ""
"parrot()                     # required argument missing\n"
"parrot(voltage=5.0, 'dead')  # non-keyword argument after a keyword "
"argument\n"
"parrot(110, voltage=220)     # duplicate value for the same argument\n"
"parrot(actor='John Cleese')  # unknown keyword argument"
msgstr ""
"papagaio()                       # faltando argumento obrigatório\n"
"papagaio(voltagem=5.0, 'morto')  # argumento não nomeado após um argumento "
"nomeado\n"
"papagaio(110, voltagem=220)      # valor duplicado para o mesmo argumento\n"
"papagaio(ator='John Cleese')     # argumento nomeado desconhecido"

#: ../../tutorial/controlflow.rst:683
msgid ""
"In a function call, keyword arguments must follow positional arguments. All "
"the keyword arguments passed must match one of the arguments accepted by the "
"function (e.g. ``actor`` is not a valid argument for the ``parrot`` "
"function), and their order is not important.  This also includes non-"
"optional arguments (e.g. ``parrot(voltage=1000)`` is valid too). No argument "
"may receive a value more than once. Here's an example that fails due to this "
"restriction::"
msgstr ""
"Em uma chamada de função, argumentos nomeados devem vir depois dos "
"argumentos posicionais. Todos os argumentos nomeados passados devem "
"corresponder com argumentos aceitos pela função (ex. ``ator`` não é um "
"argumento nomeado válido para a função ``papagaio``), mas sua ordem é "
"irrelevante. Isto também inclui argumentos obrigatórios (ex.: "
"``papagaio(voltagem=1000)`` funciona). Nenhum argumento pode receber mais de "
"um valor. Eis um exemplo que não funciona devido a esta restrição::"

#: ../../tutorial/controlflow.rst:691
msgid ""
">>> def function(a):\n"
"...     pass\n"
"...\n"
">>> function(0, a=0)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: function() got multiple values for argument 'a'"
msgstr ""
">>> def função(a):\n"
"...     pass\n"
"...\n"
">>> função(0, a=0)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: função() got multiple values for argument 'a'"

#: ../../tutorial/controlflow.rst:699
msgid ""
"When a final formal parameter of the form ``**name`` is present, it receives "
"a dictionary (see :ref:`typesmapping`) containing all keyword arguments "
"except for those corresponding to a formal parameter.  This may be combined "
"with a formal parameter of the form ``*name`` (described in the next "
"subsection) which receives a :ref:`tuple <tut-tuples>` containing the "
"positional arguments beyond the formal parameter list.  (``*name`` must "
"occur before ``**name``.) For example, if we define a function like this::"
msgstr ""
"Quando um último parâmetro formal no formato ``**nome`` está presente, ele "
"recebe um dicionário (veja :ref:`typesmapping`) contendo todos os argumentos "
"nomeados, exceto aqueles que correspondem a um parâmetro formal. Isto pode "
"ser combinado com um parâmetro formal no formato ``*nome`` (descrito na "
"próxima subseção) que recebe uma :ref:`tupla <tut-tuples>` contendo os "
"argumentos posicionais, além da lista de parâmetros formais. (``*nome`` deve "
"ocorrer antes de ``**nome``.) Por exemplo, se definirmos uma função assim::"

#: ../../tutorial/controlflow.rst:707
msgid ""
"def cheeseshop(kind, *arguments, **keywords):\n"
"    print(\"-- Do you have any\", kind, \"?\")\n"
"    print(\"-- I'm sorry, we're all out of\", kind)\n"
"    for arg in arguments:\n"
"        print(arg)\n"
"    print(\"-\" * 40)\n"
"    for kw in keywords:\n"
"        print(kw, \":\", keywords[kw])"
msgstr ""
"def loja_de_queijos(tipo, *argumentos, **argumentos_nomeados):\n"
"    print(\"-- Você tem algum\", tipo, \"?\")\n"
"    print(\"-- Lamento, acabou o\", tipo)\n"
"    for arg in argumentos:\n"
"        print(arg)\n"
"    print(\"-\" * 40)\n"
"    for kw in argumentos_nomeados:\n"
"        print(kw, \":\", argumentos_nomeados[kw])"

#: ../../tutorial/controlflow.rst:716
msgid "It could be called like this::"
msgstr "Pode ser chamada assim::"

#: ../../tutorial/controlflow.rst:718
msgid ""
"cheeseshop(\"Limburger\", \"It's very runny, sir.\",\n"
"           \"It's really very, VERY runny, sir.\",\n"
"           shopkeeper=\"Michael Palin\",\n"
"           client=\"John Cleese\",\n"
"           sketch=\"Cheese Shop Sketch\")"
msgstr ""
"loja_de_queijos(\"Limburger\", \"Está muito mole, senhor\",\n"
"           \"Está realmente muito, MUITO mole, senhor.\",\n"
"           vendedor=\"Michael Palin\",\n"
"           cliente=\"John Cleese\",\n"
"           sketch=\"Sketch da Loja de Queijos\")"

#: ../../tutorial/controlflow.rst:724
msgid "and of course it would print:"
msgstr "e, claro, exibiria:"

#: ../../tutorial/controlflow.rst:726
msgid ""
"-- Do you have any Limburger ?\n"
"-- I'm sorry, we're all out of Limburger\n"
"It's very runny, sir.\n"
"It's really very, VERY runny, sir.\n"
"----------------------------------------\n"
"shopkeeper : Michael Palin\n"
"client : John Cleese\n"
"sketch : Cheese Shop Sketch"
msgstr ""
"-- Você tem algum Limburger ?\n"
"-- Lamento, acabou o Limburger\n"
"Está muito mole, senhor.\n"
"Está realmente muito, MUITO mole, senhor.\n"
"----------------------------------------\n"
"vendedor : Michael Palin\n"
"cliente : John Cleese\n"
"sketch : Cheese Shop Sketch"

#: ../../tutorial/controlflow.rst:737
msgid ""
"Note that the order in which the keyword arguments are printed is guaranteed "
"to match the order in which they were provided in the function call."
msgstr ""
"Observe que a ordem em que os argumentos nomeados são exibidos é garantida "
"para corresponder à ordem em que foram fornecidos na chamada da função."

#: ../../tutorial/controlflow.rst:741
msgid "Special parameters"
msgstr "Parâmetros especiais"

#: ../../tutorial/controlflow.rst:743
msgid ""
"By default, arguments may be passed to a Python function either by position "
"or explicitly by keyword. For readability and performance, it makes sense to "
"restrict the way arguments can be passed so that a developer need only look "
"at the function definition to determine if items are passed by position, by "
"position or keyword, or by keyword."
msgstr ""
"Por padrão, argumentos podem ser passadas para uma função Python tanto por "
"posição quanto explicitamente pelo nome. Para uma melhor legibilidade e "
"desempenho, faz sentido restringir a maneira pelo qual argumentos possam ser "
"passados, assim um desenvolvedor precisa apenas olhar para a definição da "
"função para determinar se os itens são passados por posição, por posição e "
"nome, ou por nome."

#: ../../tutorial/controlflow.rst:749
msgid "A function definition may look like:"
msgstr "A definição de uma função pode parecer com:"

#: ../../tutorial/controlflow.rst:751
msgid ""
"def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):\n"
"      -----------    ----------     ----------\n"
"        |             |                  |\n"
"        |        Positional or keyword   |\n"
"        |                                - Keyword only\n"
"         -- Positional only"
msgstr ""
"def f(pos1, pos2, /, pos_ou_kwd, *, kwd1, kwd2):\n"
"      -----------    ----------     ----------\n"
"        |             |                  |\n"
"        |        Posicional ou nomeado   |\n"
"        |                                - Somente nomeado\n"
"         -- Somente posicional"

#: ../../tutorial/controlflow.rst:760
msgid ""
"where ``/`` and ``*`` are optional. If used, these symbols indicate the kind "
"of parameter by how the arguments may be passed to the function: positional-"
"only, positional-or-keyword, and keyword-only. Keyword parameters are also "
"referred to as named parameters."
msgstr ""
"onde ``/`` e ``*`` são opcionais. Se usados, esses símbolos indicam o tipo "
"de parâmetro pelo qual os argumentos podem ser passados para as funções: "
"somente-posicional, posicional-ou-nomeado, e somente-nomeado. Parâmetros "
"nomeados são também conhecidos como parâmetros palavra-chave."

#: ../../tutorial/controlflow.rst:767
msgid "Positional-or-Keyword Arguments"
msgstr "Argumentos posicional-ou-nomeados"

#: ../../tutorial/controlflow.rst:769
msgid ""
"If ``/`` and ``*`` are not present in the function definition, arguments may "
"be passed to a function by position or by keyword."
msgstr ""
"Se ``/`` e ``*`` não estão presentes na definição da função, argumentos "
"podem ser passados para uma função por posição ou por nome."

#: ../../tutorial/controlflow.rst:774
msgid "Positional-Only Parameters"
msgstr "Parâmetros somente-posicionais"

#: ../../tutorial/controlflow.rst:776
msgid ""
"Looking at this in a bit more detail, it is possible to mark certain "
"parameters as *positional-only*. If *positional-only*, the parameters' order "
"matters, and the parameters cannot be passed by keyword. Positional-only "
"parameters are placed before a ``/`` (forward-slash). The ``/`` is used to "
"logically separate the positional-only parameters from the rest of the "
"parameters. If there is no ``/`` in the function definition, there are no "
"positional-only parameters."
msgstr ""
"Olhando com um pouco mais de detalhes, é possível definir certos parâmetros "
"como *somente-posicional*. Se *somente-posicional*, a ordem do parâmetro "
"importa, e os parâmetros não podem ser passados por nome. Parâmetros somente-"
"posicional são colocados antes de ``/`` (barra). A ``/`` é usada para "
"logicamente separar os argumentos somente-posicional dos demais parâmetros. "
"Se não existe uma ``/`` na definição da função, não existe parâmetros "
"somente-posicionais."

#: ../../tutorial/controlflow.rst:784
msgid ""
"Parameters following the ``/`` may be *positional-or-keyword* or *keyword-"
"only*."
msgstr ""
"Parâmetros após a ``/`` podem ser *posicional-ou-nomeado* ou *somente-"
"nomeado*."

#: ../../tutorial/controlflow.rst:788
msgid "Keyword-Only Arguments"
msgstr "Argumentos somente-nomeados"

#: ../../tutorial/controlflow.rst:790
msgid ""
"To mark parameters as *keyword-only*, indicating the parameters must be "
"passed by keyword argument, place an ``*`` in the arguments list just before "
"the first *keyword-only* parameter."
msgstr ""
"Para definir parâmetros como *somente-nomeado*, indicando que o parâmetro "
"deve ser passado por argumento nomeado, colocamos um ``*`` na lista de "
"argumentos imediatamente antes do primeiro parâmetro *somente-nomeado*."

#: ../../tutorial/controlflow.rst:796
msgid "Function Examples"
msgstr "Exemplos de funções"

#: ../../tutorial/controlflow.rst:798
msgid ""
"Consider the following example function definitions paying close attention "
"to the markers ``/`` and ``*``::"
msgstr ""
"Considere o seguinte exemplo de definição de função com atenção redobrada "
"para os marcadores ``/`` e ``*``::"

#: ../../tutorial/controlflow.rst:801
msgid ""
">>> def standard_arg(arg):\n"
"...     print(arg)\n"
"...\n"
">>> def pos_only_arg(arg, /):\n"
"...     print(arg)\n"
"...\n"
">>> def kwd_only_arg(*, arg):\n"
"...     print(arg)\n"
"...\n"
">>> def combined_example(pos_only, /, standard, *, kwd_only):\n"
"...     print(pos_only, standard, kwd_only)"
msgstr ""
">>> def arg_padrão(arg):\n"
"...     print(arg)\n"
"...\n"
">>> def arg_somente_pos(arg, /):\n"
"...     print(arg)\n"
"...\n"
">>> def arg_somente_nom(*, arg):\n"
"...     print(arg)\n"
"...\n"
">>> def exemplo_combinado(somente_pos, /, padrão, *, somente_nom):\n"
"...     print(somente_pos, padrão, somente_nom)"

#: ../../tutorial/controlflow.rst:814
msgid ""
"The first function definition, ``standard_arg``, the most familiar form, "
"places no restrictions on the calling convention and arguments may be passed "
"by position or keyword::"
msgstr ""
"A definição da primeira função, ``arg_padrão``, a forma mais familiar, não "
"coloca nenhuma restrição para a chamada da função e argumentos podem ser "
"passados por posição ou nome::"

#: ../../tutorial/controlflow.rst:818
msgid ""
">>> standard_arg(2)\n"
"2\n"
"\n"
">>> standard_arg(arg=2)\n"
"2"
msgstr ""
">>> arg_padrão(2)\n"
"2\n"
"\n"
">>> arg_padrão(arg=2)\n"
"2"

#: ../../tutorial/controlflow.rst:824
msgid ""
"The second function ``pos_only_arg`` is restricted to only use positional "
"parameters as there is a ``/`` in the function definition::"
msgstr ""
"A segunda função ``arg_somente_pos`` está restrita ao uso de parâmetros "
"somente posicionais, uma vez que existe uma ``/`` na definição da função::"

#: ../../tutorial/controlflow.rst:827
msgid ""
">>> pos_only_arg(1)\n"
"1\n"
"\n"
">>> pos_only_arg(arg=1)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: pos_only_arg() got some positional-only arguments passed as "
"keyword arguments: 'arg'"
msgstr ""
">>> arg_somente_pos(1)\n"
"1\n"
"\n"
">>> arg_somente_pos(arg=1)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: arg_somente_pos() got some positional-only arguments passed as "
"keyword arguments: 'arg'"

#: ../../tutorial/controlflow.rst:835
msgid ""
"The third function ``kwd_only_arg`` only allows keyword arguments as "
"indicated by a ``*`` in the function definition::"
msgstr ""
"A terceira função ``arg_somente_nom`` permite somente argumentos nomeados "
"como indicado pelo ``*`` na definição da função::"

#: ../../tutorial/controlflow.rst:838
msgid ""
">>> kwd_only_arg(3)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: kwd_only_arg() takes 0 positional arguments but 1 was given\n"
"\n"
">>> kwd_only_arg(arg=3)\n"
"3"
msgstr ""
">>> arg_somente_nom(3)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: arg_somente_nom() takes 0 positional arguments but 1 was given\n"
"\n"
">>> arg_somente_nom(arg=3)\n"
"3"

#: ../../tutorial/controlflow.rst:846
msgid ""
"And the last uses all three calling conventions in the same function "
"definition::"
msgstr ""
"E a última usa as três convenções de chamada na mesma definição de função::"

#: ../../tutorial/controlflow.rst:849
msgid ""
">>> combined_example(1, 2, 3)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: combined_example() takes 2 positional arguments but 3 were given\n"
"\n"
">>> combined_example(1, 2, kwd_only=3)\n"
"1 2 3\n"
"\n"
">>> combined_example(1, standard=2, kwd_only=3)\n"
"1 2 3\n"
"\n"
">>> combined_example(pos_only=1, standard=2, kwd_only=3)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: combined_example() got some positional-only arguments passed as "
"keyword arguments: 'pos_only'"
msgstr ""
">>> exemplo_combinado(1, 2, 3)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: exemplo_combinado() takes 2 positional arguments but 3 were "
"given\n"
"\n"
">>> exemplo_combinado(1, 2, somente_nom=3)\n"
"1 2 3\n"
"\n"
">>> exemplo_combinado(1, padrão=2, somente_nom=3)\n"
"1 2 3\n"
"\n"
">>> exemplo_combinado(somente_pos=1, padrão=2, somente_nom=3)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: exemplo_combinado() got some positional-only arguments passed as "
"keyword arguments: 'somente_pos'"

#: ../../tutorial/controlflow.rst:866
msgid ""
"Finally, consider this function definition which has a potential collision "
"between the positional argument ``name``  and ``**kwds`` which has ``name`` "
"as a key::"
msgstr ""
"Finalmente, considere essa definição de função que possui uma potencial "
"colisão entre o argumento posicional ``nome`` e ``**kwds`` que possui "
"``nome`` como uma chave::"

#: ../../tutorial/controlflow.rst:868
msgid ""
"def foo(name, **kwds):\n"
"    return 'name' in kwds"
msgstr ""
"def foo(nome, **kwds):\n"
"    return 'nome' in kwds"

#: ../../tutorial/controlflow.rst:871
msgid ""
"There is no possible call that will make it return ``True`` as the keyword "
"``'name'`` will always bind to the first parameter. For example::"
msgstr ""
"Não é possível essa chamada devolver ``True``, uma vez que o argumento "
"nomeado ``'nome'`` sempre será aplicado para o primeiro parâmetro. Por "
"exemplo::"

#: ../../tutorial/controlflow.rst:874
msgid ""
">>> foo(1, **{'name': 2})\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: foo() got multiple values for argument 'name'\n"
">>>"
msgstr ""
">>> foo(1, **{'nome': 2})\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: foo() got multiple values for argument 'nome'\n"
">>>"

#: ../../tutorial/controlflow.rst:880
msgid ""
"But using ``/`` (positional only arguments), it is possible since it allows "
"``name`` as a positional argument and ``'name'`` as a key in the keyword "
"arguments::"
msgstr ""
"Mas usando ``/`` (argumentos somente-posicionais), isso é possível já que "
"permite ``nome`` como um argumento posicional e ``'nome'`` como uma chave "
"nos argumentos nomeados::"

#: ../../tutorial/controlflow.rst:882
msgid ""
">>> def foo(name, /, **kwds):\n"
"...     return 'name' in kwds\n"
"...\n"
">>> foo(1, **{'name': 2})\n"
"True"
msgstr ""
">>> def foo(nome, /, **kwds):\n"
"...     return 'nome' in kwds\n"
"...\n"
">>> foo(1, **{'nome': 2})\n"
"True"

#: ../../tutorial/controlflow.rst:888
msgid ""
"In other words, the names of positional-only parameters can be used in "
"``**kwds`` without ambiguity."
msgstr ""
"Em outras palavras, o nome de parâmetros somente-posicional podem ser usados "
"em ``**kwds`` sem ambiguidade."

#: ../../tutorial/controlflow.rst:893
msgid "Recap"
msgstr "Recapitulando"

#: ../../tutorial/controlflow.rst:895
msgid ""
"The use case will determine which parameters to use in the function "
"definition::"
msgstr ""
"A situação irá determinar quais parâmetros usar na definição da função::"

#: ../../tutorial/controlflow.rst:897
msgid "def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):"
msgstr "def f(pos1, pos2, /, pos_ou_nom *, nom1, nom2):"

#: ../../tutorial/controlflow.rst:899
msgid "As guidance:"
msgstr "Como guia:"

#: ../../tutorial/controlflow.rst:901
msgid ""
"Use positional-only if you want the name of the parameters to not be "
"available to the user. This is useful when parameter names have no real "
"meaning, if you want to enforce the order of the arguments when the function "
"is called or if you need to take some positional parameters and arbitrary "
"keywords."
msgstr ""
"Use somente-posicional se você não quer que o nome do parâmetro esteja "
"disponível para o usuário. Isso é útil quando nomes de parâmetros não tem um "
"significado real, se você quer forçar a ordem dos argumentos da função "
"quando ela é chamada ou se você precisa ter alguns parâmetros posicionais e "
"alguns nomeados."

#: ../../tutorial/controlflow.rst:906
msgid ""
"Use keyword-only when names have meaning and the function definition is more "
"understandable by being explicit with names or you want to prevent users "
"relying on the position of the argument being passed."
msgstr ""
"Use somente-nomeado quando os nomes tem significado e a definição da função "
"fica mais clara deixando esses nomes explícitos ou se você quer evitar que "
"usuários confiem na posição dos argumentos que estão sendo passados."

#: ../../tutorial/controlflow.rst:909
msgid ""
"For an API, use positional-only to prevent breaking API changes if the "
"parameter's name is modified in the future."
msgstr ""
"Para uma API, use somente-posicional para evitar quebras na mudança da API "
"se os nomes dos parâmetros forem alterados no futuro."

#: ../../tutorial/controlflow.rst:915
msgid "Arbitrary Argument Lists"
msgstr "Listas de argumentos arbitrárias"

#: ../../tutorial/controlflow.rst:920
msgid ""
"Finally, the least frequently used option is to specify that a function can "
"be called with an arbitrary number of arguments.  These arguments will be "
"wrapped up in a tuple (see :ref:`tut-tuples`).  Before the variable number "
"of arguments, zero or more normal arguments may occur. ::"
msgstr ""
"Finalmente, a opção menos usada é especificar que a função pode ser chamada "
"com um número arbitrário de argumentos. Esses argumentos serão empacotados "
"em uma tupla (ver :ref:`tut-tuples`). Antes dos argumentos em número "
"variável, zero ou mais argumentos normais podem estar presentes. ::"

#: ../../tutorial/controlflow.rst:925
msgid ""
"def write_multiple_items(file, separator, *args):\n"
"    file.write(separator.join(args))"
msgstr ""
"def escreve_vários_itens(arquivo, separador, *args):\n"
"    file.write(separador.join(args))"

#: ../../tutorial/controlflow.rst:929
msgid ""
"Normally, these *variadic* arguments will be last in the list of formal "
"parameters, because they scoop up all remaining input arguments that are "
"passed to the function. Any formal parameters which occur after the "
"``*args`` parameter are 'keyword-only' arguments, meaning that they can only "
"be used as keywords rather than positional arguments. ::"
msgstr ""
"Normalmente, esses argumentos *variádicos* estarão no final da lista de "
"parâmetros formais, porque eles englobam todos os argumentos de entrada "
"restantes, que são passados para a função. Quaisquer parâmetros formais que "
"ocorrem após o parâmetro ``*args`` são argumentos 'somente-nomeados' , o que "
"significa que eles só podem ser usados como chave-valor, em vez de "
"argumentos posicionais::"

#: ../../tutorial/controlflow.rst:935
msgid ""
">>> def concat(*args, sep=\"/\"):\n"
"...     return sep.join(args)\n"
"...\n"
">>> concat(\"earth\", \"mars\", \"venus\")\n"
"'earth/mars/venus'\n"
">>> concat(\"earth\", \"mars\", \"venus\", sep=\".\")\n"
"'earth.mars.venus'"
msgstr ""
">>> def concat(*args, sep=\"/\"):\n"
"...     return sep.join(args)\n"
"...\n"
">>> concat(\"terra\", \"marte\", \"vênus\")\n"
"'terra/marte/vênus'\n"
">>> concat(\"terra\", \"marte\", \"vênus\", sep=\".\")\n"
"'terra.marte.vênus'"

#: ../../tutorial/controlflow.rst:946
msgid "Unpacking Argument Lists"
msgstr "Desempacotando listas de argumentos"

#: ../../tutorial/controlflow.rst:948
msgid ""
"The reverse situation occurs when the arguments are already in a list or "
"tuple but need to be unpacked for a function call requiring separate "
"positional arguments.  For instance, the built-in :func:`range` function "
"expects separate *start* and *stop* arguments.  If they are not available "
"separately, write the function call with the  ``*``\\ -operator to unpack "
"the arguments out of a list or tuple::"
msgstr ""
"A situação inversa ocorre quando os argumentos já estão numa lista ou tupla "
"mas ela precisa ser explodida para invocarmos uma função que requer "
"argumentos posicionais separados. Por exemplo, a função :func:`range` espera "
"argumentos separados, *start* e *stop*. Se os valores já estiverem juntos em "
"uma lista ou tupla, escreva a chamada de função com o operador ``*`` para "
"desempacotá-los da sequência::"

#: ../../tutorial/controlflow.rst:955
msgid ""
">>> list(range(3, 6))            # normal call with separate arguments\n"
"[3, 4, 5]\n"
">>> args = [3, 6]\n"
">>> list(range(*args))            # call with arguments unpacked from a "
"list\n"
"[3, 4, 5]"
msgstr ""
">>> list(range(3, 6))            # chamada normal com argumentos separados\n"
"[3, 4, 5]\n"
">>> args = [3, 6]\n"
">>> list(range(*args))           # chamada com argumentos desempacotados a "
"partir de uma lista\n"
"[3, 4, 5]"

#: ../../tutorial/controlflow.rst:964
msgid ""
"In the same fashion, dictionaries can deliver keyword arguments with the "
"``**``\\ -operator::"
msgstr ""
"Da mesma forma, dicionários podem produzir argumentos nomeados com o "
"operador ``**``::"

#: ../../tutorial/controlflow.rst:967
msgid ""
">>> def parrot(voltage, state='a stiff', action='voom'):\n"
"...     print(\"-- This parrot wouldn't\", action, end=' ')\n"
"...     print(\"if you put\", voltage, \"volts through it.\", end=' ')\n"
"...     print(\"E's\", state, \"!\")\n"
"...\n"
">>> d = {\"voltage\": \"four million\", \"state\": \"bleedin' demised\", "
"\"action\": \"VOOM\"}\n"
">>> parrot(**d)\n"
"-- This parrot wouldn't VOOM if you put four million volts through it. E's "
"bleedin' demised !"
msgstr ""
">>> def papagaio(voltagem, estado='um cadáver', ação='voar'):\n"
"...     print(\"-- Este papagaio não conseguiria\", ação, end=' ')\n"
"...     print(\"nem se você desse um choque de\", voltagem, \"de volts nele."
"\", end=' ')\n"
"...     print(\"Ele\", estado, \"!\")\n"
"...\n"
">>> d = {\"voltagem\": \"quatro milhões\", \"estado\": \"está realmente "
"morto\", \"ação\": \"voar\"}\n"
">>> papagaio(**d)\n"
"-- Este papagaio não conseguiria voar nem se você desse um choque de quatro "
"milhões de volts nele. Ele está realmente morto !"

#: ../../tutorial/controlflow.rst:980
msgid "Lambda Expressions"
msgstr "Expressões lambda"

#: ../../tutorial/controlflow.rst:982
msgid ""
"Small anonymous functions can be created with the :keyword:`lambda` keyword. "
"This function returns the sum of its two arguments: ``lambda a, b: a+b``. "
"Lambda functions can be used wherever function objects are required.  They "
"are syntactically restricted to a single expression.  Semantically, they are "
"just syntactic sugar for a normal function definition.  Like nested function "
"definitions, lambda functions can reference variables from the containing "
"scope::"
msgstr ""
"Pequenas funções anônimas podem ser criadas com a palavra-chave :keyword:"
"`lambda`. Esta função retorna a soma de seus dois argumentos: ``lambda a, b: "
"a+b``. As funções lambda podem ser usadas sempre que objetos função forem "
"necessários. Eles são sintaticamente restritos a uma única expressão. "
"Semanticamente, eles são apenas açúcar sintático para uma definição de "
"função normal. Como definições de funções aninhadas, as funções lambda podem "
"referenciar variáveis contidas no escopo::"

#: ../../tutorial/controlflow.rst:990
msgid ""
">>> def make_incrementor(n):\n"
"...     return lambda x: x + n\n"
"...\n"
">>> f = make_incrementor(42)\n"
">>> f(0)\n"
"42\n"
">>> f(1)\n"
"43"
msgstr ""
">>> def cria_incrementador(n):\n"
"...     return lambda x: x + n\n"
"...\n"
">>> f = cria_incrementador(42)\n"
">>> f(0)\n"
"42\n"
">>> f(1)\n"
"43"

#: ../../tutorial/controlflow.rst:999
msgid ""
"The above example uses a lambda expression to return a function.  Another "
"use is to pass a small function as an argument::"
msgstr ""
"O exemplo acima usa uma expressão lambda para retornar uma função. Outro uso "
"é passar uma pequena função como um argumento::"

#: ../../tutorial/controlflow.rst:1002
msgid ""
">>> pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]\n"
">>> pairs.sort(key=lambda pair: pair[1])\n"
">>> pairs\n"
"[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]"
msgstr ""
">>> pairs = [(1, 'um'), (2, 'dois'), (3, 'três), (4, 'quatro')]\n"
">>> pairs.sort(key=lambda pair: pair[1])\n"
">>> pairs\n"
"[(4, 'quatro'), (1, 'um'), (3, 'três'), (2, 'dois')]"

#: ../../tutorial/controlflow.rst:1011
msgid "Documentation Strings"
msgstr "Strings de documentação"

#: ../../tutorial/controlflow.rst:1018
msgid ""
"Here are some conventions about the content and formatting of documentation "
"strings."
msgstr ""
"Aqui estão algumas convenções sobre o conteúdo e formatação de strings de "
"documentação, também conhecidas como docstrings."

#: ../../tutorial/controlflow.rst:1021
msgid ""
"The first line should always be a short, concise summary of the object's "
"purpose.  For brevity, it should not explicitly state the object's name or "
"type, since these are available by other means (except if the name happens "
"to be a verb describing a function's operation).  This line should begin "
"with a capital letter and end with a period."
msgstr ""
"A primeira linha deve sempre ser curta, um resumo conciso do propósito do "
"objeto. Por brevidade, não deve explicitamente se referir ao nome ou tipo do "
"objeto, uma vez que estas informações estão disponíveis por outros meios "
"(exceto se o nome da função for o próprio verbo que descreve a finalidade da "
"função). Essa linha deve começar com letra maiúscula e terminar com ponto."

#: ../../tutorial/controlflow.rst:1027
msgid ""
"If there are more lines in the documentation string, the second line should "
"be blank, visually separating the summary from the rest of the description.  "
"The following lines should be one or more paragraphs describing the object's "
"calling conventions, its side effects, etc."
msgstr ""
"Se existem mais linhas na string de documentação, a segunda linha deve estar "
"em branco, separando visualmente o resumo do resto da descrição. As linhas "
"seguintes devem conter um ou mais parágrafos descrevendo as convenções de "
"chamada ao objeto, seus efeitos colaterais, etc."

#: ../../tutorial/controlflow.rst:1032
msgid ""
"The Python parser does not strip indentation from multi-line string literals "
"in Python, so tools that process documentation have to strip indentation if "
"desired.  This is done using the following convention. The first non-blank "
"line *after* the first line of the string determines the amount of "
"indentation for the entire documentation string.  (We can't use the first "
"line since it is generally adjacent to the string's opening quotes so its "
"indentation is not apparent in the string literal.)  Whitespace "
"\"equivalent\" to this indentation is then stripped from the start of all "
"lines of the string.  Lines that are indented less should not occur, but if "
"they occur all their leading whitespace should be stripped.  Equivalence of "
"whitespace should be tested after expansion of tabs (to 8 spaces, normally)."
msgstr ""
"O analisador Python não remove a indentação de literais string multilinha. "
"Portanto, ferramentas que processem strings de documentação precisam lidar "
"com isso, quando desejável. Existe uma convenção para isso. A primeira linha "
"não vazia após a linha de sumário determina a indentação para o resto da "
"string de documentação. (Não podemos usar a primeira linha para isso porque "
"ela em geral está adjacente às aspas que iniciam a string, portanto sua "
"indentação real não fica aparente.) Espaços em branco \"equivalentes\" a "
"essa indentação são então removidos do início das demais linhas da string. "
"Linhas com indentação menor não devem ocorrer, mas se ocorrerem, todos os "
"espaços à sua esquerda são removidos. A equivalência de espaços em branco "
"deve ser testada após a expansão das tabulações (8 espaços, normalmente)."

#: ../../tutorial/controlflow.rst:1044
msgid "Here is an example of a multi-line docstring::"
msgstr "Eis um exemplo de uma string de documentação multilinha::"

#: ../../tutorial/controlflow.rst:1046
msgid ""
">>> def my_function():\n"
"...     \"\"\"Do nothing, but document it.\n"
"...\n"
"...     No, really, it doesn't do anything.\n"
"...     \"\"\"\n"
"...     pass\n"
"...\n"
">>> print(my_function.__doc__)\n"
"Do nothing, but document it.\n"
"\n"
"    No, really, it doesn't do anything."
msgstr ""
">>> def minha_função():\n"
"...     \"\"\"Faz nada, mas documenta-a.\n"
"...\n"
"...     Não, é sério, ela faz nada mesmo.\n"
"...     \"\"\"\n"
"...     pass\n"
"...\n"
">>> print(minha_função.__doc__)\n"
"Faz nada, mas documenta-a.\n"
"\n"
"    Não, é sério, ela faz nada mesmo."

#: ../../tutorial/controlflow.rst:1062
msgid "Function Annotations"
msgstr "Anotações de função"

#: ../../tutorial/controlflow.rst:1070
msgid ""
":ref:`Function annotations <function>` are completely optional metadata "
"information about the types used by user-defined functions (see :pep:`3107` "
"and :pep:`484` for more information)."
msgstr ""
":ref:`Anotações de função<function>` são informações de metadados "
"completamente opcionais sobre os tipos usados pelas funções definidas pelo "
"usuário (veja :pep:`3107` e :pep:`484` para mais informações)."

#: ../../tutorial/controlflow.rst:1074
msgid ""
":term:`Annotations <function annotation>` are stored in the :attr:`!"
"__annotations__` attribute of the function as a dictionary and have no "
"effect on any other part of the function.  Parameter annotations are defined "
"by a colon after the parameter name, followed by an expression evaluating to "
"the value of the annotation.  Return annotations are defined by a literal ``-"
">``, followed by an expression, between the parameter list and the colon "
"denoting the end of the :keyword:`def` statement.  The following example has "
"a required argument, an optional argument, and the return value annotated::"
msgstr ""
":term:`Anotações <function annotation>` são armazenadas no atributo :attr:`!"
"__annotations__` da função como um dicionário e não tem nenhum efeito em "
"qualquer outra parte da função. Anotações de parâmetro são definidas por "
"dois-pontos (\":\") após o nome do parâmetro, seguida por uma expressão que "
"quando avaliada determina o valor da anotação. Anotações do tipo do retorno "
"são definidas por um literal ``->``, seguida por uma expressão, entre a "
"lista de parâmetro e os dois-pontos que marcam o fim da instrução :keyword:"
"`def` . O exemplo a seguir possui um argumento obrigatório, um argumento "
"opcional e o valor de retorno anotados::"

#: ../../tutorial/controlflow.rst:1083
msgid ""
">>> def f(ham: str, eggs: str = 'eggs') -> str:\n"
"...     print(\"Annotations:\", f.__annotations__)\n"
"...     print(\"Arguments:\", ham, eggs)\n"
"...     return ham + ' and ' + eggs\n"
"...\n"
">>> f('spam')\n"
"Annotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class "
"'str'>}\n"
"Arguments: spam eggs\n"
"'spam and eggs'"
msgstr ""
">>> def f(ham: str, ovos: str = 'ovos') -> str:\n"
"...     print(\"Anotações:\", f.__annotations__)\n"
"...     print(\"Argumentos:\", ham, ovos)\n"
"...     return ham + ' e ' + ovos\n"
"...\n"
">>> f('spam')\n"
"Anotações: {'ham': <class 'str'>, 'return': <class 'str'>, 'ovos': <class "
"'str'>}\n"
"Argumentos: spam ovos\n"
"'spam e ovos'"

#: ../../tutorial/controlflow.rst:1096
msgid "Intermezzo: Coding Style"
msgstr "Intermezzo: estilo de codificação"

#: ../../tutorial/controlflow.rst:1101
msgid ""
"Now that you are about to write longer, more complex pieces of Python, it is "
"a good time to talk about *coding style*.  Most languages can be written (or "
"more concise, *formatted*) in different styles; some are more readable than "
"others. Making it easy for others to read your code is always a good idea, "
"and adopting a nice coding style helps tremendously for that."
msgstr ""
"Agora que está prestes a escrever códigos mais longos e complexos em Python, "
"é um bom momento para falar sobre *estilo de codificação*. A maioria das "
"linguagens podem ser escritas (ou *formatadas*) em diferentes estilos; "
"alguns são mais legíveis do que outros. Tornar o seu código mais fácil de "
"ler, para os outros, é sempre uma boa ideia, e adotar um estilo de "
"codificação agradável ajuda bastante."

#: ../../tutorial/controlflow.rst:1107
msgid ""
"For Python, :pep:`8` has emerged as the style guide that most projects "
"adhere to; it promotes a very readable and eye-pleasing coding style.  Every "
"Python developer should read it at some point; here are the most important "
"points extracted for you:"
msgstr ""
"Em Python, a :pep:`8` tornou-se o guia de estilo adotado pela maioria dos "
"projetos; promove um estilo de codificação muito legível e visualmente "
"agradável. Todo desenvolvedor Python deve lê-lo em algum momento; eis os "
"pontos mais importantes, selecionados para você:"

#: ../../tutorial/controlflow.rst:1112
msgid "Use 4-space indentation, and no tabs."
msgstr "Use indentação com 4 espaços, e não use tabulações."

#: ../../tutorial/controlflow.rst:1114
msgid ""
"4 spaces are a good compromise between small indentation (allows greater "
"nesting depth) and large indentation (easier to read).  Tabs introduce "
"confusion, and are best left out."
msgstr ""
"4 espaços são um bom meio termo entre indentação estreita (permite maior "
"profundidade de aninhamento) e indentação larga (mais fácil de ler). "
"Tabulações trazem complicações, e o melhor é não usar."

#: ../../tutorial/controlflow.rst:1118
msgid "Wrap lines so that they don't exceed 79 characters."
msgstr "Quebre as linhas de modo que não excedam 79 caracteres."

#: ../../tutorial/controlflow.rst:1120
msgid ""
"This helps users with small displays and makes it possible to have several "
"code files side-by-side on larger displays."
msgstr ""
"Isso ajuda os usuários com telas pequenas e torna possível abrir vários "
"arquivos de código lado a lado em telas maiores."

#: ../../tutorial/controlflow.rst:1123
msgid ""
"Use blank lines to separate functions and classes, and larger blocks of code "
"inside functions."
msgstr ""
"Deixe linhas em branco para separar funções e classes, e blocos de código "
"dentro de funções."

#: ../../tutorial/controlflow.rst:1126
msgid "When possible, put comments on a line of their own."
msgstr "Quando possível, coloque comentários em uma linha própria."

#: ../../tutorial/controlflow.rst:1128
msgid "Use docstrings."
msgstr "Escreva strings de documentação."

#: ../../tutorial/controlflow.rst:1130
msgid ""
"Use spaces around operators and after commas, but not directly inside "
"bracketing constructs: ``a = f(1, 2) + g(3, 4)``."
msgstr ""
"Use espaços ao redor de operadores e após vírgulas, mas não diretamente "
"dentro de parênteses, colchetes e chaves: ``a = f(1, 2) + g(3, 4)``."

#: ../../tutorial/controlflow.rst:1133
msgid ""
"Name your classes and functions consistently; the convention is to use "
"``UpperCamelCase`` for classes and ``lowercase_with_underscores`` for "
"functions and methods.  Always use ``self`` as the name for the first method "
"argument (see :ref:`tut-firstclasses` for more on classes and methods)."
msgstr ""
"Nomeie suas classes e funções de forma consistente; a convenção é usar "
"``MaiusculoCamelCase`` para classes e ``minusculo_com_sublinhado`` para "
"funções e métodos. Sempre use ``self`` como o nome para o primeiro argumento "
"dos métodos (veja :ref:`tut-firstclasses` para mais informações sobre "
"classes e métodos)."

#: ../../tutorial/controlflow.rst:1138
msgid ""
"Don't use fancy encodings if your code is meant to be used in international "
"environments.  Python's default, UTF-8, or even plain ASCII work best in any "
"case."
msgstr ""
"Não use codificações exóticas se o seu código é feito para ser usado em um "
"contexto internacional. O padrão do Python, UTF-8, ou mesmo ASCII puro "
"funciona bem em qualquer caso."

#: ../../tutorial/controlflow.rst:1142
msgid ""
"Likewise, don't use non-ASCII characters in identifiers if there is only the "
"slightest chance people speaking a different language will read or maintain "
"the code."
msgstr ""
"Da mesma forma, não use caracteres não-ASCII em identificadores se houver "
"apenas a menor chance de pessoas falando um idioma diferente ler ou manter o "
"código."

#: ../../tutorial/controlflow.rst:1148
msgid "Footnotes"
msgstr "Notas de rodapé"

#: ../../tutorial/controlflow.rst:1149
msgid ""
"Actually, *call by object reference* would be a better description, since if "
"a mutable object is passed, the caller will see any changes the callee makes "
"to it (items inserted into a list)."
msgstr ""
"Na verdade, *passagem por referência para objeto* seria uma descrição "
"melhor, pois, se um objeto mutável for passado, quem chamou verá as "
"alterações feitas por quem foi chamado (por exemplo, a inclusão de itens em "
"uma lista)."

#: ../../tutorial/controlflow.rst:48
msgid "statement"
msgstr "instrução"

#: ../../tutorial/controlflow.rst:48
msgid "for"
msgstr "for"

#: ../../tutorial/controlflow.rst:476 ../../tutorial/controlflow.rst:1013
msgid "documentation strings"
msgstr "strings, documentação"

#: ../../tutorial/controlflow.rst:476 ../../tutorial/controlflow.rst:1013
msgid "docstrings"
msgstr "docstrings"

#: ../../tutorial/controlflow.rst:476 ../../tutorial/controlflow.rst:1013
msgid "strings, documentation"
msgstr "strings, documentação"

#: ../../tutorial/controlflow.rst:917
msgid "* (asterisk)"
msgstr "* (asterisco)"

#: ../../tutorial/controlflow.rst:917 ../../tutorial/controlflow.rst:961
msgid "in function calls"
msgstr "em chamadas de função"

#: ../../tutorial/controlflow.rst:961
msgid "**"
msgstr "**"

#: ../../tutorial/controlflow.rst:1065
msgid "function"
msgstr "função"

#: ../../tutorial/controlflow.rst:1065
msgid "annotations"
msgstr "annotations"

#: ../../tutorial/controlflow.rst:1065
msgid "->"
msgstr "->"

#: ../../tutorial/controlflow.rst:1065
msgid "function annotations"
msgstr "anotações de função"

#: ../../tutorial/controlflow.rst:1065
msgid ": (colon)"
msgstr ": (dois pontos)"

#: ../../tutorial/controlflow.rst:1099
msgid "coding"
msgstr "codificação"

#: ../../tutorial/controlflow.rst:1099
msgid "style"
msgstr "estilo"
