# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-13 14:48+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../glossary.rst:5
msgid "Glossary"
msgstr "Glossário"

#: ../../glossary.rst:10
msgid "``>>>``"
msgstr "``>>>``"

#: ../../glossary.rst:12
msgid ""
"The default Python prompt of the interactive shell.  Often seen for code "
"examples which can be executed interactively in the interpreter."
msgstr ""
"O prompt padrão do console interativo do Python. Normalmente visto em "
"exemplos de código que podem ser executados interativamente no interpretador."

#: ../../glossary.rst:14
msgid "``...``"
msgstr "``...``"

#: ../../glossary.rst:16
msgid "Can refer to:"
msgstr "Pode se referir a:"

#: ../../glossary.rst:18
msgid ""
"The default Python prompt of the interactive shell when entering the code "
"for an indented code block, when within a pair of matching left and right "
"delimiters (parentheses, square brackets, curly braces or triple quotes), or "
"after specifying a decorator."
msgstr ""
"O prompt padrão do shell interativo do Python ao inserir o código para um "
"bloco de código recuado, quando dentro de um par de delimitadores "
"correspondentes esquerdo e direito (parênteses, colchetes, chaves ou aspas "
"triplas) ou após especificar um decorador."

#: ../../glossary.rst:23
msgid "The :const:`Ellipsis` built-in constant."
msgstr "A constante embutida :const:`Ellipsis`."

#: ../../glossary.rst:24
msgid "2to3"
msgstr "2to3"

#: ../../glossary.rst:26
msgid ""
"A tool that tries to convert Python 2.x code to Python 3.x code by handling "
"most of the incompatibilities which can be detected by parsing the source "
"and traversing the parse tree."
msgstr ""
"Uma ferramenta que tenta converter código Python 2.x em código Python 3.x "
"tratando a maioria das incompatibilidades que podem ser detectadas com "
"análise do código-fonte e navegação na árvore sintática."

#: ../../glossary.rst:30
msgid ""
"2to3 is available in the standard library as :mod:`lib2to3`; a standalone "
"entry point is provided as :file:`Tools/scripts/2to3`.  See :ref:`2to3-"
"reference`."
msgstr ""
"O 2to3 está disponível na biblioteca padrão como :mod:`lib2to3`; um ponto de "
"entrada é disponibilizado como :file:`Tools/scripts/2to3`. Veja :ref:`2to3-"
"reference`."

#: ../../glossary.rst:33
msgid "abstract base class"
msgstr "classe base abstrata"

#: ../../glossary.rst:35
msgid ""
"Abstract base classes complement :term:`duck-typing` by providing a way to "
"define interfaces when other techniques like :func:`hasattr` would be clumsy "
"or subtly wrong (for example with :ref:`magic methods <special-lookup>`).  "
"ABCs introduce virtual subclasses, which are classes that don't inherit from "
"a class but are still recognized by :func:`isinstance` and :func:"
"`issubclass`; see the :mod:`abc` module documentation.  Python comes with "
"many built-in ABCs for data structures (in the :mod:`collections.abc` "
"module), numbers (in the :mod:`numbers` module), streams (in the :mod:`io` "
"module), import finders and loaders (in the :mod:`importlib.abc` module).  "
"You can create your own ABCs with the :mod:`abc` module."
msgstr ""
"Classes bases abstratas complementam :term:`tipagem pato <duck-typing>`, "
"fornecendo uma maneira de definir interfaces quando outras técnicas, como :"
"func:`hasattr`, seriam desajeitadas ou sutilmente erradas (por exemplo, com :"
"ref:`métodos mágicos <special-lookup>`). CBAs introduzem subclasses "
"virtuais, classes que não herdam de uma classe mas ainda são reconhecidas "
"por :func:`isinstance` e :func:`issubclass`; veja a documentação do módulo :"
"mod:`abc`. Python vem com muitas CBAs embutidas para estruturas de dados (no "
"módulo :mod:`collections.abc`), números (no módulo :mod:`numbers`), fluxos "
"(no módulo :mod:`io`), localizadores e carregadores de importação (no "
"módulo :mod:`importlib.abc`). Você pode criar suas próprias CBAs com o "
"módulo :mod:`abc`."

#: ../../glossary.rst:46
msgid "annotation"
msgstr "anotação"

#: ../../glossary.rst:48
msgid ""
"A label associated with a variable, a class attribute or a function "
"parameter or return value, used by convention as a :term:`type hint`."
msgstr ""
"Um rótulo associado a uma variável, um atributo de classe ou um parâmetro de "
"função ou valor de retorno, usado por convenção como :term:`dica de tipo "
"<type hint>`."

#: ../../glossary.rst:52
msgid ""
"Annotations of local variables cannot be accessed at runtime, but "
"annotations of global variables, class attributes, and functions are stored "
"in the :attr:`__annotations__` special attribute of modules, classes, and "
"functions, respectively."
msgstr ""
"Anotações de variáveis ​​locais não podem ser acessadas em tempo de execução, "
"mas anotações de variáveis ​​globais, atributos de classe e funções são "
"armazenadas no atributo especial :attr:`__annotations__` de módulos, classes "
"e funções, respectivamente."

#: ../../glossary.rst:58
msgid ""
"See :term:`variable annotation`, :term:`function annotation`, :pep:`484` "
"and :pep:`526`, which describe this functionality. Also see :ref:"
"`annotations-howto` for best practices on working with annotations."
msgstr ""
"Veja :term:`anotação de variável`, :term:`anotação de função`, :pep:`484` e :"
"pep:`526`, que descrevem esta funcionalidade. Veja também :ref:`annotations-"
"howto` para as melhores práticas sobre como trabalhar com anotações."

#: ../../glossary.rst:62
msgid "argument"
msgstr "argumento"

#: ../../glossary.rst:64
msgid ""
"A value passed to a :term:`function` (or :term:`method`) when calling the "
"function.  There are two kinds of argument:"
msgstr ""
"Um valor passado para uma :term:`função<function>` (ou :term:"
"`método<method>`) ao chamar a função. Existem dois tipos de argumento:"

#: ../../glossary.rst:67
msgid ""
":dfn:`keyword argument`: an argument preceded by an identifier (e.g. "
"``name=``) in a function call or passed as a value in a dictionary preceded "
"by ``**``.  For example, ``3`` and ``5`` are both keyword arguments in the "
"following calls to :func:`complex`::"
msgstr ""
":dfn:`argumento nomeado`: um argumento precedido por um identificador (por "
"exemplo, ``name=``) na chamada de uma função ou passada como um valor em um "
"dicionário precedido por ``**``. Por exemplo, ``3`` e ``5`` são ambos "
"argumentos nomeados na chamada da função :func:`complex` a seguir::"

#: ../../glossary.rst:72
msgid ""
"complex(real=3, imag=5)\n"
"complex(**{'real': 3, 'imag': 5})"
msgstr ""
"complex(real=3, imag=5)\n"
"complex(**{'real': 3, 'imag': 5})"

#: ../../glossary.rst:75
msgid ""
":dfn:`positional argument`: an argument that is not a keyword argument. "
"Positional arguments can appear at the beginning of an argument list and/or "
"be passed as elements of an :term:`iterable` preceded by ``*``. For example, "
"``3`` and ``5`` are both positional arguments in the following calls::"
msgstr ""
":dfn:`argumento posicional`: um argumento que não é um argumento nomeado. "
"Argumentos posicionais podem aparecer no início da lista de argumentos e/ou "
"podem ser passados com elementos de um :term:`iterável<iterable>` precedido "
"por ``*``. Por exemplo, ``3`` e ``5`` são ambos argumentos posicionais nas "
"chamadas a seguir::"

#: ../../glossary.rst:81
msgid ""
"complex(3, 5)\n"
"complex(*(3, 5))"
msgstr ""
"complex(3, 5)\n"
"complex(*(3, 5))"

#: ../../glossary.rst:84
msgid ""
"Arguments are assigned to the named local variables in a function body. See "
"the :ref:`calls` section for the rules governing this assignment. "
"Syntactically, any expression can be used to represent an argument; the "
"evaluated value is assigned to the local variable."
msgstr ""
"Argumentos são atribuídos às variáveis locais nomeadas no corpo da função. "
"Veja a seção :ref:`calls` para as regras de atribuição. Sintaticamente, "
"qualquer expressão pode ser usada para representar um argumento; avaliada a "
"expressão, o valor é atribuído à variável local."

#: ../../glossary.rst:89
msgid ""
"See also the :term:`parameter` glossary entry, the FAQ question on :ref:`the "
"difference between arguments and parameters <faq-argument-vs-parameter>`, "
"and :pep:`362`."
msgstr ""
"Veja também o termo :term:`parâmetro` no glossário, a pergunta no FAQ sobre :"
"ref:`a diferença entre argumentos e parâmetros <faq-argument-vs-parameter>` "
"e :pep:`362`."

#: ../../glossary.rst:92
msgid "asynchronous context manager"
msgstr "gerenciador de contexto assíncrono"

#: ../../glossary.rst:94
msgid ""
"An object which controls the environment seen in an :keyword:`async with` "
"statement by defining :meth:`~object.__aenter__` and :meth:`~object."
"__aexit__` methods.  Introduced by :pep:`492`."
msgstr ""
"Um objeto que controla o ambiente visto numa instrução :keyword:`async with` "
"por meio da definição dos métodos :meth:`~object.__aenter__` e :meth:"
"`~object.__aexit__`. Introduzido pela :pep:`492`."

#: ../../glossary.rst:97
msgid "asynchronous generator"
msgstr "gerador assíncrono"

#: ../../glossary.rst:99
msgid ""
"A function which returns an :term:`asynchronous generator iterator`.  It "
"looks like a coroutine function defined with :keyword:`async def` except "
"that it contains :keyword:`yield` expressions for producing a series of "
"values usable in an :keyword:`async for` loop."
msgstr ""
"Uma função que retorna um :term:`iterador gerador assíncrono`. É parecida "
"com uma função de corrotina definida com :keyword:`async def` exceto pelo "
"fato de conter instruções :keyword:`yield` para produzir uma série de "
"valores que podem ser usados em um laço :keyword:`async for`."

#: ../../glossary.rst:104
msgid ""
"Usually refers to an asynchronous generator function, but may refer to an "
"*asynchronous generator iterator* in some contexts.  In cases where the "
"intended meaning isn't clear, using the full terms avoids ambiguity."
msgstr ""
"Normalmente se refere a uma função geradora assíncrona, mas pode se referir "
"a um *iterador gerador assíncrono* em alguns contextos. Em casos em que o "
"significado não esteja claro, usar o termo completo evita a ambiguidade."

#: ../../glossary.rst:108
msgid ""
"An asynchronous generator function may contain :keyword:`await` expressions "
"as well as :keyword:`async for`, and :keyword:`async with` statements."
msgstr ""
"Uma função geradora assíncrona pode conter expressões :keyword:`await` e "
"também as instruções :keyword:`async for` e :keyword:`async with`."

#: ../../glossary.rst:111
msgid "asynchronous generator iterator"
msgstr "iterador gerador assíncrono"

#: ../../glossary.rst:113
msgid "An object created by a :term:`asynchronous generator` function."
msgstr ""
"Um objeto criado por uma função :term:`geradora assíncrona <asynchronous "
"generator>`."

#: ../../glossary.rst:115
msgid ""
"This is an :term:`asynchronous iterator` which when called using the :meth:"
"`~object.__anext__` method returns an awaitable object which will execute "
"the body of the asynchronous generator function until the next :keyword:"
"`yield` expression."
msgstr ""
"Este é um :term:`iterador assíncrono` que, quando chamado usando o método :"
"meth:`~object.__anext__`, retorna um objeto aguardável que executará o corpo "
"da função geradora assíncrona até a próxima expressão :keyword:`yield`."

#: ../../glossary.rst:120
msgid ""
"Each :keyword:`yield` temporarily suspends processing, remembering the "
"location execution state (including local variables and pending try-"
"statements).  When the *asynchronous generator iterator* effectively resumes "
"with another awaitable returned by :meth:`~object.__anext__`, it picks up "
"where it left off.  See :pep:`492` and :pep:`525`."
msgstr ""
"Cada :keyword:`yield` suspende temporariamente o processamento, lembrando o "
"estado de execução do local (incluindo variáveis locais e instruções ``try`` "
"pendentes). Quando o *iterador gerador assíncrono* é efetivamente retomado "
"com outro aguardável retornado por :meth:`~object.__anext__`, ele inicia de "
"onde parou. Veja :pep:`492` e :pep:`525`."

#: ../../glossary.rst:125
msgid "asynchronous iterable"
msgstr "iterável assíncrono"

#: ../../glossary.rst:127
msgid ""
"An object, that can be used in an :keyword:`async for` statement. Must "
"return an :term:`asynchronous iterator` from its :meth:`~object.__aiter__` "
"method.  Introduced by :pep:`492`."
msgstr ""
"Um objeto que pode ser usado em uma instrução :keyword:`async for`. Deve "
"retornar um :term:`iterador assíncrono` do seu método :meth:`~object."
"__aiter__`. Introduzido por :pep:`492`."

#: ../../glossary.rst:130
msgid "asynchronous iterator"
msgstr "iterador assíncrono"

#: ../../glossary.rst:132
msgid ""
"An object that implements the :meth:`~object.__aiter__` and :meth:`~object."
"__anext__` methods.  :meth:`~object.__anext__` must return an :term:"
"`awaitable` object. :keyword:`async for` resolves the awaitables returned by "
"an asynchronous iterator's :meth:`~object.__anext__` method until it raises "
"a :exc:`StopAsyncIteration` exception.  Introduced by :pep:`492`."
msgstr ""
"Um objeto que implementa os métodos :meth:`~object.__aiter__` e :meth:"
"`~object.__anext__`. :meth:`~object.__anext__` deve retornar um objeto :term:"
"`aguardável <awaitable>`. :keyword:`async for` resolve os aguardáveis "
"retornados por um método :meth:`~object.__anext__` do iterador assíncrono "
"até que ele levante uma exceção :exc:`StopAsyncIteration`. Introduzido pela :"
"pep:`492`."

#: ../../glossary.rst:137
msgid "attribute"
msgstr "atributo"

#: ../../glossary.rst:139
msgid ""
"A value associated with an object which is usually referenced by name using "
"dotted expressions. For example, if an object *o* has an attribute *a* it "
"would be referenced as *o.a*."
msgstr ""
"Um valor associado a um objeto que é geralmente referenciado pelo nome "
"separado por um ponto. Por exemplo, se um objeto *o* tem um atributo *a* "
"esse seria referenciado como *o.a*."

#: ../../glossary.rst:144
msgid ""
"It is possible to give an object an attribute whose name is not an "
"identifier as defined by :ref:`identifiers`, for example using :func:"
"`setattr`, if the object allows it. Such an attribute will not be accessible "
"using a dotted expression, and would instead need to be retrieved with :func:"
"`getattr`."
msgstr ""
"É possível dar a um objeto um atributo cujo nome não seja um identificador "
"conforme definido por :ref:`identifiers`, por exemplo usando :func:"
"`setattr`, se o objeto permitir. Tal atributo não será acessível usando uma "
"expressão pontilhada e, em vez disso, precisaria ser recuperado com :func:"
"`getattr`."

#: ../../glossary.rst:149
msgid "awaitable"
msgstr "aguardável"

#: ../../glossary.rst:151
msgid ""
"An object that can be used in an :keyword:`await` expression.  Can be a :"
"term:`coroutine` or an object with an :meth:`~object.__await__` method. See "
"also :pep:`492`."
msgstr ""
"Um objeto que pode ser usado em uma expressão :keyword:`await`. Pode ser "
"uma :term:`corrotina` ou um objeto com um método :meth:`~object.__await__`. "
"Veja também a :pep:`492`."

#: ../../glossary.rst:154
msgid "BDFL"
msgstr "BDFL"

#: ../../glossary.rst:156
msgid ""
"Benevolent Dictator For Life, a.k.a. `Guido van Rossum <https://gvanrossum."
"github.io/>`_, Python's creator."
msgstr ""
"Abreviação da expressão da língua inglesa \"Benevolent Dictator for "
"Life\" (em português, \"Ditador Benevolente Vitalício\"), referindo-se a "
"`Guido van Rossum <https://gvanrossum.github.io/>`_, criador do Python."

#: ../../glossary.rst:158
msgid "binary file"
msgstr "arquivo binário"

#: ../../glossary.rst:160
msgid ""
"A :term:`file object` able to read and write :term:`bytes-like objects "
"<bytes-like object>`. Examples of binary files are files opened in binary "
"mode (``'rb'``, ``'wb'`` or ``'rb+'``), :data:`sys.stdin.buffer <sys."
"stdin>`, :data:`sys.stdout.buffer <sys.stdout>`, and instances of :class:`io."
"BytesIO` and :class:`gzip.GzipFile`."
msgstr ""
"Um :term:`objeto arquivo <file object>` capaz de ler e gravar em :term:"
"`objetos bytes ou similar <bytes-like object>`. Exemplos de arquivos "
"binários são arquivos abertos no modo binário (``'rb'``, ``'wb'`` ou "
"``'rb+'``), :data:`sys.stdin.buffer <sys.stdin>`, :data:`sys.stdout.buffer "
"<sys.stdout>`, e instâncias de :class:`io.BytesIO` e :class:`gzip.GzipFile`."

#: ../../glossary.rst:167
msgid ""
"See also :term:`text file` for a file object able to read and write :class:"
"`str` objects."
msgstr ""
"Veja também :term:`arquivo texto <text file>` para um objeto arquivo capaz "
"de ler e gravar em objetos :class:`str`."

#: ../../glossary.rst:169
msgid "borrowed reference"
msgstr "referência emprestada"

#: ../../glossary.rst:171
msgid ""
"In Python's C API, a borrowed reference is a reference to an object, where "
"the code using the object does not own the reference. It becomes a dangling "
"pointer if the object is destroyed. For example, a garbage collection can "
"remove the last :term:`strong reference` to the object and so destroy it."
msgstr ""
"Na API C do Python, uma referência emprestada é uma referência a um objeto "
"que não é dona da referência. Ela se torna um ponteiro solto se o objeto for "
"destruído. Por exemplo, uma coleta de lixo pode remover a última :term:"
"`referência forte` para o objeto e assim destruí-lo."

#: ../../glossary.rst:177
msgid ""
"Calling :c:func:`Py_INCREF` on the :term:`borrowed reference` is recommended "
"to convert it to a :term:`strong reference` in-place, except when the object "
"cannot be destroyed before the last usage of the borrowed reference. The :c:"
"func:`Py_NewRef` function can be used to create a new :term:`strong "
"reference`."
msgstr ""
"Chamar :c:func:`Py_INCREF` na :term:`referência emprestada` é recomendado "
"para convertê-lo, internamente, em uma :term:`referência forte`, exceto "
"quando o objeto não pode ser destruído antes do último uso da referência "
"emprestada. A função :c:func:`Py_NewRef` pode ser usada para criar uma nova :"
"term:`referência forte`."

#: ../../glossary.rst:182
msgid "bytes-like object"
msgstr "objeto byte ou similar"

#: ../../glossary.rst:184
msgid ""
"An object that supports the :ref:`bufferobjects` and can export a C-:term:"
"`contiguous` buffer. This includes all :class:`bytes`, :class:`bytearray`, "
"and :class:`array.array` objects, as well as many common :class:`memoryview` "
"objects.  Bytes-like objects can be used for various operations that work "
"with binary data; these include compression, saving to a binary file, and "
"sending over a socket."
msgstr ""
"Um objeto com suporte ao o :ref:`bufferobjects` e que pode exportar um "
"buffer C :term:`contíguo <contiguous>`. Isso inclui todos os objetos :class:"
"`bytes`, :class:`bytearray` e :class:`array.array`, além de muitos objetos  :"
"class:`memoryview` comuns. Objetos byte ou similar podem ser usados para "
"várias operações que funcionam com dados binários; isso inclui compactação, "
"salvamento em um arquivo binário e envio por um soquete."

#: ../../glossary.rst:191
msgid ""
"Some operations need the binary data to be mutable.  The documentation often "
"refers to these as \"read-write bytes-like objects\".  Example mutable "
"buffer objects include :class:`bytearray` and a :class:`memoryview` of a :"
"class:`bytearray`. Other operations require the binary data to be stored in "
"immutable objects (\"read-only bytes-like objects\"); examples of these "
"include :class:`bytes` and a :class:`memoryview` of a :class:`bytes` object."
msgstr ""
"Algumas operações precisam que os dados binários sejam mutáveis. A "
"documentação geralmente se refere a eles como \"objetos byte ou similar para "
"leitura e escrita\". Exemplos de objetos de buffer mutável incluem :class:"
"`bytearray` e um :class:`memoryview` de um :class:`bytearray`. Outras "
"operações exigem que os dados binários sejam armazenados em objetos "
"imutáveis (\"objetos byte ou similar para somente leitura\"); exemplos disso "
"incluem :class:`bytes` e a :class:`memoryview` de um objeto :class:`bytes`."

#: ../../glossary.rst:199
msgid "bytecode"
msgstr "bytecode"

#: ../../glossary.rst:201
msgid ""
"Python source code is compiled into bytecode, the internal representation of "
"a Python program in the CPython interpreter.  The bytecode is also cached in "
"``.pyc`` files so that executing the same file is faster the second time "
"(recompilation from source to bytecode can be avoided).  This \"intermediate "
"language\" is said to run on a :term:`virtual machine` that executes the "
"machine code corresponding to each bytecode. Do note that bytecodes are not "
"expected to work between different Python virtual machines, nor to be stable "
"between Python releases."
msgstr ""
"O código-fonte Python é compilado para bytecode, a representação interna de "
"um programa em Python no interpretador CPython. O bytecode também é mantido "
"em cache em arquivos ``.pyc`` e ``.pyo``, de forma que executar um mesmo "
"arquivo é mais rápido na segunda vez (a recompilação dos fontes para "
"bytecode não é necessária). Esta \"linguagem intermediária\" é adequada para "
"execução em uma :term:`máquina virtual`, que executa o código de máquina "
"correspondente para cada bytecode. Tenha em mente que não se espera que "
"bytecodes sejam executados entre máquinas virtuais Python diferentes, nem "
"que se mantenham estáveis entre versões de Python."

#: ../../glossary.rst:211
msgid ""
"A list of bytecode instructions can be found in the documentation for :ref:"
"`the dis module <bytecodes>`."
msgstr ""
"Uma lista de instruções bytecode pode ser encontrada na documentação para :"
"ref:`o módulo dis <bytecodes>`."

#: ../../glossary.rst:213
msgid "callable"
msgstr "chamável"

#: ../../glossary.rst:215
msgid ""
"A callable is an object that can be called, possibly with a set of arguments "
"(see :term:`argument`), with the following syntax::"
msgstr ""
"Um chamável é um objeto que pode ser chamado, possivelmente com um conjunto "
"de argumentos (veja :term:`argumento`), com a seguinte sintaxe::"

#: ../../glossary.rst:218
msgid "callable(argument1, argument2, argumentN)"
msgstr "chamavel(argumento1, argumento2, argumentoN)"

#: ../../glossary.rst:220
msgid ""
"A :term:`function`, and by extension a :term:`method`, is a callable. An "
"instance of a class that implements the :meth:`~object.__call__` method is "
"also a callable."
msgstr ""
"Uma :term:`função`, e por extensão um :term:`método`, é um chamável. Uma "
"instância de uma classe que implementa o método :meth:`~object.__call__` "
"também é um chamável."

#: ../../glossary.rst:223
msgid "callback"
msgstr "função de retorno"

#: ../../glossary.rst:225
msgid ""
"A subroutine function which is passed as an argument to be executed at some "
"point in the future."
msgstr ""
"Também conhecida como callback, é uma função sub-rotina que é passada como "
"um argumento a ser executado em algum ponto no futuro."

#: ../../glossary.rst:227
msgid "class"
msgstr "classe"

#: ../../glossary.rst:229
msgid ""
"A template for creating user-defined objects. Class definitions normally "
"contain method definitions which operate on instances of the class."
msgstr ""
"Um modelo para criação de objetos definidos pelo usuário. Definições de "
"classe normalmente contém definições de métodos que operam sobre instâncias "
"da classe."

#: ../../glossary.rst:232
msgid "class variable"
msgstr "variável de classe"

#: ../../glossary.rst:234
msgid ""
"A variable defined in a class and intended to be modified only at class "
"level (i.e., not in an instance of the class)."
msgstr ""
"Uma variável definida em uma classe e destinada a ser modificada apenas no "
"nível da classe (ou seja, não em uma instância da classe)."

#: ../../glossary.rst:236
msgid "complex number"
msgstr "número complexo"

#: ../../glossary.rst:238
msgid ""
"An extension of the familiar real number system in which all numbers are "
"expressed as a sum of a real part and an imaginary part.  Imaginary numbers "
"are real multiples of the imaginary unit (the square root of ``-1``), often "
"written ``i`` in mathematics or ``j`` in engineering.  Python has built-in "
"support for complex numbers, which are written with this latter notation; "
"the imaginary part is written with a ``j`` suffix, e.g., ``3+1j``.  To get "
"access to complex equivalents of the :mod:`math` module, use :mod:`cmath`.  "
"Use of complex numbers is a fairly advanced mathematical feature.  If you're "
"not aware of a need for them, it's almost certain you can safely ignore them."
msgstr ""
"Uma extensão ao familiar sistema de números reais em que todos os números "
"são expressos como uma soma de uma parte real e uma parte imaginária. "
"Números imaginários são múltiplos reais da unidade imaginária (a raiz "
"quadrada de ``-1``), normalmente escrita como ``i`` em matemática ou ``j`` "
"em engenharia. O Python tem suporte nativo para números complexos, que são "
"escritos com esta última notação; a parte imaginária escrita com um sufixo "
"``j``, p.ex., ``3+1j``. Para ter acesso aos equivalentes para números "
"complexos do módulo :mod:`math`, utilize :mod:`cmath`. O uso de números "
"complexos é uma funcionalidade matemática bastante avançada. Se você não "
"sabe se irá precisar deles, é quase certo que você pode ignorá-los sem "
"problemas."

#: ../../glossary.rst:248
msgid "context manager"
msgstr "gerenciador de contexto"

#: ../../glossary.rst:250
msgid ""
"An object which controls the environment seen in a :keyword:`with` statement "
"by defining :meth:`~object.__enter__` and :meth:`~object.__exit__` methods. "
"See :pep:`343`."
msgstr ""
"Um objeto que controla o ambiente visto numa instrução :keyword:`with` por "
"meio da definição dos métodos :meth:`~object.__enter__` e :meth:`~object."
"__exit__`. Veja :pep:`343`."

#: ../../glossary.rst:253
msgid "context variable"
msgstr "variável de contexto"

#: ../../glossary.rst:255
msgid ""
"A variable which can have different values depending on its context. This is "
"similar to Thread-Local Storage in which each execution thread may have a "
"different value for a variable. However, with context variables, there may "
"be several contexts in one execution thread and the main usage for context "
"variables is to keep track of variables in concurrent asynchronous tasks. "
"See :mod:`contextvars`."
msgstr ""
"Uma variável que pode ter valores diferentes, dependendo do seu contexto. "
"Isso é semelhante ao armazenamento local de threads, no qual cada thread "
"pode ter um valor diferente para uma variável. No entanto, com variáveis de "
"contexto, pode haver vários contextos em uma thread e o principal uso para "
"variáveis de contexto é acompanhar as variáveis em tarefas assíncronas "
"simultâneas. Veja :mod:`contextvars`."

#: ../../glossary.rst:262
msgid "contiguous"
msgstr "contíguo"

#: ../../glossary.rst:266
msgid ""
"A buffer is considered contiguous exactly if it is either *C-contiguous* or "
"*Fortran contiguous*.  Zero-dimensional buffers are C and Fortran "
"contiguous.  In one-dimensional arrays, the items must be laid out in memory "
"next to each other, in order of increasing indexes starting from zero.  In "
"multidimensional C-contiguous arrays, the last index varies the fastest when "
"visiting items in order of memory address.  However, in Fortran contiguous "
"arrays, the first index varies the fastest."
msgstr ""
"Um buffer é considerado contíguo exatamente se for *contíguo C* ou *contíguo "
"Fortran*. Os buffers de dimensão zero são contíguos C e Fortran. Em vetores "
"unidimensionais, os itens devem ser dispostos na memória próximos um do "
"outro, em ordem crescente de índices, começando do zero. Em vetores "
"multidimensionais contíguos C, o último índice varia mais rapidamente ao "
"visitar itens em ordem de endereço de memória. No entanto, nos vetores "
"contíguos do Fortran, o primeiro índice varia mais rapidamente."

#: ../../glossary.rst:274
msgid "coroutine"
msgstr "corrotina"

#: ../../glossary.rst:276
msgid ""
"Coroutines are a more generalized form of subroutines. Subroutines are "
"entered at one point and exited at another point.  Coroutines can be "
"entered, exited, and resumed at many different points.  They can be "
"implemented with the :keyword:`async def` statement.  See also :pep:`492`."
msgstr ""
"Corrotinas são uma forma mais generalizada de sub-rotinas. Sub-rotinas tem a "
"entrada iniciada em um ponto, e a saída em outro ponto. Corrotinas podem "
"entrar, sair, e continuar em muitos pontos diferentes. Elas podem ser "
"implementadas com a instrução :keyword:`async def`. Veja também :pep:`492`."

#: ../../glossary.rst:281
msgid "coroutine function"
msgstr "função de corrotina"

#: ../../glossary.rst:283
msgid ""
"A function which returns a :term:`coroutine` object.  A coroutine function "
"may be defined with the :keyword:`async def` statement, and may contain :"
"keyword:`await`, :keyword:`async for`, and :keyword:`async with` keywords.  "
"These were introduced by :pep:`492`."
msgstr ""
"Uma função que retorna um objeto do tipo :term:`corrotina`. Uma função de "
"corrotina pode ser definida com a instrução :keyword:`async def`, e pode "
"conter as palavras chaves :keyword:`await`, :keyword:`async for`, e :keyword:"
"`async with`. Isso foi introduzido pela :pep:`492`."

#: ../../glossary.rst:288
msgid "CPython"
msgstr "CPython"

#: ../../glossary.rst:290
msgid ""
"The canonical implementation of the Python programming language, as "
"distributed on `python.org <https://www.python.org>`_.  The term \"CPython\" "
"is used when necessary to distinguish this implementation from others such "
"as Jython or IronPython."
msgstr ""
"A implementação canônica da linguagem de programação Python, como "
"disponibilizada pelo `python.org <https://www.python.org>`_. O termo "
"\"CPython\" é usado quando necessário distinguir esta implementação de "
"outras como Jython ou IronPython."

#: ../../glossary.rst:294
msgid "decorator"
msgstr "decorador"

#: ../../glossary.rst:296
msgid ""
"A function returning another function, usually applied as a function "
"transformation using the ``@wrapper`` syntax.  Common examples for "
"decorators are :func:`classmethod` and :func:`staticmethod`."
msgstr ""
"Uma função que retorna outra função, geralmente aplicada como uma "
"transformação de função usando a sintaxe ``@wrapper``. Exemplos comuns para "
"decoradores são :func:`classmethod` e :func:`staticmethod`."

#: ../../glossary.rst:300
msgid ""
"The decorator syntax is merely syntactic sugar, the following two function "
"definitions are semantically equivalent::"
msgstr ""
"A sintaxe do decorador é meramente um açúcar sintático, as duas definições "
"de funções a seguir são semanticamente equivalentes::"

#: ../../glossary.rst:303
msgid ""
"def f(arg):\n"
"    ...\n"
"f = staticmethod(f)\n"
"\n"
"@staticmethod\n"
"def f(arg):\n"
"    ..."
msgstr ""
"def f(arg):\n"
"    ...\n"
"f = staticmethod(f)\n"
"\n"
"@staticmethod\n"
"def f(arg):\n"
"    ..."

#: ../../glossary.rst:311
msgid ""
"The same concept exists for classes, but is less commonly used there.  See "
"the documentation for :ref:`function definitions <function>` and :ref:`class "
"definitions <class>` for more about decorators."
msgstr ""
"O mesmo conceito existe para as classes, mas não é comumente utilizado. Veja "
"a documentação de :ref:`definições de função <function>` e :ref:`definições "
"de classe <class>` para obter mais informações sobre decoradores."

#: ../../glossary.rst:314
msgid "descriptor"
msgstr "descritor"

#: ../../glossary.rst:316
msgid ""
"Any object which defines the methods :meth:`~object.__get__`, :meth:`~object."
"__set__`, or :meth:`~object.__delete__`. When a class attribute is a "
"descriptor, its special binding behavior is triggered upon attribute "
"lookup.  Normally, using *a.b* to get, set or delete an attribute looks up "
"the object named *b* in the class dictionary for *a*, but if *b* is a "
"descriptor, the respective descriptor method gets called.  Understanding "
"descriptors is a key to a deep understanding of Python because they are the "
"basis for many features including functions, methods, properties, class "
"methods, static methods, and reference to super classes."
msgstr ""
"Qualquer objeto que define os métodos :meth:`~object.__get__`, :meth:"
"`~object.__set__` ou :meth:`~object.__delete__`. Quando um atributo de "
"classe é um descritor, seu comportamento de associação especial é acionado "
"no acesso a um atributo. Normalmente, ao se utilizar *a.b* para se obter, "
"definir ou excluir, um atributo dispara uma busca no objeto chamado *b* no "
"dicionário de classe de *a*, mas se *b* for um descritor, o respectivo "
"método descritor é chamado. Compreender descritores é a chave para um "
"profundo entendimento de Python pois eles são a base de muitas "
"funcionalidades incluindo funções, métodos, propriedades, métodos de classe, "
"métodos estáticos e referências para superclasses."

#: ../../glossary.rst:327
msgid ""
"For more information about descriptors' methods, see :ref:`descriptors` or "
"the :ref:`Descriptor How To Guide <descriptorhowto>`."
msgstr ""
"Para obter mais informações sobre os métodos dos descritores, veja: :ref:"
"`descriptors` ou o :ref:`Guia de Descritores <descriptorhowto>`."

#: ../../glossary.rst:329
msgid "dictionary"
msgstr "dicionário"

#: ../../glossary.rst:331
msgid ""
"An associative array, where arbitrary keys are mapped to values.  The keys "
"can be any object with :meth:`~object.__hash__` and :meth:`~object.__eq__` "
"methods. Called a hash in Perl."
msgstr ""
"Um vetor associativo em que chaves arbitrárias são mapeadas para valores. As "
"chaves podem ser quaisquer objetos que possuam os métodos :meth:`~object."
"__hash__` e :meth:`~object.__eq__`. Isso é chamado de hash em Perl."

#: ../../glossary.rst:335
msgid "dictionary comprehension"
msgstr "compreensão de dicionário"

#: ../../glossary.rst:337
msgid ""
"A compact way to process all or part of the elements in an iterable and "
"return a dictionary with the results. ``results = {n: n ** 2 for n in "
"range(10)}`` generates a dictionary containing key ``n`` mapped to value ``n "
"** 2``. See :ref:`comprehensions`."
msgstr ""
"Uma maneira compacta de processar todos ou parte dos elementos de um "
"iterável e retornar um dicionário com os resultados. ``results = {n: n ** 2 "
"for n in range(10)}`` gera um dicionário contendo a chave ``n`` mapeada para "
"o valor ``n ** 2``. Veja :ref:`comprehensions`."

#: ../../glossary.rst:341
msgid "dictionary view"
msgstr "visão de dicionário"

#: ../../glossary.rst:343
msgid ""
"The objects returned from :meth:`dict.keys`, :meth:`dict.values`, and :meth:"
"`dict.items` are called dictionary views. They provide a dynamic view on the "
"dictionary’s entries, which means that when the dictionary changes, the view "
"reflects these changes. To force the dictionary view to become a full list "
"use ``list(dictview)``.  See :ref:`dict-views`."
msgstr ""
"Os objetos retornados por :meth:`dict.keys`, :meth:`dict.values` e :meth:"
"`dict.items` são chamados de visões de dicionário. Eles fornecem uma visão "
"dinâmica das entradas do dicionário, o que significa que quando o dicionário "
"é alterado, a visão reflete essas alterações. Para forçar a visão de "
"dicionário a se tornar uma lista completa use ``list(dictview)``. Veja :ref:"
"`dict-views`."

#: ../../glossary.rst:349
msgid "docstring"
msgstr "docstring"

#: ../../glossary.rst:351
msgid ""
"A string literal which appears as the first expression in a class, function "
"or module.  While ignored when the suite is executed, it is recognized by "
"the compiler and put into the :attr:`!__doc__` attribute of the enclosing "
"class, function or module.  Since it is available via introspection, it is "
"the canonical place for documentation of the object."
msgstr ""
"Abreviatura de \"documentation string\" (string de documentação). Uma string "
"literal que aparece como primeira expressão numa classe, função ou módulo. "
"Ainda que sejam ignoradas quando a suíte é executada, é reconhecida pelo "
"compilador que a coloca no atributo :attr:`!__doc__` da classe, função ou "
"módulo que a encapsula. Como ficam disponíveis por meio de introspecção, "
"docstrings são o lugar canônico para documentação do objeto."

#: ../../glossary.rst:357
msgid "duck-typing"
msgstr "tipagem pato"

#: ../../glossary.rst:359
msgid ""
"A programming style which does not look at an object's type to determine if "
"it has the right interface; instead, the method or attribute is simply "
"called or used (\"If it looks like a duck and quacks like a duck, it must be "
"a duck.\")  By emphasizing interfaces rather than specific types, well-"
"designed code improves its flexibility by allowing polymorphic "
"substitution.  Duck-typing avoids tests using :func:`type` or :func:"
"`isinstance`.  (Note, however, that duck-typing can be complemented with :"
"term:`abstract base classes <abstract base class>`.)  Instead, it typically "
"employs :func:`hasattr` tests or :term:`EAFP` programming."
msgstr ""
"Também conhecida como *duck-typing*, é um estilo de programação que não "
"verifica o tipo do objeto para determinar se ele possui a interface correta; "
"em vez disso, o método ou atributo é simplesmente chamado ou utilizado (\"Se "
"se parece com um pato e grasna como um pato, então deve ser um pato.\") "
"Enfatizando interfaces ao invés de tipos específicos, o código bem "
"desenvolvido aprimora sua flexibilidade por permitir substituição "
"polimórfica. Tipagem pato evita necessidade de testes que usem :func:`type` "
"ou :func:`isinstance`. (Note, porém, que a tipagem pato pode ser "
"complementada com o uso de :term:`classes base abstratas <abstract base "
"class>`.) Ao invés disso, são normalmente empregados testes :func:`hasattr` "
"ou programação :term:`EAFP`."

#: ../../glossary.rst:368
msgid "EAFP"
msgstr "EAFP"

#: ../../glossary.rst:370
msgid ""
"Easier to ask for forgiveness than permission.  This common Python coding "
"style assumes the existence of valid keys or attributes and catches "
"exceptions if the assumption proves false.  This clean and fast style is "
"characterized by the presence of many :keyword:`try` and :keyword:`except` "
"statements.  The technique contrasts with the :term:`LBYL` style common to "
"many other languages such as C."
msgstr ""
"Iniciais da expressão em inglês \"easier to ask for forgiveness than "
"permission\" que significa \"é mais fácil pedir perdão que permissão\". Este "
"estilo de codificação comum no Python presume a existência de chaves ou "
"atributos válidos e captura exceções caso essa premissa se prove falsa. Este "
"estilo limpo e rápido se caracteriza pela presença de várias instruções :"
"keyword:`try` e :keyword:`except`. A técnica diverge do estilo :term:`LBYL`, "
"comum em outras linguagens como C, por exemplo."

#: ../../glossary.rst:376
msgid "expression"
msgstr "expressão"

#: ../../glossary.rst:378
msgid ""
"A piece of syntax which can be evaluated to some value.  In other words, an "
"expression is an accumulation of expression elements like literals, names, "
"attribute access, operators or function calls which all return a value.  In "
"contrast to many other languages, not all language constructs are "
"expressions.  There are also :term:`statement`\\s which cannot be used as "
"expressions, such as :keyword:`while`.  Assignments are also statements, not "
"expressions."
msgstr ""
"Uma parte da sintaxe que pode ser avaliada para algum valor. Em outras "
"palavras, uma expressão é a acumulação de elementos de expressão como "
"literais, nomes, atributos de acesso, operadores ou chamadas de funções, "
"todos os quais retornam um valor. Em contraste com muitas outras linguagens, "
"nem todas as construções de linguagem são expressões. Também existem :term:"
"`instruções <statement>`, as quais não podem ser usadas como expressões, "
"como, por exemplo, :keyword:`while`. Atribuições também são instruções, não "
"expressões."

#: ../../glossary.rst:385
msgid "extension module"
msgstr "módulo de extensão"

#: ../../glossary.rst:387
msgid ""
"A module written in C or C++, using Python's C API to interact with the core "
"and with user code."
msgstr ""
"Um módulo escrito em C ou C++, usando a API C do Python para interagir tanto "
"com código de usuário quanto do núcleo."

#: ../../glossary.rst:389
msgid "f-string"
msgstr "f-string"

#: ../../glossary.rst:391
msgid ""
"String literals prefixed with ``'f'`` or ``'F'`` are commonly called \"f-"
"strings\" which is short for :ref:`formatted string literals <f-strings>`.  "
"See also :pep:`498`."
msgstr ""
"Literais string prefixadas com ``'f'`` ou ``'F'`` são conhecidas como \"f-"
"strings\" que é uma abreviação de :ref:`formatted string literals <f-"
"strings>`. Veja também :pep:`498`."

#: ../../glossary.rst:394
msgid "file object"
msgstr "objeto arquivo"

#: ../../glossary.rst:396
msgid ""
"An object exposing a file-oriented API (with methods such as :meth:`!read` "
"or :meth:`!write`) to an underlying resource.  Depending on the way it was "
"created, a file object can mediate access to a real on-disk file or to "
"another type of storage or communication device (for example standard input/"
"output, in-memory buffers, sockets, pipes, etc.).  File objects are also "
"called :dfn:`file-like objects` or :dfn:`streams`."
msgstr ""
"Um objeto que expõe uma API orientada a arquivos (com métodos tais como :"
"meth:`!read` ou :meth:`!write`) para um recurso subjacente. Dependendo da "
"maneira como foi criado, um objeto arquivo pode mediar o acesso a um arquivo "
"real no disco ou outro tipo de dispositivo de armazenamento ou de "
"comunicação (por exemplo a entrada/saída padrão, buffers em memória, "
"soquetes, pipes, etc.). Objetos arquivo também são chamados de :dfn:`objetos "
"arquivo ou similares` ou :dfn:`fluxos`."

#: ../../glossary.rst:404
msgid ""
"There are actually three categories of file objects: raw :term:`binary files "
"<binary file>`, buffered :term:`binary files <binary file>` and :term:`text "
"files <text file>`. Their interfaces are defined in the :mod:`io` module.  "
"The canonical way to create a file object is by using the :func:`open` "
"function."
msgstr ""
"Atualmente há três categorias de objetos arquivo: :term:`arquivos binários "
"<binary file>` brutos, :term:`arquivos binários <binary file>` em buffer e :"
"term:`arquivos textos <text file>`. Suas interfaces estão definidas no "
"módulo :mod:`io`. A forma canônica para criar um objeto arquivo é usando a "
"função :func:`open`."

#: ../../glossary.rst:409
msgid "file-like object"
msgstr "objeto arquivo ou similar"

#: ../../glossary.rst:411
msgid "A synonym for :term:`file object`."
msgstr "Um sinônimo do termo :term:`objeto arquivo`."

#: ../../glossary.rst:412
msgid "filesystem encoding and error handler"
msgstr "tratador de erros e codificação do sistema de arquivos"

#: ../../glossary.rst:414
msgid ""
"Encoding and error handler used by Python to decode bytes from the operating "
"system and encode Unicode to the operating system."
msgstr ""
"Tratador de erros e codificação usado pelo Python para decodificar bytes do "
"sistema operacional e codificar Unicode para o sistema operacional."

#: ../../glossary.rst:417
msgid ""
"The filesystem encoding must guarantee to successfully decode all bytes "
"below 128. If the file system encoding fails to provide this guarantee, API "
"functions can raise :exc:`UnicodeError`."
msgstr ""
"A codificação do sistema de arquivos deve garantir a decodificação bem-"
"sucedida de todos os bytes abaixo de 128. Se a codificação do sistema de "
"arquivos falhar em fornecer essa garantia, as funções da API podem levantar :"
"exc:`UnicodeError`."

#: ../../glossary.rst:421
msgid ""
"The :func:`sys.getfilesystemencoding` and :func:`sys."
"getfilesystemencodeerrors` functions can be used to get the filesystem "
"encoding and error handler."
msgstr ""
"As funções :func:`sys.getfilesystemencoding` e :func:`sys."
"getfilesystemencodeerrors` podem ser usadas para obter o tratador de erros e "
"codificação do sistema de arquivos."

#: ../../glossary.rst:425
msgid ""
"The :term:`filesystem encoding and error handler` are configured at Python "
"startup by the :c:func:`PyConfig_Read` function: see :c:member:`~PyConfig."
"filesystem_encoding` and :c:member:`~PyConfig.filesystem_errors` members of :"
"c:type:`PyConfig`."
msgstr ""
"O :term:`tratador de erros e codificação do sistema de arquivos` são "
"configurados na inicialização do Python pela função :c:func:`PyConfig_Read`: "
"veja os membros :c:member:`~PyConfig.filesystem_encoding` e :c:member:"
"`~PyConfig.filesystem_errors` do :c:type:`PyConfig`."

#: ../../glossary.rst:430
msgid "See also the :term:`locale encoding`."
msgstr "Veja também a :term:`codificação da localidade`."

#: ../../glossary.rst:431
msgid "finder"
msgstr "localizador"

#: ../../glossary.rst:433
msgid ""
"An object that tries to find the :term:`loader` for a module that is being "
"imported."
msgstr ""
"Um objeto que tenta encontrar o :term:`carregador` para um módulo que está "
"sendo importado."

#: ../../glossary.rst:436
msgid ""
"There are two types of finder: :term:`meta path finders <meta path finder>` "
"for use with :data:`sys.meta_path`, and :term:`path entry finders <path "
"entry finder>` for use with :data:`sys.path_hooks`."
msgstr ""
"Existem dois tipos de localizador: :term:`localizadores de metacaminho <meta "
"path finder>` para uso com :data:`sys.meta_path`, e :term:`localizadores de "
"entrada de caminho <path entry finder>` para uso com :data:`sys.path_hooks`."

#: ../../glossary.rst:440
msgid "See :ref:`importsystem` and :mod:`importlib` for much more detail."
msgstr "Veja :ref:`importsystem` e :mod:`importlib` para muito mais detalhes."

#: ../../glossary.rst:441
msgid "floor division"
msgstr "divisão pelo piso"

#: ../../glossary.rst:443
msgid ""
"Mathematical division that rounds down to nearest integer.  The floor "
"division operator is ``//``.  For example, the expression ``11 // 4`` "
"evaluates to ``2`` in contrast to the ``2.75`` returned by float true "
"division.  Note that ``(-11) // 4`` is ``-3`` because that is ``-2.75`` "
"rounded *downward*. See :pep:`238`."
msgstr ""
"Divisão matemática que arredonda para baixo para o inteiro mais próximo. O "
"operador de divisão pelo piso é ``//``. Por exemplo, a expressão ``11 // 4`` "
"retorna o valor ``2`` ao invés de ``2.75``, que seria retornado pela divisão "
"de ponto flutuante. Note que ``(-11) // 4`` é ``-3`` porque é ``-2.75`` "
"arredondado *para baixo*. Consulte a :pep:`238`."

#: ../../glossary.rst:448
msgid "function"
msgstr "função"

#: ../../glossary.rst:450
msgid ""
"A series of statements which returns some value to a caller. It can also be "
"passed zero or more :term:`arguments <argument>` which may be used in the "
"execution of the body. See also :term:`parameter`, :term:`method`, and the :"
"ref:`function` section."
msgstr ""
"Uma série de instruções que retorna algum valor para um chamador. Também "
"pode ser passado zero ou mais :term:`argumentos <argument>` que podem ser "
"usados na execução do corpo. Veja também :term:`parâmetro`, :term:`método` e "
"a seção :ref:`function`."

#: ../../glossary.rst:454
msgid "function annotation"
msgstr "anotação de função"

#: ../../glossary.rst:456
msgid "An :term:`annotation` of a function parameter or return value."
msgstr "Uma :term:`anotação` de um parâmetro de função ou valor de retorno."

#: ../../glossary.rst:458
msgid ""
"Function annotations are usually used for :term:`type hints <type hint>`: "
"for example, this function is expected to take two :class:`int` arguments "
"and is also expected to have an :class:`int` return value::"
msgstr ""
"Anotações de função são comumente usados por :term:`dicas de tipo <type "
"hint>`: por exemplo, essa função espera receber dois argumentos :class:`int` "
"e também é esperado que devolva um valor :class:`int`::"

#: ../../glossary.rst:463
msgid ""
"def sum_two_numbers(a: int, b: int) -> int:\n"
"   return a + b"
msgstr ""
"def soma_dois_numeros(a: int, b: int) -> int:\n"
"   return a + b"

#: ../../glossary.rst:466
msgid "Function annotation syntax is explained in section :ref:`function`."
msgstr "A sintaxe de anotação de função é explicada na seção :ref:`function`."

#: ../../glossary.rst:468
msgid ""
"See :term:`variable annotation` and :pep:`484`, which describe this "
"functionality. Also see :ref:`annotations-howto` for best practices on "
"working with annotations."
msgstr ""
"Veja :term:`anotação de variável` e :pep:`484`, que descrevem esta "
"funcionalidade. Veja também :ref:`annotations-howto` para as melhores "
"práticas sobre como trabalhar com anotações."

#: ../../glossary.rst:472
msgid "__future__"
msgstr "__future__"

#: ../../glossary.rst:474
msgid ""
"A :ref:`future statement <future>`, ``from __future__ import <feature>``, "
"directs the compiler to compile the current module using syntax or semantics "
"that will become standard in a future release of Python. The :mod:"
"`__future__` module documents the possible values of *feature*.  By "
"importing this module and evaluating its variables, you can see when a new "
"feature was first added to the language and when it will (or did) become the "
"default::"
msgstr ""
"A :ref:`instrução future <future>`, ``from __future__ import <feature>``, "
"direciona o compilador a compilar o módulo atual usando sintaxe ou semântica "
"que será padrão em uma versão futura de Python. O módulo :mod:`__future__` "
"documenta os possíveis valores de *feature*.  Importando esse módulo e "
"avaliando suas variáveis, você pode ver quando um novo recurso foi "
"inicialmente adicionado à linguagem e quando será (ou se já é) o padrão::"

#: ../../glossary.rst:482
msgid ""
">>> import __future__\n"
">>> __future__.division\n"
"_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)"
msgstr ""
">>> import __future__\n"
">>> __future__.division\n"
"_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)"

#: ../../glossary.rst:485
msgid "garbage collection"
msgstr "coleta de lixo"

#: ../../glossary.rst:487
msgid ""
"The process of freeing memory when it is not used anymore.  Python performs "
"garbage collection via reference counting and a cyclic garbage collector "
"that is able to detect and break reference cycles.  The garbage collector "
"can be controlled using the :mod:`gc` module."
msgstr ""
"Também conhecido como *garbage collection*, é o processo de liberar a "
"memória quando ela não é mais utilizada. Python executa a liberação da "
"memória através da contagem de referências e um coletor de lixo cíclico que "
"é capaz de detectar e interromper referências cíclicas. O coletor de lixo "
"pode ser controlado usando o módulo :mod:`gc`."

#: ../../glossary.rst:492 ../../glossary.rst:493
msgid "generator"
msgstr "gerador"

#: ../../glossary.rst:495
msgid ""
"A function which returns a :term:`generator iterator`.  It looks like a "
"normal function except that it contains :keyword:`yield` expressions for "
"producing a series of values usable in a for-loop or that can be retrieved "
"one at a time with the :func:`next` function."
msgstr ""
"Uma função que retorna um :term:`iterador gerador <generator iterator>`. É "
"parecida com uma função normal, exceto pelo fato de conter expressões :"
"keyword:`yield` para produzir uma série de valores que podem ser usados em "
"um laço \"for\" ou que podem ser obtidos um de cada vez com a função :func:"
"`next`."

#: ../../glossary.rst:500
msgid ""
"Usually refers to a generator function, but may refer to a *generator "
"iterator* in some contexts.  In cases where the intended meaning isn't "
"clear, using the full terms avoids ambiguity."
msgstr ""
"Normalmente refere-se a uma função geradora, mas pode referir-se a um "
"*iterador gerador* em alguns contextos. Em alguns casos onde o significado "
"desejado não está claro, usar o termo completo evita ambiguidade."

#: ../../glossary.rst:503
msgid "generator iterator"
msgstr "iterador gerador"

#: ../../glossary.rst:505
msgid "An object created by a :term:`generator` function."
msgstr "Um objeto criado por uma função :term:`geradora <gerador>`."

#: ../../glossary.rst:507
msgid ""
"Each :keyword:`yield` temporarily suspends processing, remembering the "
"location execution state (including local variables and pending try-"
"statements).  When the *generator iterator* resumes, it picks up where it "
"left off (in contrast to functions which start fresh on every invocation)."
msgstr ""
"Cada :keyword:`yield` suspende temporariamente o processamento, memorizando "
"o estado da execução local (incluindo variáveis locais e instruções try "
"pendentes). Quando o *iterador gerador* retorna, ele se recupera do último "
"ponto onde estava (em contrapartida as funções que iniciam uma nova execução "
"a cada vez que são invocadas)."

#: ../../glossary.rst:513 ../../glossary.rst:514
msgid "generator expression"
msgstr "expressão geradora"

#: ../../glossary.rst:516
msgid ""
"An expression that returns an iterator.  It looks like a normal expression "
"followed by a :keyword:`!for` clause defining a loop variable, range, and an "
"optional :keyword:`!if` clause.  The combined expression generates values "
"for an enclosing function::"
msgstr ""
"Uma expressão que retorna um iterador. Parece uma expressão normal, seguido "
"de uma cláusula :keyword:`!for` definindo uma variável de loop, um range, e "
"uma cláusula :keyword:`!if` opcional. A expressão combinada gera valores "
"para uma função encapsuladora::"

#: ../../glossary.rst:521
msgid ""
">>> sum(i*i for i in range(10))         # sum of squares 0, 1, 4, ... 81\n"
"285"
msgstr ""
">>> sum(i*i for i in range(10))         # soma dos quadrados 0, 1, 4, ... "
"81\n"
"285"

#: ../../glossary.rst:523
msgid "generic function"
msgstr "função genérica"

#: ../../glossary.rst:525
msgid ""
"A function composed of multiple functions implementing the same operation "
"for different types. Which implementation should be used during a call is "
"determined by the dispatch algorithm."
msgstr ""
"Uma função composta por várias funções implementando a mesma operação para "
"diferentes tipos. Qual implementação deverá ser usada durante a execução é "
"determinada pelo algoritmo de despacho."

#: ../../glossary.rst:529
msgid ""
"See also the :term:`single dispatch` glossary entry, the :func:`functools."
"singledispatch` decorator, and :pep:`443`."
msgstr ""
"Veja também a entrada :term:`despacho único` no glossário, o decorador :func:"
"`functools.singledispatch`, e a :pep:`443`."

#: ../../glossary.rst:531
msgid "generic type"
msgstr "tipo genérico"

#: ../../glossary.rst:533
msgid ""
"A :term:`type` that can be parameterized; typically a :ref:`container "
"class<sequence-types>` such as :class:`list` or :class:`dict`. Used for :"
"term:`type hints <type hint>` and :term:`annotations <annotation>`."
msgstr ""
"Um :term:`tipo` que pode ser parametrizado; tipicamente uma :ref:`classe "
"contêiner<sequence-types>` tal como :class:`list` ou :class:`dict`. Usado "
"para :term:`dicas de tipo <type hint>` e :term:`anotações <annotation>`."

#: ../../glossary.rst:538
msgid ""
"For more details, see :ref:`generic alias types<types-genericalias>`, :pep:"
"`483`, :pep:`484`, :pep:`585`, and the :mod:`typing` module."
msgstr ""
"Para mais detalhes, veja :ref:`tipo apelido genérico <types-genericalias>`, :"
"pep:`483`, :pep:`484`, :pep:`585`, e o módulo :mod:`typing`."

#: ../../glossary.rst:540
msgid "GIL"
msgstr "GIL"

#: ../../glossary.rst:542
msgid "See :term:`global interpreter lock`."
msgstr "Veja :term:`trava global do interpretador`."

#: ../../glossary.rst:543
msgid "global interpreter lock"
msgstr "trava global do interpretador"

#: ../../glossary.rst:545
msgid ""
"The mechanism used by the :term:`CPython` interpreter to assure that only "
"one thread executes Python :term:`bytecode` at a time. This simplifies the "
"CPython implementation by making the object model (including critical built-"
"in types such as :class:`dict`) implicitly safe against concurrent access.  "
"Locking the entire interpreter makes it easier for the interpreter to be "
"multi-threaded, at the expense of much of the parallelism afforded by multi-"
"processor machines."
msgstr ""
"O mecanismo utilizado pelo interpretador :term:`CPython` para garantir que "
"apenas uma thread execute o :term:`bytecode` Python por vez. Isto simplifica "
"a implementação do CPython ao fazer com que o modelo de objetos (incluindo "
"tipos embutidos críticos como o :class:`dict`) ganhem segurança implícita "
"contra acesso concorrente. Travar todo o interpretador facilita que o "
"interpretador em si seja multitarefa, às custas de muito do paralelismo já "
"provido por máquinas multiprocessador."

#: ../../glossary.rst:554
msgid ""
"However, some extension modules, either standard or third-party, are "
"designed so as to release the GIL when doing computationally intensive tasks "
"such as compression or hashing.  Also, the GIL is always released when doing "
"I/O."
msgstr ""
"No entanto, alguns módulos de extensão, tanto da biblioteca padrão quanto de "
"terceiros, são desenvolvidos de forma a liberar a GIL ao realizar tarefas "
"computacionalmente muito intensas, como compactação ou cálculos de hash. "
"Além disso, a GIL é sempre liberado nas operações de E/S."

#: ../../glossary.rst:559
msgid ""
"Past efforts to create a \"free-threaded\" interpreter (one which locks "
"shared data at a much finer granularity) have not been successful because "
"performance suffered in the common single-processor case. It is believed "
"that overcoming this performance issue would make the implementation much "
"more complicated and therefore costlier to maintain."
msgstr ""
"No passado, esforços para criar um interpretador que lidasse plenamente com "
"threads (travando dados compartilhados numa granularidade bem mais fina) não "
"foram bem sucedidos devido a queda no desempenho ao serem executados em "
"processadores de apenas um núcleo. Acredita-se que superar essa questão de "
"desempenho acabaria tornando a implementação muito mais complicada e bem "
"mais difícil de manter."

#: ../../glossary.rst:565
msgid "hash-based pyc"
msgstr "pyc baseado em hash"

#: ../../glossary.rst:567
msgid ""
"A bytecode cache file that uses the hash rather than the last-modified time "
"of the corresponding source file to determine its validity. See :ref:`pyc-"
"invalidation`."
msgstr ""
"Um arquivo de cache em bytecode que usa hash ao invés do tempo, no qual o "
"arquivo de código-fonte foi modificado pela última vez, para determinar a "
"sua validade. Veja :ref:`pyc-invalidation`."

#: ../../glossary.rst:570
msgid "hashable"
msgstr "hasheável"

#: ../../glossary.rst:572
msgid ""
"An object is *hashable* if it has a hash value which never changes during "
"its lifetime (it needs a :meth:`~object.__hash__` method), and can be "
"compared to other objects (it needs an :meth:`~object.__eq__` method). "
"Hashable objects which compare equal must have the same hash value."
msgstr ""
"Um objeto é *hasheável* se tem um valor de hash que nunca muda durante seu "
"ciclo de vida (precisa ter um método :meth:`~object.__hash__`) e pode ser "
"comparado com outros objetos (precisa ter um método :meth:`~object.__eq__`). "
"Objetos hasheáveis que são comparados como iguais devem ter o mesmo valor de "
"hash."

#: ../../glossary.rst:578
msgid ""
"Hashability makes an object usable as a dictionary key and a set member, "
"because these data structures use the hash value internally."
msgstr ""
"A hasheabilidade faz com que um objeto possa ser usado como uma chave de "
"dicionário e como um membro de conjunto, pois estas estruturas de dados "
"utilizam os valores de hash internamente."

#: ../../glossary.rst:581
msgid ""
"Most of Python's immutable built-in objects are hashable; mutable containers "
"(such as lists or dictionaries) are not; immutable containers (such as "
"tuples and frozensets) are only hashable if their elements are hashable.  "
"Objects which are instances of user-defined classes are hashable by "
"default.  They all compare unequal (except with themselves), and their hash "
"value is derived from their :func:`id`."
msgstr ""
"A maioria dos objetos embutidos imutáveis do Python são hasheáveis; "
"containers mutáveis (tais como listas ou dicionários) não são; containers "
"imutáveis (tais como tuplas e frozensets) são hasheáveis apenas se os seus "
"elementos são hasheáveis. Objetos que são instâncias de classes definidas "
"pelo usuário são hasheáveis por padrão. Todos eles comparam de forma "
"desigual (exceto entre si mesmos), e o seu valor hash é derivado a partir do "
"seu :func:`id`."

#: ../../glossary.rst:588
msgid "IDLE"
msgstr "IDLE"

#: ../../glossary.rst:590
msgid ""
"An Integrated Development and Learning Environment for Python. :ref:`idle` "
"is a basic editor and interpreter environment which ships with the standard "
"distribution of Python."
msgstr ""
"Um ambiente de desenvolvimento e aprendizado integrado para Python. :ref:"
"`idle` é um editor básico e um ambiente interpretador que vem junto com a "
"distribuição padrão do Python."

#: ../../glossary.rst:593
msgid "immortal"
msgstr "imortal"

#: ../../glossary.rst:595
msgid ""
"*Immortal objects* are a CPython implementation detail introduced in :pep:"
"`683`."
msgstr ""
"*Objetos imortais* são um detalhe da implementação do CPython introduzida "
"ne :pep:`683`."

#: ../../glossary.rst:598
msgid ""
"If an object is immortal, its :term:`reference count` is never modified, and "
"therefore it is never deallocated while the interpreter is running. For "
"example, :const:`True` and :const:`None` are immortal in CPython."
msgstr ""
"Se um objeto é imortal, sua :term:`contagem de referências` nunca é "
"modificada e, portanto, nunca é desalocada enquanto o interpretador está em "
"execução. Por exemplo, :const:`True` e :const:`None` são imortais no CPython."

#: ../../glossary.rst:601
msgid "immutable"
msgstr "imutável"

#: ../../glossary.rst:603
msgid ""
"An object with a fixed value.  Immutable objects include numbers, strings "
"and tuples.  Such an object cannot be altered.  A new object has to be "
"created if a different value has to be stored.  They play an important role "
"in places where a constant hash value is needed, for example as a key in a "
"dictionary."
msgstr ""
"Um objeto que possui um valor fixo. Objetos imutáveis incluem números, "
"strings e tuplas. Estes objetos não podem ser alterados. Um novo objeto deve "
"ser criado se um valor diferente tiver de ser armazenado. Objetos imutáveis "
"têm um papel importante em lugares onde um valor constante de hash seja "
"necessário, como por exemplo uma chave em um dicionário."

#: ../../glossary.rst:608
msgid "import path"
msgstr "caminho de importação"

#: ../../glossary.rst:610
msgid ""
"A list of locations (or :term:`path entries <path entry>`) that are searched "
"by the :term:`path based finder` for modules to import. During import, this "
"list of locations usually comes from :data:`sys.path`, but for subpackages "
"it may also come from the parent package's ``__path__`` attribute."
msgstr ""
"Uma lista de localizações (ou :term:`entradas de caminho <path entry>`) que "
"são buscadas pelo :term:`localizador baseado no caminho` por módulos para "
"importar. Durante a importação, esta lista de localizações usualmente vem a "
"partir de :data:`sys.path`, mas para subpacotes ela também pode vir do "
"atributo ``__path__`` de pacotes-pai."

#: ../../glossary.rst:615
msgid "importing"
msgstr "importação"

#: ../../glossary.rst:617
msgid ""
"The process by which Python code in one module is made available to Python "
"code in another module."
msgstr ""
"O processo pelo qual o código Python em um módulo é disponibilizado para o "
"código Python em outro módulo."

#: ../../glossary.rst:619
msgid "importer"
msgstr "importador"

#: ../../glossary.rst:621
msgid ""
"An object that both finds and loads a module; both a :term:`finder` and :"
"term:`loader` object."
msgstr ""
"Um objeto que localiza e carrega um módulo; Tanto um :term:`localizador` e o "
"objeto :term:`carregador`."

#: ../../glossary.rst:623
msgid "interactive"
msgstr "interativo"

#: ../../glossary.rst:625
msgid ""
"Python has an interactive interpreter which means you can enter statements "
"and expressions at the interpreter prompt, immediately execute them and see "
"their results.  Just launch ``python`` with no arguments (possibly by "
"selecting it from your computer's main menu). It is a very powerful way to "
"test out new ideas or inspect modules and packages (remember ``help(x)``)."
msgstr ""
"Python tem um interpretador interativo, o que significa que você pode "
"digitar instruções e expressões no prompt do interpretador, executá-los "
"imediatamente e ver seus resultados. Apenas execute ``python`` sem "
"argumentos (possivelmente selecionando-o a partir do menu de aplicações de "
"seu sistema operacional). O interpretador interativo é uma maneira poderosa "
"de testar novas ideias ou aprender mais sobre módulos e pacotes (lembre-se "
"do comando ``help(x)``)."

#: ../../glossary.rst:631
msgid "interpreted"
msgstr "interpretado"

#: ../../glossary.rst:633
msgid ""
"Python is an interpreted language, as opposed to a compiled one, though the "
"distinction can be blurry because of the presence of the bytecode compiler.  "
"This means that source files can be run directly without explicitly creating "
"an executable which is then run. Interpreted languages typically have a "
"shorter development/debug cycle than compiled ones, though their programs "
"generally also run more slowly.  See also :term:`interactive`."
msgstr ""
"Python é uma linguagem interpretada, em oposição àquelas que são compiladas, "
"embora esta distinção possa ser nebulosa devido à presença do compilador de "
"bytecode. Isto significa que os arquivos-fontes podem ser executados "
"diretamente sem necessidade explícita de se criar um arquivo executável. "
"Linguagens interpretadas normalmente têm um ciclo de desenvolvimento/"
"depuração mais curto que as linguagens compiladas, apesar de seus programas "
"geralmente serem executados mais lentamente. Veja também :term:`interativo "
"<interactive>`."

#: ../../glossary.rst:640
msgid "interpreter shutdown"
msgstr "desligamento do interpretador"

#: ../../glossary.rst:642
msgid ""
"When asked to shut down, the Python interpreter enters a special phase where "
"it gradually releases all allocated resources, such as modules and various "
"critical internal structures.  It also makes several calls to the :term:"
"`garbage collector <garbage collection>`. This can trigger the execution of "
"code in user-defined destructors or weakref callbacks. Code executed during "
"the shutdown phase can encounter various exceptions as the resources it "
"relies on may not function anymore (common examples are library modules or "
"the warnings machinery)."
msgstr ""
"Quando solicitado para desligar, o interpretador Python entra em uma fase "
"especial, onde ele gradualmente libera todos os recursos alocados, tais como "
"módulos e várias estruturas internas críticas. Ele também faz diversas "
"chamadas para o :term:`coletor de lixo <garbage collection>`. Isto pode "
"disparar a execução de código em destrutores definidos pelo usuário ou "
"função de retorno de referência fraca. Código executado durante a fase de "
"desligamento pode encontrar diversas exceções, pois os recursos que ele "
"depende podem não funcionar mais (exemplos comuns são os módulos de "
"bibliotecas, ou os mecanismos de avisos)."

#: ../../glossary.rst:651
msgid ""
"The main reason for interpreter shutdown is that the ``__main__`` module or "
"the script being run has finished executing."
msgstr ""
"A principal razão para o interpretador desligar, é que o módulo ``__main__`` "
"ou o script sendo executado terminou sua execução."

#: ../../glossary.rst:653
msgid "iterable"
msgstr "Iterável"

#: ../../glossary.rst:655
msgid ""
"An object capable of returning its members one at a time. Examples of "
"iterables include all sequence types (such as :class:`list`, :class:`str`, "
"and :class:`tuple`) and some non-sequence types like :class:`dict`, :term:"
"`file objects <file object>`, and objects of any classes you define with an :"
"meth:`~iterator.__iter__` method or with a :meth:`~object.__getitem__` "
"method that implements :term:`sequence` semantics."
msgstr ""
"Um objeto capaz de retornar seus membros um de cada vez. Exemplos de "
"iteráveis incluem todos os tipos de sequência (tais como :class:`list`, :"
"class:`str` e :class:`tuple`) e alguns tipos de não-sequência, como o :class:"
"`dict`, :term:`objetos arquivos <file object>`, além dos objetos de "
"quaisquer classes que você definir com um método :meth:`~iterator.__iter__` "
"ou :meth:`~object.__getitem__` que implementam a semântica de :term:"
"`sequência` ."

#: ../../glossary.rst:663
msgid ""
"Iterables can be used in a :keyword:`for` loop and in many other places "
"where a sequence is needed (:func:`zip`, :func:`map`, ...).  When an "
"iterable object is passed as an argument to the built-in function :func:"
"`iter`, it returns an iterator for the object.  This iterator is good for "
"one pass over the set of values.  When using iterables, it is usually not "
"necessary to call :func:`iter` or deal with iterator objects yourself.  The :"
"keyword:`for` statement does that automatically for you, creating a "
"temporary unnamed variable to hold the iterator for the duration of the "
"loop.  See also :term:`iterator`, :term:`sequence`, and :term:`generator`."
msgstr ""
"Iteráveis podem ser usados em um laço :keyword:`for` e em vários outros "
"lugares em que uma sequência é necessária (:func:`zip`, :func:`map`, ...). "
"Quando um objeto iterável é passado como argumento para a função embutida :"
"func:`iter`, ela retorna um iterador para o objeto. Este iterador é adequado "
"para se varrer todo o conjunto de valores. Ao usar iteráveis, normalmente "
"não é necessário chamar :func:`iter` ou lidar com os objetos iteradores em "
"si. A instrução :keyword:`for` faz isso automaticamente para você, criando "
"uma variável temporária para armazenar o iterador durante a execução do "
"laço. Veja também :term:`iterador`, :term:`sequência`, e :term:`gerador`."

#: ../../glossary.rst:673
msgid "iterator"
msgstr "iterador"

#: ../../glossary.rst:675
msgid ""
"An object representing a stream of data.  Repeated calls to the iterator's :"
"meth:`~iterator.__next__` method (or passing it to the built-in function :"
"func:`next`) return successive items in the stream.  When no more data are "
"available a :exc:`StopIteration` exception is raised instead.  At this "
"point, the iterator object is exhausted and any further calls to its :meth:`!"
"__next__` method just raise :exc:`StopIteration` again.  Iterators are "
"required to have an :meth:`~iterator.__iter__` method that returns the "
"iterator object itself so every iterator is also iterable and may be used in "
"most places where other iterables are accepted.  One notable exception is "
"code which attempts multiple iteration passes.  A container object (such as "
"a :class:`list`) produces a fresh new iterator each time you pass it to the :"
"func:`iter` function or use it in a :keyword:`for` loop.  Attempting this "
"with an iterator will just return the same exhausted iterator object used in "
"the previous iteration pass, making it appear like an empty container."
msgstr ""
"Um objeto que representa um fluxo de dados. Repetidas chamadas ao método :"
"meth:`~iterator.__next__` de um iterador (ou passando o objeto para a função "
"embutida :func:`next`) vão retornar itens sucessivos do fluxo. Quando não "
"houver mais dados disponíveis uma exceção :exc:`StopIteration` será "
"levantada. Neste ponto, o objeto iterador se esgotou e quaisquer chamadas "
"subsequentes a seu método :meth:`!__next__` vão apenas levantar a exceção :"
"exc:`StopIteration` novamente. Iteradores precisam ter um método :meth:"
"`~iterator.__iter__` que retorne o objeto iterador em si, de forma que todo "
"iterador também é iterável e pode ser usado na maioria dos lugares em que um "
"iterável é requerido. Uma notável exceção é código que tenta realizar "
"passagens em múltiplas iterações. Um objeto contêiner (como uma :class:"
"`list`) produz um novo iterador a cada vez que você passá-lo para a função :"
"func:`iter` ou utilizá-lo em um laço :keyword:`for`. Tentar isso com o mesmo "
"iterador apenas iria retornar o mesmo objeto iterador esgotado já utilizado "
"na iteração anterior, como se fosse um contêiner vazio."

#: ../../glossary.rst:690
msgid "More information can be found in :ref:`typeiter`."
msgstr "Mais informações podem ser encontradas em :ref:`typeiter`."

#: ../../glossary.rst:694
msgid ""
"CPython does not consistently apply the requirement that an iterator define :"
"meth:`~iterator.__iter__`."
msgstr ""
"O CPython não aplica consistentemente o requisito que um iterador define :"
"meth:`~iterator.__iter__`."

#: ../../glossary.rst:696
msgid "key function"
msgstr "função chave"

#: ../../glossary.rst:698
msgid ""
"A key function or collation function is a callable that returns a value used "
"for sorting or ordering.  For example, :func:`locale.strxfrm` is used to "
"produce a sort key that is aware of locale specific sort conventions."
msgstr ""
"Uma função chave ou função colação é um chamável que retorna um valor usado "
"para ordenação ou classificação. Por exemplo, :func:`locale.strxfrm` é usada "
"para produzir uma chave de ordenação que leva o locale em consideração para "
"fins de ordenação."

#: ../../glossary.rst:703
msgid ""
"A number of tools in Python accept key functions to control how elements are "
"ordered or grouped.  They include :func:`min`, :func:`max`, :func:`sorted`, :"
"meth:`list.sort`, :func:`heapq.merge`, :func:`heapq.nsmallest`, :func:`heapq."
"nlargest`, and :func:`itertools.groupby`."
msgstr ""
"Uma porção de ferramentas no Python aceitam funções chave para controlar "
"como os elementos são ordenados ou agrupados. Algumas delas incluem :func:"
"`min`, :func:`max`, :func:`sorted`, :meth:`list.sort`, :func:`heapq.merge`, :"
"func:`heapq.nsmallest`, :func:`heapq.nlargest` e :func:`itertools.groupby`."

#: ../../glossary.rst:709
msgid ""
"There are several ways to create a key function.  For example. the :meth:"
"`str.lower` method can serve as a key function for case insensitive sorts.  "
"Alternatively, a key function can be built from a :keyword:`lambda` "
"expression such as ``lambda r: (r[0], r[2])``.  Also, :func:`operator."
"attrgetter`, :func:`operator.itemgetter`, and :func:`operator.methodcaller` "
"are three key function constructors.  See the :ref:`Sorting HOW TO "
"<sortinghowto>` for examples of how to create and use key functions."
msgstr ""
"Há várias maneiras de se criar funções chave. Por exemplo, o método :meth:"
"`str.lower` pode servir como uma função chave para ordenações insensíveis à "
"caixa. Alternativamente, uma função chave ad-hoc pode ser construída a "
"partir de uma expressão :keyword:`lambda`, como ``lambda r: (r[0], r[2])``. "
"Além disso, :func:`operator.attrgetter`, :func:`operator.itemgetter` e :func:"
"`operator.methodcaller` são três construtores de função chave. Consulte o "
"guia de :ref:`Ordenação <sortinghowto>` para ver exemplos de como criar e "
"utilizar funções chave."

#: ../../glossary.rst:716
msgid "keyword argument"
msgstr "argumento nomeado"

#: ../../glossary.rst:718 ../../glossary.rst:1008
msgid "See :term:`argument`."
msgstr "Veja :term:`argumento`."

#: ../../glossary.rst:719
msgid "lambda"
msgstr "lambda"

#: ../../glossary.rst:721
msgid ""
"An anonymous inline function consisting of a single :term:`expression` which "
"is evaluated when the function is called.  The syntax to create a lambda "
"function is ``lambda [parameters]: expression``"
msgstr ""
"Uma função de linha anônima consistindo de uma única :term:`expressão`, que "
"é avaliada quando a função é chamada. A sintaxe para criar uma função lambda "
"é ``lambda [parameters]: expression``"

#: ../../glossary.rst:724
msgid "LBYL"
msgstr "LBYL"

#: ../../glossary.rst:726
msgid ""
"Look before you leap.  This coding style explicitly tests for pre-conditions "
"before making calls or lookups.  This style contrasts with the :term:`EAFP` "
"approach and is characterized by the presence of many :keyword:`if` "
"statements."
msgstr ""
"Iniciais da expressão em inglês \"look before you leap\", que significa algo "
"como \"olhe antes de pisar\". Este estilo de codificação testa as pré-"
"condições explicitamente antes de fazer chamadas ou buscas. Este estilo "
"contrasta com a abordagem :term:`EAFP` e é caracterizada pela presença de "
"muitas instruções :keyword:`if`."

#: ../../glossary.rst:731
msgid ""
"In a multi-threaded environment, the LBYL approach can risk introducing a "
"race condition between \"the looking\" and \"the leaping\".  For example, "
"the code, ``if key in mapping: return mapping[key]`` can fail if another "
"thread removes *key* from *mapping* after the test, but before the lookup. "
"This issue can be solved with locks or by using the EAFP approach."
msgstr ""
"Em um ambiente multithread, a abordagem LBYL pode arriscar a introdução de "
"uma condição de corrida entre \"o olhar\" e \"o pisar\". Por exemplo, o "
"código ``if key in mapping: return mapping[key]`` pode falhar se outra "
"thread remover *key* do *mapping* após o teste, mas antes da olhada. Esse "
"problema pode ser resolvido com travas ou usando a abordagem EAFP."

#: ../../glossary.rst:736
msgid "list"
msgstr "lista"

#: ../../glossary.rst:738
msgid ""
"A built-in Python :term:`sequence`.  Despite its name it is more akin to an "
"array in other languages than to a linked list since access to elements is "
"*O*\\ (1)."
msgstr ""
"Uma :term:`sequência` embutida no Python. Apesar do seu nome, é mais próximo "
"de um vetor em outras linguagens do que uma lista encadeada, como o acesso "
"aos elementos é da ordem *O*\\ (1)."

#: ../../glossary.rst:741
msgid "list comprehension"
msgstr "compreensão de lista"

#: ../../glossary.rst:743
msgid ""
"A compact way to process all or part of the elements in a sequence and "
"return a list with the results.  ``result = ['{:#04x}'.format(x) for x in "
"range(256) if x % 2 == 0]`` generates a list of strings containing even hex "
"numbers (0x..) in the range from 0 to 255. The :keyword:`if` clause is "
"optional.  If omitted, all elements in ``range(256)`` are processed."
msgstr ""
"Uma maneira compacta de processar todos ou parte dos elementos de uma "
"sequência e retornar os resultados em uma lista. ``result = ['{:#04x}'."
"format(x) for x in range(256) if x % 2 == 0]`` gera uma lista de strings "
"contendo números hexadecimais (0x..) no intervalo de 0 a 255. A cláusula :"
"keyword:`if` é opcional. Se omitida, todos os elementos no ``range(256)`` "
"serão processados."

#: ../../glossary.rst:749
msgid "loader"
msgstr "carregador"

#: ../../glossary.rst:751
msgid ""
"An object that loads a module. It must define a method named :meth:"
"`load_module`. A loader is typically returned by a :term:`finder`. See :pep:"
"`302` for details and :class:`importlib.abc.Loader` for an :term:`abstract "
"base class`."
msgstr ""
"Um objeto que carrega um módulo. Deve definir um método chamado :meth:"
"`load_module`. Um carregador é normalmente devolvido por um :term:"
"`localizador`. Veja a :pep:`302` para detalhes e :class:`importlib.abc."
"Loader` para um :term:`classe base abstrata`."

#: ../../glossary.rst:755
msgid "locale encoding"
msgstr "codificação da localidade"

#: ../../glossary.rst:757
msgid ""
"On Unix, it is the encoding of the LC_CTYPE locale. It can be set with :func:"
"`locale.setlocale(locale.LC_CTYPE, new_locale) <locale.setlocale>`."
msgstr ""
"No Unix, é a codificação da localidade do LC_CTYPE, que pode ser definida "
"com :func:`locale.setlocale(locale.LC_CTYPE, new_locale) <locale.setlocale>`."

#: ../../glossary.rst:760
msgid "On Windows, it is the ANSI code page (ex: ``\"cp1252\"``)."
msgstr "No Windows, é a página de código ANSI (ex: ``\"cp1252\"``)."

#: ../../glossary.rst:762
msgid ""
"On Android and VxWorks, Python uses ``\"utf-8\"`` as the locale encoding."
msgstr ""
"No Android e no VxWorks, o Python usa ``\"utf-8\"`` como a codificação da "
"localidade."

#: ../../glossary.rst:764
msgid ":func:`locale.getencoding` can be used to get the locale encoding."
msgstr ""
":func:`locale.getencoding` pode ser usado para obter a codificação da "
"localidade."

#: ../../glossary.rst:766
msgid "See also the :term:`filesystem encoding and error handler`."
msgstr ""
"Veja também :term:`tratador de erros e codificação do sistema de arquivos`."

#: ../../glossary.rst:767
msgid "magic method"
msgstr "método mágico"

#: ../../glossary.rst:771
msgid "An informal synonym for :term:`special method`."
msgstr "Um sinônimo informal para um :term:`método especial`."

#: ../../glossary.rst:772
msgid "mapping"
msgstr "mapeamento"

#: ../../glossary.rst:774
msgid ""
"A container object that supports arbitrary key lookups and implements the "
"methods specified in the :class:`collections.abc.Mapping` or :class:"
"`collections.abc.MutableMapping` :ref:`abstract base classes <collections-"
"abstract-base-classes>`.  Examples include :class:`dict`, :class:"
"`collections.defaultdict`, :class:`collections.OrderedDict` and :class:"
"`collections.Counter`."
msgstr ""
"Um objeto contêiner que tem suporte a pesquisas de chave arbitrária e "
"implementa os métodos especificados nas :class:`collections.abc.Mapping` ou :"
"class:`collections.abc.MutableMapping` :ref:`classes base abstratas "
"<collections-abstract-base-classes>`. Exemplos incluem :class:`dict`, :class:"
"`collections.defaultdict`, :class:`collections.OrderedDict` e :class:"
"`collections.Counter`."

#: ../../glossary.rst:780
msgid "meta path finder"
msgstr "localizador de metacaminho"

#: ../../glossary.rst:782
msgid ""
"A :term:`finder` returned by a search of :data:`sys.meta_path`.  Meta path "
"finders are related to, but different from :term:`path entry finders <path "
"entry finder>`."
msgstr ""
"Um :term:`localizador` retornado por uma busca de :data:`sys.meta_path`. "
"Localizadores de metacaminho são relacionados a, mas diferentes de, :term:"
"`localizadores de entrada de caminho <path entry finder>`."

#: ../../glossary.rst:786
msgid ""
"See :class:`importlib.abc.MetaPathFinder` for the methods that meta path "
"finders implement."
msgstr ""
"Veja :class:`importlib.abc.MetaPathFinder` para os métodos que localizadores "
"de metacaminho implementam."

#: ../../glossary.rst:788
msgid "metaclass"
msgstr "metaclasse"

#: ../../glossary.rst:790
msgid ""
"The class of a class.  Class definitions create a class name, a class "
"dictionary, and a list of base classes.  The metaclass is responsible for "
"taking those three arguments and creating the class.  Most object oriented "
"programming languages provide a default implementation.  What makes Python "
"special is that it is possible to create custom metaclasses.  Most users "
"never need this tool, but when the need arises, metaclasses can provide "
"powerful, elegant solutions.  They have been used for logging attribute "
"access, adding thread-safety, tracking object creation, implementing "
"singletons, and many other tasks."
msgstr ""
"A classe de uma classe. Definições de classe criam um nome de classe, um "
"dicionário de classe e uma lista de classes base. A metaclasse é responsável "
"por receber estes três argumentos e criar a classe. A maioria das linguagens "
"de programação orientadas a objetos provê uma implementação default. O que "
"torna o Python especial é o fato de ser possível criar metaclasses "
"personalizadas. A maioria dos usuários nunca vai precisar deste recurso, mas "
"quando houver necessidade, metaclasses possibilitam soluções poderosas e "
"elegantes. Metaclasses têm sido utilizadas para gerar registros de acesso a "
"atributos, para incluir proteção contra acesso concorrente, rastrear a "
"criação de objetos, implementar singletons, dentre muitas outras tarefas."

#: ../../glossary.rst:800
msgid "More information can be found in :ref:`metaclasses`."
msgstr "Mais informações podem ser encontradas em :ref:`metaclasses`."

#: ../../glossary.rst:769 ../../glossary.rst:801 ../../glossary.rst:1138
msgid "method"
msgstr "método"

#: ../../glossary.rst:803
msgid ""
"A function which is defined inside a class body.  If called as an attribute "
"of an instance of that class, the method will get the instance object as its "
"first :term:`argument` (which is usually called ``self``). See :term:"
"`function` and :term:`nested scope`."
msgstr ""
"Uma função que é definida dentro do corpo de uma classe. Se chamada como um "
"atributo de uma instância daquela classe, o método receberá a instância do "
"objeto como seu primeiro :term:`argumento` (que comumente é chamado de "
"``self``). Veja :term:`função` e :term:`escopo aninhado`."

#: ../../glossary.rst:807
msgid "method resolution order"
msgstr "ordem de resolução de métodos"

#: ../../glossary.rst:809
msgid ""
"Method Resolution Order is the order in which base classes are searched for "
"a member during lookup. See :ref:`python_2.3_mro` for details of the "
"algorithm used by the Python interpreter since the 2.3 release."
msgstr ""
"Ordem de resolução de métodos é a ordem em que os membros de uma classe base "
"são buscados durante a pesquisa. Veja :ref:`python_2.3_mro` para detalhes do "
"algoritmo usado pelo interpretador do Python desde a versão 2.3."

#: ../../glossary.rst:812
msgid "module"
msgstr "módulo"

#: ../../glossary.rst:814
msgid ""
"An object that serves as an organizational unit of Python code.  Modules "
"have a namespace containing arbitrary Python objects.  Modules are loaded "
"into Python by the process of :term:`importing`."
msgstr ""
"Um objeto que serve como uma unidade organizacional de código Python. Os "
"módulos têm um espaço de nomes contendo objetos Python arbitrários. Os "
"módulos são carregados pelo Python através do processo de :term:"
"`importação<importing>`."

#: ../../glossary.rst:818
msgid "See also :term:`package`."
msgstr "Veja também :term:`pacote<package>`."

#: ../../glossary.rst:819
msgid "module spec"
msgstr "módulo spec"

#: ../../glossary.rst:821
msgid ""
"A namespace containing the import-related information used to load a module. "
"An instance of :class:`importlib.machinery.ModuleSpec`."
msgstr ""
"Um espaço de nomes que contém as informações relacionadas à importação "
"usadas para carregar um módulo. Uma instância de :class:`importlib.machinery."
"ModuleSpec`."

#: ../../glossary.rst:823
msgid "MRO"
msgstr "MRO"

#: ../../glossary.rst:825
msgid "See :term:`method resolution order`."
msgstr "Veja :term:`ordem de resolução de métodos`."

#: ../../glossary.rst:826
msgid "mutable"
msgstr "mutável"

#: ../../glossary.rst:828
msgid ""
"Mutable objects can change their value but keep their :func:`id`.  See also :"
"term:`immutable`."
msgstr ""
"Objeto mutável é aquele que pode modificar seus valor mas manter seu :func:"
"`id`. Veja também :term:`imutável`."

#: ../../glossary.rst:830
msgid "named tuple"
msgstr "tupla nomeada"

#: ../../glossary.rst:832
msgid ""
"The term \"named tuple\" applies to any type or class that inherits from "
"tuple and whose indexable elements are also accessible using named "
"attributes.  The type or class may have other features as well."
msgstr ""
"O termo \"tupla nomeada\" é aplicado a qualquer tipo ou classe que herda de "
"tupla e cujos elementos indexáveis também são acessíveis usando atributos "
"nomeados. O tipo ou classe pode ter outras funcionalidades também."

#: ../../glossary.rst:836
msgid ""
"Several built-in types are named tuples, including the values returned by :"
"func:`time.localtime` and :func:`os.stat`.  Another example is :data:`sys."
"float_info`::"
msgstr ""
"Diversos tipos embutidos são tuplas nomeadas, incluindo os valores "
"retornados por :func:`time.localtime` e :func:`os.stat`. Outro exemplo é :"
"data:`sys.float_info`::"

#: ../../glossary.rst:840
msgid ""
">>> sys.float_info[1]                   # indexed access\n"
"1024\n"
">>> sys.float_info.max_exp              # named field access\n"
"1024\n"
">>> isinstance(sys.float_info, tuple)   # kind of tuple\n"
"True"
msgstr ""
">>> sys.float_info[1]                   # acesso indexado\n"
"1024\n"
">>> sys.float_info.max_exp              # acesso a campo nomeado\n"
"1024\n"
">>> isinstance(sys.float_info, tuple)   # tipo de tupla\n"
"True"

#: ../../glossary.rst:847
msgid ""
"Some named tuples are built-in types (such as the above examples). "
"Alternatively, a named tuple can be created from a regular class definition "
"that inherits from :class:`tuple` and that defines named fields.  Such a "
"class can be written by hand, or it can be created by inheriting :class:"
"`typing.NamedTuple`, or with the factory function :func:`collections."
"namedtuple`.  The latter techniques also add some extra methods that may not "
"be found in hand-written or built-in named tuples."
msgstr ""
"Algumas tuplas nomeadas são tipos embutidos (tal como os exemplos acima). "
"Alternativamente, uma tupla nomeada pode ser criada a partir de uma "
"definição de classe regular, que herde de :class:`tuple` e que defina campos "
"nomeados. Tal classe pode ser escrita a mão, ou ela pode ser criada "
"herdando :class:`typing.NamedTuple` ou com uma função fábrica :func:"
"`collections.namedtuple`. As duas últimas técnicas também adicionam alguns "
"métodos extras, que podem não ser encontrados quando foi escrita "
"manualmente, ou em tuplas nomeadas embutidas."

#: ../../glossary.rst:855
msgid "namespace"
msgstr "espaço de nomes"

#: ../../glossary.rst:857
msgid ""
"The place where a variable is stored.  Namespaces are implemented as "
"dictionaries.  There are the local, global and built-in namespaces as well "
"as nested namespaces in objects (in methods).  Namespaces support modularity "
"by preventing naming conflicts.  For instance, the functions :func:`builtins."
"open <.open>` and :func:`os.open` are distinguished by their namespaces.  "
"Namespaces also aid readability and maintainability by making it clear which "
"module implements a function.  For instance, writing :func:`random.seed` or :"
"func:`itertools.islice` makes it clear that those functions are implemented "
"by the :mod:`random` and :mod:`itertools` modules, respectively."
msgstr ""
"O lugar em que uma variável é armazenada. Espaços de nomes são implementados "
"como dicionários. Existem os espaços de nomes local, global e nativo, bem "
"como espaços de nomes aninhados em objetos (em métodos). Espaços de nomes "
"suportam modularidade ao prevenir conflitos de nomes. Por exemplo, as "
"funções :func:`__builtin__.open` e :func:`os.open` são diferenciadas por "
"seus espaços de nomes. Espaços de nomes também auxiliam na legibilidade e na "
"manutenibilidade ao torar mais claro quais módulos implementam uma função. "
"Escrever :func:`random.seed` ou :func:`itertools.izip`, por exemplo, deixa "
"claro que estas funções são implementadas pelos módulos :mod:`random` e :mod:"
"`itertools` respectivamente."

#: ../../glossary.rst:867
msgid "namespace package"
msgstr "pacote de espaço de nomes"

#: ../../glossary.rst:869
msgid ""
"A :pep:`420` :term:`package` which serves only as a container for "
"subpackages.  Namespace packages may have no physical representation, and "
"specifically are not like a :term:`regular package` because they have no "
"``__init__.py`` file."
msgstr ""
"Um :term:`pacote` da :pep:`420` que serve apenas como container para sub "
"pacotes. Pacotes de espaços de nomes podem não ter representação física, e "
"especificamente não são como um :term:`pacote regular` porque eles não tem "
"um arquivo ``__init__.py``."

#: ../../glossary.rst:874
msgid "See also :term:`module`."
msgstr "Veja também :term:`módulo`."

#: ../../glossary.rst:875
msgid "nested scope"
msgstr "escopo aninhado"

#: ../../glossary.rst:877
msgid ""
"The ability to refer to a variable in an enclosing definition.  For "
"instance, a function defined inside another function can refer to variables "
"in the outer function.  Note that nested scopes by default work only for "
"reference and not for assignment.  Local variables both read and write in "
"the innermost scope.  Likewise, global variables read and write to the "
"global namespace.  The :keyword:`nonlocal` allows writing to outer scopes."
msgstr ""
"A habilidade de referir-se a uma variável em uma definição de fechamento. "
"Por exemplo, uma função definida dentro de outra pode referenciar variáveis "
"da função externa. Perceba que escopos aninhados por padrão funcionam apenas "
"por referência e não por atribuição. Variáveis locais podem ler e escrever "
"no escopo mais interno. De forma similar, variáveis globais podem ler e "
"escrever para o espaço de nomes global. O :keyword:`nonlocal` permite "
"escrita para escopos externos."

#: ../../glossary.rst:884
msgid "new-style class"
msgstr "classe estilo novo"

#: ../../glossary.rst:886
msgid ""
"Old name for the flavor of classes now used for all class objects.  In "
"earlier Python versions, only new-style classes could use Python's newer, "
"versatile features like :attr:`~object.__slots__`, descriptors, properties, :"
"meth:`~object.__getattribute__`, class methods, and static methods."
msgstr ""
"Antigo nome para o tipo de classes agora usado para todos os objetos de "
"classes. Em versões anteriores do Python, apenas classes estilo podiam usar "
"recursos novos e versáteis do Python, tais como :attr:`~object.__slots__`, "
"descritores, propriedades, :meth:`~object.__getattribute__`, métodos de "
"classe, e métodos estáticos."

#: ../../glossary.rst:891
msgid "object"
msgstr "objeto"

#: ../../glossary.rst:893
msgid ""
"Any data with state (attributes or value) and defined behavior (methods).  "
"Also the ultimate base class of any :term:`new-style class`."
msgstr ""
"Qualquer dado que tenha estado (atributos ou valores) e comportamento "
"definidos (métodos). Também a última classe base de qualquer :term:`classe "
"estilo novo`."

#: ../../glossary.rst:896
msgid "package"
msgstr "pacote"

#: ../../glossary.rst:898
msgid ""
"A Python :term:`module` which can contain submodules or recursively, "
"subpackages.  Technically, a package is a Python module with a ``__path__`` "
"attribute."
msgstr ""
"Um :term:`módulo` Python é capaz de conter submódulos ou recursivamente, "
"subpacotes. Tecnicamente, um pacote é um módulo Python com um atributo "
"``__path__``."

#: ../../glossary.rst:902
msgid "See also :term:`regular package` and :term:`namespace package`."
msgstr ""
"Veja também :term:`pacote regular` e :term:`pacote de espaço de nomes`."

#: ../../glossary.rst:903
msgid "parameter"
msgstr "parâmetro"

#: ../../glossary.rst:905
msgid ""
"A named entity in a :term:`function` (or method) definition that specifies "
"an :term:`argument` (or in some cases, arguments) that the function can "
"accept.  There are five kinds of parameter:"
msgstr ""
"Uma entidade nomeada na definição de uma :term:`função<function>` (ou "
"método) que específica um :term:`argumento<argument>` (ou em alguns casos, "
"argumentos) que a função pode receber. Existem cinco tipos de parâmetros:"

#: ../../glossary.rst:909
msgid ""
":dfn:`positional-or-keyword`: specifies an argument that can be passed "
"either :term:`positionally <argument>` or as a :term:`keyword argument "
"<argument>`.  This is the default kind of parameter, for example *foo* and "
"*bar* in the following::"
msgstr ""
":dfn:`posicional-ou-nomeado`: especifica um argumento que pode ser tanto :"
"term:`posicional <argument>` quanto :term:`nomeado <argument>`. Esse é o "
"tipo padrão de parâmetro, por exemplo *foo* e *bar* a seguir::"

#: ../../glossary.rst:914
msgid "def func(foo, bar=None): ..."
msgstr "def func(foo, bar=None): ..."

#: ../../glossary.rst:918
msgid ""
":dfn:`positional-only`: specifies an argument that can be supplied only by "
"position. Positional-only parameters can be defined by including a ``/`` "
"character in the parameter list of the function definition after them, for "
"example *posonly1* and *posonly2* in the following::"
msgstr ""
":dfn:`somente-posicional`: especifica um argumento que pode ser fornecido "
"apenas por posição. Parâmetros somente-posicionais podem ser definidos "
"incluindo o caractere ``/`` na lista de parâmetros da definição da função "
"após eles, por exemplo *somentepos1* e *somentepos2* a seguir::"

#: ../../glossary.rst:923
msgid "def func(posonly1, posonly2, /, positional_or_keyword): ..."
msgstr "def func(somentepos1, somentepos2, /, posicional_ou_nomeado): ..."

#: ../../glossary.rst:927
msgid ""
":dfn:`keyword-only`: specifies an argument that can be supplied only by "
"keyword.  Keyword-only parameters can be defined by including a single var-"
"positional parameter or bare ``*`` in the parameter list of the function "
"definition before them, for example *kw_only1* and *kw_only2* in the "
"following::"
msgstr ""
":dfn:`somente-nomeado`: especifica um argumento que pode ser passado para a "
"função somente por nome. Parâmetros somente-nomeados podem ser definidos com "
"um simples parâmetro var-posicional ou um ``*`` antes deles na lista de "
"parâmetros na definição da função, por exemplo *somente_nom1* and "
"*somente_nom2* a seguir::"

#: ../../glossary.rst:933
msgid "def func(arg, *, kw_only1, kw_only2): ..."
msgstr "def func(arg, *, somente_nom1, somente_nom2): ..."

#: ../../glossary.rst:935
msgid ""
":dfn:`var-positional`: specifies that an arbitrary sequence of positional "
"arguments can be provided (in addition to any positional arguments already "
"accepted by other parameters).  Such a parameter can be defined by "
"prepending the parameter name with ``*``, for example *args* in the "
"following::"
msgstr ""
":dfn:`var-posicional`: especifica que uma sequência arbitrária de argumentos "
"posicionais pode ser fornecida (em adição a qualquer argumento posicional já "
"aceito por outros parâmetros). Tal parâmetro pode ser definido colocando um "
"``*`` antes do nome do parâmetro, por exemplo *args* a seguir::"

#: ../../glossary.rst:941
msgid "def func(*args, **kwargs): ..."
msgstr "def func(*args, **kwargs): ..."

#: ../../glossary.rst:943
msgid ""
":dfn:`var-keyword`: specifies that arbitrarily many keyword arguments can be "
"provided (in addition to any keyword arguments already accepted by other "
"parameters).  Such a parameter can be defined by prepending the parameter "
"name with ``**``, for example *kwargs* in the example above."
msgstr ""
":dfn:`var-nomeado`: especifica que, arbitrariamente, muitos argumentos "
"nomeados podem ser fornecidos (em adição a qualquer argumento nomeado já "
"aceito por outros parâmetros). Tal parâmetro pode definido colocando-se "
"``**`` antes do nome, por exemplo *kwargs* no exemplo acima."

#: ../../glossary.rst:949
msgid ""
"Parameters can specify both optional and required arguments, as well as "
"default values for some optional arguments."
msgstr ""
"Parâmetros podem especificar tanto argumentos opcionais quanto obrigatórios, "
"assim como valores padrão para alguns argumentos opcionais."

#: ../../glossary.rst:952
msgid ""
"See also the :term:`argument` glossary entry, the FAQ question on :ref:`the "
"difference between arguments and parameters <faq-argument-vs-parameter>`, "
"the :class:`inspect.Parameter` class, the :ref:`function` section, and :pep:"
"`362`."
msgstr ""
"Veja o termo :term:`argumento` no glossário, a pergunta sobre :ref:`a "
"diferença entre argumentos e parâmetros <faq-argument-vs-parameter>`, a "
"classe :class:`inspect.Parameter`, a seção :ref:`function` e a :pep:`362`."

#: ../../glossary.rst:956
msgid "path entry"
msgstr "entrada de caminho"

#: ../../glossary.rst:958
msgid ""
"A single location on the :term:`import path` which the :term:`path based "
"finder` consults to find modules for importing."
msgstr ""
"Um local único no :term:`caminho de importação` que o :term:`localizador "
"baseado no caminho` consulta para encontrar módulos a serem importados."

#: ../../glossary.rst:960
msgid "path entry finder"
msgstr "localizador de entrada de caminho"

#: ../../glossary.rst:962
msgid ""
"A :term:`finder` returned by a callable on :data:`sys.path_hooks` (i.e. a :"
"term:`path entry hook`) which knows how to locate modules given a :term:"
"`path entry`."
msgstr ""
"Um :term:`localizador` retornado por um chamável em :data:`sys.path_hooks` "
"(ou seja, um :term:`gancho de entrada de caminho`) que sabe como localizar "
"os módulos :term:`entrada de caminho`."

#: ../../glossary.rst:966
msgid ""
"See :class:`importlib.abc.PathEntryFinder` for the methods that path entry "
"finders implement."
msgstr ""
"Veja :class:`importlib.abc.PathEntryFinder` para os métodos que "
"localizadores de entrada de caminho implementam."

#: ../../glossary.rst:968
msgid "path entry hook"
msgstr "gancho de entrada de caminho"

#: ../../glossary.rst:970
msgid ""
"A callable on the :data:`sys.path_hooks` list which returns a :term:`path "
"entry finder` if it knows how to find modules on a specific :term:`path "
"entry`."
msgstr ""
"Um chamável na lista :data:`sys.path_hooks` que retorna um :term:"
"`localizador de entrada de caminho` caso saiba como localizar módulos em "
"uma :term:`entrada de caminho` específica."

#: ../../glossary.rst:973
msgid "path based finder"
msgstr "localizador baseado no caminho"

#: ../../glossary.rst:975
msgid ""
"One of the default :term:`meta path finders <meta path finder>` which "
"searches an :term:`import path` for modules."
msgstr ""
"Um dos :term:`localizadores de metacaminho <meta path finder>` padrão que "
"procura por um :term:`caminho de importação` de módulos."

#: ../../glossary.rst:977
msgid "path-like object"
msgstr "objeto caminho ou similar"

#: ../../glossary.rst:979
msgid ""
"An object representing a file system path. A path-like object is either a :"
"class:`str` or :class:`bytes` object representing a path, or an object "
"implementing the :class:`os.PathLike` protocol. An object that supports the :"
"class:`os.PathLike` protocol can be converted to a :class:`str` or :class:"
"`bytes` file system path by calling the :func:`os.fspath` function; :func:"
"`os.fsdecode` and :func:`os.fsencode` can be used to guarantee a :class:"
"`str` or :class:`bytes` result instead, respectively. Introduced by :pep:"
"`519`."
msgstr ""
"Um objeto representando um caminho de sistema de arquivos. Um objeto caminho "
"ou similar é ou um objeto :class:`str` ou :class:`bytes` representando um "
"caminho, ou um objeto implementando o protocolo :class:`os.PathLike`. Um "
"objeto que suporta o protocolo :class:`os.PathLike` pode ser convertido para "
"um arquivo de caminho do sistema :class:`str` ou :class:`bytes`, através da "
"chamada da função :func:`os.fspath`; :func:`os.fsdecode` e :func:`os."
"fsencode` podem ser usadas para garantir um :class:`str` ou :class:`bytes` "
"como resultado, respectivamente. Introduzido na :pep:`519`."

#: ../../glossary.rst:987
msgid "PEP"
msgstr "PEP"

#: ../../glossary.rst:989
msgid ""
"Python Enhancement Proposal. A PEP is a design document providing "
"information to the Python community, or describing a new feature for Python "
"or its processes or environment. PEPs should provide a concise technical "
"specification and a rationale for proposed features."
msgstr ""
"Proposta de melhoria do Python. Uma PEP é um documento de design que fornece "
"informação para a comunidade Python, ou descreve uma nova funcionalidade "
"para o Python ou seus predecessores ou ambientes. PEPs devem prover uma "
"especificação técnica concisa e um racional para funcionalidades propostas."

#: ../../glossary.rst:995
msgid ""
"PEPs are intended to be the primary mechanisms for proposing major new "
"features, for collecting community input on an issue, and for documenting "
"the design decisions that have gone into Python. The PEP author is "
"responsible for building consensus within the community and documenting "
"dissenting opinions."
msgstr ""
"PEPs têm a intenção de ser os mecanismos primários para propor novas "
"funcionalidades significativas, para coletar opiniões da comunidade sobre um "
"problema, e para documentar as decisões de design que foram adicionadas ao "
"Python. O autor da PEP é responsável por construir um consenso dentro da "
"comunidade e documentar opiniões dissidentes."

#: ../../glossary.rst:1001
msgid "See :pep:`1`."
msgstr "Veja :pep:`1`."

#: ../../glossary.rst:1002
msgid "portion"
msgstr "porção"

#: ../../glossary.rst:1004
msgid ""
"A set of files in a single directory (possibly stored in a zip file) that "
"contribute to a namespace package, as defined in :pep:`420`."
msgstr ""
"Um conjunto de arquivos em um único diretório (possivelmente armazenado em "
"um arquivo zip) que contribuem para um pacote de espaço de nomes, conforme "
"definido em :pep:`420`."

#: ../../glossary.rst:1006
msgid "positional argument"
msgstr "argumento posicional"

#: ../../glossary.rst:1009
msgid "provisional API"
msgstr "API provisória"

#: ../../glossary.rst:1011
msgid ""
"A provisional API is one which has been deliberately excluded from the "
"standard library's backwards compatibility guarantees.  While major changes "
"to such interfaces are not expected, as long as they are marked provisional, "
"backwards incompatible changes (up to and including removal of the "
"interface) may occur if deemed necessary by core developers.  Such changes "
"will not be made gratuitously -- they will occur only if serious fundamental "
"flaws are uncovered that were missed prior to the inclusion of the API."
msgstr ""
"Uma API provisória é uma API que foi deliberadamente excluída das "
"bibliotecas padrões com compatibilidade retroativa garantida. Enquanto "
"mudanças maiores para tais interfaces não são esperadas, contanto que elas "
"sejam marcadas como provisórias, mudanças retroativas incompatíveis (até e "
"incluindo a remoção da interface) podem ocorrer se consideradas necessárias "
"pelos desenvolvedores principais. Tais mudanças não serão feitas "
"gratuitamente -- elas irão ocorrer apenas se sérias falhas fundamentais "
"forem descobertas, que foram esquecidas anteriormente a inclusão da API."

#: ../../glossary.rst:1020
msgid ""
"Even for provisional APIs, backwards incompatible changes are seen as a "
"\"solution of last resort\" - every attempt will still be made to find a "
"backwards compatible resolution to any identified problems."
msgstr ""
"Mesmo para APIs provisórias, mudanças retroativas incompatíveis são vistas "
"como uma \"solução em último caso\" - cada tentativa ainda será feita para "
"encontrar uma resolução retroativa compatível para quaisquer problemas "
"encontrados."

#: ../../glossary.rst:1024
msgid ""
"This process allows the standard library to continue to evolve over time, "
"without locking in problematic design errors for extended periods of time.  "
"See :pep:`411` for more details."
msgstr ""
"Esse processo permite que a biblioteca padrão continue a evoluir com o "
"passar do tempo, sem se prender em erros de design problemáticos por "
"períodos de tempo prolongados. Veja :pep:`411` para mais detalhes."

#: ../../glossary.rst:1027
msgid "provisional package"
msgstr "pacote provisório"

#: ../../glossary.rst:1029
msgid "See :term:`provisional API`."
msgstr "Veja :term:`API provisória`."

#: ../../glossary.rst:1030
msgid "Python 3000"
msgstr "Python 3000"

#: ../../glossary.rst:1032
msgid ""
"Nickname for the Python 3.x release line (coined long ago when the release "
"of version 3 was something in the distant future.)  This is also abbreviated "
"\"Py3k\"."
msgstr ""
"Apelido para a linha de lançamento da versão do Python 3.x (cunhada há muito "
"tempo, quando o lançamento da versão 3 era algo em um futuro muito "
"distante.) Esse termo possui a seguinte abreviação: \"Py3k\"."

#: ../../glossary.rst:1035
msgid "Pythonic"
msgstr "Pythônico"

#: ../../glossary.rst:1037
msgid ""
"An idea or piece of code which closely follows the most common idioms of the "
"Python language, rather than implementing code using concepts common to "
"other languages.  For example, a common idiom in Python is to loop over all "
"elements of an iterable using a :keyword:`for` statement.  Many other "
"languages don't have this type of construct, so people unfamiliar with "
"Python sometimes use a numerical counter instead::"
msgstr ""
"Uma ideia ou um pedaço de código que segue de perto as formas de escritas "
"mais comuns da linguagem Python, ao invés de implementar códigos usando "
"conceitos comuns a outras linguagens. Por exemplo, um formato comum em "
"Python é fazer um laço sobre todos os elementos de uma iterável usando a "
"instrução :keyword:`for`. Muitas outras linguagens não têm esse tipo de "
"construção, então as pessoas que não estão familiarizadas com o Python usam "
"um contador numérico::"

#: ../../glossary.rst:1044
msgid ""
"for i in range(len(food)):\n"
"    print(food[i])"
msgstr ""
"for i in range(len(comida)):\n"
"    print(comida[i])"

#: ../../glossary.rst:1047
msgid "As opposed to the cleaner, Pythonic method::"
msgstr "Ao contrário do método mais limpo, Pythônico::"

#: ../../glossary.rst:1049
msgid ""
"for piece in food:\n"
"    print(piece)"
msgstr ""
"for parte in comida:\n"
"    print(parte)"

#: ../../glossary.rst:1051
msgid "qualified name"
msgstr "nome qualificado"

#: ../../glossary.rst:1053
msgid ""
"A dotted name showing the \"path\" from a module's global scope to a class, "
"function or method defined in that module, as defined in :pep:`3155`.  For "
"top-level functions and classes, the qualified name is the same as the "
"object's name::"
msgstr ""
"Um nome pontilhado (quando 2 termos são ligados por um ponto) que mostra o "
"\"path\" do escopo global de um módulo para uma classe, função ou método "
"definido num determinado módulo, conforme definido pela :pep:`3155`. Para "
"funções e classes de nível superior, o nome qualificado é o mesmo que o nome "
"do objeto::"

#: ../../glossary.rst:1058
msgid ""
">>> class C:\n"
"...     class D:\n"
"...         def meth(self):\n"
"...             pass\n"
"...\n"
">>> C.__qualname__\n"
"'C'\n"
">>> C.D.__qualname__\n"
"'C.D'\n"
">>> C.D.meth.__qualname__\n"
"'C.D.meth'"
msgstr ""
">>> class C:\n"
"...     class D:\n"
"...         def metodo(self):\n"
"...             pass\n"
"...\n"
">>> C.__qualname__\n"
"'C'\n"
">>> C.D.__qualname__\n"
"'C.D'\n"
">>> C.D.metodo.__qualname__\n"
"'C.D.metodo'"

#: ../../glossary.rst:1070
msgid ""
"When used to refer to modules, the *fully qualified name* means the entire "
"dotted path to the module, including any parent packages, e.g. ``email.mime."
"text``::"
msgstr ""
"Quando usado para se referir a módulos, o *nome totalmente qualificado* "
"significa todo o caminho pontilhado para o módulo, incluindo quaisquer "
"pacotes pai, por exemplo: ``email.mime.text``::"

#: ../../glossary.rst:1074
msgid ""
">>> import email.mime.text\n"
">>> email.mime.text.__name__\n"
"'email.mime.text'"
msgstr ""
">>> import email.mime.text\n"
">>> email.mime.text.__name__\n"
"'email.mime.text'"

#: ../../glossary.rst:1077
msgid "reference count"
msgstr "contagem de referências"

#: ../../glossary.rst:1079
msgid ""
"The number of references to an object.  When the reference count of an "
"object drops to zero, it is deallocated.  Some objects are \"immortal\" and "
"have reference counts that are never modified, and therefore the objects are "
"never deallocated.  Reference counting is generally not visible to Python "
"code, but it is a key element of the :term:`CPython` implementation.  "
"Programmers can call the :func:`sys.getrefcount` function to return the "
"reference count for a particular object."
msgstr ""
"O número de referências a um objeto. Quando a contagem de referências de um "
"objeto cai para zero, ele é desalocado. Alguns objetos são \"imortais\" e "
"têm contagens de referências que nunca são modificadas e, portanto, os "
"objetos nunca são desalocados. A contagem de referências geralmente não é "
"visível para o código Python, mas é um elemento-chave da implementação do :"
"term:`CPython`. Os programadores podem chamar a função :func:`sys."
"getrefcount` para retornar a contagem de referências para um objeto "
"específico."

#: ../../glossary.rst:1087
msgid "regular package"
msgstr "pacote regular"

#: ../../glossary.rst:1089
msgid ""
"A traditional :term:`package`, such as a directory containing an ``__init__."
"py`` file."
msgstr ""
"Um :term:`pacote` tradicional, como um diretório contendo um arquivo "
"``__init__.py``."

#: ../../glossary.rst:1092
msgid "See also :term:`namespace package`."
msgstr "Veja também :term:`pacote de espaço de nomes`."

#: ../../glossary.rst:1093
msgid "__slots__"
msgstr "__slots__"

#: ../../glossary.rst:1095
msgid ""
"A declaration inside a class that saves memory by pre-declaring space for "
"instance attributes and eliminating instance dictionaries.  Though popular, "
"the technique is somewhat tricky to get right and is best reserved for rare "
"cases where there are large numbers of instances in a memory-critical "
"application."
msgstr ""
"Uma declaração dentro de uma classe que economiza memória pré-declarando "
"espaço para atributos de instâncias, e eliminando dicionários de instâncias. "
"Apesar de popular, a técnica é um tanto quanto complicada de acertar, e é "
"melhor se for reservada para casos raros, onde existe uma grande quantidade "
"de instâncias em uma aplicação onde a memória é crítica."

#: ../../glossary.rst:1100
msgid "sequence"
msgstr "sequência"

#: ../../glossary.rst:1102
msgid ""
"An :term:`iterable` which supports efficient element access using integer "
"indices via the :meth:`~object.__getitem__` special method and defines a :"
"meth:`~object.__len__` method that returns the length of the sequence. Some "
"built-in sequence types are :class:`list`, :class:`str`, :class:`tuple`, "
"and :class:`bytes`. Note that :class:`dict` also supports :meth:`~object."
"__getitem__` and :meth:`!__len__`, but is considered a mapping rather than a "
"sequence because the lookups use arbitrary :term:`immutable` keys rather "
"than integers."
msgstr ""
"Um :term:`iterável` com suporte para acesso eficiente a seus elementos "
"através de índices inteiros via método especial :meth:`~object.__getitem__` "
"e que define o método :meth:`~object.__len__` que devolve o tamanho da "
"sequência. Alguns tipos de sequência embutidos são: :class:`list`, :class:"
"`str`, :class:`tuple`, e :class:`bytes`. Note que :class:`dict` também tem "
"suporte para :meth:`~object.__getitem__` e :meth:`!__len__`, mas é "
"considerado um mapeamento e não uma sequência porque a busca usa uma chave :"
"term:`imutável` arbitrária em vez de inteiros."

#: ../../glossary.rst:1111
msgid ""
"The :class:`collections.abc.Sequence` abstract base class defines a much "
"richer interface that goes beyond just :meth:`~object.__getitem__` and :meth:"
"`~object.__len__`, adding :meth:`!count`, :meth:`!index`, :meth:`~object."
"__contains__`, and :meth:`~object.__reversed__`. Types that implement this "
"expanded interface can be registered explicitly using :func:`~abc.ABCMeta."
"register`. For more documentation on sequence methods generally, see :ref:"
"`Common Sequence Operations <typesseq-common>`."
msgstr ""
"A classe base abstrata :class:`collections.abc.Sequence` define uma "
"interface mais rica que vai além de apenas :meth:`~object.__getitem__` e :"
"meth:`~object.__len__`, adicionando :meth:`!count`, :meth:`!index`, :meth:"
"`~object.__contains__`, e :meth:`~object.__reversed__`. Tipos que "
"implementam essa interface podem ser explicitamente registrados usando :func:"
"`~abc.ABCMeta.register`. Para mais documentação sobre métodos de sequências "
"em geral, veja :ref:`Operações comuns de sequências <typesseq-common>`."

#: ../../glossary.rst:1120
msgid "set comprehension"
msgstr "compreensão de conjunto"

#: ../../glossary.rst:1122
msgid ""
"A compact way to process all or part of the elements in an iterable and "
"return a set with the results. ``results = {c for c in 'abracadabra' if c "
"not in 'abc'}`` generates the set of strings ``{'r', 'd'}``.  See :ref:"
"`comprehensions`."
msgstr ""
"Uma maneira compacta de processar todos ou parte dos elementos em iterável e "
"retornar um conjunto com os resultados. ``results = {c for c in "
"'abracadabra' if c not in 'abc'}`` gera um conjunto de strings ``{'r', 'd'}"
"``.  Veja :ref:`comprehensions`."

#: ../../glossary.rst:1126
msgid "single dispatch"
msgstr "despacho único"

#: ../../glossary.rst:1128
msgid ""
"A form of :term:`generic function` dispatch where the implementation is "
"chosen based on the type of a single argument."
msgstr ""
"Uma forma de despacho de :term:`função genérica` onde a implementação é "
"escolhida com base no tipo de um único argumento."

#: ../../glossary.rst:1130
msgid "slice"
msgstr "fatia"

#: ../../glossary.rst:1132
msgid ""
"An object usually containing a portion of a :term:`sequence`.  A slice is "
"created using the subscript notation, ``[]`` with colons between numbers "
"when several are given, such as in ``variable_name[1:3:5]``.  The bracket "
"(subscript) notation uses :class:`slice` objects internally."
msgstr ""
"Um objeto geralmente contendo uma parte de uma :term:`sequência`. Uma fatia "
"é criada usando a notação de subscrito ``[]`` pode conter também até dois "
"pontos entre números, como em ``variable_name[1:3:5]``. A notação de suporte "
"(subscrito) utiliza objetos :class:`slice` internamente."

#: ../../glossary.rst:1136
msgid "special method"
msgstr "método especial"

#: ../../glossary.rst:1140
msgid ""
"A method that is called implicitly by Python to execute a certain operation "
"on a type, such as addition.  Such methods have names starting and ending "
"with double underscores.  Special methods are documented in :ref:"
"`specialnames`."
msgstr ""
"Um método que é chamado implicitamente pelo Python para executar uma certa "
"operação em um tipo, como uma adição por exemplo. Tais métodos tem nomes "
"iniciando e terminando com dois underscores. Métodos especiais estão "
"documentados em :ref:`specialnames`."

#: ../../glossary.rst:1144
msgid "statement"
msgstr "instrução"

#: ../../glossary.rst:1146
msgid ""
"A statement is part of a suite (a \"block\" of code).  A statement is either "
"an :term:`expression` or one of several constructs with a keyword, such as :"
"keyword:`if`, :keyword:`while` or :keyword:`for`."
msgstr ""
"Uma instrução é parte de uma suíte (um \"bloco\" de código). Uma instrução é "
"ou uma :term:`expressão` ou uma de várias construções com uma palavra "
"reservada, tal como :keyword:`if`, :keyword:`while` ou :keyword:`for`."

#: ../../glossary.rst:1149
msgid "static type checker"
msgstr "verificador de tipo estático"

#: ../../glossary.rst:1151
msgid ""
"An external tool that reads Python code and analyzes it, looking for issues "
"such as incorrect types. See also :term:`type hints <type hint>` and the :"
"mod:`typing` module."
msgstr ""
"Uma ferramenta externa que lê o código Python e o analisa, procurando por "
"problemas como tipos incorretos. Consulte também :term:`dicas de tipo <type "
"hint>` e o módulo :mod:`typing`."

#: ../../glossary.rst:1154
msgid "strong reference"
msgstr "referência forte"

#: ../../glossary.rst:1156
msgid ""
"In Python's C API, a strong reference is a reference to an object which is "
"owned by the code holding the reference.  The strong reference is taken by "
"calling :c:func:`Py_INCREF` when the reference is created and released with :"
"c:func:`Py_DECREF` when the reference is deleted."
msgstr ""
"Na API C do Python, uma referência forte é uma referência a um objeto que "
"pertence ao código que contém a referência. A referência forte é obtida "
"chamando :c:func:`Py_INCREF` quando a referência é criada e liberada com :c:"
"func:`Py_DECREF` quando a referência é excluída."

#: ../../glossary.rst:1162
msgid ""
"The :c:func:`Py_NewRef` function can be used to create a strong reference to "
"an object. Usually, the :c:func:`Py_DECREF` function must be called on the "
"strong reference before exiting the scope of the strong reference, to avoid "
"leaking one reference."
msgstr ""
"A função :c:func:`Py_NewRef` pode ser usada para criar uma referência forte "
"para um objeto. Normalmente, a função :c:func:`Py_DECREF` deve ser chamada "
"na referência forte antes de sair do escopo da referência forte, para evitar "
"o vazamento de uma referência."

#: ../../glossary.rst:1167
msgid "See also :term:`borrowed reference`."
msgstr "Veja também :term:`referência emprestada`."

#: ../../glossary.rst:1168
msgid "text encoding"
msgstr "codificador de texto"

#: ../../glossary.rst:1170
msgid ""
"A string in Python is a sequence of Unicode code points (in range "
"``U+0000``--``U+10FFFF``). To store or transfer a string, it needs to be "
"serialized as a sequence of bytes."
msgstr ""
"Uma string em Python é uma sequência de pontos de código Unicode (no "
"intervalo ``U+0000``--``U+10FFFF``). Para armazenar ou transferir uma "
"string, ela precisa ser serializada como uma sequência de bytes."

#: ../../glossary.rst:1174
msgid ""
"Serializing a string into a sequence of bytes is known as \"encoding\", and "
"recreating the string from the sequence of bytes is known as \"decoding\"."
msgstr ""
"A serialização de uma string em uma sequência de bytes é conhecida como "
"\"codificação\" e a recriação da string a partir de uma sequência de bytes é "
"conhecida como \"decodificação\"."

#: ../../glossary.rst:1177
msgid ""
"There are a variety of different text serialization :ref:`codecs <standard-"
"encodings>`, which are collectively referred to as \"text encodings\"."
msgstr ""
"Há uma variedade de diferentes serializações de texto :ref:`codecs <standard-"
"encodings>`, que são coletivamente chamadas de \"codificações de texto\"."

#: ../../glossary.rst:1180
msgid "text file"
msgstr "arquivo texto"

#: ../../glossary.rst:1182
msgid ""
"A :term:`file object` able to read and write :class:`str` objects. Often, a "
"text file actually accesses a byte-oriented datastream and handles the :term:"
"`text encoding` automatically. Examples of text files are files opened in "
"text mode (``'r'`` or ``'w'``), :data:`sys.stdin`, :data:`sys.stdout`, and "
"instances of :class:`io.StringIO`."
msgstr ""
"Um  :term:`objeto arquivo` apto a ler e escrever objetos :class:`str`. "
"Geralmente, um arquivo texto, na verdade, acessa um fluxo de dados de bytes "
"e captura o :term:`codificador de texto <text encoding>` automaticamente. "
"Exemplos de arquivos texto são: arquivos abertos em modo texto (``'r'`` or "
"``'w'``), :data:`sys.stdin`, :data:`sys.stdout`, e instâncias de :class:`io."
"StringIO`."

#: ../../glossary.rst:1189
msgid ""
"See also :term:`binary file` for a file object able to read and write :term:"
"`bytes-like objects <bytes-like object>`."
msgstr ""
"Veja também :term:`arquivo binário <binary file>` para um objeto arquivo "
"apto a ler e escrever :term:`objetos byte ou similar <bytes-like object>`."

#: ../../glossary.rst:1191
msgid "triple-quoted string"
msgstr "string entre aspas triplas"

#: ../../glossary.rst:1193
msgid ""
"A string which is bound by three instances of either a quotation mark (\") "
"or an apostrophe (').  While they don't provide any functionality not "
"available with single-quoted strings, they are useful for a number of "
"reasons.  They allow you to include unescaped single and double quotes "
"within a string and they can span multiple lines without the use of the "
"continuation character, making them especially useful when writing "
"docstrings."
msgstr ""
"Uma string que está definida com três ocorrências de aspas duplas (\") ou "
"apóstrofos ('). Enquanto elas não fornecem nenhuma funcionalidade não "
"disponível com strings de aspas simples, elas são úteis para inúmeras "
"razões. Elas permitem que você inclua aspas simples e duplas não escapadas "
"dentro de uma string, e elas podem utilizar múltiplas linhas sem o uso de "
"caractere de continuação, fazendo-as especialmente úteis quando escrevemos "
"documentação em docstrings."

#: ../../glossary.rst:1200
msgid "type"
msgstr "tipo"

#: ../../glossary.rst:1202
msgid ""
"The type of a Python object determines what kind of object it is; every "
"object has a type.  An object's type is accessible as its :attr:`~instance."
"__class__` attribute or can be retrieved with ``type(obj)``."
msgstr ""
"O tipo de um objeto Python determina qual tipo de objeto ele é; cada objeto "
"tem um tipo. Um tipo de objeto é acessível pelo atributo :attr:`~instância."
"__class__` ou pode ser recuperado com ``type(obj)``."

#: ../../glossary.rst:1206
msgid "type alias"
msgstr "tipo alias"

#: ../../glossary.rst:1208
msgid "A synonym for a type, created by assigning the type to an identifier."
msgstr ""
"Um sinônimo para um tipo, criado através da atribuição do tipo para um "
"identificador."

#: ../../glossary.rst:1210
msgid ""
"Type aliases are useful for simplifying :term:`type hints <type hint>`. For "
"example::"
msgstr ""
"Tipos alias são úteis para simplificar :term:`dicas de tipo <type hint>`. "
"Por exemplo::"

#: ../../glossary.rst:1213
msgid ""
"def remove_gray_shades(\n"
"        colors: list[tuple[int, int, int]]) -> list[tuple[int, int, int]]:\n"
"    pass"
msgstr ""
"def remove_tons_de_cinza(\n"
"        cores: list[tuple[int, int, int]]) -> list[tuple[int, int, int]]:\n"
"    pass"

#: ../../glossary.rst:1217
msgid "could be made more readable like this::"
msgstr "pode tornar-se mais legível desta forma::"

#: ../../glossary.rst:1219
msgid ""
"Color = tuple[int, int, int]\n"
"\n"
"def remove_gray_shades(colors: list[Color]) -> list[Color]:\n"
"    pass"
msgstr ""
"Cor = tuple[int, int, int]\n"
"\n"
"def remove_tons_de_cinza(cores: list[Cor]) -> list[Cor]:\n"
"    pass"

#: ../../glossary.rst:1224 ../../glossary.rst:1238
msgid "See :mod:`typing` and :pep:`484`, which describe this functionality."
msgstr "Veja :mod:`typing` e :pep:`484`, a qual descreve esta funcionalidade."

#: ../../glossary.rst:1225
msgid "type hint"
msgstr "dica de tipo"

#: ../../glossary.rst:1227
msgid ""
"An :term:`annotation` that specifies the expected type for a variable, a "
"class attribute, or a function parameter or return value."
msgstr ""
"Uma :term:`anotação` que especifica o tipo esperado para uma variável, um "
"atributo de classe, ou um parâmetro de função ou um valor de retorno."

#: ../../glossary.rst:1230
msgid ""
"Type hints are optional and are not enforced by Python but they are useful "
"to :term:`static type checkers <static type checker>`. They can also aid "
"IDEs with code completion and refactoring."
msgstr ""
"Dicas de tipo são opcionais e não são forçadas pelo Python, mas elas são "
"úteis para :term:`verificadores de tipo estático <static type checker>`. "
"Eles também ajudam IDEs a completar e refatorar código."

#: ../../glossary.rst:1234
msgid ""
"Type hints of global variables, class attributes, and functions, but not "
"local variables, can be accessed using :func:`typing.get_type_hints`."
msgstr ""
"Dicas de tipos de variáveis globais, atributos de classes, e funções, mas "
"não de variáveis locais, podem ser acessadas usando :func:`typing."
"get_type_hints`."

#: ../../glossary.rst:1239
msgid "universal newlines"
msgstr "novas linhas universais"

#: ../../glossary.rst:1241
msgid ""
"A manner of interpreting text streams in which all of the following are "
"recognized as ending a line: the Unix end-of-line convention ``'\\n'``, the "
"Windows convention ``'\\r\\n'``, and the old Macintosh convention "
"``'\\r'``.  See :pep:`278` and :pep:`3116`, as well as :func:`bytes."
"splitlines` for an additional use."
msgstr ""
"Uma maneira de interpretar fluxos de textos, na qual todos estes são "
"reconhecidos como caracteres de fim de linha: a convenção para fim de linha "
"no Unix ``'\\n'``, a convenção no Windows ``'\\r\\n'``, e a antiga convenção "
"no Macintosh ``'\\r'``. Veja :pep:`278` e :pep:`3116`, bem como :func:`bytes."
"splitlines` para uso adicional."

#: ../../glossary.rst:1246
msgid "variable annotation"
msgstr "anotação de variável"

#: ../../glossary.rst:1248
msgid "An :term:`annotation` of a variable or a class attribute."
msgstr "Uma :term:`anotação` de uma variável ou um atributo de classe."

#: ../../glossary.rst:1250
msgid ""
"When annotating a variable or a class attribute, assignment is optional::"
msgstr ""
"Ao fazer uma anotação de uma variável ou um atributo de classe, a atribuição "
"é opcional::"

#: ../../glossary.rst:1252
msgid ""
"class C:\n"
"    field: 'annotation'"
msgstr ""
"class C:\n"
"    campo: 'anotação'"

#: ../../glossary.rst:1255
msgid ""
"Variable annotations are usually used for :term:`type hints <type hint>`: "
"for example this variable is expected to take :class:`int` values::"
msgstr ""
"Anotações de variáveis são normalmente usadas para :term:`dicas de tipo "
"<type hint>`: por exemplo, espera-se que esta variável receba valores do "
"tipo :class:`int`::"

#: ../../glossary.rst:1259
msgid "count: int = 0"
msgstr "contagem: int = 0"

#: ../../glossary.rst:1261
msgid "Variable annotation syntax is explained in section :ref:`annassign`."
msgstr ""
"A sintaxe de anotação de variável é explicada na seção :ref:`annassign`."

#: ../../glossary.rst:1263
msgid ""
"See :term:`function annotation`, :pep:`484` and :pep:`526`, which describe "
"this functionality. Also see :ref:`annotations-howto` for best practices on "
"working with annotations."
msgstr ""
"Veja :term:`anotação de função`, :pep:`484` e :pep:`526`, que descrevem esta "
"funcionalidade. Veja também :ref:`annotations-howto` para as melhores "
"práticas sobre como trabalhar com anotações."

#: ../../glossary.rst:1267
msgid "virtual environment"
msgstr "ambiente virtual"

#: ../../glossary.rst:1269
msgid ""
"A cooperatively isolated runtime environment that allows Python users and "
"applications to install and upgrade Python distribution packages without "
"interfering with the behaviour of other Python applications running on the "
"same system."
msgstr ""
"Um ambiente de execução isolado que permite usuários Python e aplicações "
"instalarem e atualizarem pacotes Python sem interferir no comportamento de "
"outras aplicações Python em execução no mesmo sistema."

#: ../../glossary.rst:1274
msgid "See also :mod:`venv`."
msgstr "Veja também :mod:`venv`."

#: ../../glossary.rst:1275
msgid "virtual machine"
msgstr "máquina virtual"

#: ../../glossary.rst:1277
msgid ""
"A computer defined entirely in software.  Python's virtual machine executes "
"the :term:`bytecode` emitted by the bytecode compiler."
msgstr ""
"Um computador definido inteiramente em software. A máquina virtual de Python "
"executa o :term:`bytecode` emitido pelo compilador de bytecode."

#: ../../glossary.rst:1279
msgid "Zen of Python"
msgstr "Zen do Python"

#: ../../glossary.rst:1281
msgid ""
"Listing of Python design principles and philosophies that are helpful in "
"understanding and using the language.  The listing can be found by typing "
"\"``import this``\" at the interactive prompt."
msgstr ""
"Lista de princípios de projeto e filosofias do Python que são úteis para a "
"compreensão e uso da linguagem. A lista é exibida quando se digita "
"\"``import this``\" no console interativo."

#: ../../glossary.rst:264
msgid "C-contiguous"
msgstr "contíguo C"

#: ../../glossary.rst:264
msgid "Fortran contiguous"
msgstr "contíguo Fortran"

#: ../../glossary.rst:769
msgid "magic"
msgstr "mágico"

#: ../../glossary.rst:1138
msgid "special"
msgstr "especial"
