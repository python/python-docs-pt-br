# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Raphael Mendonça, 2021
# Danilo Lima <djkcond@gmail.com>, 2021
# Misael borges <misael@planosassessoria.com.br>, 2021
# Italo Penaforte <italo.penaforte@gmail.com>, 2023
# Julia Rizza <contato@juliarizza.com>, 2023
# felipe caridade fernandes <caridade500@gmail.com>, 2023
# Vinicius Gubiani Ferreira <vini.g.fer@gmail.com>, 2023
# Alexandre B A Villares, 2023
# Marco Rougeth <marco@rougeth.com>, 2023
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2023
# Adorilson Bezerra <adorilson@gmail.com>, 2023
# Vitor Buxbaum Orlandi, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-27 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:49+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../reference/expressions.rst:6
msgid "Expressions"
msgstr "Expressões"

#: ../../reference/expressions.rst:10
msgid ""
"This chapter explains the meaning of the elements of expressions in Python."
msgstr ""
"Este capítulo explica o significado dos elementos das expressões em Python."

#: ../../reference/expressions.rst:12
msgid ""
"**Syntax Notes:** In this and the following chapters, extended BNF notation "
"will be used to describe syntax, not lexical analysis.  When (one "
"alternative of) a syntax rule has the form"
msgstr ""
"**Notas de sintaxe:** Neste e nos capítulos seguintes, a notação BNF "
"estendida será usada para descrever a sintaxe, não a análise lexical. Quando "
"(uma alternativa de) uma regra de sintaxe tem a forma"

#: ../../reference/expressions.rst:19
msgid ""
"and no semantics are given, the semantics of this form of ``name`` are the "
"same as for ``othername``."
msgstr ""
"e nenhuma semântica é fornecida, a semântica desta forma de ``name`` é a "
"mesma que para ``othername``."

#: ../../reference/expressions.rst:26
msgid "Arithmetic conversions"
msgstr "Conversões aritméticas"

#: ../../reference/expressions.rst:30
msgid ""
"When a description of an arithmetic operator below uses the phrase \"the "
"numeric arguments are converted to a common type\", this means that the "
"operator implementation for built-in types works as follows:"
msgstr ""
"Quando uma descrição de um operador aritmético abaixo usa a frase \"os "
"argumentos numéricos são convertidos em um tipo comum\", isso significa que "
"a implementação do operador para tipos embutidos funciona da seguinte "
"maneira:"

#: ../../reference/expressions.rst:34
msgid ""
"If either argument is a complex number, the other is converted to complex;"
msgstr ""
"Se um dos argumentos for um número complexo, o outro será convertido em "
"complexo;"

#: ../../reference/expressions.rst:36
msgid ""
"otherwise, if either argument is a floating-point number, the other is "
"converted to floating point;"
msgstr ""
"caso contrário, se um dos argumentos for um número de ponto flutuante, o "
"outro será convertido em ponto flutuante;"

#: ../../reference/expressions.rst:39
msgid "otherwise, both must be integers and no conversion is necessary."
msgstr ""
"caso contrário, ambos devem ser inteiros e nenhuma conversão é necessária."

#: ../../reference/expressions.rst:41
msgid ""
"Some additional rules apply for certain operators (e.g., a string as a left "
"argument to the '%' operator).  Extensions must define their own conversion "
"behavior."
msgstr ""
"Algumas regras adicionais se aplicam a certos operadores (por exemplo, uma "
"string como um argumento à esquerda para o operador '%'). As extensões devem "
"definir seu próprio comportamento de conversão."

#: ../../reference/expressions.rst:49
msgid "Atoms"
msgstr "Átomos"

#: ../../reference/expressions.rst:53
msgid ""
"Atoms are the most basic elements of expressions.  The simplest atoms are "
"identifiers or literals.  Forms enclosed in parentheses, brackets or braces "
"are also categorized syntactically as atoms.  The syntax for atoms is:"
msgstr ""
"Os átomos são os elementos mais básicos das expressões. Os átomos mais "
"simples são identificadores ou literais. As formas entre parênteses, "
"colchetes ou chaves também são categorizadas sintaticamente como átomos. A "
"sintaxe para átomos é:"

#: ../../reference/expressions.rst:66
msgid "Identifiers (Names)"
msgstr "Identificadores (Nomes)"

#: ../../reference/expressions.rst:70
msgid ""
"An identifier occurring as an atom is a name.  See section :ref:"
"`identifiers` for lexical definition and section :ref:`naming` for "
"documentation of naming and binding."
msgstr ""
"Um identificador que ocorre como um átomo é um nome. Veja a seção :ref:"
"`identifiers` para a definição lexical e a seção :ref:`naming` para "
"documentação de nomenclatura e ligação."

#: ../../reference/expressions.rst:76
msgid ""
"When the name is bound to an object, evaluation of the atom yields that "
"object. When a name is not bound, an attempt to evaluate it raises a :exc:"
"`NameError` exception."
msgstr ""
"Quando o nome está vinculado a um objeto, a avaliação do átomo produz esse "
"objeto. Quando um nome não está vinculado, uma tentativa de avaliá-lo "
"levanta uma exceção :exc:`NameError`."

#: ../../reference/expressions.rst:87
msgid "Private name mangling"
msgstr "Desfiguração de nome privado"

#: ../../reference/expressions.rst:89
msgid ""
"When an identifier that textually occurs in a class definition begins with "
"two or more underscore characters and does not end in two or more "
"underscores, it is considered a :dfn:`private name` of that class."
msgstr ""
"Quando um identificador que ocorre textualmente em uma definição de classe "
"começa com dois ou mais caracteres de sublinhado e não termina com dois ou "
"mais sublinhados, ele é considerado um :dfn:`nome privado` daquela classe."

#: ../../reference/expressions.rst:95
msgid "The :ref:`class specifications <class>`."
msgstr "As :ref:`especificações de classe <class>`."

#: ../../reference/expressions.rst:97
msgid ""
"More precisely, private names are transformed to a longer form before code "
"is generated for them.  If the transformed name is longer than 255 "
"characters, implementation-defined truncation may happen."
msgstr ""
"Mais precisamente, os nomes privados são transformados em um formato mais "
"longo antes que o código seja gerado para eles. Se o nome transformado tiver "
"mais de 255 caracteres, poderá ocorrer truncamento definido pela "
"implementação."

#: ../../reference/expressions.rst:101
msgid ""
"The transformation is independent of the syntactical context in which the "
"identifier is used but only the following private identifiers are mangled:"
msgstr ""
"A transformação é independente do contexto sintático no qual o identificador "
"é usado, mas apenas os seguintes identificadores privados são desfigurados:"

#: ../../reference/expressions.rst:104
msgid ""
"Any name used as the name of a variable that is assigned or read or any name "
"of an attribute being accessed."
msgstr ""
"Qualquer nome usado como nome de uma variável que é atribuída ou lida ou "
"qualquer nome de um atributo que está sendo acessado."

#: ../../reference/expressions.rst:107
msgid ""
"The :attr:`~definition.__name__` attribute of nested functions, classes, and "
"type aliases is however not mangled."
msgstr ""

#: ../../reference/expressions.rst:110
msgid ""
"The name of imported modules, e.g., ``__spam`` in ``import __spam``. If the "
"module is part of a package (i.e., its name contains a dot), the name is "
"*not* mangled, e.g., the ``__foo`` in ``import __foo.bar`` is not mangled."
msgstr ""
"O nome dos módulos importados, por exemplo, ``__spam`` em ``import __spam``. "
"Se o módulo faz parte de um pacote (ou seja, seu nome contém um ponto), o "
"nome *não* é desfigurado, por exemplo, o ``__foo`` em ``import __foo.bar`` "
"não é desfigurado."

#: ../../reference/expressions.rst:115
msgid ""
"The name of an imported member, e.g., ``__f`` in ``from spam import __f``."
msgstr ""
"O nome de um membro importado, por exemplo, ``__f`` em ``from spam import "
"__f``."

#: ../../reference/expressions.rst:117
msgid "The transformation rule is defined as follows:"
msgstr "A regra de transformação está definida da seguinte forma:"

#: ../../reference/expressions.rst:119
msgid ""
"The class name, with leading underscores removed and a single leading "
"underscore inserted, is inserted in front of the identifier, e.g., the "
"identifier ``__spam`` occurring in a class named ``Foo``, ``_Foo`` or "
"``__Foo`` is transformed to ``_Foo__spam``."
msgstr ""
"O nome da classe, com os sublinhados iniciais removidos e um único "
"sublinhado inicial inserido, é inserido na frente do identificador, por "
"exemplo, o identificador ``__spam`` ocorrendo em uma classe chamada ``Foo``, "
"``_Foo`` ou ``__Foo`` é transformado em ``_Foo__spam``."

#: ../../reference/expressions.rst:124
msgid ""
"If the class name consists only of underscores, the transformation is the "
"identity, e.g., the identifier ``__spam`` occurring in a class named ``_`` "
"or ``__`` is left as is."
msgstr ""
"Se o nome da classe consiste apenas em sublinhados, a transformação é a "
"identidade, por exemplo, o identificador ``__spam`` que ocorre em uma classe "
"chamada ``_`` ou ``__`` é deixado como está."

#: ../../reference/expressions.rst:131
msgid "Literals"
msgstr "Literais"

#: ../../reference/expressions.rst:135
msgid "Python supports string and bytes literals and various numeric literals:"
msgstr ""
"Python oferece suporte a strings e bytes literais e vários literais "
"numéricos:"

#: ../../reference/expressions.rst:141
msgid ""
"Evaluation of a literal yields an object of the given type (string, bytes, "
"integer, floating-point number, complex number) with the given value.  The "
"value may be approximated in the case of floating-point and imaginary "
"(complex) literals.  See section :ref:`literals` for details."
msgstr ""
"A avaliação de um literal produz um objeto do tipo fornecido (string, bytes, "
"inteiro, número de ponto flutuante, número complexo) com o valor fornecido. "
"O valor pode ser aproximado no caso de ponto flutuante e literais "
"imaginários (complexos). Veja a seção :ref:`literals` para detalhes."

#: ../../reference/expressions.rst:150
msgid ""
"All literals correspond to immutable data types, and hence the object's "
"identity is less important than its value.  Multiple evaluations of literals "
"with the same value (either the same occurrence in the program text or a "
"different occurrence) may obtain the same object or a different object with "
"the same value."
msgstr ""
"Todos os literais correspondem a tipos de dados imutáveis e, portanto, a "
"identidade do objeto é menos importante que seu valor. Múltiplas avaliações "
"de literais com o mesmo valor (seja a mesma ocorrência no texto do programa "
"ou uma ocorrência diferente) podem obter o mesmo objeto ou um objeto "
"diferente com o mesmo valor."

#: ../../reference/expressions.rst:160
msgid "Parenthesized forms"
msgstr "Formas de parênteses"

#: ../../reference/expressions.rst:166
msgid ""
"A parenthesized form is an optional expression list enclosed in parentheses:"
msgstr ""
"Um forma entre parênteses é uma lista de expressões opcional entre "
"parênteses:"

#: ../../reference/expressions.rst:171
msgid ""
"A parenthesized expression list yields whatever that expression list yields: "
"if the list contains at least one comma, it yields a tuple; otherwise, it "
"yields the single expression that makes up the expression list."
msgstr ""
"Uma lista de expressões entre parênteses produz tudo o que aquela lista de "
"expressões produz: se a lista contiver pelo menos uma vírgula, ela produzirá "
"uma tupla; caso contrário, produz a única expressão que compõe a lista de "
"expressões."

#: ../../reference/expressions.rst:177
msgid ""
"An empty pair of parentheses yields an empty tuple object.  Since tuples are "
"immutable, the same rules as for literals apply (i.e., two occurrences of "
"the empty tuple may or may not yield the same object)."
msgstr ""
"Um par de parênteses vazio produz um objeto tupla vazio. Como as tuplas são "
"imutáveis, aplicam-se as mesmas regras dos literais (isto é, duas "
"ocorrências da tupla vazia podem ou não produzir o mesmo objeto)."

#: ../../reference/expressions.rst:185
msgid ""
"Note that tuples are not formed by the parentheses, but rather by use of the "
"comma.  The exception is the empty tuple, for which parentheses *are* "
"required --- allowing unparenthesized \"nothing\" in expressions would cause "
"ambiguities and allow common typos to pass uncaught."
msgstr ""
"Observe que as tuplas não são formadas pelos parênteses, mas sim pelo uso da "
"vírgula. A exceção é a tupla vazia, para a qual os parênteses *são* "
"obrigatórios -- permitir \"nada\" sem parênteses em expressões causaria "
"ambiguidades e permitiria que erros de digitação comuns passassem sem serem "
"detectados."

#: ../../reference/expressions.rst:194
msgid "Displays for lists, sets and dictionaries"
msgstr "Sintaxe de criação de listas, conjuntos e dicionários"

#: ../../reference/expressions.rst:198
msgid ""
"For constructing a list, a set or a dictionary Python provides special "
"syntax called \"displays\", each of them in two flavors:"
msgstr ""
"Para construir uma lista, um conjunto ou um dicionário, o Python fornece uma "
"sintaxe especial chamada \"sintaxes de criação\" (em inglês, *displays*), "
"cada uma delas em dois tipos:"

#: ../../reference/expressions.rst:201
msgid "either the container contents are listed explicitly, or"
msgstr "o conteúdo do contêiner é listado explicitamente ou"

#: ../../reference/expressions.rst:203
msgid ""
"they are computed via a set of looping and filtering instructions, called a :"
"dfn:`comprehension`."
msgstr ""
"eles são calculados por meio de um conjunto de instruções de laço e "
"filtragem, chamado de :dfn:`compreensão`."

#: ../../reference/expressions.rst:211
msgid "Common syntax elements for comprehensions are:"
msgstr "Elementos de sintaxe comuns para compreensões são:"

#: ../../reference/expressions.rst:219
msgid ""
"The comprehension consists of a single expression followed by at least one :"
"keyword:`!for` clause and zero or more :keyword:`!for` or :keyword:`!if` "
"clauses. In this case, the elements of the new container are those that "
"would be produced by considering each of the :keyword:`!for` or :keyword:`!"
"if` clauses a block, nesting from left to right, and evaluating the "
"expression to produce an element each time the innermost block is reached."
msgstr ""
"A compreensão consiste em uma única expressão seguida por pelo menos uma "
"cláusula :keyword:`!for` e zero ou mais cláusulas :keyword:`!for` ou :"
"keyword:`!if`. Neste caso, os elementos do novo contêiner são aqueles que "
"seriam produzidos considerando cada uma das cláusulas :keyword:`!for` ou :"
"keyword:`!if` de um bloco, aninhando da esquerda para a direita, e avaliando "
"a expressão para produzir um elemento cada vez que o bloco mais interno é "
"alcançado."

#: ../../reference/expressions.rst:226
msgid ""
"However, aside from the iterable expression in the leftmost :keyword:`!for` "
"clause, the comprehension is executed in a separate implicitly nested scope. "
"This ensures that names assigned to in the target list don't \"leak\" into "
"the enclosing scope."
msgstr ""
"No entanto, além da expressão iterável na cláusula :keyword:`!for` mais à "
"esquerda, a compreensão é executada em um escopo aninhado implicitamente "
"separado. Isso garante que os nomes atribuídos na lista de destino não "
"\"vazem\" para o escopo delimitador."

#: ../../reference/expressions.rst:230
msgid ""
"The iterable expression in the leftmost :keyword:`!for` clause is evaluated "
"directly in the enclosing scope and then passed as an argument to the "
"implicitly nested scope. Subsequent :keyword:`!for` clauses and any filter "
"condition in the leftmost :keyword:`!for` clause cannot be evaluated in the "
"enclosing scope as they may depend on the values obtained from the leftmost "
"iterable. For example: ``[x*y for x in range(10) for y in range(x, x+10)]``."
msgstr ""
"A expressão iterável na cláusula :keyword:`!for` mais à esquerda é avaliada "
"diretamente no escopo envolvente e então passada como um argumento para o "
"escopo aninhado implicitamente. Cláusulas :keyword:`!for` subsequentes e "
"qualquer condição de filtro na cláusula :keyword:`!for` mais à esquerda não "
"podem ser avaliadas no escopo delimitador, pois podem depender dos valores "
"obtidos do iterável mais à esquerda. Por exemplo: ``[x*y for x in range(10) "
"for y in range(x, x+10)]``."

#: ../../reference/expressions.rst:237
msgid ""
"To ensure the comprehension always results in a container of the appropriate "
"type, ``yield`` and ``yield from`` expressions are prohibited in the "
"implicitly nested scope."
msgstr ""
"Para garantir que a compreensão sempre resulte em um contêiner do tipo "
"apropriado, as expressões ``yield`` e ``yield from`` são proibidas no escopo "
"aninhado implicitamente."

#: ../../reference/expressions.rst:244
msgid ""
"Since Python 3.6, in an :keyword:`async def` function, an :keyword:`!async "
"for` clause may be used to iterate over a :term:`asynchronous iterator`. A "
"comprehension in an :keyword:`!async def` function may consist of either a :"
"keyword:`!for` or :keyword:`!async for` clause following the leading "
"expression, may contain additional :keyword:`!for` or :keyword:`!async for` "
"clauses, and may also use :keyword:`await` expressions."
msgstr ""
"Desde o Python 3.6, em uma função :keyword:`async def`, uma cláusula :"
"keyword:`!async for` pode ser usada para iterar sobre um :term:`iterador "
"assíncrono`. Uma compreensão em uma função :keyword:`!async def` pode "
"consistir em uma cláusula :keyword:`!for` ou :keyword:`!async for` seguindo "
"a expressão inicial, pode conter :keyword:`!for` adicional ou :keyword:`!"
"async for` e também pode usar expressões :keyword:`await`."

#: ../../reference/expressions.rst:251
msgid ""
"If a comprehension contains :keyword:`!async for` clauses, or if it "
"contains :keyword:`!await` expressions or other asynchronous comprehensions "
"anywhere except the iterable expression in the leftmost :keyword:`!for` "
"clause, it is called an :dfn:`asynchronous comprehension`. An asynchronous "
"comprehension may suspend the execution of the coroutine function in which "
"it appears. See also :pep:`530`."
msgstr ""
"Se uma compreensão contém cláusulas :keyword:`!async for`, ou se contém "
"expressões :keyword:`!await` ou outras compreensões assíncronas em qualquer "
"lugar, exceto a expressão iterável na cláusula :keyword:`!for` mais à "
"esquerda, ela é chamada uma :dfn:`compreensão assíncrona`. Uma compreensão "
"assíncrona pode suspender a execução da função de corrotina em que aparece. "
"Veja também a :pep:`530`."

#: ../../reference/expressions.rst:258
msgid "Asynchronous comprehensions were introduced."
msgstr "Compreensões assíncronas foram introduzidas."

#: ../../reference/expressions.rst:261 ../../reference/expressions.rst:439
msgid "``yield`` and ``yield from`` prohibited in the implicitly nested scope."
msgstr "``yield`` e ``yield from`` proibidos no escopo aninhado implícito."

#: ../../reference/expressions.rst:264
msgid ""
"Asynchronous comprehensions are now allowed inside comprehensions in "
"asynchronous functions. Outer comprehensions implicitly become asynchronous."
msgstr ""
"Compreensões assíncronas agora são permitidas dentro de compreensões em "
"funções assíncronas. As compreensões externas tornam-se implicitamente "
"assíncronas."

#: ../../reference/expressions.rst:273
msgid "List displays"
msgstr "Sintaxes de criação de lista"

#: ../../reference/expressions.rst:283
msgid ""
"A list display is a possibly empty series of expressions enclosed in square "
"brackets:"
msgstr ""
"Uma sintaxe de criação de lista é uma série possivelmente vazia de "
"expressões entre colchetes:"

#: ../../reference/expressions.rst:289
msgid ""
"A list display yields a new list object, the contents being specified by "
"either a list of expressions or a comprehension.  When a comma-separated "
"list of expressions is supplied, its elements are evaluated from left to "
"right and placed into the list object in that order.  When a comprehension "
"is supplied, the list is constructed from the elements resulting from the "
"comprehension."
msgstr ""
"Uma sintaxe de criação de lista produz um novo objeto de lista, sendo o "
"conteúdo especificado por uma lista de expressões ou uma compreensão. Quando "
"uma lista de expressões separadas por vírgulas é fornecida, seus elementos "
"são avaliados da esquerda para a direita e colocados no objeto de lista "
"nessa ordem. Quando uma compreensão é fornecida, a lista é construída a "
"partir dos elementos resultantes da compreensão."

#: ../../reference/expressions.rst:299
msgid "Set displays"
msgstr "Sintaxes de criação de conjunto"

#: ../../reference/expressions.rst:308
msgid ""
"A set display is denoted by curly braces and distinguishable from dictionary "
"displays by the lack of colons separating keys and values:"
msgstr ""
"Uma sintaxe de criação definida é denotada por chaves e distinguível de "
"sintaxes de criação de dicionário pela falta de caractere de dois pontos "
"separando chaves e valores:"

#: ../../reference/expressions.rst:314
msgid ""
"A set display yields a new mutable set object, the contents being specified "
"by either a sequence of expressions or a comprehension.  When a comma-"
"separated list of expressions is supplied, its elements are evaluated from "
"left to right and added to the set object.  When a comprehension is "
"supplied, the set is constructed from the elements resulting from the "
"comprehension."
msgstr ""
"Uma sintaxe de criação de conjunto produz um novo objeto de conjunto "
"mutável, sendo o conteúdo especificado por uma sequência de expressões ou "
"uma compreensão. Quando uma lista de expressões separadas por vírgula é "
"fornecida, seus elementos são avaliados da esquerda para a direita e "
"adicionados ao objeto definido. Quando uma compreensão é fornecida, o "
"conjunto é construído a partir dos elementos resultantes da compreensão."

#: ../../reference/expressions.rst:320
msgid ""
"An empty set cannot be constructed with ``{}``; this literal constructs an "
"empty dictionary."
msgstr ""
"Um conjunto vazio não pode ser construído com ``{}``; este literal constrói "
"um dicionário vazio."

#: ../../reference/expressions.rst:327
msgid "Dictionary displays"
msgstr "Sintaxes de criação de dicionário"

#: ../../reference/expressions.rst:338
msgid ""
"A dictionary display is a possibly empty series of dict items (key/value "
"pairs) enclosed in curly braces:"
msgstr ""
"Uma sintaxe de criação de dicionário é uma série possivelmente vazia de "
"itens de dicionário (pares chave/valor) envolto entre chaves:"

#: ../../reference/expressions.rst:347
msgid "A dictionary display yields a new dictionary object."
msgstr "Uma sintaxe de criação de dicionário produz um novo objeto dicionário."

#: ../../reference/expressions.rst:349
msgid ""
"If a comma-separated sequence of dict items is given, they are evaluated "
"from left to right to define the entries of the dictionary: each key object "
"is used as a key into the dictionary to store the corresponding value.  This "
"means that you can specify the same key multiple times in the dict item "
"list, and the final dictionary's value for that key will be the last one "
"given."
msgstr ""
"Se for fornecida uma sequência separada por vírgulas de itens de dicionário, "
"eles são avaliados da esquerda para a direita para definir as entradas do "
"dicionário: cada objeto chave é usado como uma chave no dicionário para "
"armazenar o valor correspondente. Isso significa que você pode especificar a "
"mesma chave várias vezes na lista de itens de dicionário, e o valor final do "
"dicionário para essa chave será o último dado."

#: ../../reference/expressions.rst:359
msgid ""
"A double asterisk ``**`` denotes :dfn:`dictionary unpacking`. Its operand "
"must be a :term:`mapping`.  Each mapping item is added to the new "
"dictionary.  Later values replace values already set by earlier dict items "
"and earlier dictionary unpackings."
msgstr ""
"Um asterisco duplo ``**`` denota :dfn:`desempacotamento do dicionário`. Seu "
"operando deve ser um :term:`mapeamento`. Cada item de mapeamento é "
"adicionado ao novo dicionário. Os valores posteriores substituem os valores "
"já definidos por itens de dicionário anteriores e desempacotamentos de "
"dicionário anteriores."

#: ../../reference/expressions.rst:364
msgid "Unpacking into dictionary displays, originally proposed by :pep:`448`."
msgstr ""
"Desempacotando em sintaxes de criação de dicionário, originalmente proposto "
"pela :pep:`448`."

#: ../../reference/expressions.rst:367
msgid ""
"A dict comprehension, in contrast to list and set comprehensions, needs two "
"expressions separated with a colon followed by the usual \"for\" and \"if\" "
"clauses. When the comprehension is run, the resulting key and value elements "
"are inserted in the new dictionary in the order they are produced."
msgstr ""
"Uma compreensão de dict, em contraste com as compreensões de lista e "
"conjunto, precisa de duas expressões separadas por dois pontos, seguidas "
"pelas cláusulas usuais \"for\" e \"if\". Quando a compreensão é executada, "
"os elementos chave e valor resultantes são inseridos no novo dicionário na "
"ordem em que são produzidos."

#: ../../reference/expressions.rst:375
msgid ""
"Restrictions on the types of the key values are listed earlier in section :"
"ref:`types`.  (To summarize, the key type should be :term:`hashable`, which "
"excludes all mutable objects.)  Clashes between duplicate keys are not "
"detected; the last value (textually rightmost in the display) stored for a "
"given key value prevails."
msgstr ""
"Restrições nos tipos de valores de chave são listadas anteriormente na "
"seção :ref:`types`. (Para resumir, o tipo de chave deve ser :term:"
"`hasheável`, que exclui todos os objetos mutáveis.) Não são detectadas "
"colisões entre chaves duplicadas; o último valor (textualmente mais à "
"direita na sintaxe de criação) armazenado para um determinado valor de chave "
"prevalece."

#: ../../reference/expressions.rst:381
msgid ""
"Prior to Python 3.8, in dict comprehensions, the evaluation order of key and "
"value was not well-defined.  In CPython, the value was evaluated before the "
"key.  Starting with 3.8, the key is evaluated before the value, as proposed "
"by :pep:`572`."
msgstr ""
"Antes do Python 3.8, em compreensões de dict, a ordem de avaliação de chave "
"e valor não era bem definida. No CPython, o valor foi avaliado antes da "
"chave. A partir de 3.8, a chave é avaliada antes do valor, conforme proposto "
"pela :pep:`572`."

#: ../../reference/expressions.rst:391
msgid "Generator expressions"
msgstr "Expressões geradoras"

#: ../../reference/expressions.rst:398
msgid "A generator expression is a compact generator notation in parentheses:"
msgstr ""
"Uma expressão geradora é uma notação geradora compacta entre parênteses:"

#: ../../reference/expressions.rst:403
msgid ""
"A generator expression yields a new generator object.  Its syntax is the "
"same as for comprehensions, except that it is enclosed in parentheses "
"instead of brackets or curly braces."
msgstr ""
"Uma expressão geradora produz um novo objeto gerador. Sua sintaxe é a mesma "
"das compreensões, exceto pelo fato de estar entre parênteses em vez de "
"colchetes ou chaves."

#: ../../reference/expressions.rst:407
msgid ""
"Variables used in the generator expression are evaluated lazily when the :"
"meth:`~generator.__next__` method is called for the generator object (in the "
"same fashion as normal generators).  However, the iterable expression in the "
"leftmost :keyword:`!for` clause is immediately evaluated, so that an error "
"produced by it will be emitted at the point where the generator expression "
"is defined, rather than at the point where the first value is retrieved. "
"Subsequent :keyword:`!for` clauses and any filter condition in the leftmost :"
"keyword:`!for` clause cannot be evaluated in the enclosing scope as they may "
"depend on the values obtained from the leftmost iterable. For example: "
"``(x*y for x in range(10) for y in range(x, x+10))``."
msgstr ""
"As variáveis usadas na expressão geradora são avaliadas lentamente quando o "
"método :meth:`~generator.__next__` é chamado para o objeto gerador (da mesma "
"forma que os geradores normais). No entanto, a expressão iterável na "
"cláusula :keyword:`!for` mais à esquerda é avaliada imediatamente, de modo "
"que um erro produzido por ela será emitido no ponto em que a expressão do "
"gerador é definida, em vez de no ponto em que o primeiro valor é recuperado. "
"Cláusulas :keyword:`!for` subsequentes e qualquer condição de filtro na "
"cláusula :keyword:`!for` mais à esquerda não podem ser avaliadas no escopo "
"delimitador, pois podem depender dos valores obtidos do iterável mais à "
"esquerda. Por exemplo: ``(x*y for x in range(10) for y in range(x, x+10))``."

#: ../../reference/expressions.rst:418
msgid ""
"The parentheses can be omitted on calls with only one argument.  See "
"section :ref:`calls` for details."
msgstr ""
"Os parênteses podem ser omitidos em chamadas com apenas um argumento. Veja a "
"seção :ref:`calls` para detalhes."

#: ../../reference/expressions.rst:421
msgid ""
"To avoid interfering with the expected operation of the generator expression "
"itself, ``yield`` and ``yield from`` expressions are prohibited in the "
"implicitly defined generator."
msgstr ""
"Para evitar interferir com a operação esperada da própria expressão "
"geradora, as expressões ``yield`` e ``yield from`` são proibidas no gerador "
"definido implicitamente."

#: ../../reference/expressions.rst:425
msgid ""
"If a generator expression contains either :keyword:`!async for` clauses or :"
"keyword:`await` expressions it is called an :dfn:`asynchronous generator "
"expression`.  An asynchronous generator expression returns a new "
"asynchronous generator object, which is an asynchronous iterator (see :ref:"
"`async-iterators`)."
msgstr ""
"Se uma expressão geradora contém cláusulas :keyword:`!async for` ou "
"expressões :keyword:`await`, ela é chamada de :dfn:`expressão geradora "
"assíncrona`. Uma expressão geradora assíncrona retorna um novo objeto "
"gerador assíncrono, que é um iterador assíncrono (consulte :ref:`async-"
"iterators`)."

#: ../../reference/expressions.rst:431
msgid "Asynchronous generator expressions were introduced."
msgstr "Expressões geradoras assíncronas foram introduzidas."

#: ../../reference/expressions.rst:434
msgid ""
"Prior to Python 3.7, asynchronous generator expressions could only appear "
"in :keyword:`async def` coroutines.  Starting with 3.7, any function can use "
"asynchronous generator expressions."
msgstr ""
"Antes do Python 3.7, as expressões geradoras assíncronas só podiam aparecer "
"em corrotinas :keyword:`async def`. A partir da versão 3.7, qualquer função "
"pode usar expressões geradoras assíncronas."

#: ../../reference/expressions.rst:446
msgid "Yield expressions"
msgstr "Expressões yield"

#: ../../reference/expressions.rst:459
msgid ""
"The yield expression is used when defining a :term:`generator` function or "
"an :term:`asynchronous generator` function and thus can only be used in the "
"body of a function definition.  Using a yield expression in a function's "
"body causes that function to be a generator function, and using it in an :"
"keyword:`async def` function's body causes that coroutine function to be an "
"asynchronous generator function. For example::"
msgstr ""
"A expressão yield é usada ao definir uma função :term:`generadora <gerador>` "
"ou uma função :term:`geradora assíncrona <gerador assíncrono>` e, portanto, "
"só pode ser usada no corpo de uma definição de função. Usar uma expressão "
"yield no corpo de uma função faz com que essa função seja uma função "
"geradora, e usá-la no corpo de uma função :keyword:`async def` faz com que "
"essa função de corrotina seja uma função geradora assíncrona. Por exemplo::"

#: ../../reference/expressions.rst:466
msgid ""
"def gen():  # defines a generator function\n"
"    yield 123\n"
"\n"
"async def agen(): # defines an asynchronous generator function\n"
"    yield 123"
msgstr ""

#: ../../reference/expressions.rst:472
msgid ""
"Due to their side effects on the containing scope, ``yield`` expressions are "
"not permitted as part of the implicitly defined scopes used to implement "
"comprehensions and generator expressions."
msgstr ""
"Devido a seus efeitos colaterais no escopo recipiente, as expressões "
"``yield`` não são permitidas como parte dos escopos definidos implicitamente "
"usados para implementar compreensões e expressões geradoras."

#: ../../reference/expressions.rst:476
msgid ""
"Yield expressions prohibited in the implicitly nested scopes used to "
"implement comprehensions and generator expressions."
msgstr ""
"Expressões yield proibidas nos escopos aninhados implicitamente usados para "
"implementar compreensões e expressões geradoras."

#: ../../reference/expressions.rst:480
msgid ""
"Generator functions are described below, while asynchronous generator "
"functions are described separately in section :ref:`asynchronous-generator-"
"functions`."
msgstr ""
"As funções geradoras são descritas abaixo, enquanto as funções geradoras "
"assíncronas são descritas separadamente na seção :ref:`asynchronous-"
"generator-functions`"

#: ../../reference/expressions.rst:484
msgid ""
"When a generator function is called, it returns an iterator known as a "
"generator.  That generator then controls the execution of the generator "
"function.  The execution starts when one of the generator's methods is "
"called. At that time, the execution proceeds to the first yield expression, "
"where it is suspended again, returning the value of :token:`~python-grammar:"
"yield_list` to the generator's caller, or ``None`` if :token:`~python-"
"grammar:yield_list` is omitted. By suspended, we mean that all local state "
"is retained, including the current bindings of local variables, the "
"instruction pointer, the internal evaluation stack, and the state of any "
"exception handling. When the execution is resumed by calling one of the "
"generator's methods, the function can proceed exactly as if the yield "
"expression were just another external call.  The value of the yield "
"expression after resuming depends on the method which resumed the "
"execution.  If :meth:`~generator.__next__` is used (typically via either a :"
"keyword:`for` or the :func:`next` builtin) then the result is :const:"
"`None`.  Otherwise, if :meth:`~generator.send` is used, then the result will "
"be the value passed in to that method."
msgstr ""

#: ../../reference/expressions.rst:504
msgid ""
"All of this makes generator functions quite similar to coroutines; they "
"yield multiple times, they have more than one entry point and their "
"execution can be suspended.  The only difference is that a generator "
"function cannot control where the execution should continue after it yields; "
"the control is always transferred to the generator's caller."
msgstr ""
"Tudo isso torna as funções geradoras bastante semelhantes às corrotinas; "
"cedem múltiplas vezes, possuem mais de um ponto de entrada e sua execução "
"pode ser suspensa. A única diferença é que uma função geradora não pode "
"controlar onde a execução deve continuar após o seu rendimento; o controle é "
"sempre transferido para o chamador do gerador."

#: ../../reference/expressions.rst:510
msgid ""
"Yield expressions are allowed anywhere in a :keyword:`try` construct.  If "
"the generator is not resumed before it is finalized (by reaching a zero "
"reference count or by being garbage collected), the generator-iterator's :"
"meth:`~generator.close` method will be called, allowing any pending :keyword:"
"`finally` clauses to execute."
msgstr ""
"Expressões yield são permitidas em qualquer lugar em uma construção :keyword:"
"`try`. Se o gerador não for retomado antes de ser finalizado (ao atingir uma "
"contagem de referências zero ou ao ser coletado como lixo), o método :meth:"
"`~generator.close` do iterador de gerador será chamado, permitindo que "
"quaisquer cláusulas :keyword:`finally` pendentes sejam executadas."

#: ../../reference/expressions.rst:519
msgid ""
"When ``yield from <expr>`` is used, the supplied expression must be an "
"iterable. The values produced by iterating that iterable are passed directly "
"to the caller of the current generator's methods. Any values passed in with :"
"meth:`~generator.send` and any exceptions passed in with :meth:`~generator."
"throw` are passed to the underlying iterator if it has the appropriate "
"methods.  If this is not the case, then :meth:`~generator.send` will raise :"
"exc:`AttributeError` or :exc:`TypeError`, while :meth:`~generator.throw` "
"will just raise the passed in exception immediately."
msgstr ""
"Quando ``yield from <expr>`` é usado, a expressão fornecida deve ser "
"iterável. Os valores produzidos pela iteração desse iterável são passados "
"diretamente para o chamador dos métodos do gerador atual. Quaisquer valores "
"passados com :meth:`~generator.send` e quaisquer exceções passadas com :meth:"
"`~generator.throw` são passados para o iterador subjacente se ele tiver os "
"métodos apropriados. Se este não for o caso, então :meth:`~generator.send` "
"irá levantar :exc:`AttributeError` ou :exc:`TypeError`, enquanto :meth:"
"`~generator.throw` irá apenas levantar a exceção passada imediatamente."

#: ../../reference/expressions.rst:528
msgid ""
"When the underlying iterator is complete, the :attr:`~StopIteration.value` "
"attribute of the raised :exc:`StopIteration` instance becomes the value of "
"the yield expression. It can be either set explicitly when raising :exc:"
"`StopIteration`, or automatically when the subiterator is a generator (by "
"returning a value from the subgenerator)."
msgstr ""
"Quando o iterador subjacente estiver completo, o atributo :attr:"
"`~StopIteration.value` da instância :exc:`StopIteration` gerada torna-se o "
"valor da expressão yield. Ele pode ser definido explicitamente ao levantar :"
"exc:`StopIteration` ou automaticamente quando o subiterador é um gerador "
"(retornando um valor do subgerador)."

#: ../../reference/expressions.rst:534
msgid "Added ``yield from <expr>`` to delegate control flow to a subiterator."
msgstr ""
"Adicionado ``yield from <expr>`` para delegar o fluxo de controle a um "
"subiterador."

#: ../../reference/expressions.rst:537
msgid ""
"The parentheses may be omitted when the yield expression is the sole "
"expression on the right hand side of an assignment statement."
msgstr ""
"Os parênteses podem ser omitidos quando a expressão yield é a única "
"expressão no lado direito de uma instrução de atribuição."

#: ../../reference/expressions.rst:542
msgid ":pep:`255` - Simple Generators"
msgstr ":pep:`255` - Geradores simples"

#: ../../reference/expressions.rst:543
msgid ""
"The proposal for adding generators and the :keyword:`yield` statement to "
"Python."
msgstr ""
"A proposta para adicionar geradores e a instrução :keyword:`yield` ao Python."

#: ../../reference/expressions.rst:545
msgid ":pep:`342` - Coroutines via Enhanced Generators"
msgstr ":pep:`342` - Corrotinas via Geradores Aprimorados"

#: ../../reference/expressions.rst:546
msgid ""
"The proposal to enhance the API and syntax of generators, making them usable "
"as simple coroutines."
msgstr ""
"A proposta de aprimorar a API e a sintaxe dos geradores, tornando-os "
"utilizáveis como simples corrotinas."

#: ../../reference/expressions.rst:549
msgid ":pep:`380` - Syntax for Delegating to a Subgenerator"
msgstr ":pep:`380` - Sintaxe para Delegar a um Subgerador"

#: ../../reference/expressions.rst:550
msgid ""
"The proposal to introduce the :token:`~python-grammar:yield_from` syntax, "
"making delegation to subgenerators easy."
msgstr ""
"A proposta de introduzir a sintaxe :token:`~python-grammar:yield_from`, "
"facilitando a delegação a subgeradores."

#: ../../reference/expressions.rst:553
msgid ":pep:`525` - Asynchronous Generators"
msgstr ":pep:`525` - Geradores assíncronos"

#: ../../reference/expressions.rst:554
msgid ""
"The proposal that expanded on :pep:`492` by adding generator capabilities to "
"coroutine functions."
msgstr ""
"A proposta que se expandiu em :pep:`492` adicionando recursos de gerador a "
"funções de corrotina."

#: ../../reference/expressions.rst:561
msgid "Generator-iterator methods"
msgstr "Métodos de iterador gerador"

#: ../../reference/expressions.rst:563
msgid ""
"This subsection describes the methods of a generator iterator.  They can be "
"used to control the execution of a generator function."
msgstr ""
"Esta subseção descreve os métodos de um iterador gerador. Eles podem ser "
"usados para controlar a execução de uma função geradora."

#: ../../reference/expressions.rst:566
msgid ""
"Note that calling any of the generator methods below when the generator is "
"already executing raises a :exc:`ValueError` exception."
msgstr ""
"Observe que chamar qualquer um dos métodos do gerador abaixo quando o "
"gerador já estiver em execução levanta uma exceção :exc:`ValueError`."

#: ../../reference/expressions.rst:574
msgid ""
"Starts the execution of a generator function or resumes it at the last "
"executed yield expression.  When a generator function is resumed with a :"
"meth:`~generator.__next__` method, the current yield expression always "
"evaluates to :const:`None`.  The execution then continues to the next yield "
"expression, where the generator is suspended again, and the value of the :"
"token:`~python-grammar:yield_list` is returned to :meth:`__next__`'s "
"caller.  If the generator exits without yielding another value, a :exc:"
"`StopIteration` exception is raised."
msgstr ""

#: ../../reference/expressions.rst:583
msgid ""
"This method is normally called implicitly, e.g. by a :keyword:`for` loop, or "
"by the built-in :func:`next` function."
msgstr ""
"Este método é normalmente chamado implicitamente, por exemplo por um laço :"
"keyword:`for`, ou pela função embutida :func:`next`."

#: ../../reference/expressions.rst:589
msgid ""
"Resumes the execution and \"sends\" a value into the generator function.  "
"The *value* argument becomes the result of the current yield expression.  "
"The :meth:`send` method returns the next value yielded by the generator, or "
"raises :exc:`StopIteration` if the generator exits without yielding another "
"value.  When :meth:`send` is called to start the generator, it must be "
"called with :const:`None` as the argument, because there is no yield "
"expression that could receive the value."
msgstr ""
"Retoma a execução e \"envia\" um valor para a função geradora. O argumento "
"*value* torna-se o resultado da expressão yield atual. O método :meth:`send` "
"retorna o próximo valor gerado pelo gerador, ou levanta :exc:`StopIteration` "
"se o gerador sair sem produzir outro valor. Quando :meth:`send` é chamado "
"para iniciar o gerador, ele deve ser chamado com :const:`None` como "
"argumento, porque não há nenhuma expressão yield que possa receber o valor."

#: ../../reference/expressions.rst:601
msgid ""
"Raises an exception at the point where the generator was paused, and returns "
"the next value yielded by the generator function.  If the generator exits "
"without yielding another value, a :exc:`StopIteration` exception is raised.  "
"If the generator function does not catch the passed-in exception, or raises "
"a different exception, then that exception propagates to the caller."
msgstr ""
"Levanta uma exceção no ponto em que o gerador foi pausado e retorna o "
"próximo valor gerado pela função geradora. Se o gerador sair sem gerar outro "
"valor, uma exceção :exc:`StopIteration` será levantada. Se a função geradora "
"não detectar a exceção passada ou levanta uma exceção diferente, essa "
"exceção se propagará para o chamador."

#: ../../reference/expressions.rst:607
msgid ""
"In typical use, this is called with a single exception instance similar to "
"the way the :keyword:`raise` keyword is used."
msgstr ""
"Em uso típico, isso é chamado com uma única instância de exceção semelhante "
"à forma como a palavra reservada :keyword:`raise` é usada."

#: ../../reference/expressions.rst:610
msgid ""
"For backwards compatibility, however, the second signature is supported, "
"following a convention from older versions of Python. The *type* argument "
"should be an exception class, and *value* should be an exception instance. "
"If the *value* is not provided, the *type* constructor is called to get an "
"instance. If *traceback* is provided, it is set on the exception, otherwise "
"any existing :attr:`~BaseException.__traceback__` attribute stored in "
"*value* may be cleared."
msgstr ""
"Para compatibilidade com versões anteriores, no entanto, a segunda "
"assinatura é suportada, seguindo uma convenção de versões mais antigas do "
"Python. O argumento *type* deve ser uma classe de exceção e *value* deve ser "
"uma instância de exceção. Se o *valor* não for fornecido, o construtor "
"*tipo* será chamado para obter uma instância. Se *traceback* for fornecido, "
"ele será definido na exceção, caso contrário, qualquer atributo :attr:"
"`~BaseException.__traceback__` existente armazenado em *value* poderá ser "
"limpo."

#: ../../reference/expressions.rst:621 ../../reference/expressions.rst:802
msgid ""
"The second signature \\(type\\[, value\\[, traceback\\]\\]\\) is deprecated "
"and may be removed in a future version of Python."
msgstr ""
"A segunda assinatura \\(tipo\\[, valor\\[, traceback\\]\\]\\) foi "
"descontinuada e pode ser removida em uma versão futura do Python."

#: ../../reference/expressions.rst:629
msgid ""
"Raises a :exc:`GeneratorExit` at the point where the generator function was "
"paused.  If the generator function catches the exception and returns a "
"value, this value is returned from :meth:`close`.  If the generator function "
"is already closed, or raises :exc:`GeneratorExit` (by not catching the "
"exception), :meth:`close` returns :const:`None`.  If the generator yields a "
"value, a :exc:`RuntimeError` is raised.  If the generator raises any other "
"exception, it is propagated to the caller.  If the generator has already "
"exited due to an exception or normal exit, :meth:`close` returns :const:"
"`None` and has no other effect."
msgstr ""
"Levanta :exc:`GeneratorExit` no ponto onde a função geradora foi pausada. Se "
"a função geradora captura a exceção, e retorna um valor, este valor é "
"retornado de :meth:`close`. Se a função geradora já estiver fechada ou "
"levantar :exc:`GeneratorExit` (por não capturar a exceção), :meth:`close` "
"retornará :const:`None`. Se o gerador produzir um valor, uma exceção :exc:"
"`RuntimeError` é levantada. Se o gerador levantar qualquer outra exceção, "
"ela será propagada para o chamador. Se o gerador já saiu devido a uma "
"exceção ou saída normal, :meth:`close` retorna :const:`None` e tem nenhum "
"outro efeito."

#: ../../reference/expressions.rst:641
msgid ""
"If a generator returns a value upon being closed, the value is returned by :"
"meth:`close`."
msgstr ""
"Se um gerador retornar um valor ao ser fechado, o valor será retornado por :"
"meth:`close`."

#: ../../reference/expressions.rst:647
msgid "Examples"
msgstr "Exemplos"

#: ../../reference/expressions.rst:649
msgid ""
"Here is a simple example that demonstrates the behavior of generators and "
"generator functions::"
msgstr ""
"Aqui está um exemplo simples que demonstra o comportamento de geradores e "
"funções geradoras::"

#: ../../reference/expressions.rst:652
msgid ""
">>> def echo(value=None):\n"
"...     print(\"Execution starts when 'next()' is called for the first time."
"\")\n"
"...     try:\n"
"...         while True:\n"
"...             try:\n"
"...                 value = (yield value)\n"
"...             except Exception as e:\n"
"...                 value = e\n"
"...     finally:\n"
"...         print(\"Don't forget to clean up when 'close()' is called.\")\n"
"...\n"
">>> generator = echo(1)\n"
">>> print(next(generator))\n"
"Execution starts when 'next()' is called for the first time.\n"
"1\n"
">>> print(next(generator))\n"
"None\n"
">>> print(generator.send(2))\n"
"2\n"
">>> generator.throw(TypeError, \"spam\")\n"
"TypeError('spam',)\n"
">>> generator.close()\n"
"Don't forget to clean up when 'close()' is called."
msgstr ""

#: ../../reference/expressions.rst:676
msgid ""
"For examples using ``yield from``, see :ref:`pep-380` in \"What's New in "
"Python.\""
msgstr ""
"Para exemplos usando ``yield from``, consulte a :ref:`pep-380` em \"O que há "
"de novo no Python.\""

#: ../../reference/expressions.rst:682
msgid "Asynchronous generator functions"
msgstr "Funções geradoras assíncronas"

#: ../../reference/expressions.rst:684
msgid ""
"The presence of a yield expression in a function or method defined using :"
"keyword:`async def` further defines the function as an :term:`asynchronous "
"generator` function."
msgstr ""
"A presença de uma expressão yield em uma função ou método definido usando a :"
"keyword:`async def` define ainda mais a função como uma função :term:"
"`geradora assíncrona <gerador assíncrono>`."

#: ../../reference/expressions.rst:688
msgid ""
"When an asynchronous generator function is called, it returns an "
"asynchronous iterator known as an asynchronous generator object. That object "
"then controls the execution of the generator function. An asynchronous "
"generator object is typically used in an :keyword:`async for` statement in a "
"coroutine function analogously to how a generator object would be used in a :"
"keyword:`for` statement."
msgstr ""
"Quando uma função geradora assíncrona é chamada, ela retorna um iterador "
"assíncrono conhecido como objeto gerador assíncrono. Esse objeto controla a "
"execução da função geradora. Um objeto gerador assíncrono é normalmente "
"usado em uma instrução :keyword:`async for` em uma função de corrotina de "
"forma análoga a como um objeto gerador seria usado em uma instrução :keyword:"
"`for`."

#: ../../reference/expressions.rst:695
msgid ""
"Calling one of the asynchronous generator's methods returns an :term:"
"`awaitable` object, and the execution starts when this object is awaited on. "
"At that time, the execution proceeds to the first yield expression, where it "
"is suspended again, returning the value of :token:`~python-grammar:"
"yield_list` to the awaiting coroutine. As with a generator, suspension means "
"that all local state is retained, including the current bindings of local "
"variables, the instruction pointer, the internal evaluation stack, and the "
"state of any exception handling. When the execution is resumed by awaiting "
"on the next object returned by the asynchronous generator's methods, the "
"function can proceed exactly as if the yield expression were just another "
"external call. The value of the yield expression after resuming depends on "
"the method which resumed the execution.  If :meth:`~agen.__anext__` is used "
"then the result is :const:`None`. Otherwise, if :meth:`~agen.asend` is used, "
"then the result will be the value passed in to that method."
msgstr ""

#: ../../reference/expressions.rst:710
msgid ""
"If an asynchronous generator happens to exit early by :keyword:`break`, the "
"caller task being cancelled, or other exceptions, the generator's async "
"cleanup code will run and possibly raise exceptions or access context "
"variables in an unexpected context--perhaps after the lifetime of tasks it "
"depends, or during the event loop shutdown when the async-generator garbage "
"collection hook is called. To prevent this, the caller must explicitly close "
"the async generator by calling :meth:`~agen.aclose` method to finalize the "
"generator and ultimately detach it from the event loop."
msgstr ""
"Se um gerador assíncrono encerrar mais cedo por :keyword:`break`, pela "
"tarefa que fez sua chamada ser cancelada ou por outras exceções, o código de "
"limpeza assíncrona do gerador será executado e possivelmente levantará "
"alguma exceção ou acessará as variáveis de contexto em um contexto "
"inesperado -- talvez após o tempo de vida das tarefas das quais ele depende, "
"ou durante o laço de eventos de encerramento quando o gancho de coleta de "
"lixo do gerador assíncrono for chamado. Para prevenir isso, o chamador deve "
"encerrar explicitamente o gerador assíncrono chamando o método :meth:`~agen."
"aclose` para finalizar o gerador e, por fim, desconectá-lo do laço de "
"eventos."

#: ../../reference/expressions.rst:720
msgid ""
"In an asynchronous generator function, yield expressions are allowed "
"anywhere in a :keyword:`try` construct. However, if an asynchronous "
"generator is not resumed before it is finalized (by reaching a zero "
"reference count or by being garbage collected), then a yield expression "
"within a :keyword:`!try` construct could result in a failure to execute "
"pending :keyword:`finally` clauses.  In this case, it is the responsibility "
"of the event loop or scheduler running the asynchronous generator to call "
"the asynchronous generator-iterator's :meth:`~agen.aclose` method and run "
"the resulting coroutine object, thus allowing any pending :keyword:`!"
"finally` clauses to execute."
msgstr ""
"Em uma função geradora assíncrona, expressões de yield são permitidas em "
"qualquer lugar em uma construção :keyword:`try`. No entanto, se um gerador "
"assíncrono não for retomado antes de ser finalizado (alcançando uma contagem "
"de referência zero ou sendo coletado pelo coletor de lixo), então uma "
"expressão de yield dentro de um construção :keyword:`!try` pode resultar em "
"uma falha na execução das cláusulas pendentes de :keyword:`finally`. Nesse "
"caso, é responsabilidade do laço de eventos ou escalonador que executa o "
"gerador assíncrono chamar o método :meth:`~agen.aclose` do gerador iterador "
"assíncrono e executar o objeto corrotina resultante, permitindo assim que "
"quaisquer cláusulas pendentes de :keyword:`!finally` sejam executadas."

#: ../../reference/expressions.rst:731
msgid ""
"To take care of finalization upon event loop termination, an event loop "
"should define a *finalizer* function which takes an asynchronous generator-"
"iterator and presumably calls :meth:`~agen.aclose` and executes the "
"coroutine. This  *finalizer* may be registered by calling :func:`sys."
"set_asyncgen_hooks`. When first iterated over, an asynchronous generator-"
"iterator will store the registered *finalizer* to be called upon "
"finalization. For a reference example of a *finalizer* method see the "
"implementation of ``asyncio.Loop.shutdown_asyncgens`` in :source:`Lib/"
"asyncio/base_events.py`."
msgstr ""
"Para cuidar da finalização após o término do laço de eventos, um laço de "
"eventos deve definir uma função *finalizer* que recebe um gerador assíncrono "
"e provavelmente chama :meth:`~agen.aclose` e executa a corrotina. Este "
"*finalizer* pode ser registrado chamando :func:`sys.set_asyncgen_hooks`. "
"Quando iterado pela primeira vez, um gerador assíncrono armazenará o "
"*finalizer* registrado para ser chamado na finalização. Para um exemplo de "
"referência de um método *finalizer*, consulte a implementação de ``asyncio."
"Loop.shutdown_asyncgens`` em :source:`Lib/asyncio/base_events.py`."

#: ../../reference/expressions.rst:740
msgid ""
"The expression ``yield from <expr>`` is a syntax error when used in an "
"asynchronous generator function."
msgstr ""
"O expressão ``yield from <expr>`` é um erro de sintaxe quando usado em uma "
"função geradora assíncrona."

#: ../../reference/expressions.rst:747
msgid "Asynchronous generator-iterator methods"
msgstr "Métodos geradores-iteradores assíncronos"

#: ../../reference/expressions.rst:749
msgid ""
"This subsection describes the methods of an asynchronous generator iterator, "
"which are used to control the execution of a generator function."
msgstr ""
"Esta subseção descreve os métodos de um iterador gerador assíncrono, que são "
"usados para controlar a execução de uma função geradora."

#: ../../reference/expressions.rst:757
msgid ""
"Returns an awaitable which when run starts to execute the asynchronous "
"generator or resumes it at the last executed yield expression.  When an "
"asynchronous generator function is resumed with an :meth:`~agen.__anext__` "
"method, the current yield expression always evaluates to :const:`None` in "
"the returned awaitable, which when run will continue to the next yield "
"expression. The value of the :token:`~python-grammar:yield_list` of the "
"yield expression is the value of the :exc:`StopIteration` exception raised "
"by the completing coroutine.  If the asynchronous generator exits without "
"yielding another value, the awaitable instead raises a :exc:"
"`StopAsyncIteration` exception, signalling that the asynchronous iteration "
"has completed."
msgstr ""

#: ../../reference/expressions.rst:769
msgid ""
"This method is normally called implicitly by a :keyword:`async for` loop."
msgstr ""
"Este método é normalmente chamado implicitamente por um laço :keyword:`async "
"for`."

#: ../../reference/expressions.rst:774
msgid ""
"Returns an awaitable which when run resumes the execution of the "
"asynchronous generator. As with the :meth:`~generator.send` method for a "
"generator, this \"sends\" a value into the asynchronous generator function, "
"and the *value* argument becomes the result of the current yield expression. "
"The awaitable returned by the :meth:`asend` method will return the next "
"value yielded by the generator as the value of the raised :exc:"
"`StopIteration`, or raises :exc:`StopAsyncIteration` if the asynchronous "
"generator exits without yielding another value.  When :meth:`asend` is "
"called to start the asynchronous generator, it must be called with :const:"
"`None` as the argument, because there is no yield expression that could "
"receive the value."
msgstr ""

#: ../../reference/expressions.rst:790
msgid ""
"Returns an awaitable that raises an exception of type ``type`` at the point "
"where the asynchronous generator was paused, and returns the next value "
"yielded by the generator function as the value of the raised :exc:"
"`StopIteration` exception.  If the asynchronous generator exits without "
"yielding another value, a :exc:`StopAsyncIteration` exception is raised by "
"the awaitable. If the generator function does not catch the passed-in "
"exception, or raises a different exception, then when the awaitable is run "
"that exception propagates to the caller of the awaitable."
msgstr ""
"Retorna um objeto aguardável que gera uma exceção do tipo ``type`` no ponto "
"em que o gerador assíncrono foi pausado, e retorna o próximo valor produzido "
"pela função geradora como o valor da exceção :exc:`StopIteration` levantada. "
"Se o gerador assíncrono terminar sem produzir outro valor, uma exceção :exc:"
"`StopAsyncIteration` é levantada pelo objeto aguardável. Se a função "
"geradora não capturar a exceção passada ou gerar uma exceção diferente, "
"então quando o objeto aguardável for executado, essa exceção se propagará "
"para o chamador do objeto aguardável."

#: ../../reference/expressions.rst:810
msgid ""
"Returns an awaitable that when run will throw a :exc:`GeneratorExit` into "
"the asynchronous generator function at the point where it was paused. If the "
"asynchronous generator function then exits gracefully, is already closed, or "
"raises :exc:`GeneratorExit` (by not catching the exception), then the "
"returned awaitable will raise a :exc:`StopIteration` exception. Any further "
"awaitables returned by subsequent calls to the asynchronous generator will "
"raise a :exc:`StopAsyncIteration` exception.  If the asynchronous generator "
"yields a value, a :exc:`RuntimeError` is raised by the awaitable.  If the "
"asynchronous generator raises any other exception, it is propagated to the "
"caller of the awaitable.  If the asynchronous generator has already exited "
"due to an exception or normal exit, then further calls to :meth:`aclose` "
"will return an awaitable that does nothing."
msgstr ""
"Retorna um objeto aguardável que, quando executado, levantará uma :exc:"
"`GeneratorExit` na função geradora assíncrona no ponto em que foi pausada. "
"Se a função geradora assíncrona sair de forma normal, se estiver já estiver "
"fechada ou levantar :exc:`GeneratorExit` (não capturando a exceção), então o "
"objeto aguardável retornado levantará uma exceção :exc:`StopIteration`. "
"Quaisquer outros objetos aguardáveis retornados por chamadas subsequentes à "
"função geradora assíncrona levantarão uma exceção :exc:`StopAsyncIteration`. "
"Se a função geradora assíncrona levantar um valor, um :exc:`RuntimeError` "
"será lançado pelo objeto aguardável. Se a função geradora assíncrona "
"levantar qualquer outra exceção, ela será propagada para o chamador do "
"objeto aguardável. Se a função geradora assíncrona já tiver saído devido a "
"uma exceção ou saída normal, então chamadas posteriores ao método :meth:"
"`aclose` retornarão um objeto aguardável que não faz nada."

#: ../../reference/expressions.rst:826
msgid "Primaries"
msgstr "Primárias"

#: ../../reference/expressions.rst:830
msgid ""
"Primaries represent the most tightly bound operations of the language. Their "
"syntax is:"
msgstr ""
"Primárias representam as operações mais fortemente vinculadas da linguagem. "
"Sua sintaxe é:"

#: ../../reference/expressions.rst:840
msgid "Attribute references"
msgstr "Referências de atributo"

#: ../../reference/expressions.rst:846
msgid "An attribute reference is a primary followed by a period and a name:"
msgstr ""
"Uma referência de atributo é um primário seguido de um ponto e um nome."

#: ../../reference/expressions.rst:856
msgid ""
"The primary must evaluate to an object of a type that supports attribute "
"references, which most objects do.  This object is then asked to produce the "
"attribute whose name is the identifier. The type and value produced is "
"determined by the object.  Multiple evaluations of the same attribute "
"reference may yield different objects."
msgstr ""
"A primária deve avaliar para um objeto de um tipo que tem suporte a "
"referências de atributo, o que a maioria dos objetos faz. Este objeto é "
"então solicitado a produzir o atributo cujo nome é o identificador. O tipo e "
"o valor produzido são determinados pelo objeto. Várias avaliações da mesma "
"referência de atributo podem produzir diferentes objetos."

#: ../../reference/expressions.rst:862
msgid ""
"This production can be customized by overriding the :meth:`~object."
"__getattribute__` method or the :meth:`~object.__getattr__` method.  The :"
"meth:`!__getattribute__` method is called first and either returns a value "
"or raises :exc:`AttributeError` if the attribute is not available."
msgstr ""
"Esta produção pode ser personalizada substituindo o método :meth:`~object."
"__getattribute__` ou o método :meth:`~object.__getattr__`. O método :meth:`!"
"__getattribute__` é chamado primeiro e retorna um valor ou levanta uma :exc:"
"`AttributeError` se o atributo não estiver disponível."

#: ../../reference/expressions.rst:868
msgid ""
"If an :exc:`AttributeError` is raised and the object has a :meth:`!"
"__getattr__` method, that method is called as a fallback."
msgstr ""
"Se for levantada uma :exc:`AttributeError` e o objeto tiver um método :meth:"
"`!__getattr__`, esse método será chamado como alternativa."

#: ../../reference/expressions.rst:874
msgid "Subscriptions"
msgstr "Subscrições"

#: ../../reference/expressions.rst:889
msgid ""
"The subscription of an instance of a :ref:`container class <sequence-types>` "
"will generally select an element from the container. The subscription of a :"
"term:`generic class <generic type>` will generally return a :ref:"
"`GenericAlias <types-genericalias>` object."
msgstr ""
"A subscrição de uma instância de uma classe de :ref:`classe de contêiner "
"<sequence-types>` geralmente selecionará um elemento do contêiner. A "
"subscrição de uma :term:`classe genérica <generic type>` geralmente "
"retornará um objeto :ref:`GenericAlias <types-genericalias>`."

#: ../../reference/expressions.rst:897
msgid ""
"When an object is subscripted, the interpreter will evaluate the primary and "
"the expression list."
msgstr ""
"Quando um objeto é subscrito, o interpretador avaliará o primário e a lista "
"de expressões."

#: ../../reference/expressions.rst:900
msgid ""
"The primary must evaluate to an object that supports subscription. An object "
"may support subscription through defining one or both of :meth:`~object."
"__getitem__` and :meth:`~object.__class_getitem__`. When the primary is "
"subscripted, the evaluated result of the expression list will be passed to "
"one of these methods. For more details on when ``__class_getitem__`` is "
"called instead of ``__getitem__``, see :ref:`classgetitem-versus-getitem`."
msgstr ""
"O primário deve ser avaliado como um objeto que dê suporte à subscrição. Um "
"objeto pode prover suporte a subscrição através da definição de um ou ambos :"
"meth:`~object.__getitem__` e :meth:`~object.__class_getitem__`. Quando o "
"primário é subscrito, o resultado avaliado da lista de expressões será "
"passado para um desses métodos. Para mais detalhes sobre quando "
"``__class_getitem__`` é chamado em vez de ``__getitem__``, veja :ref:"
"`classgetitem-versus-getitem`."

#: ../../reference/expressions.rst:907
msgid ""
"If the expression list contains at least one comma, or if any of the "
"expressions are starred, the expression list will evaluate to a :class:"
"`tuple` containing the items of the expression list. Otherwise, the "
"expression list will evaluate to the value of the list's sole member."
msgstr ""

#: ../../reference/expressions.rst:912
msgid "Expressions in an expression list may be starred. See :pep:`646`."
msgstr ""

#: ../../reference/expressions.rst:915
msgid ""
"For built-in objects, there are two types of objects that support "
"subscription via :meth:`~object.__getitem__`:"
msgstr ""
"Para objetos embutido, existem dois tipos de objetos que oferecem suporte a "
"subscrição via :meth:`~object.__getitem__`:"

#: ../../reference/expressions.rst:918
msgid ""
"Mappings. If the primary is a :term:`mapping`, the expression list must "
"evaluate to an object whose value is one of the keys of the mapping, and the "
"subscription selects the value in the mapping that corresponds to that key. "
"An example of a builtin mapping class is the :class:`dict` class."
msgstr ""
"Mapeamentos. Se o primário for um :term:`mapeamento`, a lista de expressões "
"deve ser avaliada como um objeto cujo valor é uma das chaves do mapeamento, "
"e a subscrição seleciona o valor no mapeamento que corresponde a essa chave. "
"Um exemplo de classe de mapeamento integrada é a classe :class:`dict`."

#: ../../reference/expressions.rst:922
msgid ""
"Sequences. If the primary is a :term:`sequence`, the expression list must "
"evaluate to an :class:`int` or a :class:`slice` (as discussed in the "
"following section). Examples of builtin sequence classes include the :class:"
"`str`, :class:`list` and :class:`tuple` classes."
msgstr ""
"Sequências. Se o primário for uma :term:`sequência`, a lista de expressões "
"deve ser avaliada como :class:`int` ou :class:`slice` (conforme discutido na "
"seção seguinte). Exemplos de classes de sequência embutidas incluem as "
"classes :class:`str`, :class:`list` e :class:`tuple`."

#: ../../reference/expressions.rst:927
msgid ""
"The formal syntax makes no special provision for negative indices in :term:"
"`sequences <sequence>`. However, built-in sequences all provide a :meth:"
"`~object.__getitem__` method that interprets negative indices by adding the "
"length of the sequence to the index so that, for example, ``x[-1]`` selects "
"the last item of ``x``. The resulting value must be a nonnegative integer "
"less than the number of items in the sequence, and the subscription selects "
"the item whose index is that value (counting from zero). Since the support "
"for negative indices and slicing occurs in the object's :meth:`~object."
"__getitem__` method, subclasses overriding this method will need to "
"explicitly add that support."
msgstr ""
"A sintaxe formal não faz nenhuma provisão especial para índices negativos "
"em :term:`sequências <sequência>`. No entanto, todas as sequências embutidas "
"fornecem um método :meth:`~object.__getitem__` que interpreta índices "
"negativos adicionando o comprimento da sequência ao índice para que, por "
"exemplo, ``x[-1]`` selecione o último item de ``x``. O valor resultante deve "
"ser um número inteiro não negativo menor que o número de itens na sequência, "
"e a subscrição seleciona o item cujo índice é esse valor (contando a partir "
"de zero). Como o suporte para índices negativos e fatiamento ocorre no "
"método :meth:`~object.__getitem__` do objeto, as subclasses que substituem "
"esse método precisarão adicionar explicitamente esse suporte."

#: ../../reference/expressions.rst:941
msgid ""
"A :class:`string <str>` is a special kind of sequence whose items are "
"*characters*. A character is not a separate data type but a string of "
"exactly one character."
msgstr ""
"Uma :class:`string <str>` é um tipo especial de sequência cujos itens são "
"*caracteres*. Um caractere não é um tipo de dados separado, mas uma string "
"de exatamente um caractere."

#: ../../reference/expressions.rst:949
msgid "Slicings"
msgstr "Fatiamentos"

#: ../../reference/expressions.rst:963
msgid ""
"A slicing selects a range of items in a sequence object (e.g., a string, "
"tuple or list).  Slicings may be used as expressions or as targets in "
"assignment or :keyword:`del` statements.  The syntax for a slicing:"
msgstr ""
"Um fatiamento seleciona um intervalo de itens em um objeto sequência (por "
"exemplo, uma string, tupla ou lista). As fatias podem ser usadas como "
"expressões ou como alvos em instruções de atribuição ou :keyword:`del`. A "
"sintaxe para um fatiamento:"

#: ../../reference/expressions.rst:976
msgid ""
"There is ambiguity in the formal syntax here: anything that looks like an "
"expression list also looks like a slice list, so any subscription can be "
"interpreted as a slicing.  Rather than further complicating the syntax, this "
"is disambiguated by defining that in this case the interpretation as a "
"subscription takes priority over the interpretation as a slicing (this is "
"the case if the slice list contains no proper slice)."
msgstr ""
"Há ambiguidade na sintaxe formal aqui: qualquer coisa que se pareça com uma "
"lista de expressões também se parece com uma lista de fatias, portanto "
"qualquer subscrição pode ser interpretada como um fatiamento. Em vez de "
"complicar ainda mais a sintaxe, isso é eliminado pela definição de que, "
"neste caso, a interpretação como uma subscrição tem prioridade sobre a "
"interpretação como um fatiamento (este é o caso se a lista de fatias não "
"contiver uma fatia adequada)."

#: ../../reference/expressions.rst:988
msgid ""
"The semantics for a slicing are as follows.  The primary is indexed (using "
"the same :meth:`~object.__getitem__` method as normal subscription) with a "
"key that is constructed from the slice list, as follows.  If the slice list "
"contains at least one comma, the key is a tuple containing the conversion of "
"the slice items; otherwise, the conversion of the lone slice item is the "
"key.  The conversion of a slice item that is an expression is that "
"expression.  The conversion of a proper slice is a slice object (see "
"section :ref:`types`) whose :attr:`~slice.start`, :attr:`~slice.stop` and :"
"attr:`~slice.step` attributes are the values of the expressions given as "
"lower bound, upper bound and stride, respectively, substituting ``None`` for "
"missing expressions."
msgstr ""
"A semântica para um fatiamento é a seguinte. O primário é indexado (usando o "
"mesmo método :meth:`~object.__getitem__` da subscrição normal) com uma chave "
"que é construída a partir da lista de fatias, como segue. Se a lista de "
"fatias contiver pelo menos uma vírgula, a chave será uma tupla contendo a "
"conversão dos itens da fatia; caso contrário, a conversão do item de fatia "
"isolada é a chave. A conversão de um item de fatia que é uma expressão é "
"essa expressão. A conversão de uma fatia adequada é um objeto fatia (veja a "
"seção :ref:`types`) cujos :attr:`~slice.start`, :attr:`~slice.stop` e :attr:"
"`~slice.step` atributos são os valores das expressões fornecidas como limite "
"inferior, limite superior e passo, respectivamente, substituindo ``None`` "
"pelas expressões ausentes."

#: ../../reference/expressions.rst:1012
msgid "Calls"
msgstr "Chamadas"

#: ../../reference/expressions.rst:1014
msgid ""
"A call calls a callable object (e.g., a :term:`function`) with a possibly "
"empty series of :term:`arguments <argument>`:"
msgstr ""
"Uma chamada chama um objeto que é um chamável (por exemplo, uma :term:"
"`função`) com uma série possivelmente vazia de :term:`argumentos "
"<argumento>`:"

#: ../../reference/expressions.rst:1031
msgid ""
"An optional trailing comma may be present after the positional and keyword "
"arguments but does not affect the semantics."
msgstr ""
"Uma vírgula final opcional pode estar presente após os argumentos "
"posicionais e nomeados, mas não afeta a semântica."

#: ../../reference/expressions.rst:1037
msgid ""
"The primary must evaluate to a callable object (user-defined functions, "
"built-in functions, methods of built-in objects, class objects, methods of "
"class instances, and all objects having a :meth:`~object.__call__` method "
"are callable).  All argument expressions are evaluated before the call is "
"attempted.  Please refer to section :ref:`function` for the syntax of "
"formal :term:`parameter` lists."
msgstr ""
"O primário deve ser avaliado como um objeto que pode ser chamado (funções "
"definidas pelo usuário, funções embutidas, métodos de objetos embutidos, "
"objetos de classe, métodos de instâncias de classe e todos os objetos que "
"possuem um método :meth:`~object.__call__` são chamáveis). Todas as "
"expressões de argumento são avaliadas antes da tentativa de chamada. "
"Consulte a seção :ref:`function` para a sintaxe das listas formais de :term:"
"`parâmetros <parâmetro>`."

#: ../../reference/expressions.rst:1045
msgid ""
"If keyword arguments are present, they are first converted to positional "
"arguments, as follows.  First, a list of unfilled slots is created for the "
"formal parameters.  If there are N positional arguments, they are placed in "
"the first N slots.  Next, for each keyword argument, the identifier is used "
"to determine the corresponding slot (if the identifier is the same as the "
"first formal parameter name, the first slot is used, and so on).  If the "
"slot is already filled, a :exc:`TypeError` exception is raised. Otherwise, "
"the argument is placed in the slot, filling it (even if the expression is "
"``None``, it fills the slot).  When all arguments have been processed, the "
"slots that are still unfilled are filled with the corresponding default "
"value from the function definition.  (Default values are calculated, once, "
"when the function is defined; thus, a mutable object such as a list or "
"dictionary used as default value will be shared by all calls that don't "
"specify an argument value for the corresponding slot; this should usually be "
"avoided.)  If there are any unfilled slots for which no default value is "
"specified, a :exc:`TypeError` exception is raised.  Otherwise, the list of "
"filled slots is used as the argument list for the call."
msgstr ""
"Se houver argumentos nomeados, eles serão primeiro convertidos em argumentos "
"posicionais, como segue. Primeiro, é criada uma lista de slots não "
"preenchidos para os parâmetros formais. Se houver N argumentos posicionais, "
"eles serão colocados nos primeiros N slots. A seguir, para cada argumento "
"nomeado, o identificador é usado para determinar o slot correspondente (se o "
"identificador for igual ao primeiro nome formal do parâmetro, o primeiro "
"slot será usado e assim por diante). Se o slot já estiver preenchido, uma "
"exceção :exc:`TypeError` será levantada. Caso contrário, o argumento é "
"colocado no slot, preenchendo-o (mesmo que a expressão seja ``None``, ela "
"preenche o slot). Quando todos os argumentos forem processados, os slots "
"ainda não preenchidos serão preenchidos com o valor padrão correspondente da "
"definição da função. (Os valores padrão são calculados, uma vez, quando a "
"função é definida; assim, um objeto mutável, como uma lista ou dicionário "
"usado como valor padrão, será compartilhado por todas as chamadas que não "
"especificam um valor de argumento para o slot correspondente; isso deve "
"geralmente ser evitado.) Se houver algum slot não preenchido para o qual "
"nenhum valor padrão for especificado, uma exceção :exc:`TypeError` será "
"levantada. Caso contrário, a lista de slots preenchidos será usada como "
"lista de argumentos para a chamada."

#: ../../reference/expressions.rst:1065
msgid ""
"An implementation may provide built-in functions whose positional parameters "
"do not have names, even if they are 'named' for the purpose of "
"documentation, and which therefore cannot be supplied by keyword.  In "
"CPython, this is the case for functions implemented in C that use :c:func:"
"`PyArg_ParseTuple` to parse their arguments."
msgstr ""
"Uma implementação pode fornecer funções integradas cujos parâmetros "
"posicionais não possuem nomes, mesmo que sejam 'nomeados' para fins de "
"documentação e que, portanto, não possam ser fornecidos por nomes. No "
"CPython, este é o caso de funções implementadas em C que usam :c:func:"
"`PyArg_ParseTuple` para analisar seus argumentos."

#: ../../reference/expressions.rst:1071
msgid ""
"If there are more positional arguments than there are formal parameter "
"slots, a :exc:`TypeError` exception is raised, unless a formal parameter "
"using the syntax ``*identifier`` is present; in this case, that formal "
"parameter receives a tuple containing the excess positional arguments (or an "
"empty tuple if there were no excess positional arguments)."
msgstr ""
"Se houver mais argumentos posicionais do que slots de parâmetros formais, "
"uma exceção :exc:`TypeError` será levantada, a menos que um parâmetro formal "
"usando a sintaxe ``*identificador`` esteja presente; neste caso, esse "
"parâmetro formal recebe uma tupla contendo os argumentos posicionais em "
"excesso (ou uma tupla vazia se não houver argumentos posicionais em excesso)."

#: ../../reference/expressions.rst:1077
msgid ""
"If any keyword argument does not correspond to a formal parameter name, a :"
"exc:`TypeError` exception is raised, unless a formal parameter using the "
"syntax ``**identifier`` is present; in this case, that formal parameter "
"receives a dictionary containing the excess keyword arguments (using the "
"keywords as keys and the argument values as corresponding values), or a "
"(new) empty dictionary if there were no excess keyword arguments."
msgstr ""
"Se algum argumento nomeado não corresponder a um nome de parâmetro formal, "
"uma exceção :exc:`TypeError` é levantada, a menos que um parâmetro formal "
"usando a sintaxe ``**identificador`` esteja presente; neste caso, esse "
"parâmetro formal recebe um dicionário contendo os argumentos nomeados em "
"excesso (usando os nomes como chaves e os valores dos argumentos como "
"valores correspondentes), ou um (novo) dicionário vazio se não houver "
"argumentos nomeados em excesso."

#: ../../reference/expressions.rst:1088
msgid ""
"If the syntax ``*expression`` appears in the function call, ``expression`` "
"must evaluate to an :term:`iterable`.  Elements from these iterables are "
"treated as if they were additional positional arguments.  For the call "
"``f(x1, x2, *y, x3, x4)``, if *y* evaluates to a sequence *y1*, ..., *yM*, "
"this is equivalent to a call with M+4 positional arguments *x1*, *x2*, "
"*y1*, ..., *yM*, *x3*, *x4*."
msgstr ""
"Se a sintaxe ``*expressão`` aparecer na chamada da função, ``expressão`` "
"deverá ser avaliada como :term:`iterável`. Os elementos desses iteráveis são "
"tratados como se fossem argumentos posicionais adicionais. Para a chamada "
"``f(x1, x2, *y, x3, x4)``, se *y* for avaliado como uma sequência *y1*, ..., "
"*yM*, isso é equivalente a uma chamada com M+4 argumentos posicionais *x1*, "
"*x2*, *y1*, ..., *yM*, *x3*, *x4*."

#: ../../reference/expressions.rst:1095
msgid ""
"A consequence of this is that although the ``*expression`` syntax may appear "
"*after* explicit keyword arguments, it is processed *before* the keyword "
"arguments (and any ``**expression`` arguments -- see below).  So::"
msgstr ""
"Uma consequência disso é que embora a sintaxe ``*expressão`` possa aparecer "
"*depois* de argumentos nomeados explícitos, ela é processada *antes* dos "
"argumentos nomeados (e de quaisquer argumentos de ``**expressão`` -- veja "
"abaixo). Então::"

#: ../../reference/expressions.rst:1099
msgid ""
">>> def f(a, b):\n"
"...     print(a, b)\n"
"...\n"
">>> f(b=1, *(2,))\n"
"2 1\n"
">>> f(a=1, *(2,))\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: f() got multiple values for keyword argument 'a'\n"
">>> f(1, *(2,))\n"
"1 2"
msgstr ""

#: ../../reference/expressions.rst:1111
msgid ""
"It is unusual for both keyword arguments and the ``*expression`` syntax to "
"be used in the same call, so in practice this confusion does not often arise."
msgstr ""
"É incomum que ambos os argumentos nomeados e a sintaxe ``*expressão`` sejam "
"usados na mesma chamada, portanto, na prática, essa confusão não surge com "
"frequência."

#: ../../reference/expressions.rst:1117
msgid ""
"If the syntax ``**expression`` appears in the function call, ``expression`` "
"must evaluate to a :term:`mapping`, the contents of which are treated as "
"additional keyword arguments. If a parameter matching a key has already been "
"given a value (by an explicit keyword argument, or from another unpacking), "
"a :exc:`TypeError` exception is raised."
msgstr ""
"Se a sintaxe ``**expressão`` aparecer na chamada de função, ``expressão`` "
"deve ser avaliada como um :term:`mapeamento`, cujo conteúdo é tratado como "
"argumentos nomeados adicionais. Se um parâmetro que corresponde a uma chave "
"já recebeu um valor (por um argumento nomeado explícito ou de outro "
"desempacotamento), uma exceção :exc:`TypeError` é levantada."

#: ../../reference/expressions.rst:1123
msgid ""
"When ``**expression`` is used, each key in this mapping must be a string. "
"Each value from the mapping is assigned to the first formal parameter "
"eligible for keyword assignment whose name is equal to the key. A key need "
"not be a Python identifier (e.g. ``\"max-temp °F\"`` is acceptable, although "
"it will not match any formal parameter that could be declared). If there is "
"no match to a formal parameter the key-value pair is collected by the ``**`` "
"parameter, if there is one, or if there is not, a :exc:`TypeError` exception "
"is raised."
msgstr ""
"Quando ``**expressão`` é usada, cada chave neste mapeamento deve ser uma "
"string. Cada valor do mapeamento é atribuído ao primeiro parâmetro formal "
"elegível para atribuição de nomeas cujo nome é igual à chave. Uma chave não "
"precisa ser um identificador Python (por exemplo, ``\"max-temp °F\"`` é "
"aceitável, embora não corresponda a nenhum parâmetro formal que possa ser "
"declarado). Se não houver correspondência com um parâmetro formal, o par "
"chave-valor é coletado pelo parâmetro ``**``, se houver, ou se não houver, "
"uma exceção :exc:`TypeError` é levantada."

#: ../../reference/expressions.rst:1133
msgid ""
"Formal parameters using the syntax ``*identifier`` or ``**identifier`` "
"cannot be used as positional argument slots or as keyword argument names."
msgstr ""
"Parâmetros formais usando a sintaxe ``*identificador`` ou "
"``**identificador`` não podem ser usados como slots de argumentos "
"posicionais ou como nomes de argumentos nomeados."

#: ../../reference/expressions.rst:1136
msgid ""
"Function calls accept any number of ``*`` and ``**`` unpackings, positional "
"arguments may follow iterable unpackings (``*``), and keyword arguments may "
"follow dictionary unpackings (``**``). Originally proposed by :pep:`448`."
msgstr ""
"Chamadas de função aceitam qualquer número de desempacotamentos ``*`` e "
"``**``, argumentos posicionais podem seguir desempacotamentos iteráveis "
"(``*``) e argumentos nomeados podem seguir desempacotamentos de dicionário "
"(``**``). Originalmente proposto pela :pep:`448`."

#: ../../reference/expressions.rst:1142
msgid ""
"A call always returns some value, possibly ``None``, unless it raises an "
"exception.  How this value is computed depends on the type of the callable "
"object."
msgstr ""
"Uma chamada sempre retorna algum valor, possivelmente ``None``, a menos que "
"levanta uma exceção. A forma como esse valor é calculado depende do tipo do "
"objeto chamável."

#: ../../reference/expressions.rst:1146
msgid "If it is---"
msgstr "Se for..."

#: ../../reference/expressions.rst:1148
msgid "a user-defined function:"
msgstr "uma função definida por usuário:"

#: ../../reference/expressions.rst:1155
msgid ""
"The code block for the function is executed, passing it the argument list.  "
"The first thing the code block will do is bind the formal parameters to the "
"arguments; this is described in section :ref:`function`.  When the code "
"block executes a :keyword:`return` statement, this specifies the return "
"value of the function call."
msgstr ""
"O bloco de código da função é executado, passando-lhe a lista de argumentos. "
"A primeira coisa que o bloco de código fará é vincular os parâmetros formais "
"aos argumentos; isso é descrito na seção :ref:`function`. Quando o bloco de "
"código executa uma instrução :keyword:`return`, isso especifica o valor de "
"retorno da chamada de função."

#: ../../reference/expressions.rst:1161
msgid "a built-in function or method:"
msgstr "um método embutido ou uma função embutida:"

#: ../../reference/expressions.rst:1172
msgid ""
"The result is up to the interpreter; see :ref:`built-in-funcs` for the "
"descriptions of built-in functions and methods."
msgstr ""
"O resultado fica por conta do interpretador; veja :ref:`built-in-funcs` para "
"descrições de funções embutidas e métodos embutidos."

#: ../../reference/expressions.rst:1175
msgid "a class object:"
msgstr "um objeto classe:"

#: ../../reference/expressions.rst:1180
msgid "A new instance of that class is returned."
msgstr "Uma nova instância dessa classe é retornada."

#: ../../reference/expressions.rst:1182
msgid "a class instance method:"
msgstr "um método de instância de classe:"

#: ../../reference/expressions.rst:1188
msgid ""
"The corresponding user-defined function is called, with an argument list "
"that is one longer than the argument list of the call: the instance becomes "
"the first argument."
msgstr ""
"A função correspondente definida pelo usuário é chamada, com uma lista de "
"argumentos que é maior que a lista de argumentos da chamada: a instância se "
"torna o primeiro argumento."

#: ../../reference/expressions.rst:1192
msgid "a class instance:"
msgstr "uma instância de classe:"

#: ../../reference/expressions.rst:1197
msgid ""
"The class must define a :meth:`~object.__call__` method; the effect is then "
"the same as if that method was called."
msgstr ""
"A classe deve definir um método :meth:`~object.__call__`; o efeito é então o "
"mesmo como se esse método fosse chamado."

#: ../../reference/expressions.rst:1205 ../../reference/expressions.rst:2003
msgid "Await expression"
msgstr "Expressão await"

#: ../../reference/expressions.rst:1207
msgid ""
"Suspend the execution of :term:`coroutine` on an :term:`awaitable` object. "
"Can only be used inside a :term:`coroutine function`."
msgstr ""
"Suspende a execução de :term:`corrotina` em um objeto :term:`aguardável`. Só "
"pode ser usado dentro de uma :term:`função de corrotina`."

#: ../../reference/expressions.rst:1219
msgid "The power operator"
msgstr "O operador de potência"

#: ../../reference/expressions.rst:1225
msgid ""
"The power operator binds more tightly than unary operators on its left; it "
"binds less tightly than unary operators on its right.  The syntax is:"
msgstr ""
"O operador de potência vincula-se com mais força do que os operadores "
"unários à sua esquerda; ele se vincula com menos força do que os operadores "
"unários à sua direita. A sintaxe é:"

#: ../../reference/expressions.rst:1231
msgid ""
"Thus, in an unparenthesized sequence of power and unary operators, the "
"operators are evaluated from right to left (this does not constrain the "
"evaluation order for the operands): ``-1**2`` results in ``-1``."
msgstr ""
"Assim, em uma sequência sem parênteses de operadores de potência e unários, "
"os operadores são avaliados da direita para a esquerda (isso não restringe a "
"ordem de avaliação dos operandos): ``-1**2`` resulta em ``-1`` ."

#: ../../reference/expressions.rst:1235
msgid ""
"The power operator has the same semantics as the built-in :func:`pow` "
"function, when called with two arguments: it yields its left argument raised "
"to the power of its right argument.  The numeric arguments are first "
"converted to a common type, and the result is of that type."
msgstr ""
"O operador de potência tem a mesma semântica que a função embutida :func:"
"`pow`, quando chamado com dois argumentos: ele produz seu argumento esquerdo "
"elevado à potência de seu argumento direito. Os argumentos numéricos são "
"primeiro convertidos em um tipo comum e o resultado é desse tipo."

#: ../../reference/expressions.rst:1240
msgid ""
"For int operands, the result has the same type as the operands unless the "
"second argument is negative; in that case, all arguments are converted to "
"float and a float result is delivered. For example, ``10**2`` returns "
"``100``, but ``10**-2`` returns ``0.01``."
msgstr ""
"Para operandos int, o resultado tem o mesmo tipo que os operandos, a menos "
"que o segundo argumento seja negativo; nesse caso, todos os argumentos são "
"convertidos em ponto flutuante e um resultado ponto flutuante é entregue. "
"Por exemplo, ``10**2`` retorna ``100``, mas ``10**-2`` retorna ``0.01``."

#: ../../reference/expressions.rst:1245
msgid ""
"Raising ``0.0`` to a negative power results in a :exc:`ZeroDivisionError`. "
"Raising a negative number to a fractional power results in a :class:"
"`complex` number. (In earlier versions it raised a :exc:`ValueError`.)"
msgstr ""
"Elevar ``0.0`` a uma potência negativa resulta em uma exceção :exc:"
"`ZeroDivisionError`. Elevar um número negativo a uma potência fracionária "
"resulta em um número :class:`complex`. (Em versões anteriores, levantava :"
"exc:`ValueError`.)"

#: ../../reference/expressions.rst:1249
msgid ""
"This operation can be customized using the special :meth:`~object.__pow__` "
"and :meth:`~object.__rpow__` methods."
msgstr ""
"Esta operação pode ser personalizada usando os métodos especial :meth:"
"`~object.__pow__` e :meth:`~object.__rpow__`."

#: ../../reference/expressions.rst:1255
msgid "Unary arithmetic and bitwise operations"
msgstr "Operações aritméticas unárias e bit a bit"

#: ../../reference/expressions.rst:1261
msgid "All unary arithmetic and bitwise operations have the same priority:"
msgstr ""
"Todas as operações aritméticas unárias e bit a bit têm a mesma prioridade:"

#: ../../reference/expressions.rst:1272
msgid ""
"The unary ``-`` (minus) operator yields the negation of its numeric "
"argument; the operation can be overridden with the :meth:`~object.__neg__` "
"special method."
msgstr ""
"O operador unário ``-`` (menos) produz a negação de seu argumento numérico; "
"a operação pode ser substituída pelo método especial :meth:`~object.__neg__`."

#: ../../reference/expressions.rst:1280
msgid ""
"The unary ``+`` (plus) operator yields its numeric argument unchanged; the "
"operation can be overridden with the :meth:`~object.__pos__` special method."
msgstr ""
"O operador unário ``+`` (mais) produz seu argumento numérico inalterado; a "
"operação pode ser substituída pelo método especial :meth:`~object.__pos__`."

#: ../../reference/expressions.rst:1287
msgid ""
"The unary ``~`` (invert) operator yields the bitwise inversion of its "
"integer argument.  The bitwise inversion of ``x`` is defined as ``-(x+1)``.  "
"It only applies to integral numbers or to custom objects that override the :"
"meth:`~object.__invert__` special method."
msgstr ""
"O operador unário ``~`` (inverter) produz a inversão bit a bit de seu "
"argumento inteiro. A inversão bit a bit de ``x`` é definida como ``-(x+1)``. "
"Aplica-se apenas a números inteiros ou a objetos personalizados que "
"substituem o método especial :meth:`~object.__invert__`."

#: ../../reference/expressions.rst:1296
msgid ""
"In all three cases, if the argument does not have the proper type, a :exc:"
"`TypeError` exception is raised."
msgstr ""
"Em todos os três casos, se o argumento não tiver o tipo adequado, uma "
"exceção :exc:`TypeError` é levantada."

#: ../../reference/expressions.rst:1303
msgid "Binary arithmetic operations"
msgstr "Operações binárias aritméticas"

#: ../../reference/expressions.rst:1307
msgid ""
"The binary arithmetic operations have the conventional priority levels.  "
"Note that some of these operations also apply to certain non-numeric types.  "
"Apart from the power operator, there are only two levels, one for "
"multiplicative operators and one for additive operators:"
msgstr ""
"As operações aritméticas binárias possuem os níveis de prioridade "
"convencionais. Observe que algumas dessas operações também se aplicam a "
"determinados tipos não numéricos. Além do operador potência, existem apenas "
"dois níveis, um para operadores multiplicativos e outro para operadores "
"aditivos:"

#: ../../reference/expressions.rst:1322
msgid ""
"The ``*`` (multiplication) operator yields the product of its arguments.  "
"The arguments must either both be numbers, or one argument must be an "
"integer and the other must be a sequence. In the former case, the numbers "
"are converted to a common type and then multiplied together.  In the latter "
"case, sequence repetition is performed; a negative repetition factor yields "
"an empty sequence."
msgstr ""
"O operador ``*`` (multiplicação) produz o produto de seus argumentos. Os "
"argumentos devem ser números ou um argumento deve ser um número inteiro e o "
"outro deve ser uma sequência. No primeiro caso, os números são convertidos "
"para um tipo comum e depois multiplicados. Neste último caso, é realizada a "
"repetição da sequência; um fator de repetição negativo produz uma sequência "
"vazia."

#: ../../reference/expressions.rst:1328
msgid ""
"This operation can be customized using the special :meth:`~object.__mul__` "
"and :meth:`~object.__rmul__` methods."
msgstr ""
"Esta operação pode ser personalizada usando os métodos especial :meth:"
"`~object.__mul__` e :meth:`~object.__rmul__`."

#: ../../reference/expressions.rst:1335
msgid ""
"The ``@`` (at) operator is intended to be used for matrix multiplication.  "
"No builtin Python types implement this operator."
msgstr ""
"O operador ``@`` (arroba) deve ser usado para multiplicação de matrizes. "
"Nenhum tipo embutido do Python implementa este operador."

#: ../../reference/expressions.rst:1338
msgid ""
"This operation can be customized using the special :meth:`~object."
"__matmul__` and :meth:`~object.__rmatmul__` methods."
msgstr ""
"Esta operação pode ser personalizada usando os métodos especial :meth:"
"`~object.__matmul__` e :meth:`~object.__rmatmul__`."

#: ../../reference/expressions.rst:1349
msgid ""
"The ``/`` (division) and ``//`` (floor division) operators yield the "
"quotient of their arguments.  The numeric arguments are first converted to a "
"common type. Division of integers yields a float, while floor division of "
"integers results in an integer; the result is that of mathematical division "
"with the 'floor' function applied to the result.  Division by zero raises "
"the :exc:`ZeroDivisionError` exception."
msgstr ""
"Os operadores ``/`` (divisão) e ``//`` (divisão pelo piso) produzem o "
"quociente de seus argumentos. Os argumentos numéricos são primeiro "
"convertidos em um tipo comum. A divisão de inteiros produz um ponto "
"flutuante, enquanto a divisão pelo piso de inteiros resulta em um inteiro; o "
"resultado é o da divisão matemática com a função 'floor' aplicada ao "
"resultado. A divisão por zero levanta a exceção :exc:`ZeroDivisionError`."

#: ../../reference/expressions.rst:1356
msgid ""
"The division operation can be customized using the special :meth:`~object."
"__truediv__` and :meth:`~object.__rtruediv__` methods. The floor division "
"operation can be customized using the special :meth:`~object.__floordiv__` "
"and :meth:`~object.__rfloordiv__` methods."
msgstr ""
"A operação de divisão pode ser personalizada usando os métodos especiais :"
"meth:`~object.__truediv__` e :meth:`~object.__rtruediv__`. A operação de "
"divisão pelo piso pode ser personalizada usando os métodos especiais :meth:"
"`~object.__floordiv__` e :meth:`~object.__rfloordiv__`."

#: ../../reference/expressions.rst:1365
msgid ""
"The ``%`` (modulo) operator yields the remainder from the division of the "
"first argument by the second.  The numeric arguments are first converted to "
"a common type.  A zero right argument raises the :exc:`ZeroDivisionError` "
"exception.  The arguments may be floating-point numbers, e.g., ``3.14%0.7`` "
"equals ``0.34`` (since ``3.14`` equals ``4*0.7 + 0.34``.)  The modulo "
"operator always yields a result with the same sign as its second operand (or "
"zero); the absolute value of the result is strictly smaller than the "
"absolute value of the second operand [#]_."
msgstr ""
"O operador ``%`` (módulo) produz o restante da divisão do primeiro argumento "
"pelo segundo. Os argumentos numéricos são primeiro convertidos em um tipo "
"comum. Um argumento zero à direita levanta a exceção :exc:"
"`ZeroDivisionError`. Os argumentos podem ser números de ponto flutuante, por "
"exemplo, ``3.14%0.7`` é igual a ``0.34`` (já que ``3.14`` é igual a ``4*0.7 "
"+ 0.34``.) O operador módulo sempre produz um resultado com o mesmo sinal do "
"seu segundo operando (ou zero); o valor absoluto do resultado é estritamente "
"menor que o valor absoluto do segundo operando [#]_."

#: ../../reference/expressions.rst:1374
msgid ""
"The floor division and modulo operators are connected by the following "
"identity: ``x == (x//y)*y + (x%y)``.  Floor division and modulo are also "
"connected with the built-in function :func:`divmod`: ``divmod(x, y) == (x//"
"y, x%y)``. [#]_."
msgstr ""
"Os operadores de divisão pelo piso e módulo são conectados pela seguinte "
"identidade: ``x == (x//y)*y + (x%y)``. A divisão pelo piso e o módulo também "
"estão conectados com a função embutida :func:`divmod`: ``divmod(x, y) == (x//"
"y, x%y)``. [#]_."

#: ../../reference/expressions.rst:1379
msgid ""
"In addition to performing the modulo operation on numbers, the ``%`` "
"operator is also overloaded by string objects to perform old-style string "
"formatting (also known as interpolation).  The syntax for string formatting "
"is described in the Python Library Reference, section :ref:`old-string-"
"formatting`."
msgstr ""
"Além de realizar a operação de módulo em números, o operador ``%`` também é "
"sobrecarregado por objetos string para realizar a formatação de string no "
"estilo antigo (também conhecida como interpolação). A sintaxe para "
"formatação de string é descrita na Referência da Biblioteca Python, seção :"
"ref:`old-string-formatting`."

#: ../../reference/expressions.rst:1384
msgid ""
"The *modulo* operation can be customized using the special :meth:`~object."
"__mod__` and :meth:`~object.__rmod__` methods."
msgstr ""
"A operação *módulo* pode ser personalizada usando os métodos especial :meth:"
"`~object.__mod__` e :meth:`~object.__rmod__`."

#: ../../reference/expressions.rst:1387
msgid ""
"The floor division operator, the modulo operator, and the :func:`divmod` "
"function are not defined for complex numbers.  Instead, convert to a "
"floating-point number using the :func:`abs` function if appropriate."
msgstr ""
"O operador de divisão pelo piso, o operador de módulo e a função :func:"
"`divmod` não são definidos para números complexos. Em vez disso, converta "
"para um número de ponto flutuante usando a função :func:`abs` se apropriado."

#: ../../reference/expressions.rst:1396
msgid ""
"The ``+`` (addition) operator yields the sum of its arguments.  The "
"arguments must either both be numbers or both be sequences of the same "
"type.  In the former case, the numbers are converted to a common type and "
"then added together. In the latter case, the sequences are concatenated."
msgstr ""
"O operador ``+`` (adição) produz a soma de seus argumentos. Os argumentos "
"devem ser números ou sequências do mesmo tipo. No primeiro caso, os números "
"são convertidos para um tipo comum e depois somados. Neste último caso, as "
"sequências são concatenadas."

#: ../../reference/expressions.rst:1401
msgid ""
"This operation can be customized using the special :meth:`~object.__add__` "
"and :meth:`~object.__radd__` methods."
msgstr ""
"Esta operação pode ser personalizada usando os métodos especial :meth:"
"`~object.__add__` e :meth:`~object.__radd__`."

#: ../../reference/expressions.rst:1409
msgid ""
"The ``-`` (subtraction) operator yields the difference of its arguments.  "
"The numeric arguments are first converted to a common type."
msgstr ""
"O operador ``-`` (subtração) produz a diferença de seus argumentos. Os "
"argumentos numéricos são primeiro convertidos em um tipo comum."

#: ../../reference/expressions.rst:1412
msgid ""
"This operation can be customized using the special :meth:`~object.__sub__` "
"and :meth:`~object.__rsub__` methods."
msgstr ""
"Esta operação pode ser personalizada usando os métodos especial :meth:"
"`~object.__sub__` e :meth:`~object.__rsub__`."

#: ../../reference/expressions.rst:1419
msgid "Shifting operations"
msgstr "Operações de deslocamento"

#: ../../reference/expressions.rst:1426
msgid ""
"The shifting operations have lower priority than the arithmetic operations:"
msgstr ""
"As operações de deslocamento têm menor prioridade que as operações "
"aritméticas:"

#: ../../reference/expressions.rst:1431
msgid ""
"These operators accept integers as arguments.  They shift the first argument "
"to the left or right by the number of bits given by the second argument."
msgstr ""
"Esses operadores aceitam números inteiros como argumentos. Eles deslocam o "
"primeiro argumento para a esquerda ou para a direita pelo número de bits "
"fornecido pelo segundo argumento."

#: ../../reference/expressions.rst:1434
msgid ""
"The left shift operation can be customized using the special :meth:`~object."
"__lshift__` and :meth:`~object.__rlshift__` methods. The right shift "
"operation can be customized using the special :meth:`~object.__rshift__` "
"and :meth:`~object.__rrshift__` methods."
msgstr ""
"A operação de deslocamento à esquerda pode ser personalizada usando os "
"métodos especiais :meth:`~object.__lshift__` e :meth:`~object.__rlshift__`. "
"A operação de deslocamento à direita pode ser personalizada usando os "
"métodos especiais :meth:`~object.__rshift__` e :meth:`~object.__rrshift__`."

#: ../../reference/expressions.rst:1441
msgid ""
"A right shift by *n* bits is defined as floor division by ``pow(2,n)``.  A "
"left shift by *n* bits is defined as multiplication with ``pow(2,n)``."
msgstr ""
"Um deslocamento para a direita por *n* bits é definido como divisão pelo "
"piso por ``pow(2,n)``. Um deslocamento à esquerda por *n* bits é definido "
"como multiplicação com ``pow(2,n)``."

#: ../../reference/expressions.rst:1448
msgid "Binary bitwise operations"
msgstr "Operações binárias bit a bit"

#: ../../reference/expressions.rst:1452
msgid "Each of the three bitwise operations has a different priority level:"
msgstr ""
"Cada uma das três operações bit a bit tem um nível de prioridade diferente:"

#: ../../reference/expressions.rst:1463
msgid ""
"The ``&`` operator yields the bitwise AND of its arguments, which must be "
"integers or one of them must be a custom object overriding :meth:`~object."
"__and__` or :meth:`~object.__rand__` special methods."
msgstr ""
"O operador ``&`` produz o E (AND) bit a bit de seus argumentos, que devem "
"ser inteiros ou um deles deve ser um objeto personalizado substituindo os "
"métodos especiais :meth:`~object.__and__` ou :meth:`~object.__rand__`."

#: ../../reference/expressions.rst:1472
msgid ""
"The ``^`` operator yields the bitwise XOR (exclusive OR) of its arguments, "
"which must be integers or one of them must be a custom object overriding :"
"meth:`~object.__xor__` or :meth:`~object.__rxor__` special methods."
msgstr ""
"O operador ``^`` produz o XOR bit a bit (OU exclusivo) de seus argumentos, "
"que devem ser inteiros ou um deles deve ser um objeto personalizado "
"sobrescrevendo os métodos especiais :meth:`~object.__xor__` ou :meth:"
"`~object.__rxor__`."

#: ../../reference/expressions.rst:1481
msgid ""
"The ``|`` operator yields the bitwise (inclusive) OR of its arguments, which "
"must be integers or one of them must be a custom object overriding :meth:"
"`~object.__or__` or :meth:`~object.__ror__` special methods."
msgstr ""
"O operador ``|`` produz o OU (OR) bit a bit de seus argumentos, que devem "
"ser inteiros ou um deles deve ser um objeto personalizado sobrescrevendo os "
"métodos especiais :meth:`~object.__or__` ou :meth:`~object.__ror__`."

#: ../../reference/expressions.rst:1489
msgid "Comparisons"
msgstr "Comparações"

#: ../../reference/expressions.rst:1501
msgid ""
"Unlike C, all comparison operations in Python have the same priority, which "
"is lower than that of any arithmetic, shifting or bitwise operation.  Also "
"unlike C, expressions like ``a < b < c`` have the interpretation that is "
"conventional in mathematics:"
msgstr ""
"Ao contrário de C, todas as operações de comparação em Python têm a mesma "
"prioridade, que é menor do que qualquer operação aritmética, de deslocamento "
"ou bit a bit. Também diferentemente de C, expressões como ``a < b < c`` têm "
"a interpretação que é convencional em matemática:"

#: ../../reference/expressions.rst:1511
msgid ""
"Comparisons yield boolean values: ``True`` or ``False``. Custom :dfn:`rich "
"comparison methods` may return non-boolean values. In this case Python will "
"call :func:`bool` on such value in boolean contexts."
msgstr ""
"Comparações produzem valores booleanos: ``True`` ou ``False``. :dfn:`métodos "
"de comparação rica` personalizados podem retornar valores não booleanos. "
"Neste caso, o Python chamará :func:`bool` nesse valor em contextos booleanos."

#: ../../reference/expressions.rst:1517
msgid ""
"Comparisons can be chained arbitrarily, e.g., ``x < y <= z`` is equivalent "
"to ``x < y and y <= z``, except that ``y`` is evaluated only once (but in "
"both cases ``z`` is not evaluated at all when ``x < y`` is found to be "
"false)."
msgstr ""
"As comparações podem ser encadeadas arbitrariamente, por exemplo, ``x < y <= "
"z`` é equivalente a ``x < y and y <= z``, exceto que ``y`` é avaliado apenas "
"uma vez (mas em ambos os casos ``z`` não é avaliado quando ``x < y`` é "
"considerado falso)."

#: ../../reference/expressions.rst:1521
msgid ""
"Formally, if *a*, *b*, *c*, ..., *y*, *z* are expressions and *op1*, "
"*op2*, ..., *opN* are comparison operators, then ``a op1 b op2 c ... y opN "
"z`` is equivalent to ``a op1 b and b op2 c and ... y opN z``, except that "
"each expression is evaluated at most once."
msgstr ""
"Formalmente, se *a*, *b*, *c*, ..., *y*, *z* são expressões e *op1*, "
"*op2*, ..., *opN* são operadores de comparação, então ``a op1 b op2 c ... y "
"opN z`` é equivalente a ``a op1 b e b op2 c e ... y opN z``, exceto que cada "
"expressão é avaliada no máximo uma vez."

#: ../../reference/expressions.rst:1526
msgid ""
"Note that ``a op1 b op2 c`` doesn't imply any kind of comparison between *a* "
"and *c*, so that, e.g., ``x < y > z`` is perfectly legal (though perhaps not "
"pretty)."
msgstr ""
"Observe que ``a op1 b op2 c`` não implica qualquer tipo de comparação entre "
"*a* e *c*, de modo que, por exemplo, ``x < y > z`` é perfeitamente válido "
"(embora talvez não seja bonito)."

#: ../../reference/expressions.rst:1533
msgid "Value comparisons"
msgstr "Comparações de valor"

#: ../../reference/expressions.rst:1535
msgid ""
"The operators ``<``, ``>``, ``==``, ``>=``, ``<=``, and ``!=`` compare the "
"values of two objects.  The objects do not need to have the same type."
msgstr ""
"Os operadores ``<``, ``>``, ``==``, ``>=``, ``<=`` e ``!=`` comparam os "
"valores de dois objetos. Os objetos não precisam ser do mesmo tipo."

#: ../../reference/expressions.rst:1538
msgid ""
"Chapter :ref:`objects` states that objects have a value (in addition to type "
"and identity).  The value of an object is a rather abstract notion in "
"Python: For example, there is no canonical access method for an object's "
"value.  Also, there is no requirement that the value of an object should be "
"constructed in a particular way, e.g. comprised of all its data attributes. "
"Comparison operators implement a particular notion of what the value of an "
"object is.  One can think of them as defining the value of an object "
"indirectly, by means of their comparison implementation."
msgstr ""
"O capítulo :ref:`objects` afirma que os objetos possuem um valor (além do "
"tipo e da identidade). O valor de um objeto é uma noção bastante abstrata em "
"Python: por exemplo, não existe um método de acesso canônico para o valor de "
"um objeto. Além disso, não há exigência de que o valor de um objeto seja "
"construído de uma maneira específica, por exemplo. composto por todos os "
"seus atributos de dados. Os operadores de comparação implementam uma noção "
"específica de qual é o valor de um objeto. Pode-se pensar neles como "
"definindo o valor de um objeto indiretamente, por meio de sua implementação "
"de comparação."

#: ../../reference/expressions.rst:1547
msgid ""
"Because all types are (direct or indirect) subtypes of :class:`object`, they "
"inherit the default comparison behavior from :class:`object`.  Types can "
"customize their comparison behavior by implementing :dfn:`rich comparison "
"methods` like :meth:`~object.__lt__`, described in :ref:`customization`."
msgstr ""
"Como todos os tipos são subtipos (diretos ou indiretos) de :class:`object`, "
"eles herdam o comportamento de comparação padrão de :class:`object`. Os "
"tipos podem personalizar seu comportamento de comparação implementando :dfn:"
"`métodos de comparação rica` como :meth:`~object.__lt__`, descrito em :ref:"
"`customization`."

#: ../../reference/expressions.rst:1553
msgid ""
"The default behavior for equality comparison (``==`` and ``!=``) is based on "
"the identity of the objects.  Hence, equality comparison of instances with "
"the same identity results in equality, and equality comparison of instances "
"with different identities results in inequality.  A motivation for this "
"default behavior is the desire that all objects should be reflexive (i.e. "
"``x is y`` implies ``x == y``)."
msgstr ""
"O comportamento padrão para comparação de igualdade (``==`` e ``!=``) é "
"baseado na identidade dos objetos. Consequentemente, a comparação da "
"igualdade de instâncias com a mesma identidade resulta em igualdade, e a "
"comparação da igualdade de instâncias com identidades diferentes resulta em "
"desigualdade. Uma motivação para este comportamento padrão é o desejo de que "
"todos os objetos sejam reflexivos (ou seja, ``x is y`` implica ``x == y``)."

#: ../../reference/expressions.rst:1560
msgid ""
"A default order comparison (``<``, ``>``, ``<=``, and ``>=``) is not "
"provided; an attempt raises :exc:`TypeError`.  A motivation for this default "
"behavior is the lack of a similar invariant as for equality."
msgstr ""
"Uma comparação de ordem padrão (``<``, ``>``, ``<=`` e ``>=``) não é "
"fornecida; uma tentativa levanta :exc:`TypeError`. Uma motivação para este "
"comportamento padrão é a falta de um invariante semelhante ao da igualdade."

#: ../../reference/expressions.rst:1564
msgid ""
"The behavior of the default equality comparison, that instances with "
"different identities are always unequal, may be in contrast to what types "
"will need that have a sensible definition of object value and value-based "
"equality.  Such types will need to customize their comparison behavior, and "
"in fact, a number of built-in types have done that."
msgstr ""
"O comportamento da comparação de igualdade padrão, de que instâncias com "
"identidades diferentes são sempre desiguais, pode contrastar com o que os "
"tipos precisarão ter uma definição sensata de valor de objeto e igualdade "
"baseada em valor. Esses tipos precisarão personalizar seu comportamento de "
"comparação e, de fato, vários tipos embutidos fizeram isso."

#: ../../reference/expressions.rst:1570
msgid ""
"The following list describes the comparison behavior of the most important "
"built-in types."
msgstr ""
"A lista a seguir descreve o comportamento de comparação dos tipos embutidos "
"mais importantes."

#: ../../reference/expressions.rst:1573
msgid ""
"Numbers of built-in numeric types (:ref:`typesnumeric`) and of the standard "
"library types :class:`fractions.Fraction` and :class:`decimal.Decimal` can "
"be compared within and across their types, with the restriction that complex "
"numbers do not support order comparison.  Within the limits of the types "
"involved, they compare mathematically (algorithmically) correct without loss "
"of precision."
msgstr ""
"Números de tipos numéricos embutidos (:ref:`typesnumeric`) e dos tipos de "
"biblioteca padrão :class:`fractions.Fraction` e :class:`decimal.Decimal` "
"podem ser comparados dentro e entre seus tipos, com a restrição que os "
"números complexos não oferecem suporte a comparação de ordens. Dentro dos "
"limites dos tipos envolvidos, eles comparam matematicamente "
"(algoritmicamente) corretos sem perda de precisão."

#: ../../reference/expressions.rst:1580
msgid ""
"The not-a-number values ``float('NaN')`` and ``decimal.Decimal('NaN')`` are "
"special.  Any ordered comparison of a number to a not-a-number value is "
"false. A counter-intuitive implication is that not-a-number values are not "
"equal to themselves.  For example, if ``x = float('NaN')``, ``3 < x``, ``x < "
"3`` and ``x == x`` are all false, while ``x != x`` is true.  This behavior "
"is compliant with IEEE 754."
msgstr ""
"Os valores não numéricos ``float('NaN')`` e ``decimal.Decimal('NaN')`` são "
"especiais. Qualquer comparação ordenada de um número com um valor que não é "
"um número é falsa. Uma implicação contraintuitiva é que os valores que não "
"são numéricos não são iguais a si mesmos. Por exemplo, se ``x = "
"float('NaN')``, ``3 < x``, ``x < 3`` e ``x == x`` são todos falsos, enquanto "
"``x != x`` é verdadeiro. Esse comportamento é compatível com IEEE 754."

#: ../../reference/expressions.rst:1587
msgid ""
"``None`` and :data:`NotImplemented` are singletons.  :PEP:`8` advises that "
"comparisons for singletons should always be done with ``is`` or ``is not``, "
"never the equality operators."
msgstr ""
"``None`` e :data:`NotImplemented` são singletons. :PEP:`8` aconselha que "
"comparações para singletons devem sempre ser feitas com ``is`` ou ``is "
"not``, nunca com os operadores de igualdade."

#: ../../reference/expressions.rst:1591
msgid ""
"Binary sequences (instances of :class:`bytes` or :class:`bytearray`) can be "
"compared within and across their types.  They compare lexicographically "
"using the numeric values of their elements."
msgstr ""
"Sequências binárias (instâncias de :class:`bytes` ou :class:`bytearray`) "
"podem ser comparadas dentro e entre seus tipos. Eles comparam "
"lexicograficamente usando os valores numéricos de seus elementos."

#: ../../reference/expressions.rst:1595
msgid ""
"Strings (instances of :class:`str`) compare lexicographically using the "
"numerical Unicode code points (the result of the built-in function :func:"
"`ord`) of their characters. [#]_"
msgstr ""
"Strings (instâncias de :class:`str`) são comparadas lexicograficamente "
"usando os pontos de código Unicode numéricos (o resultado da função "
"embutida :func:`ord`) de seus caracteres. [#]_"

#: ../../reference/expressions.rst:1599
msgid "Strings and binary sequences cannot be directly compared."
msgstr "Strings e sequências binárias não podem ser comparadas diretamente."

#: ../../reference/expressions.rst:1601
msgid ""
"Sequences (instances of :class:`tuple`, :class:`list`, or :class:`range`) "
"can be compared only within each of their types, with the restriction that "
"ranges do not support order comparison.  Equality comparison across these "
"types results in inequality, and ordering comparison across these types "
"raises :exc:`TypeError`."
msgstr ""
"Sequências (instâncias de :class:`tuple`, :class:`list` ou :class:`range`) "
"podem ser comparadas apenas dentro de cada um de seus tipos, com a restrição "
"de que intervalos não oferecem suporte a comparação de ordem. A comparação "
"de igualdade entre esses tipos resulta em desigualdade, e a comparação "
"ordenada entre esses tipos levanta :exc:`TypeError`."

#: ../../reference/expressions.rst:1607
msgid ""
"Sequences compare lexicographically using comparison of corresponding "
"elements.  The built-in containers typically assume identical objects are "
"equal to themselves.  That lets them bypass equality tests for identical "
"objects to improve performance and to maintain their internal invariants."
msgstr ""
"As sequências são comparadas lexicograficamente usando a comparação de "
"elementos correspondentes. Os contêineres embutidos normalmente presumem que "
"objetos idênticos são iguais a si mesmos. Isso permite ignorar testes de "
"igualdade para objetos idênticos para melhorar o desempenho e manter seus "
"invariantes internos."

#: ../../reference/expressions.rst:1612
msgid ""
"Lexicographical comparison between built-in collections works as follows:"
msgstr ""
"A comparação lexicográfica entre coleções embutidas funciona da seguinte "
"forma:"

#: ../../reference/expressions.rst:1614
msgid ""
"For two collections to compare equal, they must be of the same type, have "
"the same length, and each pair of corresponding elements must compare equal "
"(for example, ``[1,2] == (1,2)`` is false because the type is not the same)."
msgstr ""
"Para que duas coleções sejam comparadas iguais, elas devem ser do mesmo "
"tipo, ter o mesmo comprimento e cada par de elementos correspondentes deve "
"ser comparado igual (por exemplo, ``[1,2] == (1,2)`` é false porque o tipo "
"não é o mesmo)."

#: ../../reference/expressions.rst:1619
msgid ""
"Collections that support order comparison are ordered the same as their "
"first unequal elements (for example, ``[1,2,x] <= [1,2,y]`` has the same "
"value as ``x <= y``).  If a corresponding element does not exist, the "
"shorter collection is ordered first (for example, ``[1,2] < [1,2,3]`` is "
"true)."
msgstr ""
"Coleções que oferecem suporte a comparação de ordem são ordenadas da mesma "
"forma que seus primeiros elementos desiguais (por exemplo, ``[1,2,x] <= [1,2,"
"y]`` tem o mesmo valor que ``x <= y``). Se um elemento correspondente não "
"existir, a coleção mais curta é ordenada primeiro (por exemplo, ``[1,2] < "
"[1,2,3]`` é verdadeiro)."

#: ../../reference/expressions.rst:1625
msgid ""
"Mappings (instances of :class:`dict`) compare equal if and only if they have "
"equal ``(key, value)`` pairs. Equality comparison of the keys and values "
"enforces reflexivity."
msgstr ""
"Mapeamentos (instâncias de :class:`dict`) comparam iguais se e somente se "
"eles tiverem pares ``(chave, valor)`` iguais. A comparação de igualdade das "
"chaves e valores reforça a reflexividade."

#: ../../reference/expressions.rst:1629
msgid ""
"Order comparisons (``<``, ``>``, ``<=``, and ``>=``) raise :exc:`TypeError`."
msgstr ""
"Comparações de ordem (``<``, ``>``, ``<=`` e ``>=``) levantam :exc:"
"`TypeError`."

#: ../../reference/expressions.rst:1631
msgid ""
"Sets (instances of :class:`set` or :class:`frozenset`) can be compared "
"within and across their types."
msgstr ""
"Conjuntos (instâncias de :class:`set` ou :class:`frozenset`) podem ser "
"comparados dentro e entre seus tipos."

#: ../../reference/expressions.rst:1634
msgid ""
"They define order comparison operators to mean subset and superset tests.  "
"Those relations do not define total orderings (for example, the two sets "
"``{1,2}`` and ``{2,3}`` are not equal, nor subsets of one another, nor "
"supersets of one another).  Accordingly, sets are not appropriate arguments "
"for functions which depend on total ordering (for example, :func:`min`, :"
"func:`max`, and :func:`sorted` produce undefined results given a list of "
"sets as inputs)."
msgstr ""
"Eles definem operadores de comparação de ordem para significar testes de "
"subconjunto e superconjunto. Essas relações não definem ordenações totais "
"(por exemplo, os dois conjuntos ``{1,2}`` e ``{2,3}`` não são iguais, nem "
"subconjuntos um do outro, nem superconjuntos um do outro). Consequentemente, "
"conjuntos não são argumentos apropriados para funções que dependem de "
"ordenação total (por exemplo, :func:`min`, :func:`max` e :func:`sorted` "
"produzem resultados indefinidos dada uma lista de conjuntos como entradas) ."

#: ../../reference/expressions.rst:1642
msgid "Comparison of sets enforces reflexivity of its elements."
msgstr "A comparação de conjuntos reforça a reflexividade de seus elementos."

#: ../../reference/expressions.rst:1644
msgid ""
"Most other built-in types have no comparison methods implemented, so they "
"inherit the default comparison behavior."
msgstr ""
"A maioria dos outros tipos embutidos não possui métodos de comparação "
"implementados, portanto, eles herdam o comportamento de comparação padrão."

#: ../../reference/expressions.rst:1647
msgid ""
"User-defined classes that customize their comparison behavior should follow "
"some consistency rules, if possible:"
msgstr ""
"As classes definidas pelo usuário que personalizam seu comportamento de "
"comparação devem seguir algumas regras de consistência, se possível:"

#: ../../reference/expressions.rst:1650
msgid ""
"Equality comparison should be reflexive. In other words, identical objects "
"should compare equal:"
msgstr ""
"A comparação da igualdade deve ser reflexiva. Em outras palavras, objetos "
"idênticos devem ser comparados iguais:"

#: ../../reference/expressions.rst:1653
msgid "``x is y`` implies ``x == y``"
msgstr "``x is y`` implica em ``x == y``"

#: ../../reference/expressions.rst:1655
msgid ""
"Comparison should be symmetric. In other words, the following expressions "
"should have the same result:"
msgstr ""
"A comparação deve ser simétrica. Em outras palavras, as seguintes expressões "
"devem ter o mesmo resultado:"

#: ../../reference/expressions.rst:1658
msgid "``x == y`` and ``y == x``"
msgstr "``x == y`` e ``y == x``"

#: ../../reference/expressions.rst:1660
msgid "``x != y`` and ``y != x``"
msgstr "``x != y`` e ``y != x``"

#: ../../reference/expressions.rst:1662
msgid "``x < y`` and ``y > x``"
msgstr "``x < y`` e ``y > x``"

#: ../../reference/expressions.rst:1664
msgid "``x <= y`` and ``y >= x``"
msgstr "``x <= y`` e ``y >= x``"

#: ../../reference/expressions.rst:1666
msgid ""
"Comparison should be transitive. The following (non-exhaustive) examples "
"illustrate that:"
msgstr ""
"A comparação deve ser transitiva. Os seguintes exemplos (não exaustivos) "
"ilustram isso:"

#: ../../reference/expressions.rst:1669
msgid "``x > y and y > z`` implies ``x > z``"
msgstr "``x > y and y > z`` implica em ``x > z``"

#: ../../reference/expressions.rst:1671
msgid "``x < y and y <= z`` implies ``x < z``"
msgstr "``x < y and y <= z`` implica em ``x < z``"

#: ../../reference/expressions.rst:1673
msgid ""
"Inverse comparison should result in the boolean negation. In other words, "
"the following expressions should have the same result:"
msgstr ""
"A comparação inversa deve resultar na negação booleana. Em outras palavras, "
"as seguintes expressões devem ter o mesmo resultado:"

#: ../../reference/expressions.rst:1676
msgid "``x == y`` and ``not x != y``"
msgstr "``x == y`` e ``not x != y``"

#: ../../reference/expressions.rst:1678
msgid "``x < y`` and ``not x >= y`` (for total ordering)"
msgstr "``x < y`` e ``not x >= y`` (pra classificação total)"

#: ../../reference/expressions.rst:1680
msgid "``x > y`` and ``not x <= y`` (for total ordering)"
msgstr "``x > y`` e ``not x <= y`` (pra classificação total)"

#: ../../reference/expressions.rst:1682
msgid ""
"The last two expressions apply to totally ordered collections (e.g. to "
"sequences, but not to sets or mappings). See also the :func:`~functools."
"total_ordering` decorator."
msgstr ""
"As duas últimas expressões aplicam-se a coleções totalmente ordenadas (por "
"exemplo, a sequências, mas não a conjuntos ou mapeamentos). Veja também o "
"decorador :func:`~functools.total_ordering`."

#: ../../reference/expressions.rst:1686
msgid ""
"The :func:`hash` result should be consistent with equality. Objects that are "
"equal should either have the same hash value, or be marked as unhashable."
msgstr ""
"O resultado :func:`hash` deve ser consistente com a igualdade. Objetos "
"iguais devem ter o mesmo valor de hash ou ser marcados como não-hasheáveis."

#: ../../reference/expressions.rst:1690
msgid ""
"Python does not enforce these consistency rules. In fact, the not-a-number "
"values are an example for not following these rules."
msgstr ""
"Python não impõe essas regras de consistência. Na verdade, os valores não "
"numéricos são um exemplo de não cumprimento dessas regras."

#: ../../reference/expressions.rst:1699
msgid "Membership test operations"
msgstr "Operações de teste de pertinência"

#: ../../reference/expressions.rst:1701
msgid ""
"The operators :keyword:`in` and :keyword:`not in` test for membership.  ``x "
"in s`` evaluates to ``True`` if *x* is a member of *s*, and ``False`` "
"otherwise. ``x not in s`` returns the negation of ``x in s``.  All built-in "
"sequences and set types support this as well as dictionary, for which :"
"keyword:`!in` tests whether the dictionary has a given key. For container "
"types such as list, tuple, set, frozenset, dict, or collections.deque, the "
"expression ``x in y`` is equivalent to ``any(x is e or x == e for e in y)``."
msgstr ""
"Os operadores :keyword:`in` e :keyword:`not in` testam se um operando é "
"membro ou não de outro. ``x in s`` é avaliado como ``True`` se *x* for "
"membro de *s*, e ``False`` caso contrário. ``x not in s`` retorna a negação "
"de ``x in s``. Todas as sequências e tipos de conjuntos embutidos oferecem "
"suporte a isso, assim como o dicionário, para o qual :keyword:`!in` testa se "
"o dicionário tem uma determinada chave. Para tipos de contêiner como list, "
"tuple, set, frozenset, dict ou Collections.deque, a expressão ``x in y`` é "
"equivalente a ``any(x is e or x == e for e in y)``."

#: ../../reference/expressions.rst:1709
msgid ""
"For the string and bytes types, ``x in y`` is ``True`` if and only if *x* is "
"a substring of *y*.  An equivalent test is ``y.find(x) != -1``.  Empty "
"strings are always considered to be a substring of any other string, so "
"``\"\" in \"abc\"`` will return ``True``."
msgstr ""
"Para os tipos string e bytes, ``x in y`` é ``True`` se e somente se *x* for "
"uma substring de *y*. Um teste equivalente é ``y.find(x) != -1``. Strings "
"vazias são sempre consideradas uma substring de qualquer outra string, então "
"``\"\" in \"abc\"`` retornará ``True``."

#: ../../reference/expressions.rst:1714
msgid ""
"For user-defined classes which define the :meth:`~object.__contains__` "
"method, ``x in y`` returns ``True`` if ``y.__contains__(x)`` returns a true "
"value, and ``False`` otherwise."
msgstr ""
"Para classes definidas pelo usuário que definem o método :meth:`~object."
"__contains__`, ``x in y`` retorna ``True`` se ``y.__contains__(x)`` retorna "
"um valor verdadeiro, e ``False`` caso contrário."

#: ../../reference/expressions.rst:1718
msgid ""
"For user-defined classes which do not define :meth:`~object.__contains__` "
"but do define :meth:`~object.__iter__`, ``x in y`` is ``True`` if some value "
"``z``, for which the expression ``x is z or x == z`` is true, is produced "
"while iterating over ``y``. If an exception is raised during the iteration, "
"it is as if :keyword:`in` raised that exception."
msgstr ""
"Para classes definidas pelo usuário que não definem :meth:`~object."
"__contains__`, mas definem :meth:`~object.__iter__`, ``x in y`` é ``True`` "
"se algum valor ``z``, para a qual a expressão ``x is z or x == z`` é "
"verdadeira, é produzida durante a iteração sobre ``y``. Se uma exceção for "
"levantada durante a iteração, é como se :keyword:`in` tivesse levantado essa "
"exceção."

#: ../../reference/expressions.rst:1724
msgid ""
"Lastly, the old-style iteration protocol is tried: if a class defines :meth:"
"`~object.__getitem__`, ``x in y`` is ``True`` if and only if there is a non-"
"negative integer index *i* such that ``x is y[i] or x == y[i]``, and no "
"lower integer index raises the :exc:`IndexError` exception.  (If any other "
"exception is raised, it is as if :keyword:`in` raised that exception)."
msgstr ""
"Por último, o protocolo de iteração de estilo antigo é tentado: se uma "
"classe define :meth:`~object.__getitem__`, ``x in y`` é ``True`` se, e "
"somente se, houver um índice inteiro não negativo *i* tal que ``x is y[i] or "
"x == y[i]``, e nenhum índice inteiro inferior levanta a exceção :exc:"
"`IndexError`. (Se qualquer outra exceção for levantada, é como se :keyword:"
"`in` levantasse essa exceção)."

#: ../../reference/expressions.rst:1736
msgid ""
"The operator :keyword:`not in` is defined to have the inverse truth value "
"of :keyword:`in`."
msgstr ""
"O operador :keyword:`not in` é definido para ter o valor verdade inverso de :"
"keyword:`in`."

#: ../../reference/expressions.rst:1749
msgid "Identity comparisons"
msgstr "Comparações de identidade"

#: ../../reference/expressions.rst:1751
msgid ""
"The operators :keyword:`is` and :keyword:`is not` test for an object's "
"identity: ``x is y`` is true if and only if *x* and *y* are the same "
"object.  An Object's identity is determined using the :meth:`id` function.  "
"``x is not y`` yields the inverse truth value. [#]_"
msgstr ""
"Os operadores :keyword:`is` e :keyword:`is not` testam a identidade de um "
"objeto: ``x is y`` é verdadeiro se, e somente se, *x* e *y* são o mesmo "
"objeto. A identidade de um objeto é determinada usando a função :meth:`id`. "
"``x is not y`` produz o valor verdade inverso. [#]_"

#: ../../reference/expressions.rst:1763
msgid "Boolean operations"
msgstr "Operações booleanas"

#: ../../reference/expressions.rst:1774
msgid ""
"In the context of Boolean operations, and also when expressions are used by "
"control flow statements, the following values are interpreted as false: "
"``False``, ``None``, numeric zero of all types, and empty strings and "
"containers (including strings, tuples, lists, dictionaries, sets and "
"frozensets).  All other values are interpreted as true.  User-defined "
"objects can customize their truth value by providing a :meth:`~object."
"__bool__` method."
msgstr ""
"No contexto de operações booleanas, e também quando expressões são usadas "
"por instruções de fluxo de controle, os seguintes valores são interpretados "
"como falsos: ``False``, ``None``, zero numérico de todos os tipos e strings "
"e contêineres vazios (incluindo strings, tuplas, listas, dicionários, "
"conjuntos e frozensets). Todos os outros valores são interpretados como "
"verdadeiros. Objetos definidos pelo usuário podem personalizar seu valor "
"verdade fornecendo um método :meth:`~object.__bool__`."

#: ../../reference/expressions.rst:1783
msgid ""
"The operator :keyword:`not` yields ``True`` if its argument is false, "
"``False`` otherwise."
msgstr ""
"O operador :keyword:`not` produz ``True`` se seu argumento for falso, "
"``False`` caso contrário."

#: ../../reference/expressions.rst:1788
msgid ""
"The expression ``x and y`` first evaluates *x*; if *x* is false, its value "
"is returned; otherwise, *y* is evaluated and the resulting value is returned."
msgstr ""
"A expressão ``x and y`` primeiro avalia *x*; se *x* for falso, seu valor "
"será retornado; caso contrário, *y* será avaliado e o valor resultante será "
"retornado."

#: ../../reference/expressions.rst:1793
msgid ""
"The expression ``x or y`` first evaluates *x*; if *x* is true, its value is "
"returned; otherwise, *y* is evaluated and the resulting value is returned."
msgstr ""
"A expressão ``x or y`` primeiro avalia *x*; se *x* for verdadeiro, seu valor "
"será retornado; caso contrário, *y* será avaliado e o valor resultante será "
"retornado."

#: ../../reference/expressions.rst:1796
msgid ""
"Note that neither :keyword:`and` nor :keyword:`or` restrict the value and "
"type they return to ``False`` and ``True``, but rather return the last "
"evaluated argument.  This is sometimes useful, e.g., if ``s`` is a string "
"that should be replaced by a default value if it is empty, the expression "
"``s or 'foo'`` yields the desired value.  Because :keyword:`not` has to "
"create a new value, it returns a boolean value regardless of the type of its "
"argument (for example, ``not 'foo'`` produces ``False`` rather than ``''``.)"
msgstr ""
"Observe que nem :keyword:`and` nem :keyword:`or` restringem o valor e o tipo "
"que retornam para ``False`` e ``True``, mas sim retornam o último argumento "
"avaliado. Isso às vezes é útil, por exemplo, se ``s`` é uma string que deve "
"ser substituída por um valor padrão se estiver vazia, a expressão ``s or "
"'foo'`` produz o valor desejado. Como :keyword:`not` precisa criar um novo "
"valor, ele retorna um valor booleano independente do tipo de seu argumento "
"(por exemplo, ``not 'foo'`` produz ``False`` em vez de ``''``.)"

#: ../../reference/expressions.rst:1812
msgid "Assignment expressions"
msgstr "Expressões de atribuição"

#: ../../reference/expressions.rst:1817
msgid ""
"An assignment expression (sometimes also called a \"named expression\" or "
"\"walrus\") assigns an :token:`~python-grammar:expression` to an :token:"
"`~python-grammar:identifier`, while also returning the value of the :token:"
"`~python-grammar:expression`."
msgstr ""
"Uma expressão de atribuição (às vezes também chamada de \"expressão "
"nomeada\" ou \"morsa\") atribui um :token:`~python-grammar:expression` a um :"
"token:`~python-grammar:identifier`, ao mesmo tempo que retorna o valor de :"
"token:`~python-grammar:expression`."

#: ../../reference/expressions.rst:1822
msgid "One common use case is when handling matched regular expressions:"
msgstr ""
"Um caso de uso comum é ao lidar com expressões regulares correspondentes:"

#: ../../reference/expressions.rst:1824
msgid ""
"if matching := pattern.search(data):\n"
"    do_something(matching)"
msgstr ""

#: ../../reference/expressions.rst:1829
msgid "Or, when processing a file stream in chunks:"
msgstr "Ou, ao processar um fluxo de arquivos em partes:"

#: ../../reference/expressions.rst:1831
msgid ""
"while chunk := file.read(9000):\n"
"    process(chunk)"
msgstr ""

#: ../../reference/expressions.rst:1836
msgid ""
"Assignment expressions must be surrounded by parentheses when used as "
"expression statements and when used as sub-expressions in slicing, "
"conditional, lambda, keyword-argument, and comprehension-if expressions and "
"in ``assert``, ``with``, and ``assignment`` statements. In all other places "
"where they can be used, parentheses are not required, including in ``if`` "
"and ``while`` statements."
msgstr ""
"As expressões de atribuição devem ser colocadas entre parênteses quando "
"usadas como instruções de expressão e quando usadas como subexpressões em "
"expressões de fatiamento, condicionais, de lambda, de argumento nomeado e de "
"if de compreensão e em instruções ``assert``, ``with`` e ``assignment``. Em "
"todos os outros lugares onde eles podem ser usados, os parênteses não são "
"necessários, inclusive nas instruções ``if`` e ``while``."

#: ../../reference/expressions.rst:1844
msgid "See :pep:`572` for more details about assignment expressions."
msgstr "Veja :pep:`572` para mais detalhes sobre expressões de atribuição."

#: ../../reference/expressions.rst:1851
msgid "Conditional expressions"
msgstr "Expressões condicionais"

#: ../../reference/expressions.rst:1863
msgid ""
"Conditional expressions (sometimes called a \"ternary operator\") have the "
"lowest priority of all Python operations."
msgstr ""
"Expressões condicionais (às vezes chamadas de \"operador ternário\") têm a "
"prioridade mais baixa de todas as operações Python."

#: ../../reference/expressions.rst:1866
msgid ""
"The expression ``x if C else y`` first evaluates the condition, *C* rather "
"than *x*. If *C* is true, *x* is evaluated and its value is returned; "
"otherwise, *y* is evaluated and its value is returned."
msgstr ""
"A expressão ``x if C else y`` primeiro avalia a condição, *C* em vez de *x*. "
"Se *C* for verdadeiro, *x* é avaliado e seu valor é retornado; caso "
"contrário, *y* será avaliado e seu valor será retornado."

#: ../../reference/expressions.rst:1870
msgid "See :pep:`308` for more details about conditional expressions."
msgstr "Veja :pep:`308` para mais detalhes sobre expressões condicionais."

#: ../../reference/expressions.rst:1877
msgid "Lambdas"
msgstr "Lambdas"

#: ../../reference/expressions.rst:1888
msgid ""
"Lambda expressions (sometimes called lambda forms) are used to create "
"anonymous functions. The expression ``lambda parameters: expression`` yields "
"a function object.  The unnamed object behaves like a function object "
"defined with:"
msgstr ""
"Expressões lambda (às vezes chamadas de funções lambda) são usadas para "
"criar funções anônimas. A expressão ``lambda parameters: expression`` produz "
"um objeto função. O objeto sem nome se comporta como um objeto de função "
"definido com:"

#: ../../reference/expressions.rst:1892
msgid ""
"def <lambda>(parameters):\n"
"    return expression"
msgstr ""

#: ../../reference/expressions.rst:1897
msgid ""
"See section :ref:`function` for the syntax of parameter lists.  Note that "
"functions created with lambda expressions cannot contain statements or "
"annotations."
msgstr ""
"Veja a seção :ref:`function` para a sintaxe das listas de parâmetros. "
"Observe que as funções criadas com expressões lambda não podem conter "
"instruções ou anotações."

#: ../../reference/expressions.rst:1905
msgid "Expression lists"
msgstr "Listas de expressões"

#: ../../reference/expressions.rst:1921
msgid ""
"Except when part of a list or set display, an expression list containing at "
"least one comma yields a tuple.  The length of the tuple is the number of "
"expressions in the list.  The expressions are evaluated from left to right."
msgstr ""
"Exceto quando parte de uma sintaxe de criação de lista ou conjunto, uma "
"lista de expressões contendo pelo menos uma vírgula produz uma tupla. O "
"comprimento da tupla é o número de expressões na lista. As expressões são "
"avaliadas da esquerda para a direita."

#: ../../reference/expressions.rst:1930
msgid ""
"An asterisk ``*`` denotes :dfn:`iterable unpacking`.  Its operand must be "
"an :term:`iterable`.  The iterable is expanded into a sequence of items, "
"which are included in the new tuple, list, or set, at the site of the "
"unpacking."
msgstr ""
"Um asterisco ``*`` denota :dfn:`desempacotamento de iterável`. Seu operando "
"deve ser um :term:`iterável`. O iterável é expandido em uma sequência de "
"itens, que são incluídos na nova tupla, lista ou conjunto, no local do "
"desempacotamento."

#: ../../reference/expressions.rst:1935
msgid ""
"Iterable unpacking in expression lists, originally proposed by :pep:`448`."
msgstr ""
"Desempacotamento de iterável em listas de expressões, originalmente proposta "
"pela :pep:`448`."

#: ../../reference/expressions.rst:1938
msgid "Any item in an expression list may be starred. See :pep:`646`."
msgstr ""

#: ../../reference/expressions.rst:1943
msgid ""
"A trailing comma is required only to create a one-item tuple, such as ``1,"
"``; it is optional in all other cases. A single expression without a "
"trailing comma doesn't create a tuple, but rather yields the value of that "
"expression. (To create an empty tuple, use an empty pair of parentheses: "
"``()``.)"
msgstr ""
"Uma vírgula final é necessária apenas para criar uma tupla de um item, como "
"``1,``; é opcional em todos os outros casos. Uma única expressão sem vírgula "
"final não cria uma tupla, mas produz o valor dessa expressão. (Para criar "
"uma tupla vazia, use um par vazio de parênteses: ``()``.)"

#: ../../reference/expressions.rst:1954
msgid "Evaluation order"
msgstr "Ordem de avaliação"

#: ../../reference/expressions.rst:1958
msgid ""
"Python evaluates expressions from left to right.  Notice that while "
"evaluating an assignment, the right-hand side is evaluated before the left-"
"hand side."
msgstr ""
"Python avalia expressões da esquerda para a direita. Observe que ao avaliar "
"uma tarefa, o lado direito é avaliado antes do lado esquerdo."

#: ../../reference/expressions.rst:1961
msgid ""
"In the following lines, expressions will be evaluated in the arithmetic "
"order of their suffixes::"
msgstr ""
"Nas linhas a seguir, as expressões serão avaliadas na ordem aritmética de "
"seus sufixos::"

#: ../../reference/expressions.rst:1964
msgid ""
"expr1, expr2, expr3, expr4\n"
"(expr1, expr2, expr3, expr4)\n"
"{expr1: expr2, expr3: expr4}\n"
"expr1 + expr2 * (expr3 - expr4)\n"
"expr1(expr2, expr3, *expr4, **expr5)\n"
"expr3, expr4 = expr1, expr2"
msgstr ""

#: ../../reference/expressions.rst:1975
msgid "Operator precedence"
msgstr "Precedência de operadores"

#: ../../reference/expressions.rst:1980
msgid ""
"The following table summarizes the operator precedence in Python, from "
"highest precedence (most binding) to lowest precedence (least binding).  "
"Operators in the same box have the same precedence.  Unless the syntax is "
"explicitly given, operators are binary.  Operators in the same box group "
"left to right (except for exponentiation and conditional expressions, which "
"group from right to left)."
msgstr ""
"A tabela a seguir resume a precedência de operadores no Python, da "
"precedência mais alta (mais vinculativa) à precedência mais baixa (menos "
"vinculativa). Os operadores na mesma caixa têm a mesma precedência. A menos "
"que a sintaxe seja fornecida explicitamente, os operadores são binários. Os "
"operadores na mesma caixa agrupam-se da esquerda para a direita (exceto "
"exponenciação e expressões condicionais, que agrupam da direita para a "
"esquerda)."

#: ../../reference/expressions.rst:1986
msgid ""
"Note that comparisons, membership tests, and identity tests, all have the "
"same precedence and have a left-to-right chaining feature as described in "
"the :ref:`comparisons` section."
msgstr ""
"Observe que comparações, testes de pertinência e testes de identidade têm "
"todos a mesma precedência e possuem um recurso de encadeamento da esquerda "
"para a direita, conforme descrito na seção :ref:`comparisons`."

#: ../../reference/expressions.rst:1992
msgid "Operator"
msgstr "Operador"

#: ../../reference/expressions.rst:1992
msgid "Description"
msgstr "Descrição"

#: ../../reference/expressions.rst:1994
msgid "``(expressions...)``,"
msgstr "``(expressions...)``,"

#: ../../reference/expressions.rst:1996
msgid "``[expressions...]``, ``{key: value...}``, ``{expressions...}``"
msgstr "``[expressões...]``, ``{chave: valor...}``, ``{expressões...}``"

#: ../../reference/expressions.rst:1994
msgid ""
"Binding or parenthesized expression, list display, dictionary display, set "
"display"
msgstr ""
"Expressão entre parênteses ou de ligação, sintaxe de criação de lista, "
"sintaxe de criação de dicionário, sintaxe de criação de conjunto"

#: ../../reference/expressions.rst:2000
msgid "``x[index]``, ``x[index:index]``, ``x(arguments...)``, ``x.attribute``"
msgstr ""
"``x[índice]``, ``x[índice:índice]``, ``x(argumentos...)``, ``x.atributo``"

#: ../../reference/expressions.rst:2000
msgid "Subscription, slicing, call, attribute reference"
msgstr "subscrição, fatiamento, chamada, referência a atributo"

#: ../../reference/expressions.rst:2003
msgid ":keyword:`await x <await>`"
msgstr ":keyword:`await x <await>`"

#: ../../reference/expressions.rst:2005
msgid "``**``"
msgstr "``**``"

#: ../../reference/expressions.rst:2005
msgid "Exponentiation [#]_"
msgstr "Exponenciação [#]_"

#: ../../reference/expressions.rst:2007
msgid "``+x``, ``-x``, ``~x``"
msgstr "``+x``, ``-x``, ``~x``"

#: ../../reference/expressions.rst:2007
msgid "Positive, negative, bitwise NOT"
msgstr "positivo, negativo, NEGAÇÃO (NOT) bit a bit"

#: ../../reference/expressions.rst:2009
msgid "``*``, ``@``, ``/``, ``//``, ``%``"
msgstr "``*``, ``@``, ``/``, ``//``, ``%``"

#: ../../reference/expressions.rst:2009
msgid ""
"Multiplication, matrix multiplication, division, floor division, remainder "
"[#]_"
msgstr ""
"Multiplicação, multiplicação de matrizes, divisão, divisão pelo piso, resto "
"[#]_"

#: ../../reference/expressions.rst:2013
msgid "``+``, ``-``"
msgstr "``+``, ``-``"

#: ../../reference/expressions.rst:2013
msgid "Addition and subtraction"
msgstr "Adição e subtração"

#: ../../reference/expressions.rst:2015
msgid "``<<``, ``>>``"
msgstr "``<<``, ``>>``"

#: ../../reference/expressions.rst:2015
msgid "Shifts"
msgstr "Deslocamentos"

#: ../../reference/expressions.rst:2017
msgid "``&``"
msgstr "``&``"

#: ../../reference/expressions.rst:2017
msgid "Bitwise AND"
msgstr "E (AND) bit a bit"

#: ../../reference/expressions.rst:2019
msgid "``^``"
msgstr "``^``"

#: ../../reference/expressions.rst:2019
msgid "Bitwise XOR"
msgstr "OU EXCLUSIVO (XOR) bit a bit"

#: ../../reference/expressions.rst:2021
msgid "``|``"
msgstr "``|``"

#: ../../reference/expressions.rst:2021
msgid "Bitwise OR"
msgstr "OU (OR) bit a bit"

#: ../../reference/expressions.rst:2023
msgid ""
":keyword:`in`, :keyword:`not in`, :keyword:`is`, :keyword:`is not`, ``<``, "
"``<=``, ``>``, ``>=``, ``!=``, ``==``"
msgstr ""
":keyword:`in`, :keyword:`not in`, :keyword:`is`, :keyword:`is not`, ``<``, "
"``<=``, ``>``, ``>=``, ``!=``, ``==``"

#: ../../reference/expressions.rst:2023
msgid "Comparisons, including membership tests and identity tests"
msgstr "Comparações, incluindo testes de pertinência e testes de identidade"

#: ../../reference/expressions.rst:2027
msgid ":keyword:`not x <not>`"
msgstr ":keyword:`not x <not>`"

#: ../../reference/expressions.rst:2027
msgid "Boolean NOT"
msgstr "NEGAÇÃO (NOT) booleana"

#: ../../reference/expressions.rst:2029
msgid ":keyword:`and`"
msgstr ":keyword:`and`"

#: ../../reference/expressions.rst:2029
msgid "Boolean AND"
msgstr "E (AND) booleano"

#: ../../reference/expressions.rst:2031
msgid ":keyword:`or`"
msgstr ":keyword:`or`"

#: ../../reference/expressions.rst:2031
msgid "Boolean OR"
msgstr "OU (OR) booleano"

#: ../../reference/expressions.rst:2033
msgid ":keyword:`if <if_expr>` -- :keyword:`!else`"
msgstr ":keyword:`if <if_expr>` -- :keyword:`!else`"

#: ../../reference/expressions.rst:2033
msgid "Conditional expression"
msgstr "Expressão condicional"

#: ../../reference/expressions.rst:2035
msgid ":keyword:`lambda`"
msgstr ":keyword:`lambda`"

#: ../../reference/expressions.rst:2035
msgid "Lambda expression"
msgstr "Expressão lambda"

#: ../../reference/expressions.rst:2037
msgid "``:=``"
msgstr "``:=``"

#: ../../reference/expressions.rst:2037
msgid "Assignment expression"
msgstr "Expressão de atribuição"

#: ../../reference/expressions.rst:2042
msgid "Footnotes"
msgstr "Notas de rodapé"

#: ../../reference/expressions.rst:2043
msgid ""
"While ``abs(x%y) < abs(y)`` is true mathematically, for floats it may not be "
"true numerically due to roundoff.  For example, and assuming a platform on "
"which a Python float is an IEEE 754 double-precision number, in order that "
"``-1e-100 % 1e100`` have the same sign as ``1e100``, the computed result is "
"``-1e-100 + 1e100``, which is numerically exactly equal to ``1e100``.  The "
"function :func:`math.fmod` returns a result whose sign matches the sign of "
"the first argument instead, and so returns ``-1e-100`` in this case. Which "
"approach is more appropriate depends on the application."
msgstr ""
"Embora ``abs(x%y) < abs(y)`` seja verdadeiro matematicamente, para números "
"flutuantes pode não ser verdadeiro numericamente devido ao arredondamento. "
"Por exemplo, e presumindo uma plataforma na qual um float Python seja um "
"número de precisão dupla IEEE 754, para que ``-1e-100 % 1e100`` tenha o "
"mesmo sinal que ``1e100``, o resultado calculado é ``-1e-100 + 1e100``, que "
"é numericamente exatamente igual a ``1e100``. A função :func:`math.fmod` "
"retorna um resultado cujo sinal corresponde ao sinal do primeiro argumento "
"e, portanto, retorna ``-1e-100`` neste caso. Qual abordagem é mais "
"apropriada depende da aplicação."

#: ../../reference/expressions.rst:2052
msgid ""
"If x is very close to an exact integer multiple of y, it's possible for ``x//"
"y`` to be one larger than ``(x-x%y)//y`` due to rounding.  In such cases, "
"Python returns the latter result, in order to preserve that ``divmod(x,y)[0] "
"* y + x % y`` be very close to ``x``."
msgstr ""
"Se x estiver muito próximo de um múltiplo inteiro exato de y, é possível que "
"``x//y`` seja maior que ``(x-x%y)//y`` devido ao arredondamento. Nesses "
"casos, Python retorna o último resultado, para preservar que ``divmod(x,y)"
"[0] * y + x % y`` esteja muito próximo de ``x``."

#: ../../reference/expressions.rst:2057
msgid ""
"The Unicode standard distinguishes between :dfn:`code points` (e.g. U+0041) "
"and :dfn:`abstract characters` (e.g. \"LATIN CAPITAL LETTER A\"). While most "
"abstract characters in Unicode are only represented using one code point, "
"there is a number of abstract characters that can in addition be represented "
"using a sequence of more than one code point.  For example, the abstract "
"character \"LATIN CAPITAL LETTER C WITH CEDILLA\" can be represented as a "
"single :dfn:`precomposed character` at code position U+00C7, or as a "
"sequence of a :dfn:`base character` at code position U+0043 (LATIN CAPITAL "
"LETTER C), followed by a :dfn:`combining character` at code position U+0327 "
"(COMBINING CEDILLA)."
msgstr ""
"O padrão Unicode distingue entre :dfn:`pontos de código` (por exemplo, "
"U+0041) e :dfn:`caracteres abstratos` (por exemplo, \"LATIN CAPITAL LETTER "
"A\"). Embora a maioria dos caracteres abstratos em Unicode sejam "
"representados apenas por meio de um ponto de código, há vários caracteres "
"abstratos que também podem ser representados por meio de uma sequência de "
"mais de um ponto de código. Por exemplo, o caractere abstrato \"LATIN "
"CAPITAL LETTER C WITH CEDILLA\" pode ser representado como um único :dfn:"
"`caractere pré-composto` na posição de código U+00C7, ou como uma sequência "
"de um :dfn:`caractere base` na posição de código U+0043 (LATIN CAPITAL "
"LETTER C), seguido por um :dfn:`caractere de combinação` na posição de "
"código U+0327 (COMBINING CEDILLA)."

#: ../../reference/expressions.rst:2068
msgid ""
"The comparison operators on strings compare at the level of Unicode code "
"points. This may be counter-intuitive to humans.  For example, ``\"\\u00C7\" "
"== \"\\u0043\\u0327\"`` is ``False``, even though both strings represent the "
"same abstract character \"LATIN CAPITAL LETTER C WITH CEDILLA\"."
msgstr ""
"Os operadores de comparação em strings são comparados no nível dos pontos de "
"código Unicode. Isso pode ser contraintuitivo para os humanos. Por exemplo, "
"``\"\\u00C7\" == \"\\u0043\\u0327\"`` é ``False``, mesmo que ambas as "
"strings representem o mesmo caractere abstrato \"LATIN CAPITAL LETTER C WITH "
"CEDILLA\"."

#: ../../reference/expressions.rst:2073
msgid ""
"To compare strings at the level of abstract characters (that is, in a way "
"intuitive to humans), use :func:`unicodedata.normalize`."
msgstr ""
"Para comparar strings no nível de caracteres abstratos (ou seja, de uma "
"forma intuitiva para humanos), use :func:`unicodedata.normalize`."

#: ../../reference/expressions.rst:2076
msgid ""
"Due to automatic garbage-collection, free lists, and the dynamic nature of "
"descriptors, you may notice seemingly unusual behaviour in certain uses of "
"the :keyword:`is` operator, like those involving comparisons between "
"instance methods, or constants.  Check their documentation for more info."
msgstr ""
"Devido à coleta de lixo automática, às listas livres e à natureza dinâmica "
"dos descritores, você pode notar um comportamento aparentemente incomum em "
"certos usos do operador :keyword:`is`, como aqueles que envolvem comparações "
"entre métodos de instância ou constantes. Confira a documentação para obter "
"mais informações."

#: ../../reference/expressions.rst:2081
msgid ""
"The power operator ``**`` binds less tightly than an arithmetic or bitwise "
"unary operator on its right, that is, ``2**-1`` is ``0.5``."
msgstr ""
"O operador de potência ``**`` liga-se com menos força do que um operador "
"aritmético ou unário bit a bit à sua direita, ou seja, ``2**-1`` é ``0.5``."

#: ../../reference/expressions.rst:2084
msgid ""
"The ``%`` operator is also used for string formatting; the same precedence "
"applies."
msgstr ""
"O operador ``%`` também é usado para formatação de strings; a mesma "
"precedência se aplica."

#: ../../reference/expressions.rst:8 ../../reference/expressions.rst:393
#: ../../reference/expressions.rst:448 ../../reference/expressions.rst:1765
#: ../../reference/expressions.rst:1853 ../../reference/expressions.rst:1879
#: ../../reference/expressions.rst:1907
msgid "expression"
msgstr "expressão"

#: ../../reference/expressions.rst:8
msgid "BNF"
msgstr "BNF"

#: ../../reference/expressions.rst:28 ../../reference/expressions.rst:1257
#: ../../reference/expressions.rst:1305
msgid "arithmetic"
msgstr "aritmética"

#: ../../reference/expressions.rst:28
msgid "conversion"
msgstr "conversão"

#: ../../reference/expressions.rst:51
msgid "atom"
msgstr "átomo"

#: ../../reference/expressions.rst:68 ../../reference/expressions.rst:82
msgid "name"
msgstr "nome"

#: ../../reference/expressions.rst:68
msgid "identifier"
msgstr "identificador"

#: ../../reference/expressions.rst:74 ../../reference/expressions.rst:569
#: ../../reference/expressions.rst:624 ../../reference/expressions.rst:753
#: ../../reference/expressions.rst:805 ../../reference/expressions.rst:851
#: ../../reference/expressions.rst:1294 ../../reference/expressions.rst:1343
#: ../../reference/expressions.rst:1439
msgid "exception"
msgstr "exceção"

#: ../../reference/expressions.rst:74
msgid "NameError"
msgstr "NameError"

#: ../../reference/expressions.rst:82
msgid "mangling"
msgstr "desfiguração"

#: ../../reference/expressions.rst:82
msgid "private"
msgstr "privados"

#: ../../reference/expressions.rst:82
msgid "names"
msgstr "nomes"

#: ../../reference/expressions.rst:133
msgid "literal"
msgstr "literal"

#: ../../reference/expressions.rst:146 ../../reference/expressions.rst:372
msgid "immutable"
msgstr "imutável"

#: ../../reference/expressions.rst:146
msgid "data"
msgstr "dados"

#: ../../reference/expressions.rst:146
msgid "type"
msgstr "tipo"

#: ../../reference/expressions.rst:146 ../../reference/expressions.rst:275
#: ../../reference/expressions.rst:301 ../../reference/expressions.rst:329
#: ../../reference/expressions.rst:372 ../../reference/expressions.rst:393
#: ../../reference/expressions.rst:557 ../../reference/expressions.rst:743
#: ../../reference/expressions.rst:851 ../../reference/expressions.rst:880
#: ../../reference/expressions.rst:957 ../../reference/expressions.rst:1001
#: ../../reference/expressions.rst:1149 ../../reference/expressions.rst:1162
#: ../../reference/expressions.rst:1176 ../../reference/expressions.rst:1183
#: ../../reference/expressions.rst:1730 ../../reference/expressions.rst:1919
msgid "object"
msgstr "objeto"

#: ../../reference/expressions.rst:162
msgid "parenthesized form"
msgstr "forma entre parênteses"

#: ../../reference/expressions.rst:162 ../../reference/expressions.rst:393
#: ../../reference/expressions.rst:1001
msgid "() (parentheses)"
msgstr "() (parênteses)"

#: ../../reference/expressions.rst:162
msgid "tuple display"
msgstr "sintaxe de criação de tupla"

#: ../../reference/expressions.rst:175 ../../reference/expressions.rst:275
msgid "empty"
msgstr "vazia"

#: ../../reference/expressions.rst:175 ../../reference/expressions.rst:880
#: ../../reference/expressions.rst:957 ../../reference/expressions.rst:1919
msgid "tuple"
msgstr "tupla"

#: ../../reference/expressions.rst:181 ../../reference/expressions.rst:1941
msgid "comma"
msgstr "vírgula"

#: ../../reference/expressions.rst:181 ../../reference/expressions.rst:275
#: ../../reference/expressions.rst:301 ../../reference/expressions.rst:329
#: ../../reference/expressions.rst:951 ../../reference/expressions.rst:1001
#: ../../reference/expressions.rst:1907
msgid ", (comma)"
msgstr ", (vírgula)"

#: ../../reference/expressions.rst:196 ../../reference/expressions.rst:275
#: ../../reference/expressions.rst:301 ../../reference/expressions.rst:329
msgid "comprehensions"
msgstr "compreensões"

#: ../../reference/expressions.rst:206
msgid "for"
msgstr "for"

#: ../../reference/expressions.rst:206 ../../reference/expressions.rst:241
msgid "in comprehensions"
msgstr "em compreensões"

#: ../../reference/expressions.rst:206 ../../reference/expressions.rst:1853
msgid "if"
msgstr "if"

#: ../../reference/expressions.rst:206
msgid "async for"
msgstr "async for"

#: ../../reference/expressions.rst:241 ../../reference/expressions.rst:1201
msgid "await"
msgstr "await"

#: ../../reference/expressions.rst:275 ../../reference/expressions.rst:851
#: ../../reference/expressions.rst:880 ../../reference/expressions.rst:957
#: ../../reference/expressions.rst:1907
msgid "list"
msgstr "lista"

#: ../../reference/expressions.rst:275 ../../reference/expressions.rst:301
#: ../../reference/expressions.rst:329
msgid "display"
msgstr "sintaxe de criação"

#: ../../reference/expressions.rst:275 ../../reference/expressions.rst:876
msgid "[] (square brackets)"
msgstr "[] (colchetes)"

#: ../../reference/expressions.rst:275
msgid "list expression"
msgstr "expressão de lista"

#: ../../reference/expressions.rst:275 ../../reference/expressions.rst:301
#: ../../reference/expressions.rst:1907
msgid "expression list"
msgstr "expressão, lista de"

#: ../../reference/expressions.rst:301
msgid "set"
msgstr "set"

#: ../../reference/expressions.rst:301 ../../reference/expressions.rst:329
msgid "{} (curly brackets)"
msgstr "{} (chaves)"

#: ../../reference/expressions.rst:301
msgid "set expression"
msgstr "expressão de conjunto"

#: ../../reference/expressions.rst:329 ../../reference/expressions.rst:355
#: ../../reference/expressions.rst:880
msgid "dictionary"
msgstr "dicionário"

#: ../../reference/expressions.rst:329
msgid "key"
msgstr "chave"

#: ../../reference/expressions.rst:329
msgid "value"
msgstr "valor"

#: ../../reference/expressions.rst:329
msgid "key/value pair"
msgstr "par chave/valor"

#: ../../reference/expressions.rst:329
msgid "dictionary expression"
msgstr "expressão de dicionário"

#: ../../reference/expressions.rst:329 ../../reference/expressions.rst:951
#: ../../reference/expressions.rst:1879
msgid ": (colon)"
msgstr ": (dois pontos)"

#: ../../reference/expressions.rst:329
msgid "in dictionary expressions"
msgstr "em expressões de dicionário"

#: ../../reference/expressions.rst:329 ../../reference/expressions.rst:355
msgid "in dictionary displays"
msgstr "em sintaxes de criação de dicionário"

#: ../../reference/expressions.rst:355 ../../reference/expressions.rst:1084
#: ../../reference/expressions.rst:1926
msgid "unpacking"
msgstr "desempacotamento"

#: ../../reference/expressions.rst:355 ../../reference/expressions.rst:1114
#: ../../reference/expressions.rst:1221
msgid "**"
msgstr "**"

#: ../../reference/expressions.rst:372
msgid "hashable"
msgstr "hasheável"

#: ../../reference/expressions.rst:393 ../../reference/expressions.rst:448
#: ../../reference/expressions.rst:557
msgid "generator"
msgstr "gerador"

#: ../../reference/expressions.rst:393
msgid "generator expression"
msgstr "expressão geradora"

#: ../../reference/expressions.rst:448 ../../reference/expressions.rst:1201
msgid "keyword"
msgstr "palavra reservada"

#: ../../reference/expressions.rst:448 ../../reference/expressions.rst:644
msgid "yield"
msgstr "yield"

#: ../../reference/expressions.rst:448 ../../reference/expressions.rst:516
msgid "from"
msgstr "from"

#: ../../reference/expressions.rst:448 ../../reference/expressions.rst:1149
#: ../../reference/expressions.rst:1162 ../../reference/expressions.rst:1879
msgid "function"
msgstr "função"

#: ../../reference/expressions.rst:502
msgid "coroutine"
msgstr "corrotina"

#: ../../reference/expressions.rst:516
msgid "yield from expression"
msgstr "yield from expressão"

#: ../../reference/expressions.rst:569
msgid "StopIteration"
msgstr "StopIteration"

#: ../../reference/expressions.rst:624 ../../reference/expressions.rst:805
msgid "GeneratorExit"
msgstr "GeneratorExit"

#: ../../reference/expressions.rst:644
msgid "examples"
msgstr "exemplos"

#: ../../reference/expressions.rst:743
msgid "asynchronous-generator"
msgstr "gerador assíncrono"

#: ../../reference/expressions.rst:753
msgid "StopAsyncIteration"
msgstr "StopAsyncIteration"

#: ../../reference/expressions.rst:828
msgid "primary"
msgstr "primário"

#: ../../reference/expressions.rst:842
msgid "attribute"
msgstr "atributo"

#: ../../reference/expressions.rst:842
msgid "reference"
msgstr "referência"

#: ../../reference/expressions.rst:842
msgid ". (dot)"
msgstr ". (ponto)"

#: ../../reference/expressions.rst:842
msgid "attribute reference"
msgstr "referência de atributo"

#: ../../reference/expressions.rst:851
msgid "AttributeError"
msgstr "AttributeError"

#: ../../reference/expressions.rst:851
msgid "module"
msgstr "módulo"

#: ../../reference/expressions.rst:876
msgid "subscription"
msgstr "subscrição"

#: ../../reference/expressions.rst:880 ../../reference/expressions.rst:957
#: ../../reference/expressions.rst:1730
msgid "sequence"
msgstr "sequência"

#: ../../reference/expressions.rst:880
msgid "mapping"
msgstr "mapeamento"

#: ../../reference/expressions.rst:880 ../../reference/expressions.rst:937
#: ../../reference/expressions.rst:957
msgid "string"
msgstr "string"

#: ../../reference/expressions.rst:880 ../../reference/expressions.rst:937
msgid "item"
msgstr "item"

#: ../../reference/expressions.rst:937
msgid "character"
msgstr "caractere"

#: ../../reference/expressions.rst:951
msgid "slicing"
msgstr "fatiamento"

#: ../../reference/expressions.rst:951
msgid "slice"
msgstr "fatia"

#: ../../reference/expressions.rst:983
msgid "start (slice object attribute)"
msgstr "start (atributo de objeto fatia)"

#: ../../reference/expressions.rst:983
msgid "stop (slice object attribute)"
msgstr "stop (atributo de objeto fatia)"

#: ../../reference/expressions.rst:983
msgid "step (slice object attribute)"
msgstr "step (atributo de objeto fatia)"

#: ../../reference/expressions.rst:1001
msgid "callable"
msgstr "chamável"

#: ../../reference/expressions.rst:1001 ../../reference/expressions.rst:1149
#: ../../reference/expressions.rst:1162 ../../reference/expressions.rst:1176
#: ../../reference/expressions.rst:1183 ../../reference/expressions.rst:1193
msgid "call"
msgstr "chamada"

#: ../../reference/expressions.rst:1001
msgid "argument"
msgstr "argumento"

#: ../../reference/expressions.rst:1001 ../../reference/expressions.rst:1034
msgid "call semantics"
msgstr "semântica de chamadas"

#: ../../reference/expressions.rst:1001
msgid "argument list"
msgstr "lista de argumentos"

#: ../../reference/expressions.rst:1001
msgid "= (equals)"
msgstr "= (igual)"

#: ../../reference/expressions.rst:1001 ../../reference/expressions.rst:1084
#: ../../reference/expressions.rst:1114
msgid "in function calls"
msgstr "em chamadas de função"

#: ../../reference/expressions.rst:1034
msgid "parameter"
msgstr "parâmetro"

#: ../../reference/expressions.rst:1084 ../../reference/expressions.rst:1318
#: ../../reference/expressions.rst:1926
msgid "* (asterisk)"
msgstr "* (asterisco)"

#: ../../reference/expressions.rst:1149
msgid "user-defined"
msgstr "definida por usuário"

#: ../../reference/expressions.rst:1149
msgid "user-defined function"
msgstr "função definida por usuário"

#: ../../reference/expressions.rst:1162
msgid "built-in function"
msgstr "função embutida"

#: ../../reference/expressions.rst:1162
msgid "method"
msgstr "método"

#: ../../reference/expressions.rst:1162
msgid "built-in method"
msgstr "método embutido"

#: ../../reference/expressions.rst:1176
msgid "class"
msgstr "classe"

#: ../../reference/expressions.rst:1176
msgid "class object"
msgstr "objeto classe"

#: ../../reference/expressions.rst:1183
msgid "class instance"
msgstr "instância de classe"

#: ../../reference/expressions.rst:1183 ../../reference/expressions.rst:1193
msgid "instance"
msgstr "instância"

#: ../../reference/expressions.rst:1193
msgid "__call__() (object method)"
msgstr "__call__() (método objeto)"

#: ../../reference/expressions.rst:1221
msgid "power"
msgstr "potência"

#: ../../reference/expressions.rst:1221 ../../reference/expressions.rst:1257
#: ../../reference/expressions.rst:1305 ../../reference/expressions.rst:1421
#: ../../reference/expressions.rst:1450 ../../reference/expressions.rst:1765
msgid "operation"
msgstr "operação"

#: ../../reference/expressions.rst:1221 ../../reference/expressions.rst:1266
#: ../../reference/expressions.rst:1275 ../../reference/expressions.rst:1283
#: ../../reference/expressions.rst:1318 ../../reference/expressions.rst:1331
#: ../../reference/expressions.rst:1343 ../../reference/expressions.rst:1361
#: ../../reference/expressions.rst:1391 ../../reference/expressions.rst:1404
#: ../../reference/expressions.rst:1421 ../../reference/expressions.rst:1459
#: ../../reference/expressions.rst:1467 ../../reference/expressions.rst:1476
#: ../../reference/expressions.rst:1491 ../../reference/expressions.rst:1730
#: ../../reference/expressions.rst:1739 ../../reference/expressions.rst:1781
#: ../../reference/expressions.rst:1786 ../../reference/expressions.rst:1791
#: ../../reference/expressions.rst:1853 ../../reference/expressions.rst:1977
msgid "operator"
msgstr "operador"

#: ../../reference/expressions.rst:1257
msgid "unary"
msgstr "unária"

#: ../../reference/expressions.rst:1257 ../../reference/expressions.rst:1450
#: ../../reference/expressions.rst:1459 ../../reference/expressions.rst:1467
#: ../../reference/expressions.rst:1476
msgid "bitwise"
msgstr "bit a bit"

#: ../../reference/expressions.rst:1266
msgid "negation"
msgstr "negação"

#: ../../reference/expressions.rst:1266
msgid "minus"
msgstr "menos"

#: ../../reference/expressions.rst:1266 ../../reference/expressions.rst:1404
msgid "- (minus)"
msgstr "- (menos)"

#: ../../reference/expressions.rst:1266 ../../reference/expressions.rst:1275
msgid "unary operator"
msgstr "operador unário"

#: ../../reference/expressions.rst:1275
msgid "plus"
msgstr "mais"

#: ../../reference/expressions.rst:1275 ../../reference/expressions.rst:1391
msgid "+ (plus)"
msgstr "+ (mais)"

#: ../../reference/expressions.rst:1283
msgid "inversion"
msgstr "inversão"

#: ../../reference/expressions.rst:1283
msgid "~ (tilde)"
msgstr "~ (til)"

#: ../../reference/expressions.rst:1294
msgid "TypeError"
msgstr "TypeError"

#: ../../reference/expressions.rst:1305 ../../reference/expressions.rst:1450
msgid "binary"
msgstr "binário"

#: ../../reference/expressions.rst:1318
msgid "multiplication"
msgstr "multiplicação"

#: ../../reference/expressions.rst:1331
msgid "matrix multiplication"
msgstr "multiplicação de matrizes"

#: ../../reference/expressions.rst:1331
msgid "@ (at)"
msgstr "@ (arroba)"

#: ../../reference/expressions.rst:1343
msgid "ZeroDivisionError"
msgstr "ZeroDivisionError"

#: ../../reference/expressions.rst:1343
msgid "division"
msgstr "divisão"

#: ../../reference/expressions.rst:1343
msgid "/ (slash)"
msgstr "/ (barra)"

#: ../../reference/expressions.rst:1343
msgid "//"
msgstr "//"

#: ../../reference/expressions.rst:1361
msgid "modulo"
msgstr "módulo"

#: ../../reference/expressions.rst:1361
msgid "% (percent)"
msgstr "% (porcentagem)"

#: ../../reference/expressions.rst:1391
msgid "addition"
msgstr "adição"

#: ../../reference/expressions.rst:1391 ../../reference/expressions.rst:1404
msgid "binary operator"
msgstr "operador binário"

#: ../../reference/expressions.rst:1404
msgid "subtraction"
msgstr "substração"

#: ../../reference/expressions.rst:1421
msgid "shifting"
msgstr "deslocamento"

#: ../../reference/expressions.rst:1421
msgid "<<"
msgstr "<<"

#: ../../reference/expressions.rst:1421
msgid ">>"
msgstr ">>"

#: ../../reference/expressions.rst:1439
msgid "ValueError"
msgstr "ValueError"

#: ../../reference/expressions.rst:1459 ../../reference/expressions.rst:1786
msgid "and"
msgstr "and"

#: ../../reference/expressions.rst:1459
msgid "& (ampersand)"
msgstr "& (e comercial)"

#: ../../reference/expressions.rst:1467
msgid "xor"
msgstr "xor"

#: ../../reference/expressions.rst:1467
msgid "exclusive"
msgstr "exclusivo"

#: ../../reference/expressions.rst:1467 ../../reference/expressions.rst:1476
#: ../../reference/expressions.rst:1791
msgid "or"
msgstr "or"

#: ../../reference/expressions.rst:1467
msgid "^ (caret)"
msgstr "^ (circunflexo)"

#: ../../reference/expressions.rst:1476
msgid "inclusive"
msgstr "inclusive"

#: ../../reference/expressions.rst:1476
msgid "| (vertical bar)"
msgstr "| (barra vertical)"

#: ../../reference/expressions.rst:1491
msgid "comparison"
msgstr "comparação"

#: ../../reference/expressions.rst:1491
msgid "C"
msgstr "C"

#: ../../reference/expressions.rst:1491
msgid "language"
msgstr "linguagem"

#: ../../reference/expressions.rst:1491
msgid "< (less)"
msgstr "< (menor que)"

#: ../../reference/expressions.rst:1491
msgid "> (greater)"
msgstr "> (maior)"

#: ../../reference/expressions.rst:1491
msgid "<="
msgstr "<="

#: ../../reference/expressions.rst:1491
msgid ">="
msgstr ">="

#: ../../reference/expressions.rst:1491
msgid "=="
msgstr "=="

#: ../../reference/expressions.rst:1491
msgid "!="
msgstr "!="

#: ../../reference/expressions.rst:1515
msgid "chaining"
msgstr "encadeamento"

#: ../../reference/expressions.rst:1515
msgid "comparisons"
msgstr "comparações"

#: ../../reference/expressions.rst:1730
msgid "in"
msgstr "in"

#: ../../reference/expressions.rst:1730
msgid "not in"
msgstr "not in"

#: ../../reference/expressions.rst:1730
msgid "membership"
msgstr "pertinência"

#: ../../reference/expressions.rst:1730 ../../reference/expressions.rst:1739
msgid "test"
msgstr "teste"

#: ../../reference/expressions.rst:1739
msgid "is"
msgstr "is"

#: ../../reference/expressions.rst:1739
msgid "is not"
msgstr "is not"

#: ../../reference/expressions.rst:1739
msgid "identity"
msgstr "identidade"

#: ../../reference/expressions.rst:1765
msgid "Conditional"
msgstr "Condicional"

#: ../../reference/expressions.rst:1765
msgid "Boolean"
msgstr "Booleano"

#: ../../reference/expressions.rst:1781
msgid "not"
msgstr "not"

#: ../../reference/expressions.rst:1805
msgid ":= (colon equals)"
msgstr ":= (dois points igual)"

#: ../../reference/expressions.rst:1805
msgid "assignment expression"
msgstr "expressão de atribuição"

#: ../../reference/expressions.rst:1805
msgid "walrus operator"
msgstr "operador morsa"

#: ../../reference/expressions.rst:1805
msgid "named expression"
msgstr "expressão nomeada"

#: ../../reference/expressions.rst:1853
msgid "conditional"
msgstr "condicional"

#: ../../reference/expressions.rst:1853
msgid "ternary"
msgstr "ternário"

#: ../../reference/expressions.rst:1853
msgid "conditional expression"
msgstr "expressão condicional"

#: ../../reference/expressions.rst:1853
msgid "else"
msgstr "else"

#: ../../reference/expressions.rst:1879
msgid "lambda"
msgstr "lambda"

#: ../../reference/expressions.rst:1879
msgid "form"
msgstr "função"

#: ../../reference/expressions.rst:1879
msgid "anonymous"
msgstr "anônima"

#: ../../reference/expressions.rst:1879
msgid "lambda expression"
msgstr "expressão lambda"

#: ../../reference/expressions.rst:1926
msgid "iterable"
msgstr "Iterável"

#: ../../reference/expressions.rst:1926
msgid "in expression lists"
msgstr "em listas de expressões"

#: ../../reference/expressions.rst:1941
msgid "trailing"
msgstr "ao final"

#: ../../reference/expressions.rst:1956
msgid "evaluation"
msgstr "avaliação"

#: ../../reference/expressions.rst:1956
msgid "order"
msgstr "ordem"

#: ../../reference/expressions.rst:1977
msgid "precedence"
msgstr "precedência"
