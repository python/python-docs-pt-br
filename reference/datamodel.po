# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Marco Rougeth <marco@rougeth.com>, 2020
# Tiago Henrique <tiagohrm@gmail.com>, 2020
# Raphael Mendonça, 2020
# Welington Carlos <wcarlos3@gmail.com>, 2020
# felipe caridade fernandes <caridade500@gmail.com>, 2020
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2020
# Adorilson Bezerra <adorilson@gmail.com>, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-06 22:14+0000\n"
"PO-Revision-Date: 2020-05-30 12:15+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../reference/datamodel.rst:6
msgid "Data model"
msgstr "Modelo de dados"

#: ../../reference/datamodel.rst:12
msgid "Objects, values and types"
msgstr "Objetos, valores e tipos"

#: ../../reference/datamodel.rst:18
msgid ""
":dfn:`Objects` are Python's abstraction for data.  All data in a Python "
"program is represented by objects or by relations between objects. (In a "
"sense, and in conformance to Von Neumann's model of a \"stored program "
"computer\", code is also represented by objects.)"
msgstr ""
":dfn:`Objetos` são abstrações do Python para dados. Todos os dados em um "
"programa Python são representados por objetos ou por relações entre objetos. "
"(De certo modo, e em conformidade com o modelo de Von Neumann de um "
"\"computador com programa armazenado\", código também é representado por "
"objetos.)"

#: ../../reference/datamodel.rst:35
msgid ""
"Every object has an identity, a type and a value.  An object's *identity* "
"never changes once it has been created; you may think of it as the object's "
"address in memory.  The ':keyword:`is`' operator compares the identity of "
"two objects; the :func:`id` function returns an integer representing its "
"identity."
msgstr ""
"Todo objeto tem uma identidade, um tipo e um valor. A *identidade* de um "
"objeto nunca muda depois de criado; você pode pensar nisso como endereço de "
"objetos em memória. O operador :keyword:`is` compara as identidades de dois "
"objetos; a função :func:`id` retorna um inteiro representando sua identidade."

#: ../../reference/datamodel.rst:42
msgid "For CPython, ``id(x)`` is the memory address where ``x`` is stored."
msgstr ""
"Para CPython, ``id(x)`` é o endereço de memória em que ``x`` está armazenado."

#: ../../reference/datamodel.rst:44
msgid ""
"An object's type determines the operations that the object supports (e.g., "
"\"does it have a length?\") and also defines the possible values for objects "
"of that type.  The :func:`type` function returns an object's type (which is "
"an object itself).  Like its identity, an object's :dfn:`type` is also "
"unchangeable. [#]_"
msgstr ""
"O tipo de um objeto determina as operações que o objeto implementa (por "
"exemplo, \"ele tem um comprimento?\") e também define os valores possíveis "
"para objetos desse tipo. A função :func:`type` retorna o tipo de um objeto "
"(que é também um objeto). Como sua identidade, o :dfn:`tipo` do objeto "
"também é imutável. [#]_"

#: ../../reference/datamodel.rst:50
msgid ""
"The *value* of some objects can change.  Objects whose value can change are "
"said to be *mutable*; objects whose value is unchangeable once they are "
"created are called *immutable*. (The value of an immutable container object "
"that contains a reference to a mutable object can change when the latter's "
"value is changed; however the container is still considered immutable, "
"because the collection of objects it contains cannot be changed.  So, "
"immutability is not strictly the same as having an unchangeable value, it is "
"more subtle.) An object's mutability is determined by its type; for "
"instance, numbers, strings and tuples are immutable, while dictionaries and "
"lists are mutable."
msgstr ""
"O *valor* de alguns objetos pode mudar. Objetos cujos valores podem mudar "
"são descritos como *mutáveis*, objetos cujo valor não pode ser mudado uma "
"vez que foram criados são chamados *imutáveis*. (O valor de um objeto "
"contêiner imutável que contém uma referência a um objeto mutável pode mudar "
"quando o valor deste último for mudado; no entanto o contêiner é ainda assim "
"considerada imutável, pois a coleção de objetos que contém não pode ser "
"mudada. Então a imutabilidade não é estritamente o mesmo do que não haver "
"mudanças de valor, é mais sutil.) A mutabilidade de um objeto é determinada "
"pelo seu tipo; por exemplo, números, strings e tuplas são imutáveis, "
"enquanto dicionários e listas são mutáveis."

#: ../../reference/datamodel.rst:65
msgid ""
"Objects are never explicitly destroyed; however, when they become "
"unreachable they may be garbage-collected.  An implementation is allowed to "
"postpone garbage collection or omit it altogether --- it is a matter of "
"implementation quality how garbage collection is implemented, as long as no "
"objects are collected that are still reachable."
msgstr ""
"Os objetos nunca são destruídos explicitamente; no entanto, quando eles se "
"tornam inacessíveis, eles podem ser coletados como lixo. Uma implementação "
"tem permissão para adiar a coleta de lixo ou omiti-la completamente -- é uma "
"questão de detalhe de implementação como a coleta de lixo é implementada, "
"desde que nenhum objeto que ainda esteja acessível seja coletado."

#: ../../reference/datamodel.rst:73
msgid ""
"CPython currently uses a reference-counting scheme with (optional) delayed "
"detection of cyclically linked garbage, which collects most objects as soon "
"as they become unreachable, but is not guaranteed to collect garbage "
"containing circular references.  See the documentation of the :mod:`gc` "
"module for information on controlling the collection of cyclic garbage. "
"Other implementations act differently and CPython may change. Do not depend "
"on immediate finalization of objects when they become unreachable (so you "
"should always close files explicitly)."
msgstr ""
"CPython atualmente usa um esquema de contagem de referências com detecção "
"atrasada (opcional) de lixo ligado ciclicamente, que coleta a maioria dos "
"objetos assim que eles se tornam inacessíveis, mas não é garantido que "
"coletará lixo contendo referências circulares. Veja a documentação do "
"módulo :mod:`gc` para informações sobre como controlar a coleta de lixo "
"cíclico. Outras implementações agem de forma diferente e o CPython pode "
"mudar. Não dependa da finalização imediata dos objetos quando eles se "
"tornarem inacessíveis (isto é, você deve sempre fechar os arquivos "
"explicitamente)."

#: ../../reference/datamodel.rst:82
msgid ""
"Note that the use of the implementation's tracing or debugging facilities "
"may keep objects alive that would normally be collectable. Also note that "
"catching an exception with a ':keyword:`try`...\\ :keyword:`except`' "
"statement may keep objects alive."
msgstr ""
"Observe que o uso dos recursos de rastreamento ou depuração da implementação "
"pode manter os objetos ativos que normalmente seriam coletáveis. Observe "
"também que capturar uma exceção com uma instrução \":keyword:`try`...\\ :"
"keyword:`except`\" pode manter os objetos vivos."

#: ../../reference/datamodel.rst:87
msgid ""
"Some objects contain references to \"external\" resources such as open files "
"or windows.  It is understood that these resources are freed when the object "
"is garbage-collected, but since garbage collection is not guaranteed to "
"happen, such objects also provide an explicit way to release the external "
"resource, usually a :meth:`close` method. Programs are strongly recommended "
"to explicitly close such objects.  The ':keyword:`try`...\\ :keyword:"
"`finally`' statement and the ':keyword:`with`' statement provide convenient "
"ways to do this."
msgstr ""
"Alguns objetos contêm referências a recursos \"externos\", como arquivos "
"abertos ou janelas. Entende-se que esses recursos são liberados quando o "
"objeto é coletado como lixo, mas como a coleta de lixo não é garantida, tais "
"objetos também fornecem uma maneira explícita de liberar o recurso externo, "
"geralmente um método :meth:`close`. Os programas são fortemente recomendados "
"para fechar explicitamente esses objetos. A instrução \":keyword:`try`...\\ :"
"keyword:`finally`\" e a instrução \":keyword:`with`\" fornecem maneiras "
"convenientes de fazer isso."

#: ../../reference/datamodel.rst:97
msgid ""
"Some objects contain references to other objects; these are called "
"*containers*. Examples of containers are tuples, lists and dictionaries.  "
"The references are part of a container's value.  In most cases, when we talk "
"about the value of a container, we imply the values, not the identities of "
"the contained objects; however, when we talk about the mutability of a "
"container, only the identities of the immediately contained objects are "
"implied.  So, if an immutable container (like a tuple) contains a reference "
"to a mutable object, its value changes if that mutable object is changed."
msgstr ""
"Alguns objetos contêm referências a outros objetos; eles são chamados de "
"*contêineres*. Exemplos de contêineres são tuplas, listas e dicionários. As "
"referências fazem parte do valor de um contêiner. Na maioria dos casos, "
"quando falamos sobre o valor de um contêiner, nos referimos aos valores, não "
"às identidades dos objetos contidos; entretanto, quando falamos sobre a "
"mutabilidade de um contêiner, apenas as identidades dos objetos contidos "
"imediatamente estão implícitas. Portanto, se um contêiner imutável (como uma "
"tupla) contém uma referência a um objeto mutável, seu valor muda se esse "
"objeto mutável for alterado."

#: ../../reference/datamodel.rst:106
msgid ""
"Types affect almost all aspects of object behavior.  Even the importance of "
"object identity is affected in some sense: for immutable types, operations "
"that compute new values may actually return a reference to any existing "
"object with the same type and value, while for mutable objects this is not "
"allowed.  E.g., after ``a = 1; b = 1``, ``a`` and ``b`` may or may not refer "
"to the same object with the value one, depending on the implementation, but "
"after ``c = []; d = []``, ``c`` and ``d`` are guaranteed to refer to two "
"different, unique, newly created empty lists. (Note that ``c = d = []`` "
"assigns the same object to both ``c`` and ``d``.)"
msgstr ""
"Os tipos afetam quase todos os aspectos do comportamento do objeto. Até "
"mesmo a importância da identidade do objeto é afetada em algum sentido: para "
"tipos imutáveis, as operações que calculam novos valores podem realmente "
"retornar uma referência a qualquer objeto existente com o mesmo tipo e "
"valor, enquanto para objetos mutáveis isso não é permitido. Por exemplo, "
"após ``a = 1; b = 1``, ``a`` e ``b`` podem ou não se referir ao mesmo objeto "
"com o valor um, dependendo da implementação, mas após ``c = []; d = []``, "
"``c`` e ``d`` têm a garantia de referir-se a duas listas vazias diferentes e "
"únicas. (Observe que ``c = d = []`` atribui o mesmo objeto para ``c`` e "
"``d``.)"

#: ../../reference/datamodel.rst:120
msgid "The standard type hierarchy"
msgstr "A hierarquia de tipos padrão"

#: ../../reference/datamodel.rst:129
msgid ""
"Below is a list of the types that are built into Python.  Extension modules "
"(written in C, Java, or other languages, depending on the implementation) "
"can define additional types.  Future versions of Python may add types to the "
"type hierarchy (e.g., rational numbers, efficiently stored arrays of "
"integers, etc.), although such additions will often be provided via the "
"standard library instead."
msgstr ""
"Abaixo está uma lista dos tipos que são embutidos no Python. Módulos de "
"extensão (escritos em C, Java ou outras linguagens, dependendo da "
"implementação) podem definir tipos adicionais. Versões futuras do Python "
"podem adicionar tipos à hierarquia de tipo (por exemplo, números racionais, "
"matrizes de inteiros armazenadas de forma eficiente, etc.), embora tais "
"adições sejam frequentemente fornecidas por meio da biblioteca padrão."

#: ../../reference/datamodel.rst:140
msgid ""
"Some of the type descriptions below contain a paragraph listing 'special "
"attributes.'  These are attributes that provide access to the implementation "
"and are not intended for general use.  Their definition may change in the "
"future."
msgstr ""
"Algumas das descrições de tipo abaixo contêm um parágrafo listando "
"\"atributos especiais\". Esses são atributos que fornecem acesso à "
"implementação e não se destinam ao uso geral. Sua definição pode mudar no "
"futuro."

#: ../../reference/datamodel.rst:150
msgid "None"
msgstr "None"

#: ../../reference/datamodel.rst:147
msgid ""
"This type has a single value.  There is a single object with this value. "
"This object is accessed through the built-in name ``None``. It is used to "
"signify the absence of a value in many situations, e.g., it is returned from "
"functions that don't explicitly return anything. Its truth value is false."
msgstr ""
"Este tipo possui um único valor. Existe um único objeto com este valor. Este "
"objeto é acessado através do nome embutido ``None``. É usado para significar "
"a ausência de um valor em muitas situações, por exemplo, ele é retornado de "
"funções que não retornam nada explicitamente. Seu valor verdade é falso."

#: ../../reference/datamodel.rst:165
msgid "NotImplemented"
msgstr "NotImplemented"

#: ../../reference/datamodel.rst:155
msgid ""
"This type has a single value.  There is a single object with this value. "
"This object is accessed through the built-in name ``NotImplemented``. "
"Numeric methods and rich comparison methods should return this value if they "
"do not implement the operation for the operands provided.  (The interpreter "
"will then try the reflected operation, or some other fallback, depending on "
"the operator.)  Its truth value is true."
msgstr ""

#: ../../reference/datamodel.rst:162
msgid "See :ref:`implementing-the-arithmetic-operations` for more details."
msgstr ""
"Veja a documentação :ref:`implementing-the-arithmetic-operations` para mais "
"detalhes."

#: ../../reference/datamodel.rst:174
msgid "Ellipsis"
msgstr "Ellipsis"

#: ../../reference/datamodel.rst:172
msgid ""
"This type has a single value.  There is a single object with this value. "
"This object is accessed through the literal ``...`` or the built-in name "
"``Ellipsis``.  Its truth value is true."
msgstr ""
"Este tipo possui um único valor. Existe um único objeto com este valor. Este "
"objeto é acessado através do literal ``...`` ou do nome embutido "
"``Ellipsis`` (reticências). Seu valor verdade é verdadeiro."

#: ../../reference/datamodel.rst:261
msgid ":class:`numbers.Number`"
msgstr ":class:`numbers.Number`"

#: ../../reference/datamodel.rst:179
msgid ""
"These are created by numeric literals and returned as results by arithmetic "
"operators and arithmetic built-in functions.  Numeric objects are immutable; "
"once created their value never changes.  Python numbers are of course "
"strongly related to mathematical numbers, but subject to the limitations of "
"numerical representation in computers."
msgstr ""
"Esses são criados por literais numéricos e retornados como resultados por "
"operadores aritméticos e funções aritméticas embutidas. Os objetos numéricos "
"são imutáveis; uma vez criado, seu valor nunca muda. Os números do Python "
"são, obviamente, fortemente relacionados aos números matemáticos, mas "
"sujeitos às limitações da representação numérica em computadores."

#: ../../reference/datamodel.rst:185
msgid ""
"The string representations of the numeric classes, computed by :meth:"
"`__repr__` and :meth:`__str__`, have the following properties:"
msgstr ""
"As representações de string das classes numéricas, calculadas por :meth:"
"`__repr__` e :meth:`__str__`, têm as seguintes propriedades:"

#: ../../reference/datamodel.rst:189
msgid ""
"They are valid numeric literals which, when passed to their class "
"constructor, produce an object having the value of the original numeric."
msgstr ""
"Elas são literais numéricos válidos que, quando passados para seu construtor "
"de classe, produzem um objeto com o valor do numérico original."

#: ../../reference/datamodel.rst:193
msgid "The representation is in base 10, when possible."
msgstr "A representação está na base 10, quando possível."

#: ../../reference/datamodel.rst:195
msgid ""
"Leading zeros, possibly excepting a single zero before a decimal point, are "
"not shown."
msgstr ""
"Os zeros à esquerda, possivelmente com exceção de um único zero antes de um "
"ponto decimal, não são mostrados."

#: ../../reference/datamodel.rst:198
msgid ""
"Trailing zeros, possibly excepting a single zero after a decimal point, are "
"not shown."
msgstr ""
"Os zeros à direita, possivelmente com exceção de um único zero após um ponto "
"decimal, não são mostrados."

#: ../../reference/datamodel.rst:201
msgid "A sign is shown only when the number is negative."
msgstr "Um sinal é mostrado apenas quando o número é negativo."

#: ../../reference/datamodel.rst:203
msgid ""
"Python distinguishes between integers, floating point numbers, and complex "
"numbers:"
msgstr ""
"Python distingue entre inteiros, números de ponto flutuante e números "
"complexos:"

#: ../../reference/datamodel.rst:236
msgid ":class:`numbers.Integral`"
msgstr ":class:`numbers.Integral`"

#: ../../reference/datamodel.rst:209
msgid ""
"These represent elements from the mathematical set of integers (positive and "
"negative)."
msgstr ""
"Estes representam elementos do conjunto matemático de inteiros (positivos e "
"negativos)."

#: ../../reference/datamodel.rst:212
msgid "There are two types of integers:"
msgstr "Existem dois tipos de inteiros:"

#: ../../reference/datamodel.rst:219
msgid "Integers (:class:`int`)"
msgstr "Inteiros (:class:`int`)"

#: ../../reference/datamodel.rst:215
msgid ""
"These represent numbers in an unlimited range, subject to available "
"(virtual) memory only.  For the purpose of shift and mask operations, a "
"binary representation is assumed, and negative numbers are represented in a "
"variant of 2's complement which gives the illusion of an infinite string of "
"sign bits extending to the left."
msgstr ""
"Estes representam números em um intervalo ilimitado, sujeito apenas à "
"memória (virtual) disponível. Para o propósito de operações de deslocamento "
"e máscara, uma representação binária é presumida e os números negativos são "
"representados em uma variante do complemento de 2 que dá a ilusão de uma "
"string infinita de bits de sinal estendendo-se para a esquerda."

#: ../../reference/datamodel.rst:231
msgid "Booleans (:class:`bool`)"
msgstr "Booleanos (:class:`bool`)"

#: ../../reference/datamodel.rst:227
msgid ""
"These represent the truth values False and True.  The two objects "
"representing the values ``False`` and ``True`` are the only Boolean objects. "
"The Boolean type is a subtype of the integer type, and Boolean values behave "
"like the values 0 and 1, respectively, in almost all contexts, the exception "
"being that when converted to a string, the strings ``\"False\"`` or "
"``\"True\"`` are returned, respectively."
msgstr ""
"Estes representam os valores da verdade Falsos e Verdadeiros. Os dois "
"objetos que representam os valores ``False`` e ``True`` são os únicos "
"objetos booleanos. O tipo booleano é um subtipo do tipo inteiro, e os "
"valores booleanos se comportam como os valores 0 e 1, respectivamente, em "
"quase todos os contextos, com exceção de que, quando convertidos em uma "
"string, as strings ``\"False\"`` ou ``\"True\"`` são retornados, "
"respectivamente."

#: ../../reference/datamodel.rst:235
msgid ""
"The rules for integer representation are intended to give the most "
"meaningful interpretation of shift and mask operations involving negative "
"integers."
msgstr ""
"As regras para representação de inteiros têm como objetivo fornecer a "
"interpretação mais significativa das operações de deslocamento e máscara "
"envolvendo inteiros negativos."

#: ../../reference/datamodel.rst:251
msgid ":class:`numbers.Real` (:class:`float`)"
msgstr ":class:`numbers.Real` (:class:`float`)"

#: ../../reference/datamodel.rst:245
msgid ""
"These represent machine-level double precision floating point numbers. You "
"are at the mercy of the underlying machine architecture (and C or Java "
"implementation) for the accepted range and handling of overflow. Python does "
"not support single-precision floating point numbers; the savings in "
"processor and memory usage that are usually the reason for using these are "
"dwarfed by the overhead of using objects in Python, so there is no reason to "
"complicate the language with two kinds of floating point numbers."
msgstr ""
"Estes representam números de ponto flutuante de precisão dupla no nível da "
"máquina. Você está à mercê da arquitetura da máquina subjacente (e "
"implementação C ou Java) para o intervalo aceito e tratamento de estouro. "
"Python não oferece suporte a números de ponto flutuante de precisão única; a "
"economia no uso do processador e da memória, que normalmente é o motivo de "
"usá-los, é ofuscada pela sobrecarga do uso de objetos em Python, portanto, "
"não há razão para complicar a linguagem com dois tipos de números de ponto "
"flutuante."

#: ../../reference/datamodel.rst:261
msgid ":class:`numbers.Complex` (:class:`complex`)"
msgstr ":class:`numbers.Complex` (:class:`complex`)"

#: ../../reference/datamodel.rst:258
msgid ""
"These represent complex numbers as a pair of machine-level double precision "
"floating point numbers.  The same caveats apply as for floating point "
"numbers. The real and imaginary parts of a complex number ``z`` can be "
"retrieved through the read-only attributes ``z.real`` and ``z.imag``."
msgstr ""
"Estes representam números complexos como um par de números de ponto "
"flutuante de precisão dupla no nível da máquina. As mesmas advertências se "
"aplicam aos números de ponto flutuante. As partes reais e imaginárias de um "
"número complexo ``z`` podem ser obtidas através dos atributos somente "
"leitura ``z.real`` e ``z.imag``."

#: ../../reference/datamodel.rst:378
msgid "Sequences"
msgstr "Sequências"

#: ../../reference/datamodel.rst:271
msgid ""
"These represent finite ordered sets indexed by non-negative numbers. The "
"built-in function :func:`len` returns the number of items of a sequence. "
"When the length of a sequence is *n*, the index set contains the numbers 0, "
"1, ..., *n*-1.  Item *i* of sequence *a* is selected by ``a[i]``."
msgstr ""
"Estes representam conjuntos ordenados finitos indexados por números não "
"negativos. A função embutida :func:`len` retorna o número de itens de uma "
"sequência. Quando o comprimento de uma sequência é *n*, o conjunto de "
"índices contém os números 0, 1, ..., *n*-1. O item *i* da sequência *a* é "
"selecionado por ``a[i]``."

#: ../../reference/datamodel.rst:278
msgid ""
"Sequences also support slicing: ``a[i:j]`` selects all items with index *k* "
"such that *i* ``<=`` *k* ``<`` *j*.  When used as an expression, a slice is "
"a sequence of the same type.  This implies that the index set is renumbered "
"so that it starts at 0."
msgstr ""
"Sequências também suportam fatiamento: ``a[i:j]`` seleciona todos os itens "
"com índice *k* de forma que *i* ``<=`` *k* ``<`` *j*. Quando usada como "
"expressão, uma fatia é uma sequência do mesmo tipo. Isso implica que o "
"conjunto de índices é renumerado para que comece em 0."

#: ../../reference/datamodel.rst:283
msgid ""
"Some sequences also support \"extended slicing\" with a third \"step\" "
"parameter: ``a[i:j:k]`` selects all items of *a* with index *x* where ``x = "
"i + n*k``, *n* ``>=`` ``0`` and *i* ``<=`` *x* ``<`` *j*."
msgstr ""
"Algumas sequências também suportam \"fatiamento estendido\" com um terceiro "
"parâmetro de \"etapa\": ``a[i:j:k]`` seleciona todos os itens de *a* com "
"índice *x* onde ``x = i + n*k``, *n* ``>=`` ``0`` e *i* ``<=`` *x* ``<`` *j*."

#: ../../reference/datamodel.rst:287
msgid "Sequences are distinguished according to their mutability:"
msgstr "As sequências são distinguidas de acordo com sua mutabilidade:"

#: ../../reference/datamodel.rst:344
msgid "Immutable sequences"
msgstr "Sequências imutáveis"

#: ../../reference/datamodel.rst:294
msgid ""
"An object of an immutable sequence type cannot change once it is created.  "
"(If the object contains references to other objects, these other objects may "
"be mutable and may be changed; however, the collection of objects directly "
"referenced by an immutable object cannot change.)"
msgstr ""
"Um objeto de um tipo de sequência imutável não pode ser alterado depois de "
"criado. (Se o objeto contiver referências a outros objetos, esses outros "
"objetos podem ser mutáveis e podem ser alterados; no entanto, a coleção de "
"objetos diretamente referenciada por um objeto imutável não pode ser "
"alterada.)"

#: ../../reference/datamodel.rst:299
msgid "The following types are immutable sequences:"
msgstr "Os tipos a seguir são sequências imutáveis:"

#: ../../reference/datamodel.rst:322
msgid "Strings"
msgstr "Strings"

#: ../../reference/datamodel.rst:312
msgid ""
"A string is a sequence of values that represent Unicode code points. All the "
"code points in the range ``U+0000 - U+10FFFF`` can be represented in a "
"string.  Python doesn't have a :c:type:`char` type; instead, every code "
"point in the string is represented as a string object with length ``1``.  "
"The built-in function :func:`ord` converts a code point from its string form "
"to an integer in the range ``0 - 10FFFF``; :func:`chr` converts an integer "
"in the range ``0 - 10FFFF`` to the corresponding length ``1`` string "
"object. :meth:`str.encode` can be used to convert a :class:`str` to :class:"
"`bytes` using the given text encoding, and :meth:`bytes.decode` can be used "
"to achieve the opposite."
msgstr ""
"Uma string é uma sequência de valores que representam pontos de código "
"Unicode. Todos os pontos de código no intervalo ``U+0000 - U+10FFFF`` podem "
"ser representados em uma string. Python não tem um tipo :c:type:`char`; em "
"vez disso, cada ponto de código na string é representado como um objeto "
"string com comprimento ``1``. A função embutida :func:`ord` converte um "
"ponto de código de sua forma de string para um inteiro no intervalo ``0 - "
"10FFFF``; :func:`chr` converte um inteiro no intervalo ``0 - 10FFFF`` para o "
"objeto de string correspondente de comprimento ``1``. :meth:`str.encode` "
"pode ser usado para converter uma :class:`str` para :class:`bytes` usando a "
"codificação de texto fornecida, e :meth:`bytes.decode` pode ser usado para "
"conseguir o oposto."

#: ../../reference/datamodel.rst:335
msgid "Tuples"
msgstr "Tuplas"

#: ../../reference/datamodel.rst:330
msgid ""
"The items of a tuple are arbitrary Python objects. Tuples of two or more "
"items are formed by comma-separated lists of expressions.  A tuple of one "
"item (a 'singleton') can be formed by affixing a comma to an expression (an "
"expression by itself does not create a tuple, since parentheses must be "
"usable for grouping of expressions).  An empty tuple can be formed by an "
"empty pair of parentheses."
msgstr ""
"Os itens de uma tupla são objetos Python arbitrários. Tuplas de dois ou mais "
"itens são formadas por listas de expressões separadas por vírgulas. Uma "
"tupla de um item (um \"singleton\") pode ser formada afixando uma vírgula a "
"uma expressão (uma expressão por si só não cria uma tupla, já que os "
"parênteses devem ser usados para agrupamento de expressões). Uma tupla vazia "
"pode ser formada por um par vazio de parênteses."

#: ../../reference/datamodel.rst:344
msgid "Bytes"
msgstr "Bytes"

#: ../../reference/datamodel.rst:340
msgid ""
"A bytes object is an immutable array.  The items are 8-bit bytes, "
"represented by integers in the range 0 <= x < 256.  Bytes literals (like "
"``b'abc'``) and the built-in :func:`bytes()` constructor can be used to "
"create bytes objects.  Also, bytes objects can be decoded to strings via "
"the :meth:`~bytes.decode` method."
msgstr ""
"Um objeto bytes é um vetor imutável. Os itens são bytes de 8 bits, "
"representados por inteiros no intervalo 0 <= x < 256. Literais de bytes "
"(como ``b'abc'``) e o construtor embutido :func:`bytes()` podem ser usados "
"para criar objetos bytes. Além disso, os objetos bytes podem ser "
"decodificados em strings através do método :meth:`~bytes.decode`."

#: ../../reference/datamodel.rst:378
msgid "Mutable sequences"
msgstr "Sequências mutáveis"

#: ../../reference/datamodel.rst:354
msgid ""
"Mutable sequences can be changed after they are created.  The subscription "
"and slicing notations can be used as the target of assignment and :keyword:"
"`del` (delete) statements."
msgstr ""
"As sequências mutáveis podem ser alteradas após serem criadas. As notações "
"de subscrição e fatiamento podem ser usadas como o destino da atribuição e "
"instruções :keyword:`del` (*delete*, exclusão)."

#: ../../reference/datamodel.rst:358
msgid "There are currently two intrinsic mutable sequence types:"
msgstr "Atualmente, existem dois tipos de sequência mutável intrínseca:"

#: ../../reference/datamodel.rst:365
msgid "Lists"
msgstr "Listas"

#: ../../reference/datamodel.rst:363
msgid ""
"The items of a list are arbitrary Python objects.  Lists are formed by "
"placing a comma-separated list of expressions in square brackets. (Note that "
"there are no special cases needed to form lists of length 0 or 1.)"
msgstr ""
"Os itens de uma lista são objetos Python arbitrários. As listas são formadas "
"colocando uma lista de expressões separada por vírgulas entre colchetes. "
"(Observe que não há casos especiais necessários para formar listas de "
"comprimento 0 ou 1.)"

#: ../../reference/datamodel.rst:373
msgid "Byte Arrays"
msgstr "Vetores de bytes"

#: ../../reference/datamodel.rst:370
msgid ""
"A bytearray object is a mutable array. They are created by the built-in :"
"func:`bytearray` constructor.  Aside from being mutable (and hence "
"unhashable), byte arrays otherwise provide the same interface and "
"functionality as immutable :class:`bytes` objects."
msgstr ""
"Um objeto bytearray é um vetor mutável. Eles são criados pelo construtor "
"embutido :func:`bytearray`. Além de serem mutáveis (e, portanto, não-"
"hasheável), os vetores de bytes fornecem a mesma interface e funcionalidade "
"que os objetos imutáveis :class:`bytes`."

#: ../../reference/datamodel.rst:377
msgid ""
"The extension module :mod:`array` provides an additional example of a "
"mutable sequence type, as does the :mod:`collections` module."
msgstr ""
"O módulo de extensão :mod:`array` fornece um exemplo adicional de um tipo de "
"sequência mutável, assim como o módulo :mod:`collections`."

#: ../../reference/datamodel.rst:412
msgid "Set types"
msgstr "Tipos de conjuntos"

#: ../../reference/datamodel.rst:385
msgid ""
"These represent unordered, finite sets of unique, immutable objects. As "
"such, they cannot be indexed by any subscript. However, they can be iterated "
"over, and the built-in function :func:`len` returns the number of items in a "
"set. Common uses for sets are fast membership testing, removing duplicates "
"from a sequence, and computing mathematical operations such as intersection, "
"union, difference, and symmetric difference."
msgstr ""
"Estes representam conjuntos finitos e não ordenados de objetos únicos e "
"imutáveis. Como tal, eles não podem ser indexados por nenhum subscrito. No "
"entanto, eles podem ser iterados, e a função embutida :func:`len` retorna o "
"número de itens em um conjunto. Os usos comuns para conjuntos são testes "
"rápidos de associação, remoção de duplicatas de uma sequência e computação "
"de operações matemáticas como interseção, união, diferença e diferença "
"simétrica."

#: ../../reference/datamodel.rst:392
msgid ""
"For set elements, the same immutability rules apply as for dictionary keys. "
"Note that numeric types obey the normal rules for numeric comparison: if two "
"numbers compare equal (e.g., ``1`` and ``1.0``), only one of them can be "
"contained in a set."
msgstr ""
"Para elementos de conjunto, as mesmas regras de imutabilidade se aplicam às "
"chaves de dicionário. Observe que os tipos numéricos obedecem às regras "
"normais para comparação numérica: se dois números forem iguais (por exemplo, "
"``1`` e ``1.0``), apenas um deles pode estar contido em um conjunto."

#: ../../reference/datamodel.rst:397
msgid "There are currently two intrinsic set types:"
msgstr "Atualmente, existem dois tipos de conjuntos intrínsecos:"

#: ../../reference/datamodel.rst:404
msgid "Sets"
msgstr "Conjuntos"

#: ../../reference/datamodel.rst:402
msgid ""
"These represent a mutable set. They are created by the built-in :func:`set` "
"constructor and can be modified afterwards by several methods, such as :meth:"
"`~set.add`."
msgstr ""
"Estes representam um conjunto mutável. Eles são criados pelo construtor "
"embutido :func:`set` e podem ser modificados posteriormente por vários "
"métodos, como :meth:`~set.add`."

#: ../../reference/datamodel.rst:412
msgid "Frozen sets"
msgstr "Conjuntos congelados"

#: ../../reference/datamodel.rst:409
msgid ""
"These represent an immutable set.  They are created by the built-in :func:"
"`frozenset` constructor.  As a frozenset is immutable and :term:`hashable`, "
"it can be used again as an element of another set, or as a dictionary key."
msgstr ""
"Estes representam um conjunto imutável. Eles são criados pelo construtor "
"embutido :func:`frozenset`. Como um frozenset é imutável e :term:`hasheável "
"<hashable>`, ele pode ser usado novamente como um elemento de outro "
"conjunto, ou como uma chave de dicionário."

#: ../../reference/datamodel.rst:459
msgid "Mappings"
msgstr "Mapeamentos"

#: ../../reference/datamodel.rst:420
msgid ""
"These represent finite sets of objects indexed by arbitrary index sets. The "
"subscript notation ``a[k]`` selects the item indexed by ``k`` from the "
"mapping ``a``; this can be used in expressions and as the target of "
"assignments or :keyword:`del` statements. The built-in function :func:`len` "
"returns the number of items in a mapping."
msgstr ""
"Eles representam conjuntos finitos de objetos indexados por conjuntos de "
"índices arbitrários. A notação subscrito ``a[k]`` seleciona o item indexado "
"por ``k`` do mapeamento ``a``; isso pode ser usado em expressões e como alvo "
"de atribuições ou instruções :keyword:`del`. A função embutida :func:`len` "
"retorna o número de itens em um mapeamento."

#: ../../reference/datamodel.rst:426
msgid "There is currently a single intrinsic mapping type:"
msgstr "Atualmente, há um único tipo de mapeamento intrínseco:"

#: ../../reference/datamodel.rst:459
msgid "Dictionaries"
msgstr "Dicionários"

#: ../../reference/datamodel.rst:431
msgid ""
"These represent finite sets of objects indexed by nearly arbitrary values.  "
"The only types of values not acceptable as keys are values containing lists "
"or dictionaries or other mutable types that are compared by value rather "
"than by object identity, the reason being that the efficient implementation "
"of dictionaries requires a key's hash value to remain constant. Numeric "
"types used for keys obey the normal rules for numeric comparison: if two "
"numbers compare equal (e.g., ``1`` and ``1.0``) then they can be used "
"interchangeably to index the same dictionary entry."
msgstr ""
"Eles representam conjuntos finitos de objetos indexados por valores quase "
"arbitrários. Os únicos tipos de valores não aceitáveis como chaves são os "
"valores que contêm listas ou dicionários ou outros tipos mutáveis que são "
"comparados por valor em vez de por identidade de objeto, o motivo é que a "
"implementação eficiente de dicionários requer que o valor de hash de uma "
"chave permaneça constante. Os tipos numéricos usados para chaves obedecem às "
"regras normais para comparação numérica: se dois números forem iguais (por "
"exemplo, ``1`` e ``1.0``), eles podem ser usados alternadamente para indexar "
"a mesma entrada do dicionário."

#: ../../reference/datamodel.rst:440
msgid ""
"Dictionaries preserve insertion order, meaning that keys will be produced in "
"the same order they were added sequentially over the dictionary. Replacing "
"an existing key does not change the order, however removing a key and re-"
"inserting it will add it to the end instead of keeping its old place."
msgstr ""
"Dicionários preservam a ordem de inserção, o que significa que as chaves "
"serão produzidas na mesma ordem em que foram adicionadas sequencialmente no "
"dicionário. Substituir uma chave existente não altera a ordem, no entanto, "
"remover uma chave e inseri-la novamente irá adicioná-la ao final em vez de "
"manter seu lugar anterior."

#: ../../reference/datamodel.rst:445
msgid ""
"Dictionaries are mutable; they can be created by the ``{...}`` notation (see "
"section :ref:`dict`)."
msgstr ""
"Os dicionários são mutáveis; eles podem ser criados pela notação ``{...}`` "
"(veja a seção :ref:`dict`)."

#: ../../reference/datamodel.rst:452
msgid ""
"The extension modules :mod:`dbm.ndbm` and :mod:`dbm.gnu` provide additional "
"examples of mapping types, as does the :mod:`collections` module."
msgstr ""
"Os módulos de extensão :mod:`dbm.ndbm` e :mod:`dbm.gnu` fornecem exemplos "
"adicionais de tipos de mapeamento, assim como o módulo :mod:`collections`."

#: ../../reference/datamodel.rst:456
msgid ""
"Dictionaries did not preserve insertion order in versions of Python before "
"3.6. In CPython 3.6, insertion order was preserved, but it was considered an "
"implementation detail at that time rather than a language guarantee."
msgstr ""
"Dicionários não preservavam a ordem de inserção nas versões do Python "
"anteriores à 3.6. No CPython 3.6, a ordem de inserção foi preservada, mas "
"foi considerada um detalhe de implementação naquela época, em vez de uma "
"garantia da linguagem."

#: ../../reference/datamodel.rst:717
msgid "Callable types"
msgstr "Tipos chamáveis"

#: ../../reference/datamodel.rst:468
msgid ""
"These are the types to which the function call operation (see section :ref:"
"`calls`) can be applied:"
msgstr ""
"Estes são os tipos aos quais a operação de chamada de função (veja a seção :"
"ref:`calls`) pode ser aplicada:"

#: ../../reference/datamodel.rst:571
msgid "User-defined functions"
msgstr "Funções definidas pelo usuário"

#: ../../reference/datamodel.rst:477
msgid ""
"A user-defined function object is created by a function definition (see "
"section :ref:`function`).  It should be called with an argument list "
"containing the same number of items as the function's formal parameter list."
msgstr ""
"Um objeto função definido pelo usuário será criado pela definição de função "
"(veja a seção :ref:`function`). A mesma deverá ser invocada com uma lista de "
"argumentos contendo o mesmo número de itens que a lista de parâmetros "
"formais da função."

#: ../../reference/datamodel.rst:482
msgid "Special attributes:"
msgstr "Atributos especiais:"

#: ../../reference/datamodel.rst:500
msgid "Attribute"
msgstr "Atributo"

#: ../../reference/datamodel.rst:500
msgid "Meaning"
msgstr "Significado"

#: ../../reference/datamodel.rst:502
msgid ":attr:`__doc__`"
msgstr ":attr:`__doc__`"

#: ../../reference/datamodel.rst:502
msgid ""
"The function's documentation string, or ``None`` if unavailable; not "
"inherited by subclasses."
msgstr ""
"A string de documentação da função, ou ``None`` se indisponível; não herdado "
"por subclasses."

#: ../../reference/datamodel.rst:502 ../../reference/datamodel.rst:507
#: ../../reference/datamodel.rst:510 ../../reference/datamodel.rst:515
#: ../../reference/datamodel.rst:519 ../../reference/datamodel.rst:525
#: ../../reference/datamodel.rst:535 ../../reference/datamodel.rst:546
#: ../../reference/datamodel.rst:553
msgid "Writable"
msgstr "Gravável"

#: ../../reference/datamodel.rst:507
msgid ":attr:`~definition.\\ __name__`"
msgstr ":attr:`~definition.\\ __name__`"

#: ../../reference/datamodel.rst:507
msgid "The function's name."
msgstr "O nome da função."

#: ../../reference/datamodel.rst:510
msgid ":attr:`~definition.\\ __qualname__`"
msgstr ":attr:`~definition.\\ __qualname__`"

#: ../../reference/datamodel.rst:510
msgid "The function's :term:`qualified name`."
msgstr "O :term:`nome qualificado <qualified name>` da função."

#: ../../reference/datamodel.rst:515
msgid ":attr:`__module__`"
msgstr ":attr:`__module__`"

#: ../../reference/datamodel.rst:515
msgid ""
"The name of the module the function was defined in, or ``None`` if "
"unavailable."
msgstr ""
"O nome do módulo em que a função foi definida ou ``None`` se indisponível."

#: ../../reference/datamodel.rst:519
msgid ":attr:`__defaults__`"
msgstr ":attr:`__defaults__`"

#: ../../reference/datamodel.rst:519
msgid ""
"A tuple containing default argument values for those arguments that have "
"defaults, or ``None`` if no arguments have a default value."
msgstr ""
"Uma tupla contendo valores de argumento padrão para aqueles argumentos que "
"possuem padrões, ou ``None`` se nenhum argumento tiver um valor padrão."

#: ../../reference/datamodel.rst:525
msgid ":attr:`__code__`"
msgstr ":attr:`__code__`"

#: ../../reference/datamodel.rst:525
msgid "The code object representing the compiled function body."
msgstr "O objeto código que representa o corpo da função compilada."

#: ../../reference/datamodel.rst:528
msgid ":attr:`__globals__`"
msgstr ":attr:`__globals__`"

#: ../../reference/datamodel.rst:528
msgid ""
"A reference to the dictionary that holds the function's global variables --- "
"the global namespace of the module in which the function was defined."
msgstr ""
"Uma referência ao dicionário que contém as variáveis globais da função --- o "
"espaço de nomes global do módulo no qual a função foi definida."

#: ../../reference/datamodel.rst:528 ../../reference/datamodel.rst:539
msgid "Read-only"
msgstr "Somente leitura"

#: ../../reference/datamodel.rst:535
msgid ":attr:`~object.__dict__`"
msgstr ":attr:`~object.__dict__`"

#: ../../reference/datamodel.rst:535
msgid "The namespace supporting arbitrary function attributes."
msgstr ""
"O espaço de nomes que oferece suporte a atributos de função arbitrários."

#: ../../reference/datamodel.rst:539
msgid ":attr:`__closure__`"
msgstr ":attr:`__closure__`"

#: ../../reference/datamodel.rst:539
msgid ""
"``None`` or a tuple of cells that contain bindings for the function's free "
"variables. See below for information on the ``cell_contents`` attribute."
msgstr ""
"``None`` ou uma tupla de células que contêm ligações para as variáveis "
"livres da função. Veja abaixo as informações sobre o atributo "
"``cell_contents``."

#: ../../reference/datamodel.rst:546
msgid ":attr:`__annotations__`"
msgstr ":attr:`__annotations__`"

#: ../../reference/datamodel.rst:546
msgid ""
"A dict containing annotations of parameters.  The keys of the dict are the "
"parameter names, and ``'return'`` for the return annotation, if provided."
msgstr ""
"Um dicionário contendo anotações de parâmetros. As chaves do dict são os "
"nomes dos parâmetros e ``'return'`` para a anotação de retorno, se fornecida."

#: ../../reference/datamodel.rst:553
msgid ":attr:`__kwdefaults__`"
msgstr ":attr:`__kwdefaults__`"

#: ../../reference/datamodel.rst:553
msgid "A dict containing defaults for keyword-only parameters."
msgstr "Um dicionário contendo padrões para parâmetros somente-nomeados."

#: ../../reference/datamodel.rst:557
msgid ""
"Most of the attributes labelled \"Writable\" check the type of the assigned "
"value."
msgstr ""
"A maioria dos atributos rotulados como \"Gravável\" verifica o tipo do valor "
"atribuído."

#: ../../reference/datamodel.rst:559
msgid ""
"Function objects also support getting and setting arbitrary attributes, "
"which can be used, for example, to attach metadata to functions.  Regular "
"attribute dot-notation is used to get and set such attributes. *Note that "
"the current implementation only supports function attributes on user-defined "
"functions. Function attributes on built-in functions may be supported in the "
"future.*"
msgstr ""
"Os objetos função também implementam a obtenção e configuração de atributos "
"arbitrários, que podem ser usados, por exemplo, para anexar metadados a "
"funções. A notação de ponto de atributo regular é usada para obter e definir "
"esses atributos. *Observe que a implementação atual só oferece suporte a "
"atributos de função em funções definidas pelo usuário. Atributos de função "
"embutidas podem ser implementados no futuro.*"

#: ../../reference/datamodel.rst:565
msgid ""
"A cell object has the attribute ``cell_contents``. This can be used to get "
"the value of the cell, as well as set the value."
msgstr ""
"Um objeto de célula tem o atributo ``cell_contents``. Isso pode ser usado "
"para obter o valor da célula, bem como definir o valor."

#: ../../reference/datamodel.rst:568
msgid ""
"Additional information about a function's definition can be retrieved from "
"its code object; see the description of internal types below. The :data:"
"`cell <types.CellType>` type can be accessed in the :mod:`types` module."
msgstr ""
"Informações adicionais sobre a definição de uma função podem ser recuperadas "
"de seu objeto de código; veja a descrição dos tipos internos abaixo. O tipo :"
"data:`cell <types.CellType>` pode ser acessado no módulo :mod:`types`."

#: ../../reference/datamodel.rst:634
msgid "Instance methods"
msgstr "Métodos de instância"

#: ../../reference/datamodel.rst:579
msgid ""
"An instance method object combines a class, a class instance and any "
"callable object (normally a user-defined function)."
msgstr ""
"Um objeto método de instância combina uma classe, uma instância de classe e "
"qualquer objeto chamável (normalmente uma função definida pelo usuário)."

#: ../../reference/datamodel.rst:589
msgid ""
"Special read-only attributes: :attr:`__self__` is the class instance "
"object, :attr:`__func__` is the function object; :attr:`__doc__` is the "
"method's documentation (same as ``__func__.__doc__``); :attr:`~definition."
"__name__` is the method name (same as ``__func__.__name__``); :attr:"
"`__module__` is the name of the module the method was defined in, or "
"``None`` if unavailable."
msgstr ""
"Atributos especiais somente leitura: :attr:`__self__` é o objeto de "
"instância da classe, :attr:`__func__` é o objeto função; :attr:`__doc__` é a "
"documentação do método (mesmo que ``__func__.__doc__``); :attr:`~definition."
"__ name__` é o nome do método (mesmo que ``__func__.__name__``); :attr:"
"`__module__` é o nome do módulo no qual o método foi definido, ou ``None`` "
"se indisponível."

#: ../../reference/datamodel.rst:595
msgid ""
"Methods also support accessing (but not setting) the arbitrary function "
"attributes on the underlying function object."
msgstr ""
"Os métodos também implementam o acesso (mas não a configuração) dos "
"atributos arbitrários da função no objeto função subjacente."

#: ../../reference/datamodel.rst:598
msgid ""
"User-defined method objects may be created when getting an attribute of a "
"class (perhaps via an instance of that class), if that attribute is a user-"
"defined function object or a class method object."
msgstr ""
"Os objetos método definidos pelo usuário podem ser criados ao se obter um "
"atributo de uma classe (talvez por meio de uma instância dessa classe), se "
"esse atributo for um objeto função definido pelo usuário ou um objeto método "
"de classe."

#: ../../reference/datamodel.rst:602
msgid ""
"When an instance method object is created by retrieving a user-defined "
"function object from a class via one of its instances, its :attr:`__self__` "
"attribute is the instance, and the method object is said to be bound.  The "
"new method's :attr:`__func__` attribute is the original function object."
msgstr ""
"Quando um objeto método de instância é criado recuperando um objeto  função "
"definido pelo usuário de uma classe por meio de uma de suas instâncias, seu "
"atributo :attr:`__self__` é a instância, e o objeto método é considerado "
"vinculado. O atributo :attr:`__func__` do novo método é o objeto da função "
"original."

#: ../../reference/datamodel.rst:608
msgid ""
"When an instance method object is created by retrieving a class method "
"object from a class or instance, its :attr:`__self__` attribute is the class "
"itself, and its :attr:`__func__` attribute is the function object underlying "
"the class method."
msgstr ""
"Quando um objeto método de instância é criado recuperando um objeto  método "
"de classe de uma classe ou instância, seu atributo :attr:`__self__` é a "
"própria classe, e seu atributo :attr:`__func__` é o objeto função subjacente "
"ao método de classe."

#: ../../reference/datamodel.rst:613
msgid ""
"When an instance method object is called, the underlying function (:attr:"
"`__func__`) is called, inserting the class instance (:attr:`__self__`) in "
"front of the argument list.  For instance, when :class:`C` is a class which "
"contains a definition for a function :meth:`f`, and ``x`` is an instance of :"
"class:`C`, calling ``x.f(1)`` is equivalent to calling ``C.f(x, 1)``."
msgstr ""
"Quando um objeto método de instância é chamado, a função subjacente (:attr:"
"`__func__`) é chamada, inserindo a instância de classe (:attr:`__self__`) na "
"frente da lista de argumentos. Por exemplo, quando :class:`C` é uma classe "
"que contém uma definição para uma função :meth:`f`, e ``x`` é uma instância "
"de :class:`C`, chamando ``x.f(1)`` é equivalente a chamar ``C.f(x, 1)``."

#: ../../reference/datamodel.rst:620
msgid ""
"When an instance method object is derived from a class method object, the "
"\"class instance\" stored in :attr:`__self__` will actually be the class "
"itself, so that calling either ``x.f(1)`` or ``C.f(1)`` is equivalent to "
"calling ``f(C,1)`` where ``f`` is the underlying function."
msgstr ""
"Quando um objeto método de instância é derivado de um objeto método de "
"classe, a \"instância de classe\" armazenada em :attr:`__self__` será na "
"verdade a própria classe, de modo que chamar ``x.f(1)`` ou ``C.f(1)`` é "
"equivalente a chamar ``f(C,1)`` sendo ``f`` a função subjacente."

#: ../../reference/datamodel.rst:625
msgid ""
"Note that the transformation from function object to instance method object "
"happens each time the attribute is retrieved from the instance.  In some "
"cases, a fruitful optimization is to assign the attribute to a local "
"variable and call that local variable. Also notice that this transformation "
"only happens for user-defined functions; other callable objects (and all non-"
"callable objects) are retrieved without transformation.  It is also "
"important to note that user-defined functions which are attributes of a "
"class instance are not converted to bound methods; this *only* happens when "
"the function is an attribute of the class."
msgstr ""
"Observe que a transformação de objeto função em objeto método de instância "
"ocorre sempre que o atributo é recuperado da instância. Em alguns casos, uma "
"otimização frutífera é atribuir o atributo a uma variável local e chamar "
"essa variável local. Observe também que essa transformação ocorre apenas "
"para funções definidas pelo usuário; outros objetos chamáveis (e todos os "
"objetos não chamáveis) são recuperados sem transformação. Também é "
"importante observar que as funções definidas pelo usuário que são atributos "
"de uma instância de classe não são convertidas em métodos vinculados; isso "
"*apenas* acontece quando a função é um atributo da classe."

#: ../../reference/datamodel.rst:649
msgid "Generator functions"
msgstr "Funções geradoras"

#: ../../reference/datamodel.rst:641
msgid ""
"A function or method which uses the :keyword:`yield` statement (see section :"
"ref:`yield`) is called a :dfn:`generator function`.  Such a function, when "
"called, always returns an iterator object which can be used to execute the "
"body of the function:  calling the iterator's :meth:`iterator.__next__` "
"method will cause the function to execute until it provides a value using "
"the :keyword:`!yield` statement.  When the function executes a :keyword:"
"`return` statement or falls off the end, a :exc:`StopIteration` exception is "
"raised and the iterator will have reached the end of the set of values to be "
"returned."
msgstr ""
"Uma função ou método que usa a instrução :keyword:`yield` (veja a seção :ref:"
"`yield`) é chamada de :dfn:`função geradora`. Tal função, quando chamada, "
"sempre retorna um objeto iterador que pode ser usado para executar o corpo "
"da função: chamar o método :meth:`iterator.__next__` do iterador fará com "
"que a função seja executada até que forneça um valor usando a instrução :"
"keyword:`!yield`. Quando a função executa uma instrução :keyword:`return` ou "
"sai do fim, uma exceção :exc:`StopIteration` é levantada e o iterador terá "
"alcançado o fim do conjunto de valores a serem retornados."

#: ../../reference/datamodel.rst:659
msgid "Coroutine functions"
msgstr "Funções de corrotina"

#: ../../reference/datamodel.rst:655
msgid ""
"A function or method which is defined using :keyword:`async def` is called "
"a :dfn:`coroutine function`.  Such a function, when called, returns a :term:"
"`coroutine` object.  It may contain :keyword:`await` expressions, as well "
"as :keyword:`async with` and :keyword:`async for` statements. See also the :"
"ref:`coroutine-objects` section."
msgstr ""
"Uma função ou um método que é definida(o) usando :keyword:`async def` é "
"chamado de :dfn:`função de corrotina`. Tal função, quando chamada, retorna "
"um objeto de :term:`corrotina`. Ele pode conter expressões :keyword:`await`, "
"bem como instruções :keyword:`async with` e :keyword:`async for`. Veja "
"também a seção :ref:`coroutine-objects`."

#: ../../reference/datamodel.rst:678
msgid "Asynchronous generator functions"
msgstr "Funções geradoras assíncronas"

#: ../../reference/datamodel.rst:666
msgid ""
"A function or method which is defined using :keyword:`async def` and which "
"uses the :keyword:`yield` statement is called a :dfn:`asynchronous generator "
"function`.  Such a function, when called, returns an asynchronous iterator "
"object which can be used in an :keyword:`async for` statement to execute the "
"body of the function."
msgstr ""
"Uma função ou um método que é definida(o) usando :keyword:`async def` e que "
"usa a instrução :keyword:`yield` é chamada de :dfn:`função geradora "
"assíncrona`. Tal função, quando chamada, retorna um objeto iterador "
"assíncrono que pode ser usado em uma instrução :keyword:`async for` para "
"executar o corpo da função."

#: ../../reference/datamodel.rst:672
msgid ""
"Calling the asynchronous iterator's :meth:`aiterator.__anext__` method will "
"return an :term:`awaitable` which when awaited will execute until it "
"provides a value using the :keyword:`yield` expression.  When the function "
"executes an empty :keyword:`return` statement or falls off the end, a :exc:"
"`StopAsyncIteration` exception is raised and the asynchronous iterator will "
"have reached the end of the set of values to be yielded."
msgstr ""
"Chamar o método :meth:`aiterator.__anext__` do iterador assíncrono retornará "
"um :term:`aguardável <awaitable>` que, quando aguardado, será executado até "
"fornecer um valor usando a expressão :keyword:`yield`. Quando a função "
"executa uma instrução vazia :keyword:`return` ou cai no final, uma exceção :"
"exc:`StopAsyncIteration` é levantada e o iterador assíncrono terá alcançado "
"o final do conjunto de valores a serem produzidos."

#: ../../reference/datamodel.rst:693
msgid "Built-in functions"
msgstr "Funções embutidas"

#: ../../reference/datamodel.rst:686
msgid ""
"A built-in function object is a wrapper around a C function.  Examples of "
"built-in functions are :func:`len` and :func:`math.sin` (:mod:`math` is a "
"standard built-in module). The number and type of the arguments are "
"determined by the C function. Special read-only attributes: :attr:`__doc__` "
"is the function's documentation string, or ``None`` if unavailable; :attr:"
"`~definition.__name__` is the function's name; :attr:`__self__` is set to "
"``None`` (but see the next item); :attr:`__module__` is the name of the "
"module the function was defined in or ``None`` if unavailable."
msgstr ""
"Um objeto função embutida é um invólucro em torno de uma função C. Exemplos "
"de funções embutidas são :func:`len` e :func:`math.sin` (:mod:`math` é um "
"módulo embutido padrão). O número e o tipo dos argumentos são determinados "
"pela função C. Atributos especiais de somente leitura: :attr:`__doc__` é a "
"string de documentação da função, ou ``None`` se indisponível; :attr:"
"`~definition.__name__` é o nome da função; :attr:`__self__` é definido como "
"``None`` (mas veja o próximo item); :attr:`__module__` é o nome do módulo no "
"qual a função foi definida ou ``None`` se indisponível."

#: ../../reference/datamodel.rst:705
msgid "Built-in methods"
msgstr "Métodos embutidos"

#: ../../reference/datamodel.rst:701
msgid ""
"This is really a different disguise of a built-in function, this time "
"containing an object passed to the C function as an implicit extra "
"argument.  An example of a built-in method is ``alist.append()``, assuming "
"*alist* is a list object. In this case, the special read-only attribute :"
"attr:`__self__` is set to the object denoted by *alist*."
msgstr ""
"Este é realmente um disfarce diferente de uma função embutida, desta vez "
"contendo um objeto passado para a função C como um argumento extra "
"implícito. Um exemplo de método embutido é ``alist.append()``, presumindo "
"que *alist* é um objeto de lista. Nesse caso, o atributo especial de somente "
"leitura :attr:`__self__` é definido como o objeto denotado por *alist*."

#: ../../reference/datamodel.rst:712
msgid "Classes"
msgstr "Classes"

#: ../../reference/datamodel.rst:708
msgid ""
"Classes are callable.  These objects normally act as factories for new "
"instances of themselves, but variations are possible for class types that "
"override :meth:`__new__`.  The arguments of the call are passed to :meth:"
"`__new__` and, in the typical case, to :meth:`__init__` to initialize the "
"new instance."
msgstr ""
"Classes são chamáveis. Esses objetos normalmente agem como fábricas para "
"novas instâncias de si mesmos, mas variações são possíveis para tipos de "
"classe que substituem :meth:`__new__`. Os argumentos da chamada são passados "
"para :meth:`__new__` e, no caso típico, para :meth:`__init__` para "
"inicializar a nova instância."

#: ../../reference/datamodel.rst:717
msgid "Class Instances"
msgstr "Instâncias de classe"

#: ../../reference/datamodel.rst:715
msgid ""
"Instances of arbitrary classes can be made callable by defining a :meth:"
"`__call__` method in their class."
msgstr ""
"Instâncias de classes arbitrárias podem ser tornados chamáveis definindo um "
"método :meth:`__call__` em sua classe."

#: ../../reference/datamodel.rst:767
msgid "Modules"
msgstr "Módulos"

#: ../../reference/datamodel.rst:724
msgid ""
"Modules are a basic organizational unit of Python code, and are created by "
"the :ref:`import system <importsystem>` as invoked either by the :keyword:"
"`import` statement, or by calling functions such as :func:`importlib."
"import_module` and built-in :func:`__import__`.  A module object has a "
"namespace implemented by a dictionary object (this is the dictionary "
"referenced by the ``__globals__`` attribute of functions defined in the "
"module).  Attribute references are translated to lookups in this dictionary, "
"e.g., ``m.x`` is equivalent to ``m.__dict__[\"x\"]``. A module object does "
"not contain the code object used to initialize the module (since it isn't "
"needed once the initialization is done)."
msgstr ""
"Módulos são uma unidade organizacional básica do código Python, e são "
"criados pelo :ref:`sistema de importação <importsystem>` quando invocado "
"pela instrução :keyword:`import`, ou chamando funções como :func:`importlib."
"import_module` e a embutida :func:`__import__`. Um objeto módulo tem um "
"espaço de nomes implementado por um objeto dicionário (este é o dicionário "
"referenciado pelo atributo ``__globals__`` das funções definidas no módulo). "
"As referências de atributos são traduzidas para pesquisas neste dicionário, "
"por exemplo, ``m.x`` é equivalente a ``m.__dict__[\"x\"]``. Um objeto módulo "
"não contém o objeto código usado para inicializar o módulo (uma vez que não "
"é necessário depois que a inicialização é concluída)."

#: ../../reference/datamodel.rst:736
msgid ""
"Attribute assignment updates the module's namespace dictionary, e.g., ``m.x "
"= 1`` is equivalent to ``m.__dict__[\"x\"] = 1``."
msgstr ""
"A atribuição de atributo atualiza o dicionário de espaço de nomes do módulo, "
"por exemplo, ``m.x = 1`` é equivalente a ``m.__dict__[\"x\"] = 1``."

#: ../../reference/datamodel.rst:746
msgid ""
"Predefined (writable) attributes: :attr:`__name__` is the module's name; :"
"attr:`__doc__` is the module's documentation string, or ``None`` if "
"unavailable; :attr:`__annotations__` (optional) is a dictionary containing :"
"term:`variable annotations <variable annotation>` collected during module "
"body execution; :attr:`__file__` is the pathname of the file from which the "
"module was loaded, if it was loaded from a file. The :attr:`__file__` "
"attribute may be missing for certain types of modules, such as C modules "
"that are statically linked into the interpreter; for extension modules "
"loaded dynamically from a shared library, it is the pathname of the shared "
"library file."
msgstr ""
"Atributos predefinidos (graváveis): :attr:`__name__` é o nome do módulo; :"
"attr:`__doc__` é a string de documentação do módulo, ou ``None`` se "
"indisponível; :attr:`__annotations__` (opcional) é um dicionário contendo :"
"term:`anotações de variáveis <variable annotation>` coletadas durante a "
"execução do corpo do módulo; :attr:`__file__` é o caminho do arquivo do qual "
"o módulo foi carregado, se ele foi carregado de um arquivo. O atributo :attr:"
"`__file__` pode estar faltando para certos tipos de módulos, como módulos C "
"que estão estaticamente vinculados ao interpretador; para módulos de "
"extensão carregados dinamicamente de uma biblioteca compartilhada, é o nome "
"do caminho do arquivo da biblioteca compartilhada."

#: ../../reference/datamodel.rst:759
msgid ""
"Special read-only attribute: :attr:`~object.__dict__` is the module's "
"namespace as a dictionary object."
msgstr ""
"Atributo especial somente leitura: :attr:`~object.__dict__` é o espaço de "
"nomes do módulo como um objeto dicionário."

#: ../../reference/datamodel.rst:764
msgid ""
"Because of the way CPython clears module dictionaries, the module dictionary "
"will be cleared when the module falls out of scope even if the dictionary "
"still has live references.  To avoid this, copy the dictionary or keep the "
"module around while using its dictionary directly."
msgstr ""
"Por causa da maneira como CPython limpa dicionários de módulos, o dicionário "
"do módulo será limpo quando o módulo sair do escopo, mesmo se o dicionário "
"ainda tiver referências ativas. Para evitar isso, copie o dicionário ou "
"mantenha o módulo por perto enquanto usa seu dicionário diretamente."

#: ../../reference/datamodel.rst:826
msgid "Custom classes"
msgstr "Classes personalizadas"

#: ../../reference/datamodel.rst:770
msgid ""
"Custom class types are typically created by class definitions (see section :"
"ref:`class`).  A class has a namespace implemented by a dictionary object. "
"Class attribute references are translated to lookups in this dictionary, e."
"g., ``C.x`` is translated to ``C.__dict__[\"x\"]`` (although there are a "
"number of hooks which allow for other means of locating attributes). When "
"the attribute name is not found there, the attribute search continues in the "
"base classes. This search of the base classes uses the C3 method resolution "
"order which behaves correctly even in the presence of 'diamond' inheritance "
"structures where there are multiple inheritance paths leading back to a "
"common ancestor. Additional details on the C3 MRO used by Python can be "
"found in the documentation accompanying the 2.3 release at https://www."
"python.org/download/releases/2.3/mro/."
msgstr ""
"Tipos de classe personalizados são tipicamente criados por definições de "
"classe (veja a seção :ref:`class`). Uma classe possui um espaço de nomes "
"implementado por um objeto dicionário. As referências de atributos de classe "
"são traduzidas para pesquisas neste dicionário, por exemplo, ``C.x`` é "
"traduzido para ``C.__dict__[\"x\"]`` (embora haja uma série de ganchos que "
"permitem outros meios de localizar atributos). Quando o nome do atributo não "
"é encontrado lá, a pesquisa do atributo continua nas classes base. Essa "
"pesquisa das classes base usa a ordem de resolução de métodos C3, que se "
"comporta corretamente mesmo na presença de estruturas de herança "
"\"diamante\", onde há vários caminhos de herança que levam de volta a um "
"ancestral comum. Detalhes adicionais sobre a ordem de resolução de métodos "
"C3 usado pelo Python podem ser encontrados na documentação que acompanha a "
"versão 2.3 em https://www.python.org/download/releases/2.3/mro/."

#: ../../reference/datamodel.rst:794
msgid ""
"When a class attribute reference (for class :class:`C`, say) would yield a "
"class method object, it is transformed into an instance method object whose :"
"attr:`__self__` attribute is :class:`C`.  When it would yield a static "
"method object, it is transformed into the object wrapped by the static "
"method object. See section :ref:`descriptors` for another way in which "
"attributes retrieved from a class may differ from those actually contained "
"in its :attr:`~object.__dict__`."
msgstr ""
"Quando uma referência de atributo de classe (para uma classe :class:`C`, "
"digamos) produziria um objeto método de classe, ele é transformado em um "
"objeto método de instância cujo atributo :attr:`__self__` é :class:`C`. "
"Quando produziria um objeto método estático, ele é transformado no objeto "
"encapsulado pelo objeto método estático. Veja a seção :ref:`descriptors` "
"para outra maneira em que os atributos recuperados de uma classe podem "
"diferir daqueles realmente contidos em seu :attr:`~object.__dict__`."

#: ../../reference/datamodel.rst:804
msgid ""
"Class attribute assignments update the class's dictionary, never the "
"dictionary of a base class."
msgstr ""
"As atribuições de atributos de classe atualizam o dicionário da classe, "
"nunca o dicionário de uma classe base."

#: ../../reference/datamodel.rst:809
msgid ""
"A class object can be called (see above) to yield a class instance (see "
"below)."
msgstr ""
"Um objeto classe pode ser chamado (veja acima) para produzir uma instância "
"de classe (veja abaixo)."

#: ../../reference/datamodel.rst:819
msgid ""
"Special attributes: :attr:`~definition.__name__` is the class name; :attr:"
"`__module__` is the module name in which the class was defined; :attr:"
"`~object.__dict__` is the dictionary containing the class's namespace; :attr:"
"`~class.__bases__` is a tuple containing the base classes, in the order of "
"their occurrence in the base class list; :attr:`__doc__` is the class's "
"documentation string, or ``None`` if undefined; :attr:`__annotations__` "
"(optional) is a dictionary containing :term:`variable annotations <variable "
"annotation>` collected during class body execution."
msgstr ""
"Atributos especiais: :attr:`~definition.__name__` é o nome da classe; :attr:"
"`__module__` é o nome do módulo no qual a classe foi definida; :attr:"
"`~object.__dict__` é o dicionário que contém o espaço de nomes da classe; :"
"attr:`~class.__bases__` é uma tupla contendo as classes base, na ordem de "
"sua ocorrência na lista de classes base; :attr:`__doc__` é a string de "
"documentação da classe, ou ``None`` se indefinido; :attr:`__annotations__` "
"(opcional) é um dicionário contendo :term:`anotações de variáveis <variable "
"annotation>` coletadas durante a execução do corpo da classe."

#: ../../reference/datamodel.rst:869
msgid "Class instances"
msgstr "Instâncias de classe"

#: ../../reference/datamodel.rst:835
msgid ""
"A class instance is created by calling a class object (see above).  A class "
"instance has a namespace implemented as a dictionary which is the first "
"place in which attribute references are searched.  When an attribute is not "
"found there, and the instance's class has an attribute by that name, the "
"search continues with the class attributes.  If a class attribute is found "
"that is a user-defined function object, it is transformed into an instance "
"method object whose :attr:`__self__` attribute is the instance.  Static "
"method and class method objects are also transformed; see above under "
"\"Classes\".  See section :ref:`descriptors` for another way in which "
"attributes of a class retrieved via its instances may differ from the "
"objects actually stored in the class's :attr:`~object.__dict__`.  If no "
"class attribute is found, and the object's class has a :meth:`__getattr__` "
"method, that is called to satisfy the lookup."
msgstr ""
"Uma instância de classe é criada chamando um objeto de classe (veja acima). "
"Uma instância de classe tem um espaço de nomes implementado como um "
"dicionário que é o primeiro lugar no qual as referências de atributos são "
"pesquisadas. Quando um atributo não é encontrado lá, e a classe da instância "
"possui um atributo com esse nome, a pesquisa continua com os atributos da "
"classe. Se for encontrado um atributo de classe que seja um objeto de função "
"definido pelo usuário, ele é transformado em um objeto de método de "
"instância cujo atributo :attr:`__self__` é a instância. Métodos estáticos e "
"objetos de método de classe também são transformados; veja acima em "
"\"Classes\". Veja a seção :ref:`descriptors` para outra maneira em que os "
"atributos de uma classe recuperados através de suas instâncias podem diferir "
"dos objetos realmente armazenados no :attr:`~object.__dict__` da classe. Se "
"nenhum atributo de classe for encontrado, e a classe do objeto tiver um "
"método :meth:`__getattr__`, que é chamado para satisfazer a pesquisa."

#: ../../reference/datamodel.rst:851
msgid ""
"Attribute assignments and deletions update the instance's dictionary, never "
"a class's dictionary.  If the class has a :meth:`__setattr__` or :meth:"
"`__delattr__` method, this is called instead of updating the instance "
"dictionary directly."
msgstr ""
"As atribuições e exclusões de atributos atualizam o dicionário da instância, "
"nunca o dicionário de uma classe. Se a classe tem um método :meth:"
"`__setattr__` ou :meth:`__delattr__`, ele é chamado ao invés de atualizar o "
"dicionário da instância diretamente."

#: ../../reference/datamodel.rst:861
msgid ""
"Class instances can pretend to be numbers, sequences, or mappings if they "
"have methods with certain special names.  See section :ref:`specialnames`."
msgstr ""
"As instâncias de classe podem fingir ser números, sequências ou mapeamentos "
"se tiverem métodos com certos nomes especiais. Veja a seção :ref:"
"`specialnames`."

#: ../../reference/datamodel.rst:868
msgid ""
"Special attributes: :attr:`~object.__dict__` is the attribute dictionary; :"
"attr:`~instance.__class__` is the instance's class."
msgstr ""
"Atributos especiais: :attr:`~object.__dict__` é o dicionário de atributos; :"
"attr:`~instance.__class__` é a classe da instância."

#: ../../reference/datamodel.rst:895
msgid "I/O objects (also known as file objects)"
msgstr "Objetos de E/S (também conhecidos como objetos arquivo)"

#: ../../reference/datamodel.rst:885
msgid ""
"A :term:`file object` represents an open file.  Various shortcuts are "
"available to create file objects: the :func:`open` built-in function, and "
"also :func:`os.popen`, :func:`os.fdopen`, and the :meth:`~socket.socket."
"makefile` method of socket objects (and perhaps by other functions or "
"methods provided by extension modules)."
msgstr ""
"O :term:`objeto arquivo <file object>` representa um arquivo aberto. Vários "
"atalhos estão disponíveis para criar objetos arquivos: a função embutida :"
"func:`open`, e também :func:`os.popen`, :func:`os.fdopen` e o método :meth:"
"`~socket.socket.makefile` de objetos soquete (e talvez por outras funções ou "
"métodos fornecidos por módulos de extensão)."

#: ../../reference/datamodel.rst:891
msgid ""
"The objects ``sys.stdin``, ``sys.stdout`` and ``sys.stderr`` are initialized "
"to file objects corresponding to the interpreter's standard input, output "
"and error streams; they are all open in text mode and therefore follow the "
"interface defined by the :class:`io.TextIOBase` abstract class."
msgstr ""
"Os objetos ``sys.stdin``, ``sys.stdout`` e ``sys.stderr`` são inicializados "
"para objetos arquivo que correspondem aos fluxos de entrada, saída e erro "
"padrão do interpretador; eles são todos abertos em modo texto e, portanto, "
"seguem a interface definida pela classe abstrata :class:`io.TextIOBase`."

#: ../../reference/datamodel.rst:1146
msgid "Internal types"
msgstr "Tipos internos"

#: ../../reference/datamodel.rst:902
msgid ""
"A few types used internally by the interpreter are exposed to the user. "
"Their definitions may change with future versions of the interpreter, but "
"they are mentioned here for completeness."
msgstr ""
"Alguns tipos usados internamente pelo interpretador são expostos ao usuário. "
"Suas definições podem mudar com versões futuras do interpretador, mas são "
"mencionadas aqui para fins de integridade."

#: ../../reference/datamodel.rst:977
msgid "Code objects"
msgstr "Objetos código"

#: ../../reference/datamodel.rst:909
msgid ""
"Code objects represent *byte-compiled* executable Python code, or :term:"
"`bytecode`. The difference between a code object and a function object is "
"that the function object contains an explicit reference to the function's "
"globals (the module in which it was defined), while a code object contains "
"no context; also the default argument values are stored in the function "
"object, not in the code object (because they represent values calculated at "
"run-time).  Unlike function objects, code objects are immutable and contain "
"no references (directly or indirectly) to mutable objects."
msgstr ""
"Objetos código representam código Python executável *compilados em bytes* "
"ou :term:`bytecode`. A diferença entre um objeto código e um objeto função é "
"que o objeto função contém uma referência explícita aos globais da função (o "
"módulo no qual foi definida), enquanto um objeto código não contém nenhum "
"contexto; também os valores de argumento padrão são armazenados no objeto "
"função, não no objeto código (porque eles representam os valores calculados "
"em tempo de execução). Ao contrário dos objetos função, os objetos código "
"são imutáveis e não contêm referências (direta ou indiretamente) a objetos "
"mutáveis."

#: ../../reference/datamodel.rst:936
msgid ""
"Special read-only attributes: :attr:`co_name` gives the function name; :attr:"
"`co_argcount` is the total number of positional arguments (including "
"positional-only arguments and arguments with default values); :attr:"
"`co_posonlyargcount` is the number of positional-only arguments (including "
"arguments with default values); :attr:`co_kwonlyargcount` is the number of "
"keyword-only arguments (including arguments with default values); :attr:"
"`co_nlocals` is the number of local variables used by the function "
"(including arguments); :attr:`co_varnames` is a tuple containing the names "
"of the local variables (starting with the argument names); :attr:"
"`co_cellvars` is a tuple containing the names of local variables that are "
"referenced by nested functions; :attr:`co_freevars` is a tuple containing "
"the names of free variables; :attr:`co_code` is a string representing the "
"sequence of bytecode instructions; :attr:`co_consts` is a tuple containing "
"the literals used by the bytecode; :attr:`co_names` is a tuple containing "
"the names used by the bytecode; :attr:`co_filename` is the filename from "
"which the code was compiled; :attr:`co_firstlineno` is the first line number "
"of the function; :attr:`co_lnotab` is a string encoding the mapping from "
"bytecode offsets to line numbers (for details see the source code of the "
"interpreter); :attr:`co_stacksize` is the required stack size; :attr:"
"`co_flags` is an integer encoding a number of flags for the interpreter."
msgstr ""
"Atributos especiais de somente leitura: :attr:`co_name` fornece o nome da "
"função; :attr:`co_argcount` é o número total de argumentos posicionais "
"(incluindo argumentos apenas posicionais e argumentos com valores padrão); :"
"attr:`co_posonlyargcount` é o número de argumentos somente-posicionais "
"(incluindo argumentos com valores padrão); :attr:`co_kwonlyargcount` é o "
"número de argumentos somente-nomeados (incluindo argumentos com valores "
"padrão); :attr:`co_nlocals` é o número de variáveis ​​locais usadas pela "
"função (incluindo argumentos); :attr:`co_varnames` é uma tupla contendo os "
"nomes das variáveis ​​locais (começando com os nomes dos argumentos); :attr:"
"`co_cellvars` é uma tupla contendo os nomes das variáveis ​​locais que são "
"referenciadas por funções aninhadas; :attr:`co_freevars` é uma tupla "
"contendo os nomes das variáveis ​​livres; :attr:`co_code` é uma string que "
"representa a sequência de instruções de bytecode; :attr:`co_consts` é uma "
"tupla contendo os literais usados ​​pelo bytecode; :attr:`co_names` é uma "
"tupla contendo os nomes usados ​​pelo bytecode; :attr:`co_filename` é o nome "
"do arquivo a partir do qual o código foi compilado; :attr:`co_firstlineno` é "
"o número da primeira linha da função; :attr:`co_lnotab` é uma string que "
"codifica o mapeamento de deslocamentos de bytecode para números de linha "
"(para detalhes, veja o código-fonte do interpretador); :attr:`co_stacksize` "
"é o tamanho de pilha necessário; :attr:`co_flags` é um inteiro que codifica "
"uma série de sinalizadores para o interpretador."

#: ../../reference/datamodel.rst:960
msgid ""
"The following flag bits are defined for :attr:`co_flags`: bit ``0x04`` is "
"set if the function uses the ``*arguments`` syntax to accept an arbitrary "
"number of positional arguments; bit ``0x08`` is set if the function uses the "
"``**keywords`` syntax to accept arbitrary keyword arguments; bit ``0x20`` is "
"set if the function is a generator."
msgstr ""
"Os seguintes bits sinalizadores são definidos para :attr:`co_flags`: o bit "
"``0x04`` é definido se a função usa a sintaxe ``*arguments`` para aceitar um "
"número arbitrário de argumentos posicionais; o bit ``0x08`` é definido se a "
"função usa a sintaxe ``**keywords`` para aceitar argumentos nomeados "
"arbitrários; o bit ``0x20`` é definido se a função for um gerador."

#: ../../reference/datamodel.rst:966
msgid ""
"Future feature declarations (``from __future__ import division``) also use "
"bits in :attr:`co_flags` to indicate whether a code object was compiled with "
"a particular feature enabled: bit ``0x2000`` is set if the function was "
"compiled with future division enabled; bits ``0x10`` and ``0x1000`` were "
"used in earlier versions of Python."
msgstr ""
"Declarações de recursos futuros (``from __future__ import division``) também "
"usam bits em :attr:`co_flags` para indicar se um objeto código foi compilado "
"com um recurso específico habilitado: o bit ``0x2000`` é definido se a "
"função foi compilada com divisão futura habilitada; os bits ``0x10`` e "
"``0x1000`` foram usados em versões anteriores do Python."

#: ../../reference/datamodel.rst:972
msgid "Other bits in :attr:`co_flags` are reserved for internal use."
msgstr "Outros bits em :attr:`co_flags` são reservados para uso interno."

#: ../../reference/datamodel.rst:976
msgid ""
"If a code object represents a function, the first item in :attr:`co_consts` "
"is the documentation string of the function, or ``None`` if undefined."
msgstr ""
"Se um objeto código representa uma função, o primeiro item em :attr:"
"`co_consts` é a string de documentação da função, ou ``None`` se indefinido."

#: ../../reference/datamodel.rst:1039
msgid "Frame objects"
msgstr "Objetos quadro"

#: ../../reference/datamodel.rst:984
msgid ""
"Frame objects represent execution frames.  They may occur in traceback "
"objects (see below), and are also passed to registered trace functions."
msgstr ""
"Objetos quadro representam quadros de execução. Eles podem ocorrer em "
"objetos traceback (veja abaixo) e também são passados para funções de "
"rastreamento registradas."

#: ../../reference/datamodel.rst:995
msgid ""
"Special read-only attributes: :attr:`f_back` is to the previous stack frame "
"(towards the caller), or ``None`` if this is the bottom stack frame; :attr:"
"`f_code` is the code object being executed in this frame; :attr:`f_locals` "
"is the dictionary used to look up local variables; :attr:`f_globals` is used "
"for global variables; :attr:`f_builtins` is used for built-in (intrinsic) "
"names; :attr:`f_lasti` gives the precise instruction (this is an index into "
"the bytecode string of the code object)."
msgstr ""
"Atributos especiais de somente leitura: :attr:`f_back` é o quadro de pilha "
"anterior (para o chamador), ou ``None`` se este é o quadro de pilha mais "
"inferior; :attr:`f_code` é o objeto código sendo executado neste quadro; :"
"attr:`f_locals` é o dicionário usado para procurar variáveis locais; :attr:"
"`f_globals` é usado para variáveis globais; :attr:`f_builtins` é usado para "
"nomes embutidos (intrínsecos); :attr:`f_lasti` dá a instrução precisa (este "
"é um índice para a string bytecode do objeto código)."

#: ../../reference/datamodel.rst:1003
msgid ""
"Accessing ``f_code`` raises an :ref:`auditing event <auditing>` ``object."
"__getattr__`` with arguments ``obj`` and ``\"f_code\"``."
msgstr ""
"Acessar ``f_code`` levanta um :ref:`evento de auditoria <auditing>` ``object."
"__getattr__`` com argumentos ``obj`` e ``\"f_code\"``."

#: ../../reference/datamodel.rst:1012
msgid ""
"Special writable attributes: :attr:`f_trace`, if not ``None``, is a function "
"called for various events during code execution (this is used by the "
"debugger). Normally an event is triggered for each new source line - this "
"can be disabled by setting :attr:`f_trace_lines` to :const:`False`."
msgstr ""
"Atributos especiais de escrita: :attr:`f_trace`, se não for ``None``, é uma "
"função chamada para vários eventos durante a execução do código (isso é "
"usado pelo depurador). Normalmente, um evento é disparado para cada nova "
"linha de origem -- isso pode ser desabilitado configurando :attr:"
"`f_trace_lines` para :const:`False`."

#: ../../reference/datamodel.rst:1017
msgid ""
"Implementations *may* allow per-opcode events to be requested by setting :"
"attr:`f_trace_opcodes` to :const:`True`. Note that this may lead to "
"undefined interpreter behaviour if exceptions raised by the trace function "
"escape to the function being traced."
msgstr ""
"As implementações *podem* permitir que eventos por opcode sejam solicitados "
"definindo :attr:`f_trace_opcodes` para :const:`True`. Observe que isso pode "
"levar a um comportamento indefinido do interpretador se as exceções "
"levantadas pela função de rastreamento escaparem para a função que está "
"sendo rastreada."

#: ../../reference/datamodel.rst:1022
msgid ""
":attr:`f_lineno` is the current line number of the frame --- writing to this "
"from within a trace function jumps to the given line (only for the bottom-"
"most frame).  A debugger can implement a Jump command (aka Set Next "
"Statement) by writing to f_lineno."
msgstr ""
":attr:`f_lineno` é o número da linha atual do quadro -- escrever nele a "
"partir de uma função de rastreamento salta para a linha fornecida (apenas "
"para o quadro mais abaixo). Um depurador pode implementar um comando Jump "
"(também conhecido como Set Next Statement) escrevendo para f_lineno."

#: ../../reference/datamodel.rst:1027
msgid "Frame objects support one method:"
msgstr "Objetos quadro têm suporte a um método:"

#: ../../reference/datamodel.rst:1031
msgid ""
"This method clears all references to local variables held by the frame.  "
"Also, if the frame belonged to a generator, the generator is finalized.  "
"This helps break reference cycles involving frame objects (for example when "
"catching an exception and storing its traceback for later use)."
msgstr ""
"Este método limpa todas as referências a variáveis locais mantidas pelo "
"quadro. Além disso, se o quadro pertencer a um gerador, o gerador é "
"finalizado. Isso ajuda a quebrar os ciclos de referência que envolvem "
"objetos quadro (por exemplo, ao capturar uma exceção e armazenar seu "
"traceback para uso posterior)."

#: ../../reference/datamodel.rst:1037
msgid ":exc:`RuntimeError` is raised if the frame is currently executing."
msgstr ":exc:`RuntimeError` é levantada se o quadro estiver em execução."

#: ../../reference/datamodel.rst:1102
msgid "Traceback objects"
msgstr "Objetos traceback"

#: ../../reference/datamodel.rst:1054
msgid ""
"Traceback objects represent a stack trace of an exception.  A traceback "
"object is implicitly created when an exception occurs, and may also be "
"explicitly created by calling :class:`types.TracebackType`."
msgstr ""
"Objetos traceback representam um stack trace (situação da pilha de execução) "
"de uma exceção. Um objeto traceback é criado implicitamente quando ocorre "
"uma exceção e também pode ser criado explicitamente chamando :class:`types."
"TracebackType`."

#: ../../reference/datamodel.rst:1058
msgid ""
"For implicitly created tracebacks, when the search for an exception handler "
"unwinds the execution stack, at each unwound level a traceback object is "
"inserted in front of the current traceback.  When an exception handler is "
"entered, the stack trace is made available to the program. (See section :ref:"
"`try`.) It is accessible as the third item of the tuple returned by ``sys."
"exc_info()``, and as the ``__traceback__`` attribute of the caught exception."
msgstr ""
"Para tracebacks criados implicitamente, quando a busca por um manipulador de "
"exceção desenrola a pilha de execução, em cada nível desenrolado um objeto "
"traceback é inserido na frente do traceback atual. Quando um manipulador de "
"exceção é inserido, o stack trace é disponibilizado para o programa. (Veja a "
"seção :ref:`try`.) É acessível como o terceiro item da tupla retornada por "
"``sys.exc_info()``, e como o atributo ``__traceback__`` da exceção capturada."

#: ../../reference/datamodel.rst:1066
msgid ""
"When the program contains no suitable handler, the stack trace is written "
"(nicely formatted) to the standard error stream; if the interpreter is "
"interactive, it is also made available to the user as ``sys.last_traceback``."
msgstr ""
"Quando o programa não contém um manipulador adequado, o stack trace é "
"escrito (formatado de maneira adequada) no fluxo de erro padrão; se o "
"interpretador for interativo, ele também é disponibilizado ao usuário como "
"``sys.last_traceback``."

#: ../../reference/datamodel.rst:1071
msgid ""
"For explicitly created tracebacks, it is up to the creator of the traceback "
"to determine how the ``tb_next`` attributes should be linked to form a full "
"stack trace."
msgstr ""
"Para tracebacks criados explicitamente, cabe ao criador do traceback "
"determinar como os atributos ``tb_next`` devem ser vinculados para formar um "
"stack trace completo."

#: ../../reference/datamodel.rst:1081
msgid ""
"Special read-only attributes: :attr:`tb_frame` points to the execution frame "
"of the current level; :attr:`tb_lineno` gives the line number where the "
"exception occurred; :attr:`tb_lasti` indicates the precise instruction. The "
"line number and last instruction in the traceback may differ from the line "
"number of its frame object if the exception occurred in a :keyword:`try` "
"statement with no matching except clause or with a finally clause."
msgstr ""
"Atributos especiais de somente leitura: :attr:`tb_frame` aponta para o "
"quadro de execução do nível atual; :attr:`tb_lineno` fornece o número da "
"linha onde ocorreu a exceção; :attr:`tb_lasti` indica a instrução precisa. O "
"número da linha e a última instrução no traceback podem diferir do número da "
"linha de seu objeto quadro se a exceção ocorreu em uma instrução :keyword:"
"`try` sem cláusula except correspondente ou com uma cláusula finally."

#: ../../reference/datamodel.rst:1090
msgid ""
"Accessing ``tb_frame`` raises an :ref:`auditing event <auditing>` ``object."
"__getattr__`` with arguments ``obj`` and ``\"tb_frame\"``."
msgstr ""
"Acessar ``tb_frame`` levanta um :ref:`evento de auditoria <auditing>` "
"``object.__getattr__`` com argumentos ``obj`` e ``\"tb_frame\"``."

#: ../../reference/datamodel.rst:1096
msgid ""
"Special writable attribute: :attr:`tb_next` is the next level in the stack "
"trace (towards the frame where the exception occurred), or ``None`` if there "
"is no next level."
msgstr ""
"Atributo especial de escrita: :attr:`tb_next` é o próximo nível no stack "
"trace (em direção ao quadro onde a exceção ocorreu), ou ``None`` se não "
"houver próximo nível."

#: ../../reference/datamodel.rst:1100
msgid ""
"Traceback objects can now be explicitly instantiated from Python code, and "
"the ``tb_next`` attribute of existing instances can be updated."
msgstr ""
"Os objetos traceback agora podem ser explicitamente instanciados a partir do "
"código Python, e o atributo ``tb_next`` das instâncias existentes pode ser "
"atualizado."

#: ../../reference/datamodel.rst:1128
msgid "Slice objects"
msgstr "Objetos slice"

#: ../../reference/datamodel.rst:1107
msgid ""
"Slice objects are used to represent slices for :meth:`__getitem__` methods.  "
"They are also created by the built-in :func:`slice` function."
msgstr ""
"Objetos slice são usados para representar fatias para métodos :meth:"
"`__getitem__`. Eles também são criados pela função embutida :func:`slice`."

#: ../../reference/datamodel.rst:1115
msgid ""
"Special read-only attributes: :attr:`~slice.start` is the lower bound; :attr:"
"`~slice.stop` is the upper bound; :attr:`~slice.step` is the step value; "
"each is ``None`` if omitted.  These attributes can have any type."
msgstr ""
"Atributos especiais de somente leitura: :attr:`~slice.start` é o limite "
"inferior; :attr:`~slice.stop` é o limite superior; :attr:`~slice.step` é o "
"valor da diferença entre elementos subjacentes; cada um desses atributos é "
"``None`` se omitido. Esses atributos podem ter qualquer tipo."

#: ../../reference/datamodel.rst:1119
msgid "Slice objects support one method:"
msgstr "Objetos slice têm suporte a um método:"

#: ../../reference/datamodel.rst:1123
msgid ""
"This method takes a single integer argument *length* and computes "
"information about the slice that the slice object would describe if applied "
"to a sequence of *length* items.  It returns a tuple of three integers; "
"respectively these are the *start* and *stop* indices and the *step* or "
"stride length of the slice. Missing or out-of-bounds indices are handled in "
"a manner consistent with regular slices."
msgstr ""
"Este método recebe um único argumento inteiro *length* e calcula informações "
"sobre a fatia que o objeto slice descreveria se aplicado a uma sequência de "
"itens de *length*. Ele retorna uma tupla de três inteiros; respectivamente, "
"estes são os índices *start* e *stop* e o *step* ou comprimento de avanços "
"da fatia. Índices ausentes ou fora dos limites são tratados de maneira "
"consistente com fatias regulares."

#: ../../reference/datamodel.rst:1138
msgid "Static method objects"
msgstr "Objetos método estático"

#: ../../reference/datamodel.rst:1131
msgid ""
"Static method objects provide a way of defeating the transformation of "
"function objects to method objects described above. A static method object "
"is a wrapper around any other object, usually a user-defined method object. "
"When a static method object is retrieved from a class or a class instance, "
"the object actually returned is the wrapped object, which is not subject to "
"any further transformation. Static method objects are not themselves "
"callable, although the objects they wrap usually are. Static method objects "
"are created by the built-in :func:`staticmethod` constructor."
msgstr ""
"Objetos método estáticos fornecem uma maneira de derrotar a transformação de "
"objetos função em objetos método descritos acima. Um objeto método estático "
"é um wrapper em torno de qualquer outro objeto, geralmente um objeto método "
"definido pelo usuário. Quando um objeto método estático é recuperado de uma "
"classe ou instância de classe, o objeto realmente retornado é o objeto "
"envolto, que não está sujeito a nenhuma transformação posterior. Os objetos "
"método estáticos não são chamáveis, embora os objetos que envolvem "
"geralmente o sejam. Objetos método estáticos são criados pelo construtor "
"embutido :func:`staticmethod`."

#: ../../reference/datamodel.rst:1146
msgid "Class method objects"
msgstr "Objetos método de classe"

#: ../../reference/datamodel.rst:1141
msgid ""
"A class method object, like a static method object, is a wrapper around "
"another object that alters the way in which that object is retrieved from "
"classes and class instances. The behaviour of class method objects upon such "
"retrieval is described above, under \"User-defined methods\". Class method "
"objects are created by the built-in :func:`classmethod` constructor."
msgstr ""
"Um objeto método de classe, como um objeto método estático, é um invólucro "
"em torno de outro objeto que altera a maneira como esse objeto é recuperado "
"de classes e instâncias de classe. O comportamento dos objetos método de "
"classe após tal recuperação é descrito acima, em \"Métodos definidos pelo "
"usuário\". Objetos método de classe são criados pelo construtor embutido :"
"func:`classmethod`."

#: ../../reference/datamodel.rst:1151
msgid "Special method names"
msgstr "Nomes de métodos especiais"

#: ../../reference/datamodel.rst:1157
msgid ""
"A class can implement certain operations that are invoked by special syntax "
"(such as arithmetic operations or subscripting and slicing) by defining "
"methods with special names. This is Python's approach to :dfn:`operator "
"overloading`, allowing classes to define their own behavior with respect to "
"language operators.  For instance, if a class defines a method named :meth:"
"`__getitem__`, and ``x`` is an instance of this class, then ``x[i]`` is "
"roughly equivalent to ``type(x).__getitem__(x, i)``.  Except where "
"mentioned, attempts to execute an operation raise an exception when no "
"appropriate method is defined (typically :exc:`AttributeError` or :exc:"
"`TypeError`)."
msgstr ""
"Uma classe pode implementar certas operações que são chamadas por sintaxe "
"especial (como operações aritméticas ou subscript e fatiamento), definindo "
"métodos com nomes especiais. Esta é a abordagem do Python para :dfn:"
"`sobrecarga de operador`, permitindo que as classes definam seu próprio "
"comportamento em relação aos operadores da linguagem. Por exemplo, se uma "
"classe define um método chamado :meth:`__getitem__`, e ``x`` é uma instância "
"desta classe, então ``x[i]` `é aproximadamente equivalente a ``type(x)."
"__getitem__(x, i)``. Exceto onde mencionado, as tentativas de executar uma "
"operação levantam uma exceção quando nenhum método apropriado é definido "
"(tipicamente :exc:`AttributeError` ou :exc:`TypeError`)."

#: ../../reference/datamodel.rst:1167
msgid ""
"Setting a special method to ``None`` indicates that the corresponding "
"operation is not available.  For example, if a class sets :meth:`__iter__` "
"to ``None``, the class is not iterable, so calling :func:`iter` on its "
"instances will raise a :exc:`TypeError` (without falling back to :meth:"
"`__getitem__`). [#]_"
msgstr ""
"Definir um método especial para ``None`` indica que a operação "
"correspondente não está disponível. Por exemplo, se uma classe define :meth:"
"`__iter__` para ``None``, a classe não é iterável, então chamar :func:`iter` "
"em suas instâncias irá levantar um :exc:`TypeError` (sem retroceder para :"
"meth:`__getitem__`). [#]_"

#: ../../reference/datamodel.rst:1173
msgid ""
"When implementing a class that emulates any built-in type, it is important "
"that the emulation only be implemented to the degree that it makes sense for "
"the object being modelled.  For example, some sequences may work well with "
"retrieval of individual elements, but extracting a slice may not make "
"sense.  (One example of this is the :class:`~xml.dom.NodeList` interface in "
"the W3C's Document Object Model.)"
msgstr ""
"Ao implementar uma classe que emula qualquer tipo embutido, é importante que "
"a emulação seja implementada apenas na medida em que faça sentido para o "
"objeto que está sendo modelado. Por exemplo, algumas sequências podem "
"funcionar bem com a recuperação de elementos individuais, mas extrair uma "
"fatia pode não fazer sentido. (Um exemplo disso é a interface :class:`~xml."
"dom.NodeList` no Document Object Model do W3C.)"

#: ../../reference/datamodel.rst:1184
msgid "Basic customization"
msgstr "Personalização básica"

#: ../../reference/datamodel.rst:1190
msgid ""
"Called to create a new instance of class *cls*.  :meth:`__new__` is a static "
"method (special-cased so you need not declare it as such) that takes the "
"class of which an instance was requested as its first argument.  The "
"remaining arguments are those passed to the object constructor expression "
"(the call to the class).  The return value of :meth:`__new__` should be the "
"new object instance (usually an instance of *cls*)."
msgstr ""
"Chamado para criar uma nova instância da classe *cls*. :meth:`__new__` é um "
"método estático (é um caso especial, então você não precisa declará-lo como "
"tal) que recebe a classe da qual uma instância foi solicitada como seu "
"primeiro argumento. Os argumentos restantes são aqueles passados para a "
"expressão do construtor do objeto (a chamada para a classe). O valor de "
"retorno de :meth:`__new__` deve ser a nova instância do objeto (geralmente "
"uma instância de *cls*)."

#: ../../reference/datamodel.rst:1197
msgid ""
"Typical implementations create a new instance of the class by invoking the "
"superclass's :meth:`__new__` method using ``super().__new__(cls[, ...])`` "
"with appropriate arguments and then modifying the newly-created instance as "
"necessary before returning it."
msgstr ""
"Implementações típicas criam uma nova instância da classe invocando o "
"método :meth:`__new__` da superclasse usando ``super().__new__(cls[, ...])`` "
"com os argumentos apropriados e, em seguida, modificando a instância recém-"
"criada conforme necessário antes de retorná-la."

#: ../../reference/datamodel.rst:1202
msgid ""
"If :meth:`__new__` is invoked during object construction and it returns an "
"instance of *cls*, then the new instance’s :meth:`__init__` method will be "
"invoked like ``__init__(self[, ...])``, where *self* is the new instance and "
"the remaining arguments are the same as were passed to the object "
"constructor."
msgstr ""
"Se :meth:`__new__` é chamado durante a construção do objeto e retorna uma "
"instância de *cls*, então o método :meth:`__init__` da nova instância será "
"chamado como ``__init__(self[, ...])``, onde *self* é a nova instância e os "
"argumentos restantes são os mesmos que foram passados para o construtor do "
"objeto."

#: ../../reference/datamodel.rst:1207
msgid ""
"If :meth:`__new__` does not return an instance of *cls*, then the new "
"instance's :meth:`__init__` method will not be invoked."
msgstr ""
"Se :meth:`__new__` não retornar uma instância de *cls*, então o método :meth:"
"`__init__` da nova instância não será invocado."

#: ../../reference/datamodel.rst:1210
msgid ""
":meth:`__new__` is intended mainly to allow subclasses of immutable types "
"(like int, str, or tuple) to customize instance creation.  It is also "
"commonly overridden in custom metaclasses in order to customize class "
"creation."
msgstr ""
":meth:`__new__` destina-se principalmente a permitir que subclasses de tipos "
"imutáveis (como int, str ou tupla) personalizem a criação de instâncias. "
"Também é comumente substituído em metaclasses personalizadas para "
"personalizar a criação de classes."

#: ../../reference/datamodel.rst:1219
msgid ""
"Called after the instance has been created (by :meth:`__new__`), but before "
"it is returned to the caller.  The arguments are those passed to the class "
"constructor expression.  If a base class has an :meth:`__init__` method, the "
"derived class's :meth:`__init__` method, if any, must explicitly call it to "
"ensure proper initialization of the base class part of the instance; for "
"example: ``super().__init__([args...])``."
msgstr ""
"Chamado após a instância ter sido criada (por :meth:`__new__`), mas antes de "
"ser retornada ao chamador. Os argumentos são aqueles passados para a "
"expressão do construtor da classe. Se uma classe base tem um método :meth:"
"`__init__`, o método :meth:`__init__` da classe derivada, se houver, deve "
"chamá-lo explicitamente para garantir a inicialização apropriada da parte da "
"classe base da instância; por exemplo: ``super().__init__([args...])``."

#: ../../reference/datamodel.rst:1226
msgid ""
"Because :meth:`__new__` and :meth:`__init__` work together in constructing "
"objects (:meth:`__new__` to create it, and :meth:`__init__` to customize "
"it), no non-``None`` value may be returned by :meth:`__init__`; doing so "
"will cause a :exc:`TypeError` to be raised at runtime."
msgstr ""
"Porque :meth:`__new__` e :meth:`__init__` trabalham juntos na construção de "
"objetos (:meth:`__new__` para criá-lo e :meth:`__init__` para personalizá-"
"lo), nenhum valor diferente de ``None`` pode ser retornado por :meth:"
"`__init__`; fazer isso fará com que uma :exc:`TypeError` seja levantada em "
"tempo de execução."

#: ../../reference/datamodel.rst:1239
msgid ""
"Called when the instance is about to be destroyed.  This is also called a "
"finalizer or (improperly) a destructor.  If a base class has a :meth:"
"`__del__` method, the derived class's :meth:`__del__` method, if any, must "
"explicitly call it to ensure proper deletion of the base class part of the "
"instance."
msgstr ""
"Chamado quando a instância está prestes a ser destruída. Também é chamada de "
"finalizador ou (incorretamente) de destruidor. Se uma classe base tem um "
"método :meth:`__del__`, o método :meth:`__del__` da classe derivada, se "
"houver, deve chamá-lo explicitamente para garantir a exclusão adequada da "
"parte da classe base da instância."

#: ../../reference/datamodel.rst:1245
msgid ""
"It is possible (though not recommended!) for the :meth:`__del__` method to "
"postpone destruction of the instance by creating a new reference to it.  "
"This is called object *resurrection*.  It is implementation-dependent "
"whether :meth:`__del__` is called a second time when a resurrected object is "
"about to be destroyed; the current :term:`CPython` implementation only calls "
"it once."
msgstr ""
"É possível (embora não recomendado!) para o método :meth:`__del__` adiar a "
"destruição da instância criando uma nova referência a ela. Isso é chamado de "
"*ressurreição* de objeto. Depende se a implementação de :meth:`__del__` é "
"chamado uma segunda vez quando um objeto ressuscitado está prestes a ser "
"destruído; a implementação atual do :term:`CPython` chama-o apenas uma vez."

#: ../../reference/datamodel.rst:1252
msgid ""
"It is not guaranteed that :meth:`__del__` methods are called for objects "
"that still exist when the interpreter exits."
msgstr ""
"Não é garantido que os métodos :meth:`__del__` sejam chamados para objetos "
"que ainda existam quando o interpretador sai."

#: ../../reference/datamodel.rst:1257
msgid ""
"``del x`` doesn't directly call ``x.__del__()`` --- the former decrements "
"the reference count for ``x`` by one, and the latter is only called when "
"``x``'s reference count reaches zero."
msgstr ""
"``del x`` não chama diretamente ``x.__del__()`` -- o primeiro diminui a "
"contagem de referências para ``x`` em um, e o segundo só é chamado quando a "
"contagem de referências de ``x`` atinge zero."

#: ../../reference/datamodel.rst:1272
msgid "Documentation for the :mod:`gc` module."
msgstr "Documentação do módulo :mod:`gc`."

#: ../../reference/datamodel.rst:1276
msgid ""
"Due to the precarious circumstances under which :meth:`__del__` methods are "
"invoked, exceptions that occur during their execution are ignored, and a "
"warning is printed to ``sys.stderr`` instead.  In particular:"
msgstr ""
"Devido às circunstâncias precárias sob as quais os métodos :meth:`__del__` "
"são invocados, as exceções que ocorrem durante sua execução são ignoradas e "
"um aviso é impresso em ``sys.stderr`` em seu lugar. Em particular:"

#: ../../reference/datamodel.rst:1280
msgid ""
":meth:`__del__` can be invoked when arbitrary code is being executed, "
"including from any arbitrary thread.  If :meth:`__del__` needs to take a "
"lock or invoke any other blocking resource, it may deadlock as the resource "
"may already be taken by the code that gets interrupted to execute :meth:"
"`__del__`."
msgstr ""
":meth:`__del__` pode ser chamado quando um código arbitrário está sendo "
"executado, incluindo de qualquer thread arbitrária. Se :meth:`__del__` "
"precisa bloquear ou invocar qualquer outro recurso de bloqueio, pode ocorrer "
"um impasse, pois o recurso já pode ter sido levado pelo código que é "
"interrompido para executar :meth:`__del__`."

#: ../../reference/datamodel.rst:1286
msgid ""
":meth:`__del__` can be executed during interpreter shutdown.  As a "
"consequence, the global variables it needs to access (including other "
"modules) may already have been deleted or set to ``None``. Python guarantees "
"that globals whose name begins with a single underscore are deleted from "
"their module before other globals are deleted; if no other references to "
"such globals exist, this may help in assuring that imported modules are "
"still available at the time when the :meth:`__del__` method is called."
msgstr ""
":meth:`__del__` pode ser executado durante o encerramento do interpretador. "
"Como consequência, as variáveis globais que ele precisa acessar (incluindo "
"outros módulos) podem já ter sido excluídas ou definidas como ``None``. "
"Python garante que os globais cujo nome comece com um único sublinhado sejam "
"excluídos de seu módulo antes que outros globais sejam excluídos; se nenhuma "
"outra referência a tais globais existir, isso pode ajudar a garantir que os "
"módulos importados ainda estejam disponíveis no momento em que o método :"
"meth:`__del__` for chamado."

#: ../../reference/datamodel.rst:1301
msgid ""
"Called by the :func:`repr` built-in function to compute the \"official\" "
"string representation of an object.  If at all possible, this should look "
"like a valid Python expression that could be used to recreate an object with "
"the same value (given an appropriate environment).  If this is not possible, "
"a string of the form ``<...some useful description...>`` should be returned. "
"The return value must be a string object. If a class defines :meth:"
"`__repr__` but not :meth:`__str__`, then :meth:`__repr__` is also used when "
"an \"informal\" string representation of instances of that class is required."
msgstr ""
"Chamado pela função embutida :func:`repr` para calcular a representação da "
"string \"oficial\" de um objeto. Se possível, isso deve parecer uma "
"expressão Python válida que pode ser usada para recriar um objeto com o "
"mesmo valor (dado um ambiente apropriado). Se isso não for possível, uma "
"string no formato ``<...alguma descrição útil...>`` deve ser retornada. O "
"valor de retorno deve ser um objeto string. Se uma classe define :meth:"
"`__repr__`, mas não :meth:`__str__`, então :meth:`__repr__` também é usado "
"quando uma representação de string \"informal\" de instâncias daquela classe "
"é necessária."

#: ../../reference/datamodel.rst:1310
msgid ""
"This is typically used for debugging, so it is important that the "
"representation is information-rich and unambiguous."
msgstr ""
"Isso é normalmente usado para depuração, portanto, é importante que a "
"representação seja rica em informações e inequívoca."

#: ../../reference/datamodel.rst:1321
msgid ""
"Called by :func:`str(object) <str>` and the built-in functions :func:"
"`format` and :func:`print` to compute the \"informal\" or nicely printable "
"string representation of an object.  The return value must be a :ref:`string "
"<textseq>` object."
msgstr ""
"Chamado por :func:`str(object) <str>` e as funções embutidas :func:`format` "
"e :func:`print` para calcular a representação da string \"informal\" ou "
"agradável para exibição de um objeto. O valor de retorno deve ser um objeto :"
"ref:`string <textseq>`."

#: ../../reference/datamodel.rst:1326
msgid ""
"This method differs from :meth:`object.__repr__` in that there is no "
"expectation that :meth:`__str__` return a valid Python expression: a more "
"convenient or concise representation can be used."
msgstr ""
"Este método difere de :meth:`object.__repr__` por não haver expectativa de "
"que :meth:`__str__` retorne uma expressão Python válida: uma representação "
"mais conveniente ou concisa pode ser usada."

#: ../../reference/datamodel.rst:1330
msgid ""
"The default implementation defined by the built-in type :class:`object` "
"calls :meth:`object.__repr__`."
msgstr ""
"A implementação padrão definida pelo tipo embutido :class:`object` chama :"
"meth:`object.__repr__`."

#: ../../reference/datamodel.rst:1340
msgid ""
"Called by :ref:`bytes <func-bytes>` to compute a byte-string representation "
"of an object. This should return a :class:`bytes` object."
msgstr ""
"Chamado por :ref:`bytes <func-bytes>` para calcular uma representação de "
"string de bytes de um objeto. Isso deve retornar um objeto :class:`bytes`."

#: ../../reference/datamodel.rst:1351
msgid ""
"Called by the :func:`format` built-in function, and by extension, evaluation "
"of :ref:`formatted string literals <f-strings>` and the :meth:`str.format` "
"method, to produce a \"formatted\" string representation of an object. The "
"*format_spec* argument is a string that contains a description of the "
"formatting options desired. The interpretation of the *format_spec* argument "
"is up to the type implementing :meth:`__format__`, however most classes will "
"either delegate formatting to one of the built-in types, or use a similar "
"formatting option syntax."
msgstr ""
"Chamado pela função embutida :func:`format` e, por extensão, avaliação de :"
"ref:`literais de string formatadas <f-strings>` e o método :meth:`str."
"format`, para produzir uma representação de string \"formatada\" de um "
"objeto. O argumento *format_spec* é uma string que contém uma descrição das "
"opções de formatação desejadas. A interpretação do argumento *format_spec* "
"depende do tipo que implementa :meth:`__format__`, entretanto a maioria das "
"classes delegará a formatação a um dos tipos embutidos ou usará uma sintaxe "
"de opção de formatação semelhante."

#: ../../reference/datamodel.rst:1361
msgid ""
"See :ref:`formatspec` for a description of the standard formatting syntax."
msgstr ""
"Consulte :ref:`formatspec` para uma descrição da sintaxe de formatação "
"padrão."

#: ../../reference/datamodel.rst:1363
msgid "The return value must be a string object."
msgstr "O valor de retorno deve ser um objeto string."

#: ../../reference/datamodel.rst:1365
msgid ""
"The __format__ method of ``object`` itself raises a :exc:`TypeError` if "
"passed any non-empty string."
msgstr ""
"O método __format__ do próprio ``object`` levanta uma :exc:`TypeError` se "
"passada qualquer string não vazia."

#: ../../reference/datamodel.rst:1369
msgid ""
"``object.__format__(x, '')`` is now equivalent to ``str(x)`` rather than "
"``format(str(self), '')``."
msgstr ""

#: ../../reference/datamodel.rst:1385
msgid ""
"These are the so-called \"rich comparison\" methods. The correspondence "
"between operator symbols and method names is as follows: ``x<y`` calls ``x."
"__lt__(y)``, ``x<=y`` calls ``x.__le__(y)``, ``x==y`` calls ``x.__eq__(y)``, "
"``x!=y`` calls ``x.__ne__(y)``, ``x>y`` calls ``x.__gt__(y)``, and ``x>=y`` "
"calls ``x.__ge__(y)``."
msgstr ""
"Esses são os chamados métodos de \"comparação rica\". A correspondência "
"entre os símbolos do operador e os nomes dos métodos é a seguinte: ``x<y`` "
"chama ``x.__lt__(y)``, ``x<=y`` chama ``x.__le__(y)``, ``x==y`` chama ``x."
"__eq__(y)``, ``x!=y`` chama ``x.__ne__(y)``, ``x>y`` chama ``x.__gt__(y)`` e "
"``x>=y`` chama ``x.__ge__(y)``."

#: ../../reference/datamodel.rst:1391
msgid ""
"A rich comparison method may return the singleton ``NotImplemented`` if it "
"does not implement the operation for a given pair of arguments. By "
"convention, ``False`` and ``True`` are returned for a successful comparison. "
"However, these methods can return any value, so if the comparison operator "
"is used in a Boolean context (e.g., in the condition of an ``if`` "
"statement), Python will call :func:`bool` on the value to determine if the "
"result is true or false."
msgstr ""
"Um método de comparação rica pode retornar o singleton ``NotImplemented`` se "
"não implementar a operação para um determinado par de argumentos. Por "
"convenção, ``False`` e ``True`` são retornados para uma comparação bem-"
"sucedida. No entanto, esses métodos podem retornar qualquer valor, portanto, "
"se o operador de comparação for usado em um contexto booleano (por exemplo, "
"na condição de uma instrução ``if``), Python irá chamar :func:`bool` no "
"valor para determinar se o resultado for verdadeiro ou falso."

#: ../../reference/datamodel.rst:1398
msgid ""
"By default, ``object`` implements :meth:`__eq__` by using ``is``, returning "
"``NotImplemented`` in the case of a false comparison: ``True if x is y else "
"NotImplemented``. For :meth:`__ne__`, by default it delegates to :meth:"
"`__eq__` and inverts the result unless it is ``NotImplemented``.  There are "
"no other implied relationships among the comparison operators or default "
"implementations; for example, the truth of ``(x<y or x==y)`` does not imply "
"``x<=y``. To automatically generate ordering operations from a single root "
"operation, see :func:`functools.total_ordering`."
msgstr ""
"Por padrão, ``object`` implementa :meth:`__eq__` usando ``is``, retornando "
"``NotImplemented`` no caso de uma comparação falsa: ``True if x is y else "
"NotImplemented``. Para :meth:`__ne__`, por padrão ele delega para :meth:"
"`__eq__` e inverte o resultado a menos que seja ``NotImplemented``. Não há "
"outras relações implícitas entre os operadores de comparação ou "
"implementações padrão; por exemplo, o valor verdadeiro de ``(x<y or x==y)`` "
"não implica ``x<=y``. Para gerar operações de ordenação automaticamente a "
"partir de uma única operação raiz, consulte :func:`functools.total_ordering`."

#: ../../reference/datamodel.rst:1407
msgid ""
"See the paragraph on :meth:`__hash__` for some important notes on creating :"
"term:`hashable` objects which support custom comparison operations and are "
"usable as dictionary keys."
msgstr ""
"Veja o parágrafo sobre :meth:`__hash__` para algumas notas importantes sobre "
"a criação de objetos :term:`hasheáveis <hashable>` que implementam operações "
"de comparação personalizadas e são utilizáveis como chaves de dicionário."

#: ../../reference/datamodel.rst:1411
msgid ""
"There are no swapped-argument versions of these methods (to be used when the "
"left argument does not support the operation but the right argument does); "
"rather, :meth:`__lt__` and :meth:`__gt__` are each other's reflection, :meth:"
"`__le__` and :meth:`__ge__` are each other's reflection, and :meth:`__eq__` "
"and :meth:`__ne__` are their own reflection. If the operands are of "
"different types, and right operand's type is a direct or indirect subclass "
"of the left operand's type, the reflected method of the right operand has "
"priority, otherwise the left operand's method has priority.  Virtual "
"subclassing is not considered."
msgstr ""
"Não há versões de argumentos trocados desses métodos (a serem usados quando "
"o argumento esquerdo não tem suporte à operação, mas o argumento direito "
"sim); em vez disso, :meth:`__lt__` e :meth:`__gt__` são o reflexo um do "
"outro, :meth:`__le__` e :meth:`__ge__` são o reflexo um do outro, e :meth:"
"`__eq__` e :meth:`__ne__` são seu próprio reflexo. Se os operandos são de "
"tipos diferentes e o tipo do operando direito é uma subclasse direta ou "
"indireta do tipo do operando esquerdo, o método refletido do operando "
"direito tem prioridade, caso contrário, o método do operando esquerdo tem "
"prioridade. Subclasse virtual não é considerada."

#: ../../reference/datamodel.rst:1428
msgid ""
"Called by built-in function :func:`hash` and for operations on members of "
"hashed collections including :class:`set`, :class:`frozenset`, and :class:"
"`dict`.  :meth:`__hash__` should return an integer. The only required "
"property is that objects which compare equal have the same hash value; it is "
"advised to mix together the hash values of the components of the object that "
"also play a part in comparison of objects by packing them into a tuple and "
"hashing the tuple. Example::"
msgstr ""
"Chamado pela função embutida :func:`hash` e para operações em membros de "
"coleções em hash incluindo :class:`set`, :class:`frozenset` e :class:"
"`dict`. :meth:`__hash__` deve retornar um inteiro. A única propriedade "
"necessária é que os objetos que são comparados iguais tenham o mesmo valor "
"de hash; é aconselhável misturar os valores hash dos componentes do objeto "
"que também desempenham um papel na comparação dos objetos, empacotando-os em "
"uma tupla e fazendo o hash da tupla. Exemplo::"

#: ../../reference/datamodel.rst:1441
msgid ""
":func:`hash` truncates the value returned from an object's custom :meth:"
"`__hash__` method to the size of a :c:type:`Py_ssize_t`.  This is typically "
"8 bytes on 64-bit builds and 4 bytes on 32-bit builds.  If an object's   :"
"meth:`__hash__` must interoperate on builds of different bit sizes, be sure "
"to check the width on all supported builds.  An easy way to do this is with "
"``python -c \"import sys; print(sys.hash_info.width)\"``."
msgstr ""
":func:`hash` trunca o valor retornado do método :meth:`__hash__` "
"personalizado de um objeto para o tamanho de um :c:type:`Py_ssize_t`. Isso é "
"normalmente 8 bytes em compilações de 64 bits e 4 bytes em compilações de 32 "
"bits. Se o :meth:`__hash__` de um objeto deve interoperar em compilações de "
"tamanhos de bits diferentes, certifique-se de verificar a largura em todas "
"as compilações com suporte. Uma maneira fácil de fazer isso é com ``python -"
"c \"import sys; print(sys.hash_info.width)\"``."

#: ../../reference/datamodel.rst:1449
msgid ""
"If a class does not define an :meth:`__eq__` method it should not define a :"
"meth:`__hash__` operation either; if it defines :meth:`__eq__` but not :meth:"
"`__hash__`, its instances will not be usable as items in hashable "
"collections.  If a class defines mutable objects and implements an :meth:"
"`__eq__` method, it should not implement :meth:`__hash__`, since the "
"implementation of hashable collections requires that a key's hash value is "
"immutable (if the object's hash value changes, it will be in the wrong hash "
"bucket)."
msgstr ""
"Se uma classe não define um método :meth:`__eq__`, ela também não deve "
"definir uma operação :meth:`__hash__`; se define :meth:`__eq__` mas não :"
"meth:`__hash__`, suas instâncias não serão utilizáveis como itens em "
"coleções hasheáveis. Se uma classe define objetos mutáveis e implementa um "
"método :meth:`__eq__`, ela não deve implementar :meth:`__hash__`, uma vez "
"que a implementação de coleções hasheáveis requer que o valor hash de uma "
"chave seja imutável (se o valor hash do objeto mudar, estará no balde de "
"hash errado)."

#: ../../reference/datamodel.rst:1458
msgid ""
"User-defined classes have :meth:`__eq__` and :meth:`__hash__` methods by "
"default; with them, all objects compare unequal (except with themselves) and "
"``x.__hash__()`` returns an appropriate value such that ``x == y`` implies "
"both that ``x is y`` and ``hash(x) == hash(y)``."
msgstr ""
"As classes definidas pelo usuário têm os métodos :meth:`__eq__` e :meth:"
"`__hash__` por padrão; com eles, todos os objetos se comparam desiguais "
"(exceto com eles mesmos) e ``x.__hash__()`` retorna um valor apropriado tal "
"que ``x == y`` implica que ``x is y`` e ``hash(x) == hash(y)``."

#: ../../reference/datamodel.rst:1463
msgid ""
"A class that overrides :meth:`__eq__` and does not define :meth:`__hash__` "
"will have its :meth:`__hash__` implicitly set to ``None``.  When the :meth:"
"`__hash__` method of a class is ``None``, instances of the class will raise "
"an appropriate :exc:`TypeError` when a program attempts to retrieve their "
"hash value, and will also be correctly identified as unhashable when "
"checking ``isinstance(obj, collections.abc.Hashable)``."
msgstr ""
"Uma classe que sobrescreve :meth:`__eq__` e não define :meth:`__hash__` terá "
"seu :meth:`__hash__` implicitamente definido como ``None``. Quando o método :"
"meth:`__hash__` de uma classe é ``None``, as instâncias da classe levantam "
"uma :exc:`TypeError` apropriada quando um programa tenta recuperar seu valor "
"hash, e também será identificado corretamente como não-hasheável ao "
"verificar ``isinstance(obj, collections.abc.Hashable)``."

#: ../../reference/datamodel.rst:1470
msgid ""
"If a class that overrides :meth:`__eq__` needs to retain the implementation "
"of :meth:`__hash__` from a parent class, the interpreter must be told this "
"explicitly by setting ``__hash__ = <ParentClass>.__hash__``."
msgstr ""
"Se uma classe que sobrescreve :meth:`__eq__` precisa manter a implementação "
"de :meth:`__hash__` de uma classe pai, o interpretador deve ser informado "
"disso explicitamente pela configuração ``__hash__ = <ClassePai>.__hash__``."

#: ../../reference/datamodel.rst:1474
msgid ""
"If a class that does not override :meth:`__eq__` wishes to suppress hash "
"support, it should include ``__hash__ = None`` in the class definition. A "
"class which defines its own :meth:`__hash__` that explicitly raises a :exc:"
"`TypeError` would be incorrectly identified as hashable by an "
"``isinstance(obj, collections.abc.Hashable)`` call."
msgstr ""
"Se uma classe que não substitui :meth:`__eq__` deseja suprimir o suporte a "
"hash, deve incluir ``__hash__ = None`` na definição de classe. Uma classe "
"que define seu próprio :meth:`__hash__` que levanta explicitamente uma :exc:"
"`TypeError` seria incorretamente identificada como hasheável por uma chamada "
"``isinstance(obj, collections.abc.Hashable)``."

#: ../../reference/datamodel.rst:1483
msgid ""
"By default, the :meth:`__hash__` values of str and bytes objects are "
"\"salted\" with an unpredictable random value.  Although they remain "
"constant within an individual Python process, they are not predictable "
"between repeated invocations of Python."
msgstr ""
"Por padrão, os valores :meth:`__hash__` dos objetos str e bytes são "
"\"salgados\" com um valor aleatório imprevisível. Embora permaneçam "
"constantes em um processo individual do Python, eles não são previsíveis "
"entre invocações repetidas do Python."

#: ../../reference/datamodel.rst:1488
msgid ""
"This is intended to provide protection against a denial-of-service caused by "
"carefully-chosen inputs that exploit the worst case performance of a dict "
"insertion, O(n^2) complexity.  See http://www.ocert.org/advisories/"
"ocert-2011-003.html for details."
msgstr ""
"Isso se destina a fornecer proteção contra uma negação de serviço causada "
"por entradas cuidadosamente escolhidas que exploram o pior caso de "
"desempenho de uma inserção de dicionário, complexidade O(n^2). Consulte "
"http://www.ocert.org/advisories/ocert-2011-003.html para obter detalhes."

#: ../../reference/datamodel.rst:1493
msgid ""
"Changing hash values affects the iteration order of sets. Python has never "
"made guarantees about this ordering (and it typically varies between 32-bit "
"and 64-bit builds)."
msgstr ""
"Alterar os valores de hash afeta a ordem de iteração dos conjuntos. Python "
"nunca deu garantias sobre essa ordem (e normalmente varia entre compilações "
"de 32 e 64 bits)."

#: ../../reference/datamodel.rst:1497
msgid "See also :envvar:`PYTHONHASHSEED`."
msgstr "Consulte também :envvar:`PYTHONHASHSEED`."

#: ../../reference/datamodel.rst:1499
msgid "Hash randomization is enabled by default."
msgstr "Aleatorização de hash está habilitada por padrão."

#: ../../reference/datamodel.rst:1507
msgid ""
"Called to implement truth value testing and the built-in operation "
"``bool()``; should return ``False`` or ``True``.  When this method is not "
"defined, :meth:`__len__` is called, if it is defined, and the object is "
"considered true if its result is nonzero.  If a class defines neither :meth:"
"`__len__` nor :meth:`__bool__`, all its instances are considered true."
msgstr ""
"Chamado para implementar o teste de valor de verdade e a operação embutida "
"``bool()``; deve retornar ``False`` ou ``True``. Quando este método não é "
"definido, :meth:`__len__` é chamado, se estiver definido, e o objeto é "
"considerado verdadeiro se seu resultado for diferente de zero. Se uma classe "
"não define :meth:`__len__` nem :meth:`__bool__`, todas as suas instâncias "
"são consideradas verdadeiras."

#: ../../reference/datamodel.rst:1518
msgid "Customizing attribute access"
msgstr "Personalizando o acesso aos atributos"

#: ../../reference/datamodel.rst:1520
msgid ""
"The following methods can be defined to customize the meaning of attribute "
"access (use of, assignment to, or deletion of ``x.name``) for class "
"instances."
msgstr ""
"Os seguintes métodos podem ser definidos para personalizar o significado do "
"acesso aos atributos (uso, atribuição ou exclusão de ``x.name``) para "
"instâncias de classe."

#: ../../reference/datamodel.rst:1528
msgid ""
"Called when the default attribute access fails with an :exc:`AttributeError` "
"(either :meth:`__getattribute__` raises an :exc:`AttributeError` because "
"*name* is not an instance attribute or an attribute in the class tree for "
"``self``; or :meth:`__get__` of a *name* property raises :exc:"
"`AttributeError`).  This method should either return the (computed) "
"attribute value or raise an :exc:`AttributeError` exception."
msgstr ""
"Chamado quando o acesso padrão ao atributo falha com um :exc:"
"`AttributeError` (ou :meth:`__getattribute__` levanta uma :exc:"
"`AttributeError` porque *name* não é um atributo de instância ou um atributo "
"na árvore de classes para ``self``; ou :meth:`__get__` de uma propriedade "
"*name* levanta :exc:`AttributeError`). Este método deve retornar o valor do "
"atributo (calculado) ou levantar uma exceção :exc:`AttributeError`."

#: ../../reference/datamodel.rst:1535
msgid ""
"Note that if the attribute is found through the normal mechanism, :meth:"
"`__getattr__` is not called.  (This is an intentional asymmetry between :"
"meth:`__getattr__` and :meth:`__setattr__`.) This is done both for "
"efficiency reasons and because otherwise :meth:`__getattr__` would have no "
"way to access other attributes of the instance.  Note that at least for "
"instance variables, you can fake total control by not inserting any values "
"in the instance attribute dictionary (but instead inserting them in another "
"object).  See the :meth:`__getattribute__` method below for a way to "
"actually get total control over attribute access."
msgstr ""
"Observe que se o atributo for encontrado através do mecanismo normal, :meth:"
"`__getattr__` não é chamado. (Esta é uma assimetria intencional entre :meth:"
"`__getattr__` e :meth:`__setattr__`.) Isso é feito tanto por razões de "
"eficiência quanto porque :meth:`__getattr__` não teria como acessar outros "
"atributos da instância. Observe que pelo menos para variáveis de instâncias, "
"você pode fingir controle total não inserindo nenhum valor no dicionário de "
"atributos de instância (mas, em vez disso, inserindo-os em outro objeto). "
"Veja o método :meth:`__getattribute__` abaixo para uma maneira de realmente "
"obter controle total sobre o acesso ao atributo."

#: ../../reference/datamodel.rst:1548
msgid ""
"Called unconditionally to implement attribute accesses for instances of the "
"class. If the class also defines :meth:`__getattr__`, the latter will not be "
"called unless :meth:`__getattribute__` either calls it explicitly or raises "
"an :exc:`AttributeError`. This method should return the (computed) attribute "
"value or raise an :exc:`AttributeError` exception. In order to avoid "
"infinite recursion in this method, its implementation should always call the "
"base class method with the same name to access any attributes it needs, for "
"example, ``object.__getattribute__(self, name)``."
msgstr ""
"Chamado incondicionalmente para implementar acessos a atributo para "
"instâncias da classe. Se a classe também define :meth:`__getattr__`, o "
"último não será chamado a menos que :meth:`__getattribute__` o chame "
"explicitamente ou levante um :exc:`AttributeError`. Este método deve "
"retornar o valor do atributo (calculado) ou levantar uma exceção :exc:"
"`AttributeError`. Para evitar recursão infinita neste método, sua "
"implementação deve sempre chamar o método da classe base com o mesmo nome "
"para acessar quaisquer atributos de que necessita, por exemplo, ``object."
"__getattribute__(self, name)``."

#: ../../reference/datamodel.rst:1559
msgid ""
"This method may still be bypassed when looking up special methods as the "
"result of implicit invocation via language syntax or built-in functions. "
"See :ref:`special-lookup`."
msgstr ""
"Este método ainda pode ser ignorado ao procurar métodos especiais como "
"resultado de invocação implícita por meio da sintaxe da linguagem ou funções "
"embutidas. Consulte :ref:`special-lookup`."

#: ../../reference/datamodel.rstNone
msgid ""
"Raises an :ref:`auditing event <auditing>` ``object.__getattr__`` with "
"arguments ``obj``, ``name``."
msgstr ""
"Levanta um :ref:`evento de auditoria <auditing>` ``object.__getattr__`` com "
"argumentos ``obj``, ``name``."

#: ../../reference/datamodel.rst:1565
msgid ""
"For certain sensitive attribute accesses, raises an :ref:`auditing event "
"<auditing>` ``object.__getattr__`` with arguments ``obj`` and ``name``."
msgstr ""
"Para acessos a certos atributos sensíveis, levanta um :ref:`evento de "
"auditoria <auditing>` ``object.__getattr__`` com os argumentos ``obj`` e "
"``name``."

#: ../../reference/datamodel.rst:1572
msgid ""
"Called when an attribute assignment is attempted.  This is called instead of "
"the normal mechanism (i.e. store the value in the instance dictionary). "
"*name* is the attribute name, *value* is the value to be assigned to it."
msgstr ""
"Chamado quando se tenta efetuar uma atribuição de atributos. Esse método é "
"chamado em vez do mecanismo normal (ou seja, armazena o valor no dicionário "
"da instância). *name* é o nome do atributo, *value* é o valor a ser "
"atribuído a ele."

#: ../../reference/datamodel.rst:1576
msgid ""
"If :meth:`__setattr__` wants to assign to an instance attribute, it should "
"call the base class method with the same name, for example, ``object."
"__setattr__(self, name, value)``."
msgstr ""
"Se :meth:`__setattr__` deseja atribuir a um atributo de instância, ele deve "
"chamar o método da classe base com o mesmo nome, por exemplo, ``object."
"__setattr__(self, name, value)``."

#: ../../reference/datamodel.rstNone
msgid ""
"Raises an :ref:`auditing event <auditing>` ``object.__setattr__`` with "
"arguments ``obj``, ``name``, ``value``."
msgstr ""
"Levanta um :ref:`evento de auditoria <auditing>` ``object.__setattr__`` com "
"argumentos ``obj``, ``name``, ``value``."

#: ../../reference/datamodel.rst:1582
msgid ""
"For certain sensitive attribute assignments, raises an :ref:`auditing event "
"<auditing>` ``object.__setattr__`` with arguments ``obj``, ``name``, "
"``value``."
msgstr ""
"Para atribuições de certos atributos sensíveis, levanta um :ref:`evento de "
"auditoria <auditing>` ``object.__setattr__`` com os argumentos ``obj``, "
"``name`` e ``value``."

#: ../../reference/datamodel.rst:1589
msgid ""
"Like :meth:`__setattr__` but for attribute deletion instead of assignment.  "
"This should only be implemented if ``del obj.name`` is meaningful for the "
"object."
msgstr ""
"Como :meth:`__setattr__`, mas para exclusão de atributo em vez de "
"atribuição. Este método só deve ser implementado se ``del obj.name`` for "
"significativo para o objeto."

#: ../../reference/datamodel.rstNone
msgid ""
"Raises an :ref:`auditing event <auditing>` ``object.__delattr__`` with "
"arguments ``obj``, ``name``."
msgstr ""
"Levanta um :ref:`evento de auditoria <auditing>` ``object.__delattr__`` com "
"argumentos ``obj``, ``name``."

#: ../../reference/datamodel.rst:1594
msgid ""
"For certain sensitive attribute deletions, raises an :ref:`auditing event "
"<auditing>` ``object.__delattr__`` with arguments ``obj`` and ``name``."
msgstr ""
"Para exclusões a certos atributos sensíveis, levanta um :ref:`evento de "
"auditoria <auditing>` ``object.__delattr__`` com os argumentos ``obj`` e "
"``name``."

#: ../../reference/datamodel.rst:1601
msgid ""
"Called when :func:`dir` is called on the object. A sequence must be "
"returned. :func:`dir` converts the returned sequence to a list and sorts it."
msgstr ""
"Chamado quando :func:`dir` é chamado com o objeto como argumento. Uma "
"sequência deve ser retornada. :func:`dir` converte a sequência retornada em "
"uma lista e a ordena."

#: ../../reference/datamodel.rst:1606
msgid "Customizing module attribute access"
msgstr "Personalizando acesso a atributos de módulos"

#: ../../reference/datamodel.rst:1613
msgid ""
"Special names ``__getattr__`` and ``__dir__`` can be also used to customize "
"access to module attributes. The ``__getattr__`` function at the module "
"level should accept one argument which is the name of an attribute and "
"return the computed value or raise an :exc:`AttributeError`. If an attribute "
"is not found on a module object through the normal lookup, i.e. :meth:"
"`object.__getattribute__`, then ``__getattr__`` is searched in the module "
"``__dict__`` before raising an :exc:`AttributeError`. If found, it is called "
"with the attribute name and the result is returned."
msgstr ""
"Os nomes especiais ``__getattr__`` e ``__dir__`` também podem ser usados "
"para personalizar o acesso aos atributos dos módulos. A função "
"``__getattr__`` no nível do módulo deve aceitar um argumento que é o nome de "
"um atributo e retornar o valor calculado ou levantar uma exceção :exc:"
"`AttributeError`. Se um atributo não for encontrado em um objeto de módulo "
"por meio da pesquisa normal, por exemplo :meth:`object.__getattribute__`, "
"então ``__getattr__`` é pesquisado no módulo ``__dict__`` antes de levantar :"
"exc:`AttributeError`. Se encontrado, ele é chamado com o nome do atributo e "
"o resultado é retornado."

#: ../../reference/datamodel.rst:1622
msgid ""
"The ``__dir__`` function should accept no arguments, and return a sequence "
"of strings that represents the names accessible on module. If present, this "
"function overrides the standard :func:`dir` search on a module."
msgstr ""
"A função ``__dir__`` não deve aceitar nenhum argumento e retorna uma "
"sequência de strings que representa os nomes acessíveis no módulo. Se "
"presente, esta função substitui a pesquisa padrão :func:`dir` em um módulo."

#: ../../reference/datamodel.rst:1626
msgid ""
"For a more fine grained customization of the module behavior (setting "
"attributes, properties, etc.), one can set the ``__class__`` attribute of a "
"module object to a subclass of :class:`types.ModuleType`. For example::"
msgstr ""
"Para uma personalização mais refinada do comportamento do módulo (definição "
"de atributos, propriedades etc.), pode-se definir o atributo ``__class__`` "
"de um objeto de módulo para uma subclasse de :class:`types.ModuleType`. Por "
"exemplo::"

#: ../../reference/datamodel.rst:1644
msgid ""
"Defining module ``__getattr__`` and setting module ``__class__`` only affect "
"lookups made using the attribute access syntax -- directly accessing the "
"module globals (whether by code within the module, or via a reference to the "
"module's globals dictionary) is unaffected."
msgstr ""
"Definir ``__getattr__`` no módulo e configurar o ``__class__`` do módulo só "
"afeta as pesquisas feitas usando a sintaxe de acesso ao atributo -- acessar "
"diretamente os globais do módulo (seja por código dentro do módulo, ou por "
"meio de uma referência ao dicionário global do módulo) não tem efeito."

#: ../../reference/datamodel.rst:1649
msgid "``__class__`` module attribute is now writable."
msgstr "O atributo de módulo ``__class__`` pode agora ser escrito."

#: ../../reference/datamodel.rst:1652
msgid "``__getattr__`` and ``__dir__`` module attributes."
msgstr "Atributos de módulo ``__getattr__`` e ``__dir__``."

#: ../../reference/datamodel.rst:1657
msgid ":pep:`562` - Module __getattr__ and __dir__"
msgstr ":pep:`562` - __getattr__ e __dir__ de módulo"

#: ../../reference/datamodel.rst:1658
msgid "Describes the ``__getattr__`` and ``__dir__`` functions on modules."
msgstr "Descreve as funções ``__getattr__`` e ``__dir__`` nos módulos."

#: ../../reference/datamodel.rst:1664
msgid "Implementing Descriptors"
msgstr "Implementando descritores"

#: ../../reference/datamodel.rst:1666
msgid ""
"The following methods only apply when an instance of the class containing "
"the method (a so-called *descriptor* class) appears in an *owner* class (the "
"descriptor must be in either the owner's class dictionary or in the class "
"dictionary for one of its parents).  In the examples below, \"the "
"attribute\" refers to the attribute whose name is the key of the property in "
"the owner class' :attr:`~object.__dict__`."
msgstr ""
"Os métodos a seguir se aplicam apenas quando uma instância da classe que "
"contém o método (uma classe chamada *descritora*) aparece em uma classe "
"proprietária *owner* (o descritor deve estar no dicionário de classe do "
"proprietário ou no dicionário de classe para um dos seus pais). Nos exemplos "
"abaixo, \"o atributo\" refere-se ao atributo cujo nome é a chave da "
"propriedade no :attr:`~object.__dict__` da classe proprietária."

#: ../../reference/datamodel.rst:1676
msgid ""
"Called to get the attribute of the owner class (class attribute access) or "
"of an instance of that class (instance attribute access). The optional "
"*owner* argument is the owner class, while *instance* is the instance that "
"the attribute was accessed through, or ``None`` when the attribute is "
"accessed through the *owner*."
msgstr ""
"Chamado para obter o atributo da classe proprietária (acesso ao atributo da "
"classe) ou de uma instância dessa classe (acesso ao atributo da instância). "
"O argumento opcional *owner* é a classe proprietária, enquanto *instance* é "
"a instância pela qual o atributo foi acessado, ou ``None`` quando o atributo "
"é acessado por meio de *owner*."

#: ../../reference/datamodel.rst:1682
msgid ""
"This method should return the computed attribute value or raise an :exc:"
"`AttributeError` exception."
msgstr ""
"Este método deve retornar o valor do atributo calculado ou levantar uma "
"exceção :exc:`AttributeError`."

#: ../../reference/datamodel.rst:1685
msgid ""
":PEP:`252` specifies that :meth:`__get__` is callable with one or two "
"arguments.  Python's own built-in descriptors support this specification; "
"however, it is likely that some third-party tools have descriptors that "
"require both arguments.  Python's own :meth:`__getattribute__` "
"implementation always passes in both arguments whether they are required or "
"not."
msgstr ""
":PEP:`252` especifica que :meth:`__get__` é um chamável com um ou dois "
"argumentos. Os próprios descritores embutidos do Python implementam esta "
"especificação; no entanto, é provável que algumas ferramentas de terceiros "
"tenham descritores que requerem ambos os argumentos. A implementação de :"
"meth:`__getattribute__` do próprio Python sempre passa em ambos os "
"argumentos sejam eles requeridos ou não."

#: ../../reference/datamodel.rst:1694
msgid ""
"Called to set the attribute on an instance *instance* of the owner class to "
"a new value, *value*."
msgstr ""
"Chamado para definir o atributo em uma instância *instance* da classe "
"proprietária para um novo valor, *value*."

#: ../../reference/datamodel.rst:1697
msgid ""
"Note, adding :meth:`__set__` or :meth:`__delete__` changes the kind of "
"descriptor to a \"data descriptor\".  See :ref:`descriptor-invocation` for "
"more details."
msgstr ""
"Observe que adicionar :meth:`__set__` ou :meth:`__delete__` altera o tipo de "
"descritor para um \"descritor de dados\". Consulte :ref:`descriptor-"
"invocation` para mais detalhes."

#: ../../reference/datamodel.rst:1703
msgid ""
"Called to delete the attribute on an instance *instance* of the owner class."
msgstr ""
"Chamado para excluir o atributo em uma instância *instance* da classe "
"proprietária."

#: ../../reference/datamodel.rst:1708
msgid ""
"Called at the time the owning class *owner* is created. The descriptor has "
"been assigned to *name*."
msgstr ""
"Chamado no momento em que a classe proprietária *owner* é criada. O "
"descritor foi atribuído  a *name*."

#: ../../reference/datamodel.rst:1713
msgid ""
":meth:`__set_name__` is only called implicitly as part of the :class:`type` "
"constructor, so it will need to be called explicitly with the appropriate "
"parameters when a descriptor is added to a class after initial creation::"
msgstr ""
":meth:`__set_name__` só é chamado implicitamente como parte do construtor :"
"class:`type`, então ele precisará ser chamado explicitamente com os "
"parâmetros apropriados quando um descritor é adicionado a uma classe após a "
"criação inicial::"

#: ../../reference/datamodel.rst:1724
msgid "See :ref:`class-object-creation` for more details."
msgstr "Consulte :ref:`class-object-creation` para mais detalhes."

#: ../../reference/datamodel.rst:1728
msgid ""
"The attribute :attr:`__objclass__` is interpreted by the :mod:`inspect` "
"module as specifying the class where this object was defined (setting this "
"appropriately can assist in runtime introspection of dynamic class "
"attributes). For callables, it may indicate that an instance of the given "
"type (or a subclass) is expected or required as the first positional "
"argument (for example, CPython sets this attribute for unbound methods that "
"are implemented in C)."
msgstr ""
"O atributo :attr:`__objclass__` é interpretado pelo módulo :mod:`inspect` "
"como sendo a classe onde este objeto foi definido (configurar isso "
"apropriadamente pode ajudar na introspecção em tempo de execução dos "
"atributos dinâmicos da classe). Para chamáveis, pode indicar que uma "
"instância do tipo fornecido (ou uma subclasse) é esperada ou necessária como "
"o primeiro argumento posicional (por exemplo, CPython define este atributo "
"para métodos não acoplados que são implementados em C)."

#: ../../reference/datamodel.rst:1739
msgid "Invoking Descriptors"
msgstr "Invocando descritores"

#: ../../reference/datamodel.rst:1741
msgid ""
"In general, a descriptor is an object attribute with \"binding behavior\", "
"one whose attribute access has been overridden by methods in the descriptor "
"protocol:  :meth:`__get__`, :meth:`__set__`, and :meth:`__delete__`. If any "
"of those methods are defined for an object, it is said to be a descriptor."
msgstr ""
"Em geral, um descritor é um atributo de objeto com \"comportamento de "
"vinculação\", cujo acesso ao atributo foi substituído por métodos no "
"protocolo do descritor: :meth:`__get__`, :meth:`__set__` e :meth:"
"`__delete__` . Se qualquer um desses métodos for definido para um objeto, é "
"considerado um descritor."

#: ../../reference/datamodel.rst:1746
msgid ""
"The default behavior for attribute access is to get, set, or delete the "
"attribute from an object's dictionary. For instance, ``a.x`` has a lookup "
"chain starting with ``a.__dict__['x']``, then ``type(a).__dict__['x']``, and "
"continuing through the base classes of ``type(a)`` excluding metaclasses."
msgstr ""
"O comportamento padrão para acesso ao atributo é obter, definir ou excluir o "
"atributo do dicionário de um objeto. Por exemplo, ``a.x`` tem uma cadeia de "
"pesquisa começando com ``a.__dict__['x']``, depois ``type(a)."
"__dict__['x']``, e continunando pelas classes bases de ``type(a)`` excluindo "
"metaclasses."

#: ../../reference/datamodel.rst:1751
msgid ""
"However, if the looked-up value is an object defining one of the descriptor "
"methods, then Python may override the default behavior and invoke the "
"descriptor method instead.  Where this occurs in the precedence chain "
"depends on which descriptor methods were defined and how they were called."
msgstr ""
"No entanto, se o valor pesquisado for um objeto que define um dos métodos do "
"descritor, Python pode substituir o comportamento padrão e invocar o método "
"do descritor. Onde isso ocorre na cadeia de precedência depende de quais "
"métodos descritores foram definidos e como eles foram chamados."

#: ../../reference/datamodel.rst:1756
msgid ""
"The starting point for descriptor invocation is a binding, ``a.x``. How the "
"arguments are assembled depends on ``a``:"
msgstr ""
"O ponto de partida para a invocação do descritor é uma ligação, ``a.x``. "
"Como os argumentos são montados depende de ``a``:"

#: ../../reference/datamodel.rst:1761
msgid "Direct Call"
msgstr "Chamada direta"

#: ../../reference/datamodel.rst:1760
msgid ""
"The simplest and least common call is when user code directly invokes a "
"descriptor method:    ``x.__get__(a)``."
msgstr ""
"A chamada mais simples e menos comum é quando o código do usuário invoca "
"diretamente um método descritor: ``x.__get__(a)``."

#: ../../reference/datamodel.rst:1765
msgid "Instance Binding"
msgstr "Ligação de instâncias"

#: ../../reference/datamodel.rst:1764
msgid ""
"If binding to an object instance, ``a.x`` is transformed into the call: "
"``type(a).__dict__['x'].__get__(a, type(a))``."
msgstr ""
"Se estiver ligando a uma instância de objeto, ``a.x`` é transformado na "
"chamada: ``type(a).__dict__['x'].__get__(a, type(a))``."

#: ../../reference/datamodel.rst:1769
msgid "Class Binding"
msgstr "Ligação de classes"

#: ../../reference/datamodel.rst:1768
msgid ""
"If binding to a class, ``A.x`` is transformed into the call: ``A."
"__dict__['x'].__get__(None, A)``."
msgstr ""
"Se estiver ligando a uma classe, ``A.x`` é transformado na chamada: ``A."
"__dict__['x'].__get__(None, A)``."

#: ../../reference/datamodel.rst:1775
msgid "Super Binding"
msgstr "Ligação de super"

#: ../../reference/datamodel.rst:1772
msgid ""
"If ``a`` is an instance of :class:`super`, then the binding ``super(B, obj)."
"m()`` searches ``obj.__class__.__mro__`` for the base class ``A`` "
"immediately preceding ``B`` and then invokes the descriptor with the call: "
"``A.__dict__['m'].__get__(obj, obj.__class__)``."
msgstr ""
"Se ``a`` é uma instância de :class:`super`, então a ligação ``super(B, obj)."
"m()`` procura ``obj.__class__.__mro__`` para a classe base ``A`` precedendo "
"imediatamente ``B`` e, em seguida, invoca o descritor com a chamada: ``A."
"__dict__['m'].__get__(obj, obj.__class__)``."

#: ../../reference/datamodel.rst:1777
msgid ""
"For instance bindings, the precedence of descriptor invocation depends on "
"which descriptor methods are defined.  A descriptor can define any "
"combination of :meth:`__get__`, :meth:`__set__` and :meth:`__delete__`.  If "
"it does not define :meth:`__get__`, then accessing the attribute will return "
"the descriptor object itself unless there is a value in the object's "
"instance dictionary.  If the descriptor defines :meth:`__set__` and/or :meth:"
"`__delete__`, it is a data descriptor; if it defines neither, it is a non-"
"data descriptor.  Normally, data descriptors define both :meth:`__get__` "
"and :meth:`__set__`, while non-data descriptors have just the :meth:"
"`__get__` method.  Data descriptors with :meth:`__set__` and :meth:`__get__` "
"defined always override a redefinition in an instance dictionary.  In "
"contrast, non-data descriptors can be overridden by instances."
msgstr ""

#: ../../reference/datamodel.rst:1790
msgid ""
"Python methods (including :func:`staticmethod` and :func:`classmethod`) are "
"implemented as non-data descriptors.  Accordingly, instances can redefine "
"and override methods.  This allows individual instances to acquire behaviors "
"that differ from other instances of the same class."
msgstr ""
"Os métodos Python (incluindo :func:`staticmethod` e :func:`classmethod`) são "
"implementados como descritores sem dados. Assim, as instâncias podem "
"redefinir e substituir métodos. Isso permite que instâncias individuais "
"adquiram comportamentos que diferem de outras instâncias da mesma classe."

#: ../../reference/datamodel.rst:1795
msgid ""
"The :func:`property` function is implemented as a data descriptor. "
"Accordingly, instances cannot override the behavior of a property."
msgstr ""
"A função :func:`property` é implementada como um descritor de dados. Da "
"mesma forma, as instâncias não podem substituir o comportamento de uma "
"propriedade."

#: ../../reference/datamodel.rst:1802
msgid "__slots__"
msgstr "__slots__"

#: ../../reference/datamodel.rst:1804
msgid ""
"*__slots__* allow us to explicitly declare data members (like properties) "
"and deny the creation of *__dict__* and *__weakref__* (unless explicitly "
"declared in *__slots__* or available in a parent.)"
msgstr ""
"*__slots__* permite-nos declarar explicitamente membros de dados (como "
"propriedades) e negar a criação de *__dict__* e *__weakref__* (a menos que "
"explicitamente declarado em *__slots__* ou disponível em um pai.)"

#: ../../reference/datamodel.rst:1808
msgid ""
"The space saved over using *__dict__* can be significant. Attribute lookup "
"speed can be significantly improved as well."
msgstr ""
"O espaço economizado com o uso de *__dict__* pode ser significativo. A "
"velocidade de pesquisa de atributos também pode ser significativamente "
"melhorada."

#: ../../reference/datamodel.rst:1813
msgid ""
"This class variable can be assigned a string, iterable, or sequence of "
"strings with variable names used by instances.  *__slots__* reserves space "
"for the declared variables and prevents the automatic creation of *__dict__* "
"and *__weakref__* for each instance."
msgstr ""
"Esta variável de classe pode ser atribuída a uma string, iterável ou "
"sequência de strings com nomes de variáveis usados por instâncias. "
"*__slots__* reserva espaço para as variáveis declaradas e evita a criação "
"automática de *__dict__* e *__weakref__* para cada instância."

#: ../../reference/datamodel.rst:1820
msgid "Notes on using *__slots__*"
msgstr "Observações ao uso de *__slots__*"

#: ../../reference/datamodel.rst:1822
msgid ""
"When inheriting from a class without *__slots__*, the *__dict__* and "
"*__weakref__* attribute of the instances will always be accessible."
msgstr ""
"Ao herdar de uma classe sem *__slots__*, os atributos *__dict__* e "
"*__weakref__* das instâncias vão sempre ser acessíveis."

#: ../../reference/datamodel.rst:1825
msgid ""
"Without a *__dict__* variable, instances cannot be assigned new variables "
"not listed in the *__slots__* definition.  Attempts to assign to an unlisted "
"variable name raises :exc:`AttributeError`. If dynamic assignment of new "
"variables is desired, then add ``'__dict__'`` to the sequence of strings in "
"the *__slots__* declaration."
msgstr ""
"Sem uma variável *__dict__*, as instâncias não podem ser atribuídas a novas "
"variáveis não listadas na definição *__slots__*. As tentativas de atribuir a "
"um nome de variável não listado levantam :exc:`AttributeError`. Se a "
"atribuição dinâmica de novas variáveis for desejada, então adicione "
"``'__dict__'`` à sequência de strings na declaração *__slots__*."

#: ../../reference/datamodel.rst:1831
msgid ""
"Without a *__weakref__* variable for each instance, classes defining "
"*__slots__* do not support weak references to its instances. If weak "
"reference support is needed, then add ``'__weakref__'`` to the sequence of "
"strings in the *__slots__* declaration."
msgstr ""
"Sem uma variável *__weakref__* para cada instância, as classes que definem "
"*__slots__* não suportam referências fracas para suas instâncias. Se for "
"necessário um suporte de referência fraca, adicione ``'__weakref__'`` à "
"sequência de strings na declaração *__slots__*."

#: ../../reference/datamodel.rst:1836
msgid ""
"*__slots__* are implemented at the class level by creating descriptors (:ref:"
"`descriptors`) for each variable name.  As a result, class attributes cannot "
"be used to set default values for instance variables defined by *__slots__*; "
"otherwise, the class attribute would overwrite the descriptor assignment."
msgstr ""
"*__slots__* são implementados no nível de classe criando descritores (:ref:"
"`descriptors`) para cada nome de variável. Como resultado, os atributos de "
"classe não podem ser usados para definir valores padrão para variáveis de "
"instância definidas por *__slots__*; caso contrário, o atributo de classe "
"sobrescreveria a atribuição do descritor."

#: ../../reference/datamodel.rst:1842
msgid ""
"The action of a *__slots__* declaration is not limited to the class where it "
"is defined.  *__slots__* declared in parents are available in child classes. "
"However, child subclasses will get a *__dict__*  and *__weakref__* unless "
"they also define *__slots__* (which should only contain names of any "
"*additional* slots)."
msgstr ""
"A ação de uma declaração *__slots__ se limita à classe em que é definida. "
"*__slots__* declarados nos pais estão disponíveis nas classes infantis. No "
"entanto, as subclasses filhas receberão um *__dict__ * e *__weakref__* a "
"menos que também definam *__slots__* (que deve conter apenas nomes de "
"quaisquer slots *adicionais*)."

#: ../../reference/datamodel.rst:1848
msgid ""
"If a class defines a slot also defined in a base class, the instance "
"variable defined by the base class slot is inaccessible (except by "
"retrieving its descriptor directly from the base class). This renders the "
"meaning of the program undefined.  In the future, a check may be added to "
"prevent this."
msgstr ""
"Se uma classe define um slot também definido em uma classe base, a variável "
"de instância definida pelo slot da classe base fica inacessível (exceto por "
"recuperar seu descritor diretamente da classe base). Isso torna o "
"significado do programa indefinido. No futuro, uma verificação pode ser "
"adicionada para evitar isso."

#: ../../reference/datamodel.rst:1853
msgid ""
"Nonempty *__slots__* does not work for classes derived from \"variable-"
"length\" built-in types such as :class:`int`, :class:`bytes` and :class:"
"`tuple`."
msgstr ""
"Não vazio *__slots__* não funciona para classes derivadas de tipos embutidos "
"de \"comprimento variável\", como :class:`int`, :class:`bytes` e :class:"
"`tuple`."

#: ../../reference/datamodel.rst:1856
msgid ""
"Any non-string iterable may be assigned to *__slots__*. Mappings may also be "
"used; however, in the future, special meaning may be assigned to the values "
"corresponding to each key."
msgstr ""
"Qualquer iterável não string pode ser atribuído a *__slots__*. Mapeamentos "
"também podem ser usados; entretanto, no futuro, um significado especial pode "
"ser atribuído aos valores correspondentes a cada chave."

#: ../../reference/datamodel.rst:1860
msgid ""
"*__class__* assignment works only if both classes have the same *__slots__*."
msgstr ""
"Atribuição de *__class__* funciona apenas se ambas as classes têm o mesmo "
"*__slots__*."

#: ../../reference/datamodel.rst:1862
msgid ""
"Multiple inheritance with multiple slotted parent classes can be used, but "
"only one parent is allowed to have attributes created by slots (the other "
"bases must have empty slot layouts) - violations raise :exc:`TypeError`."
msgstr ""
"A herança múltipla com várias classes pai com slots pode ser usada, mas "
"apenas um pai tem permissão para ter atributos criados por slots (as outras "
"bases devem ter layouts de slots vazios) -- violações levantam :exc:"
"`TypeError`."

#: ../../reference/datamodel.rst:1867
msgid ""
"If an iterator is used for *__slots__* then a descriptor is created for each "
"of the iterator's values. However, the *__slots__* attribute will be an "
"empty iterator."
msgstr ""
"Se um iterador for usado para *__slots__*, um descritor é criado para cada "
"um dos valores do iterador. No entanto, o atributo *__slots__* será um "
"iterador vazio."

#: ../../reference/datamodel.rst:1874
msgid "Customizing class creation"
msgstr "Personalizando a criação de classe"

#: ../../reference/datamodel.rst:1876
msgid ""
"Whenever a class inherits from another class, *__init_subclass__* is called "
"on that class. This way, it is possible to write classes which change the "
"behavior of subclasses. This is closely related to class decorators, but "
"where class decorators only affect the specific class they're applied to, "
"``__init_subclass__`` solely applies to future subclasses of the class "
"defining the method."
msgstr ""
"Sempre que uma classe herda de outra classe, *__init_subclass__* é chamado "
"nessa classe. Dessa forma, é possível escrever classes que alteram o "
"comportamento das subclasses. Isso está intimamente relacionado aos "
"decoradores de classe, mas onde decoradores de classe afetam apenas a classe "
"específica à qual são aplicados, ``__init_subclass__`` aplica-se apenas a "
"futuras subclasses da classe que define o método."

#: ../../reference/datamodel.rst:1885
msgid ""
"This method is called whenever the containing class is subclassed. *cls* is "
"then the new subclass. If defined as a normal instance method, this method "
"is implicitly converted to a class method."
msgstr ""
"Este método é chamado sempre que a classe que contém é uma subclasse. *cls* "
"é então a nova subclasse. Se definido como um método de instância normal, "
"esse método é convertido implicitamente em um método de classe."

#: ../../reference/datamodel.rst:1889
msgid ""
"Keyword arguments which are given to a new class are passed to the parent's "
"class ``__init_subclass__``. For compatibility with other classes using "
"``__init_subclass__``, one should take out the needed keyword arguments and "
"pass the others over to the base class, as in::"
msgstr ""
"Argumentos nomeados dados a uma nova classe são passados para a classe base "
"``__init_subclass__``. Para compatibilidade com outras classes usando "
"``__init_subclass__``, deve-se retirar os argumentos nomeados necessários e "
"passar os outros para a classe base, como em::"

#: ../../reference/datamodel.rst:1903
msgid ""
"The default implementation ``object.__init_subclass__`` does nothing, but "
"raises an error if it is called with any arguments."
msgstr ""
"A implementação padrão de ``object.__init_subclass__`` não faz nada, mas "
"levanta um erro se for chamada com quaisquer argumentos."

#: ../../reference/datamodel.rst:1908
msgid ""
"The metaclass hint ``metaclass`` is consumed by the rest of the type "
"machinery, and is never passed to ``__init_subclass__`` implementations. The "
"actual metaclass (rather than the explicit hint) can be accessed as "
"``type(cls)``."
msgstr ""
"A dica da metaclasse ``metaclass`` é consumida pelo resto da maquinaria de "
"tipo, e nunca é passada para implementações ``__init_subclass__``. A "
"metaclasse real (em vez da dica explícita) pode ser acessada como "
"``type(cls)``."

#: ../../reference/datamodel.rst:1919
msgid "Metaclasses"
msgstr "Metaclasses"

#: ../../reference/datamodel.rst:1926
msgid ""
"By default, classes are constructed using :func:`type`. The class body is "
"executed in a new namespace and the class name is bound locally to the "
"result of ``type(name, bases, namespace)``."
msgstr ""
"Por padrão, as classes são construídas usando :func:`type`. O corpo da "
"classe é executado em um novo espaço de nomes e o nome da classe é vinculado "
"localmente ao resultado de ``type(name, bases, namespace)``."

#: ../../reference/datamodel.rst:1930
msgid ""
"The class creation process can be customized by passing the ``metaclass`` "
"keyword argument in the class definition line, or by inheriting from an "
"existing class that included such an argument. In the following example, "
"both ``MyClass`` and ``MySubclass`` are instances of ``Meta``::"
msgstr ""
"O processo de criação da classe pode ser personalizado passando o argumento "
"nomeado ``metaclass`` na linha de definição da classe, ou herdando de uma "
"classe existente que incluiu tal argumento. No exemplo a seguir, ``MyClass`` "
"e ``MySubclass`` são instâncias de ``Meta``::"

#: ../../reference/datamodel.rst:1944
msgid ""
"Any other keyword arguments that are specified in the class definition are "
"passed through to all metaclass operations described below."
msgstr ""
"Quaisquer outros argumentos nomeados especificados na definição de classe "
"são transmitidos para todas as operações de metaclasse descritas abaixo."

#: ../../reference/datamodel.rst:1947
msgid "When a class definition is executed, the following steps occur:"
msgstr ""
"Quando uma definição de classe é executada, as seguintes etapas ocorrem:"

#: ../../reference/datamodel.rst:1949
msgid "MRO entries are resolved;"
msgstr "entradas de MRO são resolvidas;"

#: ../../reference/datamodel.rst:1950
msgid "the appropriate metaclass is determined;"
msgstr "a metaclasse apropriada é determinada;"

#: ../../reference/datamodel.rst:1951
msgid "the class namespace is prepared;"
msgstr "o espaço de nomes da classe é preparada;"

#: ../../reference/datamodel.rst:1952
msgid "the class body is executed;"
msgstr "o corpo da classe é executado;"

#: ../../reference/datamodel.rst:1953
msgid "the class object is created."
msgstr "o objeto da classe é criado."

#: ../../reference/datamodel.rst:1957
msgid "Resolving MRO entries"
msgstr "Resolvendo entradas de MRO"

#: ../../reference/datamodel.rst:1959
msgid ""
"If a base that appears in class definition is not an instance of :class:"
"`type`, then an ``__mro_entries__`` method is searched on it. If found, it "
"is called with the original bases tuple. This method must return a tuple of "
"classes that will be used instead of this base. The tuple may be empty, in "
"such case the original base is ignored."
msgstr ""
"Se uma base que aparece na definição de classe não é uma instância de :class:"
"`type`, então um método ``__mro_entries__`` é pesquisado nela. Se "
"encontrado, ele é chamado com a tupla de base original. Este método deve "
"retornar uma tupla de classes que serão usadas no lugar desta base. A tupla "
"pode estar vazia, neste caso a base original é ignorada."

#: ../../reference/datamodel.rst:1967 ../../reference/datamodel.rst:2157
msgid ":pep:`560` - Core support for typing module and generic types"
msgstr ":pep:`560` - Suporte básico para módulo typing e tipos genéricos"

#: ../../reference/datamodel.rst:1971
msgid "Determining the appropriate metaclass"
msgstr "Determinando a metaclasse apropriada"

#: ../../reference/datamodel.rst:1975
msgid ""
"The appropriate metaclass for a class definition is determined as follows:"
msgstr ""
"A metaclasse apropriada para uma definição de classe é determinada da "
"seguinte forma:"

#: ../../reference/datamodel.rst:1977
msgid ""
"if no bases and no explicit metaclass are given, then :func:`type` is used;"
msgstr ""
"se nenhuma classe base e nenhuma metaclasse explícita forem fornecidas, "
"então :func:`type` é usada;"

#: ../../reference/datamodel.rst:1978
msgid ""
"if an explicit metaclass is given and it is *not* an instance of :func:"
"`type`, then it is used directly as the metaclass;"
msgstr ""
"se uma metaclasse explícita é fornecida e *não* é uma instância de :func:"
"`type`, então ela é usada diretamente como a metaclasse;"

#: ../../reference/datamodel.rst:1980
msgid ""
"if an instance of :func:`type` is given as the explicit metaclass, or bases "
"are defined, then the most derived metaclass is used."
msgstr ""
"se uma instância de :func:`type` é fornecida como a metaclasse explícita, ou "
"classes bases são definidas, então a metaclasse mais derivada é usada."

#: ../../reference/datamodel.rst:1983
msgid ""
"The most derived metaclass is selected from the explicitly specified "
"metaclass (if any) and the metaclasses (i.e. ``type(cls)``) of all specified "
"base classes. The most derived metaclass is one which is a subtype of *all* "
"of these candidate metaclasses. If none of the candidate metaclasses meets "
"that criterion, then the class definition will fail with ``TypeError``."
msgstr ""
"A metaclasse mais derivada é selecionada a partir da metaclasse "
"explicitamente especificada (se houver) e das metaclasses (ou seja, "
"``type(cls)``) de todas as classes bases especificadas. A metaclasse mais "
"derivada é aquela que é um subtipo de *todas* essas metaclasses candidatas. "
"Se nenhuma das metaclasses candidatas atender a esse critério, a definição "
"de classe falhará com ``TypeError``."

#: ../../reference/datamodel.rst:1993
msgid "Preparing the class namespace"
msgstr "Preparando o espaço de nomes da classe"

#: ../../reference/datamodel.rst:1998
msgid ""
"Once the appropriate metaclass has been identified, then the class namespace "
"is prepared. If the metaclass has a ``__prepare__`` attribute, it is called "
"as ``namespace = metaclass.__prepare__(name, bases, **kwds)`` (where the "
"additional keyword arguments, if any, come from the class definition). The "
"``__prepare__`` method should be implemented as a :func:`classmethod`. The "
"namespace returned by ``__prepare__`` is passed in to ``__new__``, but when "
"the final class object is created the namespace is copied into a new "
"``dict``."
msgstr ""
"Assim que a metaclasse apropriada for identificada, o espaço de nomes da "
"classe é preparado. Se a metaclasse tem um atributo ``__prepare__``, ela é "
"chamada de ``namespace = metaclass.__prepare__(nome, bases, **kwds)`` (onde "
"os argumentos nomeados adicionais, se houver, vêm da definição da classe) . "
"O método ``__prepare__`` deve ser implementado como uma :func:`classmethod`. "
"O espaço de nomes retornado por ``__prepare__`` é passado para ``__new__``, "
"mas quando o objeto de classe final é criado, o espaço de nomes é copiado "
"para um novo ``dict``."

#: ../../reference/datamodel.rst:2006
msgid ""
"If the metaclass has no ``__prepare__`` attribute, then the class namespace "
"is initialised as an empty ordered mapping."
msgstr ""
"Se a metaclasse não tiver o atributo ``__prepare__``, então o espaço de "
"nomes da classe é inicializado como um mapeamento ordenado vazio."

#: ../../reference/datamodel.rst:2011
msgid ":pep:`3115` - Metaclasses in Python 3000"
msgstr ":pep:`3115` - Metaclasses no Python 3000"

#: ../../reference/datamodel.rst:2012
msgid "Introduced the ``__prepare__`` namespace hook"
msgstr "Introduzido o gancho de espaço de nomes ``__prepare__``"

#: ../../reference/datamodel.rst:2016
msgid "Executing the class body"
msgstr "Executando o corpo da classe"

#: ../../reference/datamodel.rst:2021
msgid ""
"The class body is executed (approximately) as ``exec(body, globals(), "
"namespace)``. The key difference from a normal call to :func:`exec` is that "
"lexical scoping allows the class body (including any methods) to reference "
"names from the current and outer scopes when the class definition occurs "
"inside a function."
msgstr ""
"O corpo da classe é executado (aproximadamente) como ``exec(body, globals(), "
"namespace)``. A principal diferença de uma chamada normal para :func:`exec` "
"é que o escopo léxico permite que o corpo da classe (incluindo quaisquer "
"métodos) faça referência a nomes dos escopos atual e externo quando a "
"definição de classe ocorre dentro de uma função."

#: ../../reference/datamodel.rst:2027
msgid ""
"However, even when the class definition occurs inside the function, methods "
"defined inside the class still cannot see names defined at the class scope. "
"Class variables must be accessed through the first parameter of instance or "
"class methods, or through the implicit lexically scoped ``__class__`` "
"reference described in the next section."
msgstr ""
"No entanto, mesmo quando a definição de classe ocorre dentro da função, os "
"métodos definidos dentro da classe ainda não podem ver os nomes definidos no "
"escopo da classe. Variáveis de classe devem ser acessadas através do "
"primeiro parâmetro de instância ou métodos de classe, ou através da "
"referência implícita com escopo léxico ``__class__`` descrita na próxima "
"seção."

#: ../../reference/datamodel.rst:2036
msgid "Creating the class object"
msgstr "Criando o objeto classe"

#: ../../reference/datamodel.rst:2043
msgid ""
"Once the class namespace has been populated by executing the class body, the "
"class object is created by calling ``metaclass(name, bases, namespace, "
"**kwds)`` (the additional keywords passed here are the same as those passed "
"to ``__prepare__``)."
msgstr ""
"Uma vez que o espaço de nomes da classe tenha sido preenchido executando o "
"corpo da classe, o objeto classe é criado chamando ``metaclass(name, bases, "
"namespace, **kwds)`` (os argumentos adicionais passados aqui são os mesmos "
"passados para ``__prepare__``)."

#: ../../reference/datamodel.rst:2048
msgid ""
"This class object is the one that will be referenced by the zero-argument "
"form of :func:`super`. ``__class__`` is an implicit closure reference "
"created by the compiler if any methods in a class body refer to either "
"``__class__`` or ``super``. This allows the zero argument form of :func:"
"`super` to correctly identify the class being defined based on lexical "
"scoping, while the class or instance that was used to make the current call "
"is identified based on the first argument passed to the method."
msgstr ""
"Este objeto classe é aquele que será referenciado pela chamada a  :func:"
"`super` sem argumentos. ``__class__`` é uma referência de clausura implícita "
"criada pelo compilador se algum método no corpo da classe se referir a "
"``__class__`` ou ``super``. Isso permite que a forma de argumento zero de :"
"func:`super` identifique corretamente a classe sendo definida com base no "
"escopo léxico, enquanto a classe ou instância que foi usada para fazer a "
"chamada atual é identificada com base no primeiro argumento passado para o "
"método."

#: ../../reference/datamodel.rst:2058
msgid ""
"In CPython 3.6 and later, the ``__class__`` cell is passed to the metaclass "
"as a ``__classcell__`` entry in the class namespace. If present, this must "
"be propagated up to the ``type.__new__`` call in order for the class to be "
"initialised correctly. Failing to do so will result in a :exc:`RuntimeError` "
"in Python 3.8."
msgstr ""
"No CPython 3.6 e posterior, a célula ``__class__`` é passada para a "
"metaclasse como uma entrada de ``__classcell__`` no espaço de nomes da "
"classe. Se estiver presente, deve ser propagado até a chamada a ``type."
"__new__`` para que a classe seja inicializada corretamente. Não fazer isso "
"resultará em um :exc:`RuntimeError` no Python 3.8."

#: ../../reference/datamodel.rst:2064
msgid ""
"When using the default metaclass :class:`type`, or any metaclass that "
"ultimately calls ``type.__new__``, the following additional customisation "
"steps are invoked after creating the class object:"
msgstr ""
"Ao usar a metaclasse padrão :class:`type`, ou qualquer metaclasse que "
"finalmente chama ``type.__new__``, as seguintes etapas de personalização "
"adicionais são invocadas após a criação do objeto classe:"

#: ../../reference/datamodel.rst:2068
msgid ""
"first, ``type.__new__`` collects all of the descriptors in the class "
"namespace that define a :meth:`~object.__set_name__` method;"
msgstr ""
"primeiro, ``type.__new__`` coleta todos os descritores no espaço de nomes da "
"classe que definem um método :meth:`~object.__set_name__`;"

#: ../../reference/datamodel.rst:2070
msgid ""
"second, all of these ``__set_name__`` methods are called with the class "
"being defined and the assigned name of that particular descriptor;"
msgstr ""
"segundo, todos esses métodos ``__set_name__`` são chamados com a classe "
"sendo definida e o nome atribuído daquele descritor particular;"

#: ../../reference/datamodel.rst:2072
msgid ""
"finally, the :meth:`~object.__init_subclass__` hook is called on the "
"immediate parent of the new class in its method resolution order."
msgstr ""
"finalmente, o gancho :meth:`~object.__init_subclass__` é chamado no pai "
"imediato da nova classe em sua ordem de resolução de métodos."

#: ../../reference/datamodel.rst:2075
msgid ""
"After the class object is created, it is passed to the class decorators "
"included in the class definition (if any) and the resulting object is bound "
"in the local namespace as the defined class."
msgstr ""
"Depois que o objeto classe é criado, ele é passado para os decoradores de "
"classe incluídos na definição de classe (se houver) e o objeto resultante é "
"vinculado ao espaço de nomes local como a classe definida."

#: ../../reference/datamodel.rst:2079
msgid ""
"When a new class is created by ``type.__new__``, the object provided as the "
"namespace parameter is copied to a new ordered mapping and the original "
"object is discarded. The new copy is wrapped in a read-only proxy, which "
"becomes the :attr:`~object.__dict__` attribute of the class object."
msgstr ""
"Quando uma nova classe é criada por ``type.__new__``, o objeto fornecido "
"como o parâmetro do espaço de nomes é copiado para um novo mapeamento "
"ordenado e o objeto original é descartado. A nova cópia é envolta em um "
"proxy de somente leitura, que se torna o atributo :attr:`~object.__dict__` "
"do objeto classe."

#: ../../reference/datamodel.rst:2086
msgid ":pep:`3135` - New super"
msgstr ":pep:`3135` - Novo super"

#: ../../reference/datamodel.rst:2087
msgid "Describes the implicit ``__class__`` closure reference"
msgstr "Descreve a referência de clausura implícita de  ``__class__``"

#: ../../reference/datamodel.rst:2091
msgid "Uses for metaclasses"
msgstr "Usos para metaclasses"

#: ../../reference/datamodel.rst:2093
msgid ""
"The potential uses for metaclasses are boundless. Some ideas that have been "
"explored include enum, logging, interface checking, automatic delegation, "
"automatic property creation, proxies, frameworks, and automatic resource "
"locking/synchronization."
msgstr ""
"Os usos potenciais para metaclasses são ilimitados. Algumas ideias que foram "
"exploradas incluem enumeradores, criação de log, verificação de interface, "
"delegação automática, criação automática de propriedade, proxies, estruturas "
"e travamento/sincronização automático/a de recursos."

#: ../../reference/datamodel.rst:2100
msgid "Customizing instance and subclass checks"
msgstr "Personalizando verificações de instância e subclasse"

#: ../../reference/datamodel.rst:2102
msgid ""
"The following methods are used to override the default behavior of the :func:"
"`isinstance` and :func:`issubclass` built-in functions."
msgstr ""
"Os seguintes métodos são usados para substituir o comportamento padrão das "
"funções embutidas :func:`isinstance` e :func:`issubclass`."

#: ../../reference/datamodel.rst:2105
msgid ""
"In particular, the metaclass :class:`abc.ABCMeta` implements these methods "
"in order to allow the addition of Abstract Base Classes (ABCs) as \"virtual "
"base classes\" to any class or type (including built-in types), including "
"other ABCs."
msgstr ""
"Em particular, a metaclasse :class:`abc.ABCMeta` implementa esses métodos a "
"fim de permitir a adição de classes base abstratas (ABCs) como \"classes "
"base virtuais\" para qualquer classe ou tipo (incluindo tipos embutidos), "
"incluindo outras ABCs."

#: ../../reference/datamodel.rst:2112
msgid ""
"Return true if *instance* should be considered a (direct or indirect) "
"instance of *class*. If defined, called to implement ``isinstance(instance, "
"class)``."
msgstr ""
"Retorna verdadeiro se *instance* deve ser considerada uma instância (direta "
"ou indireta) da classe *class*. Se definido, chamado para implementar "
"``isinstance(instance, class)``."

#: ../../reference/datamodel.rst:2119
msgid ""
"Return true if *subclass* should be considered a (direct or indirect) "
"subclass of *class*.  If defined, called to implement ``issubclass(subclass, "
"class)``."
msgstr ""
"Retorna verdadeiro se *subclass* deve ser considerada uma subclasse (direta "
"ou indireta) da classe *class*. Se definido, chamado para implementar "
"``issubclass(subclass, class)``."

#: ../../reference/datamodel.rst:2124
msgid ""
"Note that these methods are looked up on the type (metaclass) of a class.  "
"They cannot be defined as class methods in the actual class.  This is "
"consistent with the lookup of special methods that are called on instances, "
"only in this case the instance is itself a class."
msgstr ""
"Observe que esses métodos são pesquisados no tipo (metaclasse) de uma "
"classe. Eles não podem ser definidos como métodos de classe na classe real. "
"Isso é consistente com a pesquisa de métodos especiais que são chamados em "
"instâncias, apenas neste caso a própria instância é uma classe."

#: ../../reference/datamodel.rst:2135
msgid ":pep:`3119` - Introducing Abstract Base Classes"
msgstr ":pep:`3119` - Introduzindo classes base abstratas"

#: ../../reference/datamodel.rst:2132
msgid ""
"Includes the specification for customizing :func:`isinstance` and :func:"
"`issubclass` behavior through :meth:`~class.__instancecheck__` and :meth:"
"`~class.__subclasscheck__`, with motivation for this functionality in the "
"context of adding Abstract Base Classes (see the :mod:`abc` module) to the "
"language."
msgstr ""
"Inclui a especificação para personalizar o comportamento de :func:"
"`isinstance` e :func:`issubclass` através de :meth:`~class."
"__instancecheck__` e :meth:`~class.__subclasscheck__`, com motivação para "
"esta funcionalidade no contexto da adição de classes base abstratas (veja o "
"módulo :mod:`abc`) para a linguagem."

#: ../../reference/datamodel.rst:2140
msgid "Emulating generic types"
msgstr "Emulando tipos genéricos"

#: ../../reference/datamodel.rst:2142
msgid ""
"One can implement the generic class syntax as specified by :pep:`484` (for "
"example ``List[int]``) by defining a special method:"
msgstr ""
"Pode-se implementar a sintaxe de classe genérica conforme especificado por :"
"pep:`484` (por exemplo, ``List[int]``) definindo um método especial:"

#: ../../reference/datamodel.rst:2147
msgid ""
"Return an object representing the specialization of a generic class by type "
"arguments found in *key*."
msgstr ""
"Retorna um objeto que representa a especialização de uma classe genérica por "
"argumentos de tipo encontrados em *key*."

#: ../../reference/datamodel.rst:2150
msgid ""
"This method is looked up on the class object itself, and when defined in the "
"class body, this method is implicitly a class method.  Note, this mechanism "
"is primarily reserved for use with static type hints, other usage is "
"discouraged."
msgstr ""
"Esse método é pesquisado no próprio objeto de classe e, quando definido no "
"corpo da classe, esse método é implicitamente um método de classe. Observe "
"que esse mecanismo é reservado principalmente para uso com dicas de tipo "
"estático; outro uso é desencorajado."

#: ../../reference/datamodel.rst:2163
msgid "Emulating callable objects"
msgstr "Emulando objetos chamáveis"

#: ../../reference/datamodel.rst:2170
msgid ""
"Called when the instance is \"called\" as a function; if this method is "
"defined, ``x(arg1, arg2, ...)`` roughly translates to ``type(x).__call__(x, "
"arg1, ...)``."
msgstr ""
"Chamado quando a instância é \"chamada\" como uma função; se este método for "
"definido, ``x(arg1, arg2, ...)`` basicamente traduz para ``type(x)."
"__call__(x, arg1, ...)``."

#: ../../reference/datamodel.rst:2177
msgid "Emulating container types"
msgstr "Emulando de tipos contêineres"

#: ../../reference/datamodel.rst:2179
msgid ""
"The following methods can be defined to implement container objects.  "
"Containers usually are sequences (such as lists or tuples) or mappings (like "
"dictionaries), but can represent other containers as well.  The first set of "
"methods is used either to emulate a sequence or to emulate a mapping; the "
"difference is that for a sequence, the allowable keys should be the integers "
"*k* for which ``0 <= k < N`` where *N* is the length of the sequence, or "
"slice objects, which define a range of items.  It is also recommended that "
"mappings provide the methods :meth:`keys`, :meth:`values`, :meth:`items`, :"
"meth:`get`, :meth:`clear`, :meth:`setdefault`, :meth:`pop`, :meth:"
"`popitem`, :meth:`!copy`, and :meth:`update` behaving similar to those for "
"Python's standard dictionary objects.  The :mod:`collections.abc` module "
"provides a :class:`~collections.abc.MutableMapping` abstract base class to "
"help create those methods from a base set of :meth:`__getitem__`, :meth:"
"`__setitem__`, :meth:`__delitem__`, and :meth:`keys`. Mutable sequences "
"should provide methods :meth:`append`, :meth:`count`, :meth:`index`, :meth:"
"`extend`, :meth:`insert`, :meth:`pop`, :meth:`remove`, :meth:`reverse` and :"
"meth:`sort`, like Python standard list objects.  Finally, sequence types "
"should implement addition (meaning concatenation) and multiplication "
"(meaning repetition) by defining the methods :meth:`__add__`, :meth:"
"`__radd__`, :meth:`__iadd__`, :meth:`__mul__`, :meth:`__rmul__` and :meth:"
"`__imul__` described below; they should not define other numerical "
"operators.  It is recommended that both mappings and sequences implement "
"the :meth:`__contains__` method to allow efficient use of the ``in`` "
"operator; for mappings, ``in`` should search the mapping's keys; for "
"sequences, it should search through the values.  It is further recommended "
"that both mappings and sequences implement the :meth:`__iter__` method to "
"allow efficient iteration through the container; for mappings, :meth:"
"`__iter__` should iterate through the object's keys; for sequences, it "
"should iterate through the values."
msgstr ""
"Os métodos a seguir podem ser definidos para implementar objetos "
"contêineres. Os contêineres geralmente são sequências (como listas ou "
"tuplas) ou mapeamentos (como dicionários), mas também podem representar "
"outros contêineres. O primeiro conjunto de métodos é usado para emular uma "
"sequência ou para emular um mapeamento; a diferença é que, para uma "
"sequência, as chaves permitidas devem ser os inteiros *k* para os quais ``0 "
"<= k < N`` onde *N* é o comprimento da sequência, ou objetos fatia, que "
"definem um intervalo de itens. Também é recomendado que os mapeamentos "
"forneçam os métodos :meth:`keys`, :meth:`values`, :meth:`items`, :meth:"
"`get`, :meth:`clear`, :meth:`setdefault`, :meth:`pop`, :meth:`popitem`, :"
"meth:`!copy` e :meth:`update` se comportando de forma semelhante aos objetos "
"dicionário padrão do Python. O módulo :mod:`Collections.abc` fornece uma "
"classe base abstrata :class:`~Collections.abc.MutableMapping` para ajudar a "
"criar esses métodos a partir de um conjunto base de :meth:`__getitem__`, :"
"meth:`__setitem__`, :meth:`__delitem__` e :meth:`keys`. Sequências mutáveis ​​"
"devem fornecer métodos :meth:`append`, :meth:`count`, :meth:`index`, :meth:"
"`extend`, :meth:`insert`, :meth:`pop`, :meth:`remove`, :meth:`reverse` e :"
"meth:`sort`, como objetos lista padrão do Python. Finalmente, os tipos de "
"sequência devem implementar adição (significando concatenação) e "
"multiplicação (significando repetição) definindo os métodos :meth:"
"`__add__`, :meth:`__radd__`, :meth:`__iadd__`, :meth:`__mul__`, :meth:"
"`__rmul__` e :meth:`__imul__` descritos abaixo; eles não devem definir "
"outros operadores numéricos. É recomendado que ambos os mapeamentos e "
"sequências implementem o método :meth:`__contains__` para permitir o uso "
"eficiente do operador ``in``; para mapeamentos, ``in`` deve pesquisar as "
"chaves do mapeamento; para sequências, ele deve pesquisar os valores. É "
"ainda recomendado que ambos os mapeamentos e sequências implementem o "
"método :meth:`__iter__` para permitir a iteração eficiente através do "
"contêiner; para mapeamentos, :meth:`__iter__` deve iterar através das chaves "
"do objeto; para sequências, ele deve iterar por meio dos valores."

#: ../../reference/datamodel.rst:2214
msgid ""
"Called to implement the built-in function :func:`len`.  Should return the "
"length of the object, an integer ``>=`` 0.  Also, an object that doesn't "
"define a :meth:`__bool__` method and whose :meth:`__len__` method returns "
"zero is considered to be false in a Boolean context."
msgstr ""
"Chamado para implementar a função embutida :func:`len`. Deve retornar o "
"comprimento do objeto, um inteiro ``>=`` 0. Além disso, um objeto que não "
"define um método :meth:`__bool__` e cujo método :meth:`__len__` retorna zero "
"é considerado como falso em um contexto booleano."

#: ../../reference/datamodel.rst:2221
msgid ""
"In CPython, the length is required to be at most :attr:`sys.maxsize`. If the "
"length is larger than :attr:`!sys.maxsize` some features (such as :func:"
"`len`) may raise :exc:`OverflowError`.  To prevent raising :exc:`!"
"OverflowError` by truth value testing, an object must define a :meth:"
"`__bool__` method."
msgstr ""
"No CPython, o comprimento deve ser no máximo :attr:`sys.maxsize`. Se o "
"comprimento for maior que :attr:`!sys.maxsize`, alguns recursos (como :func:"
"`len`) podem levantar :exc:`OverflowError`. Para evitar levantar :exc:`!"
"OverflowError` pelo teste de valor de verdade, um objeto deve definir um "
"método :meth:`__bool__`."

#: ../../reference/datamodel.rst:2230
msgid ""
"Called to implement :func:`operator.length_hint`. Should return an estimated "
"length for the object (which may be greater or less than the actual length). "
"The length must be an integer ``>=`` 0. The return value may also be :const:"
"`NotImplemented`, which is treated the same as if the ``__length_hint__`` "
"method didn't exist at all. This method is purely an optimization and is "
"never required for correctness."
msgstr ""
"Chamado para implementar :func:`operator.length_hint`. Deve retornar um "
"comprimento estimado para o objeto (que pode ser maior ou menor que o "
"comprimento real). O comprimento deve ser um inteiro ``>=`` 0. O valor de "
"retorno também pode ser :const:`NotImplemented`, que é tratado da mesma "
"forma como se o método ``__length_hint__`` não existisse. Este método é "
"puramente uma otimização e nunca é necessário para a correção."

#: ../../reference/datamodel.rst:2244
msgid ""
"Slicing is done exclusively with the following three methods.  A call like ::"
msgstr ""
"O fatiamento é feito exclusivamente com os três métodos a seguir. Uma "
"chamada como ::"

#: ../../reference/datamodel.rst:2248
msgid "is translated to ::"
msgstr "é traduzida com ::"

#: ../../reference/datamodel.rst:2252
msgid "and so forth.  Missing slice items are always filled in with ``None``."
msgstr ""
"e assim por diante. Os itens de fatia ausentes são sempre preenchidos com "
"``None``."

#: ../../reference/datamodel.rst:2257
msgid ""
"Called to implement evaluation of ``self[key]``. For sequence types, the "
"accepted keys should be integers and slice objects.  Note that the special "
"interpretation of negative indexes (if the class wishes to emulate a "
"sequence type) is up to the :meth:`__getitem__` method. If *key* is of an "
"inappropriate type, :exc:`TypeError` may be raised; if of a value outside "
"the set of indexes for the sequence (after any special interpretation of "
"negative values), :exc:`IndexError` should be raised. For mapping types, if "
"*key* is missing (not in the container), :exc:`KeyError` should be raised."
msgstr ""
"Chamado para implementar a avaliação de ``self[key]``. Para tipos de "
"sequência, as chaves aceitas devem ser inteiros e objetos fatia. Observe que "
"a interpretação especial de índices negativos (se a classe deseja emular um "
"tipo de sequência) depende do método :meth:`__getitem__`. Se *key* for de um "
"tipo impróprio, :exc:`TypeError` pode ser levantada; se de um valor fora do "
"conjunto de índices para a sequência (após qualquer interpretação especial "
"de valores negativos), :exc:`IndexError` deve ser levantada. Para tipos de "
"mapeamento, se *key* estiver faltando (não no contêiner), :exc:`KeyError` "
"deve ser levantada."

#: ../../reference/datamodel.rst:2268
msgid ""
":keyword:`for` loops expect that an :exc:`IndexError` will be raised for "
"illegal indexes to allow proper detection of the end of the sequence."
msgstr ""
"Os loops :keyword:`for` esperam que uma :exc:`IndexError` seja levantada "
"para índices ilegais para permitir a detecção apropriada do fim da sequência."

#: ../../reference/datamodel.rst:2274
msgid ""
"Called to implement assignment to ``self[key]``.  Same note as for :meth:"
"`__getitem__`.  This should only be implemented for mappings if the objects "
"support changes to the values for keys, or if new keys can be added, or for "
"sequences if elements can be replaced.  The same exceptions should be raised "
"for improper *key* values as for the :meth:`__getitem__` method."
msgstr ""
"Chamado para implementar a atribuição de ``self[key]``. Mesma nota que para :"
"meth:`__getitem__`. Isso só deve ser implementado para mapeamentos se os "
"objetos suportarem alterações nos valores das chaves, ou se novas chaves "
"puderem ser adicionadas, ou para sequências se os elementos puderem ser "
"substituídos. As mesmas exceções devem ser levantadas para valores *key* "
"impróprios do método :meth:`__getitem__`."

#: ../../reference/datamodel.rst:2283
msgid ""
"Called to implement deletion of ``self[key]``.  Same note as for :meth:"
"`__getitem__`.  This should only be implemented for mappings if the objects "
"support removal of keys, or for sequences if elements can be removed from "
"the sequence.  The same exceptions should be raised for improper *key* "
"values as for the :meth:`__getitem__` method."
msgstr ""
"Chamado para implementar a exclusão de ``self[key]``. Mesma nota que para :"
"meth:`__getitem__`. Isso só deve ser implementado para mapeamentos se os "
"objetos suportarem remoções de chaves, ou para sequências se os elementos "
"puderem ser removidos da sequência. As mesmas exceções devem ser levantadas "
"para valores *key* impróprios do método :meth:`__getitem__`."

#: ../../reference/datamodel.rst:2292
msgid ""
"Called by :class:`dict`\\ .\\ :meth:`__getitem__` to implement ``self[key]`` "
"for dict subclasses when key is not in the dictionary."
msgstr ""
"Chamado por :class:`dict`\\ .\\ :meth:`__getitem__` para implementar "
"``self[key]`` para subclasses de dicionário quando a chave não estiver no "
"dicionário."

#: ../../reference/datamodel.rst:2298
msgid ""
"This method is called when an iterator is required for a container. This "
"method should return a new iterator object that can iterate over all the "
"objects in the container.  For mappings, it should iterate over the keys of "
"the container."
msgstr ""
"Este método é chamado quando um iterador é necessário para um contêiner. "
"Este método deve retornar um novo objeto iterador que pode iterar sobre "
"todos os objetos no contêiner. Para mapeamentos, ele deve iterar sobre as "
"chaves do contêiner."

#: ../../reference/datamodel.rst:2302
msgid ""
"Iterator objects also need to implement this method; they are required to "
"return themselves.  For more information on iterator objects, see :ref:"
"`typeiter`."
msgstr ""
"Os objetos iteradores também precisam implementar este método; eles são "
"obrigados a retornar. Para obter mais informações sobre objetos iteradores, "
"consulte :ref:`typeiter`."

#: ../../reference/datamodel.rst:2308
msgid ""
"Called (if present) by the :func:`reversed` built-in to implement reverse "
"iteration.  It should return a new iterator object that iterates over all "
"the objects in the container in reverse order."
msgstr ""
"Chamado (se presente) pelo :func:`reversed` embutido para implementar a "
"iteração reversa. Ele deve retornar um novo objeto iterador que itera sobre "
"todos os objetos no contêiner na ordem reversa."

#: ../../reference/datamodel.rst:2312
msgid ""
"If the :meth:`__reversed__` method is not provided, the :func:`reversed` "
"built-in will fall back to using the sequence protocol (:meth:`__len__` and :"
"meth:`__getitem__`).  Objects that support the sequence protocol should only "
"provide :meth:`__reversed__` if they can provide an implementation that is "
"more efficient than the one provided by :func:`reversed`."
msgstr ""
"Se o método :meth:`__reversed__` não for fornecido, o :func:`reversed` "
"embutido voltará a usar o protocolo de sequência (:meth:`__len__` e :meth:"
"`__getitem__`). Objetos que suportam o protocolo de sequência só devem "
"fornecer :meth:`__reversed__` se eles puderem fornecer uma implementação que "
"seja mais eficiente do que aquela fornecida por :func:`reversed`."

#: ../../reference/datamodel.rst:2319
msgid ""
"The membership test operators (:keyword:`in` and :keyword:`not in`) are "
"normally implemented as an iteration through a container. However, container "
"objects can supply the following special method with a more efficient "
"implementation, which also does not require the object be iterable."
msgstr ""
"Os operadores de teste de associação (:keyword:`in` e :keyword:`not in`) são "
"normalmente implementados como uma iteração através de um contêiner. No "
"entanto, os objetos contêiner podem fornecer o seguinte método especial com "
"uma implementação mais eficiente, que também não requer que o objeto seja "
"iterável."

#: ../../reference/datamodel.rst:2326
msgid ""
"Called to implement membership test operators.  Should return true if *item* "
"is in *self*, false otherwise.  For mapping objects, this should consider "
"the keys of the mapping rather than the values or the key-item pairs."
msgstr ""
"Chamado para implementar operadores de teste de associação. Deve retornar "
"verdadeiro se *item* estiver em *self*, falso caso contrário. Para objetos "
"de mapeamento, isso deve considerar as chaves do mapeamento em vez dos "
"valores ou pares de itens-chave."

#: ../../reference/datamodel.rst:2330
msgid ""
"For objects that don't define :meth:`__contains__`, the membership test "
"first tries iteration via :meth:`__iter__`, then the old sequence iteration "
"protocol via :meth:`__getitem__`, see :ref:`this section in the language "
"reference <membership-test-details>`."
msgstr ""
"Para objetos que não definem :meth:`__contains__`, o teste de associação "
"primeiro tenta a iteração via :meth:`__iter__`, depois o protocolo de "
"iteração de sequência antigo via :meth:`__getitem__`, consulte :ref:`esta "
"seção em a referência da linguagem <membership-test-details>`."

#: ../../reference/datamodel.rst:2339
msgid "Emulating numeric types"
msgstr "Emulando tipos numéricos"

#: ../../reference/datamodel.rst:2341
msgid ""
"The following methods can be defined to emulate numeric objects. Methods "
"corresponding to operations that are not supported by the particular kind of "
"number implemented (e.g., bitwise operations for non-integral numbers) "
"should be left undefined."
msgstr ""
"Os métodos a seguir podem ser definidos para emular objetos numéricos. "
"Métodos correspondentes a operações que não são suportadas pelo tipo "
"particular de número implementado (por exemplo, operações bit a bit para "
"números não inteiros) devem ser deixados indefinidos."

#: ../../reference/datamodel.rst:2367
msgid ""
"These methods are called to implement the binary arithmetic operations "
"(``+``, ``-``, ``*``, ``@``, ``/``, ``//``, ``%``, :func:`divmod`, :func:"
"`pow`, ``**``, ``<<``, ``>>``, ``&``, ``^``, ``|``).  For instance, to "
"evaluate the expression ``x + y``, where *x* is an instance of a class that "
"has an :meth:`__add__` method, ``x.__add__(y)`` is called.  The :meth:"
"`__divmod__` method should be the equivalent to using :meth:`__floordiv__` "
"and :meth:`__mod__`; it should not be related to :meth:`__truediv__`.  Note "
"that :meth:`__pow__` should be defined to accept an optional third argument "
"if the ternary version of the built-in :func:`pow` function is to be "
"supported."
msgstr ""
"Esses métodos são chamados para implementar as operações aritméticas "
"binárias (``+``, ``-``, ``*``, ``@``, ``/``, ``//``, ``%``, :func:`divmod`, :"
"func:`pow`, ``**``, ``<<``, ``>>``, ``&``, ``^``, ``|``). Por exemplo, para "
"avaliar a expressão ``x + y``, onde *x* é uma instância de uma classe que "
"tem um método :meth:`__add__`, ``x.__add__(y)`` é chamado. O método :meth:"
"`__divmod__` deve ser equivalente a usar :meth:`__floordiv__` e :meth:"
"`__mod__`; não deve estar relacionado a :meth:`__truediv__`. Note que :meth:"
"`__pow__` deve ser definido para aceitar um terceiro argumento opcional se a "
"versão ternária da função interna :func:`pow` for suportada."

#: ../../reference/datamodel.rst:2378
msgid ""
"If one of those methods does not support the operation with the supplied "
"arguments, it should return ``NotImplemented``."
msgstr ""
"Se um desses métodos não suporta a operação com os argumentos fornecidos, "
"ele deve retornar ``NotImplemented``."

#: ../../reference/datamodel.rst:2401
msgid ""
"These methods are called to implement the binary arithmetic operations "
"(``+``, ``-``, ``*``, ``@``, ``/``, ``//``, ``%``, :func:`divmod`, :func:"
"`pow`, ``**``, ``<<``, ``>>``, ``&``, ``^``, ``|``) with reflected (swapped) "
"operands.  These functions are only called if the left operand does not "
"support the corresponding operation [#]_ and the operands are of different "
"types. [#]_ For instance, to evaluate the expression ``x - y``, where *y* is "
"an instance of a class that has an :meth:`__rsub__` method, ``y."
"__rsub__(x)`` is called if ``x.__sub__(y)`` returns *NotImplemented*."
msgstr ""
"Esses métodos são chamados para implementar as operações aritméticas "
"binárias (``+``, ``-``, ``*``, ``@``, ``/``, ``//``, ``%``, :func:`divmod`, :"
"func:`pow`, ``**``, ``<<``, ``>>``, ``&``, ``^``, ``|``) com operandos "
"refletidos (trocados). Essas funções são chamadas apenas se o operando "
"esquerdo não suportar a operação correspondente [#]_ e os operandos forem de "
"tipos diferentes. [#]_ Por exemplo, para avaliar a expressão ``x - y``, onde "
"*y* é uma instância de uma classe que tem um método :meth:`__rsub__`, ``y."
"__rsub__(x)`` é chamado se ``x.__sub__(y)`` retorna *NotImplemented*."

#: ../../reference/datamodel.rst:2412
msgid ""
"Note that ternary :func:`pow` will not try calling :meth:`__rpow__` (the "
"coercion rules would become too complicated)."
msgstr ""
"Note que ternário :func:`pow` não tentará chamar :meth:`__rpow__` (as regras "
"de coerção se tornariam muito complicadas)."

#: ../../reference/datamodel.rst:2417
msgid ""
"If the right operand's type is a subclass of the left operand's type and "
"that subclass provides a different implementation of the reflected method "
"for the operation, this method will be called before the left operand's non-"
"reflected method. This behavior allows subclasses to override their "
"ancestors' operations."
msgstr ""
"Se o tipo do operando direito for uma subclasse do tipo do operando esquerdo "
"e essa subclasse fornecer uma implementação diferente do método refletido "
"para a operação, este método será chamado antes do método não refletido do "
"operando esquerdo. Esse comportamento permite que as subclasses substituam "
"as operações de seus ancestrais."

#: ../../reference/datamodel.rst:2438
msgid ""
"These methods are called to implement the augmented arithmetic assignments "
"(``+=``, ``-=``, ``*=``, ``@=``, ``/=``, ``//=``, ``%=``, ``**=``, ``<<=``, "
"``>>=``, ``&=``, ``^=``, ``|=``).  These methods should attempt to do the "
"operation in-place (modifying *self*) and return the result (which could be, "
"but does not have to be, *self*).  If a specific method is not defined, the "
"augmented assignment falls back to the normal methods.  For instance, if *x* "
"is an instance of a class with an :meth:`__iadd__` method, ``x += y`` is "
"equivalent to ``x = x.__iadd__(y)`` . Otherwise, ``x.__add__(y)`` and ``y."
"__radd__(x)`` are considered, as with the evaluation of ``x + y``. In "
"certain situations, augmented assignment can result in unexpected errors "
"(see :ref:`faq-augmented-assignment-tuple-error`), but this behavior is in "
"fact part of the data model."
msgstr ""
"Esses métodos são chamados para implementar as atribuições aritméticas "
"aumentadas (``+=``, ``-=``, ``*=``, ``@=``, ``/=``, ``//=``, ``%=``, "
"``**=``, ``<<=``, ``>>=``, ``&=``, ``^=``, ``|=``). Esses métodos devem "
"tentar fazer a operação no local (modificando *self*) e retornar o resultado "
"(que poderia ser, mas não precisa ser, *self*). Se um método específico não "
"for definido, a atribuição aumentada volta aos métodos normais. Por exemplo, "
"se *x* é uma instância de uma classe com um método :meth:`__iadd__`, ``x += "
"y`` é equivalente a ``x = x.__iadd__(y)``. Caso contrário, ``x.__add__(y)`` "
"e ``y.__radd__(x)`` são considerados, como com a avaliação de ``x + y``. Em "
"certas situações, a atribuição aumentada pode resultar em erros inesperados "
"(ver :ref:`faq-augmented-assignment-tuple-error`), mas este comportamento é "
"na verdade parte do modelo de dados."

#: ../../reference/datamodel.rst:2453
msgid ""
"Due to a bug in the dispatching mechanism for ``**=``, a class that defines :"
"meth:`__ipow__` but returns ``NotImplemented`` would fail to fall back to "
"``x.__pow__(y)`` and ``y.__rpow__(x)``. This bug is fixed in Python 3.10."
msgstr ""
"Devido a um bug no mecanismo de despacho para ``**=``, uma classe que "
"define :meth:`__ipow__` mas retorna ``NotImplemented`` não voltaria para ``x."
"__pow__(y)`` e ``y.__rpow__(x)``. Este bug foi corrigido no Python 3.10."

#: ../../reference/datamodel.rst:2466
msgid ""
"Called to implement the unary arithmetic operations (``-``, ``+``, :func:"
"`abs` and ``~``)."
msgstr ""
"Chamado para implementar as operações aritméticas unárias (``-``, ``+``, :"
"func:`abs` e ``~``)."

#: ../../reference/datamodel.rst:2479
msgid ""
"Called to implement the built-in functions :func:`complex`, :func:`int` and :"
"func:`float`.  Should return a value of the appropriate type."
msgstr ""
"Chamado para implementar as funções embutidas :func:`complex`, :func:`int` "
"e :func:`float`. Deve retornar um valor do tipo apropriado."

#: ../../reference/datamodel.rst:2486
msgid ""
"Called to implement :func:`operator.index`, and whenever Python needs to "
"losslessly convert the numeric object to an integer object (such as in "
"slicing, or in the built-in :func:`bin`, :func:`hex` and :func:`oct` "
"functions). Presence of this method indicates that the numeric object is an "
"integer type.  Must return an integer."
msgstr ""
"Chamado para implementar :func:`operator.index`, e sempre que o Python "
"precisar converter sem perdas o objeto numérico em um objeto inteiro (como "
"no fatiamento ou nas funções embutidas :func:`bin`, :func:`hex` e :func:"
"`oct`). A presença deste método indica que o objeto numérico é do tipo "
"inteiro. Deve retornar um número inteiro."

#: ../../reference/datamodel.rst:2492
msgid ""
"If :meth:`__int__`, :meth:`__float__` and :meth:`__complex__` are not "
"defined then corresponding built-in functions :func:`int`, :func:`float` "
"and :func:`complex` fall back to :meth:`__index__`."
msgstr ""
"Se :meth:`__int__`, :meth:`__float__` e :meth:`__complex__` não estiverem "
"definidos, funções embutidas correspondentes :func:`int`, :func:`float` e :"
"func:`complex` recorre a :meth:`__index__`."

#: ../../reference/datamodel.rst:2504
msgid ""
"Called to implement the built-in function :func:`round` and :mod:`math` "
"functions :func:`~math.trunc`, :func:`~math.floor` and :func:`~math.ceil`. "
"Unless *ndigits* is passed to :meth:`!__round__` all these methods should "
"return the value of the object truncated to an :class:`~numbers.Integral` "
"(typically an :class:`int`)."
msgstr ""
"Chamado para implementar as funções embutidas :func:`round` e :func:`~math."
"trunc`, :func:`~math.floor` e :func:`~math.ceil` de :mod:`math`. A menos que "
"*ndigits* sejam passados para :meth:`!__round__` todos estes métodos devem "
"retornar o valor do objeto truncado para um :class:`~numbers.Integral` "
"(tipicamente um :class:`int`)."

#: ../../reference/datamodel.rst:2510
msgid ""
"The built-in function :func:`int` falls back to :meth:`__trunc__` if "
"neither :meth:`__int__` nor :meth:`__index__` is defined."
msgstr ""

#: ../../reference/datamodel.rst:2517
msgid "With Statement Context Managers"
msgstr "Gerenciadores de contexto da instrução with"

#: ../../reference/datamodel.rst:2519
msgid ""
"A :dfn:`context manager` is an object that defines the runtime context to be "
"established when executing a :keyword:`with` statement. The context manager "
"handles the entry into, and the exit from, the desired runtime context for "
"the execution of the block of code.  Context managers are normally invoked "
"using the :keyword:`!with` statement (described in section :ref:`with`), but "
"can also be used by directly invoking their methods."
msgstr ""
"Um :dfn:`gerenciador de contexto` é um objeto que define o contexto de tempo "
"de execução a ser estabelecido ao executar uma instrução :keyword:`with`. O "
"gerenciador de contexto lida com a entrada e a saída do contexto de tempo de "
"execução desejado para a execução do bloco de código. Os gerenciadores de "
"contexto são normalmente invocados usando a instrução :keyword:`!with` "
"(descrita na seção :ref:`with`), mas também podem ser usados invocando "
"diretamente seus métodos."

#: ../../reference/datamodel.rst:2530
msgid ""
"Typical uses of context managers include saving and restoring various kinds "
"of global state, locking and unlocking resources, closing opened files, etc."
msgstr ""
"Os usos típicos de gerenciadores de contexto incluem salvar e restaurar "
"vários tipos de estado global, travar e destravar recursos, fechar arquivos "
"abertos, etc."

#: ../../reference/datamodel.rst:2533
msgid ""
"For more information on context managers, see :ref:`typecontextmanager`."
msgstr ""
"Para obter mais informações sobre gerenciadores de contexto, consulte :ref:"
"`typecontextmanager`."

#: ../../reference/datamodel.rst:2538
msgid ""
"Enter the runtime context related to this object. The :keyword:`with` "
"statement will bind this method's return value to the target(s) specified in "
"the :keyword:`!as` clause of the statement, if any."
msgstr ""
"Insere o contexto de tempo de execução relacionado a este objeto. A "
"instrução :keyword:`with` vinculará o valor de retorno deste método ao(s) "
"alvo(s) especificado(s) na cláusula :keyword:`!as` da instrução, se houver."

#: ../../reference/datamodel.rst:2545
msgid ""
"Exit the runtime context related to this object. The parameters describe the "
"exception that caused the context to be exited. If the context was exited "
"without an exception, all three arguments will be :const:`None`."
msgstr ""
"Sai do contexto de tempo de execução relacionado a este objeto. Os "
"parâmetros descrevem a exceção que fez com que o contexto fosse encerrado. "
"Se o contexto foi encerrado sem exceção, todos os três argumentos serão :"
"const:`None`."

#: ../../reference/datamodel.rst:2549
msgid ""
"If an exception is supplied, and the method wishes to suppress the exception "
"(i.e., prevent it from being propagated), it should return a true value. "
"Otherwise, the exception will be processed normally upon exit from this "
"method."
msgstr ""
"Se uma exceção for fornecida e o método desejar suprimir a exceção (ou seja, "
"evitar que ela seja propagada), ele deve retornar um valor verdadeiro. Caso "
"contrário, a exceção será processada normalmente ao sair deste método."

#: ../../reference/datamodel.rst:2553
msgid ""
"Note that :meth:`__exit__` methods should not reraise the passed-in "
"exception; this is the caller's responsibility."
msgstr ""
"Observe que os métodos :meth:`__exit__` não devem relançar a exceção "
"passada; esta é a responsabilidade do chamador."

#: ../../reference/datamodel.rst:2560
msgid ":pep:`343` - The \"with\" statement"
msgstr ":pep:`343` - A instrução \"with\""

#: ../../reference/datamodel.rst:2560
msgid ""
"The specification, background, and examples for the Python :keyword:`with` "
"statement."
msgstr ""
"A especificação, o histórico e os exemplos para a instrução Python :keyword:"
"`with`."

#: ../../reference/datamodel.rst:2567
msgid "Special method lookup"
msgstr "Pesquisa de método especial"

#: ../../reference/datamodel.rst:2569
msgid ""
"For custom classes, implicit invocations of special methods are only "
"guaranteed to work correctly if defined on an object's type, not in the "
"object's instance dictionary.  That behaviour is the reason why the "
"following code raises an exception::"
msgstr ""
"Para classes personalizadas, as invocações implícitas de métodos especiais "
"só têm garantia de funcionar corretamente se definidas em um tipo de objeto, "
"não no dicionário de instância do objeto. Esse comportamento é o motivo pelo "
"qual o código a seguir levanta uma exceção::"

#: ../../reference/datamodel.rst:2584
msgid ""
"The rationale behind this behaviour lies with a number of special methods "
"such as :meth:`__hash__` and :meth:`__repr__` that are implemented by all "
"objects, including type objects. If the implicit lookup of these methods "
"used the conventional lookup process, they would fail when invoked on the "
"type object itself::"
msgstr ""
"A justificativa por trás desse comportamento está em uma série de métodos "
"especiais como :meth:`__hash__` e :meth:`__repr__` que são implementados por "
"todos os objetos, incluindo objetos de tipo. Se a pesquisa implícita desses "
"métodos usasse o processo de pesquisa convencional, eles falhariam quando "
"chamados no próprio objetodo tipo::"

#: ../../reference/datamodel.rst:2597
msgid ""
"Incorrectly attempting to invoke an unbound method of a class in this way is "
"sometimes referred to as 'metaclass confusion', and is avoided by bypassing "
"the instance when looking up special methods::"
msgstr ""
"A tentativa incorreta de invocar um método não vinculado de uma classe dessa "
"maneira é às vezes referida como \"confusão de metaclasse\" e é evitada "
"ignorando a instância ao pesquisar métodos especiais::"

#: ../../reference/datamodel.rst:2606
msgid ""
"In addition to bypassing any instance attributes in the interest of "
"correctness, implicit special method lookup generally also bypasses the :"
"meth:`__getattribute__` method even of the object's metaclass::"
msgstr ""
"Além de contornar quaisquer atributos de instância no interesse da correção, "
"a pesquisa de método especial implícita geralmente também contorna o método :"
"meth:`__getattribute__` mesmo da metaclasse do objeto::"

#: ../../reference/datamodel.rst:2632
msgid ""
"Bypassing the :meth:`__getattribute__` machinery in this fashion provides "
"significant scope for speed optimisations within the interpreter, at the "
"cost of some flexibility in the handling of special methods (the special "
"method *must* be set on the class object itself in order to be consistently "
"invoked by the interpreter)."
msgstr ""
"Ignorar a maquinaria de :meth:`__getattribute__` desta forma fornece um "
"escopo significativo para otimizações de velocidade dentro do interpretador, "
"ao custo de alguma flexibilidade no tratamento de métodos especiais (o "
"método especial *deve* ser definido no próprio objeto de classe em ordem ser "
"invocado de forma consistente pelo intérprete)."

#: ../../reference/datamodel.rst:2643
msgid "Coroutines"
msgstr "Corrotinas"

#: ../../reference/datamodel.rst:2647
msgid "Awaitable Objects"
msgstr "Objetos aguardáveis"

#: ../../reference/datamodel.rst:2649
msgid ""
"An :term:`awaitable` object generally implements an :meth:`__await__` "
"method. :term:`Coroutine objects <coroutine>` returned from :keyword:`async "
"def` functions are awaitable."
msgstr ""
"Um objeto :term:`aguardável` geralmente implementa um método :meth:"
"`__await__`. Os :term:`objetos corrotina <coroutine>` retornados das "
"funções :keyword:`async def` são aguardáveis."

#: ../../reference/datamodel.rst:2655
msgid ""
"The :term:`generator iterator` objects returned from generators decorated "
"with :func:`types.coroutine` or :func:`asyncio.coroutine` are also "
"awaitable, but they do not implement :meth:`__await__`."
msgstr ""
"Os objetos :term:`iteradores geradores` retornados de geradores decorados "
"com :func:`types.coroutine` ou :func:`asyncio.coroutine` também são "
"aguardáveis, mas eles não implementam :meth:`__await__`."

#: ../../reference/datamodel.rst:2661
msgid ""
"Must return an :term:`iterator`.  Should be used to implement :term:"
"`awaitable` objects.  For instance, :class:`asyncio.Future` implements this "
"method to be compatible with the :keyword:`await` expression."
msgstr ""
"Deve retornar um :term:`iterador`. Deve ser usado para implementar objetos :"
"term:`aguardáveis <aguardável>`. Por exemplo, :class:`asyncio.Future` "
"implementa este método para ser compatível com a expressão :keyword:`await`."

#: ../../reference/datamodel.rst:2667
msgid ":pep:`492` for additional information about awaitable objects."
msgstr ":pep:`492` para informações adicionais sobre objetos aguardáveis."

#: ../../reference/datamodel.rst:2673
msgid "Coroutine Objects"
msgstr "Objetos corrotina"

#: ../../reference/datamodel.rst:2675
msgid ""
":term:`Coroutine objects <coroutine>` are :term:`awaitable` objects. A "
"coroutine's execution can be controlled by calling :meth:`__await__` and "
"iterating over the result.  When the coroutine has finished executing and "
"returns, the iterator raises :exc:`StopIteration`, and the exception's :attr:"
"`~StopIteration.value` attribute holds the return value.  If the coroutine "
"raises an exception, it is propagated by the iterator.  Coroutines should "
"not directly raise unhandled :exc:`StopIteration` exceptions."
msgstr ""
":term:`Objetos corrotina <coroutine>` são objetos :term:`aguardáveis "
"<aguardável>`. A execução de uma corrotina pode ser controlada chamando :"
"meth:`__await__` e iterando sobre o resultado. Quando a corrotina termina a "
"execução e retorna, o iterador levanta :exc:`StopIteration`, e o atributo :"
"attr:`~StopIteration.value` da exceção contém o valor de retorno. Se a "
"corrotina levantar uma exceção, ela será propagada pelo iterador. As "
"corrotinas não devem levantar exceções :exc:`StopIteration` diretamente não "
"tratadas."

#: ../../reference/datamodel.rst:2683
msgid ""
"Coroutines also have the methods listed below, which are analogous to those "
"of generators (see :ref:`generator-methods`).  However, unlike generators, "
"coroutines do not directly support iteration."
msgstr ""
"As corrotinas também têm os métodos listados abaixo, que são análogos aos "
"dos geradores (ver :ref:`generator-methods`). No entanto, ao contrário dos "
"geradores, as corrotinas não suportam diretamente a iteração."

#: ../../reference/datamodel.rst:2687
msgid "It is a :exc:`RuntimeError` to await on a coroutine more than once."
msgstr "É uma :exc:`RuntimeError` para aguardar uma corrotina mais de uma vez."

#: ../../reference/datamodel.rst:2693
msgid ""
"Starts or resumes execution of the coroutine.  If *value* is ``None``, this "
"is equivalent to advancing the iterator returned by :meth:`__await__`.  If "
"*value* is not ``None``, this method delegates to the :meth:`~generator."
"send` method of the iterator that caused the coroutine to suspend.  The "
"result (return value, :exc:`StopIteration`, or other exception) is the same "
"as when iterating over the :meth:`__await__` return value, described above."
msgstr ""
"Inicia ou retoma a execução da corrotina. Se *value* for ``None``, isso é "
"equivalente a avançar o iterador retornado por :meth:`__await__`. Se *value* "
"não for ``None``, este método delega para o método :meth:`~generator.send` "
"do iterador que causou a suspensão da corrotina. O resultado (valor de "
"retorno, :exc:`StopIteration` ou outra exceção) é o mesmo de iterar sobre o "
"valor de retorno :meth:`__await__`, descrito acima."

#: ../../reference/datamodel.rst:2703
msgid ""
"Raises the specified exception in the coroutine.  This method delegates to "
"the :meth:`~generator.throw` method of the iterator that caused the "
"coroutine to suspend, if it has such a method.  Otherwise, the exception is "
"raised at the suspension point.  The result (return value, :exc:"
"`StopIteration`, or other exception) is the same as when iterating over the :"
"meth:`__await__` return value, described above.  If the exception is not "
"caught in the coroutine, it propagates back to the caller."
msgstr ""
"Levanta a exceção especificada na corrotina. Este método delega ao método :"
"meth:`~generator.throw` do iterador que causou a suspensão da corrotina, se "
"ela tiver tal método. Caso contrário, a exceção é levantada no ponto de "
"suspensão. O resultado (valor de retorno, :exc:`StopIteration` ou outra "
"exceção) é o mesmo de iterar sobre o valor de retorno :meth:`__await__`, "
"descrito acima. Se a exceção não for capturada na corrotina, ela se "
"propagará de volta para o chamador."

#: ../../reference/datamodel.rst:2714
msgid ""
"Causes the coroutine to clean itself up and exit.  If the coroutine is "
"suspended, this method first delegates to the :meth:`~generator.close` "
"method of the iterator that caused the coroutine to suspend, if it has such "
"a method.  Then it raises :exc:`GeneratorExit` at the suspension point, "
"causing the coroutine to immediately clean itself up. Finally, the coroutine "
"is marked as having finished executing, even if it was never started."
msgstr ""
"Faz com que a corrotina se limpe e saia. Se a corrotina for suspensa, este "
"método primeiro delega para o método :meth:`~generator.close` do iterador "
"que causou a suspensão da corrotina, se tiver tal método. Então ele levanta :"
"exc:`GeneratorExit` no ponto de suspensão, fazendo com que a corrotina se "
"limpe imediatamente. Por fim, a corrotina é marcada como tendo sua execução "
"concluída, mesmo que nunca tenha sido iniciada."

#: ../../reference/datamodel.rst:2722
msgid ""
"Coroutine objects are automatically closed using the above process when they "
"are about to be destroyed."
msgstr ""
"Objetos corrotina são fechados automaticamente usando o processo acima "
"quando estão prestes a ser destruídos."

#: ../../reference/datamodel.rst:2728
msgid "Asynchronous Iterators"
msgstr "Iteradores assíncronos"

#: ../../reference/datamodel.rst:2730
msgid ""
"An *asynchronous iterator* can call asynchronous code in its ``__anext__`` "
"method."
msgstr ""
"Um *iterador assíncrono* pode chamar código assíncrono em seu método "
"``__anext__``."

#: ../../reference/datamodel.rst:2733
msgid ""
"Asynchronous iterators can be used in an :keyword:`async for` statement."
msgstr ""
"Os iteradores assíncronos podem ser usados ​​em uma instrução :keyword:`async "
"for`."

#: ../../reference/datamodel.rst:2737
msgid "Must return an *asynchronous iterator* object."
msgstr "Deve retornar um objeto *iterador assíncrono*."

#: ../../reference/datamodel.rst:2741
msgid ""
"Must return an *awaitable* resulting in a next value of the iterator.  "
"Should raise a :exc:`StopAsyncIteration` error when the iteration is over."
msgstr ""
"Deve retornar um *aguardável* resultando em um próximo valor do iterador. "
"Deve levantar um erro :exc:`StopAsyncIteration` quando a iteração terminar."

#: ../../reference/datamodel.rst:2744
msgid "An example of an asynchronous iterable object::"
msgstr "Um exemplo de objeto iterável assíncrono::"

#: ../../reference/datamodel.rst:2761
msgid ""
"Prior to Python 3.7, ``__aiter__`` could return an *awaitable* that would "
"resolve to an :term:`asynchronous iterator <asynchronous iterator>`."
msgstr ""
"Antes do Python 3.7, ``__aiter__`` poderia retornar um *aguardável* que "
"resolveria para um :term:`iterador assíncrono <asynchronous iterator>`."

#: ../../reference/datamodel.rst:2766
msgid ""
"Starting with Python 3.7, ``__aiter__`` must return an asynchronous iterator "
"object.  Returning anything else will result in a :exc:`TypeError` error."
msgstr ""
"A partir do Python 3.7, ``__aiter__`` deve retornar um objeto iterador "
"assíncrono. Retornar qualquer outra coisa resultará em um erro :exc:"
"`TypeError`."

#: ../../reference/datamodel.rst:2774
msgid "Asynchronous Context Managers"
msgstr "Gerenciadores de contexto assíncronos"

#: ../../reference/datamodel.rst:2776
msgid ""
"An *asynchronous context manager* is a *context manager* that is able to "
"suspend execution in its ``__aenter__`` and ``__aexit__`` methods."
msgstr ""
"Um *gerenciador de contexto assíncrono* é um *gerenciador de contexto* que é "
"capaz de suspender a execução em seus métodos ``__aenter__`` e ``__aexit__``."

#: ../../reference/datamodel.rst:2779
msgid ""
"Asynchronous context managers can be used in an :keyword:`async with` "
"statement."
msgstr ""
"Os gerenciadores de contexto assíncronos podem ser usados ​​em uma instrução :"
"keyword:`async with`."

#: ../../reference/datamodel.rst:2783
msgid ""
"Semantically similar to :meth:`__enter__`, the only difference being that it "
"must return an *awaitable*."
msgstr ""
"Semanticamente semelhante a :meth:`__enter__`, a única diferença é que ele "
"deve retornar um *aguardável*."

#: ../../reference/datamodel.rst:2788
msgid ""
"Semantically similar to :meth:`__exit__`, the only difference being that it "
"must return an *awaitable*."
msgstr ""
"Semanticamente semelhante a :meth:`__exit__`, a única diferença é que ele "
"deve retornar um *aguardável*."

#: ../../reference/datamodel.rst:2791
msgid "An example of an asynchronous context manager class::"
msgstr "Um exemplo de uma classe gerenciadora de contexto assíncrona::"

#: ../../reference/datamodel.rst:2804
msgid "Footnotes"
msgstr "Notas de rodapé"

#: ../../reference/datamodel.rst:2805
msgid ""
"It *is* possible in some cases to change an object's type, under certain "
"controlled conditions. It generally isn't a good idea though, since it can "
"lead to some very strange behaviour if it is handled incorrectly."
msgstr ""
"Em alguns casos, *é* possível alterar o tipo de um objeto, sob certas "
"condições controladas. No entanto, geralmente não é uma boa ideia, pois pode "
"levar a um comportamento muito estranho se for tratado incorretamente."

#: ../../reference/datamodel.rst:2809
msgid ""
"The :meth:`__hash__`, :meth:`__iter__`, :meth:`__reversed__`, and :meth:"
"`__contains__` methods have special handling for this; others will still "
"raise a :exc:`TypeError`, but may do so by relying on the behavior that "
"``None`` is not callable."
msgstr ""
"Os métodos :meth:`__hash__`, :meth:`__iter__`, :meth:`__reversed__` e :meth:"
"`__contains__` têm um tratamento especial para isso; outros ainda irão gerar "
"um :exc:`TypeError`, mas podem fazer isso contando com o comportamento de "
"que ``None`` não pode ser chamado."

#: ../../reference/datamodel.rst:2814
msgid ""
"\"Does not support\" here means that the class has no such method, or the "
"method returns ``NotImplemented``.  Do not set the method to ``None`` if you "
"want to force fallback to the right operand's reflected method—that will "
"instead have the opposite effect of explicitly *blocking* such fallback."
msgstr ""
"\"Não suportar\" aqui significa que a classe não possui tal método, ou o "
"método retorna ``NotImplemented``. Não defina o método como ``None`` se "
"quiser forçar o fallback para o método refletido do operando correto -- isso "
"terá o efeito oposto de *bloquear* explicitamente esse fallback."

#: ../../reference/datamodel.rst:2820
msgid ""
"For operands of the same type, it is assumed that if the non-reflected "
"method -- such as :meth:`__add__` -- fails then the overall operation is not "
"supported, which is why the reflected method is not called."
msgstr ""
"Para operandos do mesmo tipo, presume-se que se o método não refletido -- "
"como :meth:`__add__` -- falhar, a operação geral não será suportada, razão "
"pela qual o método refletido não é chamado."
