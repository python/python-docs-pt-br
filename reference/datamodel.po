# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Tiago Henrique <tiagohrm@gmail.com>, 2021
# Raphael Mendonça, 2021
# Welington Carlos <wcarlos3@gmail.com>, 2021
# Willian Lopes, 2021
# Paulo Candido, 2023
# Alexandre B A Villares, 2023
# Vinicius Gubiani Ferreira <vini.g.fer@gmail.com>, 2023
# Marco Rougeth <marco@rougeth.com>, 2023
# Ricardo Cappellano <rcappellano@gmail.com>, 2023
# felipe caridade fernandes <caridade500@gmail.com>, 2023
# Victor Matheus Castro <victormatheuscastro@gmail.com>, 2023
# Julia Rizza <contato@juliarizza.com>, 2023
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2023
# Vitor Buxbaum Orlandi, 2023
# Adorilson Bezerra <adorilson@gmail.com>, 2024
# Misael borges <misael@planosassessoria.com.br>, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-12-13 14:18+0000\n"
"PO-Revision-Date: 2021-06-28 01:19+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../reference/datamodel.rst:6
msgid "Data model"
msgstr "Modelo de dados"

#: ../../reference/datamodel.rst:12
msgid "Objects, values and types"
msgstr "Objetos, valores e tipos"

#: ../../reference/datamodel.rst:18
msgid ""
":dfn:`Objects` are Python's abstraction for data.  All data in a Python "
"program is represented by objects or by relations between objects. (In a "
"sense, and in conformance to Von Neumann's model of a \"stored program "
"computer\", code is also represented by objects.)"
msgstr ""
":dfn:`Objetos` são abstrações do Python para dados. Todos os dados em um "
"programa Python são representados por objetos ou por relações entre objetos. "
"(De certo modo, e em conformidade com o modelo de Von Neumann de um "
"\"computador com programa armazenado\", código também é representado por "
"objetos.)"

#: ../../reference/datamodel.rst:35
msgid ""
"Every object has an identity, a type and a value.  An object's *identity* "
"never changes once it has been created; you may think of it as the object's "
"address in memory.  The :keyword:`is` operator compares the identity of two "
"objects; the :func:`id` function returns an integer representing its "
"identity."
msgstr ""
"Todo objeto tem uma identidade, um tipo e um valor. A *identidade* de um "
"objeto nunca muda depois de criado; você pode pensar nisso como endereço de "
"objetos em memória. O operador :keyword:`is` compara as identidades de dois "
"objetos; a função :func:`id` retorna um inteiro representando sua identidade."

#: ../../reference/datamodel.rst:42
msgid "For CPython, ``id(x)`` is the memory address where ``x`` is stored."
msgstr ""
"Para CPython, ``id(x)`` é o endereço de memória em que ``x`` está armazenado."

#: ../../reference/datamodel.rst:44
msgid ""
"An object's type determines the operations that the object supports (e.g., "
"\"does it have a length?\") and also defines the possible values for objects "
"of that type.  The :func:`type` function returns an object's type (which is "
"an object itself).  Like its identity, an object's :dfn:`type` is also "
"unchangeable. [#]_"
msgstr ""
"O tipo de um objeto determina as operações que o objeto implementa (por "
"exemplo, \"ele tem um comprimento?\") e também define os valores possíveis "
"para objetos desse tipo. A função :func:`type` retorna o tipo de um objeto "
"(que é também um objeto). Como sua identidade, o :dfn:`tipo` do objeto "
"também é imutável. [#]_"

#: ../../reference/datamodel.rst:50
msgid ""
"The *value* of some objects can change.  Objects whose value can change are "
"said to be *mutable*; objects whose value is unchangeable once they are "
"created are called *immutable*. (The value of an immutable container object "
"that contains a reference to a mutable object can change when the latter's "
"value is changed; however the container is still considered immutable, "
"because the collection of objects it contains cannot be changed.  So, "
"immutability is not strictly the same as having an unchangeable value, it is "
"more subtle.) An object's mutability is determined by its type; for "
"instance, numbers, strings and tuples are immutable, while dictionaries and "
"lists are mutable."
msgstr ""
"O *valor* de alguns objetos pode mudar. Objetos cujos valores podem mudar "
"são descritos como *mutáveis*, objetos cujo valor não pode ser mudado uma "
"vez que foram criados são chamados *imutáveis*. (O valor de um objeto "
"contêiner imutável que contém uma referência a um objeto mutável pode mudar "
"quando o valor deste último for mudado; no entanto o contêiner é ainda assim "
"considerada imutável, pois a coleção de objetos que contém não pode ser "
"mudada. Então a imutabilidade não é estritamente o mesmo do que não haver "
"mudanças de valor, é mais sutil.) A mutabilidade de um objeto é determinada "
"pelo seu tipo; por exemplo, números, strings e tuplas são imutáveis, "
"enquanto dicionários e listas são mutáveis."

#: ../../reference/datamodel.rst:65
msgid ""
"Objects are never explicitly destroyed; however, when they become "
"unreachable they may be garbage-collected.  An implementation is allowed to "
"postpone garbage collection or omit it altogether --- it is a matter of "
"implementation quality how garbage collection is implemented, as long as no "
"objects are collected that are still reachable."
msgstr ""
"Os objetos nunca são destruídos explicitamente; no entanto, quando eles se "
"tornam inacessíveis, eles podem ser coletados como lixo. Uma implementação "
"tem permissão para adiar a coleta de lixo ou omiti-la completamente -- é uma "
"questão de detalhe de implementação como a coleta de lixo é implementada, "
"desde que nenhum objeto que ainda esteja acessível seja coletado."

#: ../../reference/datamodel.rst:73
msgid ""
"CPython currently uses a reference-counting scheme with (optional) delayed "
"detection of cyclically linked garbage, which collects most objects as soon "
"as they become unreachable, but is not guaranteed to collect garbage "
"containing circular references.  See the documentation of the :mod:`gc` "
"module for information on controlling the collection of cyclic garbage. "
"Other implementations act differently and CPython may change. Do not depend "
"on immediate finalization of objects when they become unreachable (so you "
"should always close files explicitly)."
msgstr ""
"CPython atualmente usa um esquema de contagem de referências com detecção "
"atrasada (opcional) de lixo ligado ciclicamente, que coleta a maioria dos "
"objetos assim que eles se tornam inacessíveis, mas não é garantido que "
"coletará lixo contendo referências circulares. Veja a documentação do "
"módulo :mod:`gc` para informações sobre como controlar a coleta de lixo "
"cíclico. Outras implementações agem de forma diferente e o CPython pode "
"mudar. Não dependa da finalização imediata dos objetos quando eles se "
"tornarem inacessíveis (isto é, você deve sempre fechar os arquivos "
"explicitamente)."

#: ../../reference/datamodel.rst:82
msgid ""
"Note that the use of the implementation's tracing or debugging facilities "
"may keep objects alive that would normally be collectable. Also note that "
"catching an exception with a :keyword:`try`...\\ :keyword:`except` statement "
"may keep objects alive."
msgstr ""
"Observe que o uso dos recursos de rastreamento ou depuração da implementação "
"pode manter os objetos ativos que normalmente seriam coletáveis. Observe "
"também que capturar uma exceção com uma instrução :keyword:`try`...\\ :"
"keyword:`except` pode manter os objetos vivos."

#: ../../reference/datamodel.rst:87
msgid ""
"Some objects contain references to \"external\" resources such as open files "
"or windows.  It is understood that these resources are freed when the object "
"is garbage-collected, but since garbage collection is not guaranteed to "
"happen, such objects also provide an explicit way to release the external "
"resource, usually a :meth:`!close` method. Programs are strongly recommended "
"to explicitly close such objects.  The :keyword:`try`...\\ :keyword:"
"`finally` statement and the :keyword:`with` statement provide convenient "
"ways to do this."
msgstr ""
"Alguns objetos contêm referências a recursos \"externos\", como arquivos "
"abertos ou janelas. Entende-se que esses recursos são liberados quando o "
"objeto é coletado como lixo, mas como a coleta de lixo não é garantida, tais "
"objetos também fornecem uma maneira explícita de liberar o recurso externo, "
"geralmente um método :meth:`!close`. Os programas são fortemente "
"recomendados para fechar explicitamente esses objetos. A instrução :keyword:"
"`try`...\\ :keyword:`finally` e a instrução :keyword:`with` fornecem "
"maneiras convenientes de fazer isso."

#: ../../reference/datamodel.rst:97
msgid ""
"Some objects contain references to other objects; these are called "
"*containers*. Examples of containers are tuples, lists and dictionaries.  "
"The references are part of a container's value.  In most cases, when we talk "
"about the value of a container, we imply the values, not the identities of "
"the contained objects; however, when we talk about the mutability of a "
"container, only the identities of the immediately contained objects are "
"implied.  So, if an immutable container (like a tuple) contains a reference "
"to a mutable object, its value changes if that mutable object is changed."
msgstr ""
"Alguns objetos contêm referências a outros objetos; eles são chamados de "
"*contêineres*. Exemplos de contêineres são tuplas, listas e dicionários. As "
"referências fazem parte do valor de um contêiner. Na maioria dos casos, "
"quando falamos sobre o valor de um contêiner, nos referimos aos valores, não "
"às identidades dos objetos contidos; entretanto, quando falamos sobre a "
"mutabilidade de um contêiner, apenas as identidades dos objetos contidos "
"imediatamente estão implícitas. Portanto, se um contêiner imutável (como uma "
"tupla) contém uma referência a um objeto mutável, seu valor muda se esse "
"objeto mutável for alterado."

#: ../../reference/datamodel.rst:106
msgid ""
"Types affect almost all aspects of object behavior.  Even the importance of "
"object identity is affected in some sense: for immutable types, operations "
"that compute new values may actually return a reference to any existing "
"object with the same type and value, while for mutable objects this is not "
"allowed. For example, after ``a = 1; b = 1``, *a* and *b* may or may not "
"refer to the same object with the value one, depending on the "
"implementation. This is because :class:`int` is an immutable type, so the "
"reference to ``1`` can be reused. This behaviour depends on the "
"implementation used, so should not be relied upon, but is something to be "
"aware of when making use of object identity tests. However, after ``c = []; "
"d = []``, *c* and *d* are guaranteed to refer to two different, unique, "
"newly created empty lists. (Note that ``e = f = []`` assigns the *same* "
"object to both *e* and *f*.)"
msgstr ""
"Os tipos afetam quase todos os aspectos do comportamento do objeto. Até "
"mesmo a importância da identidade do objeto é afetada em algum sentido: para "
"tipos imutáveis, as operações que calculam novos valores podem realmente "
"retornar uma referência a qualquer objeto existente com o mesmo tipo e "
"valor, enquanto para objetos mutáveis isso não é permitido. Por exemplo, "
"após ``a = 1; b = 1``, *a* e *b* podem ou não se referir ao mesmo objeto com "
"o valor um, dependendo da implementação. Isto ocorre porque :class:`int` é "
"um tipo imutável, então a referência a ``1`` pode ser reutilizada. Este "
"comportamento depende da implementação usada, então não deve ser considerada "
"confiável, mas é algo para se estar ciente ao fazer uso de testes de "
"identidade de objeto. No entanto, após ``c = []; d = []``, *c* e *d* têm a "
"garantia de referir-se a duas listas vazias diferentes e únicas. (Observe "
"que ``e = f = []`` atribui o *mesmo* objeto para *e* e *f*.)"

#: ../../reference/datamodel.rst:124
msgid "The standard type hierarchy"
msgstr "A hierarquia de tipos padrão"

#: ../../reference/datamodel.rst:133
msgid ""
"Below is a list of the types that are built into Python.  Extension modules "
"(written in C, Java, or other languages, depending on the implementation) "
"can define additional types.  Future versions of Python may add types to the "
"type hierarchy (e.g., rational numbers, efficiently stored arrays of "
"integers, etc.), although such additions will often be provided via the "
"standard library instead."
msgstr ""
"Abaixo está uma lista dos tipos que são embutidos no Python. Módulos de "
"extensão (escritos em C, Java ou outras linguagens, dependendo da "
"implementação) podem definir tipos adicionais. Versões futuras do Python "
"podem adicionar tipos à hierarquia de tipo (por exemplo, números racionais, "
"matrizes de inteiros armazenadas de forma eficiente, etc.), embora tais "
"adições sejam frequentemente fornecidas por meio da biblioteca padrão."

#: ../../reference/datamodel.rst:144
msgid ""
"Some of the type descriptions below contain a paragraph listing 'special "
"attributes.'  These are attributes that provide access to the implementation "
"and are not intended for general use.  Their definition may change in the "
"future."
msgstr ""
"Algumas das descrições de tipo abaixo contêm um parágrafo listando "
"\"atributos especiais\". Esses são atributos que fornecem acesso à "
"implementação e não se destinam ao uso geral. Sua definição pode mudar no "
"futuro."

#: ../../reference/datamodel.rst:150 ../../reference/datamodel.rst:152
msgid "None"
msgstr "None"

#: ../../reference/datamodel.rst:154
msgid ""
"This type has a single value.  There is a single object with this value. "
"This object is accessed through the built-in name ``None``. It is used to "
"signify the absence of a value in many situations, e.g., it is returned from "
"functions that don't explicitly return anything. Its truth value is false."
msgstr ""
"Este tipo possui um único valor. Existe um único objeto com este valor. Este "
"objeto é acessado através do nome embutido ``None``. É usado para significar "
"a ausência de um valor em muitas situações, por exemplo, ele é retornado de "
"funções que não retornam nada explicitamente. Seu valor verdade é falso."

#: ../../reference/datamodel.rst:161 ../../reference/datamodel.rst:163
msgid "NotImplemented"
msgstr "NotImplemented"

#: ../../reference/datamodel.rst:165
msgid ""
"This type has a single value.  There is a single object with this value. "
"This object is accessed through the built-in name :data:`NotImplemented`. "
"Numeric methods and rich comparison methods should return this value if they "
"do not implement the operation for the operands provided.  (The interpreter "
"will then try the reflected operation, or some other fallback, depending on "
"the operator.)  It should not be evaluated in a boolean context."
msgstr ""
"Este tipo possui um único valor. Existe um único objeto com este valor. Este "
"objeto é acessado através do nome embutido :data:`NotImplemented`. Os "
"métodos numéricos e métodos de comparação rica devem retornar esse valor se "
"não implementarem a operação para os operandos fornecidos. (O interpretador "
"tentará então a operação refletida ou alguma outra alternativa, dependendo "
"do operador.) Não deve ser avaliado em um contexto booleano."

#: ../../reference/datamodel.rst:172
msgid "See :ref:`implementing-the-arithmetic-operations` for more details."
msgstr ""
"Veja a documentação :ref:`implementing-the-arithmetic-operations` para mais "
"detalhes."

#: ../../reference/datamodel.rst:176
msgid ""
"Evaluating :data:`NotImplemented` in a boolean context is deprecated. While "
"it currently evaluates as true, it will emit a :exc:`DeprecationWarning`. It "
"will raise a :exc:`TypeError` in a future version of Python."
msgstr ""
"A avaliação de :data:`NotImplemented` em um contexto booleano foi "
"descontinuada. Embora atualmente seja avaliada como verdadeiro, é emitida "
"uma exceção :exc:`DeprecationWarning`. Levantará uma :exc:`TypeError` em uma "
"versão futura do Python."

#: ../../reference/datamodel.rst:183 ../../reference/datamodel.rst:184
msgid "Ellipsis"
msgstr "Ellipsis"

#: ../../reference/datamodel.rst:188
msgid ""
"This type has a single value.  There is a single object with this value. "
"This object is accessed through the literal ``...`` or the built-in name "
"``Ellipsis``.  Its truth value is true."
msgstr ""
"Este tipo possui um único valor. Existe um único objeto com este valor. Este "
"objeto é acessado através do literal ``...`` ou do nome embutido "
"``Ellipsis`` (reticências). Seu valor verdade é verdadeiro."

#: ../../reference/datamodel.rst:194
msgid ":class:`numbers.Number`"
msgstr ":class:`numbers.Number`"

#: ../../reference/datamodel.rst:198
msgid ""
"These are created by numeric literals and returned as results by arithmetic "
"operators and arithmetic built-in functions.  Numeric objects are immutable; "
"once created their value never changes.  Python numbers are of course "
"strongly related to mathematical numbers, but subject to the limitations of "
"numerical representation in computers."
msgstr ""
"Esses são criados por literais numéricos e retornados como resultados por "
"operadores aritméticos e funções aritméticas embutidas. Os objetos numéricos "
"são imutáveis; uma vez criado, seu valor nunca muda. Os números do Python "
"são, obviamente, fortemente relacionados aos números matemáticos, mas "
"sujeitos às limitações da representação numérica em computadores."

#: ../../reference/datamodel.rst:204
msgid ""
"The string representations of the numeric classes, computed by :meth:"
"`~object.__repr__` and :meth:`~object.__str__`, have the following "
"properties:"
msgstr ""
"As representações de string das classes numéricas, calculadas por :meth:"
"`~object.__repr__` e :meth:`~object.__str__`, têm as seguintes propriedades:"

#: ../../reference/datamodel.rst:208
msgid ""
"They are valid numeric literals which, when passed to their class "
"constructor, produce an object having the value of the original numeric."
msgstr ""
"Elas são literais numéricos válidos que, quando passados para seu construtor "
"de classe, produzem um objeto com o valor do numérico original."

#: ../../reference/datamodel.rst:212
msgid "The representation is in base 10, when possible."
msgstr "A representação está na base 10, quando possível."

#: ../../reference/datamodel.rst:214
msgid ""
"Leading zeros, possibly excepting a single zero before a decimal point, are "
"not shown."
msgstr ""
"Os zeros à esquerda, possivelmente com exceção de um único zero antes de um "
"ponto decimal, não são mostrados."

#: ../../reference/datamodel.rst:217
msgid ""
"Trailing zeros, possibly excepting a single zero after a decimal point, are "
"not shown."
msgstr ""
"Os zeros à direita, possivelmente com exceção de um único zero após um ponto "
"decimal, não são mostrados."

#: ../../reference/datamodel.rst:220
msgid "A sign is shown only when the number is negative."
msgstr "Um sinal é mostrado apenas quando o número é negativo."

#: ../../reference/datamodel.rst:222
msgid ""
"Python distinguishes between integers, floating-point numbers, and complex "
"numbers:"
msgstr ""
"Python distingue entre inteiros, números de ponto flutuante e números "
"complexos:"

#: ../../reference/datamodel.rst:227
msgid ":class:`numbers.Integral`"
msgstr ":class:`numbers.Integral`"

#: ../../reference/datamodel.rst:231
msgid ""
"These represent elements from the mathematical set of integers (positive and "
"negative)."
msgstr ""
"Estes representam elementos do conjunto matemático de inteiros (positivos e "
"negativos)."

#: ../../reference/datamodel.rst:237
msgid ""
"The rules for integer representation are intended to give the most "
"meaningful interpretation of shift and mask operations involving negative "
"integers."
msgstr ""
"As regras para representação de inteiros têm como objetivo fornecer a "
"interpretação mais significativa das operações de deslocamento e máscara "
"envolvendo inteiros negativos."

#: ../../reference/datamodel.rst:240
msgid "There are two types of integers:"
msgstr "Existem dois tipos de inteiros:"

#: ../../reference/datamodel.rst:242
msgid "Integers (:class:`int`)"
msgstr "Inteiros (:class:`int`)"

#: ../../reference/datamodel.rst:243
msgid ""
"These represent numbers in an unlimited range, subject to available "
"(virtual) memory only.  For the purpose of shift and mask operations, a "
"binary representation is assumed, and negative numbers are represented in a "
"variant of 2's complement which gives the illusion of an infinite string of "
"sign bits extending to the left."
msgstr ""
"Estes representam números em um intervalo ilimitado, sujeito apenas à "
"memória (virtual) disponível. Para o propósito de operações de deslocamento "
"e máscara, uma representação binária é presumida e os números negativos são "
"representados em uma variante do complemento de 2 que dá a ilusão de uma "
"string infinita de bits de sinal estendendo-se para a esquerda."

#: ../../reference/datamodel.rst:249
msgid "Booleans (:class:`bool`)"
msgstr "Booleanos (:class:`bool`)"

#: ../../reference/datamodel.rst:255
msgid ""
"These represent the truth values False and True.  The two objects "
"representing the values ``False`` and ``True`` are the only Boolean objects. "
"The Boolean type is a subtype of the integer type, and Boolean values behave "
"like the values 0 and 1, respectively, in almost all contexts, the exception "
"being that when converted to a string, the strings ``\"False\"`` or "
"``\"True\"`` are returned, respectively."
msgstr ""
"Estes representam os valores da verdade Falsos e Verdadeiros. Os dois "
"objetos que representam os valores ``False`` e ``True`` são os únicos "
"objetos booleanos. O tipo booleano é um subtipo do tipo inteiro, e os "
"valores booleanos se comportam como os valores 0 e 1, respectivamente, em "
"quase todos os contextos, com exceção de que, quando convertidos em uma "
"string, as strings ``\"False\"`` ou ``\"True\"`` são retornados, "
"respectivamente."

#: ../../reference/datamodel.rst:263
msgid ":class:`numbers.Real` (:class:`float`)"
msgstr ":class:`numbers.Real` (:class:`float`)"

#: ../../reference/datamodel.rst:271
msgid ""
"These represent machine-level double precision floating-point numbers. You "
"are at the mercy of the underlying machine architecture (and C or Java "
"implementation) for the accepted range and handling of overflow. Python does "
"not support single-precision floating-point numbers; the savings in "
"processor and memory usage that are usually the reason for using these are "
"dwarfed by the overhead of using objects in Python, so there is no reason to "
"complicate the language with two kinds of floating-point numbers."
msgstr ""
"Estes representam números de ponto flutuante de precisão dupla no nível da "
"máquina. Você está à mercê da arquitetura da máquina subjacente (e "
"implementação C ou Java) para o intervalo aceito e tratamento de estouro. "
"Python não oferece suporte a números de ponto flutuante de precisão única; a "
"economia no uso do processador e da memória, que normalmente é o motivo de "
"usá-los, é ofuscada pela sobrecarga do uso de objetos em Python, portanto, "
"não há razão para complicar a linguagem com dois tipos de números de ponto "
"flutuante."

#: ../../reference/datamodel.rst:281
msgid ":class:`numbers.Complex` (:class:`complex`)"
msgstr ":class:`numbers.Complex` (:class:`complex`)"

#: ../../reference/datamodel.rst:287
msgid ""
"These represent complex numbers as a pair of machine-level double precision "
"floating-point numbers.  The same caveats apply as for floating-point "
"numbers. The real and imaginary parts of a complex number ``z`` can be "
"retrieved through the read-only attributes ``z.real`` and ``z.imag``."
msgstr ""
"Estes representam números complexos como um par de números de ponto "
"flutuante de precisão dupla no nível da máquina. As mesmas advertências se "
"aplicam aos números de ponto flutuante. As partes reais e imaginárias de um "
"número complexo ``z`` podem ser obtidas através dos atributos somente "
"leitura ``z.real`` e ``z.imag``."

#: ../../reference/datamodel.rst:294
msgid "Sequences"
msgstr "Sequências"

#: ../../reference/datamodel.rst:303
msgid ""
"These represent finite ordered sets indexed by non-negative numbers. The "
"built-in function :func:`len` returns the number of items of a sequence. "
"When the length of a sequence is *n*, the index set contains the numbers 0, "
"1, ..., *n*-1.  Item *i* of sequence *a* is selected by ``a[i]``. Some "
"sequences, including built-in sequences, interpret negative subscripts by "
"adding the sequence length. For example, ``a[-2]`` equals ``a[n-2]``, the "
"second to last item of sequence a with length ``n``."
msgstr ""
"Estes representam conjuntos ordenados finitos indexados por números não "
"negativos. A função embutida :func:`len` retorna o número de itens de uma "
"sequência. Quando o comprimento de uma sequência é *n*, o conjunto de "
"índices contém os números 0, 1, ..., *n*-1. O item *i* da sequência *a* é "
"selecionado por ``a[i]``. Algumas sequências, incluindo sequências "
"embutidas, interpretam subscritos negativos adicionando o comprimento da "
"sequência. Por exemplo, ``a[-2]`` é igual a ``a[n-2]``, o penúltimo item da "
"sequência a com comprimento ``n``."

#: ../../reference/datamodel.rst:313
msgid ""
"Sequences also support slicing: ``a[i:j]`` selects all items with index *k* "
"such that *i* ``<=`` *k* ``<`` *j*.  When used as an expression, a slice is "
"a sequence of the same type. The comment above about negative indexes also "
"applies to negative slice positions."
msgstr ""
"Sequências também provê fatiamento: ``a[i:j]`` seleciona todos os itens com "
"índice *k* de forma que *i* ``<=`` *k* ``<`` *j*. Quando usada como "
"expressão, uma fatia é uma sequência do mesmo tipo. O comentário acima sobre "
"índices negativos também se aplica a posições de fatias negativas."

#: ../../reference/datamodel.rst:318
msgid ""
"Some sequences also support \"extended slicing\" with a third \"step\" "
"parameter: ``a[i:j:k]`` selects all items of *a* with index *x* where ``x = "
"i + n*k``, *n* ``>=`` ``0`` and *i* ``<=`` *x* ``<`` *j*."
msgstr ""
"Algumas sequências também suportam \"fatiamento estendido\" com um terceiro "
"parâmetro de \"etapa\": ``a[i:j:k]`` seleciona todos os itens de *a* com "
"índice *x* onde ``x = i + n*k``, *n* ``>=`` ``0`` e *i* ``<=`` *x* ``<`` *j*."

#: ../../reference/datamodel.rst:322
msgid "Sequences are distinguished according to their mutability:"
msgstr "As sequências são distinguidas de acordo com sua mutabilidade:"

#: ../../reference/datamodel.rst:326
msgid "Immutable sequences"
msgstr "Sequências imutáveis"

#: ../../reference/datamodel.rst:332
msgid ""
"An object of an immutable sequence type cannot change once it is created.  "
"(If the object contains references to other objects, these other objects may "
"be mutable and may be changed; however, the collection of objects directly "
"referenced by an immutable object cannot change.)"
msgstr ""
"Um objeto de um tipo de sequência imutável não pode ser alterado depois de "
"criado. (Se o objeto contiver referências a outros objetos, esses outros "
"objetos podem ser mutáveis e podem ser alterados; no entanto, a coleção de "
"objetos diretamente referenciada por um objeto imutável não pode ser "
"alterada.)"

#: ../../reference/datamodel.rst:337
msgid "The following types are immutable sequences:"
msgstr "Os tipos a seguir são sequências imutáveis:"

#: ../../reference/datamodel.rst:342
msgid "Strings"
msgstr "Strings"

#: ../../reference/datamodel.rst:350
msgid ""
"A string is a sequence of values that represent Unicode code points. All the "
"code points in the range ``U+0000 - U+10FFFF`` can be represented in a "
"string.  Python doesn't have a :c:expr:`char` type; instead, every code "
"point in the string is represented as a string object with length ``1``.  "
"The built-in function :func:`ord` converts a code point from its string form "
"to an integer in the range ``0 - 10FFFF``; :func:`chr` converts an integer "
"in the range ``0 - 10FFFF`` to the corresponding length ``1`` string "
"object. :meth:`str.encode` can be used to convert a :class:`str` to :class:"
"`bytes` using the given text encoding, and :meth:`bytes.decode` can be used "
"to achieve the opposite."
msgstr ""
"Uma string é uma sequência de valores que representam pontos de código "
"Unicode. Todos os pontos de código no intervalo ``U+0000 - U+10FFFF`` podem "
"ser representados em uma string. Python não tem um tipo :c:expr:`char`; em "
"vez disso, cada ponto de código na string é representado como um objeto "
"string com comprimento ``1``. A função embutida :func:`ord` converte um "
"ponto de código de sua forma de string para um inteiro no intervalo ``0 - "
"10FFFF``; :func:`chr` converte um inteiro no intervalo ``0 - 10FFFF`` para o "
"objeto de string correspondente de comprimento ``1``. :meth:`str.encode` "
"pode ser usado para converter uma :class:`str` para :class:`bytes` usando a "
"codificação de texto fornecida, e :meth:`bytes.decode` pode ser usado para "
"conseguir o oposto."

#: ../../reference/datamodel.rst:362
msgid "Tuples"
msgstr "Tuplas"

#: ../../reference/datamodel.rst:368
msgid ""
"The items of a tuple are arbitrary Python objects. Tuples of two or more "
"items are formed by comma-separated lists of expressions.  A tuple of one "
"item (a 'singleton') can be formed by affixing a comma to an expression (an "
"expression by itself does not create a tuple, since parentheses must be "
"usable for grouping of expressions).  An empty tuple can be formed by an "
"empty pair of parentheses."
msgstr ""
"Os itens de uma tupla são objetos Python arbitrários. Tuplas de dois ou mais "
"itens são formadas por listas de expressões separadas por vírgulas. Uma "
"tupla de um item (um \"singleton\") pode ser formada afixando uma vírgula a "
"uma expressão (uma expressão por si só não cria uma tupla, já que os "
"parênteses devem ser usados para agrupamento de expressões). Uma tupla vazia "
"pode ser formada por um par vazio de parênteses."

#: ../../reference/datamodel.rst:375
msgid "Bytes"
msgstr "Bytes"

#: ../../reference/datamodel.rst:378
msgid ""
"A bytes object is an immutable array.  The items are 8-bit bytes, "
"represented by integers in the range 0 <= x < 256.  Bytes literals (like "
"``b'abc'``) and the built-in :func:`bytes` constructor can be used to create "
"bytes objects.  Also, bytes objects can be decoded to strings via the :meth:"
"`~bytes.decode` method."
msgstr ""
"Um objeto bytes é um vetor imutável. Os itens são bytes de 8 bits, "
"representados por inteiros no intervalo 0 <= x < 256. Literais de bytes "
"(como ``b'abc'``) e o construtor embutido :func:`bytes` podem ser usados "
"para criar objetos bytes. Além disso, os objetos bytes podem ser "
"decodificados em strings através do método :meth:`~bytes.decode`."

#: ../../reference/datamodel.rst:386
msgid "Mutable sequences"
msgstr "Sequências mutáveis"

#: ../../reference/datamodel.rst:395
msgid ""
"Mutable sequences can be changed after they are created.  The subscription "
"and slicing notations can be used as the target of assignment and :keyword:"
"`del` (delete) statements."
msgstr ""
"As sequências mutáveis podem ser alteradas após serem criadas. As notações "
"de subscrição e fatiamento podem ser usadas como o destino da atribuição e "
"instruções :keyword:`del` (*delete*, exclusão)."

#: ../../reference/datamodel.rst:403
msgid ""
"The :mod:`collections` and :mod:`array` module provide additional examples "
"of mutable sequence types."
msgstr ""
"Os módulos :mod:`collections` e :mod:`array` fornecem exemplos adicionais de "
"tipos de sequência mutáveis."

#: ../../reference/datamodel.rst:406
msgid "There are currently two intrinsic mutable sequence types:"
msgstr "Atualmente, existem dois tipos de sequência mutável intrínseca:"

#: ../../reference/datamodel.rst:408
msgid "Lists"
msgstr "Listas"

#: ../../reference/datamodel.rst:411
msgid ""
"The items of a list are arbitrary Python objects.  Lists are formed by "
"placing a comma-separated list of expressions in square brackets. (Note that "
"there are no special cases needed to form lists of length 0 or 1.)"
msgstr ""
"Os itens de uma lista são objetos Python arbitrários. As listas são formadas "
"colocando uma lista de expressões separada por vírgulas entre colchetes. "
"(Observe que não há casos especiais necessários para formar listas de "
"comprimento 0 ou 1.)"

#: ../../reference/datamodel.rst:415
msgid "Byte Arrays"
msgstr "Vetores de bytes"

#: ../../reference/datamodel.rst:418
msgid ""
"A bytearray object is a mutable array. They are created by the built-in :"
"func:`bytearray` constructor.  Aside from being mutable (and hence "
"unhashable), byte arrays otherwise provide the same interface and "
"functionality as immutable :class:`bytes` objects."
msgstr ""
"Um objeto bytearray é um vetor mutável. Eles são criados pelo construtor "
"embutido :func:`bytearray`. Além de serem mutáveis (e, portanto, não-"
"hasheável), os vetores de bytes fornecem a mesma interface e funcionalidade "
"que os objetos imutáveis :class:`bytes`."

#: ../../reference/datamodel.rst:425
msgid "Set types"
msgstr "Tipos de conjuntos"

#: ../../reference/datamodel.rst:431
msgid ""
"These represent unordered, finite sets of unique, immutable objects. As "
"such, they cannot be indexed by any subscript. However, they can be iterated "
"over, and the built-in function :func:`len` returns the number of items in a "
"set. Common uses for sets are fast membership testing, removing duplicates "
"from a sequence, and computing mathematical operations such as intersection, "
"union, difference, and symmetric difference."
msgstr ""
"Estes representam conjuntos finitos e não ordenados de objetos únicos e "
"imutáveis. Como tal, eles não podem ser indexados por nenhum subscrito. No "
"entanto, eles podem ser iterados, e a função embutida :func:`len` retorna o "
"número de itens em um conjunto. Os usos comuns para conjuntos são testes "
"rápidos de associação, remoção de duplicatas de uma sequência e computação "
"de operações matemáticas como interseção, união, diferença e diferença "
"simétrica."

#: ../../reference/datamodel.rst:438
msgid ""
"For set elements, the same immutability rules apply as for dictionary keys. "
"Note that numeric types obey the normal rules for numeric comparison: if two "
"numbers compare equal (e.g., ``1`` and ``1.0``), only one of them can be "
"contained in a set."
msgstr ""
"Para elementos de conjunto, as mesmas regras de imutabilidade se aplicam às "
"chaves de dicionário. Observe que os tipos numéricos obedecem às regras "
"normais para comparação numérica: se dois números forem iguais (por exemplo, "
"``1`` e ``1.0``), apenas um deles pode estar contido em um conjunto."

#: ../../reference/datamodel.rst:443
msgid "There are currently two intrinsic set types:"
msgstr "Atualmente, existem dois tipos de conjuntos intrínsecos:"

#: ../../reference/datamodel.rst:446
msgid "Sets"
msgstr "Conjuntos"

#: ../../reference/datamodel.rst:449
msgid ""
"These represent a mutable set. They are created by the built-in :func:`set` "
"constructor and can be modified afterwards by several methods, such as :meth:"
"`~set.add`."
msgstr ""
"Estes representam um conjunto mutável. Eles são criados pelo construtor "
"embutido :func:`set` e podem ser modificados posteriormente por vários "
"métodos, como :meth:`~set.add`."

#: ../../reference/datamodel.rst:454
msgid "Frozen sets"
msgstr "Conjuntos congelados"

#: ../../reference/datamodel.rst:457
msgid ""
"These represent an immutable set.  They are created by the built-in :func:"
"`frozenset` constructor.  As a frozenset is immutable and :term:`hashable`, "
"it can be used again as an element of another set, or as a dictionary key."
msgstr ""
"Estes representam um conjunto imutável. Eles são criados pelo construtor "
"embutido :func:`frozenset`. Como um frozenset é imutável e :term:`hasheável "
"<hashable>`, ele pode ser usado novamente como um elemento de outro "
"conjunto, ou como uma chave de dicionário."

#: ../../reference/datamodel.rst:464
msgid "Mappings"
msgstr "Mapeamentos"

#: ../../reference/datamodel.rst:471
msgid ""
"These represent finite sets of objects indexed by arbitrary index sets. The "
"subscript notation ``a[k]`` selects the item indexed by ``k`` from the "
"mapping ``a``; this can be used in expressions and as the target of "
"assignments or :keyword:`del` statements. The built-in function :func:`len` "
"returns the number of items in a mapping."
msgstr ""
"Eles representam conjuntos finitos de objetos indexados por conjuntos de "
"índices arbitrários. A notação subscrito ``a[k]`` seleciona o item indexado "
"por ``k`` do mapeamento ``a``; isso pode ser usado em expressões e como alvo "
"de atribuições ou instruções :keyword:`del`. A função embutida :func:`len` "
"retorna o número de itens em um mapeamento."

#: ../../reference/datamodel.rst:477
msgid "There is currently a single intrinsic mapping type:"
msgstr "Atualmente, há um único tipo de mapeamento intrínseco:"

#: ../../reference/datamodel.rst:481
msgid "Dictionaries"
msgstr "Dicionários"

#: ../../reference/datamodel.rst:485
msgid ""
"These represent finite sets of objects indexed by nearly arbitrary values.  "
"The only types of values not acceptable as keys are values containing lists "
"or dictionaries or other mutable types that are compared by value rather "
"than by object identity, the reason being that the efficient implementation "
"of dictionaries requires a key's hash value to remain constant. Numeric "
"types used for keys obey the normal rules for numeric comparison: if two "
"numbers compare equal (e.g., ``1`` and ``1.0``) then they can be used "
"interchangeably to index the same dictionary entry."
msgstr ""
"Eles representam conjuntos finitos de objetos indexados por valores quase "
"arbitrários. Os únicos tipos de valores não aceitáveis como chaves são os "
"valores que contêm listas ou dicionários ou outros tipos mutáveis que são "
"comparados por valor em vez de por identidade de objeto, o motivo é que a "
"implementação eficiente de dicionários requer que o valor de hash de uma "
"chave permaneça constante. Os tipos numéricos usados para chaves obedecem às "
"regras normais para comparação numérica: se dois números forem iguais (por "
"exemplo, ``1`` e ``1.0``), eles podem ser usados alternadamente para indexar "
"a mesma entrada do dicionário."

#: ../../reference/datamodel.rst:494
msgid ""
"Dictionaries preserve insertion order, meaning that keys will be produced in "
"the same order they were added sequentially over the dictionary. Replacing "
"an existing key does not change the order, however removing a key and re-"
"inserting it will add it to the end instead of keeping its old place."
msgstr ""
"Dicionários preservam a ordem de inserção, o que significa que as chaves "
"serão produzidas na mesma ordem em que foram adicionadas sequencialmente no "
"dicionário. Substituir uma chave existente não altera a ordem, no entanto, "
"remover uma chave e inseri-la novamente irá adicioná-la ao final em vez de "
"manter seu lugar anterior."

#: ../../reference/datamodel.rst:499
msgid ""
"Dictionaries are mutable; they can be created by the ``{}`` notation (see "
"section :ref:`dict`)."
msgstr ""
"Os dicionários são mutáveis; eles podem ser criados pela notação ``{}`` "
"(veja a seção :ref:`dict`)."

#: ../../reference/datamodel.rst:506
msgid ""
"The extension modules :mod:`dbm.ndbm` and :mod:`dbm.gnu` provide additional "
"examples of mapping types, as does the :mod:`collections` module."
msgstr ""
"Os módulos de extensão :mod:`dbm.ndbm` e :mod:`dbm.gnu` fornecem exemplos "
"adicionais de tipos de mapeamento, assim como o módulo :mod:`collections`."

#: ../../reference/datamodel.rst:510
msgid ""
"Dictionaries did not preserve insertion order in versions of Python before "
"3.6. In CPython 3.6, insertion order was preserved, but it was considered an "
"implementation detail at that time rather than a language guarantee."
msgstr ""
"Dicionários não preservavam a ordem de inserção nas versões do Python "
"anteriores à 3.6. No CPython 3.6, a ordem de inserção foi preservada, mas "
"foi considerada um detalhe de implementação naquela época, em vez de uma "
"garantia da linguagem."

#: ../../reference/datamodel.rst:517
msgid "Callable types"
msgstr "Tipos chamáveis"

#: ../../reference/datamodel.rst:525
msgid ""
"These are the types to which the function call operation (see section :ref:"
"`calls`) can be applied:"
msgstr ""
"Estes são os tipos aos quais a operação de chamada de função (veja a seção :"
"ref:`calls`) pode ser aplicada:"

#: ../../reference/datamodel.rst:532
msgid "User-defined functions"
msgstr "Funções definidas pelo usuário"

#: ../../reference/datamodel.rst:539
msgid ""
"A user-defined function object is created by a function definition (see "
"section :ref:`function`).  It should be called with an argument list "
"containing the same number of items as the function's formal parameter list."
msgstr ""
"Um objeto função definido pelo usuário será criado pela definição de função "
"(veja a seção :ref:`function`). A mesma deverá ser invocada com uma lista de "
"argumentos contendo o mesmo número de itens que a lista de parâmetros "
"formais da função."

#: ../../reference/datamodel.rst:545 ../../reference/datamodel.rst:1395
#: ../../reference/datamodel.rst:1596
msgid "Special read-only attributes"
msgstr "Atributos especiais de somente leitura"

#: ../../reference/datamodel.rst:555 ../../reference/datamodel.rst:590
#: ../../reference/datamodel.rst:1170
msgid "Attribute"
msgstr "Atributo"

#: ../../reference/datamodel.rst:556 ../../reference/datamodel.rst:591
#: ../../reference/datamodel.rst:1171
msgid "Meaning"
msgstr "Significado"

#: ../../reference/datamodel.rst:559
msgid ""
"A reference to the :class:`dictionary <dict>` that holds the function's :ref:"
"`global variables <naming>` -- the global namespace of the module in which "
"the function was defined."
msgstr ""
"Uma referência ao :class:`dicionário <dict>` que contém as :ref:`variáveis "
"globais <naming>` da função -- o espaço de nomes global do módulo no qual a "
"função foi definida."

#: ../../reference/datamodel.rst:564
msgid ""
"``None`` or a :class:`tuple` of cells that contain bindings for the names "
"specified in the :attr:`~codeobject.co_freevars` attribute of the "
"function's :attr:`code object <function.__code__>`."
msgstr ""
"``None`` ou uma :class:`tuple` de células que contêm ligação para os nomes "
"especificados no atributo :attr:`~codeobject.co_freevars` do :attr:`objeto "
"código <function.__code__>` da função."

#: ../../reference/datamodel.rst:568
msgid ""
"A cell object has the attribute ``cell_contents``. This can be used to get "
"the value of the cell, as well as set the value."
msgstr ""
"Um objeto de célula tem o atributo ``cell_contents``. Isso pode ser usado "
"para obter o valor da célula, bem como definir o valor."

#: ../../reference/datamodel.rst:572 ../../reference/datamodel.rst:1638
msgid "Special writable attributes"
msgstr "Atributos especiais graváveis"

#: ../../reference/datamodel.rst:585
msgid "Most of these attributes check the type of the assigned value:"
msgstr "A maioria desses atributos verifica o tipo do valor atribuído:"

#: ../../reference/datamodel.rst:594
msgid "The function's documentation string, or ``None`` if unavailable."
msgstr "A string de documentação da função, ou ``None`` se indisponível."

#: ../../reference/datamodel.rst:597
msgid ""
"The function's name. See also: :attr:`__name__ attributes <definition."
"__name__>`."
msgstr ""
"O nome da função. Veja também: :attr:`atributos __name__ <definition."
"__name__>`."

#: ../../reference/datamodel.rst:601
msgid ""
"The function's :term:`qualified name`. See also: :attr:`__qualname__ "
"attributes <definition.__qualname__>`."
msgstr ""
"O :term:`nome qualificado` da função. Veja também: :attr:`atributos "
"__qualname__ <definition.__qualname__>`."

#: ../../reference/datamodel.rst:607
msgid ""
"The name of the module the function was defined in, or ``None`` if "
"unavailable."
msgstr ""
"O nome do módulo em que a função foi definida ou ``None`` se indisponível."

#: ../../reference/datamodel.rst:611
msgid ""
"A :class:`tuple` containing default :term:`parameter` values for those "
"parameters that have defaults, or ``None`` if no parameters have a default "
"value."
msgstr ""
"Uma :class:`tuple` contendo valores de :term:`parâmetro` padrão para aqueles "
"parâmetros que possuem padrões, ou ``None`` se nenhum parâmetro tiver um "
"valor padrão."

#: ../../reference/datamodel.rst:616
msgid ""
"The :ref:`code object <code-objects>` representing the compiled function "
"body."
msgstr ""
"O :ref:`objeto código <code-objects>` que representa o corpo da função "
"compilada."

#: ../../reference/datamodel.rst:620
msgid ""
"The namespace supporting arbitrary function attributes. See also: :attr:"
"`__dict__ attributes <object.__dict__>`."
msgstr ""
"O espaço de nomes que provvê atributos de função arbitrários. Veja também: :"
"attr:`atributos __dict__ <object.__dict__>`."

#: ../../reference/datamodel.rst:624
msgid ""
"A :class:`dictionary <dict>` containing annotations of :term:`parameters "
"<parameter>`. The keys of the dictionary are the parameter names, and "
"``'return'`` for the return annotation, if provided. See also: :ref:"
"`annotations-howto`."
msgstr ""
"Um :class:`dicionário <dict>` contendo anotações de :term:`parâmetros "
"<parâmetro>`. As chaves do dicionário são os nomes dos parâmetros e "
"``'return'`` para a anotação de retorno, se fornecida. Veja também: :ref:"
"`annotations-howto`."

#: ../../reference/datamodel.rst:631
msgid ""
"A :class:`dictionary <dict>` containing defaults for keyword-only :term:"
"`parameters <parameter>`."
msgstr ""
"Um :class:`dicionário <dict>` contendo padrões apenas para :term:`parâmetros "
"<parâmetro>` somente-nomeados."

#: ../../reference/datamodel.rst:635
msgid ""
"A :class:`tuple` containing the :ref:`type parameters <type-params>` of a :"
"ref:`generic function <generic-functions>`."
msgstr ""
"Uma :class:`tuple` contendo os :ref:`parâmetros de tipo <type-params>` de "
"uma :ref:`função genérica <generic-functions>`."

#: ../../reference/datamodel.rst:640
msgid ""
"Function objects also support getting and setting arbitrary attributes, "
"which can be used, for example, to attach metadata to functions.  Regular "
"attribute dot-notation is used to get and set such attributes."
msgstr ""
"Os objetos de função também dão suporte à obtenção e definição de atributos "
"arbitrários, que podem ser usados, por exemplo, para anexar metadados a "
"funções. A notação de ponto de atributo regular é usada para obter e definir "
"tais atributos."

#: ../../reference/datamodel.rst:646
msgid ""
"CPython's current implementation only supports function attributes on user-"
"defined functions. Function attributes on :ref:`built-in functions <builtin-"
"functions>` may be supported in the future."
msgstr ""
"A implementação atual do CPython provê apenas atributos de função em funções "
"definidas pelo usuário. Atributos de função em :ref:`funções embutido "
"<builtin-functions>` podem ser suportados no futuro."

#: ../../reference/datamodel.rst:651
msgid ""
"Additional information about a function's definition can be retrieved from "
"its :ref:`code object <code-objects>` (accessible via the :attr:`~function."
"__code__` attribute)."
msgstr ""
"Informações adicionais sobre a definição de uma função podem ser obtidas de "
"seu :ref:`objeto código <code-objects>` (acessível através do atributo :attr:"
"`~function.__code__`)."

#: ../../reference/datamodel.rst:659
msgid "Instance methods"
msgstr "Métodos de instância"

#: ../../reference/datamodel.rst:666
msgid ""
"An instance method object combines a class, a class instance and any "
"callable object (normally a user-defined function)."
msgstr ""
"Um objeto método de instância combina uma classe, uma instância de classe e "
"qualquer objeto chamável (normalmente uma função definida pelo usuário)."

#: ../../reference/datamodel.rst:676 ../../reference/datamodel.rst:1734
msgid "Special read-only attributes:"
msgstr "Atributos especiais de somente leitura:"

#: ../../reference/datamodel.rst:681
msgid ""
"Refers to the class instance object to which the method is :ref:`bound "
"<method-binding>`"
msgstr ""
"Refere-se ao objeto instância da classe ao qual o método é :ref:`vinculado "
"<method-binding>`"

#: ../../reference/datamodel.rst:685
msgid "Refers to the original :ref:`function object <user-defined-funcs>`"
msgstr "Refere-se ao :ref:`objeto função <user-defined-funcs>` original"

#: ../../reference/datamodel.rst:688
msgid ""
"The method's documentation (same as :attr:`method.__func__.__doc__ <function."
"__doc__>`). A :class:`string <str>` if the original function had a "
"docstring, else ``None``."
msgstr ""
"A documentação do método (igual a :attr:`method.__func__.__doc__ <function."
"__doc__>`). Um :class:`string <str>` se a função original tivesse uma "
"docstring, caso contrário ``None``."

#: ../../reference/datamodel.rst:694
msgid ""
"The name of the method (same as :attr:`method.__func__.__name__ <function."
"__name__>`)"
msgstr ""
"O nome do método (mesmo que :attr:`method.__func__.__name__ <function."
"__name__>`)"

#: ../../reference/datamodel.rst:698
msgid ""
"The name of the module the method was defined in, or ``None`` if unavailable."
msgstr ""
"O nome do módulo em que o método foi definido ou ``None`` se indisponível."

#: ../../reference/datamodel.rst:701
msgid ""
"Methods also support accessing (but not setting) the arbitrary function "
"attributes on the underlying :ref:`function object <user-defined-funcs>`."
msgstr ""
"Os métodos também implementam o acesso (mas não a configuração) dos "
"atributos arbitrários da função no :ref:`objeto função <user-defined-funcs>` "
"subjacente."

#: ../../reference/datamodel.rst:704
msgid ""
"User-defined method objects may be created when getting an attribute of a "
"class (perhaps via an instance of that class), if that attribute is a user-"
"defined :ref:`function object <user-defined-funcs>` or a :class:"
"`classmethod` object."
msgstr ""
"Objetos método definidos pelo usuário podem ser criados ao obter um atributo "
"de uma classe (talvez através de uma instância dessa classe), se esse "
"atributo for um :ref:`objeto função <user-defined-funcs>` definido pelo "
"usuário ou um objeto :class:`classmethod` ."

#: ../../reference/datamodel.rst:711
msgid ""
"When an instance method object is created by retrieving a user-defined :ref:"
"`function object <user-defined-funcs>` from a class via one of its "
"instances, its :attr:`~method.__self__` attribute is the instance, and the "
"method object is said to be *bound*.  The new method's :attr:`~method."
"__func__` attribute is the original function object."
msgstr ""
"Quando um objeto método de instância é criado recuperando um :ref:`objeto "
"função <user-defined-funcs>` definido pelo usuário de uma classe por meio de "
"uma de suas instâncias, seu atributo :attr:`~method.__self__` é a instância, "
"e o objeto método é considerado *vinculado*. O atributo :attr:`~method."
"__func__` do novo método é o objeto da função original."

#: ../../reference/datamodel.rst:717
msgid ""
"When an instance method object is created by retrieving a :class:"
"`classmethod` object from a class or instance, its :attr:`~method.__self__` "
"attribute is the class itself, and its :attr:`~method.__func__` attribute is "
"the function object underlying the class method."
msgstr ""
"Quando um objeto método de instância é criado obtendo um objeto :class:"
"`classmethod` de uma classe ou instância, seu atributo :attr:`~method."
"__self__` é a própria classe, e seu atributo :attr:`~method.__func__` é o "
"objeto função subjacente ao método de classe."

#: ../../reference/datamodel.rst:722
msgid ""
"When an instance method object is called, the underlying function (:attr:"
"`~method.__func__`) is called, inserting the class instance (:attr:`~method."
"__self__`) in front of the argument list.  For instance, when :class:`!C` is "
"a class which contains a definition for a function :meth:`!f`, and ``x`` is "
"an instance of :class:`!C`, calling ``x.f(1)`` is equivalent to calling ``C."
"f(x, 1)``."
msgstr ""
"Quando um objeto método de instância é chamado, a função subjacente (:attr:"
"`~method.__func__`) é chamada, inserindo a instância de classe (:attr:"
"`~method.__self__`) na frente da lista de argumentos. Por exemplo, quando :"
"class:`!C` é uma classe que contém uma definição para uma função :meth:`!f`, "
"e ``x`` é uma instância de :class:`!C`, chamando ``x.f(1)`` é equivalente a "
"chamar ``C.f(x, 1)``."

#: ../../reference/datamodel.rst:729
msgid ""
"When an instance method object is derived from a :class:`classmethod` "
"object, the \"class instance\" stored in :attr:`~method.__self__` will "
"actually be the class itself, so that calling either ``x.f(1)`` or ``C."
"f(1)`` is equivalent to calling ``f(C,1)`` where ``f`` is the underlying "
"function."
msgstr ""
"Quando um objeto método de instância é derivado de um objeto :class:"
"`classmethod`, a \"instância de classe\" armazenada em :attr:`~method."
"__self__` será, na verdade, a própria classe, de modo que chamar ``x.f(1)`` "
"ou ``C.f(1)`` é equivalente a chamar ``f(C,1)`` sendo ``f`` a função "
"subjacente."

#: ../../reference/datamodel.rst:734
msgid ""
"It is important to note that user-defined functions which are attributes of "
"a class instance are not converted to bound methods; this *only* happens "
"when the function is an attribute of the class."
msgstr ""
"É importante observar que funções definidas pelo usuário que são atributos "
"de uma instância de classe não são convertidas em métodos vinculados; isso "
"*somente* acontece quando a função é um atributo da classe."

#: ../../reference/datamodel.rst:741
msgid "Generator functions"
msgstr "Funções geradoras"

#: ../../reference/datamodel.rst:747
msgid ""
"A function or method which uses the :keyword:`yield` statement (see section :"
"ref:`yield`) is called a :dfn:`generator function`.  Such a function, when "
"called, always returns an :term:`iterator` object which can be used to "
"execute the body of the function:  calling the iterator's :meth:`iterator."
"__next__` method will cause the function to execute until it provides a "
"value using the :keyword:`!yield` statement.  When the function executes a :"
"keyword:`return` statement or falls off the end, a :exc:`StopIteration` "
"exception is raised and the iterator will have reached the end of the set of "
"values to be returned."
msgstr ""
"Uma função ou método que usa a instrução :keyword:`yield` (veja a seção :ref:"
"`yield`) é chamada de :dfn:`função geradora`. Tal função, quando chamada, "
"sempre retorna um objeto :term:`iterator`  que pode ser usado para executar "
"o corpo da função: chamar o método :meth:`iterator.__next__` do iterador "
"fará com que a função seja executada até que forneça um valor usando a "
"instrução :keyword:`!yield`. Quando a função executa uma instrução :keyword:"
"`return` ou sai do fim, uma exceção :exc:`StopIteration` é levantada e o "
"iterador terá alcançado o fim do conjunto de valores a serem retornados."

#: ../../reference/datamodel.rst:759
msgid "Coroutine functions"
msgstr "Funções de corrotina"

#: ../../reference/datamodel.rst:764
msgid ""
"A function or method which is defined using :keyword:`async def` is called "
"a :dfn:`coroutine function`.  Such a function, when called, returns a :term:"
"`coroutine` object.  It may contain :keyword:`await` expressions, as well "
"as :keyword:`async with` and :keyword:`async for` statements. See also the :"
"ref:`coroutine-objects` section."
msgstr ""
"Uma função ou um método que é definida(o) usando :keyword:`async def` é "
"chamado de :dfn:`função de corrotina`. Tal função, quando chamada, retorna "
"um objeto de :term:`corrotina`. Ele pode conter expressões :keyword:`await`, "
"bem como instruções :keyword:`async with` e :keyword:`async for`. Veja "
"também a seção :ref:`coroutine-objects`."

#: ../../reference/datamodel.rst:772
msgid "Asynchronous generator functions"
msgstr "Funções geradoras assíncronas"

#: ../../reference/datamodel.rst:778
msgid ""
"A function or method which is defined using :keyword:`async def` and which "
"uses the :keyword:`yield` statement is called a :dfn:`asynchronous generator "
"function`.  Such a function, when called, returns an :term:`asynchronous "
"iterator` object which can be used in an :keyword:`async for` statement to "
"execute the body of the function."
msgstr ""
"Uma função ou um método que é definida(o) usando :keyword:`async def` e que "
"usa a instrução :keyword:`yield` é chamada de :dfn:`função geradora "
"assíncrona`. Tal função, quando chamada, retorna um objeto :term:`iterador "
"assíncrono` que pode ser usado em uma instrução :keyword:`async for` para "
"executar o corpo da função."

#: ../../reference/datamodel.rst:784
msgid ""
"Calling the asynchronous iterator's :meth:`aiterator.__anext__ <object."
"__anext__>` method will return an :term:`awaitable` which when awaited will "
"execute until it provides a value using the :keyword:`yield` expression.  "
"When the function executes an empty :keyword:`return` statement or falls off "
"the end, a :exc:`StopAsyncIteration` exception is raised and the "
"asynchronous iterator will have reached the end of the set of values to be "
"yielded."
msgstr ""
"Chamar o método :meth:`aiterator.__anext__ <object.__anext__>` do iterador "
"assíncrono retornará um :term:`aguardável` que, quando aguardado, será "
"executado até fornecer um valor usando a expressão :keyword:`yield`. Quando "
"a função executa uma instrução vazia :keyword:`return` ou chega ao final, "
"uma exceção :exc:`StopAsyncIteration` é levantada e o iterador assíncrono "
"terá alcançado o final do conjunto de valores a serem produzidos."

#: ../../reference/datamodel.rst:797
msgid "Built-in functions"
msgstr "Funções embutidas"

#: ../../reference/datamodel.rst:804
msgid ""
"A built-in function object is a wrapper around a C function.  Examples of "
"built-in functions are :func:`len` and :func:`math.sin` (:mod:`math` is a "
"standard built-in module). The number and type of the arguments are "
"determined by the C function. Special read-only attributes:"
msgstr ""
"Um objeto função embutida é um wrapper em torno de uma função C. Exemplos de "
"funções embutidas são :func:`len` e :func:`math.sin` (:mod:`math` é um "
"módulo embutido padrão). O número e o tipo dos argumentos são determinados "
"pela função C. Atributos especiais de somente leitura:"

#: ../../reference/datamodel.rst:809
msgid ""
":attr:`!__doc__` is the function's documentation string, or ``None`` if "
"unavailable. See :attr:`function.__doc__`."
msgstr ""
":attr:`!__doc__` é a string de documentação da função, ou ``None`` se não "
"estiver disponível. Veja :attr:`function.__doc__`."

#: ../../reference/datamodel.rst:811
msgid ""
":attr:`!__name__` is the function's name. See :attr:`function.__name__`."
msgstr ":attr:`!__name__` é o nome da função. Veja :attr:`function.__name__`."

#: ../../reference/datamodel.rst:812
msgid ":attr:`!__self__` is set to ``None`` (but see the next item)."
msgstr ":attr:`!__self__` é definido para ``None`` (mas veja o próximo item)."

#: ../../reference/datamodel.rst:813
msgid ""
":attr:`!__module__` is the name of the module the function was defined in or "
"``None`` if unavailable. See :attr:`function.__module__`."
msgstr ""
":attr:`!__module__` é o nome do módulo no qual a função foi definida ou "
"``None`` se não estiver disponível. Veja :attr:`function.__module__`."

#: ../../reference/datamodel.rst:821
msgid "Built-in methods"
msgstr "Métodos embutidos"

#: ../../reference/datamodel.rst:828
msgid ""
"This is really a different disguise of a built-in function, this time "
"containing an object passed to the C function as an implicit extra "
"argument.  An example of a built-in method is ``alist.append()``, assuming "
"*alist* is a list object. In this case, the special read-only attribute :"
"attr:`!__self__` is set to the object denoted by *alist*. (The attribute has "
"the same semantics as it does with :attr:`other instance methods <method."
"__self__>`.)"
msgstr ""
"Este é realmente um disfarce diferente de uma função embutida, desta vez "
"contendo um objeto passado para a função C como um argumento extra "
"implícito. Um exemplo de método embutido é ``alist.append()``, presumindo "
"que *alist* é um objeto de lista. Nesse caso, o atributo especial de somente "
"leitura :attr:`!__self__` é definido como o objeto denotado por *alist*. (O "
"atributo tem a mesma semântica de :attr:`outros métodos de instância <method."
"__self__>`.)"

#: ../../reference/datamodel.rst:838
msgid "Classes"
msgstr "Classes"

#: ../../reference/datamodel.rst:840
msgid ""
"Classes are callable.  These objects normally act as factories for new "
"instances of themselves, but variations are possible for class types that "
"override :meth:`~object.__new__`.  The arguments of the call are passed to :"
"meth:`!__new__` and, in the typical case, to :meth:`~object.__init__` to "
"initialize the new instance."
msgstr ""
"Classes são chamáveis. Esses objetos normalmente agem como fábricas para "
"novas instâncias de si mesmos, mas variações são possíveis para tipos de "
"classe que substituem :meth:`~object.__new__`. Os argumentos da chamada são "
"passados para :meth:`!__new__` e, no caso típico, para :meth:`~object."
"__init__` para inicializar a nova instância."

#: ../../reference/datamodel.rst:848
msgid "Class Instances"
msgstr "Instâncias de classe"

#: ../../reference/datamodel.rst:850
msgid ""
"Instances of arbitrary classes can be made callable by defining a :meth:"
"`~object.__call__` method in their class."
msgstr ""
"Instâncias de classes arbitrárias podem ser tornados chamáveis definindo um "
"método :meth:`~object.__call__` em sua classe."

#: ../../reference/datamodel.rst:857
msgid "Modules"
msgstr "Módulos"

#: ../../reference/datamodel.rst:863
msgid ""
"Modules are a basic organizational unit of Python code, and are created by "
"the :ref:`import system <importsystem>` as invoked either by the :keyword:"
"`import` statement, or by calling functions such as :func:`importlib."
"import_module` and built-in :func:`__import__`.  A module object has a "
"namespace implemented by a :class:`dictionary <dict>` object (this is the "
"dictionary referenced by the :attr:`~function.__globals__` attribute of "
"functions defined in the module).  Attribute references are translated to "
"lookups in this dictionary, e.g., ``m.x`` is equivalent to ``m."
"__dict__[\"x\"]``. A module object does not contain the code object used to "
"initialize the module (since it isn't needed once the initialization is "
"done)."
msgstr ""
"Módulos são uma unidade organizacional básica do código Python, e são "
"criados pelo :ref:`sistema de importação <importsystem>` quando invocado "
"pela instrução :keyword:`import`, ou chamando funções como :func:`importlib."
"import_module` e a embutida :func:`__import__`. Um objeto módulo tem um "
"espaço de nomes implementado por um objeto :class:`dicionário <dict>` (este "
"é o dicionário referenciado pelo atributo :attr:`~function.__globals__` das "
"funções definidas no módulo). As referências de atributos são traduzidas "
"para pesquisas neste dicionário, por exemplo, ``m.x`` é equivalente a ``m."
"__dict__[\"x\"]``. Um objeto módulo não contém o objeto código usado para "
"inicializar o módulo (uma vez que não é necessário depois que a "
"inicialização é concluída)."

#: ../../reference/datamodel.rst:876
msgid ""
"Attribute assignment updates the module's namespace dictionary, e.g., ``m.x "
"= 1`` is equivalent to ``m.__dict__[\"x\"] = 1``."
msgstr ""
"A atribuição de atributo atualiza o dicionário de espaço de nomes do módulo, "
"por exemplo, ``m.x = 1`` é equivalente a ``m.__dict__[\"x\"] = 1``."

#: ../../reference/datamodel.rst:894
msgid "Import-related attributes on module objects"
msgstr "Atributos relacionados à importação em objetos de módulo"

#: ../../reference/datamodel.rst:896
msgid ""
"Module objects have the following attributes that relate to the :ref:`import "
"system <importsystem>`. When a module is created using the machinery "
"associated with the import system, these attributes are filled in based on "
"the module's :term:`spec <module spec>`, before the :term:`loader` executes "
"and loads the module."
msgstr ""
"Objetos de módulo têm os seguintes atributos que se relacionam ao :ref:"
"`sistema de importação <importsystem>`. Quando um módulo é criado usando o "
"maquinário associado ao sistema de importação, esses atributos são "
"preenchidos com base no :term:`spec <module spec>` do módulo, antes que o :"
"term:`carregador` execute e carregue o módulo."

#: ../../reference/datamodel.rst:902
msgid ""
"To create a module dynamically rather than using the import system, it's "
"recommended to use :func:`importlib.util.module_from_spec`, which will set "
"the various import-controlled attributes to appropriate values. It's also "
"possible to use the :class:`types.ModuleType` constructor to create modules "
"directly, but this technique is more error-prone, as most attributes must be "
"manually set on the module object after it has been created when using this "
"approach."
msgstr ""
"Para criar um módulo dinamicamente em vez de usar o sistema de importação, é "
"recomendado usar :func:`importlib.util.module_from_spec`, que definirá os "
"vários atributos controlados pela importação para valores apropriados. "
"Também é possível usar o construtor :class:`types.ModuleType` para criar "
"módulos diretamente, mas essa técnica é mais propensa a erros, pois a "
"maioria dos atributos deve ser definida manualmente no objeto do módulo após "
"ele ter sido criado ao usar essa abordagem."

#: ../../reference/datamodel.rst:912
msgid ""
"With the exception of :attr:`~module.__name__`, it is **strongly** "
"recommended that you rely on :attr:`~module.__spec__` and its attributes "
"instead of any of the other individual attributes listed in this subsection. "
"Note that updating an attribute on :attr:`!__spec__` will not update the "
"corresponding attribute on the module itself:"
msgstr ""
"Com exceção de :attr:`~module.__name__`, é **fortemente** recomendado que "
"você confie no :attr:`~module.__spec__` e seus atributos em vez de qualquer "
"um dos outros atributos individuais listados nesta subseção. Observe que "
"atualizar um atributo em :attr:`!__spec__` não atualizará o atributo "
"correspondente no próprio módulo:"

#: ../../reference/datamodel.rst:918
msgid ""
">>> import typing\n"
">>> typing.__name__, typing.__spec__.name\n"
"('typing', 'typing')\n"
">>> typing.__spec__.name = 'spelling'\n"
">>> typing.__name__, typing.__spec__.name\n"
"('typing', 'spelling')\n"
">>> typing.__name__ = 'keyboard_smashing'\n"
">>> typing.__name__, typing.__spec__.name\n"
"('keyboard_smashing', 'spelling')"
msgstr ""
">>> import typing\n"
">>> typing.__name__, typing.__spec__.name\n"
"('typing', 'typing')\n"
">>> typing.__spec__.name = 'spelling'\n"
">>> typing.__name__, typing.__spec__.name\n"
"('typing', 'spelling')\n"
">>> typing.__name__ = 'keyboard_smashing'\n"
">>> typing.__name__, typing.__spec__.name\n"
"('keyboard_smashing', 'spelling')"

#: ../../reference/datamodel.rst:932
msgid ""
"The name used to uniquely identify the module in the import system. For a "
"directly executed module, this will be set to ``\"__main__\"``."
msgstr ""
"O nome usado para identificar exclusivamente o módulo no sistema de "
"importação. Para um módulo executado diretamente, isso será definido como "
"``\"__main__\"``."

#: ../../reference/datamodel.rst:935
msgid ""
"This attribute must be set to the fully qualified name of the module. It is "
"expected to match the value of :attr:`module.__spec__.name <importlib."
"machinery.ModuleSpec.name>`."
msgstr ""
"Este atributo deve ser definido como o nome totalmente qualificado do "
"módulo. Espera-se que ele corresponda ao valor de :attr:`module.__spec__."
"name <importlib.machinery.ModuleSpec.name>`."

#: ../../reference/datamodel.rst:941
msgid "A record of the module's import-system-related state."
msgstr "Um registro do estado relacionado ao sistema de importação do módulo."

#: ../../reference/datamodel.rst:943
msgid ""
"Set to the :class:`module spec <importlib.machinery.ModuleSpec>` that was "
"used when importing the module. See :ref:`module-specs` for more details."
msgstr ""
"Define com :class:`spec de módulo <importlib.machinery.ModuleSpec>` que foi "
"usado ao importar o módulo. Veja :ref:`module-specs` para mais detalhes."

#: ../../reference/datamodel.rst:950
msgid "The :term:`package` a module belongs to."
msgstr "O :term:`pacote` ao qual um módulo pertence."

#: ../../reference/datamodel.rst:952
msgid ""
"If the module is top-level (that is, not a part of any specific package) "
"then the attribute should be set to ``''`` (the empty string). Otherwise, it "
"should be set to the name of the module's package (which can be equal to :"
"attr:`module.__name__` if the module itself is a package). See :pep:`366` "
"for further details."
msgstr ""
"Se o módulo for de nível superior (ou seja, não fizer parte de nenhum pacote "
"específico), o atributo deve ser definido como ``''`` (a string vazia). Caso "
"contrário, deve ser definido como o nome do pacote do módulo (que pode ser "
"igual a :attr:`module.__name__` se o módulo em si for um pacote). Veja :pep:"
"`366` para mais detalhes."

#: ../../reference/datamodel.rst:958
msgid ""
"This attribute is used instead of :attr:`~module.__name__` to calculate "
"explicit relative imports for main modules. It defaults to ``None`` for "
"modules created dynamically using the :class:`types.ModuleType` constructor; "
"use :func:`importlib.util.module_from_spec` instead to ensure the attribute "
"is set to a :class:`str`."
msgstr ""
"Este atributo é usado em vez de :attr:`~module.__name__` para calcular "
"importações relativas explícitas para módulos principais. O padrão é "
"``None`` para módulos criados dinamicamente usando o construtor :class:"
"`types.ModuleType`; use :func:`importlib.util.module_from_spec` em vez disso "
"para garantir que o atributo seja definido como :class:`str`."

#: ../../reference/datamodel.rst:964
msgid ""
"It is **strongly** recommended that you use :attr:`module.__spec__.parent "
"<importlib.machinery.ModuleSpec.parent>` instead of :attr:`!module."
"__package__`. :attr:`__package__` is now only used as a fallback if :attr:`!"
"__spec__.parent` is not set, and this fallback path is deprecated."
msgstr ""
"É **fortemente** recomendado que você use :attr:`module.__spec__.parent "
"<importlib.machinery.ModuleSpec.parent>` em vez de :attr:`!module."
"__package__`. :attr:`__package__` agora só é usado como fallback se :attr:`!"
"__spec__.parent` não estiver definido, e esse caminho de fallback está "
"descontinuado."

#: ../../reference/datamodel.rst:970 ../../reference/datamodel.rst:1011
msgid ""
"This attribute now defaults to ``None`` for modules created dynamically "
"using the :class:`types.ModuleType` constructor. Previously the attribute "
"was optional."
msgstr ""
"Este atributo agora presume o padrão ``None`` para módulos criados "
"dinamicamente usando o construtor :class:`types.ModuleType`. Anteriormente, "
"o atributo era opcional."

#: ../../reference/datamodel.rst:975
msgid ""
"The value of :attr:`!__package__` is expected to be the same as :attr:"
"`__spec__.parent <importlib.machinery.ModuleSpec.parent>`. :attr:"
"`__package__` is now only used as a fallback during import resolution if :"
"attr:`!__spec__.parent` is not defined."
msgstr ""
"Espera-se que o valor de :attr:`!__package__` seja o mesmo que :attr:"
"`__spec__.parent <importlib.machinery.ModuleSpec.parent>`. :attr:"
"`__package__` agora é usado apenas como fallback durante a resolução de "
"importação se :attr:`!__spec__.parent` não estiver definido."

#: ../../reference/datamodel.rst:981
msgid ""
":exc:`ImportWarning` is raised if an import resolution falls back to :attr:`!"
"__package__` instead of :attr:`__spec__.parent <importlib.machinery."
"ModuleSpec.parent>`."
msgstr ""
":exc:`ImportWarning` é levantada se uma resolução de importação retorna "
"para :attr:`!__package__` em vez de :attr:`__spec__.parent <importlib."
"machinery.ModuleSpec.parent>`."

#: ../../reference/datamodel.rst:986
msgid ""
"Raise :exc:`DeprecationWarning` instead of :exc:`ImportWarning` when falling "
"back to :attr:`!__package__` during import resolution."
msgstr ""
"Levanta :exc:`DeprecationWarning` em vez de :exc:`ImportWarning` ao retornar "
"para :attr:`!__package__` durante a resolução de importação."

#: ../../reference/datamodel.rst:990
msgid ""
":attr:`!__package__` will cease to be set or taken into consideration by the "
"import system or standard library."
msgstr ""
":attr:`!__package__` deixará de ser definido ou levado em consideração pelo "
"sistema de importação ou biblioteca padrão."

#: ../../reference/datamodel.rst:996
msgid ""
"The :term:`loader` object that the import machinery used to load the module."
msgstr ""
"O objeto :term:`carregador` que o maquinário de importação usou para "
"carregar o módulo."

#: ../../reference/datamodel.rst:998
msgid ""
"This attribute is mostly useful for introspection, but can be used for "
"additional loader-specific functionality, for example getting data "
"associated with a loader."
msgstr ""
"Este atributo é útil principalmente para introspecção, mas pode ser usado "
"para funcionalidades adicionais específicas do carregador, por exemplo, para "
"obter dados associados a um carregador."

#: ../../reference/datamodel.rst:1002
msgid ""
":attr:`!__loader__` defaults to ``None`` for modules created dynamically "
"using the :class:`types.ModuleType` constructor; use :func:`importlib.util."
"module_from_spec` instead to ensure the attribute is set to a :term:`loader` "
"object."
msgstr ""
":attr:`!__loader__` assume como padrão ``None`` para módulos criados "
"dinamicamente usando o construtor :class:`types.ModuleType`; use :func:"
"`importlib.util.module_from_spec` para garantir que o atributo seja definido "
"como um objeto :term:`carregador`."

#: ../../reference/datamodel.rst:1007
msgid ""
"It is **strongly** recommended that you use :attr:`module.__spec__.loader "
"<importlib.machinery.ModuleSpec.loader>` instead of :attr:`!module."
"__loader__`."
msgstr ""
"É **fortemetne** recomendado que você use :attr:`module.__spec__.loader "
"<importlib.machinery.ModuleSpec.loader>` em vez de :attr:`!module."
"__loader__`."

#: ../../reference/datamodel.rst:1016
msgid ""
"Setting :attr:`!__loader__` on a module while failing to set :attr:`!"
"__spec__.loader` is deprecated. In Python 3.16, :attr:`!__loader__` will "
"cease to be set or taken into consideration by the import system or the "
"standard library."
msgstr ""
"A definição :attr:`!__loader__` em um módulo enquanto falha na definição de :"
"attr:`!__spec__.loader` está descontinuado. No Python 3.16, :attr:`!"
"__loader__` deixará de ser definido ou levado em consideração pelo sistema "
"de importação ou pela biblioteca padrão."

#: ../../reference/datamodel.rst:1024
msgid ""
"A (possibly empty) :term:`sequence` of strings enumerating the locations "
"where the package's submodules will be found. Non-package modules should not "
"have a :attr:`!__path__` attribute. See :ref:`package-path-rules` for more "
"details."
msgstr ""
"Uma :term:`sequência` (possivelmente vazia) de strings enumerando os locais "
"onde os submódulos do pacote serão encontrados. Módulos que não sejam de "
"pacote não devem ter um atributo :attr:`!__path__`. Veja :ref:`package-path-"
"rules` para mais detalhes."

#: ../../reference/datamodel.rst:1029
msgid ""
"It is **strongly** recommended that you use :attr:`module.__spec__."
"submodule_search_locations <importlib.machinery.ModuleSpec."
"submodule_search_locations>` instead of :attr:`!module.__path__`."
msgstr ""
"É **fortemente** recomendado que você use :attr:`module.__spec__."
"submodule_search_locations <importlib.machinery.ModuleSpec."
"submodule_search_locations>` em vez de :attr:`!module.__path__`."

#: ../../reference/datamodel.rst:1036
msgid ""
":attr:`!__file__` and :attr:`!__cached__` are both optional attributes that "
"may or may not be set. Both attributes should be a :class:`str` when they "
"are available."
msgstr ""
":attr:`!__file__` e :attr:`!__cached__` são atributos opcionais que podem ou "
"não ser definidos. Ambos os atributos devem ser um :class:`str` quando "
"estiverem disponíveis."

#: ../../reference/datamodel.rst:1040
msgid ""
":attr:`!__file__` indicates the pathname of the file from which the module "
"was loaded (if loaded from a file), or the pathname of the shared library "
"file for extension modules loaded dynamically from a shared library. It "
"might be missing for certain types of modules, such as C modules that are "
"statically linked into the interpreter, and the :ref:`import system "
"<importsystem>` may opt to leave it unset if it has no semantic meaning (for "
"example, a module loaded from a database)."
msgstr ""
":attr:`!__file__` indica o nome do caminho do arquivo do qual o módulo foi "
"carregado (se carregado de um arquivo) ou o nome do caminho do arquivo da "
"biblioteca compartilhada para módulos de extensão carregados dinamicamente "
"de uma biblioteca compartilhada. Pode estar faltando para certos tipos de "
"módulos, como módulos C que estão estaticamente vinculados ao interpretador, "
"e o :ref:`sistema de importação  <importsystem>` pode optar por deixá-lo sem "
"definição se não tiver significado semântico (por exemplo, um módulo "
"carregado de um banco de dados)."

#: ../../reference/datamodel.rst:1048
msgid ""
"If :attr:`!__file__` is set then the :attr:`!__cached__` attribute might "
"also be set,  which is the path to any compiled version of the code (for "
"example, a byte-compiled file). The file does not need to exist to set this "
"attribute; the path can simply point to where the compiled file *would* "
"exist (see :pep:`3147`)."
msgstr ""
"Se :attr:`!__file__` estiver definido então o atributo :attr:`!__cached__` "
"também pode ser definido, que é o caminho para qualquer versão compilada do "
"código (por exemplo, um arquivo compilado por byte). O arquivo não precisa "
"existir para configurar esse atributo; o caminho pode simplesmente apontar "
"para onde o arquivo compilado existiria (veja :pep:`3147`)."

#: ../../reference/datamodel.rst:1054
msgid ""
"Note that :attr:`!__cached__` may be set even if :attr:`!__file__` is not "
"set.  However, that scenario is quite atypical.  Ultimately, the :term:"
"`loader` is what makes use of the module spec provided by the :term:`finder` "
"(from which :attr:`!__file__` and :attr:`!__cached__` are derived).  So if a "
"loader can load from a cached module but otherwise does not load from a "
"file, that atypical scenario may be appropriate."
msgstr ""
"Observe que :attr:`!__cached__` pode ser definido mesmo se :attr:`!__file__` "
"não estiver definido. No entanto, esse cenário é bastante atípico. Em última "
"análise, o :term:`carregador` é o que faz uso do spec de módulo fornecido "
"pelo :term:`localizador` (do qual :attr:`!__file__` e :attr:`!__cached__` "
"são derivados). Portanto, se um carregador puder carregar a partir de um "
"módulo em cache, mas não carregar a partir de um arquivo, esse cenário "
"atípico poderá ser apropriado."

#: ../../reference/datamodel.rst:1061
msgid ""
"It is **strongly** recommended that you use :attr:`module.__spec__.cached "
"<importlib.machinery.ModuleSpec.cached>` instead of :attr:`!module."
"__cached__`."
msgstr ""
"É **fortemente** recomendado que você use :attr:`module.__spec__.cached "
"<importlib.machinery.ModuleSpec.cached>` em vez de :attr:`!module."
"__cached__`."

#: ../../reference/datamodel.rst:1065
msgid ""
"Setting :attr:`!__cached__` on a module while failing to set :attr:`!"
"__spec__.cached` is deprecated. In Python 3.15, :attr:`!__cached__` will "
"cease to be set or taken into consideration by the import system or standard "
"library."
msgstr ""
"A definição :attr:`!__cached__` em um módulo enquanto falha na definição de :"
"attr:`!__spec__.cached` está descontinuado. No Python 3.15, :attr:`!"
"__cached__` deixará de ser definido ou levado em consideração pelo sistema "
"de importação ou pela biblioteca padrão."

#: ../../reference/datamodel.rst:1072
msgid "Other writable attributes on module objects"
msgstr "Outros atributos graváveis em objetos de módulo"

#: ../../reference/datamodel.rst:1074
msgid ""
"As well as the import-related attributes listed above, module objects also "
"have the following writable attributes:"
msgstr ""
"Além dos atributos relacionados à importação listados acima, os objetos de "
"módulo também têm os seguintes atributos graváveis:"

#: ../../reference/datamodel.rst:1079
msgid ""
"The module's documentation string, or ``None`` if unavailable. See also: :"
"attr:`__doc__ attributes <definition.__doc__>`."
msgstr ""
"A string de documentação do módulo, ou ``None`` se indisponível. Veja "
"também: :attr:`atributos __doc__ <definition.__doc__>`."

#: ../../reference/datamodel.rst:1084
msgid ""
"A dictionary containing :term:`variable annotations <variable annotation>` "
"collected during module body execution.  For best practices on working with :"
"attr:`__annotations__`, please see :ref:`annotations-howto`."
msgstr ""
"Um dicionário contendo :term:`anotações de variável <variable annotation>`  "
"coletadas durante a execução do corpo do módulo. Para as melhores práticas "
"sobre como trabalhar com :attr:`__annotations__`, por favor veja :ref:"
"`annotations-howto`."

#: ../../reference/datamodel.rst:1090
msgid "Module dictionaries"
msgstr "Dicionários do módulo"

#: ../../reference/datamodel.rst:1092
msgid "Module objects also have the following special read-only attribute:"
msgstr ""
"Os objetos de módulo também têm o seguinte atributo especial somente leitura:"

#: ../../reference/datamodel.rst:1097
msgid ""
"The module's namespace as a dictionary object. Uniquely among the attributes "
"listed here, :attr:`!__dict__` cannot be accessed as a global variable from "
"within a module; it can only be accessed as an attribute on module objects."
msgstr ""
"O espaço de nomes do módulo como um objeto dicionário. Exclusivamente entre "
"os atributos listados aqui, :attr:`!__dict__` não pode ser acessado como uma "
"variável global de dentro de um módulo; ele só pode ser acessado como um "
"atributo em objetos de módulo."

#: ../../reference/datamodel.rst:1103
msgid ""
"Because of the way CPython clears module dictionaries, the module dictionary "
"will be cleared when the module falls out of scope even if the dictionary "
"still has live references.  To avoid this, copy the dictionary or keep the "
"module around while using its dictionary directly."
msgstr ""
"Por causa da maneira como CPython limpa dicionários de módulos, o dicionário "
"do módulo será limpo quando o módulo sair do escopo, mesmo se o dicionário "
"ainda tiver referências ativas. Para evitar isso, copie o dicionário ou "
"mantenha o módulo por perto enquanto usa seu dicionário diretamente."

#: ../../reference/datamodel.rst:1112
msgid "Custom classes"
msgstr "Classes personalizadas"

#: ../../reference/datamodel.rst:1114
msgid ""
"Custom class types are typically created by class definitions (see section :"
"ref:`class`).  A class has a namespace implemented by a dictionary object. "
"Class attribute references are translated to lookups in this dictionary, e."
"g., ``C.x`` is translated to ``C.__dict__[\"x\"]`` (although there are a "
"number of hooks which allow for other means of locating attributes). When "
"the attribute name is not found there, the attribute search continues in the "
"base classes. This search of the base classes uses the C3 method resolution "
"order which behaves correctly even in the presence of 'diamond' inheritance "
"structures where there are multiple inheritance paths leading back to a "
"common ancestor. Additional details on the C3 MRO used by Python can be "
"found at :ref:`python_2.3_mro`."
msgstr ""
"Tipos de classe personalizados são tipicamente criados por definições de "
"classe (veja a seção :ref:`class`). Uma classe possui um espaço de nomes "
"implementado por um objeto dicionário. As referências de atributos de classe "
"são traduzidas para pesquisas neste dicionário, por exemplo, ``C.x`` é "
"traduzido para ``C.__dict__[\"x\"]`` (embora haja uma série de ganchos que "
"permitem outros meios de localizar atributos). Quando o nome do atributo não "
"é encontrado lá, a pesquisa do atributo continua nas classes base. Essa "
"pesquisa das classes base usa a ordem de resolução de métodos C3, que se "
"comporta corretamente mesmo na presença de estruturas de herança em losango, "
"onde há vários caminhos de herança que levam de volta a um ancestral comum. "
"Detalhes adicionais sobre a ordem de resolução de métodos (MRO) C3 usado "
"pelo Python podem ser encontrados em :ref:`python_2.3_mro`."

#: ../../reference/datamodel.rst:1135
msgid ""
"When a class attribute reference (for class :class:`!C`, say) would yield a "
"class method object, it is transformed into an instance method object whose :"
"attr:`~method.__self__` attribute is :class:`!C`. When it would yield a :"
"class:`staticmethod` object, it is transformed into the object wrapped by "
"the static method object. See section :ref:`descriptors` for another way in "
"which attributes retrieved from a class may differ from those actually "
"contained in its :attr:`~object.__dict__`."
msgstr ""
"Quando uma referência de atributo de classe (para uma classe :class:`!C`, "
"digamos) produziria um objeto método de classe, ele é transformado em um "
"objeto método de instância cujo atributo :attr:`~method.__self__` é :class:`!"
"C`. Quando produziria um objeto :class:`staticmethod`, ele é transformado no "
"objeto encapsulado pelo objeto método estático. Veja a seção :ref:"
"`descriptors` para outra maneira em que os atributos recuperados de uma "
"classe podem diferir daqueles realmente contidos em seu :attr:`~object."
"__dict__`."

#: ../../reference/datamodel.rst:1146
msgid ""
"Class attribute assignments update the class's dictionary, never the "
"dictionary of a base class."
msgstr ""
"As atribuições de atributos de classe atualizam o dicionário da classe, "
"nunca o dicionário de uma classe base."

#: ../../reference/datamodel.rst:1151
msgid ""
"A class object can be called (see above) to yield a class instance (see "
"below)."
msgstr ""
"Um objeto classe pode ser chamado (veja acima) para produzir uma instância "
"de classe (veja abaixo)."

#: ../../reference/datamodel.rst:1154 ../../reference/datamodel.rst:1301
msgid "Special attributes"
msgstr "Atributos especiais"

#: ../../reference/datamodel.rst:1174
msgid ""
"The class's name. See also: :attr:`__name__ attributes <definition."
"__name__>`."
msgstr ""
"O nome da classe. Veja também: :attr:`atributos __name__ <definition."
"__name__>`."

#: ../../reference/datamodel.rst:1178
msgid ""
"The class's :term:`qualified name`. See also: :attr:`__qualname__ attributes "
"<definition.__qualname__>`."
msgstr ""
"O :term:`nome qualificado` da classe. Veja também: :attr:`atributos "
"__qualname__ <definition.__qualname__>`."

#: ../../reference/datamodel.rst:1182
msgid "The name of the module in which the class was defined."
msgstr "O nome do módulo no qual a classe foi definida."

#: ../../reference/datamodel.rst:1185
msgid ""
"A :class:`mapping proxy <types.MappingProxyType>` providing a read-only view "
"of the class's namespace. See also: :attr:`__dict__ attributes <object."
"__dict__>`."
msgstr ""
"Um :class:`proxy de mapeamento <types.MappingProxyType>` fornecendo uma "
"visão somente leitura do espaço de nomes da classe. Veja também: :attr:"
"`atributos __dict__ <object.__dict__>`."

#: ../../reference/datamodel.rst:1190
msgid ""
"A :class:`tuple` containing the class's bases. In most cases, for a class "
"defined as ``class X(A, B, C)``, ``X.__bases__`` will be exactly equal to "
"``(A, B, C)``."
msgstr ""
"Uma :class:`tuple` contendo as bases da classe. Na maioria dos casos, para "
"uma classe definida como ``class X(A, B, C)``, ``X.__bases__`` será "
"exatamente igual a ``(A, B, C)``."

#: ../../reference/datamodel.rst:1195
msgid ""
"The class's documentation string, or ``None`` if undefined. Not inherited by "
"subclasses."
msgstr ""
"A string de documentação da classe, ou ``None`` se não estiver definida. Não "
"herdado por subclasses."

#: ../../reference/datamodel.rst:1199
msgid ""
"A dictionary containing :term:`variable annotations <variable annotation>` "
"collected during class body execution. For best practices on working with :"
"attr:`!__annotations__`, please see :ref:`annotations-howto`."
msgstr ""
"Um dicionário contendo :term:`anotações de variável <variable annotation>` "
"coletadas durante a execução do corpo da classe. Para melhores práticas "
"sobre como trabalhar com :attr:`!__annotations__`, por favor veja :ref:"
"`annotations-howto`."

#: ../../reference/datamodel.rst:1206
msgid ""
"Accessing the :attr:`!__annotations__` attribute of a class object directly "
"may yield incorrect results in the presence of metaclasses. In addition, the "
"attribute may not exist for some classes. Use :func:`inspect."
"get_annotations` to retrieve class annotations safely."
msgstr ""
"Acessar o atributo :attr:`!__annotations__` de um objeto classe diretamente "
"pode produzir resultados incorretos na presença de metaclasses. Além disso, "
"o atributo pode não existir para algumas classes. Use :func:`inspect."
"get_annotations` para recuperar anotações de classe com segurança."

#: ../../reference/datamodel.rst:1213
msgid ""
"A :class:`tuple` containing the :ref:`type parameters <type-params>` of a :"
"ref:`generic class <generic-classes>`."
msgstr ""
"Uma :class:`tuple` contendo os :ref:`parâmetros de tipo <type-params>` de "
"uma :ref:`classe genérica <generic-classes>`."

#: ../../reference/datamodel.rst:1219
msgid ""
"A :class:`tuple` containing names of attributes of this class which are "
"assigned through ``self.X`` from any function in its body."
msgstr ""
"Uma :class:`tuple` contendo nomes de atributos dessa classe que são "
"atribuídos por meio de ``self.X`` de qualquer função em seu corpo."

#: ../../reference/datamodel.rst:1225
msgid ""
"The line number of the first line of the class definition, including "
"decorators. Setting the :attr:`__module__` attribute removes the :attr:`!"
"__firstlineno__` item from the type's dictionary."
msgstr ""
"O número da linha da primeira linha da definição de classe, incluindo "
"decoradores. Definir o atributo :attr:`__module__` remove o item :attr:`!"
"__firstlineno__` do dicionário do tipo."

#: ../../reference/datamodel.rst:1233
msgid ""
"The :class:`tuple` of classes that are considered when looking for base "
"classes during method resolution."
msgstr ""
"A :class:`tuple` de classes que são consideradas ao procurar por classes "
"bases durante resolução de métodos."

#: ../../reference/datamodel.rst:1238
msgid "Special methods"
msgstr "Métodos especiais"

#: ../../reference/datamodel.rst:1240
msgid ""
"In addition to the special attributes described above, all Python classes "
"also have the following two methods available:"
msgstr ""
"Além dos atributos especiais descritos acima, todas as classes Python também "
"têm os dois métodos a seguir disponíveis:"

#: ../../reference/datamodel.rst:1245
msgid ""
"This method can be overridden by a metaclass to customize the method "
"resolution order for its instances.  It is called at class instantiation, "
"and its result is stored in :attr:`~type.__mro__`."
msgstr ""
"Este método pode ser substituído por uma metaclasse para personalizar a "
"ordem de resolução de métodos para suas instâncias. Ele é chamado na "
"instanciação da classe, e o seu resultado é armazenado em :attr:`~type."
"__mro__`."

#: ../../reference/datamodel.rst:1251
msgid ""
"Each class keeps a list of weak references to its immediate subclasses. This "
"method returns a list of all those references still alive. The list is in "
"definition order. Example:"
msgstr ""
"Cada classe mantém uma lista de referências fracas para suas subclasses "
"imediatas. Este método retorna uma lista de todas essas referências ainda "
"vivas. A lista está na ordem que são definidas. Exemplo::"

#: ../../reference/datamodel.rst:1255
msgid ""
">>> class A: pass\n"
">>> class B(A): pass\n"
">>> A.__subclasses__()\n"
"[<class 'B'>]"
msgstr ""
">>> class A: pass\n"
">>> class B(A): pass\n"
">>> A.__subclasses__()\n"
"[<class 'B'>]"

#: ../../reference/datamodel.rst:1263
msgid "Class instances"
msgstr "Instâncias de classe"

#: ../../reference/datamodel.rst:1271
msgid ""
"A class instance is created by calling a class object (see above).  A class "
"instance has a namespace implemented as a dictionary which is the first "
"place in which attribute references are searched.  When an attribute is not "
"found there, and the instance's class has an attribute by that name, the "
"search continues with the class attributes.  If a class attribute is found "
"that is a user-defined function object, it is transformed into an instance "
"method object whose :attr:`~method.__self__` attribute is the instance.  "
"Static method and class method objects are also transformed; see above under "
"\"Classes\".  See section :ref:`descriptors` for another way in which "
"attributes of a class retrieved via its instances may differ from the "
"objects actually stored in the class's :attr:`~object.__dict__`.  If no "
"class attribute is found, and the object's class has a :meth:`~object."
"__getattr__` method, that is called to satisfy the lookup."
msgstr ""
"Uma instância de classe é criada chamando um objeto classe (veja acima). Uma "
"instância de classe tem um espaço de nomes implementado como um dicionário "
"que é o primeiro lugar no qual as referências de atributos são pesquisadas. "
"Quando um atributo não é encontrado lá, e a classe da instância possui um "
"atributo com esse nome, a pesquisa continua com os atributos da classe. Se "
"for encontrado um atributo de classe que seja um objeto função definido pelo "
"usuário, ele é transformado em um objeto método de instância cujo atributo :"
"attr:`~method.__self__` é a instância. Métodos estáticos e métodos de classe "
"também são transformados; veja acima em \"Classes\". Veja a seção :ref:"
"`descriptors` para outra maneira em que os atributos de uma classe "
"recuperados através de suas instâncias podem diferir dos objetos realmente "
"armazenados no :attr:`~object.__dict__` da classe. Se nenhum atributo de "
"classe for encontrado, e a classe do objeto tiver um método :meth:`~object."
"__getattr__`, este é chamado para satisfazer a pesquisa."

#: ../../reference/datamodel.rst:1287
msgid ""
"Attribute assignments and deletions update the instance's dictionary, never "
"a class's dictionary.  If the class has a :meth:`~object.__setattr__` or :"
"meth:`~object.__delattr__` method, this is called instead of updating the "
"instance dictionary directly."
msgstr ""
"As atribuições e exclusões de atributos atualizam o dicionário da instância, "
"nunca o dicionário de uma classe. Se a classe tem um método :meth:`~object."
"__setattr__` ou :meth:`~object.__delattr__`, ele é chamado ao invés de "
"atualizar o dicionário da instância diretamente."

#: ../../reference/datamodel.rst:1297
msgid ""
"Class instances can pretend to be numbers, sequences, or mappings if they "
"have methods with certain special names.  See section :ref:`specialnames`."
msgstr ""
"As instâncias de classe podem fingir ser números, sequências ou mapeamentos "
"se tiverem métodos com certos nomes especiais. Veja a seção :ref:"
"`specialnames`."

#: ../../reference/datamodel.rst:1309
msgid "The class to which a class instance belongs."
msgstr "A classe à qual pertence uma instância de classe."

#: ../../reference/datamodel.rst:1313
msgid ""
"A dictionary or other mapping object used to store an object's (writable) "
"attributes. Not all instances have a :attr:`!__dict__` attribute; see the "
"section on :ref:`slots` for more details."
msgstr ""
"Um dicionário ou outro objeto de mapeamento usado para armazenar atributos "
"(graváveis) de um objeto. Nem todas as instâncias têm um atributo :attr:`!"
"__dict__`; veja a seção sobre :ref:`slots` para mais detalhes."

#: ../../reference/datamodel.rst:1319
msgid "I/O objects (also known as file objects)"
msgstr "Objetos de E/S (também conhecidos como objetos arquivo)"

#: ../../reference/datamodel.rst:1334
msgid ""
"A :term:`file object` represents an open file.  Various shortcuts are "
"available to create file objects: the :func:`open` built-in function, and "
"also :func:`os.popen`, :func:`os.fdopen`, and the :meth:`~socket.socket."
"makefile` method of socket objects (and perhaps by other functions or "
"methods provided by extension modules)."
msgstr ""
"O :term:`objeto arquivo <file object>` representa um arquivo aberto. Vários "
"atalhos estão disponíveis para criar objetos arquivos: a função embutida :"
"func:`open`, e também :func:`os.popen`, :func:`os.fdopen` e o método :meth:"
"`~socket.socket.makefile` de objetos soquete (e talvez por outras funções ou "
"métodos fornecidos por módulos de extensão)."

#: ../../reference/datamodel.rst:1340
msgid ""
"The objects ``sys.stdin``, ``sys.stdout`` and ``sys.stderr`` are initialized "
"to file objects corresponding to the interpreter's standard input, output "
"and error streams; they are all open in text mode and therefore follow the "
"interface defined by the :class:`io.TextIOBase` abstract class."
msgstr ""
"Os objetos ``sys.stdin``, ``sys.stdout`` e ``sys.stderr`` são inicializados "
"para objetos arquivo que correspondem aos fluxos de entrada, saída e erro "
"padrão do interpretador; eles são todos abertos em modo texto e, portanto, "
"seguem a interface definida pela classe abstrata :class:`io.TextIOBase`."

#: ../../reference/datamodel.rst:1348
msgid "Internal types"
msgstr "Tipos internos"

#: ../../reference/datamodel.rst:1354
msgid ""
"A few types used internally by the interpreter are exposed to the user. "
"Their definitions may change with future versions of the interpreter, but "
"they are mentioned here for completeness."
msgstr ""
"Alguns tipos usados internamente pelo interpretador são expostos ao usuário. "
"Suas definições podem mudar com versões futuras do interpretador, mas são "
"mencionadas aqui para fins de integridade."

#: ../../reference/datamodel.rst:1362
msgid "Code objects"
msgstr "Objetos código"

#: ../../reference/datamodel.rst:1366
msgid ""
"Code objects represent *byte-compiled* executable Python code, or :term:"
"`bytecode`. The difference between a code object and a function object is "
"that the function object contains an explicit reference to the function's "
"globals (the module in which it was defined), while a code object contains "
"no context; also the default argument values are stored in the function "
"object, not in the code object (because they represent values calculated at "
"run-time).  Unlike function objects, code objects are immutable and contain "
"no references (directly or indirectly) to mutable objects."
msgstr ""
"Objetos código representam código Python executável *compilados em bytes* "
"ou :term:`bytecode`. A diferença entre um objeto código e um objeto função é "
"que o objeto função contém uma referência explícita aos globais da função (o "
"módulo no qual foi definida), enquanto um objeto código não contém nenhum "
"contexto; também os valores de argumento padrão são armazenados no objeto "
"função, não no objeto código (porque eles representam os valores calculados "
"em tempo de execução). Ao contrário dos objetos função, os objetos código "
"são imutáveis e não contêm referências (direta ou indiretamente) a objetos "
"mutáveis."

#: ../../reference/datamodel.rst:1400
msgid "The function name"
msgstr "O nome da função"

#: ../../reference/datamodel.rst:1403
msgid "The fully qualified function name"
msgstr "O nome completo da função"

#: ../../reference/datamodel.rst:1408
msgid ""
"The total number of positional :term:`parameters <parameter>` (including "
"positional-only parameters and parameters with default values) that the "
"function has"
msgstr ""
"O número total de :term:`parâmetros <parameter>` posicionais (incluindo "
"parâmetros somente-posicionais e parâmetros com valores padrão) que a função "
"possui"

#: ../../reference/datamodel.rst:1413
msgid ""
"The number of positional-only :term:`parameters <parameter>` (including "
"arguments with default values) that the function has"
msgstr ""
"O número de :term:`parâmetros <parameter>` somente-posicionais (incluindo "
"argumentos com valores padrão) que a função possui"

#: ../../reference/datamodel.rst:1417
msgid ""
"The number of keyword-only :term:`parameters <parameter>` (including "
"arguments with default values) that the function has"
msgstr ""
"O número de :term:`parâmetros <parameter>` somente-nomeados (incluindo "
"argumentos com valores padrão) que a função possui"

#: ../../reference/datamodel.rst:1421
msgid ""
"The number of :ref:`local variables <naming>` used by the function "
"(including parameters)"
msgstr ""
"O número de :ref:`variáveis locais <naming>` usadas pela função (incluindo "
"parâmetros)"

#: ../../reference/datamodel.rst:1425
msgid ""
"A :class:`tuple` containing the names of the local variables in the function "
"(starting with the parameter names)"
msgstr ""
"Uma :class:`tuple` contendo os nomes das variáveis ​locais na função "
"(começando com os nomes dos parâmetros)"

#: ../../reference/datamodel.rst:1429
msgid ""
"A :class:`tuple` containing the names of :ref:`local variables <naming>` "
"that are referenced from at least one :term:`nested scope` inside the "
"function"
msgstr ""
"Uma :class:`tuple` contendo os nomes de :ref:`variáveis locais <naming>` que "
"são referenciadas a partir de pelo menos um :term:`escopo aninhado` de "
"dentro da função"

#: ../../reference/datamodel.rst:1433
msgid ""
"A :class:`tuple` containing the names of :term:`free (closure) variables "
"<closure variable>` that a :term:`nested scope` references in an outer "
"scope. See also :attr:`function.__closure__`."
msgstr ""
"Uma :class:`tuple` contendo os nomes de :term:`variáveis livres (de "
"clausura) <closure variable>` que um :term:`escopo aninhado` referencia em "
"um escopo externo. Veja também :attr:`function.__closure__`."

#: ../../reference/datamodel.rst:1437
msgid "Note: references to global and builtin names are *not* included."
msgstr ""
"Observação: referências a nomes globais e embutidos *não* estão incluídas."

#: ../../reference/datamodel.rst:1440
msgid ""
"A string representing the sequence of :term:`bytecode` instructions in the "
"function"
msgstr ""
"Uma string representando a sequência de instruções :term:`bytecode` na função"

#: ../../reference/datamodel.rst:1444
msgid ""
"A :class:`tuple` containing the literals used by the :term:`bytecode` in the "
"function"
msgstr ""
"Um :class:`tuple` contendo os literais usados ​pelo :term:`bytecode` na função"

#: ../../reference/datamodel.rst:1448
msgid ""
"A :class:`tuple` containing the names used by the :term:`bytecode` in the "
"function"
msgstr ""
"Um :class:`tuple` contendo os nomes usados ​pelo :term:`bytecode` na função"

#: ../../reference/datamodel.rst:1452
msgid "The name of the file from which the code was compiled"
msgstr "O nome do arquivo do qual o código foi compilado"

#: ../../reference/datamodel.rst:1455
msgid "The line number of the first line of the function"
msgstr "O número da linha da primeira linha da função"

#: ../../reference/datamodel.rst:1458
msgid ""
"A string encoding the mapping from :term:`bytecode` offsets to line numbers. "
"For details, see the source code of the interpreter."
msgstr ""
"Uma string que codifica o mapeamento de :term:`bytecode` compensa para "
"números de linha. Para obter detalhes, consulte o código-fonte do "
"interpretador."

#: ../../reference/datamodel.rst:1461
msgid ""
"This attribute of code objects is deprecated, and may be removed in Python "
"3.15."
msgstr ""
"Este atributo de objetos código está descontinuado e pode ser removido no "
"Python 3.15."

#: ../../reference/datamodel.rst:1466
msgid "The required stack size of the code object"
msgstr "O tamanho de pilha necessário do objeto código"

#: ../../reference/datamodel.rst:1469
msgid ""
"An :class:`integer <int>` encoding a number of flags for the interpreter."
msgstr ""
"Um número :class:`inteiro <int>` codificando uma série de sinalizadores para "
"o interpretador."

#: ../../reference/datamodel.rst:1474
msgid ""
"The following flag bits are defined for :attr:`~codeobject.co_flags`: bit "
"``0x04`` is set if the function uses the ``*arguments`` syntax to accept an "
"arbitrary number of positional arguments; bit ``0x08`` is set if the "
"function uses the ``**keywords`` syntax to accept arbitrary keyword "
"arguments; bit ``0x20`` is set if the function is a generator. See :ref:"
"`inspect-module-co-flags` for details on the semantics of each flags that "
"might be present."
msgstr ""
"Os seguintes bits sinalizadores são definidos para :attr:`~codeobject."
"co_flags`: o bit ``0x04`` é definido se a função usa a sintaxe "
"``*arguments`` para aceitar um número arbitrário de argumentos posicionais; "
"o bit ``0x08`` é definido se a função usa a sintaxe ``**keywords`` para "
"aceitar argumentos nomeados arbitrários; o bit ``0x20`` é definido se a "
"função for um gerador. Veja :ref:`inspect-module-co-flags` para detalhes na "
"semântica de cada sinalizadores que podem estar presentes."

#: ../../reference/datamodel.rst:1482
msgid ""
"Future feature declarations (``from __future__ import division``) also use "
"bits in :attr:`~codeobject.co_flags` to indicate whether a code object was "
"compiled with a particular feature enabled: bit ``0x2000`` is set if the "
"function was compiled with future division enabled; bits ``0x10`` and "
"``0x1000`` were used in earlier versions of Python."
msgstr ""
"Declarações de recursos futuros (``from __future__ import division``) também "
"usam bits em :attr:`~codeobject.co_flags` para indicar se um objeto código "
"foi compilado com um recurso específico habilitado: o bit ``0x2000`` é "
"definido se a função foi compilada com divisão futura habilitada; os bits "
"``0x10`` e ``0x1000`` foram usados em versões anteriores do Python."

#: ../../reference/datamodel.rst:1488
msgid ""
"Other bits in :attr:`~codeobject.co_flags` are reserved for internal use."
msgstr ""
"Outros bits em :attr:`~codeobject.co_flags` são reservados para uso interno."

#: ../../reference/datamodel.rst:1492
msgid ""
"If a code object represents a function, the first item in :attr:`~codeobject."
"co_consts` is the documentation string of the function, or ``None`` if "
"undefined."
msgstr ""
"Se um objeto código representa uma função, o primeiro item em :attr:"
"`~codeobject.co_consts` é a string de documentação da função, ou ``None`` se "
"indefinido."

#: ../../reference/datamodel.rst:1497
msgid "Methods on code objects"
msgstr "Métodos de objetos código"

#: ../../reference/datamodel.rst:1501
msgid ""
"Returns an iterable over the source code positions of each :term:`bytecode` "
"instruction in the code object."
msgstr ""
"Retorna um iterável das posições no código-fonte de cada instrução :term:"
"`bytecode` no objeto código."

#: ../../reference/datamodel.rst:1504
msgid ""
"The iterator returns :class:`tuple`\\s containing the ``(start_line, "
"end_line, start_column, end_column)``. The *i-th* tuple corresponds to the "
"position of the source code that compiled to the *i-th* code unit. Column "
"information is 0-indexed utf-8 byte offsets on the given source line."
msgstr ""
"O iterador retorna :class:`tuple`\\s contendo ``(start_line, end_line, "
"start_column, end_column)``. A *i-nésima* tupla corresponde à posição do "
"código-fonte que compilou para a *i-nésima* unidade de código. As "
"informações da coluna são deslocamentos de bytes utf-8 indexados em 0 na "
"linha de código fornecida."

#: ../../reference/datamodel.rst:1510
msgid ""
"This positional information can be missing. A non-exhaustive lists of cases "
"where this may happen:"
msgstr ""
"A informação posicional pode estar ausente. Veja uma lista não-exaustiva de "
"casos onde isso pode acontecer:"

#: ../../reference/datamodel.rst:1513
msgid "Running the interpreter with :option:`-X` ``no_debug_ranges``."
msgstr "Executando o interpretador com ``no_debug_ranges`` :option:`-X`."

#: ../../reference/datamodel.rst:1514
msgid ""
"Loading a pyc file compiled while using :option:`-X` ``no_debug_ranges``."
msgstr ""
"Carregando um arquivo pyc compilado com ``no_debug_ranges`` :option:`-X`."

#: ../../reference/datamodel.rst:1515
msgid "Position tuples corresponding to artificial instructions."
msgstr "Tuplas posicionais correspondendo a instruções artificiais."

#: ../../reference/datamodel.rst:1516
msgid ""
"Line and column numbers that can't be represented due to implementation "
"specific limitations."
msgstr ""
"Números de linha e coluna que não podem ser representados devido a "
"limitações específicas de implementação."

#: ../../reference/datamodel.rst:1519
msgid ""
"When this occurs, some or all of the tuple elements can be :const:`None`."
msgstr ""
"Quando isso ocorre, alguns ou todos elementos da tupla podem ser :const:"
"`None`."

#: ../../reference/datamodel.rst:1525
msgid ""
"This feature requires storing column positions in code objects which may "
"result in a small increase of disk usage of compiled Python files or "
"interpreter memory usage. To avoid storing the extra information and/or "
"deactivate printing the extra traceback information, the :option:`-X` "
"``no_debug_ranges`` command line flag or the :envvar:`PYTHONNODEBUGRANGES` "
"environment variable can be used."
msgstr ""
"Esse recurso requer o armazenamento de posições de coluna no objeto código, "
"o que pode resultar em um pequeno aumento no uso de memória do interpretador "
"e no uso de disco para arquivos Python compilados. Para evitar armazenar as "
"informações extras e/ou desativar a exibição das informações extras de "
"rastreamento, use a opção de linha de comando ``no_debug_ranges``  :option:`-"
"X` ou a variável de ambiente :envvar:`PYTHONNODEBUGRANGES`."

#: ../../reference/datamodel.rst:1534
msgid ""
"Returns an iterator that yields information about successive ranges of :term:"
"`bytecode`\\s. Each item yielded is a ``(start, end, lineno)`` :class:"
"`tuple`:"
msgstr ""
"Retorna um iterador que produz informações sobre intervalos sucessivos de :"
"term:`bytecode`\\s. Cada item gerado é uma :class:`tuple` de ``(start, end, "
"lineno)``:"

#: ../../reference/datamodel.rst:1538
msgid ""
"``start`` (an :class:`int`) represents the offset (inclusive) of the start "
"of the :term:`bytecode` range"
msgstr ""
"``start`` (um :class:`int`) representa o deslocamento (inclusivo) do início "
"do intervalo :term:`bytecode`"

#: ../../reference/datamodel.rst:1540
msgid ""
"``end`` (an :class:`int`) represents the offset (exclusive) of the end of "
"the :term:`bytecode` range"
msgstr ""
"``end`` (um :class:`int`) representa o deslocamento (exclusivo) do fim do "
"intervalo :term:`bytecode`"

#: ../../reference/datamodel.rst:1542
msgid ""
"``lineno`` is an :class:`int` representing the line number of the :term:"
"`bytecode` range, or ``None`` if the bytecodes in the given range have no "
"line number"
msgstr ""
"``lineno`` é um :class:`int` representando o número da linha do intervalo "
"do :term:`bytecode`, ou ``None`` se os bytecodes no intervalo fornecido não "
"tiverem número de linha"

#: ../../reference/datamodel.rst:1546
msgid "The items yielded will have the following properties:"
msgstr "Os itens gerados terão as seguintes propriedades:"

#: ../../reference/datamodel.rst:1548
msgid "The first range yielded will have a ``start`` of 0."
msgstr "O primeiro intervalo gerado terá um ``start`` de 0."

#: ../../reference/datamodel.rst:1549
msgid ""
"The ``(start, end)`` ranges will be non-decreasing and consecutive. That is, "
"for any pair of :class:`tuple`\\s, the ``start`` of the second will be equal "
"to the ``end`` of the first."
msgstr ""
"Os intervalos ``(start, end)`` serão não decrescentes e consecutivos. Ou "
"seja, para qualquer par de :class:`tuple`\\s, o ``start`` do segundo será "
"igual ao ``end`` do primeiro."

#: ../../reference/datamodel.rst:1552
msgid "No range will be backwards: ``end >= start`` for all triples."
msgstr "Nenhum intervalo será inverso: ``end >= start`` para todos os trios."

#: ../../reference/datamodel.rst:1553
msgid ""
"The last :class:`tuple` yielded will have ``end`` equal to the size of the :"
"term:`bytecode`."
msgstr ""
"A última :class:`tuple` gerada terá ``end`` igual ao tamanho do :term:"
"`bytecode`."

#: ../../reference/datamodel.rst:1556
msgid ""
"Zero-width ranges, where ``start == end``, are allowed. Zero-width ranges "
"are used for lines that are present in the source code, but have been "
"eliminated by the :term:`bytecode` compiler."
msgstr ""
"Intervalos de largura zero, onde ``start == end``, são permitidos. "
"Intervalos de largura zero são usados ​para linhas que estão presentes no "
"código-fonte, mas foram eliminadas pelo compilador de :term:`bytecode`."

#: ../../reference/datamodel.rst:1564
msgid ":pep:`626` - Precise line numbers for debugging and other tools."
msgstr ""
":pep:`626` - Números de linha precisos para depuração e outras ferramentas."

#: ../../reference/datamodel.rst:1565
msgid "The PEP that introduced the :meth:`!co_lines` method."
msgstr "A PEP que introduziu o método :meth:`!co_lines`."

#: ../../reference/datamodel.rst:1569
msgid ""
"Return a copy of the code object with new values for the specified fields."
msgstr ""
"Retorna uma cópia do objeto de código com novos valores para os campos "
"especificados."

#: ../../reference/datamodel.rst:1571
msgid ""
"Code objects are also supported by the generic function :func:`copy.replace`."
msgstr ""
"Objetos de código também são suportados pela função genérica :func:`copy."
"replace`."

#: ../../reference/datamodel.rst:1579
msgid "Frame objects"
msgstr "Objetos quadro"

#: ../../reference/datamodel.rst:1583
msgid ""
"Frame objects represent execution frames.  They may occur in :ref:`traceback "
"objects <traceback-objects>`, and are also passed to registered trace "
"functions."
msgstr ""
"Objetos quadro representam quadros de execução. Eles podem ocorrer em :ref:"
"`objetos traceback <traceback-objects>` e também são passados para funções "
"de rastreamento registradas."

#: ../../reference/datamodel.rst:1601
msgid ""
"Points to the previous stack frame (towards the caller), or ``None`` if this "
"is the bottom stack frame"
msgstr ""
"Aponta para o quadro de pilha anterior (em direção ao chamador), ou ``None`` "
"se este for o quadro de pilha mais abaixo."

#: ../../reference/datamodel.rst:1605
msgid ""
"The :ref:`code object <code-objects>` being executed in this frame. "
"Accessing this attribute raises an :ref:`auditing event <auditing>` ``object."
"__getattr__`` with arguments ``obj`` and ``\"f_code\"``."
msgstr ""
"O :ref:`objeto código <code-objects>` sendo executado neste quadro. Acessar "
"este atributo levanta um :ref:`evento de auditoria <auditing>` ``object."
"__getattr__`` com os argumentos ``obj`` e ``\"f_code\"``."

#: ../../reference/datamodel.rst:1610
msgid ""
"The mapping used by the frame to look up :ref:`local variables <naming>`. If "
"the frame refers to an :term:`optimized scope`, this may return a write-"
"through proxy object."
msgstr ""
"O mapeamento usado pelo quadro para procurar :ref:`variáveis ​locais "
"<naming>`. Se o quadro se referir a um :term:`escopo otimizado`, isso pode "
"retornar um objeto proxy write-through."

#: ../../reference/datamodel.rst:1615
msgid "Return a proxy for optimized scopes."
msgstr "Retorna um proxy para escopos otimizados."

#: ../../reference/datamodel.rst:1619
msgid ""
"The dictionary used by the frame to look up :ref:`global variables <naming>`"
msgstr ""
"O dicionário usado pelo quadro para procurar :ref:`variáveis ​globais "
"<naming>`"

#: ../../reference/datamodel.rst:1623
msgid ""
"The dictionary used by the frame to look up :ref:`built-in (intrinsic) names "
"<naming>`"
msgstr ""
"O dicionário usado pelo quadro para procurar :ref:`nomes embutidos "
"(intrínsecos) <naming>`"

#: ../../reference/datamodel.rst:1627
msgid ""
"The \"precise instruction\" of the frame object (this is an index into the :"
"term:`bytecode` string of the :ref:`code object <code-objects>`)"
msgstr ""
"A \"instrução precisa\" do objeto quadro (este é um índice na string :term:"
"`bytecode` do :ref:`objeto código <code-objects>`)"

#: ../../reference/datamodel.rst:1643
msgid ""
"If not ``None``, this is a function called for various events during code "
"execution (this is used by debuggers). Normally an event is triggered for "
"each new source line (see :attr:`~frame.f_trace_lines`)."
msgstr ""
"Se não for ``None``, esta é uma função chamada para vários eventos durante a "
"execução do código (isso é usado por depuradores). Normalmente, um evento é "
"disparado para cada nova linha de origem (veja :attr:`~frame.f_trace_lines`)."

#: ../../reference/datamodel.rst:1648
msgid ""
"Set this attribute to :const:`False` to disable triggering a tracing event "
"for each source line."
msgstr ""
"Defina este atributo como :const:`False` para desabilitar o acionamento de "
"um evento de rastreamento para cada linha de origem."

#: ../../reference/datamodel.rst:1652
msgid ""
"Set this attribute to :const:`True` to allow per-opcode events to be "
"requested. Note that this may lead to undefined interpreter behaviour if "
"exceptions raised by the trace function escape to the function being traced."
msgstr ""
"Defina este atributo para :const:`True` para permitir que eventos por opcode "
"sejam solicitados. Observe que isso pode levar a um comportamento indefinido "
"do interpretador se as exceções levantadas pela função de rastreamento "
"escaparem para a função que está sendo rastreada."

#: ../../reference/datamodel.rst:1658
msgid ""
"The current line number of the frame -- writing to this from within a trace "
"function jumps to the given line (only for the bottom-most frame).  A "
"debugger can implement a Jump command (aka Set Next Statement) by writing to "
"this attribute."
msgstr ""
"O número da linha atual do quadro -- escrever para isso de dentro de uma "
"função de rastreamento faz saltar para a linha dada (apenas para o quadro "
"mais abaixo). Um depurador pode implementar um comando Jump (também "
"conhecido como Set Next Statement) escrevendo para esse atributo."

#: ../../reference/datamodel.rst:1664
msgid "Frame object methods"
msgstr "Métodos de objetos quadro"

#: ../../reference/datamodel.rst:1666
msgid "Frame objects support one method:"
msgstr "Objetos quadro têm suporte a um método:"

#: ../../reference/datamodel.rst:1670
msgid ""
"This method clears all references to :ref:`local variables <naming>` held by "
"the frame.  Also, if the frame belonged to a :term:`generator`, the "
"generator is finalized.  This helps break reference cycles involving frame "
"objects (for example when catching an :ref:`exception <bltin-exceptions>` "
"and storing its :ref:`traceback <traceback-objects>` for later use)."
msgstr ""
"Este método limpa todas as referências a :ref:`variáveis locais <naming>` "
"mantidas pelo quadro. Além disso, se o quadro pertencer a um :term:"
"`gerador`, o gerador é finalizado. Isso ajuda a quebrar os ciclos de "
"referência que envolvem objetos quadro (por exemplo, ao capturar uma :ref:"
"`exceção <bltin-exceptions>` e armazenar seu :ref:`traceback <traceback-"
"objects>` para uso posterior)."

#: ../../reference/datamodel.rst:1676
msgid ""
":exc:`RuntimeError` is raised if the frame is currently executing or "
"suspended."
msgstr ""
":exc:`RuntimeError` é levantada se o quadro estiver em execução ou suspenso."

#: ../../reference/datamodel.rst:1681
msgid ""
"Attempting to clear a suspended frame raises :exc:`RuntimeError` (as has "
"always been the case for executing frames)."
msgstr ""
"Tentar limpar um quadro suspenso levanta :exc:`RuntimeError` (como sempre "
"foi o caso para quadros em execução)."

#: ../../reference/datamodel.rst:1689
msgid "Traceback objects"
msgstr "Objetos traceback"

#: ../../reference/datamodel.rst:1702
msgid ""
"Traceback objects represent the stack trace of an :ref:`exception <tut-"
"errors>`. A traceback object is implicitly created when an exception occurs, "
"and may also be explicitly created by calling :class:`types.TracebackType`."
msgstr ""
"Objetos traceback representam o stack trace (situação da pilha de execução) "
"de uma :ref:`exceção <tut-errors>`. Um objeto traceback é criado "
"implicitamente quando ocorre uma exceção e também pode ser criado "
"explicitamente chamando :class:`types.TracebackType`."

#: ../../reference/datamodel.rst:1707
msgid "Traceback objects can now be explicitly instantiated from Python code."
msgstr ""
"Objetos traceback agora podem ser instanciados explicitamente a partir de "
"código Python."

#: ../../reference/datamodel.rst:1710
msgid ""
"For implicitly created tracebacks, when the search for an exception handler "
"unwinds the execution stack, at each unwound level a traceback object is "
"inserted in front of the current traceback.  When an exception handler is "
"entered, the stack trace is made available to the program. (See section :ref:"
"`try`.) It is accessible as the third item of the tuple returned by :func:"
"`sys.exc_info`, and as the :attr:`~BaseException.__traceback__` attribute of "
"the caught exception."
msgstr ""
"Para tracebacks criados implicitamente, quando a busca por um manipulador de "
"exceção desenrola a pilha de execução, em cada nível desenrolado um objeto "
"traceback é inserido na frente do traceback atual. Quando um manipulador de "
"exceção é inserido, o stack trace é disponibilizado para o programa. (Veja a "
"seção :ref:`try`.) É acessível como o terceiro item da tupla retornada por :"
"func:`sys.exc_info`, e como o atributo :attr:`~BaseException.__traceback__` "
"da exceção capturada."

#: ../../reference/datamodel.rst:1719
msgid ""
"When the program contains no suitable handler, the stack trace is written "
"(nicely formatted) to the standard error stream; if the interpreter is "
"interactive, it is also made available to the user as :data:`sys."
"last_traceback`."
msgstr ""
"Quando o programa não contém um manipulador adequado, o stack trace é "
"escrito (formatado de maneira adequada) no fluxo de erro padrão; se o "
"interpretador for interativo, ele também é disponibilizado ao usuário como :"
"data:`sys.last_traceback`."

#: ../../reference/datamodel.rst:1724
msgid ""
"For explicitly created tracebacks, it is up to the creator of the traceback "
"to determine how the :attr:`~traceback.tb_next` attributes should be linked "
"to form a full stack trace."
msgstr ""
"Para tracebacks criados explicitamente, cabe ao criador do traceback "
"determinar como os atributos :attr:`~traceback.tb_next` devem ser vinculados "
"para formar um stack trace completo."

#: ../../reference/datamodel.rst:1739
msgid ""
"Points to the execution :ref:`frame <frame-objects>` of the current level."
msgstr ""
"Aponta para o :ref:`quadro <frame-objects>` de execução do nível atual."

#: ../../reference/datamodel.rst:1742
msgid ""
"Accessing this attribute raises an :ref:`auditing event <auditing>` ``object."
"__getattr__`` with arguments ``obj`` and ``\"tb_frame\"``."
msgstr ""
"Acessar este atributo levanta um :ref:`evento de auditoria <auditing>` "
"``object.__getattr__`` com os argumentos ``obj`` e ``\"tb_frame\"``."

#: ../../reference/datamodel.rst:1747
msgid "Gives the line number where the exception occurred"
msgstr "Fornece o número da linha onde ocorreu a exceção"

#: ../../reference/datamodel.rst:1750
msgid "Indicates the \"precise instruction\"."
msgstr "Indica a \"instrução precisa\"."

#: ../../reference/datamodel.rst:1752
msgid ""
"The line number and last instruction in the traceback may differ from the "
"line number of its :ref:`frame object <frame-objects>` if the exception "
"occurred in a :keyword:`try` statement with no matching except clause or "
"with a :keyword:`finally` clause."
msgstr ""
"O número da linha e a última instrução no traceback podem diferir do número "
"da linha do seu :ref:`objeto quadro <frame-objects>` se a exceção ocorreu em "
"uma instrução :keyword:`try` sem cláusula except correspondente ou com uma "
"cláusula :keyword:`finally`."

#: ../../reference/datamodel.rst:1763
msgid ""
"The special writable attribute :attr:`!tb_next` is the next level in the "
"stack trace (towards the frame where the exception occurred), or ``None`` if "
"there is no next level."
msgstr ""
"O atributo especial de escrita :attr:`!tb_next` é o próximo nível no stack "
"trace (em direção ao quadro onde a exceção ocorreu), ou ``None`` se não "
"houver próximo nível."

#: ../../reference/datamodel.rst:1767
msgid "This attribute is now writable"
msgstr "Este atributo agora é gravável"

#: ../../reference/datamodel.rst:1772
msgid "Slice objects"
msgstr "Objetos slice"

#: ../../reference/datamodel.rst:1776
msgid ""
"Slice objects are used to represent slices for :meth:`~object.__getitem__` "
"methods.  They are also created by the built-in :func:`slice` function."
msgstr ""
"Objetos slice são usados para representar fatias para métodos :meth:`~object."
"__getitem__`. Eles também são criados pela função embutida :func:`slice`."

#: ../../reference/datamodel.rst:1785
msgid ""
"Special read-only attributes: :attr:`~slice.start` is the lower bound; :attr:"
"`~slice.stop` is the upper bound; :attr:`~slice.step` is the step value; "
"each is ``None`` if omitted.  These attributes can have any type."
msgstr ""
"Atributos especiais de somente leitura: :attr:`~slice.start` é o limite "
"inferior; :attr:`~slice.stop` é o limite superior; :attr:`~slice.step` é o "
"valor da diferença entre elementos subjacentes; cada um desses atributos é "
"``None`` se omitido. Esses atributos podem ter qualquer tipo."

#: ../../reference/datamodel.rst:1789
msgid "Slice objects support one method:"
msgstr "Objetos slice têm suporte a um método:"

#: ../../reference/datamodel.rst:1793
msgid ""
"This method takes a single integer argument *length* and computes "
"information about the slice that the slice object would describe if applied "
"to a sequence of *length* items.  It returns a tuple of three integers; "
"respectively these are the *start* and *stop* indices and the *step* or "
"stride length of the slice. Missing or out-of-bounds indices are handled in "
"a manner consistent with regular slices."
msgstr ""
"Este método recebe um único argumento inteiro *length* e calcula informações "
"sobre a fatia que o objeto slice descreveria se aplicado a uma sequência de "
"itens de *length*. Ele retorna uma tupla de três inteiros; respectivamente, "
"estes são os índices *start* e *stop* e o *step* ou comprimento de avanços "
"da fatia. Índices ausentes ou fora dos limites são tratados de maneira "
"consistente com fatias regulares."

#: ../../reference/datamodel.rst:1802
msgid "Static method objects"
msgstr "Objetos método estático"

#: ../../reference/datamodel.rst:1804
msgid ""
"Static method objects provide a way of defeating the transformation of "
"function objects to method objects described above. A static method object "
"is a wrapper around any other object, usually a user-defined method object. "
"When a static method object is retrieved from a class or a class instance, "
"the object actually returned is the wrapped object, which is not subject to "
"any further transformation. Static method objects are also callable. Static "
"method objects are created by the built-in :func:`staticmethod` constructor."
msgstr ""
"Objetos método estático fornecem uma forma de transformar objetos função em "
"objetos métodos descritos acima. Um objeto método estático é um invólucro em "
"torno de qualquer outro objeto, comumente um objeto método definido pelo "
"usuário. Quando um objeto método estático é recuperado de uma classe ou de "
"uma instância de classe, o objeto retornado é o objeto encapsulado, do qual "
"não está sujeito a nenhuma transformação adicional. Objetos método estático "
"também são chamáveis. Objetos método estático são criados pelo construtor "
"embutido :func:`staticmethod`."

#: ../../reference/datamodel.rst:1814
msgid "Class method objects"
msgstr "Objetos método de classe"

#: ../../reference/datamodel.rst:1816
msgid ""
"A class method object, like a static method object, is a wrapper around "
"another object that alters the way in which that object is retrieved from "
"classes and class instances. The behaviour of class method objects upon such "
"retrieval is described above, under :ref:`\"instance methods\" <instance-"
"methods>`. Class method objects are created by the built-in :func:"
"`classmethod` constructor."
msgstr ""
"Um objeto método de classe, como um objeto método estático, é um invólucro "
"em torno de outro objeto que altera a maneira como esse objeto é recuperado "
"de classes e instâncias de classe. O comportamento dos objetos método de "
"classe após tal recuperação é descrito acima, sob :ref:`\"métodos de "
"instância\" <instance-methods>`. Objetos método de classe são criados pelo "
"construtor embutido :func:`classmethod`."

#: ../../reference/datamodel.rst:1826
msgid "Special method names"
msgstr "Nomes de métodos especiais"

#: ../../reference/datamodel.rst:1832
msgid ""
"A class can implement certain operations that are invoked by special syntax "
"(such as arithmetic operations or subscripting and slicing) by defining "
"methods with special names. This is Python's approach to :dfn:`operator "
"overloading`, allowing classes to define their own behavior with respect to "
"language operators.  For instance, if a class defines a method named :meth:"
"`~object.__getitem__`, and ``x`` is an instance of this class, then ``x[i]`` "
"is roughly equivalent to ``type(x).__getitem__(x, i)``.  Except where "
"mentioned, attempts to execute an operation raise an exception when no "
"appropriate method is defined (typically :exc:`AttributeError` or :exc:"
"`TypeError`)."
msgstr ""
"Uma classe pode implementar certas operações que são chamadas por sintaxe "
"especial (como operações aritméticas ou indexação e fatiamento), definindo "
"métodos com nomes especiais. Esta é a abordagem do Python para :dfn:"
"`sobrecarga de operador`, permitindo que as classes definam seu próprio "
"comportamento em relação aos operadores da linguagem. Por exemplo, se uma "
"classe define um método chamado :meth:`~object.__getitem__`, e ``x`` é uma "
"instância desta classe, então ``x[i]`` é aproximadamente equivalente a "
"``type(x).__getitem__(x, i)``. Exceto onde mencionado, as tentativas de "
"executar uma operação levantam uma exceção quando nenhum método apropriado é "
"definido (tipicamente :exc:`AttributeError` ou :exc:`TypeError`)."

#: ../../reference/datamodel.rst:1843
msgid ""
"Setting a special method to ``None`` indicates that the corresponding "
"operation is not available.  For example, if a class sets :meth:`~object."
"__iter__` to ``None``, the class is not iterable, so calling :func:`iter` on "
"its instances will raise a :exc:`TypeError` (without falling back to :meth:"
"`~object.__getitem__`). [#]_"
msgstr ""
"Definir um método especial para ``None`` indica que a operação "
"correspondente não está disponível. Por exemplo, se uma classe define :meth:"
"`~object.__iter__` para ``None``, a classe não é iterável, então chamar :"
"func:`iter` em suas instâncias irá levantar um :exc:`TypeError` (sem "
"retroceder para :meth:`~object.__getitem__`). [#]_"

#: ../../reference/datamodel.rst:1849
msgid ""
"When implementing a class that emulates any built-in type, it is important "
"that the emulation only be implemented to the degree that it makes sense for "
"the object being modelled.  For example, some sequences may work well with "
"retrieval of individual elements, but extracting a slice may not make "
"sense.  (One example of this is the :class:`~xml.dom.NodeList` interface in "
"the W3C's Document Object Model.)"
msgstr ""
"Ao implementar uma classe que emula qualquer tipo embutido, é importante que "
"a emulação seja implementada apenas na medida em que faça sentido para o "
"objeto que está sendo modelado. Por exemplo, algumas sequências podem "
"funcionar bem com a recuperação de elementos individuais, mas extrair uma "
"fatia pode não fazer sentido. (Um exemplo disso é a interface :class:`~xml."
"dom.NodeList` no Document Object Model do W3C.)"

#: ../../reference/datamodel.rst:1860
msgid "Basic customization"
msgstr "Personalização básica"

#: ../../reference/datamodel.rst:1866
msgid ""
"Called to create a new instance of class *cls*.  :meth:`__new__` is a static "
"method (special-cased so you need not declare it as such) that takes the "
"class of which an instance was requested as its first argument.  The "
"remaining arguments are those passed to the object constructor expression "
"(the call to the class).  The return value of :meth:`__new__` should be the "
"new object instance (usually an instance of *cls*)."
msgstr ""
"Chamado para criar uma nova instância da classe *cls*. :meth:`__new__` é um "
"método estático (é um caso especial, então você não precisa declará-lo como "
"tal) que recebe a classe da qual uma instância foi solicitada como seu "
"primeiro argumento. Os argumentos restantes são aqueles passados para a "
"expressão do construtor do objeto (a chamada para a classe). O valor de "
"retorno de :meth:`__new__` deve ser a nova instância do objeto (geralmente "
"uma instância de *cls*)."

#: ../../reference/datamodel.rst:1873
msgid ""
"Typical implementations create a new instance of the class by invoking the "
"superclass's :meth:`__new__` method using ``super().__new__(cls[, ...])`` "
"with appropriate arguments and then modifying the newly created instance as "
"necessary before returning it."
msgstr ""
"Implementações típicas criam uma nova instância da classe invocando o "
"método :meth:`__new__` da superclasse usando ``super().__new__(cls[, ...])`` "
"com os argumentos apropriados e, em seguida, modificando a instância recém-"
"criada conforme necessário antes de retorná-la."

#: ../../reference/datamodel.rst:1878
msgid ""
"If :meth:`__new__` is invoked during object construction and it returns an "
"instance of *cls*, then the new instance’s :meth:`__init__` method will be "
"invoked like ``__init__(self[, ...])``, where *self* is the new instance and "
"the remaining arguments are the same as were passed to the object "
"constructor."
msgstr ""
"Se :meth:`__new__` é chamado durante a construção do objeto e retorna uma "
"instância de *cls*, então o método :meth:`__init__` da nova instância será "
"chamado como ``__init__(self[, ...])``, onde *self* é a nova instância e os "
"argumentos restantes são os mesmos que foram passados para o construtor do "
"objeto."

#: ../../reference/datamodel.rst:1883
msgid ""
"If :meth:`__new__` does not return an instance of *cls*, then the new "
"instance's :meth:`__init__` method will not be invoked."
msgstr ""
"Se :meth:`__new__` não retornar uma instância de *cls*, então o método :meth:"
"`__init__` da nova instância não será invocado."

#: ../../reference/datamodel.rst:1886
msgid ""
":meth:`__new__` is intended mainly to allow subclasses of immutable types "
"(like int, str, or tuple) to customize instance creation.  It is also "
"commonly overridden in custom metaclasses in order to customize class "
"creation."
msgstr ""
":meth:`__new__` destina-se principalmente a permitir que subclasses de tipos "
"imutáveis (como int, str ou tupla) personalizem a criação de instâncias. "
"Também é comumente substituído em metaclasses personalizadas para "
"personalizar a criação de classes."

#: ../../reference/datamodel.rst:1895
msgid ""
"Called after the instance has been created (by :meth:`__new__`), but before "
"it is returned to the caller.  The arguments are those passed to the class "
"constructor expression.  If a base class has an :meth:`__init__` method, the "
"derived class's :meth:`__init__` method, if any, must explicitly call it to "
"ensure proper initialization of the base class part of the instance; for "
"example: ``super().__init__([args...])``."
msgstr ""
"Chamado após a instância ter sido criada (por :meth:`__new__`), mas antes de "
"ser retornada ao chamador. Os argumentos são aqueles passados para a "
"expressão do construtor da classe. Se uma classe base tem um método :meth:"
"`__init__`, o método :meth:`__init__` da classe derivada, se houver, deve "
"chamá-lo explicitamente para garantir a inicialização apropriada da parte da "
"classe base da instância; por exemplo: ``super().__init__([args...])``."

#: ../../reference/datamodel.rst:1902
msgid ""
"Because :meth:`__new__` and :meth:`__init__` work together in constructing "
"objects (:meth:`__new__` to create it, and :meth:`__init__` to customize "
"it), no non-``None`` value may be returned by :meth:`__init__`; doing so "
"will cause a :exc:`TypeError` to be raised at runtime."
msgstr ""
"Porque :meth:`__new__` e :meth:`__init__` trabalham juntos na construção de "
"objetos (:meth:`__new__` para criá-lo e :meth:`__init__` para personalizá-"
"lo), nenhum valor diferente de ``None`` pode ser retornado por :meth:"
"`__init__`; fazer isso fará com que uma :exc:`TypeError` seja levantada em "
"tempo de execução."

#: ../../reference/datamodel.rst:1915
msgid ""
"Called when the instance is about to be destroyed.  This is also called a "
"finalizer or (improperly) a destructor.  If a base class has a :meth:"
"`__del__` method, the derived class's :meth:`__del__` method, if any, must "
"explicitly call it to ensure proper deletion of the base class part of the "
"instance."
msgstr ""
"Chamado quando a instância está prestes a ser destruída. Também é chamada de "
"finalizador ou (incorretamente) de destruidor. Se uma classe base tem um "
"método :meth:`__del__`, o método :meth:`__del__` da classe derivada, se "
"houver, deve chamá-lo explicitamente para garantir a exclusão adequada da "
"parte da classe base da instância."

#: ../../reference/datamodel.rst:1921
msgid ""
"It is possible (though not recommended!) for the :meth:`__del__` method to "
"postpone destruction of the instance by creating a new reference to it.  "
"This is called object *resurrection*.  It is implementation-dependent "
"whether :meth:`__del__` is called a second time when a resurrected object is "
"about to be destroyed; the current :term:`CPython` implementation only calls "
"it once."
msgstr ""
"É possível (embora não recomendado!) para o método :meth:`__del__` adiar a "
"destruição da instância criando uma nova referência a ela. Isso é chamado de "
"*ressurreição* de objeto. Depende se a implementação de :meth:`__del__` é "
"chamado uma segunda vez quando um objeto ressuscitado está prestes a ser "
"destruído; a implementação atual do :term:`CPython` chama-o apenas uma vez."

#: ../../reference/datamodel.rst:1928
msgid ""
"It is not guaranteed that :meth:`__del__` methods are called for objects "
"that still exist when the interpreter exits. :class:`weakref.finalize` "
"provides a straightforward way to register a cleanup function to be called "
"when an object is garbage collected."
msgstr ""
"Não há garantia de que os métodos :meth:`__del__` sejam chamados para "
"objetos que ainda existem quando o interpretador sai. :class:`weakref."
"finalize` fornece uma maneira direta de registrar uma função de limpeza a "
"ser chamada quando um objeto é coletado como lixo."

#: ../../reference/datamodel.rst:1935
msgid ""
"``del x`` doesn't directly call ``x.__del__()`` --- the former decrements "
"the reference count for ``x`` by one, and the latter is only called when "
"``x``'s reference count reaches zero."
msgstr ""
"``del x`` não chama diretamente ``x.__del__()`` -- o primeiro diminui a "
"contagem de referências para ``x`` em um, e o segundo só é chamado quando a "
"contagem de referências de ``x`` atinge zero."

#: ../../reference/datamodel.rst:1940
msgid ""
"It is possible for a reference cycle to prevent the reference count of an "
"object from going to zero.  In this case, the cycle will be later detected "
"and deleted by the :term:`cyclic garbage collector <garbage collection>`.  A "
"common cause of reference cycles is when an exception has been caught in a "
"local variable.  The frame's locals then reference the exception, which "
"references its own traceback, which references the locals of all frames "
"caught in the traceback."
msgstr ""
"É possível que um ciclo de referência impeça que a contagem de referência de "
"um objeto chegue a zero. Neste caso, mais tarde, o ciclo será detectado e "
"deletado pelo :term:`coletor de lixo cíclico <garbage collection>`.  Uma "
"causa comum de referências cíclicas é quando uma exceção foi capturada em "
"uma variável local. O locals do quadro então referencia a exceção, que "
"referencia seu próprio traceback, que referencia o locals de todos os "
"quadros capturados no traceback."

#: ../../reference/datamodel.rst:1950
msgid "Documentation for the :mod:`gc` module."
msgstr "Documentação do módulo :mod:`gc`."

#: ../../reference/datamodel.rst:1954
msgid ""
"Due to the precarious circumstances under which :meth:`__del__` methods are "
"invoked, exceptions that occur during their execution are ignored, and a "
"warning is printed to ``sys.stderr`` instead.  In particular:"
msgstr ""
"Devido às circunstâncias precárias sob as quais os métodos :meth:`__del__` "
"são invocados, as exceções que ocorrem durante sua execução são ignoradas e "
"um aviso é impresso em ``sys.stderr`` em seu lugar. Em particular:"

#: ../../reference/datamodel.rst:1958
msgid ""
":meth:`__del__` can be invoked when arbitrary code is being executed, "
"including from any arbitrary thread.  If :meth:`__del__` needs to take a "
"lock or invoke any other blocking resource, it may deadlock as the resource "
"may already be taken by the code that gets interrupted to execute :meth:"
"`__del__`."
msgstr ""
":meth:`__del__` pode ser chamado quando um código arbitrário está sendo "
"executado, incluindo de qualquer thread arbitrária. Se :meth:`__del__` "
"precisa bloquear ou invocar qualquer outro recurso de bloqueio, pode ocorrer "
"um impasse, pois o recurso já pode ter sido levado pelo código que é "
"interrompido para executar :meth:`__del__`."

#: ../../reference/datamodel.rst:1964
msgid ""
":meth:`__del__` can be executed during interpreter shutdown.  As a "
"consequence, the global variables it needs to access (including other "
"modules) may already have been deleted or set to ``None``. Python guarantees "
"that globals whose name begins with a single underscore are deleted from "
"their module before other globals are deleted; if no other references to "
"such globals exist, this may help in assuring that imported modules are "
"still available at the time when the :meth:`__del__` method is called."
msgstr ""
":meth:`__del__` pode ser executado durante o encerramento do interpretador. "
"Como consequência, as variáveis globais que ele precisa acessar (incluindo "
"outros módulos) podem já ter sido excluídas ou definidas como ``None``. "
"Python garante que os globais cujo nome comece com um único sublinhado sejam "
"excluídos de seu módulo antes que outros globais sejam excluídos; se nenhuma "
"outra referência a tais globais existir, isso pode ajudar a garantir que os "
"módulos importados ainda estejam disponíveis no momento em que o método :"
"meth:`__del__` for chamado."

#: ../../reference/datamodel.rst:1979
msgid ""
"Called by the :func:`repr` built-in function to compute the \"official\" "
"string representation of an object.  If at all possible, this should look "
"like a valid Python expression that could be used to recreate an object with "
"the same value (given an appropriate environment).  If this is not possible, "
"a string of the form ``<...some useful description...>`` should be returned. "
"The return value must be a string object. If a class defines :meth:"
"`__repr__` but not :meth:`__str__`, then :meth:`__repr__` is also used when "
"an \"informal\" string representation of instances of that class is required."
msgstr ""
"Chamado pela função embutida :func:`repr` para calcular a representação da "
"string \"oficial\" de um objeto. Se possível, isso deve parecer uma "
"expressão Python válida que pode ser usada para recriar um objeto com o "
"mesmo valor (dado um ambiente apropriado). Se isso não for possível, uma "
"string no formato ``<...alguma descrição útil...>`` deve ser retornada. O "
"valor de retorno deve ser um objeto string. Se uma classe define :meth:"
"`__repr__`, mas não :meth:`__str__`, então :meth:`__repr__` também é usado "
"quando uma representação de string \"informal\" de instâncias daquela classe "
"é necessária."

#: ../../reference/datamodel.rst:1988
msgid ""
"This is typically used for debugging, so it is important that the "
"representation is information-rich and unambiguous. A default implementation "
"is provided by the :class:`object` class itself."
msgstr ""
"Isso é normalmente usado para depuração, portanto, é importante que a "
"representação seja rica em informações e inequívoca. Uma implementação "
"padrão é fornecida pela própria classe :class:`object`."

#: ../../reference/datamodel.rst:2000
msgid ""
"Called by :func:`str(object) <str>`, the default :meth:`__format__` "
"implementation, and the built-in function :func:`print`, to compute the "
"\"informal\" or nicely printable string representation of an object.  The "
"return value must be a :ref:`str <textseq>` object."
msgstr ""
"Chamado por :func:`str(object) <str>`, a implementação padrão de :meth:"
"`__format__`, e as funções embutidas :func:`print`, para calcular a "
"representação da string \"informal\" ou agradável para exibição de um "
"objeto. O valor de retorno deve ser um objeto :ref:`str <textseq>`."

#: ../../reference/datamodel.rst:2005
msgid ""
"This method differs from :meth:`object.__repr__` in that there is no "
"expectation that :meth:`__str__` return a valid Python expression: a more "
"convenient or concise representation can be used."
msgstr ""
"Este método difere de :meth:`object.__repr__` por não haver expectativa de "
"que :meth:`__str__` retorne uma expressão Python válida: uma representação "
"mais conveniente ou concisa pode ser usada."

#: ../../reference/datamodel.rst:2009
msgid ""
"The default implementation defined by the built-in type :class:`object` "
"calls :meth:`object.__repr__`."
msgstr ""
"A implementação padrão definida pelo tipo embutido :class:`object` chama :"
"meth:`object.__repr__`."

#: ../../reference/datamodel.rst:2019
msgid ""
"Called by :ref:`bytes <func-bytes>` to compute a byte-string representation "
"of an object. This should return a :class:`bytes` object. The :class:"
"`object` class itself does not provide this method."
msgstr ""

#: ../../reference/datamodel.rst:2031
msgid ""
"Called by the :func:`format` built-in function, and by extension, evaluation "
"of :ref:`formatted string literals <f-strings>` and the :meth:`str.format` "
"method, to produce a \"formatted\" string representation of an object. The "
"*format_spec* argument is a string that contains a description of the "
"formatting options desired. The interpretation of the *format_spec* argument "
"is up to the type implementing :meth:`__format__`, however most classes will "
"either delegate formatting to one of the built-in types, or use a similar "
"formatting option syntax."
msgstr ""
"Chamado pela função embutida :func:`format` e, por extensão, avaliação de :"
"ref:`literais de string formatadas <f-strings>` e o método :meth:`str."
"format`, para produzir uma representação de string \"formatada\" de um "
"objeto. O argumento *format_spec* é uma string que contém uma descrição das "
"opções de formatação desejadas. A interpretação do argumento *format_spec* "
"depende do tipo que implementa :meth:`__format__`, entretanto a maioria das "
"classes delegará a formatação a um dos tipos embutidos ou usará uma sintaxe "
"de opção de formatação semelhante."

#: ../../reference/datamodel.rst:2041
msgid ""
"See :ref:`formatspec` for a description of the standard formatting syntax."
msgstr ""
"Consulte :ref:`formatspec` para uma descrição da sintaxe de formatação "
"padrão."

#: ../../reference/datamodel.rst:2043
msgid "The return value must be a string object."
msgstr "O valor de retorno deve ser um objeto string."

#: ../../reference/datamodel.rst:2045
msgid ""
"The default implementation by the :class:`object` class should be given an "
"empty *format_spec* string. It delegates to :meth:`__str__`."
msgstr ""

#: ../../reference/datamodel.rst:2048
msgid ""
"The __format__ method of ``object`` itself raises a :exc:`TypeError` if "
"passed any non-empty string."
msgstr ""
"O método __format__ do próprio ``object`` levanta uma :exc:`TypeError` se "
"passada qualquer string não vazia."

#: ../../reference/datamodel.rst:2052
msgid ""
"``object.__format__(x, '')`` is now equivalent to ``str(x)`` rather than "
"``format(str(x), '')``."
msgstr ""
"``object.__format__(x, '')`` é agora equivalente a ``str(x)`` em vez de "
"``format(str(x), '')``."

#: ../../reference/datamodel.rst:2068
msgid ""
"These are the so-called \"rich comparison\" methods. The correspondence "
"between operator symbols and method names is as follows: ``x<y`` calls ``x."
"__lt__(y)``, ``x<=y`` calls ``x.__le__(y)``, ``x==y`` calls ``x.__eq__(y)``, "
"``x!=y`` calls ``x.__ne__(y)``, ``x>y`` calls ``x.__gt__(y)``, and ``x>=y`` "
"calls ``x.__ge__(y)``."
msgstr ""
"Esses são os chamados métodos de \"comparação rica\". A correspondência "
"entre os símbolos do operador e os nomes dos métodos é a seguinte: ``x<y`` "
"chama ``x.__lt__(y)``, ``x<=y`` chama ``x.__le__(y)``, ``x==y`` chama ``x."
"__eq__(y)``, ``x!=y`` chama ``x.__ne__(y)``, ``x>y`` chama ``x.__gt__(y)`` e "
"``x>=y`` chama ``x.__ge__(y)``."

#: ../../reference/datamodel.rst:2074
msgid ""
"A rich comparison method may return the singleton :data:`NotImplemented` if "
"it does not implement the operation for a given pair of arguments. By "
"convention, ``False`` and ``True`` are returned for a successful comparison. "
"However, these methods can return any value, so if the comparison operator "
"is used in a Boolean context (e.g., in the condition of an ``if`` "
"statement), Python will call :func:`bool` on the value to determine if the "
"result is true or false."
msgstr ""
"Um método de comparação rica pode retornar o singleton :data:"
"`NotImplemented` se não implementar a operação para um determinado par de "
"argumentos. Por convenção, ``False`` e ``True`` são retornados para uma "
"comparação bem-sucedida. No entanto, esses métodos podem retornar qualquer "
"valor, portanto, se o operador de comparação for usado em um contexto "
"booleano (por exemplo, na condição de uma instrução ``if``), Python irá "
"chamar :func:`bool` no valor para determinar se o resultado for verdadeiro "
"ou falso."

#: ../../reference/datamodel.rst:2081
msgid ""
"By default, ``object`` implements :meth:`__eq__` by using ``is``, returning :"
"data:`NotImplemented` in the case of a false comparison: ``True if x is y "
"else NotImplemented``. For :meth:`__ne__`, by default it delegates to :meth:"
"`__eq__` and inverts the result unless it is :data:`!NotImplemented`.  There "
"are no other implied relationships among the comparison operators or default "
"implementations; for example, the truth of ``(x<y or x==y)`` does not imply "
"``x<=y``. To automatically generate ordering operations from a single root "
"operation, see :func:`functools.total_ordering`."
msgstr ""
"Por padrão, ``object`` implementa :meth:`__eq__` usando ``is``, retornando :"
"data:`NotImplemented` no caso de uma comparação falsa: ``True if x is y else "
"NotImplemented``. Para :meth:`__ne__`, por padrão ele delega para :meth:"
"`__eq__` e inverte o resultado a menos que seja :data:`!NotImplemented`. Não "
"há outras relações implícitas entre os operadores de comparação ou "
"implementações padrão; por exemplo, o valor verdadeiro de ``(x<y or x==y)`` "
"não implica ``x<=y``. Para gerar operações de ordenação automaticamente a "
"partir de uma única operação raiz, consulte :func:`functools.total_ordering`."

#: ../../reference/datamodel.rst:2090
msgid ""
"By default, the :class:`object` class provides implementations consistent "
"with :ref:`expressions-value-comparisons`: equality compares according to "
"object identity, and order comparisons raise :exc:`TypeError`. Each default "
"method may generate these results directly, but may also return :data:"
"`NotImplemented`."
msgstr ""

#: ../../reference/datamodel.rst:2096
msgid ""
"See the paragraph on :meth:`__hash__` for some important notes on creating :"
"term:`hashable` objects which support custom comparison operations and are "
"usable as dictionary keys."
msgstr ""
"Veja o parágrafo sobre :meth:`__hash__` para algumas notas importantes sobre "
"a criação de objetos :term:`hasheáveis <hashable>` que implementam operações "
"de comparação personalizadas e são utilizáveis como chaves de dicionário."

#: ../../reference/datamodel.rst:2100
msgid ""
"There are no swapped-argument versions of these methods (to be used when the "
"left argument does not support the operation but the right argument does); "
"rather, :meth:`__lt__` and :meth:`__gt__` are each other's reflection, :meth:"
"`__le__` and :meth:`__ge__` are each other's reflection, and :meth:`__eq__` "
"and :meth:`__ne__` are their own reflection. If the operands are of "
"different types, and the right operand's type is a direct or indirect "
"subclass of the left operand's type, the reflected method of the right "
"operand has priority, otherwise the left operand's method has priority.  "
"Virtual subclassing is not considered."
msgstr ""
"Não há versões de argumentos trocados desses métodos (a serem usados quando "
"o argumento esquerdo não tem suporte à operação, mas o argumento direito "
"sim); em vez disso, :meth:`__lt__` e :meth:`__gt__` são o reflexo um do "
"outro, :meth:`__le__` e :meth:`__ge__` são o reflexo um do outro, e :meth:"
"`__eq__` e :meth:`__ne__` são seu próprio reflexo. Se os operandos são de "
"tipos diferentes e o tipo do operando direito é uma subclasse direta ou "
"indireta do tipo do operando esquerdo, o método refletido do operando "
"direito tem prioridade, caso contrário, o método do operando esquerdo tem "
"prioridade. Subclasse virtual não é considerada."

#: ../../reference/datamodel.rst:2111
msgid ""
"When no appropriate method returns any value other than :data:"
"`NotImplemented`, the ``==`` and ``!=`` operators will fall back to ``is`` "
"and ``is not``, respectively."
msgstr ""
"Quando nenhum método apropriado retorna qualquer valor diferente de :data:"
"`NotImplemented`, os operadores ``==`` e ``!=`` retornarão para ``is`` e "
"``is not``, respectivamente."

#: ../../reference/datamodel.rst:2120
msgid ""
"Called by built-in function :func:`hash` and for operations on members of "
"hashed collections including :class:`set`, :class:`frozenset`, and :class:"
"`dict`.  The ``__hash__()`` method should return an integer. The only "
"required property is that objects which compare equal have the same hash "
"value; it is advised to mix together the hash values of the components of "
"the object that also play a part in comparison of objects by packing them "
"into a tuple and hashing the tuple. Example::"
msgstr ""
"Chamado pela função embutida :func:`hash` e para operações em membros de "
"coleções com hash incluindo :class:`set`, :class:`frozenset` e :class:"
"`dict`. O método ``__hash__()`` deve retornar um inteiro. A única "
"propriedade necessária é que os objetos que são comparados iguais tenham o "
"mesmo valor de hash; é aconselhável misturar os valores hash dos componentes "
"do objeto que também desempenham um papel na comparação dos objetos, "
"empacotando-os em uma tupla e fazendo o hash da tupla. Exemplo::"

#: ../../reference/datamodel.rst:2128
msgid ""
"def __hash__(self):\n"
"    return hash((self.name, self.nick, self.color))"
msgstr ""

#: ../../reference/datamodel.rst:2133
msgid ""
":func:`hash` truncates the value returned from an object's custom :meth:"
"`__hash__` method to the size of a :c:type:`Py_ssize_t`.  This is typically "
"8 bytes on 64-bit builds and 4 bytes on 32-bit builds.  If an object's   :"
"meth:`__hash__` must interoperate on builds of different bit sizes, be sure "
"to check the width on all supported builds.  An easy way to do this is with "
"``python -c \"import sys; print(sys.hash_info.width)\"``."
msgstr ""
":func:`hash` trunca o valor retornado do método :meth:`__hash__` "
"personalizado de um objeto para o tamanho de um :c:type:`Py_ssize_t`. Isso é "
"normalmente 8 bytes em compilações de 64 bits e 4 bytes em compilações de 32 "
"bits. Se o :meth:`__hash__` de um objeto deve interoperar em compilações de "
"tamanhos de bits diferentes, certifique-se de verificar a largura em todas "
"as compilações com suporte. Uma maneira fácil de fazer isso é com ``python -"
"c \"import sys; print(sys.hash_info.width)\"``."

#: ../../reference/datamodel.rst:2141
msgid ""
"If a class does not define an :meth:`__eq__` method it should not define a :"
"meth:`__hash__` operation either; if it defines :meth:`__eq__` but not :meth:"
"`__hash__`, its instances will not be usable as items in hashable "
"collections.  If a class defines mutable objects and implements an :meth:"
"`__eq__` method, it should not implement :meth:`__hash__`, since the "
"implementation of :term:`hashable` collections requires that a key's hash "
"value is immutable (if the object's hash value changes, it will be in the "
"wrong hash bucket)."
msgstr ""
"Se uma classe não define um método :meth:`__eq__`, ela também não deve "
"definir uma operação :meth:`__hash__`; se define :meth:`__eq__` mas não :"
"meth:`__hash__`, suas instâncias não serão utilizáveis como itens em "
"coleções hasheáveis. Se uma classe define objetos mutáveis e implementa um "
"método :meth:`__eq__`, ela não deve implementar :meth:`__hash__`, uma vez "
"que a implementação de coleções  :term:`hasheáveis <hashable>` requer que o "
"valor hash de uma chave seja imutável (se o valor hash do objeto mudar, "
"estará no balde de hash errado)."

#: ../../reference/datamodel.rst:2150
msgid ""
"User-defined classes have :meth:`__eq__` and :meth:`__hash__` methods by "
"default (inherited from the :class:`object` class); with them, all objects "
"compare unequal (except with themselves) and ``x.__hash__()`` returns an "
"appropriate value such that ``x == y`` implies both that ``x is y`` and "
"``hash(x) == hash(y)``."
msgstr ""

#: ../../reference/datamodel.rst:2155
msgid ""
"A class that overrides :meth:`__eq__` and does not define :meth:`__hash__` "
"will have its :meth:`__hash__` implicitly set to ``None``.  When the :meth:"
"`__hash__` method of a class is ``None``, instances of the class will raise "
"an appropriate :exc:`TypeError` when a program attempts to retrieve their "
"hash value, and will also be correctly identified as unhashable when "
"checking ``isinstance(obj, collections.abc.Hashable)``."
msgstr ""
"Uma classe que sobrescreve :meth:`__eq__` e não define :meth:`__hash__` terá "
"seu :meth:`__hash__` implicitamente definido como ``None``. Quando o método :"
"meth:`__hash__` de uma classe é ``None``, as instâncias da classe levantam "
"uma :exc:`TypeError` apropriada quando um programa tenta recuperar seu valor "
"hash, e também será identificado corretamente como não-hasheável ao "
"verificar ``isinstance(obj, collections.abc.Hashable)``."

#: ../../reference/datamodel.rst:2162
msgid ""
"If a class that overrides :meth:`__eq__` needs to retain the implementation "
"of :meth:`__hash__` from a parent class, the interpreter must be told this "
"explicitly by setting ``__hash__ = <ParentClass>.__hash__``."
msgstr ""
"Se uma classe que substitui :meth:`__eq__` precisa manter a implementação "
"de :meth:`__hash__` de uma classe base, o interpretador deve ser informado "
"disso explicitamente pela configuração ``__hash__ = <ClasseBase>.__hash__``."

#: ../../reference/datamodel.rst:2166
msgid ""
"If a class that does not override :meth:`__eq__` wishes to suppress hash "
"support, it should include ``__hash__ = None`` in the class definition. A "
"class which defines its own :meth:`__hash__` that explicitly raises a :exc:"
"`TypeError` would be incorrectly identified as hashable by an "
"``isinstance(obj, collections.abc.Hashable)`` call."
msgstr ""
"Se uma classe que não substitui :meth:`__eq__` deseja suprimir o suporte a "
"hash, deve incluir ``__hash__ = None`` na definição de classe. Uma classe "
"que define seu próprio :meth:`__hash__` que levanta explicitamente uma :exc:"
"`TypeError` seria incorretamente identificada como hasheável por uma chamada "
"``isinstance(obj, collections.abc.Hashable)``."

#: ../../reference/datamodel.rst:2175
msgid ""
"By default, the :meth:`__hash__` values of str and bytes objects are "
"\"salted\" with an unpredictable random value.  Although they remain "
"constant within an individual Python process, they are not predictable "
"between repeated invocations of Python."
msgstr ""
"Por padrão, os valores :meth:`__hash__` dos objetos str e bytes são "
"\"salgados\" com um valor aleatório imprevisível. Embora permaneçam "
"constantes em um processo individual do Python, eles não são previsíveis "
"entre invocações repetidas do Python."

#: ../../reference/datamodel.rst:2180
msgid ""
"This is intended to provide protection against a denial-of-service caused by "
"carefully chosen inputs that exploit the worst case performance of a dict "
"insertion, *O*\\ (*n*\\ :sup:`2`) complexity.  See http://ocert.org/"
"advisories/ocert-2011-003.html for details."
msgstr ""
"Isso se destina a fornecer proteção contra uma negação de serviço causada "
"por entradas cuidadosamente escolhidas que exploram o pior caso de "
"desempenho de uma inserção de dicionário, complexidade *O*\\ (*n*\\ :sup:"
"`2`). Consulte http://ocert.org/advisories/ocert-2011-003.html para obter "
"detalhes."

#: ../../reference/datamodel.rst:2185
msgid ""
"Changing hash values affects the iteration order of sets. Python has never "
"made guarantees about this ordering (and it typically varies between 32-bit "
"and 64-bit builds)."
msgstr ""
"Alterar os valores de hash afeta a ordem de iteração dos conjuntos. Python "
"nunca deu garantias sobre essa ordem (e normalmente varia entre compilações "
"de 32 e 64 bits)."

#: ../../reference/datamodel.rst:2189
msgid "See also :envvar:`PYTHONHASHSEED`."
msgstr "Consulte também :envvar:`PYTHONHASHSEED`."

#: ../../reference/datamodel.rst:2191
msgid "Hash randomization is enabled by default."
msgstr "Aleatorização de hash está habilitada por padrão."

#: ../../reference/datamodel.rst:2199
msgid ""
"Called to implement truth value testing and the built-in operation "
"``bool()``; should return ``False`` or ``True``.  When this method is not "
"defined, :meth:`~object.__len__` is called, if it is defined, and the object "
"is considered true if its result is nonzero.  If a class defines neither :"
"meth:`!__len__` nor :meth:`!__bool__` (which is true of the :class:`object` "
"class itself), all its instances are considered true."
msgstr ""

#: ../../reference/datamodel.rst:2210
msgid "Customizing attribute access"
msgstr "Personalizando o acesso aos atributos"

#: ../../reference/datamodel.rst:2212
msgid ""
"The following methods can be defined to customize the meaning of attribute "
"access (use of, assignment to, or deletion of ``x.name``) for class "
"instances."
msgstr ""
"Os seguintes métodos podem ser definidos para personalizar o significado do "
"acesso aos atributos (uso, atribuição ou exclusão de ``x.name``) para "
"instâncias de classe."

#: ../../reference/datamodel.rst:2220
msgid ""
"Called when the default attribute access fails with an :exc:`AttributeError` "
"(either :meth:`__getattribute__` raises an :exc:`AttributeError` because "
"*name* is not an instance attribute or an attribute in the class tree for "
"``self``; or :meth:`__get__` of a *name* property raises :exc:"
"`AttributeError`).  This method should either return the (computed) "
"attribute value or raise an :exc:`AttributeError` exception. The :class:"
"`object` class itself does not provide this method."
msgstr ""

#: ../../reference/datamodel.rst:2228
msgid ""
"Note that if the attribute is found through the normal mechanism, :meth:"
"`__getattr__` is not called.  (This is an intentional asymmetry between :"
"meth:`__getattr__` and :meth:`__setattr__`.) This is done both for "
"efficiency reasons and because otherwise :meth:`__getattr__` would have no "
"way to access other attributes of the instance.  Note that at least for "
"instance variables, you can take total control by not inserting any values "
"in the instance attribute dictionary (but instead inserting them in another "
"object).  See the :meth:`__getattribute__` method below for a way to "
"actually get total control over attribute access."
msgstr ""

#: ../../reference/datamodel.rst:2241
msgid ""
"Called unconditionally to implement attribute accesses for instances of the "
"class. If the class also defines :meth:`__getattr__`, the latter will not be "
"called unless :meth:`__getattribute__` either calls it explicitly or raises "
"an :exc:`AttributeError`. This method should return the (computed) attribute "
"value or raise an :exc:`AttributeError` exception. In order to avoid "
"infinite recursion in this method, its implementation should always call the "
"base class method with the same name to access any attributes it needs, for "
"example, ``object.__getattribute__(self, name)``."
msgstr ""
"Chamado incondicionalmente para implementar acessos a atributo para "
"instâncias da classe. Se a classe também define :meth:`__getattr__`, o "
"último não será chamado a menos que :meth:`__getattribute__` o chame "
"explicitamente ou levante um :exc:`AttributeError`. Este método deve "
"retornar o valor do atributo (calculado) ou levantar uma exceção :exc:"
"`AttributeError`. Para evitar recursão infinita neste método, sua "
"implementação deve sempre chamar o método da classe base com o mesmo nome "
"para acessar quaisquer atributos de que necessita, por exemplo, ``object."
"__getattribute__(self, name)``."

#: ../../reference/datamodel.rst:2252
msgid ""
"This method may still be bypassed when looking up special methods as the "
"result of implicit invocation via language syntax or :ref:`built-in "
"functions <builtin-functions>`. See :ref:`special-lookup`."
msgstr ""
"Este método ainda pode ser ignorado ao procurar métodos especiais como "
"resultado de invocação implícita por meio da sintaxe da linguagem ou :ref:"
"`built-in functions <builtin-functions>`. Consulte :ref:`special-lookup`."

#: ../../reference/datamodel.rst:2257 ../../reference/datamodel.rst:2259
msgid ""
"For certain sensitive attribute accesses, raises an :ref:`auditing event "
"<auditing>` ``object.__getattr__`` with arguments ``obj`` and ``name``."
msgstr ""
"Para acessos a certos atributos sensíveis, levanta um :ref:`evento de "
"auditoria <auditing>` ``object.__getattr__`` com os argumentos ``obj`` e "
"``name``."

#: ../../reference/datamodel.rst:2266
msgid ""
"Called when an attribute assignment is attempted.  This is called instead of "
"the normal mechanism (i.e. store the value in the instance dictionary). "
"*name* is the attribute name, *value* is the value to be assigned to it."
msgstr ""
"Chamado quando se tenta efetuar uma atribuição de atributos. Esse método é "
"chamado em vez do mecanismo normal (ou seja, armazena o valor no dicionário "
"da instância). *name* é o nome do atributo, *value* é o valor a ser "
"atribuído a ele."

#: ../../reference/datamodel.rst:2270
msgid ""
"If :meth:`__setattr__` wants to assign to an instance attribute, it should "
"call the base class method with the same name, for example, ``object."
"__setattr__(self, name, value)``."
msgstr ""
"Se :meth:`__setattr__` deseja atribuir a um atributo de instância, ele deve "
"chamar o método da classe base com o mesmo nome, por exemplo, ``object."
"__setattr__(self, name, value)``."

#: ../../reference/datamodel.rst:2274 ../../reference/datamodel.rst:2276
msgid ""
"For certain sensitive attribute assignments, raises an :ref:`auditing event "
"<auditing>` ``object.__setattr__`` with arguments ``obj``, ``name``, "
"``value``."
msgstr ""
"Para atribuições de certos atributos sensíveis, levanta um :ref:`evento de "
"auditoria <auditing>` ``object.__setattr__`` com os argumentos ``obj``, "
"``name`` e ``value``."

#: ../../reference/datamodel.rst:2283
msgid ""
"Like :meth:`__setattr__` but for attribute deletion instead of assignment.  "
"This should only be implemented if ``del obj.name`` is meaningful for the "
"object."
msgstr ""
"Como :meth:`__setattr__`, mas para exclusão de atributo em vez de "
"atribuição. Este método só deve ser implementado se ``del obj.name`` for "
"significativo para o objeto."

#: ../../reference/datamodel.rst:2286 ../../reference/datamodel.rst:2288
msgid ""
"For certain sensitive attribute deletions, raises an :ref:`auditing event "
"<auditing>` ``object.__delattr__`` with arguments ``obj`` and ``name``."
msgstr ""
"Para exclusões a certos atributos sensíveis, levanta um :ref:`evento de "
"auditoria <auditing>` ``object.__delattr__`` com os argumentos ``obj`` e "
"``name``."

#: ../../reference/datamodel.rst:2295
msgid ""
"Called when :func:`dir` is called on the object. An iterable must be "
"returned. :func:`dir` converts the returned iterable to a list and sorts it."
msgstr ""

#: ../../reference/datamodel.rst:2300
msgid "Customizing module attribute access"
msgstr "Personalizando acesso a atributos de módulos"

#: ../../reference/datamodel.rst:2307
msgid ""
"Special names ``__getattr__`` and ``__dir__`` can be also used to customize "
"access to module attributes. The ``__getattr__`` function at the module "
"level should accept one argument which is the name of an attribute and "
"return the computed value or raise an :exc:`AttributeError`. If an attribute "
"is not found on a module object through the normal lookup, i.e. :meth:"
"`object.__getattribute__`, then ``__getattr__`` is searched in the module "
"``__dict__`` before raising an :exc:`AttributeError`. If found, it is called "
"with the attribute name and the result is returned."
msgstr ""
"Os nomes especiais ``__getattr__`` e ``__dir__`` também podem ser usados "
"para personalizar o acesso aos atributos dos módulos. A função "
"``__getattr__`` no nível do módulo deve aceitar um argumento que é o nome de "
"um atributo e retornar o valor calculado ou levantar uma exceção :exc:"
"`AttributeError`. Se um atributo não for encontrado em um objeto de módulo "
"por meio da pesquisa normal, por exemplo :meth:`object.__getattribute__`, "
"então ``__getattr__`` é pesquisado no módulo ``__dict__`` antes de levantar :"
"exc:`AttributeError`. Se encontrado, ele é chamado com o nome do atributo e "
"o resultado é retornado."

#: ../../reference/datamodel.rst:2316
msgid ""
"The ``__dir__`` function should accept no arguments, and return an iterable "
"of strings that represents the names accessible on module. If present, this "
"function overrides the standard :func:`dir` search on a module."
msgstr ""

#: ../../reference/datamodel.rst:2320
msgid ""
"For a more fine grained customization of the module behavior (setting "
"attributes, properties, etc.), one can set the ``__class__`` attribute of a "
"module object to a subclass of :class:`types.ModuleType`. For example::"
msgstr ""
"Para uma personalização mais refinada do comportamento do módulo (definição "
"de atributos, propriedades etc.), pode-se definir o atributo ``__class__`` "
"de um objeto de módulo para uma subclasse de :class:`types.ModuleType`. Por "
"exemplo::"

#: ../../reference/datamodel.rst:2324
msgid ""
"import sys\n"
"from types import ModuleType\n"
"\n"
"class VerboseModule(ModuleType):\n"
"    def __repr__(self):\n"
"        return f'Verbose {self.__name__}'\n"
"\n"
"    def __setattr__(self, attr, value):\n"
"        print(f'Setting {attr}...')\n"
"        super().__setattr__(attr, value)\n"
"\n"
"sys.modules[__name__].__class__ = VerboseModule"
msgstr ""

#: ../../reference/datamodel.rst:2338
msgid ""
"Defining module ``__getattr__`` and setting module ``__class__`` only affect "
"lookups made using the attribute access syntax -- directly accessing the "
"module globals (whether by code within the module, or via a reference to the "
"module's globals dictionary) is unaffected."
msgstr ""
"Definir ``__getattr__`` no módulo e configurar o ``__class__`` do módulo só "
"afeta as pesquisas feitas usando a sintaxe de acesso ao atributo -- acessar "
"diretamente os globais do módulo (seja por código dentro do módulo, ou por "
"meio de uma referência ao dicionário global do módulo) não tem efeito."

#: ../../reference/datamodel.rst:2343
msgid "``__class__`` module attribute is now writable."
msgstr "O atributo de módulo ``__class__`` pode agora ser escrito."

#: ../../reference/datamodel.rst:2346
msgid "``__getattr__`` and ``__dir__`` module attributes."
msgstr "Atributos de módulo ``__getattr__`` e ``__dir__``."

#: ../../reference/datamodel.rst:2351
msgid ":pep:`562` - Module __getattr__ and __dir__"
msgstr ":pep:`562` - __getattr__ e __dir__ de módulo"

#: ../../reference/datamodel.rst:2352
msgid "Describes the ``__getattr__`` and ``__dir__`` functions on modules."
msgstr "Descreve as funções ``__getattr__`` e ``__dir__`` nos módulos."

#: ../../reference/datamodel.rst:2358
msgid "Implementing Descriptors"
msgstr "Implementando descritores"

#: ../../reference/datamodel.rst:2360
msgid ""
"The following methods only apply when an instance of the class containing "
"the method (a so-called *descriptor* class) appears in an *owner* class (the "
"descriptor must be in either the owner's class dictionary or in the class "
"dictionary for one of its parents).  In the examples below, \"the "
"attribute\" refers to the attribute whose name is the key of the property in "
"the owner class' :attr:`~object.__dict__`.  The :class:`object` class itself "
"does not implement any of these protocols."
msgstr ""

#: ../../reference/datamodel.rst:2370
msgid ""
"Called to get the attribute of the owner class (class attribute access) or "
"of an instance of that class (instance attribute access). The optional "
"*owner* argument is the owner class, while *instance* is the instance that "
"the attribute was accessed through, or ``None`` when the attribute is "
"accessed through the *owner*."
msgstr ""
"Chamado para obter o atributo da classe proprietária (acesso ao atributo da "
"classe) ou de uma instância dessa classe (acesso ao atributo da instância). "
"O argumento opcional *owner* é a classe proprietária, enquanto *instance* é "
"a instância pela qual o atributo foi acessado, ou ``None`` quando o atributo "
"é acessado por meio de *owner*."

#: ../../reference/datamodel.rst:2376
msgid ""
"This method should return the computed attribute value or raise an :exc:"
"`AttributeError` exception."
msgstr ""
"Este método deve retornar o valor do atributo calculado ou levantar uma "
"exceção :exc:`AttributeError`."

#: ../../reference/datamodel.rst:2379
msgid ""
":PEP:`252` specifies that :meth:`__get__` is callable with one or two "
"arguments.  Python's own built-in descriptors support this specification; "
"however, it is likely that some third-party tools have descriptors that "
"require both arguments.  Python's own :meth:`__getattribute__` "
"implementation always passes in both arguments whether they are required or "
"not."
msgstr ""
":PEP:`252` especifica que :meth:`__get__` é um chamável com um ou dois "
"argumentos. Os próprios descritores embutidos do Python implementam esta "
"especificação; no entanto, é provável que algumas ferramentas de terceiros "
"tenham descritores que requerem ambos os argumentos. A implementação de :"
"meth:`__getattribute__` do próprio Python sempre passa em ambos os "
"argumentos sejam eles requeridos ou não."

#: ../../reference/datamodel.rst:2388
msgid ""
"Called to set the attribute on an instance *instance* of the owner class to "
"a new value, *value*."
msgstr ""
"Chamado para definir o atributo em uma instância *instance* da classe "
"proprietária para um novo valor, *value*."

#: ../../reference/datamodel.rst:2391
msgid ""
"Note, adding :meth:`__set__` or :meth:`__delete__` changes the kind of "
"descriptor to a \"data descriptor\".  See :ref:`descriptor-invocation` for "
"more details."
msgstr ""
"Observe que adicionar :meth:`__set__` ou :meth:`__delete__` altera o tipo de "
"descritor para um \"descritor de dados\". Consulte :ref:`descriptor-"
"invocation` para mais detalhes."

#: ../../reference/datamodel.rst:2397
msgid ""
"Called to delete the attribute on an instance *instance* of the owner class."
msgstr ""
"Chamado para excluir o atributo em uma instância *instance* da classe "
"proprietária."

#: ../../reference/datamodel.rst:2399
msgid ""
"Instances of descriptors may also have the :attr:`!__objclass__` attribute "
"present:"
msgstr ""
"Instâncias de descritores também podem ter o atributo :attr:`!__objclass__` "
"presente:"

#: ../../reference/datamodel.rst:2404
msgid ""
"The attribute :attr:`!__objclass__` is interpreted by the :mod:`inspect` "
"module as specifying the class where this object was defined (setting this "
"appropriately can assist in runtime introspection of dynamic class "
"attributes). For callables, it may indicate that an instance of the given "
"type (or a subclass) is expected or required as the first positional "
"argument (for example, CPython sets this attribute for unbound methods that "
"are implemented in C)."
msgstr ""
"O atributo :attr:`!__objclass__` é interpretado pelo módulo :mod:`inspect` "
"como sendo a classe onde este objeto foi definido (configurar isso "
"apropriadamente pode ajudar na introspecção em tempo de execução dos "
"atributos dinâmicos da classe). Para chamáveis, pode indicar que uma "
"instância do tipo fornecido (ou uma subclasse) é esperada ou necessária como "
"o primeiro argumento posicional (por exemplo, CPython define este atributo "
"para métodos não acoplados que são implementados em C)."

#: ../../reference/datamodel.rst:2415
msgid "Invoking Descriptors"
msgstr "Invocando descritores"

#: ../../reference/datamodel.rst:2417
msgid ""
"In general, a descriptor is an object attribute with \"binding behavior\", "
"one whose attribute access has been overridden by methods in the descriptor "
"protocol:  :meth:`~object.__get__`, :meth:`~object.__set__`, and :meth:"
"`~object.__delete__`. If any of those methods are defined for an object, it "
"is said to be a descriptor."
msgstr ""
"Em geral, um descritor é um atributo de objeto com \"comportamento de "
"ligação\", cujo acesso ao atributo foi substituído por métodos no protocolo "
"do descritor: :meth:`~object.__get__`, :meth:`~object.__set__` e :meth:"
"`~object.__delete__`. Se qualquer um desses métodos for definido para um "
"objeto, é considerado um descritor."

#: ../../reference/datamodel.rst:2423
msgid ""
"The default behavior for attribute access is to get, set, or delete the "
"attribute from an object's dictionary. For instance, ``a.x`` has a lookup "
"chain starting with ``a.__dict__['x']``, then ``type(a).__dict__['x']``, and "
"continuing through the base classes of ``type(a)`` excluding metaclasses."
msgstr ""
"O comportamento padrão para acesso ao atributo é obter, definir ou excluir o "
"atributo do dicionário de um objeto. Por exemplo, ``a.x`` tem uma cadeia de "
"pesquisa começando com ``a.__dict__['x']``, depois ``type(a)."
"__dict__['x']``, e continunando pelas classes bases de ``type(a)`` excluindo "
"metaclasses."

#: ../../reference/datamodel.rst:2428
msgid ""
"However, if the looked-up value is an object defining one of the descriptor "
"methods, then Python may override the default behavior and invoke the "
"descriptor method instead.  Where this occurs in the precedence chain "
"depends on which descriptor methods were defined and how they were called."
msgstr ""
"No entanto, se o valor pesquisado for um objeto que define um dos métodos do "
"descritor, Python pode substituir o comportamento padrão e invocar o método "
"do descritor. Onde isso ocorre na cadeia de precedência depende de quais "
"métodos descritores foram definidos e como eles foram chamados."

#: ../../reference/datamodel.rst:2433
msgid ""
"The starting point for descriptor invocation is a binding, ``a.x``. How the "
"arguments are assembled depends on ``a``:"
msgstr ""
"O ponto de partida para a invocação do descritor é uma ligação, ``a.x``. "
"Como os argumentos são montados depende de ``a``:"

#: ../../reference/datamodel.rst:2436
msgid "Direct Call"
msgstr "Chamada direta"

#: ../../reference/datamodel.rst:2437
msgid ""
"The simplest and least common call is when user code directly invokes a "
"descriptor method:    ``x.__get__(a)``."
msgstr ""
"A chamada mais simples e menos comum é quando o código do usuário invoca "
"diretamente um método descritor: ``x.__get__(a)``."

#: ../../reference/datamodel.rst:2440
msgid "Instance Binding"
msgstr "Ligação de instâncias"

#: ../../reference/datamodel.rst:2441
msgid ""
"If binding to an object instance, ``a.x`` is transformed into the call: "
"``type(a).__dict__['x'].__get__(a, type(a))``."
msgstr ""
"Se estiver ligando a uma instância de objeto, ``a.x`` é transformado na "
"chamada: ``type(a).__dict__['x'].__get__(a, type(a))``."

#: ../../reference/datamodel.rst:2444
msgid "Class Binding"
msgstr "Ligação de classes"

#: ../../reference/datamodel.rst:2445
msgid ""
"If binding to a class, ``A.x`` is transformed into the call: ``A."
"__dict__['x'].__get__(None, A)``."
msgstr ""
"Se estiver ligando a uma classe, ``A.x`` é transformado na chamada: ``A."
"__dict__['x'].__get__(None, A)``."

#: ../../reference/datamodel.rst:2448
msgid "Super Binding"
msgstr "Ligação de super"

#: ../../reference/datamodel.rst:2449
msgid ""
"A dotted lookup such as ``super(A, a).x`` searches ``a.__class__.__mro__`` "
"for a base class ``B`` following ``A`` and then returns ``B.__dict__['x']."
"__get__(a, A)``.  If not a descriptor, ``x`` is returned unchanged."
msgstr ""
"Uma pesquisa pontilhada, ou *dotted lookup*, como ``super(A, a).x`` procura "
"``a.__class__.__mro__`` por uma classe base ``B`` seguindo ``A`` e então "
"retorna ``B.__dict__['x'].__get__(a, A)``. Se não for um descritor, ``x`` é "
"retornado inalterado."

#: ../../reference/datamodel.rst:2486
msgid ""
"For instance bindings, the precedence of descriptor invocation depends on "
"which descriptor methods are defined.  A descriptor can define any "
"combination of :meth:`~object.__get__`, :meth:`~object.__set__` and :meth:"
"`~object.__delete__`.  If it does not define :meth:`!__get__`, then "
"accessing the attribute will return the descriptor object itself unless "
"there is a value in the object's instance dictionary.  If the descriptor "
"defines :meth:`!__set__` and/or :meth:`!__delete__`, it is a data "
"descriptor; if it defines neither, it is a non-data descriptor.  Normally, "
"data descriptors define both :meth:`!__get__` and :meth:`!__set__`, while "
"non-data descriptors have just the :meth:`!__get__` method.  Data "
"descriptors with :meth:`!__get__` and :meth:`!__set__` (and/or :meth:`!"
"__delete__`) defined always override a redefinition in an instance "
"dictionary.  In contrast, non-data descriptors can be overridden by "
"instances."
msgstr ""
"Para ligações de instâncias, a precedência de invocação do descritor depende "
"de quais métodos do descritor são definidos. Um descritor pode definir "
"qualquer combinação de :meth:`~object.__get__`, :meth:`~object.__set__` e :"
"meth:`~object.__delete__`. Se ele não definir :meth:`!__get__`, então "
"acessar o atributo retornará o próprio objeto descritor, a menos que haja um "
"valor no dicionário de instância do objeto. Se o descritor define :meth:`!"
"__set__` e/ou :meth:`!__delete__`, é um descritor de dados; se não definir "
"nenhum, é um descritor sem dados. Normalmente, os descritores de dados "
"definem :meth:`!__get__` e :meth:`!__set__`, enquanto os descritores sem "
"dados têm apenas o método :meth:`!__get__`. Descritores de dados com :meth:`!"
"__get__` e :meth:`!__set__` (e/ou :meth:`!__delete__`) definidos sempre "
"substituem uma redefinição em um dicionário de instância. Em contraste, "
"descritores sem dados podem ser substituídos por instâncias."

#: ../../reference/datamodel.rst:2501
msgid ""
"Python methods (including those decorated with :func:`@staticmethod "
"<staticmethod>` and :func:`@classmethod <classmethod>`) are implemented as "
"non-data descriptors.  Accordingly, instances can redefine and override "
"methods.  This allows individual instances to acquire behaviors that differ "
"from other instances of the same class."
msgstr ""
"Os métodos Python (incluindo aqueles decorados com :func:`@staticmethod "
"<staticmethod>` and :func:`@classmethod <classmethod>`) são implementados "
"como descritores sem dados. Assim, as instâncias podem redefinir e "
"substituir métodos. Isso permite que instâncias individuais adquiram "
"comportamentos que diferem de outras instâncias da mesma classe."

#: ../../reference/datamodel.rst:2507
msgid ""
"The :func:`property` function is implemented as a data descriptor. "
"Accordingly, instances cannot override the behavior of a property."
msgstr ""
"A função :func:`property` é implementada como um descritor de dados. Da "
"mesma forma, as instâncias não podem substituir o comportamento de uma "
"propriedade."

#: ../../reference/datamodel.rst:2514
msgid "__slots__"
msgstr "__slots__"

#: ../../reference/datamodel.rst:2516
msgid ""
"*__slots__* allow us to explicitly declare data members (like properties) "
"and deny the creation of :attr:`~object.__dict__` and *__weakref__* (unless "
"explicitly declared in *__slots__* or available in a parent.)"
msgstr ""
"*__slots__* permite-nos declarar explicitamente membros de dados (como "
"propriedades) e negar a criação de :attr:`~object.__dict__` e *__weakref__* "
"(a menos que explicitamente declarado em *__slots__* ou disponível em uma "
"classe base.)"

#: ../../reference/datamodel.rst:2520
msgid ""
"The space saved over using :attr:`~object.__dict__` can be significant. "
"Attribute lookup speed can be significantly improved as well."
msgstr ""
"O espaço economizado com o uso de :attr:`~object.__dict__` pode ser "
"significativo. A velocidade de pesquisa de atributos também pode ser "
"significativamente melhorada."

#: ../../reference/datamodel.rst:2525
msgid ""
"This class variable can be assigned a string, iterable, or sequence of "
"strings with variable names used by instances.  *__slots__* reserves space "
"for the declared variables and prevents the automatic creation of :attr:"
"`~object.__dict__` and *__weakref__* for each instance."
msgstr ""
"Esta variável de classe pode ser atribuída a uma string, iterável ou "
"sequência de strings com nomes de variáveis usados por instâncias. "
"*__slots__* reserva espaço para as variáveis declaradas e evita a criação "
"automática de :attr:`~object.__dict__` e *__weakref__* para cada instância."

#: ../../reference/datamodel.rst:2534
msgid "Notes on using *__slots__*:"
msgstr "Observações ao uso de *__slots__*:"

#: ../../reference/datamodel.rst:2536
msgid ""
"When inheriting from a class without *__slots__*, the :attr:`~object."
"__dict__` and *__weakref__* attribute of the instances will always be "
"accessible."
msgstr ""
"Ao herdar de uma classe sem *__slots__*, os atributos :attr:`~object."
"__dict__` e *__weakref__* das instâncias sempre estarão acessíveis."

#: ../../reference/datamodel.rst:2540
msgid ""
"Without a :attr:`~object.__dict__` variable, instances cannot be assigned "
"new variables not listed in the *__slots__* definition.  Attempts to assign "
"to an unlisted variable name raises :exc:`AttributeError`. If dynamic "
"assignment of new variables is desired, then add ``'__dict__'`` to the "
"sequence of strings in the *__slots__* declaration."
msgstr ""
"Sem uma variável :attr:`~object.__dict__`, as instâncias não podem ser "
"atribuídas a novas variáveis não listadas na definição *__slots__*. As "
"tentativas de atribuir a um nome de variável não listado levantam :exc:"
"`AttributeError`. Se a atribuição dinâmica de novas variáveis for desejada, "
"então adicione ``'__dict__'`` à sequência de strings na declaração de "
"*__slots__*."

#: ../../reference/datamodel.rst:2547
msgid ""
"Without a *__weakref__* variable for each instance, classes defining "
"*__slots__* do not support :mod:`weak references <weakref>` to its "
"instances. If weak reference support is needed, then add ``'__weakref__'`` "
"to the sequence of strings in the *__slots__* declaration."
msgstr ""
"Sem uma variável *__weakref__* para cada instância, as classes que definem "
"*__slots__* não suportam :mod:`referências fracas<weakref>` para suas "
"instâncias. Se for necessário um suporte de referência fraca, adicione "
"``'__weakref__'`` à sequência de strings na declaração *__slots__*."

#: ../../reference/datamodel.rst:2553
msgid ""
"*__slots__* are implemented at the class level by creating :ref:`descriptors "
"<descriptors>` for each variable name.  As a result, class attributes cannot "
"be used to set default values for instance variables defined by *__slots__*; "
"otherwise, the class attribute would overwrite the descriptor assignment."
msgstr ""
"*__slots__* são implementados no nível de classe criando :ref:`descritores "
"<descriptors>` para cada nome de variável. Como resultado, os atributos de "
"classe não podem ser usados para definir valores padrão para variáveis de "
"instância definidas por *__slots__*; caso contrário, o atributo de classe "
"substituiria a atribuição do descritor."

#: ../../reference/datamodel.rst:2559
msgid ""
"The action of a *__slots__* declaration is not limited to the class where it "
"is defined.  *__slots__* declared in parents are available in child classes. "
"However, instances of a child subclass will get a :attr:`~object.__dict__` "
"and *__weakref__* unless the subclass also defines *__slots__* (which should "
"only contain names of any *additional* slots)."
msgstr ""

#: ../../reference/datamodel.rst:2565
msgid ""
"If a class defines a slot also defined in a base class, the instance "
"variable defined by the base class slot is inaccessible (except by "
"retrieving its descriptor directly from the base class). This renders the "
"meaning of the program undefined.  In the future, a check may be added to "
"prevent this."
msgstr ""
"Se uma classe define um slot também definido em uma classe base, a variável "
"de instância definida pelo slot da classe base fica inacessível (exceto por "
"recuperar seu descritor diretamente da classe base). Isso torna o "
"significado do programa indefinido. No futuro, uma verificação pode ser "
"adicionada para evitar isso."

#: ../../reference/datamodel.rst:2570
msgid ""
":exc:`TypeError` will be raised if nonempty *__slots__* are defined for a "
"class derived from a :c:member:`\"variable-length\" built-in type "
"<PyTypeObject.tp_itemsize>` such as :class:`int`, :class:`bytes`, and :class:"
"`tuple`."
msgstr ""
":exc:`TypeError` será levantada se *__slots__* não vazios forem definidos "
"para uma classe derivada de um tipo embutido :c:member:`\"variable-length\" "
"<PyTypeObject.tp_itemsize>` como :class:`int`, :class:`bytes` e :class:"
"`tuple`."

#: ../../reference/datamodel.rst:2575
msgid "Any non-string :term:`iterable` may be assigned to *__slots__*."
msgstr "Qualquer :term:`iterável` não string pode ser atribuído a *__slots__*."

#: ../../reference/datamodel.rst:2577
msgid ""
"If a :class:`dictionary <dict>` is used to assign *__slots__*, the "
"dictionary keys will be used as the slot names. The values of the dictionary "
"can be used to provide per-attribute docstrings that will be recognised by :"
"func:`inspect.getdoc` and displayed in the output of :func:`help`."
msgstr ""
"Se um :class:`dicionário <dict>` for usado para atribuir *__slots__*, as "
"chaves do dicionário serão usadas como os nomes dos slots. Os valores do "
"dicionário podem ser usados para fornecer strings de documentação "
"(docstrings) por atributo que serão reconhecidos por :func:`inspect.getdoc` "
"e exibidos na saída de :func:`help`."

#: ../../reference/datamodel.rst:2582
msgid ""
":attr:`~object.__class__` assignment works only if both classes have the "
"same *__slots__*."
msgstr ""

#: ../../reference/datamodel.rst:2585
msgid ""
":ref:`Multiple inheritance <tut-multiple>` with multiple slotted parent "
"classes can be used, but only one parent is allowed to have attributes "
"created by slots (the other bases must have empty slot layouts) - violations "
"raise :exc:`TypeError`."
msgstr ""
"A :ref:`herança múltipla <tut-multiple>` com várias classes bases com slots "
"pode ser usada, mas apenas uma classe base tem permissão para ter atributos "
"criados por slots (as outras classes bases devem ter layouts de slots "
"vazios) -- violações levantam :exc:`TypeError`."

#: ../../reference/datamodel.rst:2591
msgid ""
"If an :term:`iterator` is used for *__slots__* then a :term:`descriptor` is "
"created for each of the iterator's values. However, the *__slots__* "
"attribute will be an empty iterator."
msgstr ""
"Se um :term:`iterador` for usado para *__slots__*, um :term:`descritor` é "
"criado para cada um dos valores do iterador. No entanto, o atributo "
"*__slots__* será um iterador vazio."

#: ../../reference/datamodel.rst:2599
msgid "Customizing class creation"
msgstr "Personalizando a criação de classe"

#: ../../reference/datamodel.rst:2601
msgid ""
"Whenever a class inherits from another class, :meth:`~object."
"__init_subclass__` is called on the parent class. This way, it is possible "
"to write classes which change the behavior of subclasses. This is closely "
"related to class decorators, but where class decorators only affect the "
"specific class they're applied to, ``__init_subclass__`` solely applies to "
"future subclasses of the class defining the method."
msgstr ""
"Sempre que uma classe herda de outra classe, :meth:`~object."
"__init_subclass__` é chamado na classe base. Dessa forma, é possível "
"escrever classes que alteram o comportamento das subclasses. Isso está "
"intimamente relacionado aos decoradores de classe, mas onde decoradores de "
"classe afetam apenas a classe específica à qual são aplicados, "
"``__init_subclass__`` aplica-se apenas a futuras subclasses da classe que "
"define o método."

#: ../../reference/datamodel.rst:2610
msgid ""
"This method is called whenever the containing class is subclassed. *cls* is "
"then the new subclass. If defined as a normal instance method, this method "
"is implicitly converted to a class method."
msgstr ""
"Este método é chamado sempre que a classe que contém é uma subclasse. *cls* "
"é então a nova subclasse. Se definido como um método de instância normal, "
"esse método é convertido implicitamente em um método de classe."

#: ../../reference/datamodel.rst:2614
msgid ""
"Keyword arguments which are given to a new class are passed to the parent "
"class's ``__init_subclass__``. For compatibility with other classes using "
"``__init_subclass__``, one should take out the needed keyword arguments and "
"pass the others over to the base class, as in::"
msgstr ""

#: ../../reference/datamodel.rst:2620
msgid ""
"class Philosopher:\n"
"    def __init_subclass__(cls, /, default_name, **kwargs):\n"
"        super().__init_subclass__(**kwargs)\n"
"        cls.default_name = default_name\n"
"\n"
"class AustralianPhilosopher(Philosopher, default_name=\"Bruce\"):\n"
"    pass"
msgstr ""

#: ../../reference/datamodel.rst:2628
msgid ""
"The default implementation ``object.__init_subclass__`` does nothing, but "
"raises an error if it is called with any arguments."
msgstr ""
"A implementação padrão de ``object.__init_subclass__`` não faz nada, mas "
"levanta um erro se for chamada com quaisquer argumentos."

#: ../../reference/datamodel.rst:2633
msgid ""
"The metaclass hint ``metaclass`` is consumed by the rest of the type "
"machinery, and is never passed to ``__init_subclass__`` implementations. The "
"actual metaclass (rather than the explicit hint) can be accessed as "
"``type(cls)``."
msgstr ""
"A dica da metaclasse ``metaclass`` é consumida pelo resto da maquinaria de "
"tipo, e nunca é passada para implementações ``__init_subclass__``. A "
"metaclasse real (em vez da dica explícita) pode ser acessada como "
"``type(cls)``."

#: ../../reference/datamodel.rst:2641
msgid ""
"When a class is created, :meth:`type.__new__` scans the class variables and "
"makes callbacks to those with a :meth:`~object.__set_name__` hook."
msgstr ""
"Quando uma classe é criada, :meth:`type.__new__` verifica as variáveis de "
"classe e faz chamadas a funções de retorno (callback) para aqueles com um "
"gancho :meth:`~object.__set_name__`."

#: ../../reference/datamodel.rst:2646
msgid ""
"Automatically called at the time the owning class *owner* is created. The "
"object has been assigned to *name* in that class::"
msgstr ""
"Chamado automaticamente no momento em que a classe proprietária *owner* é "
"criada. O objeto foi atribuído a *name* nessa classe::"

#: ../../reference/datamodel.rst:2649
msgid ""
"class A:\n"
"    x = C()  # Automatically calls: x.__set_name__(A, 'x')"
msgstr ""

#: ../../reference/datamodel.rst:2652
msgid ""
"If the class variable is assigned after the class is created, :meth:"
"`__set_name__` will not be called automatically. If needed, :meth:"
"`__set_name__` can be called directly::"
msgstr ""
"Se a variável de classe for atribuída após a criação da classe, :meth:"
"`__set_name__` não será chamado automaticamente. Se necessário, :meth:"
"`__set_name__` pode ser chamado diretamente::"

#: ../../reference/datamodel.rst:2656
msgid ""
"class A:\n"
"   pass\n"
"\n"
"c = C()\n"
"A.x = c                  # The hook is not called\n"
"c.__set_name__(A, 'x')   # Manually invoke the hook"
msgstr ""

#: ../../reference/datamodel.rst:2663
msgid "See :ref:`class-object-creation` for more details."
msgstr "Consulte :ref:`class-object-creation` para mais detalhes."

#: ../../reference/datamodel.rst:2671
msgid "Metaclasses"
msgstr "Metaclasses"

#: ../../reference/datamodel.rst:2678
msgid ""
"By default, classes are constructed using :func:`type`. The class body is "
"executed in a new namespace and the class name is bound locally to the "
"result of ``type(name, bases, namespace)``."
msgstr ""
"Por padrão, as classes são construídas usando :func:`type`. O corpo da "
"classe é executado em um novo espaço de nomes e o nome da classe é vinculado "
"localmente ao resultado de ``type(name, bases, namespace)``."

#: ../../reference/datamodel.rst:2682
msgid ""
"The class creation process can be customized by passing the ``metaclass`` "
"keyword argument in the class definition line, or by inheriting from an "
"existing class that included such an argument. In the following example, "
"both ``MyClass`` and ``MySubclass`` are instances of ``Meta``::"
msgstr ""
"O processo de criação da classe pode ser personalizado passando o argumento "
"nomeado ``metaclass`` na linha de definição da classe, ou herdando de uma "
"classe existente que incluiu tal argumento. No exemplo a seguir, ``MyClass`` "
"e ``MySubclass`` são instâncias de ``Meta``::"

#: ../../reference/datamodel.rst:2687
msgid ""
"class Meta(type):\n"
"    pass\n"
"\n"
"class MyClass(metaclass=Meta):\n"
"    pass\n"
"\n"
"class MySubclass(MyClass):\n"
"    pass"
msgstr ""

#: ../../reference/datamodel.rst:2696
msgid ""
"Any other keyword arguments that are specified in the class definition are "
"passed through to all metaclass operations described below."
msgstr ""
"Quaisquer outros argumentos nomeados especificados na definição de classe "
"são transmitidos para todas as operações de metaclasse descritas abaixo."

#: ../../reference/datamodel.rst:2699
msgid "When a class definition is executed, the following steps occur:"
msgstr ""
"Quando uma definição de classe é executada, as seguintes etapas ocorrem:"

#: ../../reference/datamodel.rst:2701
msgid "MRO entries are resolved;"
msgstr "entradas de MRO são resolvidas;"

#: ../../reference/datamodel.rst:2702
msgid "the appropriate metaclass is determined;"
msgstr "a metaclasse apropriada é determinada;"

#: ../../reference/datamodel.rst:2703
msgid "the class namespace is prepared;"
msgstr "o espaço de nomes da classe é preparada;"

#: ../../reference/datamodel.rst:2704
msgid "the class body is executed;"
msgstr "o corpo da classe é executado;"

#: ../../reference/datamodel.rst:2705
msgid "the class object is created."
msgstr "o objeto da classe é criado."

#: ../../reference/datamodel.rst:2709
msgid "Resolving MRO entries"
msgstr "Resolvendo entradas de MRO"

#: ../../reference/datamodel.rst:2713
msgid ""
"If a base that appears in a class definition is not an instance of :class:"
"`type`, then an :meth:`!__mro_entries__` method is searched on the base. If "
"an :meth:`!__mro_entries__` method is found, the base is substituted with "
"the result of a call to :meth:`!__mro_entries__` when creating the class. "
"The method is called with the original bases tuple passed to the *bases* "
"parameter, and must return a tuple of classes that will be used instead of "
"the base. The returned tuple may be empty: in these cases, the original base "
"is ignored."
msgstr ""
"Se uma classe base que aparece em uma definição de classe não é uma "
"instância de :class:`type`, então um método :meth:`!__mro_entries__` é "
"procurado na base. Se um método :meth:`!__mro_entries__` é encontrado, a "
"base é substituída pelo resultado de uma chamada para :meth:`!"
"__mro_entries__` ao criar a classe. O método é chamado com a tupla de bases "
"original passada como parâmetro *bases*, e deve retornar uma tupla de "
"classes que serão usadas no lugar da base. A tupla retornada pode estar "
"vazia: nesses casos, a base original é ignorada."

#: ../../reference/datamodel.rst:2724
msgid ":func:`types.resolve_bases`"
msgstr ":func:`types.resolve_bases`"

#: ../../reference/datamodel.rst:2725
msgid "Dynamically resolve bases that are not instances of :class:`type`."
msgstr "Dinamicamente resolve bases que não são instâncias de :class:`type`."

#: ../../reference/datamodel.rst:2727
msgid ":func:`types.get_original_bases`"
msgstr ":func:`types.get_original_bases`"

#: ../../reference/datamodel.rst:2728
msgid ""
"Retrieve a class's \"original bases\" prior to modifications by :meth:"
"`~object.__mro_entries__`."
msgstr ""
"Recupera as \"bases originais\" de uma classe antes das modificações feitas "
"por :meth:`~object.__mro_entries__`."

#: ../../reference/datamodel.rst:2731
msgid ":pep:`560`"
msgstr ":pep:`560`"

#: ../../reference/datamodel.rst:2732
msgid "Core support for typing module and generic types."
msgstr "Suporte básico para módulo typing e tipos genéricos."

#: ../../reference/datamodel.rst:2736
msgid "Determining the appropriate metaclass"
msgstr "Determinando a metaclasse apropriada"

#: ../../reference/datamodel.rst:2740
msgid ""
"The appropriate metaclass for a class definition is determined as follows:"
msgstr ""
"A metaclasse apropriada para uma definição de classe é determinada da "
"seguinte forma:"

#: ../../reference/datamodel.rst:2742
msgid ""
"if no bases and no explicit metaclass are given, then :func:`type` is used;"
msgstr ""
"se nenhuma classe base e nenhuma metaclasse explícita forem fornecidas, "
"então :func:`type` é usada;"

#: ../../reference/datamodel.rst:2743
msgid ""
"if an explicit metaclass is given and it is *not* an instance of :func:"
"`type`, then it is used directly as the metaclass;"
msgstr ""
"se uma metaclasse explícita é fornecida e *não* é uma instância de :func:"
"`type`, então ela é usada diretamente como a metaclasse;"

#: ../../reference/datamodel.rst:2745
msgid ""
"if an instance of :func:`type` is given as the explicit metaclass, or bases "
"are defined, then the most derived metaclass is used."
msgstr ""
"se uma instância de :func:`type` é fornecida como a metaclasse explícita, ou "
"classes bases são definidas, então a metaclasse mais derivada é usada."

#: ../../reference/datamodel.rst:2748
msgid ""
"The most derived metaclass is selected from the explicitly specified "
"metaclass (if any) and the metaclasses (i.e. ``type(cls)``) of all specified "
"base classes. The most derived metaclass is one which is a subtype of *all* "
"of these candidate metaclasses. If none of the candidate metaclasses meets "
"that criterion, then the class definition will fail with ``TypeError``."
msgstr ""
"A metaclasse mais derivada é selecionada a partir da metaclasse "
"explicitamente especificada (se houver) e das metaclasses (ou seja, "
"``type(cls)``) de todas as classes bases especificadas. A metaclasse mais "
"derivada é aquela que é um subtipo de *todas* essas metaclasses candidatas. "
"Se nenhuma das metaclasses candidatas atender a esse critério, a definição "
"de classe falhará com ``TypeError``."

#: ../../reference/datamodel.rst:2758
msgid "Preparing the class namespace"
msgstr "Preparando o espaço de nomes da classe"

#: ../../reference/datamodel.rst:2763
msgid ""
"Once the appropriate metaclass has been identified, then the class namespace "
"is prepared. If the metaclass has a ``__prepare__`` attribute, it is called "
"as ``namespace = metaclass.__prepare__(name, bases, **kwds)`` (where the "
"additional keyword arguments, if any, come from the class definition). The "
"``__prepare__`` method should be implemented as a :func:`classmethod "
"<classmethod>`. The namespace returned by ``__prepare__`` is passed in to "
"``__new__``, but when the final class object is created the namespace is "
"copied into a new ``dict``."
msgstr ""
"Uma vez identificada a metaclasse apropriada, o espaço de nomes da classe é "
"preparado. Se a metaclasse tiver um atributo ``__prepare__``, ela será "
"chamada como ``namespace = metaclass.__prepare__(name, bases, **kwds)`` "
"(onde os argumentos nomeados adicionais, se houver, vêm da definição de "
"classe). O método ``__prepare__`` deve ser implementado como um :func:"
"`classmethod <classmethod>`. O espaço de nomes retornado por ``__prepare__`` "
"é passado para ``__new__``, mas quando o objeto classe final é criado, o "
"espaço de nomes é copiado para um novo ``dict``."

#: ../../reference/datamodel.rst:2772
msgid ""
"If the metaclass has no ``__prepare__`` attribute, then the class namespace "
"is initialised as an empty ordered mapping."
msgstr ""
"Se a metaclasse não tiver o atributo ``__prepare__``, então o espaço de "
"nomes da classe é inicializado como um mapeamento ordenado vazio."

#: ../../reference/datamodel.rst:2777
msgid ":pep:`3115` - Metaclasses in Python 3000"
msgstr ":pep:`3115` - Metaclasses no Python 3000"

#: ../../reference/datamodel.rst:2778
msgid "Introduced the ``__prepare__`` namespace hook"
msgstr "Introduzido o gancho de espaço de nomes ``__prepare__``"

#: ../../reference/datamodel.rst:2782
msgid "Executing the class body"
msgstr "Executando o corpo da classe"

#: ../../reference/datamodel.rst:2787
msgid ""
"The class body is executed (approximately) as ``exec(body, globals(), "
"namespace)``. The key difference from a normal call to :func:`exec` is that "
"lexical scoping allows the class body (including any methods) to reference "
"names from the current and outer scopes when the class definition occurs "
"inside a function."
msgstr ""
"O corpo da classe é executado (aproximadamente) como ``exec(body, globals(), "
"namespace)``. A principal diferença de uma chamada normal para :func:`exec` "
"é que o escopo léxico permite que o corpo da classe (incluindo quaisquer "
"métodos) faça referência a nomes dos escopos atual e externo quando a "
"definição de classe ocorre dentro de uma função."

#: ../../reference/datamodel.rst:2793
msgid ""
"However, even when the class definition occurs inside the function, methods "
"defined inside the class still cannot see names defined at the class scope. "
"Class variables must be accessed through the first parameter of instance or "
"class methods, or through the implicit lexically scoped ``__class__`` "
"reference described in the next section."
msgstr ""
"No entanto, mesmo quando a definição de classe ocorre dentro da função, os "
"métodos definidos dentro da classe ainda não podem ver os nomes definidos no "
"escopo da classe. Variáveis de classe devem ser acessadas através do "
"primeiro parâmetro de instância ou métodos de classe, ou através da "
"referência implícita com escopo léxico ``__class__`` descrita na próxima "
"seção."

#: ../../reference/datamodel.rst:2802
msgid "Creating the class object"
msgstr "Criando o objeto classe"

#: ../../reference/datamodel.rst:2809
msgid ""
"Once the class namespace has been populated by executing the class body, the "
"class object is created by calling ``metaclass(name, bases, namespace, "
"**kwds)`` (the additional keywords passed here are the same as those passed "
"to ``__prepare__``)."
msgstr ""
"Uma vez que o espaço de nomes da classe tenha sido preenchido executando o "
"corpo da classe, o objeto classe é criado chamando ``metaclass(name, bases, "
"namespace, **kwds)`` (os argumentos adicionais passados aqui são os mesmos "
"passados para ``__prepare__``)."

#: ../../reference/datamodel.rst:2814
msgid ""
"This class object is the one that will be referenced by the zero-argument "
"form of :func:`super`. ``__class__`` is an implicit closure reference "
"created by the compiler if any methods in a class body refer to either "
"``__class__`` or ``super``. This allows the zero argument form of :func:"
"`super` to correctly identify the class being defined based on lexical "
"scoping, while the class or instance that was used to make the current call "
"is identified based on the first argument passed to the method."
msgstr ""
"Este objeto classe é aquele que será referenciado pela chamada a  :func:"
"`super` sem argumentos. ``__class__`` é uma referência de clausura implícita "
"criada pelo compilador se algum método no corpo da classe se referir a "
"``__class__`` ou ``super``. Isso permite que a forma de argumento zero de :"
"func:`super` identifique corretamente a classe sendo definida com base no "
"escopo léxico, enquanto a classe ou instância que foi usada para fazer a "
"chamada atual é identificada com base no primeiro argumento passado para o "
"método."

#: ../../reference/datamodel.rst:2824
msgid ""
"In CPython 3.6 and later, the ``__class__`` cell is passed to the metaclass "
"as a ``__classcell__`` entry in the class namespace. If present, this must "
"be propagated up to the ``type.__new__`` call in order for the class to be "
"initialised correctly. Failing to do so will result in a :exc:`RuntimeError` "
"in Python 3.8."
msgstr ""
"No CPython 3.6 e posterior, a célula ``__class__`` é passada para a "
"metaclasse como uma entrada de ``__classcell__`` no espaço de nomes da "
"classe. Se estiver presente, deve ser propagado até a chamada a ``type."
"__new__`` para que a classe seja inicializada corretamente. Não fazer isso "
"resultará em um :exc:`RuntimeError` no Python 3.8."

#: ../../reference/datamodel.rst:2830
msgid ""
"When using the default metaclass :class:`type`, or any metaclass that "
"ultimately calls ``type.__new__``, the following additional customization "
"steps are invoked after creating the class object:"
msgstr ""
"Quando usada a metaclasse padrão :class:`type`, ou qualquer metaclasse que "
"chame ``type.__new__``, as seguintes etapas de personalização adicionais são "
"executadas depois da criação do objeto classe:"

#: ../../reference/datamodel.rst:2834
msgid ""
"The ``type.__new__`` method collects all of the attributes in the class "
"namespace that define a :meth:`~object.__set_name__` method;"
msgstr ""
"O método ``type.__new__`` coleta todos os atributos no espaço de nomes da "
"classe que definem um método :meth:`~object.__set_name__`;"

#: ../../reference/datamodel.rst:2836
msgid ""
"Those ``__set_name__`` methods are called with the class being defined and "
"the assigned name of that particular attribute;"
msgstr ""
"Esses métodos ``__set_name__`` são chamados com a classe sendo definida e o "
"nome atribuído para este atributo específico;"

#: ../../reference/datamodel.rst:2838
msgid ""
"The :meth:`~object.__init_subclass__` hook is called on the immediate parent "
"of the new class in its method resolution order."
msgstr ""
"O gancho :meth:`~object.__init_subclass__` é chamado na classe base imediata "
"da nova classe em sua ordem de resolução de método."

#: ../../reference/datamodel.rst:2841
msgid ""
"After the class object is created, it is passed to the class decorators "
"included in the class definition (if any) and the resulting object is bound "
"in the local namespace as the defined class."
msgstr ""
"Depois que o objeto classe é criado, ele é passado para os decoradores de "
"classe incluídos na definição de classe (se houver) e o objeto resultante é "
"vinculado ao espaço de nomes local como a classe definida."

#: ../../reference/datamodel.rst:2845
msgid ""
"When a new class is created by ``type.__new__``, the object provided as the "
"namespace parameter is copied to a new ordered mapping and the original "
"object is discarded. The new copy is wrapped in a read-only proxy, which "
"becomes the :attr:`~type.__dict__` attribute of the class object."
msgstr ""

#: ../../reference/datamodel.rst:2852
msgid ":pep:`3135` - New super"
msgstr ":pep:`3135` - Novo super"

#: ../../reference/datamodel.rst:2853
msgid "Describes the implicit ``__class__`` closure reference"
msgstr "Descreve a referência de clausura implícita de  ``__class__``"

#: ../../reference/datamodel.rst:2857
msgid "Uses for metaclasses"
msgstr "Usos para metaclasses"

#: ../../reference/datamodel.rst:2859
msgid ""
"The potential uses for metaclasses are boundless. Some ideas that have been "
"explored include enum, logging, interface checking, automatic delegation, "
"automatic property creation, proxies, frameworks, and automatic resource "
"locking/synchronization."
msgstr ""
"Os usos potenciais para metaclasses são ilimitados. Algumas ideias que foram "
"exploradas incluem enumeradores, criação de log, verificação de interface, "
"delegação automática, criação automática de propriedade, proxies, estruturas "
"e travamento/sincronização automático/a de recursos."

#: ../../reference/datamodel.rst:2866
msgid "Customizing instance and subclass checks"
msgstr "Personalizando verificações de instância e subclasse"

#: ../../reference/datamodel.rst:2868
msgid ""
"The following methods are used to override the default behavior of the :func:"
"`isinstance` and :func:`issubclass` built-in functions."
msgstr ""
"Os seguintes métodos são usados para substituir o comportamento padrão das "
"funções embutidas :func:`isinstance` e :func:`issubclass`."

#: ../../reference/datamodel.rst:2871
msgid ""
"In particular, the metaclass :class:`abc.ABCMeta` implements these methods "
"in order to allow the addition of Abstract Base Classes (ABCs) as \"virtual "
"base classes\" to any class or type (including built-in types), including "
"other ABCs."
msgstr ""
"Em particular, a metaclasse :class:`abc.ABCMeta` implementa esses métodos a "
"fim de permitir a adição de classes base abstratas (ABCs) como \"classes "
"base virtuais\" para qualquer classe ou tipo (incluindo tipos embutidos), "
"incluindo outras ABCs."

#: ../../reference/datamodel.rst:2878
msgid ""
"Return true if *instance* should be considered a (direct or indirect) "
"instance of *class*. If defined, called to implement ``isinstance(instance, "
"class)``."
msgstr ""
"Retorna verdadeiro se *instance* deve ser considerada uma instância (direta "
"ou indireta) da classe *class*. Se definido, chamado para implementar "
"``isinstance(instance, class)``."

#: ../../reference/datamodel.rst:2885
msgid ""
"Return true if *subclass* should be considered a (direct or indirect) "
"subclass of *class*.  If defined, called to implement ``issubclass(subclass, "
"class)``."
msgstr ""
"Retorna verdadeiro se *subclass* deve ser considerada uma subclasse (direta "
"ou indireta) da classe *class*. Se definido, chamado para implementar "
"``issubclass(subclass, class)``."

#: ../../reference/datamodel.rst:2890
msgid ""
"Note that these methods are looked up on the type (metaclass) of a class.  "
"They cannot be defined as class methods in the actual class.  This is "
"consistent with the lookup of special methods that are called on instances, "
"only in this case the instance is itself a class."
msgstr ""
"Observe que esses métodos são pesquisados no tipo (metaclasse) de uma "
"classe. Eles não podem ser definidos como métodos de classe na classe real. "
"Isso é consistente com a pesquisa de métodos especiais que são chamados em "
"instâncias, apenas neste caso a própria instância é uma classe."

#: ../../reference/datamodel.rst:2897
msgid ":pep:`3119` - Introducing Abstract Base Classes"
msgstr ":pep:`3119` - Introduzindo classes base abstratas"

#: ../../reference/datamodel.rst:2898
msgid ""
"Includes the specification for customizing :func:`isinstance` and :func:"
"`issubclass` behavior through :meth:`~type.__instancecheck__` and :meth:"
"`~type.__subclasscheck__`, with motivation for this functionality in the "
"context of adding Abstract Base Classes (see the :mod:`abc` module) to the "
"language."
msgstr ""

#: ../../reference/datamodel.rst:2906
msgid "Emulating generic types"
msgstr "Emulando tipos genéricos"

#: ../../reference/datamodel.rst:2908
msgid ""
"When using :term:`type annotations<annotation>`, it is often useful to "
"*parameterize* a :term:`generic type` using Python's square-brackets "
"notation. For example, the annotation ``list[int]`` might be used to signify "
"a :class:`list` in which all the elements are of type :class:`int`."
msgstr ""
"Quando estiver usando :term:`anotações de tipo <annotation>`, é "
"frequentemente útil *parametrizar* um :term:`tipo genérico` usando a notação "
"de colchetes do Python. Por exemplo, a anotação ``list[int]`` pode ser usada "
"para indicar uma :class:`list` em que todos os seus elementos são do tipo :"
"class:`int`."

#: ../../reference/datamodel.rst:2915
msgid ":pep:`484` - Type Hints"
msgstr ":pep:`484` - Dicas de tipo"

#: ../../reference/datamodel.rst:2916
msgid "Introducing Python's framework for type annotations"
msgstr "Apresenta a estrutura do Python para anotações de tipo"

#: ../../reference/datamodel.rst:2918
msgid ":ref:`Generic Alias Types<types-genericalias>`"
msgstr ":ref:`Tipos Generic Alias <types-genericalias>`"

#: ../../reference/datamodel.rst:2919
msgid "Documentation for objects representing parameterized generic classes"
msgstr ""
"Documentação de objetos que representam classes genéricas parametrizadas"

#: ../../reference/datamodel.rst:2921
msgid ""
":ref:`Generics`, :ref:`user-defined generics<user-defined-generics>` and :"
"class:`typing.Generic`"
msgstr ""
":ref:`Generics`, :ref:`genéricos definidos pelo usuário<user-defined-"
"generics>` e :class:`typing.Generic`"

#: ../../reference/datamodel.rst:2922
msgid ""
"Documentation on how to implement generic classes that can be parameterized "
"at runtime and understood by static type-checkers."
msgstr ""
"Documentação sobre como implementar classes genéricas que podem ser "
"parametrizadas em tempo de execução e compreendidas por verificadores de "
"tipo estático."

#: ../../reference/datamodel.rst:2925
msgid ""
"A class can *generally* only be parameterized if it defines the special "
"class method ``__class_getitem__()``."
msgstr ""
"Uma classe pode *geralmente* ser parametrizada somente se ela define o "
"método de classe especial ``__class_getitem__()``."

#: ../../reference/datamodel.rst:2930
msgid ""
"Return an object representing the specialization of a generic class by type "
"arguments found in *key*."
msgstr ""
"Retorna um objeto que representa a especialização de uma classe genérica por "
"argumentos de tipo encontrados em *key*."

#: ../../reference/datamodel.rst:2933
msgid ""
"When defined on a class, ``__class_getitem__()`` is automatically a class "
"method. As such, there is no need for it to be decorated with :func:"
"`@classmethod<classmethod>` when it is defined."
msgstr ""
"Quando definido em uma classe, ``__class_getitem__()`` é automaticamente um "
"método de classe. Assim, não é necessário que seja decorado com :func:"
"`@classmethod<classmethod>` quando de sua definição."

#: ../../reference/datamodel.rst:2939
msgid "The purpose of *__class_getitem__*"
msgstr "O propósito de *__class_getitem__*"

#: ../../reference/datamodel.rst:2941
msgid ""
"The purpose of :meth:`~object.__class_getitem__` is to allow runtime "
"parameterization of standard-library generic classes in order to more easily "
"apply :term:`type hints<type hint>` to these classes."
msgstr ""
"O propósito de :meth:`~object.__class_getitem__` é permitir a parametrização "
"em tempo de execução de classes genéricas da biblioteca padrão, a fim de "
"aplicar mais facilmente :term:`dicas de tipo<type hint>` a essas classes."

#: ../../reference/datamodel.rst:2945
msgid ""
"To implement custom generic classes that can be parameterized at runtime and "
"understood by static type-checkers, users should either inherit from a "
"standard library class that already implements :meth:`~object."
"__class_getitem__`, or inherit from :class:`typing.Generic`, which has its "
"own implementation of ``__class_getitem__()``."
msgstr ""
"Para implementar classes genéricas personalizadas que podem ser "
"parametrizadas em tempo de execução e compreendidas por verificadores de "
"tipo estáticos, os usuários devem herdar de uma classe da biblioteca padrão "
"que já implementa :meth:`~object.__class_getitem__`, ou herdar de :class:"
"`typing.Generic`, que possui sua própria implementação de "
"``__class_getitem__()``."

#: ../../reference/datamodel.rst:2951
msgid ""
"Custom implementations of :meth:`~object.__class_getitem__` on classes "
"defined outside of the standard library may not be understood by third-party "
"type-checkers such as mypy. Using ``__class_getitem__()`` on any class for "
"purposes other than type hinting is discouraged."
msgstr ""
"Implementações personalizadas de :meth:`~object.__class_getitem__` em "
"classes definidas fora da biblioteca padrão podem não ser compreendidas por "
"verificadores de tipo de terceiros, como o mypy. O uso de "
"``__class_getitem__()`` em qualquer classe para fins diferentes de dicas de "
"tipo é desencorajado."

#: ../../reference/datamodel.rst:2961
msgid "*__class_getitem__* versus *__getitem__*"
msgstr "*__class_getitem__* versus *__getitem__*"

#: ../../reference/datamodel.rst:2963
msgid ""
"Usually, the :ref:`subscription<subscriptions>` of an object using square "
"brackets will call the :meth:`~object.__getitem__` instance method defined "
"on the object's class. However, if the object being subscribed is itself a "
"class, the class method :meth:`~object.__class_getitem__` may be called "
"instead. ``__class_getitem__()`` should return a :ref:`GenericAlias<types-"
"genericalias>` object if it is properly defined."
msgstr ""
"Normalmente, a :ref:`subscription<subscriptions>` de um objeto usando "
"colchetes chamará o método de instância :meth:`~object.__getitem__` definido "
"na classe do objeto. No entanto, se o objeto sendo subscrito for ele mesmo "
"uma classe, o método de classe :meth:`~object.__class_getitem__` pode ser "
"chamado em seu lugar. ``__class_getitem__()`` deve retornar um objeto :ref:"
"`GenericAlias<types-genericalias>` se estiver devidamente definido."

#: ../../reference/datamodel.rst:2970
msgid ""
"Presented with the :term:`expression` ``obj[x]``, the Python interpreter "
"follows something like the following process to decide whether :meth:"
"`~object.__getitem__` or :meth:`~object.__class_getitem__` should be called::"
msgstr ""
"Apresentado com a :term:`expressão` ``obj[x]``, o interpretador de Python "
"segue algo parecido com o seguinte processo para decidir se :meth:`~object."
"__getitem__` ou :meth:`~object.__class_getitem__` deve ser chamado:"

#: ../../reference/datamodel.rst:2975
msgid ""
"from inspect import isclass\n"
"\n"
"def subscribe(obj, x):\n"
"    \"\"\"Return the result of the expression 'obj[x]'\"\"\"\n"
"\n"
"    class_of_obj = type(obj)\n"
"\n"
"    # If the class of obj defines __getitem__,\n"
"    # call class_of_obj.__getitem__(obj, x)\n"
"    if hasattr(class_of_obj, '__getitem__'):\n"
"        return class_of_obj.__getitem__(obj, x)\n"
"\n"
"    # Else, if obj is a class and defines __class_getitem__,\n"
"    # call obj.__class_getitem__(x)\n"
"    elif isclass(obj) and hasattr(obj, '__class_getitem__'):\n"
"        return obj.__class_getitem__(x)\n"
"\n"
"    # Else, raise an exception\n"
"    else:\n"
"        raise TypeError(\n"
"            f\"'{class_of_obj.__name__}' object is not subscriptable\"\n"
"        )"
msgstr ""

#: ../../reference/datamodel.rst:2998
msgid ""
"In Python, all classes are themselves instances of other classes. The class "
"of a class is known as that class's :term:`metaclass`, and most classes have "
"the :class:`type` class as their metaclass. :class:`type` does not define :"
"meth:`~object.__getitem__`, meaning that expressions such as ``list[int]``, "
"``dict[str, float]`` and ``tuple[str, bytes]`` all result in :meth:`~object."
"__class_getitem__` being called::"
msgstr ""
"Em Python, todas as classes são elas mesmas instâncias de outras classes. A "
"classe de uma classe é conhecida como :term:`metaclasse` dessa classe, e a "
"maioria das classes tem a classe :class:`type` como sua metaclasse. :class:"
"`type` não define :meth:`~object.__getitem__`, o que significa que "
"expressões como ``list[int]``, ``dict[str, float]`` e ``tuple[str, bytes]`` "
"resultam em chamadas para :meth:`~object.__class_getitem__`::"

#: ../../reference/datamodel.rst:3005
msgid ""
">>> # list has class \"type\" as its metaclass, like most classes:\n"
">>> type(list)\n"
"<class 'type'>\n"
">>> type(dict) == type(list) == type(tuple) == type(str) == type(bytes)\n"
"True\n"
">>> # \"list[int]\" calls \"list.__class_getitem__(int)\"\n"
">>> list[int]\n"
"list[int]\n"
">>> # list.__class_getitem__ returns a GenericAlias object:\n"
">>> type(list[int])\n"
"<class 'types.GenericAlias'>"
msgstr ""

#: ../../reference/datamodel.rst:3017
msgid ""
"However, if a class has a custom metaclass that defines :meth:`~object."
"__getitem__`, subscribing the class may result in different behaviour. An "
"example of this can be found in the :mod:`enum` module::"
msgstr ""
"No entanto, se uma classe tiver uma metaclasse personalizada que define :"
"meth:`~object.__getitem__`, subscrever a classe pode resultar em "
"comportamento diferente. Um exemplo disso pode ser encontrado no módulo :mod:"
"`enum`::"

#: ../../reference/datamodel.rst:3021
msgid ""
">>> from enum import Enum\n"
">>> class Menu(Enum):\n"
"...     \"\"\"A breakfast menu\"\"\"\n"
"...     SPAM = 'spam'\n"
"...     BACON = 'bacon'\n"
"...\n"
">>> # Enum classes have a custom metaclass:\n"
">>> type(Menu)\n"
"<class 'enum.EnumMeta'>\n"
">>> # EnumMeta defines __getitem__,\n"
">>> # so __class_getitem__ is not called,\n"
">>> # and the result is not a GenericAlias object:\n"
">>> Menu['SPAM']\n"
"<Menu.SPAM: 'spam'>\n"
">>> type(Menu['SPAM'])\n"
"<enum 'Menu'>"
msgstr ""

#: ../../reference/datamodel.rst:3040
msgid ":pep:`560` - Core Support for typing module and generic types"
msgstr ":pep:`560` - Suporte básico para módulo typing e tipos genéricos"

#: ../../reference/datamodel.rst:3041
msgid ""
"Introducing :meth:`~object.__class_getitem__`, and outlining when a :ref:"
"`subscription<subscriptions>` results in ``__class_getitem__()`` being "
"called instead of :meth:`~object.__getitem__`"
msgstr ""
"Introduz :meth:`~object.__class_getitem__`, e define quando uma :ref:"
"`subscrição<subscriptions>` resulta na chamada de ``__class_getitem__()`` em "
"vez de :meth:`~object.__getitem__`"

#: ../../reference/datamodel.rst:3049
msgid "Emulating callable objects"
msgstr "Emulando objetos chamáveis"

#: ../../reference/datamodel.rst:3056
msgid ""
"Called when the instance is \"called\" as a function; if this method is "
"defined, ``x(arg1, arg2, ...)`` roughly translates to ``type(x).__call__(x, "
"arg1, ...)``. The :class:`object` class itself does not provide this method."
msgstr ""

#: ../../reference/datamodel.rst:3064
msgid "Emulating container types"
msgstr "Emulando de tipos contêineres"

#: ../../reference/datamodel.rst:3066
msgid ""
"The following methods can be defined to implement container objects. None of "
"them are provided by the :class:`object` class itself. Containers usually "
"are :term:`sequences <sequence>` (such as :class:`lists <list>` or :class:"
"`tuples <tuple>`) or :term:`mappings <mapping>` (like :term:`dictionaries "
"<dictionary>`), but can represent other containers as well.  The first set "
"of methods is used either to emulate a sequence or to emulate a mapping; the "
"difference is that for a sequence, the allowable keys should be the integers "
"*k* for which ``0 <= k < N`` where *N* is the length of the sequence, or :"
"class:`slice` objects, which define a range of items.  It is also "
"recommended that mappings provide the methods :meth:`!keys`, :meth:`!"
"values`, :meth:`!items`, :meth:`!get`, :meth:`!clear`, :meth:`!setdefault`, :"
"meth:`!pop`, :meth:`!popitem`, :meth:`!copy`, and :meth:`!update` behaving "
"similar to those for Python's standard :class:`dictionary <dict>` objects.  "
"The :mod:`collections.abc` module provides a :class:`~collections.abc."
"MutableMapping` :term:`abstract base class` to help create those methods "
"from a base set of :meth:`~object.__getitem__`, :meth:`~object."
"__setitem__`, :meth:`~object.__delitem__`, and :meth:`!keys`. Mutable "
"sequences should provide methods :meth:`!append`, :meth:`!count`, :meth:`!"
"index`, :meth:`!extend`, :meth:`!insert`, :meth:`!pop`, :meth:`!remove`, :"
"meth:`!reverse` and :meth:`!sort`, like Python standard :class:`list` "
"objects. Finally, sequence types should implement addition (meaning "
"concatenation) and multiplication (meaning repetition) by defining the "
"methods :meth:`~object.__add__`, :meth:`~object.__radd__`, :meth:`~object."
"__iadd__`, :meth:`~object.__mul__`, :meth:`~object.__rmul__` and :meth:"
"`~object.__imul__` described below; they should not define other numerical "
"operators.  It is recommended that both mappings and sequences implement "
"the :meth:`~object.__contains__` method to allow efficient use of the ``in`` "
"operator; for mappings, ``in`` should search the mapping's keys; for "
"sequences, it should search through the values.  It is further recommended "
"that both mappings and sequences implement the :meth:`~object.__iter__` "
"method to allow efficient iteration through the container; for mappings, :"
"meth:`!__iter__` should iterate through the object's keys; for sequences, it "
"should iterate through the values."
msgstr ""

#: ../../reference/datamodel.rst:3108
msgid ""
"Called to implement the built-in function :func:`len`.  Should return the "
"length of the object, an integer ``>=`` 0.  Also, an object that doesn't "
"define a :meth:`~object.__bool__` method and whose :meth:`!__len__` method "
"returns zero is considered to be false in a Boolean context."
msgstr ""

#: ../../reference/datamodel.rst:3115
msgid ""
"In CPython, the length is required to be at most :data:`sys.maxsize`. If the "
"length is larger than :data:`!sys.maxsize` some features (such as :func:"
"`len`) may raise :exc:`OverflowError`.  To prevent raising :exc:`!"
"OverflowError` by truth value testing, an object must define a :meth:"
"`~object.__bool__` method."
msgstr ""

#: ../../reference/datamodel.rst:3124
msgid ""
"Called to implement :func:`operator.length_hint`. Should return an estimated "
"length for the object (which may be greater or less than the actual length). "
"The length must be an integer ``>=`` 0. The return value may also be :data:"
"`NotImplemented`, which is treated the same as if the ``__length_hint__`` "
"method didn't exist at all. This method is purely an optimization and is "
"never required for correctness."
msgstr ""

#: ../../reference/datamodel.rst:3138
msgid ""
"Slicing is done exclusively with the following three methods.  A call like ::"
msgstr ""
"O fatiamento é feito exclusivamente com os três métodos a seguir. Uma "
"chamada como ::"

#: ../../reference/datamodel.rst:3140
msgid "a[1:2] = b"
msgstr ""

#: ../../reference/datamodel.rst:3142
msgid "is translated to ::"
msgstr "é traduzida com ::"

#: ../../reference/datamodel.rst:3144
msgid "a[slice(1, 2, None)] = b"
msgstr ""

#: ../../reference/datamodel.rst:3146
msgid "and so forth.  Missing slice items are always filled in with ``None``."
msgstr ""
"e assim por diante. Os itens de fatia ausentes são sempre preenchidos com "
"``None``."

#: ../../reference/datamodel.rst:3151
msgid ""
"Called to implement evaluation of ``self[key]``. For :term:`sequence` types, "
"the accepted keys should be integers. Optionally, they may support :class:"
"`slice` objects as well.  Negative index support is also optional. If *key* "
"is of an inappropriate type, :exc:`TypeError` may be raised; if *key* is a "
"value outside the set of indexes for the sequence (after any special "
"interpretation of negative values), :exc:`IndexError` should be raised. For :"
"term:`mapping` types, if *key* is missing (not in the container), :exc:"
"`KeyError` should be raised."
msgstr ""

#: ../../reference/datamodel.rst:3163
msgid ""
":keyword:`for` loops expect that an :exc:`IndexError` will be raised for "
"illegal indexes to allow proper detection of the end of the sequence."
msgstr ""
"Os loops :keyword:`for` esperam que uma :exc:`IndexError` seja levantada "
"para índices ilegais para permitir a detecção apropriada do fim da sequência."

#: ../../reference/datamodel.rst:3168
msgid ""
"When :ref:`subscripting<subscriptions>` a *class*, the special class method :"
"meth:`~object.__class_getitem__` may be called instead of ``__getitem__()``. "
"See :ref:`classgetitem-versus-getitem` for more details."
msgstr ""

#: ../../reference/datamodel.rst:3176
msgid ""
"Called to implement assignment to ``self[key]``.  Same note as for :meth:"
"`__getitem__`.  This should only be implemented for mappings if the objects "
"support changes to the values for keys, or if new keys can be added, or for "
"sequences if elements can be replaced.  The same exceptions should be raised "
"for improper *key* values as for the :meth:`__getitem__` method."
msgstr ""
"Chamado para implementar a atribuição de ``self[key]``. Mesma nota que para :"
"meth:`__getitem__`. Isso só deve ser implementado para mapeamentos se os "
"objetos suportarem alterações nos valores das chaves, ou se novas chaves "
"puderem ser adicionadas, ou para sequências se os elementos puderem ser "
"substituídos. As mesmas exceções devem ser levantadas para valores *key* "
"impróprios do método :meth:`__getitem__`."

#: ../../reference/datamodel.rst:3185
msgid ""
"Called to implement deletion of ``self[key]``.  Same note as for :meth:"
"`__getitem__`.  This should only be implemented for mappings if the objects "
"support removal of keys, or for sequences if elements can be removed from "
"the sequence.  The same exceptions should be raised for improper *key* "
"values as for the :meth:`__getitem__` method."
msgstr ""
"Chamado para implementar a exclusão de ``self[key]``. Mesma nota que para :"
"meth:`__getitem__`. Isso só deve ser implementado para mapeamentos se os "
"objetos suportarem remoções de chaves, ou para sequências se os elementos "
"puderem ser removidos da sequência. As mesmas exceções devem ser levantadas "
"para valores *key* impróprios do método :meth:`__getitem__`."

#: ../../reference/datamodel.rst:3194
msgid ""
"Called by :class:`dict`\\ .\\ :meth:`__getitem__` to implement ``self[key]`` "
"for dict subclasses when key is not in the dictionary."
msgstr ""
"Chamado por :class:`dict`\\ .\\ :meth:`__getitem__` para implementar "
"``self[key]`` para subclasses de dicionário quando a chave não estiver no "
"dicionário."

#: ../../reference/datamodel.rst:3200
msgid ""
"This method is called when an :term:`iterator` is required for a container. "
"This method should return a new iterator object that can iterate over all "
"the objects in the container.  For mappings, it should iterate over the keys "
"of the container."
msgstr ""

#: ../../reference/datamodel.rst:3208
msgid ""
"Called (if present) by the :func:`reversed` built-in to implement reverse "
"iteration.  It should return a new iterator object that iterates over all "
"the objects in the container in reverse order."
msgstr ""
"Chamado (se presente) pelo :func:`reversed` embutido para implementar a "
"iteração reversa. Ele deve retornar um novo objeto iterador que itera sobre "
"todos os objetos no contêiner na ordem reversa."

#: ../../reference/datamodel.rst:3212
msgid ""
"If the :meth:`__reversed__` method is not provided, the :func:`reversed` "
"built-in will fall back to using the sequence protocol (:meth:`__len__` and :"
"meth:`__getitem__`).  Objects that support the sequence protocol should only "
"provide :meth:`__reversed__` if they can provide an implementation that is "
"more efficient than the one provided by :func:`reversed`."
msgstr ""
"Se o método :meth:`__reversed__` não for fornecido, o :func:`reversed` "
"embutido voltará a usar o protocolo de sequência (:meth:`__len__` e :meth:"
"`__getitem__`). Objetos que suportam o protocolo de sequência só devem "
"fornecer :meth:`__reversed__` se eles puderem fornecer uma implementação que "
"seja mais eficiente do que aquela fornecida por :func:`reversed`."

#: ../../reference/datamodel.rst:3219
msgid ""
"The membership test operators (:keyword:`in` and :keyword:`not in`) are "
"normally implemented as an iteration through a container. However, container "
"objects can supply the following special method with a more efficient "
"implementation, which also does not require the object be iterable."
msgstr ""
"Os operadores de teste de associação (:keyword:`in` e :keyword:`not in`) são "
"normalmente implementados como uma iteração através de um contêiner. No "
"entanto, os objetos contêiner podem fornecer o seguinte método especial com "
"uma implementação mais eficiente, que também não requer que o objeto seja "
"iterável."

#: ../../reference/datamodel.rst:3226
msgid ""
"Called to implement membership test operators.  Should return true if *item* "
"is in *self*, false otherwise.  For mapping objects, this should consider "
"the keys of the mapping rather than the values or the key-item pairs."
msgstr ""
"Chamado para implementar operadores de teste de associação. Deve retornar "
"verdadeiro se *item* estiver em *self*, falso caso contrário. Para objetos "
"de mapeamento, isso deve considerar as chaves do mapeamento em vez dos "
"valores ou pares de itens-chave."

#: ../../reference/datamodel.rst:3230
msgid ""
"For objects that don't define :meth:`__contains__`, the membership test "
"first tries iteration via :meth:`__iter__`, then the old sequence iteration "
"protocol via :meth:`__getitem__`, see :ref:`this section in the language "
"reference <membership-test-details>`."
msgstr ""
"Para objetos que não definem :meth:`__contains__`, o teste de associação "
"primeiro tenta a iteração via :meth:`__iter__`, depois o protocolo de "
"iteração de sequência antigo via :meth:`__getitem__`, consulte :ref:`esta "
"seção em a referência da linguagem <membership-test-details>`."

#: ../../reference/datamodel.rst:3239
msgid "Emulating numeric types"
msgstr "Emulando tipos numéricos"

#: ../../reference/datamodel.rst:3241
msgid ""
"The following methods can be defined to emulate numeric objects. Methods "
"corresponding to operations that are not supported by the particular kind of "
"number implemented (e.g., bitwise operations for non-integral numbers) "
"should be left undefined."
msgstr ""
"Os métodos a seguir podem ser definidos para emular objetos numéricos. "
"Métodos correspondentes a operações que não são suportadas pelo tipo "
"particular de número implementado (por exemplo, operações bit a bit para "
"números não inteiros) devem ser deixados indefinidos."

#: ../../reference/datamodel.rst:3267
msgid ""
"These methods are called to implement the binary arithmetic operations "
"(``+``, ``-``, ``*``, ``@``, ``/``, ``//``, ``%``, :func:`divmod`, :func:"
"`pow`, ``**``, ``<<``, ``>>``, ``&``, ``^``, ``|``).  For instance, to "
"evaluate the expression ``x + y``, where *x* is an instance of a class that "
"has an :meth:`__add__` method, ``type(x).__add__(x, y)`` is called.  The :"
"meth:`__divmod__` method should be the equivalent to using :meth:"
"`__floordiv__` and :meth:`__mod__`; it should not be related to :meth:"
"`__truediv__`.  Note that :meth:`__pow__` should be defined to accept an "
"optional third argument if the ternary version of the built-in :func:`pow` "
"function is to be supported."
msgstr ""

#: ../../reference/datamodel.rst:3278
msgid ""
"If one of those methods does not support the operation with the supplied "
"arguments, it should return :data:`NotImplemented`."
msgstr ""

#: ../../reference/datamodel.rst:3301
msgid ""
"These methods are called to implement the binary arithmetic operations "
"(``+``, ``-``, ``*``, ``@``, ``/``, ``//``, ``%``, :func:`divmod`, :func:"
"`pow`, ``**``, ``<<``, ``>>``, ``&``, ``^``, ``|``) with reflected (swapped) "
"operands.  These functions are only called if the left operand does not "
"support the corresponding operation [#]_ and the operands are of different "
"types. [#]_ For instance, to evaluate the expression ``x - y``, where *y* is "
"an instance of a class that has an :meth:`__rsub__` method, ``type(y)."
"__rsub__(y, x)`` is called if ``type(x).__sub__(x, y)`` returns :data:"
"`NotImplemented`."
msgstr ""

#: ../../reference/datamodel.rst:3313
msgid ""
"Note that ternary :func:`pow` will not try calling :meth:`__rpow__` (the "
"coercion rules would become too complicated)."
msgstr ""
"Note que ternário :func:`pow` não tentará chamar :meth:`__rpow__` (as regras "
"de coerção se tornariam muito complicadas)."

#: ../../reference/datamodel.rst:3318
msgid ""
"If the right operand's type is a subclass of the left operand's type and "
"that subclass provides a different implementation of the reflected method "
"for the operation, this method will be called before the left operand's non-"
"reflected method. This behavior allows subclasses to override their "
"ancestors' operations."
msgstr ""
"Se o tipo do operando direito for uma subclasse do tipo do operando esquerdo "
"e essa subclasse fornecer uma implementação diferente do método refletido "
"para a operação, este método será chamado antes do método não refletido do "
"operando esquerdo. Esse comportamento permite que as subclasses substituam "
"as operações de seus ancestrais."

#: ../../reference/datamodel.rst:3339
msgid ""
"These methods are called to implement the augmented arithmetic assignments "
"(``+=``, ``-=``, ``*=``, ``@=``, ``/=``, ``//=``, ``%=``, ``**=``, ``<<=``, "
"``>>=``, ``&=``, ``^=``, ``|=``).  These methods should attempt to do the "
"operation in-place (modifying *self*) and return the result (which could be, "
"but does not have to be, *self*).  If a specific method is not defined, or "
"if that method returns :data:`NotImplemented`, the augmented assignment "
"falls back to the normal methods.  For instance, if *x* is an instance of a "
"class with an :meth:`__iadd__` method, ``x += y`` is equivalent to ``x = x."
"__iadd__(y)`` . If :meth:`__iadd__` does not exist, or if ``x.__iadd__(y)`` "
"returns :data:`!NotImplemented`, ``x.__add__(y)`` and ``y.__radd__(x)`` are "
"considered, as with the evaluation of ``x + y``. In certain situations, "
"augmented assignment can result in unexpected errors (see :ref:`faq-"
"augmented-assignment-tuple-error`), but this behavior is in fact part of the "
"data model."
msgstr ""

#: ../../reference/datamodel.rst:3362
msgid ""
"Called to implement the unary arithmetic operations (``-``, ``+``, :func:"
"`abs` and ``~``)."
msgstr ""
"Chamado para implementar as operações aritméticas unárias (``-``, ``+``, :"
"func:`abs` e ``~``)."

#: ../../reference/datamodel.rst:3375
msgid ""
"Called to implement the built-in functions :func:`complex`, :func:`int` and :"
"func:`float`.  Should return a value of the appropriate type."
msgstr ""
"Chamado para implementar as funções embutidas :func:`complex`, :func:`int` "
"e :func:`float`. Deve retornar um valor do tipo apropriado."

#: ../../reference/datamodel.rst:3382
msgid ""
"Called to implement :func:`operator.index`, and whenever Python needs to "
"losslessly convert the numeric object to an integer object (such as in "
"slicing, or in the built-in :func:`bin`, :func:`hex` and :func:`oct` "
"functions). Presence of this method indicates that the numeric object is an "
"integer type.  Must return an integer."
msgstr ""
"Chamado para implementar :func:`operator.index`, e sempre que o Python "
"precisar converter sem perdas o objeto numérico em um objeto inteiro (como "
"no fatiamento ou nas funções embutidas :func:`bin`, :func:`hex` e :func:"
"`oct`). A presença deste método indica que o objeto numérico é do tipo "
"inteiro. Deve retornar um número inteiro."

#: ../../reference/datamodel.rst:3388
msgid ""
"If :meth:`__int__`, :meth:`__float__` and :meth:`__complex__` are not "
"defined then corresponding built-in functions :func:`int`, :func:`float` "
"and :func:`complex` fall back to :meth:`__index__`."
msgstr ""
"Se :meth:`__int__`, :meth:`__float__` e :meth:`__complex__` não estiverem "
"definidos, funções embutidas correspondentes :func:`int`, :func:`float` e :"
"func:`complex` recorre a :meth:`__index__`."

#: ../../reference/datamodel.rst:3400
msgid ""
"Called to implement the built-in function :func:`round` and :mod:`math` "
"functions :func:`~math.trunc`, :func:`~math.floor` and :func:`~math.ceil`. "
"Unless *ndigits* is passed to :meth:`!__round__` all these methods should "
"return the value of the object truncated to an :class:`~numbers.Integral` "
"(typically an :class:`int`)."
msgstr ""
"Chamado para implementar as funções embutidas :func:`round` e :func:`~math."
"trunc`, :func:`~math.floor` e :func:`~math.ceil` de :mod:`math`. A menos que "
"*ndigits* sejam passados para :meth:`!__round__` todos estes métodos devem "
"retornar o valor do objeto truncado para um :class:`~numbers.Integral` "
"(tipicamente um :class:`int`)."

#: ../../reference/datamodel.rst:3406
msgid ""
"The built-in function :func:`int` falls back to :meth:`__trunc__` if "
"neither :meth:`__int__` nor :meth:`__index__` is defined."
msgstr ""

#: ../../reference/datamodel.rst:3409
msgid "The delegation of :func:`int` to :meth:`__trunc__` is deprecated."
msgstr ""

#: ../../reference/datamodel.rst:3416
msgid "With Statement Context Managers"
msgstr "Gerenciadores de contexto da instrução with"

#: ../../reference/datamodel.rst:3418
msgid ""
"A :dfn:`context manager` is an object that defines the runtime context to be "
"established when executing a :keyword:`with` statement. The context manager "
"handles the entry into, and the exit from, the desired runtime context for "
"the execution of the block of code.  Context managers are normally invoked "
"using the :keyword:`!with` statement (described in section :ref:`with`), but "
"can also be used by directly invoking their methods."
msgstr ""
"Um :dfn:`gerenciador de contexto` é um objeto que define o contexto de tempo "
"de execução a ser estabelecido ao executar uma instrução :keyword:`with`. O "
"gerenciador de contexto lida com a entrada e a saída do contexto de tempo de "
"execução desejado para a execução do bloco de código. Os gerenciadores de "
"contexto são normalmente invocados usando a instrução :keyword:`!with` "
"(descrita na seção :ref:`with`), mas também podem ser usados invocando "
"diretamente seus métodos."

#: ../../reference/datamodel.rst:3429
msgid ""
"Typical uses of context managers include saving and restoring various kinds "
"of global state, locking and unlocking resources, closing opened files, etc."
msgstr ""
"Os usos típicos de gerenciadores de contexto incluem salvar e restaurar "
"vários tipos de estado global, travar e destravar recursos, fechar arquivos "
"abertos, etc."

#: ../../reference/datamodel.rst:3432
msgid ""
"For more information on context managers, see :ref:`typecontextmanager`. "
"The :class:`object` class itself does not provide the context manager "
"methods."
msgstr ""

#: ../../reference/datamodel.rst:3438
msgid ""
"Enter the runtime context related to this object. The :keyword:`with` "
"statement will bind this method's return value to the target(s) specified in "
"the :keyword:`!as` clause of the statement, if any."
msgstr ""
"Insere o contexto de tempo de execução relacionado a este objeto. A "
"instrução :keyword:`with` vinculará o valor de retorno deste método ao(s) "
"alvo(s) especificado(s) na cláusula :keyword:`!as` da instrução, se houver."

#: ../../reference/datamodel.rst:3445
msgid ""
"Exit the runtime context related to this object. The parameters describe the "
"exception that caused the context to be exited. If the context was exited "
"without an exception, all three arguments will be :const:`None`."
msgstr ""
"Sai do contexto de tempo de execução relacionado a este objeto. Os "
"parâmetros descrevem a exceção que fez com que o contexto fosse encerrado. "
"Se o contexto foi encerrado sem exceção, todos os três argumentos serão :"
"const:`None`."

#: ../../reference/datamodel.rst:3449
msgid ""
"If an exception is supplied, and the method wishes to suppress the exception "
"(i.e., prevent it from being propagated), it should return a true value. "
"Otherwise, the exception will be processed normally upon exit from this "
"method."
msgstr ""
"Se uma exceção for fornecida e o método desejar suprimir a exceção (ou seja, "
"evitar que ela seja propagada), ele deve retornar um valor verdadeiro. Caso "
"contrário, a exceção será processada normalmente ao sair deste método."

#: ../../reference/datamodel.rst:3453
msgid ""
"Note that :meth:`~object.__exit__` methods should not reraise the passed-in "
"exception; this is the caller's responsibility."
msgstr ""

#: ../../reference/datamodel.rst:3459
msgid ":pep:`343` - The \"with\" statement"
msgstr ":pep:`343` - A instrução \"with\""

#: ../../reference/datamodel.rst:3460
msgid ""
"The specification, background, and examples for the Python :keyword:`with` "
"statement."
msgstr ""
"A especificação, o histórico e os exemplos para a instrução Python :keyword:"
"`with`."

#: ../../reference/datamodel.rst:3467
msgid "Customizing positional arguments in class pattern matching"
msgstr ""
"Customizando argumentos posicionais na classe correspondência de padrão"

#: ../../reference/datamodel.rst:3469
msgid ""
"When using a class name in a pattern, positional arguments in the pattern "
"are not allowed by default, i.e. ``case MyClass(x, y)`` is typically invalid "
"without special support in ``MyClass``. To be able to use that kind of "
"pattern, the class needs to define a *__match_args__* attribute."
msgstr ""

#: ../../reference/datamodel.rst:3476
msgid ""
"This class variable can be assigned a tuple of strings. When this class is "
"used in a class pattern with positional arguments, each positional argument "
"will be converted into a keyword argument, using the corresponding value in "
"*__match_args__* as the keyword. The absence of this attribute is equivalent "
"to setting it to ``()``."
msgstr ""
"Essa variável de classe pode ser atribuída a uma tupla de strings. Quando "
"essa classe é usada em uma classe padrão com argumentos posicionais, cada "
"argumento posicional será convertido para um argumento nomeado, usando "
"correspondência de valor em  *__match_args__* como palavra reservada. A "
"ausência desse atributo é equivalente a defini-lo como ``()``"

#: ../../reference/datamodel.rst:3482
msgid ""
"For example, if ``MyClass.__match_args__`` is ``(\"left\", \"center\", "
"\"right\")`` that means that ``case MyClass(x, y)`` is equivalent to ``case "
"MyClass(left=x, center=y)``. Note that the number of arguments in the "
"pattern must be smaller than or equal to the number of elements in "
"*__match_args__*; if it is larger, the pattern match attempt will raise a :"
"exc:`TypeError`."
msgstr ""
"Por exemplo, se ``MyClass.__match_args__`` é ``(\"left\", \"center\", "
"\"right\")`` significa que ``case MyClass(x, y)`` é equivalente a ``case "
"MyClass(left=x, center=y)``. Note que o número de argumentos no padrão deve "
"ser menor ou igual ao número de elementos em *__match_args__*; caso seja "
"maior, a tentativa de correspondência de padrão irá levantar uma :exc:"
"`TypeError`."

#: ../../reference/datamodel.rst:3492
msgid ":pep:`634` - Structural Pattern Matching"
msgstr ":pep:`634` - Correspondência de Padrão Estrutural"

#: ../../reference/datamodel.rst:3493
msgid "The specification for the Python ``match`` statement."
msgstr "A especificação para a instrução Python ``match``"

#: ../../reference/datamodel.rst:3499
msgid "Emulating buffer types"
msgstr ""

#: ../../reference/datamodel.rst:3501
msgid ""
"The :ref:`buffer protocol <bufferobjects>` provides a way for Python objects "
"to expose efficient access to a low-level memory array. This protocol is "
"implemented by builtin types such as :class:`bytes` and :class:`memoryview`, "
"and third-party libraries may define additional buffer types."
msgstr ""

#: ../../reference/datamodel.rst:3506
msgid ""
"While buffer types are usually implemented in C, it is also possible to "
"implement the protocol in Python."
msgstr ""

#: ../../reference/datamodel.rst:3511
msgid ""
"Called when a buffer is requested from *self* (for example, by the :class:"
"`memoryview` constructor). The *flags* argument is an integer representing "
"the kind of buffer requested, affecting for example whether the returned "
"buffer is read-only or writable. :class:`inspect.BufferFlags` provides a "
"convenient way to interpret the flags. The method must return a :class:"
"`memoryview` object."
msgstr ""

#: ../../reference/datamodel.rst:3520
msgid ""
"Called when a buffer is no longer needed. The *buffer* argument is a :class:"
"`memoryview` object that was previously returned by :meth:`~object."
"__buffer__`. The method must release any resources associated with the "
"buffer. This method should return ``None``. Buffer objects that do not need "
"to perform any cleanup are not required to implement this method."
msgstr ""

#: ../../reference/datamodel.rst:3531
msgid ":pep:`688` - Making the buffer protocol accessible in Python"
msgstr ""

#: ../../reference/datamodel.rst:3532
msgid ""
"Introduces the Python ``__buffer__`` and ``__release_buffer__`` methods."
msgstr ""

#: ../../reference/datamodel.rst:3534
msgid ":class:`collections.abc.Buffer`"
msgstr ""

#: ../../reference/datamodel.rst:3535
msgid "ABC for buffer types."
msgstr ""

#: ../../reference/datamodel.rst:3540
msgid "Special method lookup"
msgstr "Pesquisa de método especial"

#: ../../reference/datamodel.rst:3542
msgid ""
"For custom classes, implicit invocations of special methods are only "
"guaranteed to work correctly if defined on an object's type, not in the "
"object's instance dictionary.  That behaviour is the reason why the "
"following code raises an exception::"
msgstr ""
"Para classes personalizadas, as invocações implícitas de métodos especiais "
"só têm garantia de funcionar corretamente se definidas em um tipo de objeto, "
"não no dicionário de instância do objeto. Esse comportamento é o motivo pelo "
"qual o código a seguir levanta uma exceção::"

#: ../../reference/datamodel.rst:3547
msgid ""
">>> class C:\n"
"...     pass\n"
"...\n"
">>> c = C()\n"
">>> c.__len__ = lambda: 5\n"
">>> len(c)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: object of type 'C' has no len()"
msgstr ""

#: ../../reference/datamodel.rst:3557
msgid ""
"The rationale behind this behaviour lies with a number of special methods "
"such as :meth:`~object.__hash__` and :meth:`~object.__repr__` that are "
"implemented by all objects, including type objects. If the implicit lookup "
"of these methods used the conventional lookup process, they would fail when "
"invoked on the type object itself::"
msgstr ""

#: ../../reference/datamodel.rst:3564
msgid ""
">>> 1 .__hash__() == hash(1)\n"
"True\n"
">>> int.__hash__() == hash(int)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: descriptor '__hash__' of 'int' object needs an argument"
msgstr ""

#: ../../reference/datamodel.rst:3571
msgid ""
"Incorrectly attempting to invoke an unbound method of a class in this way is "
"sometimes referred to as 'metaclass confusion', and is avoided by bypassing "
"the instance when looking up special methods::"
msgstr ""
"A tentativa incorreta de invocar um método não vinculado de uma classe dessa "
"maneira é às vezes referida como \"confusão de metaclasse\" e é evitada "
"ignorando a instância ao pesquisar métodos especiais::"

#: ../../reference/datamodel.rst:3575
msgid ""
">>> type(1).__hash__(1) == hash(1)\n"
"True\n"
">>> type(int).__hash__(int) == hash(int)\n"
"True"
msgstr ""

#: ../../reference/datamodel.rst:3580
msgid ""
"In addition to bypassing any instance attributes in the interest of "
"correctness, implicit special method lookup generally also bypasses the :"
"meth:`~object.__getattribute__` method even of the object's metaclass::"
msgstr ""

#: ../../reference/datamodel.rst:3584
msgid ""
">>> class Meta(type):\n"
"...     def __getattribute__(*args):\n"
"...         print(\"Metaclass getattribute invoked\")\n"
"...         return type.__getattribute__(*args)\n"
"...\n"
">>> class C(object, metaclass=Meta):\n"
"...     def __len__(self):\n"
"...         return 10\n"
"...     def __getattribute__(*args):\n"
"...         print(\"Class getattribute invoked\")\n"
"...         return object.__getattribute__(*args)\n"
"...\n"
">>> c = C()\n"
">>> c.__len__()                 # Explicit lookup via instance\n"
"Class getattribute invoked\n"
"10\n"
">>> type(c).__len__(c)          # Explicit lookup via type\n"
"Metaclass getattribute invoked\n"
"10\n"
">>> len(c)                      # Implicit lookup\n"
"10"
msgstr ""

#: ../../reference/datamodel.rst:3606
msgid ""
"Bypassing the :meth:`~object.__getattribute__` machinery in this fashion "
"provides significant scope for speed optimisations within the interpreter, "
"at the cost of some flexibility in the handling of special methods (the "
"special method *must* be set on the class object itself in order to be "
"consistently invoked by the interpreter)."
msgstr ""

#: ../../reference/datamodel.rst:3617
msgid "Coroutines"
msgstr "Corrotinas"

#: ../../reference/datamodel.rst:3621
msgid "Awaitable Objects"
msgstr "Objetos aguardáveis"

#: ../../reference/datamodel.rst:3623
msgid ""
"An :term:`awaitable` object generally implements an :meth:`~object."
"__await__` method. :term:`Coroutine objects <coroutine>` returned from :"
"keyword:`async def` functions are awaitable."
msgstr ""

#: ../../reference/datamodel.rst:3629
msgid ""
"The :term:`generator iterator` objects returned from generators decorated "
"with :func:`types.coroutine` are also awaitable, but they do not implement :"
"meth:`~object.__await__`."
msgstr ""

#: ../../reference/datamodel.rst:3635
msgid ""
"Must return an :term:`iterator`.  Should be used to implement :term:"
"`awaitable` objects.  For instance, :class:`asyncio.Future` implements this "
"method to be compatible with the :keyword:`await` expression. The :class:"
"`object` class itself is not awaitable and does not provide this method."
msgstr ""

#: ../../reference/datamodel.rst:3643
msgid ""
"The language doesn't place any restriction on the type or value of the "
"objects yielded by the iterator returned by ``__await__``, as this is "
"specific to the implementation of the asynchronous execution framework (e."
"g. :mod:`asyncio`) that will be managing the :term:`awaitable` object."
msgstr ""

#: ../../reference/datamodel.rst:3651
msgid ":pep:`492` for additional information about awaitable objects."
msgstr ":pep:`492` para informações adicionais sobre objetos aguardáveis."

#: ../../reference/datamodel.rst:3657
msgid "Coroutine Objects"
msgstr "Objetos corrotina"

#: ../../reference/datamodel.rst:3659
msgid ""
":term:`Coroutine objects <coroutine>` are :term:`awaitable` objects. A "
"coroutine's execution can be controlled by calling :meth:`~object.__await__` "
"and iterating over the result.  When the coroutine has finished executing "
"and returns, the iterator raises :exc:`StopIteration`, and the exception's :"
"attr:`~StopIteration.value` attribute holds the return value.  If the "
"coroutine raises an exception, it is propagated by the iterator.  Coroutines "
"should not directly raise unhandled :exc:`StopIteration` exceptions."
msgstr ""

#: ../../reference/datamodel.rst:3667
msgid ""
"Coroutines also have the methods listed below, which are analogous to those "
"of generators (see :ref:`generator-methods`).  However, unlike generators, "
"coroutines do not directly support iteration."
msgstr ""
"As corrotinas também têm os métodos listados abaixo, que são análogos aos "
"dos geradores (ver :ref:`generator-methods`). No entanto, ao contrário dos "
"geradores, as corrotinas não suportam diretamente a iteração."

#: ../../reference/datamodel.rst:3671
msgid "It is a :exc:`RuntimeError` to await on a coroutine more than once."
msgstr "É uma :exc:`RuntimeError` para aguardar uma corrotina mais de uma vez."

#: ../../reference/datamodel.rst:3677
msgid ""
"Starts or resumes execution of the coroutine.  If *value* is ``None``, this "
"is equivalent to advancing the iterator returned by :meth:`~object."
"__await__`.  If *value* is not ``None``, this method delegates to the :meth:"
"`~generator.send` method of the iterator that caused the coroutine to "
"suspend.  The result (return value, :exc:`StopIteration`, or other "
"exception) is the same as when iterating over the :meth:`!__await__` return "
"value, described above."
msgstr ""

#: ../../reference/datamodel.rst:3688
msgid ""
"Raises the specified exception in the coroutine.  This method delegates to "
"the :meth:`~generator.throw` method of the iterator that caused the "
"coroutine to suspend, if it has such a method.  Otherwise, the exception is "
"raised at the suspension point.  The result (return value, :exc:"
"`StopIteration`, or other exception) is the same as when iterating over the :"
"meth:`~object.__await__` return value, described above.  If the exception is "
"not caught in the coroutine, it propagates back to the caller."
msgstr ""

#: ../../reference/datamodel.rst:3699
msgid ""
"The second signature \\(type\\[, value\\[, traceback\\]\\]\\) is deprecated "
"and may be removed in a future version of Python."
msgstr ""
"A segunda assinatura \\(tipo\\[, valor\\[, traceback\\]\\]\\]\\) foi "
"descontinuada e pode ser removida em uma versão futura do Python."

#: ../../reference/datamodel.rst:3704
msgid ""
"Causes the coroutine to clean itself up and exit.  If the coroutine is "
"suspended, this method first delegates to the :meth:`~generator.close` "
"method of the iterator that caused the coroutine to suspend, if it has such "
"a method.  Then it raises :exc:`GeneratorExit` at the suspension point, "
"causing the coroutine to immediately clean itself up. Finally, the coroutine "
"is marked as having finished executing, even if it was never started."
msgstr ""
"Faz com que a corrotina se limpe e saia. Se a corrotina for suspensa, este "
"método primeiro delega para o método :meth:`~generator.close` do iterador "
"que causou a suspensão da corrotina, se tiver tal método. Então ele levanta :"
"exc:`GeneratorExit` no ponto de suspensão, fazendo com que a corrotina se "
"limpe imediatamente. Por fim, a corrotina é marcada como tendo sua execução "
"concluída, mesmo que nunca tenha sido iniciada."

#: ../../reference/datamodel.rst:3712
msgid ""
"Coroutine objects are automatically closed using the above process when they "
"are about to be destroyed."
msgstr ""
"Objetos corrotina são fechados automaticamente usando o processo acima "
"quando estão prestes a ser destruídos."

#: ../../reference/datamodel.rst:3718
msgid "Asynchronous Iterators"
msgstr "Iteradores assíncronos"

#: ../../reference/datamodel.rst:3720
msgid ""
"An *asynchronous iterator* can call asynchronous code in its ``__anext__`` "
"method."
msgstr ""
"Um *iterador assíncrono* pode chamar código assíncrono em seu método "
"``__anext__``."

#: ../../reference/datamodel.rst:3723
msgid ""
"Asynchronous iterators can be used in an :keyword:`async for` statement."
msgstr ""
"Os iteradores assíncronos podem ser usados ​em uma instrução :keyword:`async "
"for`."

#: ../../reference/datamodel.rst:3725 ../../reference/datamodel.rst:3774
msgid "The :class:`object` class itself does not provide these methods."
msgstr ""

#: ../../reference/datamodel.rst:3730
msgid "Must return an *asynchronous iterator* object."
msgstr "Deve retornar um objeto *iterador assíncrono*."

#: ../../reference/datamodel.rst:3734
msgid ""
"Must return an *awaitable* resulting in a next value of the iterator.  "
"Should raise a :exc:`StopAsyncIteration` error when the iteration is over."
msgstr ""
"Deve retornar um *aguardável* resultando em um próximo valor do iterador. "
"Deve levantar um erro :exc:`StopAsyncIteration` quando a iteração terminar."

#: ../../reference/datamodel.rst:3737
msgid "An example of an asynchronous iterable object::"
msgstr "Um exemplo de objeto iterável assíncrono::"

#: ../../reference/datamodel.rst:3739
msgid ""
"class Reader:\n"
"    async def readline(self):\n"
"        ...\n"
"\n"
"    def __aiter__(self):\n"
"        return self\n"
"\n"
"    async def __anext__(self):\n"
"        val = await self.readline()\n"
"        if val == b'':\n"
"            raise StopAsyncIteration\n"
"        return val"
msgstr ""

#: ../../reference/datamodel.rst:3754
msgid ""
"Prior to Python 3.7, :meth:`~object.__aiter__` could return an *awaitable* "
"that would resolve to an :term:`asynchronous iterator <asynchronous "
"iterator>`."
msgstr ""

#: ../../reference/datamodel.rst:3759
msgid ""
"Starting with Python 3.7, :meth:`~object.__aiter__` must return an "
"asynchronous iterator object.  Returning anything else will result in a :exc:"
"`TypeError` error."
msgstr ""

#: ../../reference/datamodel.rst:3767
msgid "Asynchronous Context Managers"
msgstr "Gerenciadores de contexto assíncronos"

#: ../../reference/datamodel.rst:3769
msgid ""
"An *asynchronous context manager* is a *context manager* that is able to "
"suspend execution in its ``__aenter__`` and ``__aexit__`` methods."
msgstr ""
"Um *gerenciador de contexto assíncrono* é um *gerenciador de contexto* que é "
"capaz de suspender a execução em seus métodos ``__aenter__`` e ``__aexit__``."

#: ../../reference/datamodel.rst:3772
msgid ""
"Asynchronous context managers can be used in an :keyword:`async with` "
"statement."
msgstr ""
"Os gerenciadores de contexto assíncronos podem ser usados ​em uma instrução :"
"keyword:`async with`."

#: ../../reference/datamodel.rst:3778
msgid ""
"Semantically similar to :meth:`~object.__enter__`, the only difference being "
"that it must return an *awaitable*."
msgstr ""

#: ../../reference/datamodel.rst:3783
msgid ""
"Semantically similar to :meth:`~object.__exit__`, the only difference being "
"that it must return an *awaitable*."
msgstr ""

#: ../../reference/datamodel.rst:3786
msgid "An example of an asynchronous context manager class::"
msgstr "Um exemplo de uma classe gerenciadora de contexto assíncrona::"

#: ../../reference/datamodel.rst:3788
msgid ""
"class AsyncContextManager:\n"
"    async def __aenter__(self):\n"
"        await log('entering context')\n"
"\n"
"    async def __aexit__(self, exc_type, exc, tb):\n"
"        await log('exiting context')"
msgstr ""

#: ../../reference/datamodel.rst:3799
msgid "Footnotes"
msgstr "Notas de rodapé"

#: ../../reference/datamodel.rst:3800
msgid ""
"It *is* possible in some cases to change an object's type, under certain "
"controlled conditions. It generally isn't a good idea though, since it can "
"lead to some very strange behaviour if it is handled incorrectly."
msgstr ""
"Em alguns casos, *é* possível alterar o tipo de um objeto, sob certas "
"condições controladas. No entanto, geralmente não é uma boa ideia, pois pode "
"levar a um comportamento muito estranho se for tratado incorretamente."

#: ../../reference/datamodel.rst:3804
msgid ""
"The :meth:`~object.__hash__`, :meth:`~object.__iter__`, :meth:`~object."
"__reversed__`, :meth:`~object.__contains__`, :meth:`~object."
"__class_getitem__` and :meth:`~os.PathLike.__fspath__` methods have special "
"handling for this. Others will still raise a :exc:`TypeError`, but may do so "
"by relying on the behavior that ``None`` is not callable."
msgstr ""

#: ../../reference/datamodel.rst:3811
msgid ""
"\"Does not support\" here means that the class has no such method, or the "
"method returns :data:`NotImplemented`.  Do not set the method to ``None`` if "
"you want to force fallback to the right operand's reflected method—that will "
"instead have the opposite effect of explicitly *blocking* such fallback."
msgstr ""

#: ../../reference/datamodel.rst:3817
msgid ""
"For operands of the same type, it is assumed that if the non-reflected "
"method -- such as :meth:`~object.__add__` -- fails then the overall "
"operation is not supported, which is why the reflected method is not called."
msgstr ""

#: ../../reference/datamodel.rst:14 ../../reference/datamodel.rst:152
#: ../../reference/datamodel.rst:163 ../../reference/datamodel.rst:184
#: ../../reference/datamodel.rst:196 ../../reference/datamodel.rst:229
#: ../../reference/datamodel.rst:250 ../../reference/datamodel.rst:265
#: ../../reference/datamodel.rst:283 ../../reference/datamodel.rst:296
#: ../../reference/datamodel.rst:328 ../../reference/datamodel.rst:363
#: ../../reference/datamodel.rst:388 ../../reference/datamodel.rst:409
#: ../../reference/datamodel.rst:427 ../../reference/datamodel.rst:447
#: ../../reference/datamodel.rst:455 ../../reference/datamodel.rst:466
#: ../../reference/datamodel.rst:483 ../../reference/datamodel.rst:519
#: ../../reference/datamodel.rst:534 ../../reference/datamodel.rst:661
#: ../../reference/datamodel.rst:799 ../../reference/datamodel.rst:823
#: ../../reference/datamodel.rst:859 ../../reference/datamodel.rst:1126
#: ../../reference/datamodel.rst:1265 ../../reference/datamodel.rst:1292
#: ../../reference/datamodel.rst:1364 ../../reference/datamodel.rst:1472
#: ../../reference/datamodel.rst:1581 ../../reference/datamodel.rst:1691
#: ../../reference/datamodel.rst:2116 ../../reference/datamodel.rst:3134
msgid "object"
msgstr "objeto"

#: ../../reference/datamodel.rst:14 ../../reference/datamodel.rst:126
msgid "data"
msgstr "dados"

#: ../../reference/datamodel.rst:23 ../../reference/datamodel.rst:296
#: ../../reference/datamodel.rst:343 ../../reference/datamodel.rst:427
#: ../../reference/datamodel.rst:466 ../../reference/datamodel.rst:799
#: ../../reference/datamodel.rst:1321 ../../reference/datamodel.rst:1774
#: ../../reference/datamodel.rst:2017 ../../reference/datamodel.rst:2023
#: ../../reference/datamodel.rst:2116 ../../reference/datamodel.rst:2673
#: ../../reference/datamodel.rst:3104 ../../reference/datamodel.rst:3262
#: ../../reference/datamodel.rst:3297 ../../reference/datamodel.rst:3311
#: ../../reference/datamodel.rst:3360 ../../reference/datamodel.rst:3370
#: ../../reference/datamodel.rst:3398
msgid "built-in function"
msgstr "função embutida"

#: ../../reference/datamodel.rst:23
msgid "id"
msgstr "id"

#: ../../reference/datamodel.rst:23 ../../reference/datamodel.rst:126
#: ../../reference/datamodel.rst:2673
msgid "type"
msgstr "tipo"

#: ../../reference/datamodel.rst:23
msgid "identity of an object"
msgstr ""

#: ../../reference/datamodel.rst:23
msgid "value of an object"
msgstr ""

#: ../../reference/datamodel.rst:23
msgid "type of an object"
msgstr ""

#: ../../reference/datamodel.rst:23
msgid "mutable object"
msgstr ""

#: ../../reference/datamodel.rst:23
msgid "immutable object"
msgstr ""

#: ../../reference/datamodel.rst:60
msgid "garbage collection"
msgstr "coleta de lixo"

#: ../../reference/datamodel.rst:60
msgid "reference counting"
msgstr ""

#: ../../reference/datamodel.rst:60
msgid "unreachable object"
msgstr ""

#: ../../reference/datamodel.rst:95 ../../reference/datamodel.rst:1126
msgid "container"
msgstr "contêiner"

#: ../../reference/datamodel.rst:126
msgid "hierarchy"
msgstr ""

#: ../../reference/datamodel.rst:126
msgid "extension"
msgstr ""

#: ../../reference/datamodel.rst:126 ../../reference/datamodel.rst:400
#: ../../reference/datamodel.rst:401 ../../reference/datamodel.rst:502
#: ../../reference/datamodel.rst:859 ../../reference/datamodel.rst:879
#: ../../reference/datamodel.rst:1321
msgid "module"
msgstr "módulo"

#: ../../reference/datamodel.rst:126 ../../reference/datamodel.rst:265
#: ../../reference/datamodel.rst:799
msgid "C"
msgstr "C"

#: ../../reference/datamodel.rst:126 ../../reference/datamodel.rst:265
#: ../../reference/datamodel.rst:799
msgid "language"
msgstr "linguagem"

#: ../../reference/datamodel.rst:139 ../../reference/datamodel.rst:1126
#: ../../reference/datamodel.rst:1144 ../../reference/datamodel.rst:1265
#: ../../reference/datamodel.rst:1285
msgid "attribute"
msgstr "atributo"

#: ../../reference/datamodel.rst:139
msgid "special"
msgstr "especial"

#: ../../reference/datamodel.rst:139
msgid "generic"
msgstr ""

#: ../../reference/datamodel.rst:184
msgid "..."
msgstr "..."

#: ../../reference/datamodel.rst:184
msgid "ellipsis literal"
msgstr "reticências literais"

#: ../../reference/datamodel.rst:196 ../../reference/datamodel.rst:1292
msgid "numeric"
msgstr "numérico"

#: ../../reference/datamodel.rst:229 ../../reference/datamodel.rst:235
#: ../../reference/datamodel.rst:343
msgid "integer"
msgstr "inteiro"

#: ../../reference/datamodel.rst:235
msgid "representation"
msgstr ""

#: ../../reference/datamodel.rst:250
msgid "Boolean"
msgstr "Booleano"

#: ../../reference/datamodel.rst:250
msgid "False"
msgstr "False"

#: ../../reference/datamodel.rst:250
msgid "True"
msgstr "True"

#: ../../reference/datamodel.rst:265
msgid "floating-point"
msgstr "ponto flutuante"

#: ../../reference/datamodel.rst:265 ../../reference/datamodel.rst:283
msgid "number"
msgstr "number"

#: ../../reference/datamodel.rst:265
msgid "Java"
msgstr ""

#: ../../reference/datamodel.rst:283 ../../reference/datamodel.rst:3370
msgid "complex"
msgstr "complexo"

#: ../../reference/datamodel.rst:296 ../../reference/datamodel.rst:427
#: ../../reference/datamodel.rst:466 ../../reference/datamodel.rst:3104
msgid "len"
msgstr "len"

#: ../../reference/datamodel.rst:296 ../../reference/datamodel.rst:1292
msgid "sequence"
msgstr "sequência"

#: ../../reference/datamodel.rst:296
msgid "index operation"
msgstr ""

#: ../../reference/datamodel.rst:296
msgid "item selection"
msgstr ""

#: ../../reference/datamodel.rst:296 ../../reference/datamodel.rst:388
#: ../../reference/datamodel.rst:466
msgid "subscription"
msgstr "subscrição"

#: ../../reference/datamodel.rst:311 ../../reference/datamodel.rst:388
msgid "slicing"
msgstr "fatiamento"

#: ../../reference/datamodel.rst:328
msgid "immutable sequence"
msgstr ""

#: ../../reference/datamodel.rst:328
msgid "immutable"
msgstr "imutável"

#: ../../reference/datamodel.rst:339 ../../reference/datamodel.rst:1992
#: ../../reference/datamodel.rst:2023
msgid "string"
msgstr "string"

#: ../../reference/datamodel.rst:339
msgid "immutable sequences"
msgstr ""

#: ../../reference/datamodel.rst:343
msgid "chr"
msgstr ""

#: ../../reference/datamodel.rst:343
msgid "ord"
msgstr ""

#: ../../reference/datamodel.rst:343
msgid "character"
msgstr "caractere"

#: ../../reference/datamodel.rst:343
msgid "Unicode"
msgstr "Unicode"

#: ../../reference/datamodel.rst:363
msgid "tuple"
msgstr "tupla"

#: ../../reference/datamodel.rst:363
msgid "singleton"
msgstr ""

#: ../../reference/datamodel.rst:363
msgid "empty"
msgstr "vazio"

#: ../../reference/datamodel.rst:376 ../../reference/datamodel.rst:2017
msgid "bytes"
msgstr "bytes"

#: ../../reference/datamodel.rst:376
msgid "byte"
msgstr ""

#: ../../reference/datamodel.rst:388
msgid "mutable sequence"
msgstr "sequência mutável"

#: ../../reference/datamodel.rst:388
msgid "mutable"
msgstr "mutável"

#: ../../reference/datamodel.rst:388 ../../reference/datamodel.rst:1144
#: ../../reference/datamodel.rst:1285
msgid "assignment"
msgstr "atribuição"

#: ../../reference/datamodel.rst:388 ../../reference/datamodel.rst:859
#: ../../reference/datamodel.rst:1728 ../../reference/datamodel.rst:1910
#: ../../reference/datamodel.rst:3425
msgid "statement"
msgstr "instrução"

#: ../../reference/datamodel.rst:400
msgid "array"
msgstr "array"

#: ../../reference/datamodel.rst:401
msgid "collections"
msgstr "collections"

#: ../../reference/datamodel.rst:409
msgid "list"
msgstr "lista"

#: ../../reference/datamodel.rst:416
msgid "bytearray"
msgstr "bytearray"

#: ../../reference/datamodel.rst:427
msgid "set type"
msgstr ""

#: ../../reference/datamodel.rst:447
msgid "set"
msgstr "set"

#: ../../reference/datamodel.rst:455
msgid "frozenset"
msgstr "frozenset"

#: ../../reference/datamodel.rst:466 ../../reference/datamodel.rst:1292
msgid "mapping"
msgstr "mapeamento"

#: ../../reference/datamodel.rst:483 ../../reference/datamodel.rst:1126
#: ../../reference/datamodel.rst:2116
msgid "dictionary"
msgstr "dicionário"

#: ../../reference/datamodel.rst:502
msgid "dbm.ndbm"
msgstr ""

#: ../../reference/datamodel.rst:502
msgid "dbm.gnu"
msgstr ""

#: ../../reference/datamodel.rst:519
msgid "callable"
msgstr "chamável"

#: ../../reference/datamodel.rst:519 ../../reference/datamodel.rst:534
#: ../../reference/datamodel.rst:743 ../../reference/datamodel.rst:761
#: ../../reference/datamodel.rst:774 ../../reference/datamodel.rst:799
msgid "function"
msgstr "função"

#: ../../reference/datamodel.rst:519 ../../reference/datamodel.rst:1126
#: ../../reference/datamodel.rst:1149 ../../reference/datamodel.rst:3054
msgid "call"
msgstr "chamada"

#: ../../reference/datamodel.rst:519
msgid "invocation"
msgstr ""

#: ../../reference/datamodel.rst:519
msgid "argument"
msgstr "argumento"

#: ../../reference/datamodel.rst:534 ../../reference/datamodel.rst:661
msgid "user-defined"
msgstr "definida por usuário"

#: ../../reference/datamodel.rst:534
msgid "user-defined function"
msgstr "função definida por usuário"

#: ../../reference/datamodel.rst:547
msgid "__closure__ (function attribute)"
msgstr "__closure__ (atributo de função)"

#: ../../reference/datamodel.rst:547
msgid "__globals__ (function attribute)"
msgstr ""

#: ../../reference/datamodel.rst:547
msgid "global"
msgstr "global"

#: ../../reference/datamodel.rst:547 ../../reference/datamodel.rst:879
msgid "namespace"
msgstr "espaço de nomes"

#: ../../reference/datamodel.rst:574
msgid "__doc__ (function attribute)"
msgstr ""

#: ../../reference/datamodel.rst:574
msgid "__name__ (function attribute)"
msgstr ""

#: ../../reference/datamodel.rst:574
msgid "__module__ (function attribute)"
msgstr ""

#: ../../reference/datamodel.rst:574
msgid "__dict__ (function attribute)"
msgstr ""

#: ../../reference/datamodel.rst:574
msgid "__defaults__ (function attribute)"
msgstr ""

#: ../../reference/datamodel.rst:574
msgid "__code__ (function attribute)"
msgstr ""

#: ../../reference/datamodel.rst:574
msgid "__annotations__ (function attribute)"
msgstr ""

#: ../../reference/datamodel.rst:574
msgid "__kwdefaults__ (function attribute)"
msgstr ""

#: ../../reference/datamodel.rst:574
msgid "__type_params__ (function attribute)"
msgstr ""

#: ../../reference/datamodel.rst:661 ../../reference/datamodel.rst:823
msgid "method"
msgstr "método"

#: ../../reference/datamodel.rst:661
msgid "user-defined method"
msgstr ""

#: ../../reference/datamodel.rst:669
msgid "__func__ (method attribute)"
msgstr ""

#: ../../reference/datamodel.rst:669
msgid "__self__ (method attribute)"
msgstr ""

#: ../../reference/datamodel.rst:669
msgid "__doc__ (method attribute)"
msgstr ""

#: ../../reference/datamodel.rst:669
msgid "__name__ (method attribute)"
msgstr ""

#: ../../reference/datamodel.rst:669
msgid "__module__ (method attribute)"
msgstr ""

#: ../../reference/datamodel.rst:743 ../../reference/datamodel.rst:1472
msgid "generator"
msgstr "gerador"

#: ../../reference/datamodel.rst:743
msgid "iterator"
msgstr "iterador"

#: ../../reference/datamodel.rst:761 ../../reference/datamodel.rst:3613
msgid "coroutine"
msgstr "corrotina"

#: ../../reference/datamodel.rst:774
msgid "asynchronous generator"
msgstr "gerador assíncrono"

#: ../../reference/datamodel.rst:774
msgid "asynchronous iterator"
msgstr "iterador assíncrono"

#: ../../reference/datamodel.rst:823
msgid "built-in method"
msgstr "método embutido"

#: ../../reference/datamodel.rst:823
msgid "built-in"
msgstr "embutido"

#: ../../reference/datamodel.rst:859
msgid "import"
msgstr "importação"

#: ../../reference/datamodel.rst:879
msgid "__name__ (module attribute)"
msgstr ""

#: ../../reference/datamodel.rst:879
msgid "__spec__ (module attribute)"
msgstr ""

#: ../../reference/datamodel.rst:879
msgid "__package__ (module attribute)"
msgstr ""

#: ../../reference/datamodel.rst:879
msgid "__loader__ (module attribute)"
msgstr ""

#: ../../reference/datamodel.rst:879
msgid "__path__ (module attribute)"
msgstr ""

#: ../../reference/datamodel.rst:879
msgid "__file__ (module attribute)"
msgstr ""

#: ../../reference/datamodel.rst:879
msgid "__cached__ (module attribute)"
msgstr ""

#: ../../reference/datamodel.rst:879
msgid "__doc__ (module attribute)"
msgstr ""

#: ../../reference/datamodel.rst:879
msgid "__annotations__ (module attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1094
msgid "__dict__ (module attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1126 ../../reference/datamodel.rst:1144
#: ../../reference/datamodel.rst:1265 ../../reference/datamodel.rst:1893
#: ../../reference/datamodel.rst:2784
msgid "class"
msgstr "classe"

#: ../../reference/datamodel.rst:1126 ../../reference/datamodel.rst:1265
#: ../../reference/datamodel.rst:1285
msgid "class instance"
msgstr "instância de classe"

#: ../../reference/datamodel.rst:1126 ../../reference/datamodel.rst:1265
#: ../../reference/datamodel.rst:3054
msgid "instance"
msgstr "instância"

#: ../../reference/datamodel.rst:1126 ../../reference/datamodel.rst:1149
msgid "class object"
msgstr "objeto classe"

#: ../../reference/datamodel.rst:1156
msgid "__name__ (class attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1156
msgid "__module__ (class attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1156
msgid "__dict__ (class attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1156
msgid "__bases__ (class attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1156
msgid "__doc__ (class attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1156
msgid "__annotations__ (class attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1156
msgid "__type_params__ (class attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1156
msgid "__static_attributes__ (class attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1156
msgid "__firstlineno__ (class attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1303
msgid "__dict__ (instance attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1303
msgid "__class__ (instance attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1321
msgid "open"
msgstr "open"

#: ../../reference/datamodel.rst:1321
msgid "io"
msgstr "io"

#: ../../reference/datamodel.rst:1321
msgid "popen() (in module os)"
msgstr ""

#: ../../reference/datamodel.rst:1321
msgid "makefile() (socket method)"
msgstr ""

#: ../../reference/datamodel.rst:1321
msgid "sys.stdin"
msgstr ""

#: ../../reference/datamodel.rst:1321
msgid "sys.stdout"
msgstr ""

#: ../../reference/datamodel.rst:1321
msgid "sys.stderr"
msgstr ""

#: ../../reference/datamodel.rst:1321
msgid "stdio"
msgstr ""

#: ../../reference/datamodel.rst:1321
msgid "stdin (in module sys)"
msgstr ""

#: ../../reference/datamodel.rst:1321
msgid "stdout (in module sys)"
msgstr ""

#: ../../reference/datamodel.rst:1321
msgid "stderr (in module sys)"
msgstr ""

#: ../../reference/datamodel.rst:1350
msgid "internal type"
msgstr ""

#: ../../reference/datamodel.rst:1350
msgid "types, internal"
msgstr ""

#: ../../reference/datamodel.rst:1364
msgid "bytecode"
msgstr "bytecode"

#: ../../reference/datamodel.rst:1364
msgid "code"
msgstr "código"

#: ../../reference/datamodel.rst:1364
msgid "code object"
msgstr "objeto código"

#: ../../reference/datamodel.rst:1375
msgid "co_argcount (code object attribute)"
msgstr "co_argcount (atributo de objeto código)"

#: ../../reference/datamodel.rst:1375
msgid "co_posonlyargcount (code object attribute)"
msgstr "co_posonlyargcount (atributo de objeto código)"

#: ../../reference/datamodel.rst:1375
msgid "co_kwonlyargcount (code object attribute)"
msgstr "co_kwonlyargcount (atributo de objeto código)"

#: ../../reference/datamodel.rst:1375
msgid "co_code (code object attribute)"
msgstr "co_code (atributo de objeto código)"

#: ../../reference/datamodel.rst:1375
msgid "co_consts (code object attribute)"
msgstr "co_consts (atributo de objeto código)"

#: ../../reference/datamodel.rst:1375
msgid "co_filename (code object attribute)"
msgstr "co_filename (atributo de objeto código)"

#: ../../reference/datamodel.rst:1375
msgid "co_firstlineno (code object attribute)"
msgstr "co_firstlineno (atributo de objeto código)"

#: ../../reference/datamodel.rst:1375
msgid "co_flags (code object attribute)"
msgstr "co_flags (atributo de objeto código)"

#: ../../reference/datamodel.rst:1375
msgid "co_lnotab (code object attribute)"
msgstr "co_lnotab (atributo de objeto código)"

#: ../../reference/datamodel.rst:1375
msgid "co_name (code object attribute)"
msgstr "co_name (atributo de objeto código)"

#: ../../reference/datamodel.rst:1375
msgid "co_names (code object attribute)"
msgstr "co_names (atributo de objeto código)"

#: ../../reference/datamodel.rst:1375
msgid "co_nlocals (code object attribute)"
msgstr "co_nlocals (atributo de objeto código)"

#: ../../reference/datamodel.rst:1375
msgid "co_stacksize (code object attribute)"
msgstr "co_stacksize (atributo de objeto código)"

#: ../../reference/datamodel.rst:1375
msgid "co_varnames (code object attribute)"
msgstr "co_varnames (atributo de objeto código)"

#: ../../reference/datamodel.rst:1375
msgid "co_cellvars (code object attribute)"
msgstr "co_cellvars (atributo de objeto código)"

#: ../../reference/datamodel.rst:1375
msgid "co_freevars (code object attribute)"
msgstr "co_freevars (atributo de objeto código)"

#: ../../reference/datamodel.rst:1375
msgid "co_qualname (code object attribute)"
msgstr "co_qualname (atributo de objeto código)"

#: ../../reference/datamodel.rst:1490
msgid "documentation string"
msgstr "string de documentação"

#: ../../reference/datamodel.rst:1581
msgid "frame"
msgstr "quadro"

#: ../../reference/datamodel.rst:1587
msgid "f_back (frame attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1587
msgid "f_code (frame attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1587
msgid "f_globals (frame attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1587
msgid "f_locals (frame attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1587
msgid "f_lasti (frame attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1587
msgid "f_builtins (frame attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1631
msgid "f_trace (frame attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1631
msgid "f_trace_lines (frame attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1631
msgid "f_trace_opcodes (frame attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1631
msgid "f_lineno (frame attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1691
msgid "traceback"
msgstr "traceback"

#: ../../reference/datamodel.rst:1691
msgid "stack"
msgstr ""

#: ../../reference/datamodel.rst:1691
msgid "trace"
msgstr ""

#: ../../reference/datamodel.rst:1691
msgid "exception"
msgstr "exceção"

#: ../../reference/datamodel.rst:1691
msgid "handler"
msgstr ""

#: ../../reference/datamodel.rst:1691
msgid "execution"
msgstr "execução"

#: ../../reference/datamodel.rst:1691
msgid "exc_info (in module sys)"
msgstr ""

#: ../../reference/datamodel.rst:1691
msgid "last_traceback (in module sys)"
msgstr ""

#: ../../reference/datamodel.rst:1691
msgid "sys.exc_info"
msgstr "sys.exc_info"

#: ../../reference/datamodel.rst:1691
msgid "sys.exception"
msgstr "sys.exception"

#: ../../reference/datamodel.rst:1691
msgid "sys.last_traceback"
msgstr "sys.last_traceback"

#: ../../reference/datamodel.rst:1728
msgid "tb_frame (traceback attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1728
msgid "tb_lineno (traceback attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1728
msgid "tb_lasti (traceback attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1728
msgid "try"
msgstr "try"

#: ../../reference/datamodel.rst:1758
msgid "tb_next (traceback attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1774 ../../reference/datamodel.rst:3134
msgid "slice"
msgstr "fatia"

#: ../../reference/datamodel.rst:1780
msgid "start (slice object attribute)"
msgstr "início (atributo de objeto fatia)"

#: ../../reference/datamodel.rst:1780
msgid "stop (slice object attribute)"
msgstr "stop (atributo de objeto fatia)"

#: ../../reference/datamodel.rst:1780
msgid "step (slice object attribute)"
msgstr "step (atributo de objeto fatia)"

#: ../../reference/datamodel.rst:1828
msgid "operator"
msgstr "operador"

#: ../../reference/datamodel.rst:1828
msgid "overloading"
msgstr ""

#: ../../reference/datamodel.rst:1828
msgid "__getitem__() (mapping object method)"
msgstr ""

#: ../../reference/datamodel.rst:1864
msgid "subclassing"
msgstr ""

#: ../../reference/datamodel.rst:1864
msgid "immutable types"
msgstr ""

#: ../../reference/datamodel.rst:1893
msgid "constructor"
msgstr ""

#: ../../reference/datamodel.rst:1910
msgid "destructor"
msgstr "destrutor"

#: ../../reference/datamodel.rst:1910
msgid "finalizer"
msgstr ""

#: ../../reference/datamodel.rst:1910
msgid "del"
msgstr "del"

#: ../../reference/datamodel.rst:1974
msgid "repr() (built-in function)"
msgstr ""

#: ../../reference/datamodel.rst:1974
msgid "__repr__() (object method)"
msgstr ""

#: ../../reference/datamodel.rst:1992
msgid "__str__() (object method)"
msgstr ""

#: ../../reference/datamodel.rst:1992
msgid "format() (built-in function)"
msgstr "format() (função embutida)"

#: ../../reference/datamodel.rst:1992
msgid "print() (built-in function)"
msgstr ""

#: ../../reference/datamodel.rst:2023
msgid "__format__() (object method)"
msgstr ""

#: ../../reference/datamodel.rst:2023
msgid "conversion"
msgstr "conversão"

#: ../../reference/datamodel.rst:2023
msgid "print"
msgstr ""

#: ../../reference/datamodel.rst:2065
msgid "comparisons"
msgstr "comparações"

#: ../../reference/datamodel.rst:2116
msgid "hash"
msgstr "hash"

#: ../../reference/datamodel.rst:2197
msgid "__len__() (mapping object method)"
msgstr ""

#: ../../reference/datamodel.rst:2302
msgid "__getattr__ (module attribute)"
msgstr ""

#: ../../reference/datamodel.rst:2302
msgid "__dir__ (module attribute)"
msgstr ""

#: ../../reference/datamodel.rst:2302
msgid "__class__ (module attribute)"
msgstr ""

#: ../../reference/datamodel.rst:2673
msgid "metaclass"
msgstr "metaclasse"

#: ../../reference/datamodel.rst:2673
msgid "= (equals)"
msgstr "= (igual)"

#: ../../reference/datamodel.rst:2673
msgid "class definition"
msgstr ""

#: ../../reference/datamodel.rst:2737
msgid "metaclass hint"
msgstr ""

#: ../../reference/datamodel.rst:2760
msgid "__prepare__ (metaclass method)"
msgstr ""

#: ../../reference/datamodel.rst:2784
msgid "body"
msgstr ""

#: ../../reference/datamodel.rst:2804
msgid "__class__ (method cell)"
msgstr ""

#: ../../reference/datamodel.rst:2804
msgid "__classcell__ (class namespace entry)"
msgstr ""

#: ../../reference/datamodel.rst:3104
msgid "__bool__() (object method)"
msgstr ""

#: ../../reference/datamodel.rst:3262 ../../reference/datamodel.rst:3297
msgid "divmod"
msgstr "divmod"

#: ../../reference/datamodel.rst:3262 ../../reference/datamodel.rst:3297
#: ../../reference/datamodel.rst:3311
msgid "pow"
msgstr "pow"

#: ../../reference/datamodel.rst:3360
msgid "abs"
msgstr "abs"

#: ../../reference/datamodel.rst:3370
msgid "int"
msgstr "int"

#: ../../reference/datamodel.rst:3370
msgid "float"
msgstr "ponto flutuante"

#: ../../reference/datamodel.rst:3398
msgid "round"
msgstr ""

#: ../../reference/datamodel.rst:3425
msgid "with"
msgstr ""

#: ../../reference/datamodel.rst:3425
msgid "context manager"
msgstr "gerenciador de contexto"
