# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2025-07-18 18:50+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../reference/toplevel_components.rst:6
msgid "Top-level components"
msgstr ""

#: ../../reference/toplevel_components.rst:10
msgid ""
"The Python interpreter can get its input from a number of sources: from a "
"script passed to it as standard input or as program argument, typed in "
"interactively, from a module source file, etc.  This chapter gives the "
"syntax used in these cases."
msgstr ""

#: ../../reference/toplevel_components.rst:19
msgid "Complete Python programs"
msgstr ""

#: ../../reference/toplevel_components.rst:28
msgid ""
"While a language specification need not prescribe how the language "
"interpreter is invoked, it is useful to have a notion of a complete Python "
"program.  A complete Python program is executed in a minimally initialized "
"environment: all built-in and standard modules are available, but none have "
"been initialized, except for :mod:`sys` (various system services), :mod:"
"`builtins` (built-in functions, exceptions and ``None``) and :mod:"
"`__main__`.  The latter is used to provide the local and global namespace "
"for execution of the complete program."
msgstr ""

#: ../../reference/toplevel_components.rst:36
msgid ""
"The syntax for a complete Python program is that for file input, described "
"in the next section."
msgstr ""

#: ../../reference/toplevel_components.rst:43
msgid ""
"The interpreter may also be invoked in interactive mode; in this case, it "
"does not read and execute a complete program but reads and executes one "
"statement (possibly compound) at a time.  The initial environment is "
"identical to that of a complete program; each statement is executed in the "
"namespace of :mod:`__main__`."
msgstr ""

#: ../../reference/toplevel_components.rst:55
msgid ""
"A complete program can be passed to the interpreter in three forms: with "
"the :option:`-c` *string* command line option, as a file passed as the first "
"command line argument, or as standard input.  If the file or standard input "
"is a tty device, the interpreter enters interactive mode; otherwise, it "
"executes the file as a complete program."
msgstr ""

#: ../../reference/toplevel_components.rst:65
msgid "File input"
msgstr ""

#: ../../reference/toplevel_components.rst:67
msgid "All input read from non-interactive files has the same form:"
msgstr ""

#: ../../reference/toplevel_components.rst:74
msgid "This syntax is used in the following situations:"
msgstr ""

#: ../../reference/toplevel_components.rst:76
msgid "when parsing a complete Python program (from a file or from a string);"
msgstr ""

#: ../../reference/toplevel_components.rst:78
msgid "when parsing a module;"
msgstr ""

#: ../../reference/toplevel_components.rst:80
msgid "when parsing a string passed to the :func:`exec` function;"
msgstr ""

#: ../../reference/toplevel_components.rst:86
msgid "Interactive input"
msgstr ""

#: ../../reference/toplevel_components.rst:88
msgid "Input in interactive mode is parsed using the following grammar:"
msgstr ""

#: ../../reference/toplevel_components.rst:95
msgid ""
"Note that a (top-level) compound statement must be followed by a blank line "
"in interactive mode; this is needed to help the parser detect the end of the "
"input."
msgstr ""

#: ../../reference/toplevel_components.rst:102
msgid "Expression input"
msgstr ""

#: ../../reference/toplevel_components.rst:107
msgid ""
":func:`eval` is used for expression input.  It ignores leading whitespace. "
"The string argument to :func:`eval` must have the following form:"
msgstr ""

#: ../../reference/toplevel_components.rst:8
msgid "interpreter"
msgstr ""

#: ../../reference/toplevel_components.rst:21
msgid "program"
msgstr ""

#: ../../reference/toplevel_components.rst:23
#: ../../reference/toplevel_components.rst:39
msgid "module"
msgstr "módulo"

#: ../../reference/toplevel_components.rst:23
msgid "sys"
msgstr "sys"

#: ../../reference/toplevel_components.rst:23
#: ../../reference/toplevel_components.rst:39
msgid "__main__"
msgstr "__main__"

#: ../../reference/toplevel_components.rst:23
msgid "builtins"
msgstr "embutidos"

#: ../../reference/toplevel_components.rst:39
msgid "interactive mode"
msgstr ""

#: ../../reference/toplevel_components.rst:49
msgid "UNIX"
msgstr ""

#: ../../reference/toplevel_components.rst:49
msgid "Windows"
msgstr ""

#: ../../reference/toplevel_components.rst:49
msgid "command line"
msgstr ""

#: ../../reference/toplevel_components.rst:49
msgid "standard input"
msgstr ""

#: ../../reference/toplevel_components.rst:104
msgid "input"
msgstr ""

#: ../../reference/toplevel_components.rst:105
msgid "built-in function"
msgstr "função embutida"

#: ../../reference/toplevel_components.rst:105
msgid "eval"
msgstr ""
