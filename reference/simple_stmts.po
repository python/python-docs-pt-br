# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Raphael Mendonça, 2019
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:51+0000\n"
"Last-Translator: Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, "
"2019\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../reference/simple_stmts.rst:6
msgid "Simple statements"
msgstr "Instruções simples"

#: ../../reference/simple_stmts.rst:10
msgid ""
"A simple statement is comprised within a single logical line. Several simple "
"statements may occur on a single line separated by semicolons.  The syntax "
"for simple statements is:"
msgstr ""
"Uma instrução simples consiste uma única linha lógica. Várias instruções "
"simples podem ocorrer em uma única linha separada por ponto e vírgula. A "
"sintaxe para instruções simples é:"

#: ../../reference/simple_stmts.rst:36
msgid "Expression statements"
msgstr "Instruções de expressão"

#: ../../reference/simple_stmts.rst:43
msgid ""
"Expression statements are used (mostly interactively) to compute and write a "
"value, or (usually) to call a procedure (a function that returns no "
"meaningful result; in Python, procedures return the value ``None``).  Other "
"uses of expression statements are allowed and occasionally useful.  The "
"syntax for an expression statement is:"
msgstr ""
"As instruções de expressão são usadas (principalmente interativamente) para "
"calcular e escrever um valor, ou (geralmente) para chamar um procedimento "
"(uma função que não retorna nenhum resultado significativo; em Python, os "
"procedimentos retornam o valor ``None``). Outros usos de instruções de "
"expressão são permitidos e ocasionalmente úteis. A sintaxe para uma "
"instrução de expressão é:"

#: ../../reference/simple_stmts.rst:52
msgid ""
"An expression statement evaluates the expression list (which may be a single "
"expression)."
msgstr ""
"Uma instrução de expressão avalia a lista de expressões (que pode ser uma "
"única expressão)."

#: ../../reference/simple_stmts.rst:64
msgid ""
"In interactive mode, if the value is not ``None``, it is converted to a "
"string using the built-in :func:`repr` function and the resulting string is "
"written to standard output on a line by itself (except if the result is "
"``None``, so that procedure calls do not cause any output.)"
msgstr ""
"No modo interativo, se o valor não for ``None``, ele será convertido em uma "
"string usando a função embutida :func:`repr` e a string resultante será "
"gravada na saída padrão em uma linha sozinha (exceto se o resultado é "
"``None``, de modo que as chamadas de procedimento não causam nenhuma saída.)"

#: ../../reference/simple_stmts.rst:72
msgid "Assignment statements"
msgstr "Instruções de atribuição"

#: ../../reference/simple_stmts.rst:82
msgid ""
"Assignment statements are used to (re)bind names to values and to modify "
"attributes or items of mutable objects:"
msgstr ""
"As instruções de atribuição são usadas para (re)vincular nomes a valores e "
"modificar atributos ou itens de objetos mutáveis:"

#: ../../reference/simple_stmts.rst:96
msgid ""
"(See section :ref:`primaries` for the syntax definitions for *attributeref*, "
"*subscription*, and *slicing*.)"
msgstr ""
"(Veja a seção :ref:`primaries` para as definições de sintaxe de "
"*attributeref*, *subscription* e *slicing*.)"

#: ../../reference/simple_stmts.rst:99
msgid ""
"An assignment statement evaluates the expression list (remember that this "
"can be a single expression or a comma-separated list, the latter yielding a "
"tuple) and assigns the single resulting object to each of the target lists, "
"from left to right."
msgstr ""
"Uma instrução de atribuição avalia a lista de expressões (lembre-se de que "
"pode ser uma única expressão ou uma lista separada por vírgulas, a última "
"produzindo uma tupla) e atribui o único objeto resultante a cada uma das "
"listas alvos, da esquerda para a direita."

#: ../../reference/simple_stmts.rst:108
msgid ""
"Assignment is defined recursively depending on the form of the target "
"(list). When a target is part of a mutable object (an attribute reference, "
"subscription or slicing), the mutable object must ultimately perform the "
"assignment and decide about its validity, and may raise an exception if the "
"assignment is unacceptable.  The rules observed by various types and the "
"exceptions raised are given with the definition of the object types (see "
"section :ref:`types`)."
msgstr ""
"A atribuição é definida recursivamente dependendo da forma do alvo (lista). "
"Quando um alvo faz parte de um objeto mutável (uma referência de atributo, "
"assinatura ou divisão), o objeto mutável deve, em última análise, executar a "
"atribuição e decidir sobre sua validade e pode levantar uma exceção se a "
"atribuição for inaceitável. As regras observadas pelos vários tipos e as "
"exceções levantadas são dadas com a definição dos tipos de objetos (ver "
"seção :ref:`types`)."

#: ../../reference/simple_stmts.rst:121
msgid ""
"Assignment of an object to a target list, optionally enclosed in parentheses "
"or square brackets, is recursively defined as follows."
msgstr ""
"A atribuição de um objeto a uma lista alvo, opcionalmente entre parênteses "
"ou colchetes, é definida recursivamente da maneira a seguir."

#: ../../reference/simple_stmts.rst:124
msgid ""
"If the target list is a single target with no trailing comma, optionally in "
"parentheses, the object is assigned to that target."
msgstr ""
"Se a lista alvo contiver um único alvo sem vírgula à direita, opcionalmente "
"entre parênteses, o objeto será atribuído a esse alvo."

#: ../../reference/simple_stmts.rst:127 ../../reference/simple_stmts.rst:139
msgid ""
"Else: The object must be an iterable with the same number of items as there "
"are targets in the target list, and the items are assigned, from left to "
"right, to the corresponding targets."
msgstr ""
"Senão: o objeto deve ser um iterável com o mesmo número de itens que existem "
"alvos na lista alvos, e os itens são atribuídos, da esquerda para a direita, "
"aos alvos correspondentes."

#: ../../reference/simple_stmts.rst:131
msgid ""
"If the target list contains one target prefixed with an asterisk, called a "
"\"starred\" target: The object must be an iterable with at least as many "
"items as there are targets in the target list, minus one.  The first items "
"of the iterable are assigned, from left to right, to the targets before the "
"starred target.  The final items of the iterable are assigned to the targets "
"after the starred target.  A list of the remaining items in the iterable is "
"then assigned to the starred target (the list can be empty)."
msgstr ""
"Se a lista alvo contiver um alvo prefixado com um asterisco, chamado de alvo "
"\"com estrela\" *(starred)*: o objeto deve ser um iterável com pelo menos "
"tantos itens quantos os alvos na lista alvo, menos um. Os primeiros itens do "
"iterável são atribuídos, da esquerda para a direita, aos alvos antes do alvo "
"com estrela. Os itens finais do iterável são atribuídos aos alvos após o "
"alvo com estrela. Uma lista dos itens restantes no iterável é então "
"atribuída ao alvo com estrela (a lista pode estar vazia)."

#: ../../reference/simple_stmts.rst:143
msgid ""
"Assignment of an object to a single target is recursively defined as follows."
msgstr ""
"A atribuição de um objeto a um único alvo é definida recursivamente da "
"maneira a seguir."

#: ../../reference/simple_stmts.rst:145
msgid "If the target is an identifier (name):"
msgstr "Se o alvo for um identificador (nome):"

#: ../../reference/simple_stmts.rst:147
msgid ""
"If the name does not occur in a :keyword:`global` or :keyword:`nonlocal` "
"statement in the current code block: the name is bound to the object in the "
"current local namespace."
msgstr ""
"Se o nome não ocorrer em uma instrução :keyword:`global` ou :keyword:"
"`nonlocal` no bloco de código atual: o nome está vinculado ao objeto no "
"espaço de nomes local atual."

#: ../../reference/simple_stmts.rst:151
msgid ""
"Otherwise: the name is bound to the object in the global namespace or the "
"outer namespace determined by :keyword:`nonlocal`, respectively."
msgstr ""
"Caso contrário: o nome é vinculado ao objeto no espaço de nomes global "
"global ou no espaço de nomes global externo determinado por :keyword:"
"`nonlocal`, respectivamente."

#: ../../reference/simple_stmts.rst:156
msgid ""
"The name is rebound if it was already bound.  This may cause the reference "
"count for the object previously bound to the name to reach zero, causing the "
"object to be deallocated and its destructor (if it has one) to be called."
msgstr ""
"O nome é vinculado novamente se já estiver vinculado. Isso pode fazer com "
"que a contagem de referências para o objeto anteriormente vinculado ao nome "
"chegue a zero, fazendo com que o objeto seja desalocado e seu destrutor (se "
"houver) seja chamado."

#: ../../reference/simple_stmts.rst:162
msgid ""
"If the target is an attribute reference: The primary expression in the "
"reference is evaluated.  It should yield an object with assignable "
"attributes; if this is not the case, :exc:`TypeError` is raised.  That "
"object is then asked to assign the assigned object to the given attribute; "
"if it cannot perform the assignment, it raises an exception (usually but not "
"necessarily :exc:`AttributeError`)."
msgstr ""
"Se o alvo for uma referência de atributo: a expressão primária na referência "
"é avaliada. Deve produzir um objeto com atributos atribuíveis; se este não "
"for o caso, a exceção :exc:`TypeError` é levanta. Esse objeto é então "
"solicitado a atribuir o objeto atribuído ao atributo fornecido; se não puder "
"executar a atribuição, ele levanta uma exceção (geralmente, mas não "
"necessariamente :exc:`AttributeError`)."

#: ../../reference/simple_stmts.rst:171
msgid ""
"Note: If the object is a class instance and the attribute reference occurs "
"on both sides of the assignment operator, the RHS expression, ``a.x`` can "
"access either an instance attribute or (if no instance attribute exists) a "
"class attribute.  The LHS target ``a.x`` is always set as an instance "
"attribute, creating it if necessary.  Thus, the two occurrences of ``a.x`` "
"do not necessarily refer to the same attribute: if the RHS expression refers "
"to a class attribute, the LHS creates a new instance attribute as the target "
"of the assignment::"
msgstr ""

#: ../../reference/simple_stmts.rst:185
msgid ""
"This description does not necessarily apply to descriptor attributes, such "
"as properties created with :func:`property`."
msgstr ""
"Esta descrição não se aplica necessariamente aos atributos do descritor, "
"como propriedades criadas com :func:`property`."

#: ../../reference/simple_stmts.rst:192
msgid ""
"If the target is a subscription: The primary expression in the reference is "
"evaluated.  It should yield either a mutable sequence object (such as a "
"list) or a mapping object (such as a dictionary).  Next, the subscript "
"expression is evaluated."
msgstr ""
"Se o alvo for uma assinatura: a expressão primária na referência é avaliada. "
"Deve produzir um objeto de sequência mutável (como uma lista) ou um objeto "
"de mapeamento (como um dicionário). Em seguida, a expressão subscrito é "
"avaliada."

#: ../../reference/simple_stmts.rst:201
msgid ""
"If the primary is a mutable sequence object (such as a list), the subscript "
"must yield an integer.  If it is negative, the sequence's length is added to "
"it.  The resulting value must be a nonnegative integer less than the "
"sequence's length, and the sequence is asked to assign the assigned object "
"to its item with that index.  If the index is out of range, :exc:"
"`IndexError` is raised (assignment to a subscripted sequence cannot add new "
"items to a list)."
msgstr ""
"Se o primário for um objeto de sequência mutável (como uma lista), o "
"subscrito deverá produzir um inteiro. Se for negativo, o comprimento da "
"sequência é adicionado a ela. O valor resultante deve ser um inteiro não "
"negativo menor que o comprimento da sequência, e a sequência é solicitada a "
"atribuir o objeto atribuído ao seu item com esse índice. Se o índice estiver "
"fora do intervalo, a exceção :exc:`IndexError` será levantada (a atribuição "
"a uma sequência subscrita não pode adicionar novos itens a uma lista)."

#: ../../reference/simple_stmts.rst:212
msgid ""
"If the primary is a mapping object (such as a dictionary), the subscript "
"must have a type compatible with the mapping's key type, and the mapping is "
"then asked to create a key/datum pair which maps the subscript to the "
"assigned object.  This can either replace an existing key/value pair with "
"the same key value, or insert a new key/value pair (if no key with the same "
"value existed)."
msgstr ""

#: ../../reference/simple_stmts.rst:218
msgid ""
"For user-defined objects, the :meth:`__setitem__` method is called with "
"appropriate arguments."
msgstr ""

#: ../../reference/simple_stmts.rst:223
msgid ""
"If the target is a slicing: The primary expression in the reference is "
"evaluated.  It should yield a mutable sequence object (such as a list).  The "
"assigned object should be a sequence object of the same type.  Next, the "
"lower and upper bound expressions are evaluated, insofar they are present; "
"defaults are zero and the sequence's length.  The bounds should evaluate to "
"integers. If either bound is negative, the sequence's length is added to "
"it.  The resulting bounds are clipped to lie between zero and the sequence's "
"length, inclusive.  Finally, the sequence object is asked to replace the "
"slice with the items of the assigned sequence.  The length of the slice may "
"be different from the length of the assigned sequence, thus changing the "
"length of the target sequence, if the target sequence allows it."
msgstr ""
"Se o alvo for um fatiamento: a expressão primária na referência é avaliada. "
"Deve produzir um objeto de sequência mutável (como uma lista). O objeto "
"atribuído deve ser um objeto de sequência do mesmo tipo. Em seguida, as "
"expressões de limite inferior e superior são avaliadas, na medida em que "
"estiverem presentes; os padrões são zero e o comprimento da sequência. Os "
"limites devem ser avaliados como inteiros. Se um dos limites for negativo, o "
"comprimento da sequência será adicionado a ele. Os limites resultantes são "
"cortados para ficarem entre zero e o comprimento da sequência, inclusive. "
"Finalmente, o objeto de sequência é solicitado a substituir a fatia pelos "
"itens da sequência atribuída. O comprimento da fatia pode ser diferente do "
"comprimento da sequência atribuída, alterando assim o comprimento da "
"sequência alvo, se a sequência alvo permitir."

#: ../../reference/simple_stmts.rst:237
msgid ""
"In the current implementation, the syntax for targets is taken to be the "
"same as for expressions, and invalid syntax is rejected during the code "
"generation phase, causing less detailed error messages."
msgstr ""
"Na implementação atual, a sintaxe dos alvos é considerada a mesma das "
"expressões e a sintaxe inválida é rejeitada durante a fase de geração do "
"código, causando mensagens de erro menos detalhadas."

#: ../../reference/simple_stmts.rst:241
msgid ""
"Although the definition of assignment implies that overlaps between the left-"
"hand side and the right-hand side are 'simultaneous' (for example ``a, b = "
"b, a`` swaps two variables), overlaps *within* the collection of assigned-to "
"variables occur left-to-right, sometimes resulting in confusion.  For "
"instance, the following program prints ``[0, 2]``::"
msgstr ""
"Embora a definição de atribuição implique que as sobreposições entre o lado "
"esquerdo e o lado direito sejam \"simultâneas\" (por exemplo, ``a, b = b, "
"a`` troca duas variáveis), sobreposições *dentro* da coleção de variáveis "
"atribuídas ocorrem da esquerda para a direita, às vezes resultando em "
"confusão. Por exemplo, o programa a seguir imprime ``[0, 2]``::"

#: ../../reference/simple_stmts.rst:255
msgid ":pep:`3132` - Extended Iterable Unpacking"
msgstr ":pep:`3132` - Desempacotamento estendido de iterável"

#: ../../reference/simple_stmts.rst:256
msgid "The specification for the ``*target`` feature."
msgstr "A especificação para o recurso ``*target``."

#: ../../reference/simple_stmts.rst:262
msgid "Augmented assignment statements"
msgstr "Instruções de atribuição aumentada"

#: ../../reference/simple_stmts.rst:280
msgid ""
"Augmented assignment is the combination, in a single statement, of a binary "
"operation and an assignment statement:"
msgstr ""
"A atribuição aumentada é a combinação, em uma única instrução, de uma "
"operação binária e uma instrução de atribuição:"

#: ../../reference/simple_stmts.rst:289
msgid ""
"(See section :ref:`primaries` for the syntax definitions of the last three "
"symbols.)"
msgstr ""
"(Veja a seção :ref:`primaries` para as definições de sintaxe dos últimos "
"três símbolos.)"

#: ../../reference/simple_stmts.rst:292
msgid ""
"An augmented assignment evaluates the target (which, unlike normal "
"assignment statements, cannot be an unpacking) and the expression list, "
"performs the binary operation specific to the type of assignment on the two "
"operands, and assigns the result to the original target.  The target is only "
"evaluated once."
msgstr ""
"Uma atribuição aumentada avalia o alvo (que, diferentemente das instruções "
"de atribuição normais, não pode ser um desempacotamento) e a lista de "
"expressões, executa a operação binária específica para o tipo de atribuição "
"nos dois operandos e atribui o resultado ao alvo original. O alvo é avaliado "
"apenas uma vez."

#: ../../reference/simple_stmts.rst:297
msgid ""
"An augmented assignment expression like ``x += 1`` can be rewritten as ``x = "
"x + 1`` to achieve a similar, but not exactly equal effect. In the augmented "
"version, ``x`` is only evaluated once. Also, when possible, the actual "
"operation is performed *in-place*, meaning that rather than creating a new "
"object and assigning that to the target, the old object is modified instead."
msgstr ""

#: ../../reference/simple_stmts.rst:303
msgid ""
"Unlike normal assignments, augmented assignments evaluate the left-hand side "
"*before* evaluating the right-hand side.  For example, ``a[i] += f(x)`` "
"first looks-up ``a[i]``, then it evaluates ``f(x)`` and performs the "
"addition, and lastly, it writes the result back to ``a[i]``."
msgstr ""
"Ao contrário das atribuições normais, as atribuições aumentadas avaliam o "
"lado esquerdo *antes* de avaliar o lado direito. Por exemplo, ``a[i] += "
"f(x)`` primeiro procura ``a[i]``, então avalia ``f(x)`` e executa a adição "
"e, por último, escreve o resultado de volta para ``a[i]``."

#: ../../reference/simple_stmts.rst:308
msgid ""
"With the exception of assigning to tuples and multiple targets in a single "
"statement, the assignment done by augmented assignment statements is handled "
"the same way as normal assignments. Similarly, with the exception of the "
"possible *in-place* behavior, the binary operation performed by augmented "
"assignment is the same as the normal binary operations."
msgstr ""
"Com exceção da atribuição a tuplas e vários alvos em uma única instrução, a "
"atribuição feita por instruções de atribuição aumentada é tratada da mesma "
"maneira que atribuições normais. Da mesma forma, com exceção do possível "
"comportamento *in-place*, a operação binária executada por atribuição "
"aumentada é a mesma que as operações binárias normais."

#: ../../reference/simple_stmts.rst:314
msgid ""
"For targets which are attribute references, the same :ref:`caveat about "
"class and instance attributes <attr-target-note>` applies as for regular "
"assignments."
msgstr ""
"Para alvos que são referências de atributos, a mesma :ref:`advertência sobre "
"atributos de classe e instância <attr-target-note>` se aplica a atribuições "
"regulares."

#: ../../reference/simple_stmts.rst:321
msgid "Annotated assignment statements"
msgstr "instruções de atribuição anotado"

#: ../../reference/simple_stmts.rst:328
msgid ""
"Annotation assignment is the combination, in a single statement, of a "
"variable or attribute annotation and an optional assignment statement:"
msgstr ""

#: ../../reference/simple_stmts.rst:334
msgid ""
"The difference from normal :ref:`assignment` is that only single target and "
"only single right hand side value is allowed."
msgstr ""

#: ../../reference/simple_stmts.rst:337
msgid ""
"For simple names as assignment targets, if in class or module scope, the "
"annotations are evaluated and stored in a special class or module attribute :"
"attr:`__annotations__` that is a dictionary mapping from variable names "
"(mangled if private) to evaluated annotations. This attribute is writable "
"and is automatically created at the start of class or module body execution, "
"if annotations are found statically."
msgstr ""

#: ../../reference/simple_stmts.rst:345
msgid ""
"For expressions as assignment targets, the annotations are evaluated if in "
"class or module scope, but not stored."
msgstr ""

#: ../../reference/simple_stmts.rst:348
msgid ""
"If a name is annotated in a function scope, then this name is local for that "
"scope. Annotations are never evaluated and stored in function scopes."
msgstr ""
"Se um nome for anotado em um escopo de função, esse nome será local para "
"esse escopo. As anotações nunca são avaliadas e armazenadas em escopos de "
"função."

#: ../../reference/simple_stmts.rst:351
msgid ""
"If the right hand side is present, an annotated assignment performs the "
"actual assignment before evaluating annotations (where applicable). If the "
"right hand side is not present for an expression target, then the "
"interpreter evaluates the target except for the last :meth:`__setitem__` or :"
"meth:`__setattr__` call."
msgstr ""

#: ../../reference/simple_stmts.rst:362
msgid ":pep:`526` - Syntax for Variable Annotations"
msgstr ":pep:`526` - Sintaxe para Anotações de Variáveis"

#: ../../reference/simple_stmts.rst:360
msgid ""
"The proposal that added syntax for annotating the types of variables "
"(including class variables and instance variables), instead of expressing "
"them through comments."
msgstr ""
"A proposta que adicionou sintaxe para anotar os tipos de variáveis "
"(incluindo variáveis de classe e variáveis de instância), em vez de expressá-"
"las por meio de comentários."

#: ../../reference/simple_stmts.rst:366
msgid ":pep:`484` - Type hints"
msgstr ":pep:`484` - Dicas de tipo"

#: ../../reference/simple_stmts.rst:365
msgid ""
"The proposal that added the :mod:`typing` module to provide a standard "
"syntax for type annotations that can be used in static analysis tools and "
"IDEs."
msgstr ""
"A proposta que adicionou o módulo :mod:`typing` para fornecer uma sintaxe "
"padrão para anotações de tipo que podem ser usadas em ferramentas de análise "
"estática e IDEs."

#: ../../reference/simple_stmts.rst:373
msgid "The :keyword:`assert` statement"
msgstr ""

#: ../../reference/simple_stmts.rst:380
msgid ""
"Assert statements are a convenient way to insert debugging assertions into a "
"program:"
msgstr ""
"As instruções assert são uma maneira conveniente de inserir asserções de "
"depuração em um programa:"

#: ../../reference/simple_stmts.rst:386
msgid "The simple form, ``assert expression``, is equivalent to ::"
msgstr "A forma simples, ``assert expression``, é equivalente a ::"

#: ../../reference/simple_stmts.rst:391
msgid ""
"The extended form, ``assert expression1, expression2``, is equivalent to ::"
msgstr ""
"A forma estendida, ``assert expression1, expression2``, é equivalente a ::"

#: ../../reference/simple_stmts.rst:400
msgid ""
"These equivalences assume that :const:`__debug__` and :exc:`AssertionError` "
"refer to the built-in variables with those names.  In the current "
"implementation, the built-in variable :const:`__debug__` is ``True`` under "
"normal circumstances, ``False`` when optimization is requested (command line "
"option :option:`-O`).  The current code generator emits no code for an "
"assert statement when optimization is requested at compile time.  Note that "
"it is unnecessary to include the source code for the expression that failed "
"in the error message; it will be displayed as part of the stack trace."
msgstr ""
"Essas equivalências presumem que :const:`__debug__` e :exc:`AssertionError` "
"referem-se às variáveis embutidas com esses nomes. Na implementação atual, a "
"variável embutida :const:`__debug__` é ``True`` em circunstâncias normais, "
"``False`` quando a otimização é solicitada (opção de linha de comando :"
"option:`-O`). O gerador de código atual não emite código para uma instrução "
"assert quando a otimização é solicitada em tempo de compilação. Observe que "
"não é necessário incluir o código-fonte da expressão que falhou na mensagem "
"de erro; ele será exibido como parte do stack trace (situação da pilha de "
"execução)."

#: ../../reference/simple_stmts.rst:409
msgid ""
"Assignments to :const:`__debug__` are illegal.  The value for the built-in "
"variable is determined when the interpreter starts."
msgstr ""
"Atribuições a :const:`__debug__` são ilegais. O valor da variável embutida é "
"determinado quando o interpretador é iniciado."

#: ../../reference/simple_stmts.rst:416
msgid "The :keyword:`pass` statement"
msgstr ""

#: ../../reference/simple_stmts.rst:426
msgid ""
":keyword:`pass` is a null operation --- when it is executed, nothing "
"happens. It is useful as a placeholder when a statement is required "
"syntactically, but no code needs to be executed, for example::"
msgstr ""
":keyword:`pass` é uma operação nula --- quando é executada, nada acontece. É "
"útil como um espaço reservado quando uma instrução é necessária "
"sintaticamente, mas nenhum código precisa ser executado, por exemplo::"

#: ../../reference/simple_stmts.rst:438
msgid "The :keyword:`del` statement"
msgstr "O comando :keyword:`del`"

#: ../../reference/simple_stmts.rst:448
msgid ""
"Deletion is recursively defined very similar to the way assignment is "
"defined. Rather than spelling it out in full details, here are some hints."
msgstr ""
"A exclusão é definida recursivamente de maneira muito semelhante à maneira "
"como a atribuição é definida. Em vez de explicar em detalhes, aqui estão "
"algumas dicas."

#: ../../reference/simple_stmts.rst:451
msgid ""
"Deletion of a target list recursively deletes each target, from left to "
"right."
msgstr ""
"A exclusão de uma lista alvo exclui recursivamente cada alvo, da esquerda "
"para a direita."

#: ../../reference/simple_stmts.rst:457
msgid ""
"Deletion of a name removes the binding of that name from the local or global "
"namespace, depending on whether the name occurs in a :keyword:`global` "
"statement in the same code block.  If the name is unbound, a :exc:"
"`NameError` exception will be raised."
msgstr ""
"A exclusão de um nome remove a ligação desse nome do espaço de nomes global "
"local ou global, dependendo se o nome ocorre em uma instrução :keyword:"
"`global` no mesmo bloco de código. Se o nome for desvinculado, uma exceção :"
"exc:`NameError` será levantada."

#: ../../reference/simple_stmts.rst:464
msgid ""
"Deletion of attribute references, subscriptions and slicings is passed to "
"the primary object involved; deletion of a slicing is in general equivalent "
"to assignment of an empty slice of the right type (but even this is "
"determined by the sliced object)."
msgstr ""
"A exclusão de referências de atributos, assinaturas e fatias é passada para "
"o objeto principal envolvido; a exclusão de um fatiamento é em geral "
"equivalente à atribuição de uma fatia vazia do tipo certo (mas mesmo isso é "
"determinado pelo objeto fatiado)."

#: ../../reference/simple_stmts.rst:469
msgid ""
"Previously it was illegal to delete a name from the local namespace if it "
"occurs as a free variable in a nested block."
msgstr ""
"Anteriormente, era ilegal excluir um nome do espaço de nomes local se ele "
"ocorresse como uma variável livre em um bloco aninhado."

#: ../../reference/simple_stmts.rst:477
msgid "The :keyword:`return` statement"
msgstr ""

#: ../../reference/simple_stmts.rst:487
msgid ""
":keyword:`return` may only occur syntactically nested in a function "
"definition, not within a nested class definition."
msgstr ""
":keyword:`return` só pode ocorrer sintaticamente aninhado em uma definição "
"de função, não em uma definição de classe aninhada."

#: ../../reference/simple_stmts.rst:490
msgid ""
"If an expression list is present, it is evaluated, else ``None`` is "
"substituted."
msgstr ""
"Se uma lista de expressões estiver presente, ela será avaliada, caso "
"contrário, ``None`` será substituído."

#: ../../reference/simple_stmts.rst:492
msgid ""
":keyword:`return` leaves the current function call with the expression list "
"(or ``None``) as return value."
msgstr ""
":keyword:`return` deixa a chamada da função atual com a lista de expressões "
"(ou ``None``) como valor de retorno."

#: ../../reference/simple_stmts.rst:497
msgid ""
"When :keyword:`return` passes control out of a :keyword:`try` statement with "
"a :keyword:`finally` clause, that :keyword:`finally` clause is executed "
"before really leaving the function."
msgstr ""

#: ../../reference/simple_stmts.rst:501
msgid ""
"In a generator function, the :keyword:`return` statement indicates that the "
"generator is done and will cause :exc:`StopIteration` to be raised. The "
"returned value (if any) is used as an argument to construct :exc:"
"`StopIteration` and becomes the :attr:`StopIteration.value` attribute."
msgstr ""
"Em uma função geradora, a instrução :keyword:`return` indica que o gerador "
"está pronto e fará com que :exc:`StopIteration` seja gerado. O valor "
"retornado (se houver) é usado como argumento para construir :exc:"
"`StopIteration` e se torna o atributo :attr:`StopIteration.value`."

#: ../../reference/simple_stmts.rst:506
msgid ""
"In an asynchronous generator function, an empty :keyword:`return` statement "
"indicates that the asynchronous generator is done and will cause :exc:"
"`StopAsyncIteration` to be raised.  A non-empty :keyword:`return` statement "
"is a syntax error in an asynchronous generator function."
msgstr ""

#: ../../reference/simple_stmts.rst:514
msgid "The :keyword:`yield` statement"
msgstr "A declaração :keyword:`yield`"

#: ../../reference/simple_stmts.rst:526
msgid ""
"A :keyword:`yield` statement is semantically equivalent to a :ref:`yield "
"expression <yieldexpr>`. The yield statement can be used to omit the "
"parentheses that would otherwise be required in the equivalent yield "
"expression statement. For example, the yield statements ::"
msgstr ""
"Uma instrução :keyword:`yield` é semanticamente equivalente a uma :ref:"
"`expressão yield <yieldexpr>`. A instrução yield pode ser usada para omitir "
"os parênteses que, de outra forma, seriam necessários na instrução de "
"expressão yield equivalente. Por exemplo, as instruções yield ::"

#: ../../reference/simple_stmts.rst:534
msgid "are equivalent to the yield expression statements ::"
msgstr "são equivalentes às instruções de expressão yield ::"

#: ../../reference/simple_stmts.rst:539
msgid ""
"Yield expressions and statements are only used when defining a :term:"
"`generator` function, and are only used in the body of the generator "
"function.  Using yield in a function definition is sufficient to cause that "
"definition to create a generator function instead of a normal function."
msgstr ""
"Expressões e instruções yield são usadas apenas ao definir uma função :term:"
"`geradora <gerador>` e são usadas apenas no corpo da função geradora. Usar "
"yield em uma definição de função é suficiente para fazer com que essa "
"definição crie uma função geradora em vez de uma função normal."

#: ../../reference/simple_stmts.rst:544
msgid ""
"For full details of :keyword:`yield` semantics, refer to the :ref:"
"`yieldexpr` section."
msgstr ""
"Para detalhes completos da semântica :keyword:`yield`, consulte a seção :ref:"
"`yieldexpr`."

#: ../../reference/simple_stmts.rst:550
msgid "The :keyword:`raise` statement"
msgstr ""

#: ../../reference/simple_stmts.rst:561
msgid ""
"If no expressions are present, :keyword:`raise` re-raises the last exception "
"that was active in the current scope.  If no exception is active in the "
"current scope, a :exc:`RuntimeError` exception is raised indicating that "
"this is an error."
msgstr ""

#: ../../reference/simple_stmts.rst:566
msgid ""
"Otherwise, :keyword:`raise` evaluates the first expression as the exception "
"object.  It must be either a subclass or an instance of :class:"
"`BaseException`. If it is a class, the exception instance will be obtained "
"when needed by instantiating the class with no arguments."
msgstr ""
"Caso contrário, :keyword:`raise` avalia a primeira expressão como o objeto "
"de exceção. Deve ser uma subclasse ou uma instância de :class:"
"`BaseException`. Se for uma classe, a instância de exceção será obtida "
"quando necessário instanciando a classe sem argumentos."

#: ../../reference/simple_stmts.rst:571
msgid ""
"The :dfn:`type` of the exception is the exception instance's class, the :dfn:"
"`value` is the instance itself."
msgstr ""
"O :dfn:`tipo` da exceção é a classe da instância de exceção, o :dfn:`valor` "
"é a própria instância."

#: ../../reference/simple_stmts.rst:576
msgid ""
"A traceback object is normally created automatically when an exception is "
"raised and attached to it as the :attr:`__traceback__` attribute, which is "
"writable. You can create an exception and set your own traceback in one step "
"using the :meth:`with_traceback` exception method (which returns the same "
"exception instance, with its traceback set to its argument), like so::"
msgstr ""

#: ../../reference/simple_stmts.rst:588
msgid ""
"The ``from`` clause is used for exception chaining: if given, the second "
"*expression* must be another exception class or instance, which will then be "
"attached to the raised exception as the :attr:`__cause__` attribute (which "
"is writable).  If the raised exception is not handled, both exceptions will "
"be printed::"
msgstr ""

#: ../../reference/simple_stmts.rst:609
msgid ""
"A similar mechanism works implicitly if an exception is raised inside an "
"exception handler or a :keyword:`finally` clause: the previous exception is "
"then attached as the new exception's :attr:`__context__` attribute::"
msgstr ""

#: ../../reference/simple_stmts.rst:628
msgid ""
"Exception chaining can be explicitly suppressed by specifying :const:`None` "
"in the ``from`` clause::"
msgstr ""

#: ../../reference/simple_stmts.rst:640
msgid ""
"Additional information on exceptions can be found in section :ref:"
"`exceptions`, and information about handling exceptions is in section :ref:"
"`try`."
msgstr ""
"Informações adicionais sobre exceções podem ser encontradas na seção :ref:"
"`exceptions`, e informações sobre como lidar com exceções estão na seção :"
"ref:`try`."

#: ../../reference/simple_stmts.rst:643
msgid ":const:`None` is now permitted as ``Y`` in ``raise X from Y``."
msgstr ":const:`None` agora é permitido como ``Y`` em ``raise X from Y``."

#: ../../reference/simple_stmts.rst:646
msgid ""
"The ``__suppress_context__`` attribute to suppress automatic display of the "
"exception context."
msgstr ""

#: ../../reference/simple_stmts.rst:653
msgid "The :keyword:`break` statement"
msgstr ""

#: ../../reference/simple_stmts.rst:664
msgid ""
":keyword:`break` may only occur syntactically nested in a :keyword:`for` or :"
"keyword:`while` loop, but not nested in a function or class definition "
"within that loop."
msgstr ""
":keyword:`break` só pode ocorrer sintaticamente aninhado em um laço :keyword:"
"`for` ou :keyword:`while`, mas não aninhado em uma função ou definição de "
"classe dentro desse laço."

#: ../../reference/simple_stmts.rst:671
msgid ""
"It terminates the nearest enclosing loop, skipping the optional :keyword:"
"`else` clause if the loop has one."
msgstr ""

#: ../../reference/simple_stmts.rst:674
msgid ""
"If a :keyword:`for` loop is terminated by :keyword:`break`, the loop control "
"target keeps its current value."
msgstr ""
"Se um laço :keyword:`for` é encerrado por :keyword:`break`, o alvo de "
"controle do laço mantém seu valor atual."

#: ../../reference/simple_stmts.rst:679
msgid ""
"When :keyword:`break` passes control out of a :keyword:`try` statement with "
"a :keyword:`finally` clause, that :keyword:`finally` clause is executed "
"before really leaving the loop."
msgstr ""

#: ../../reference/simple_stmts.rst:687
msgid "The :keyword:`continue` statement"
msgstr ""

#: ../../reference/simple_stmts.rst:699
msgid ""
":keyword:`continue` may only occur syntactically nested in a :keyword:`for` "
"or :keyword:`while` loop, but not nested in a function or class definition "
"or :keyword:`finally` clause within that loop.  It continues with the next "
"cycle of the nearest enclosing loop."
msgstr ""

#: ../../reference/simple_stmts.rst:704
msgid ""
"When :keyword:`continue` passes control out of a :keyword:`try` statement "
"with a :keyword:`finally` clause, that :keyword:`finally` clause is executed "
"before really starting the next loop cycle."
msgstr ""

#: ../../reference/simple_stmts.rst:713
msgid "The :keyword:`import` statement"
msgstr ""

#: ../../reference/simple_stmts.rst:734
msgid ""
"The basic import statement (no :keyword:`from` clause) is executed in two "
"steps:"
msgstr ""
"A instrução de importação básica (sem cláusula :keyword:`from`) é executada "
"em duas etapas:"

#: ../../reference/simple_stmts.rst:737
msgid "find a module, loading and initializing it if necessary"
msgstr "encontra um módulo, carregando e inicializando-o se necessário"

#: ../../reference/simple_stmts.rst:738
msgid ""
"define a name or names in the local namespace for the scope where the :"
"keyword:`import` statement occurs."
msgstr ""
"define um nome ou nomes no espaço de nomes local para o escopo onde ocorre a "
"instrução :keyword:`import`."

#: ../../reference/simple_stmts.rst:741
msgid ""
"When the statement contains multiple clauses (separated by commas) the two "
"steps are carried out separately for each clause, just as though the clauses "
"had been separated out into individual import statements."
msgstr ""
"Quando a instrução contém várias cláusulas (separadas por vírgulas), as duas "
"etapas são executadas separadamente para cada cláusula, como se as cláusulas "
"tivessem sido separadas em instruções de importação individuais."

#: ../../reference/simple_stmts.rst:746
msgid ""
"The details of the first step, finding and loading modules are described in "
"greater detail in the section on the :ref:`import system <importsystem>`, "
"which also describes the various types of packages and modules that can be "
"imported, as well as all the hooks that can be used to customize the import "
"system. Note that failures in this step may indicate either that the module "
"could not be located, *or* that an error occurred while initializing the "
"module, which includes execution of the module's code."
msgstr ""

#: ../../reference/simple_stmts.rst:754
msgid ""
"If the requested module is retrieved successfully, it will be made available "
"in the local namespace in one of three ways:"
msgstr ""
"Se o módulo solicitado for recuperado com sucesso, ele será disponibilizado "
"no espaço de nomes local de três maneiras:"

#: ../../reference/simple_stmts.rst:759
msgid ""
"If the module name is followed by :keyword:`as`, then the name following :"
"keyword:`as` is bound directly to the imported module."
msgstr ""

#: ../../reference/simple_stmts.rst:761
msgid ""
"If no other name is specified, and the module being imported is a top level "
"module, the module's name is bound in the local namespace as a reference to "
"the imported module"
msgstr ""
"Se nenhum outro nome for especificado e o módulo que está sendo importado "
"for um módulo de nível superior, o nome do módulo será vinculado ao espaço "
"de nomes local como uma referência ao módulo importado"

#: ../../reference/simple_stmts.rst:764
msgid ""
"If the module being imported is *not* a top level module, then the name of "
"the top level package that contains the module is bound in the local "
"namespace as a reference to the top level package. The imported module must "
"be accessed using its full qualified name rather than directly"
msgstr ""
"Se o módulo que está sendo importado *não* for um módulo de nível superior, "
"o nome do pacote de nível superior que contém o módulo será vinculado ao "
"espaço de nomes local como uma referência ao pacote de nível superior. O "
"módulo importado deve ser acessado usando seu nome completo e não diretamente"

#: ../../reference/simple_stmts.rst:774
msgid "The :keyword:`from` form uses a slightly more complex process:"
msgstr "O formulário :keyword:`from` usa um processo um pouco mais complexo:"

#: ../../reference/simple_stmts.rst:776
msgid ""
"find the module specified in the :keyword:`from` clause, loading and "
"initializing it if necessary;"
msgstr ""
"encontra o módulo especificado na cláusula :keyword:`from`, carregando e "
"inicializando-o se necessário;"

#: ../../reference/simple_stmts.rst:778
msgid "for each of the identifiers specified in the :keyword:`import` clauses:"
msgstr ""
"para cada um dos identificadores especificados nas cláusulas :keyword:"
"`import`:"

#: ../../reference/simple_stmts.rst:780
msgid "check if the imported module has an attribute by that name"
msgstr "verifica se o módulo importado tem um atributo com esse nome"

#: ../../reference/simple_stmts.rst:781
msgid ""
"if not, attempt to import a submodule with that name and then check the "
"imported module again for that attribute"
msgstr ""
"caso contrário, tenta importar um submódulo com esse nome e verifica o "
"módulo importado novamente para esse atributo"

#: ../../reference/simple_stmts.rst:783
msgid "if the attribute is not found, :exc:`ImportError` is raised."
msgstr ""
"se o atributo não for encontrado, a exceção :exc:`ImportError` é levantada."

#: ../../reference/simple_stmts.rst:784
msgid ""
"otherwise, a reference to that value is stored in the local namespace, using "
"the name in the :keyword:`as` clause if it is present, otherwise using the "
"attribute name"
msgstr ""

#: ../../reference/simple_stmts.rst:788
msgid "Examples::"
msgstr "Exemplos::"

#: ../../reference/simple_stmts.rst:798
msgid ""
"If the list of identifiers is replaced by a star (``'*'``), all public names "
"defined in the module are bound in the local namespace for the scope where "
"the :keyword:`import` statement occurs."
msgstr ""
"Se a lista de identificadores for substituída por uma estrela (``'*'``), "
"todos os nomes públicos definidos no módulo serão vinculados ao espaço de "
"nomes local para o escopo onde ocorre a instrução :keyword:`import`."

#: ../../reference/simple_stmts.rst:804
msgid ""
"The *public names* defined by a module are determined by checking the "
"module's namespace for a variable named ``__all__``; if defined, it must be "
"a sequence of strings which are names defined or imported by that module.  "
"The names given in ``__all__`` are all considered public and are required to "
"exist.  If ``__all__`` is not defined, the set of public names includes all "
"names found in the module's namespace which do not begin with an underscore "
"character (``'_'``).  ``__all__`` should contain the entire public API. It "
"is intended to avoid accidentally exporting items that are not part of the "
"API (such as library modules which were imported and used within the module)."
msgstr ""
"Os *nomes públicos* definidos por um módulo são determinados verificando o "
"espaço de nomes do módulo para uma variável chamada ``__all__``; se "
"definido, deve ser uma sequência de strings que são nomes definidos ou "
"importados por esse módulo. Os nomes dados em ``__all__`` são todos "
"considerados públicos e devem existir. Se ``__all__`` não estiver definido, "
"o conjunto de nomes públicos inclui todos os nomes encontrados no espaço de "
"nomes do módulo que não começam com um caractere sublinhado (``'_'``). "
"``__all__`` deve conter toda a API pública. Destina-se a evitar a exportação "
"acidental de itens que não fazem parte da API (como módulos de biblioteca "
"que foram importados e usados no módulo)."

#: ../../reference/simple_stmts.rst:814
msgid ""
"The wild card form of import --- ``from module import *`` --- is only "
"allowed at the module level.  Attempting to use it in class or function "
"definitions will raise a :exc:`SyntaxError`."
msgstr ""
"A forma curinga de importação --- ``from module import *`` --- só é "
"permitida no nível do módulo. Tentar usá-lo em definições de classe ou "
"função irá levantar uma :exc:`SyntaxError`."

#: ../../reference/simple_stmts.rst:821
msgid ""
"When specifying what module to import you do not have to specify the "
"absolute name of the module. When a module or package is contained within "
"another package it is possible to make a relative import within the same top "
"package without having to mention the package name. By using leading dots in "
"the specified module or package after :keyword:`from` you can specify how "
"high to traverse up the current package hierarchy without specifying exact "
"names. One leading dot means the current package where the module making the "
"import exists. Two dots means up one package level. Three dots is up two "
"levels, etc. So if you execute ``from . import mod`` from a module in the "
"``pkg`` package then you will end up importing ``pkg.mod``. If you execute "
"``from ..subpkg2 import mod`` from within ``pkg.subpkg1`` you will import "
"``pkg.subpkg2.mod``. The specification for relative imports is contained "
"within :pep:`328`."
msgstr ""

#: ../../reference/simple_stmts.rst:834
msgid ""
":func:`importlib.import_module` is provided to support applications that "
"determine dynamically the modules to be loaded."
msgstr ""
":func:`importlib.import_module` é fornecida para dar suporte a aplicações "
"que determinam dinamicamente os módulos a serem carregados."

#: ../../reference/simple_stmts.rst:841
msgid "Future statements"
msgstr "Instruções future"

#: ../../reference/simple_stmts.rst:847
msgid ""
"A :dfn:`future statement` is a directive to the compiler that a particular "
"module should be compiled using syntax or semantics that will be available "
"in a specified future release of Python where the feature becomes standard."
msgstr ""
"Uma :dfn:`instrução future` é uma diretiva para o compilador de que um "
"determinado módulo deve ser compilado usando sintaxe ou semântica que estará "
"disponível em uma versão futura especificada do Python, onde o recurso se "
"tornará padrão."

#: ../../reference/simple_stmts.rst:851
msgid ""
"The future statement is intended to ease migration to future versions of "
"Python that introduce incompatible changes to the language.  It allows use "
"of the new features on a per-module basis before the release in which the "
"feature becomes standard."
msgstr ""
"A instrução future destina-se a facilitar a migração para versões futuras do "
"Python que introduzem alterações incompatíveis na linguagem. Ele permite o "
"uso dos novos recursos por módulo antes do lançamento em que o recurso se "
"torna padrão."

#: ../../reference/simple_stmts.rst:863
msgid ""
"A future statement must appear near the top of the module.  The only lines "
"that can appear before a future statement are:"
msgstr ""
"Uma instrução future deve aparecer perto do topo do módulo. As únicas linhas "
"que podem aparecer antes de uma instrução future são:"

#: ../../reference/simple_stmts.rst:866
msgid "the module docstring (if any),"
msgstr "o módulo docstring (se houver),"

#: ../../reference/simple_stmts.rst:867
msgid "comments,"
msgstr "omentários,"

#: ../../reference/simple_stmts.rst:868
msgid "blank lines, and"
msgstr "linhas vazias e"

#: ../../reference/simple_stmts.rst:869
msgid "other future statements."
msgstr "outras instruções future."

#: ../../reference/simple_stmts.rst:873
msgid ""
"The features recognized by Python 3.0 are ``absolute_import``, ``division``, "
"``generators``, ``unicode_literals``, ``print_function``, ``nested_scopes`` "
"and ``with_statement``.  They are all redundant because they are always "
"enabled, and only kept for backwards compatibility."
msgstr ""

#: ../../reference/simple_stmts.rst:878
msgid ""
"A future statement is recognized and treated specially at compile time: "
"Changes to the semantics of core constructs are often implemented by "
"generating different code.  It may even be the case that a new feature "
"introduces new incompatible syntax (such as a new reserved word), in which "
"case the compiler may need to parse the module differently.  Such decisions "
"cannot be pushed off until runtime."
msgstr ""
"Uma instrução future é reconhecida e tratada especialmente em tempo de "
"compilação: as alterações na semântica das construções principais são "
"frequentemente implementadas gerando código diferente. Pode até ser o caso "
"de um novo recurso introduzir uma nova sintaxe incompatível (como uma nova "
"palavra reservada), caso em que o compilador pode precisar analisar o módulo "
"de maneira diferente. Tais decisões não podem ser adiadas até o tempo de "
"execução."

#: ../../reference/simple_stmts.rst:885
msgid ""
"For any given release, the compiler knows which feature names have been "
"defined, and raises a compile-time error if a future statement contains a "
"feature not known to it."
msgstr ""
"Para qualquer versão, o compilador sabe quais nomes de recursos foram "
"definidos e levanta um erro em tempo de compilação se uma instrução future "
"contiver um recurso desconhecido."

#: ../../reference/simple_stmts.rst:889
msgid ""
"The direct runtime semantics are the same as for any import statement: there "
"is a standard module :mod:`__future__`, described later, and it will be "
"imported in the usual way at the time the future statement is executed."
msgstr ""
"A semântica do tempo de execução direto é a mesma de qualquer instrução de "
"importação: existe um módulo padrão :mod:`__future__`, descrito "
"posteriormente, e será importado da maneira usual no momento em que a "
"instrução future for executada."

#: ../../reference/simple_stmts.rst:893
msgid ""
"The interesting runtime semantics depend on the specific feature enabled by "
"the future statement."
msgstr ""
"A semântica interessante do tempo de execução depende do recurso específico "
"ativado pela instrução future."

#: ../../reference/simple_stmts.rst:896
msgid "Note that there is nothing special about the statement::"
msgstr "Observe que não há nada de especial sobre a instrução::"

#: ../../reference/simple_stmts.rst:900
msgid ""
"That is not a future statement; it's an ordinary import statement with no "
"special semantics or syntax restrictions."
msgstr ""
"Essa não é uma instrução future; é uma instrução de importação comum sem "
"nenhuma semântica especial ou restrições de sintaxe."

#: ../../reference/simple_stmts.rst:903
msgid ""
"Code compiled by calls to the built-in functions :func:`exec` and :func:"
"`compile` that occur in a module :mod:`M` containing a future statement "
"will, by default, use the new syntax or semantics associated with the future "
"statement.  This can be controlled by optional arguments to :func:`compile` "
"--- see the documentation of that function for details."
msgstr ""

#: ../../reference/simple_stmts.rst:909
msgid ""
"A future statement typed at an interactive interpreter prompt will take "
"effect for the rest of the interpreter session.  If an interpreter is "
"started with the :option:`-i` option, is passed a script name to execute, "
"and the script includes a future statement, it will be in effect in the "
"interactive session started after the script is executed."
msgstr ""
"Uma instrução future tipada digitada em um prompt do interpretador "
"interativo terá efeito no restante da sessão do interpretador. Se um "
"interpretador for iniciado com a opção :option:`-i`, for passado um nome de "
"script para ser executado e o script incluir uma instrução future, ela "
"entrará em vigor na sessão interativa iniciada após a execução do script."

#: ../../reference/simple_stmts.rst:917
msgid ":pep:`236` - Back to the __future__"
msgstr ":pep:`236` - De volta ao __future__"

#: ../../reference/simple_stmts.rst:918
msgid "The original proposal for the __future__ mechanism."
msgstr "A proposta original para o mecanismo do __future__."

#: ../../reference/simple_stmts.rst:924
msgid "The :keyword:`global` statement"
msgstr ""

#: ../../reference/simple_stmts.rst:934
msgid ""
"The :keyword:`global` statement is a declaration which holds for the entire "
"current code block.  It means that the listed identifiers are to be "
"interpreted as globals.  It would be impossible to assign to a global "
"variable without :keyword:`global`, although free variables may refer to "
"globals without being declared global."
msgstr ""

#: ../../reference/simple_stmts.rst:940
msgid ""
"Names listed in a :keyword:`global` statement must not be used in the same "
"code block textually preceding that :keyword:`global` statement."
msgstr ""

#: ../../reference/simple_stmts.rst:943
msgid ""
"Names listed in a :keyword:`global` statement must not be defined as formal "
"parameters or in a :keyword:`for` loop control target, :keyword:`class` "
"definition, function definition, :keyword:`import` statement, or variable "
"annotation."
msgstr ""

#: ../../reference/simple_stmts.rst:950
msgid ""
"The current implementation does not enforce some of these restrictions, but "
"programs should not abuse this freedom, as future implementations may "
"enforce them or silently change the meaning of the program."
msgstr ""
"A implementação atual não impõe algumas dessas restrições, mas os programas "
"não devem abusar dessa liberdade, pois implementações future podem aplicá-"
"las ou alterar silenciosamente o significado do programa."

#: ../../reference/simple_stmts.rst:959
msgid ""
"**Programmer's note:** :keyword:`global` is a directive to the parser.  It "
"applies only to code parsed at the same time as the :keyword:`global` "
"statement. In particular, a :keyword:`global` statement contained in a "
"string or code object supplied to the built-in :func:`exec` function does "
"not affect the code block *containing* the function call, and code contained "
"in such a string is unaffected by :keyword:`global` statements in the code "
"containing the function call.  The same applies to the :func:`eval` and :"
"func:`compile` functions."
msgstr ""

#: ../../reference/simple_stmts.rst:971
msgid "The :keyword:`nonlocal` statement"
msgstr ""

#: ../../reference/simple_stmts.rst:983
msgid ""
"The :keyword:`nonlocal` statement causes the listed identifiers to refer to "
"previously bound variables in the nearest enclosing scope excluding globals. "
"This is important because the default behavior for binding is to search the "
"local namespace first.  The statement allows encapsulated code to rebind "
"variables outside of the local scope besides the global (module) scope."
msgstr ""

#: ../../reference/simple_stmts.rst:993
msgid ""
"Names listed in a :keyword:`nonlocal` statement, unlike those listed in a :"
"keyword:`global` statement, must refer to pre-existing bindings in an "
"enclosing scope (the scope in which a new binding should be created cannot "
"be determined unambiguously)."
msgstr ""

#: ../../reference/simple_stmts.rst:998
msgid ""
"Names listed in a :keyword:`nonlocal` statement must not collide with pre-"
"existing bindings in the local scope."
msgstr ""

#: ../../reference/simple_stmts.rst:1003
msgid ":pep:`3104` - Access to Names in Outer Scopes"
msgstr ":pep:`3104` - Acesso a nomes em escopos externos"

#: ../../reference/simple_stmts.rst:1004
msgid "The specification for the :keyword:`nonlocal` statement."
msgstr "A especificação para a instrução :keyword:`nonlocal`."
