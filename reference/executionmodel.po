# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: Adorilson Bezerra <adorilson@gmail.com>\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/"
"python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../reference/executionmodel.rst:6
msgid "Execution model"
msgstr "Modelo de Execussão"

#: ../../reference/executionmodel.rst:14
msgid "Naming and binding"
msgstr "Nomeação e ligação"

#: ../../reference/executionmodel.rst:25
msgid ""
":dfn:`Names` refer to objects.  Names are introduced by name binding "
"operations. Each occurrence of a name in the program text refers to the :dfn:"
"`binding` of that name established in the innermost function block "
"containing the use."
msgstr ""

#: ../../reference/executionmodel.rst:31
msgid ""
"A :dfn:`block` is a piece of Python program text that is executed as a unit. "
"The following are blocks: a module, a function body, and a class definition. "
"Each command typed interactively is a block.  A script file (a file given as "
"standard input to the interpreter or specified on the interpreter command "
"line the first argument) is a code block.  A script command (a command "
"specified on the interpreter command line with the '**-c**' option) is a "
"code block.  The file read by the built-in function :func:`execfile` is a "
"code block.  The string argument passed to the built-in function :func:"
"`eval` and to the :keyword:`exec` statement is a code block. The expression "
"read and evaluated by the built-in function :func:`input` is a code block."
msgstr ""

#: ../../reference/executionmodel.rst:44
msgid ""
"A code block is executed in an :dfn:`execution frame`.  A frame contains "
"some administrative information (used for debugging) and determines where "
"and how execution continues after the code block's execution has completed."
msgstr ""
"Um bloco de código é executado em um :dfn:`quadro de execução`. Um quadro "
"contém algumas informações administrativas (usadas para depuração) e "
"determina onde e como a execução continua após a conclusão do bloco de "
"código."

#: ../../reference/executionmodel.rst:50
msgid ""
"A :dfn:`scope` defines the visibility of a name within a block.  If a local "
"variable is defined in a block, its scope includes that block.  If the "
"definition occurs in a function block, the scope extends to any blocks "
"contained within the defining one, unless a contained block introduces a "
"different binding for the name.  The scope of names defined in a class block "
"is limited to the class block; it does not extend to the code blocks of "
"methods -- this includes generator expressions since they are implemented "
"using a function scope.  This means that the following will fail::"
msgstr ""

#: ../../reference/executionmodel.rst:65
msgid ""
"When a name is used in a code block, it is resolved using the nearest "
"enclosing scope.  The set of all such scopes visible to a code block is "
"called the block's :dfn:`environment`."
msgstr ""
"Quando um nome é usado em um bloco de código, ele é resolvido usando o "
"escopo envolvente mais próximo. O conjunto de todos esses escopos visíveis a "
"um bloco de código é chamado de :dfn:`ambiente` do bloco."

#: ../../reference/executionmodel.rst:71
msgid ""
"If a name is bound in a block, it is a local variable of that block. If a "
"name is bound at the module level, it is a global variable.  (The variables "
"of the module code block are local and global.)  If a variable is used in a "
"code block but not defined there, it is a :dfn:`free variable`."
msgstr ""

#: ../../reference/executionmodel.rst:80
msgid ""
"When a name is not found at all, a :exc:`NameError` exception is raised.  If "
"the name refers to a local variable that has not been bound, a :exc:"
"`UnboundLocalError` exception is raised.  :exc:`UnboundLocalError` is a "
"subclass of :exc:`NameError`."
msgstr ""

#: ../../reference/executionmodel.rst:87
msgid ""
"The following constructs bind names: formal parameters to functions, :"
"keyword:`import` statements, class and function definitions (these bind the "
"class or function name in the defining block), and targets that are "
"identifiers if occurring in an assignment, :keyword:`for` loop header, in "
"the second position of an :keyword:`except` clause header or after :keyword:"
"`as` in a :keyword:`with` statement.  The :keyword:`import` statement of the "
"form ``from ... import *`` binds all names defined in the imported module, "
"except those beginning with an underscore.  This form may only be used at "
"the module level."
msgstr ""

#: ../../reference/executionmodel.rst:97
msgid ""
"A target occurring in a :keyword:`del` statement is also considered bound "
"for this purpose (though the actual semantics are to unbind the name).  It "
"is illegal to unbind a name that is referenced by an enclosing scope; the "
"compiler will report a :exc:`SyntaxError`."
msgstr ""

#: ../../reference/executionmodel.rst:102
msgid ""
"Each assignment or import statement occurs within a block defined by a class "
"or function definition or at the module level (the top-level code block)."
msgstr ""
"Cada atribuição ou instrução de importação ocorre dentro de um bloco "
"definido por uma definição de classe ou função ou no nível do módulo (o "
"bloco de código de nível superior)."

#: ../../reference/executionmodel.rst:105
msgid ""
"If a name binding operation occurs anywhere within a code block, all uses of "
"the name within the block are treated as references to the current block.  "
"This can lead to errors when a name is used within a block before it is "
"bound. This rule is subtle.  Python lacks declarations and allows name "
"binding operations to occur anywhere within a code block.  The local "
"variables of a code block can be determined by scanning the entire text of "
"the block for name binding operations."
msgstr ""

#: ../../reference/executionmodel.rst:112
msgid ""
"If the global statement occurs within a block, all uses of the name "
"specified in the statement refer to the binding of that name in the top-"
"level namespace. Names are resolved in the top-level namespace by searching "
"the global namespace, i.e. the namespace of the module containing the code "
"block, and the builtins namespace, the namespace of the module :mod:"
"`__builtin__`.  The global namespace is searched first.  If the name is not "
"found there, the builtins namespace is searched.  The global statement must "
"precede all uses of the name."
msgstr ""

#: ../../reference/executionmodel.rst:122
msgid ""
"The builtins namespace associated with the execution of a code block is "
"actually found by looking up the name ``__builtins__`` in its global "
"namespace; this should be a dictionary or a module (in the latter case the "
"module's dictionary is used).  By default, when in the :mod:`__main__` "
"module, ``__builtins__`` is the built-in module :mod:`__builtin__` (note: no "
"'s'); when in any other module, ``__builtins__`` is an alias for the "
"dictionary of the :mod:`__builtin__` module itself.  ``__builtins__`` can be "
"set to a user-created dictionary to create a weak form of restricted "
"execution."
msgstr ""

#: ../../reference/executionmodel.rst:133
msgid ""
"Users should not touch ``__builtins__``; it is strictly an implementation "
"detail.  Users wanting to override values in the builtins namespace should :"
"keyword:`import` the :mod:`__builtin__` (no 's') module and modify its "
"attributes appropriately."
msgstr ""

#: ../../reference/executionmodel.rst:140
msgid ""
"The namespace for a module is automatically created the first time a module "
"is imported.  The main module for a script is always called :mod:`__main__`."
msgstr ""
"O espaço de nomes de um módulo é criado automaticamente na primeira vez que "
"um módulo é importado. O módulo principal de um script é sempre chamado de :"
"mod:`__main__`."

#: ../../reference/executionmodel.rst:143
msgid ""
"The :keyword:`global` statement has the same scope as a name binding "
"operation in the same block.  If the nearest enclosing scope for a free "
"variable contains a global statement, the free variable is treated as a "
"global."
msgstr ""
"A instrução :keyword:`global` tem o mesmo escopo que uma operação de ligação "
"de nome no mesmo bloco. Se o escopo mais próximo de uma variável livre "
"contiver uma instrução global, a variável livre será tratada como global."

#: ../../reference/executionmodel.rst:147
msgid ""
"A class definition is an executable statement that may use and define names. "
"These references follow the normal rules for name resolution. The namespace "
"of the class definition becomes the attribute dictionary of the class.  "
"Names defined at the class scope are not visible in methods."
msgstr ""

#: ../../reference/executionmodel.rst:156
msgid "Interaction with dynamic features"
msgstr "Interação com recursos dinâmicos"

#: ../../reference/executionmodel.rst:158
msgid ""
"There are several cases where Python statements are illegal when used in "
"conjunction with nested scopes that contain free variables."
msgstr ""

#: ../../reference/executionmodel.rst:161
msgid ""
"If a variable is referenced in an enclosing scope, it is illegal to delete "
"the name.  An error will be reported at compile time."
msgstr ""

#: ../../reference/executionmodel.rst:164
msgid ""
"If the wild card form of import --- ``import *`` --- is used in a function "
"and the function contains or is a nested block with free variables, the "
"compiler will raise a :exc:`SyntaxError`."
msgstr ""

#: ../../reference/executionmodel.rst:168
msgid ""
"If :keyword:`exec` is used in a function and the function contains or is a "
"nested block with free variables, the compiler will raise a :exc:"
"`SyntaxError` unless the exec explicitly specifies the local namespace for "
"the :keyword:`exec`.  (In other words, ``exec obj`` would be illegal, but "
"``exec obj in ns`` would be legal.)"
msgstr ""

#: ../../reference/executionmodel.rst:174
msgid ""
"The :func:`eval`, :func:`execfile`, and :func:`input` functions and the :"
"keyword:`exec` statement do not have access to the full environment for "
"resolving names.  Names may be resolved in the local and global namespaces "
"of the caller.  Free variables are not resolved in the nearest enclosing "
"namespace, but in the global namespace. [#]_ The :keyword:`exec` statement "
"and the :func:`eval` and :func:`execfile` functions have optional arguments "
"to override the global and local namespace.  If only one namespace is "
"specified, it is used for both."
msgstr ""

#: ../../reference/executionmodel.rst:187
msgid "Exceptions"
msgstr "Exceções"

#: ../../reference/executionmodel.rst:198
msgid ""
"Exceptions are a means of breaking out of the normal flow of control of a "
"code block in order to handle errors or other exceptional conditions.  An "
"exception is *raised* at the point where the error is detected; it may be "
"*handled* by the surrounding code block or by any code block that directly "
"or indirectly invoked the code block where the error occurred."
msgstr ""
"As exceções são um meio de romper o fluxo normal de controle de um bloco de "
"código para tratar erros ou outras condições excepcionais. Uma exceção é "
"*levantada* no ponto em que o erro é detectado; ele pode ser *tratado* pelo "
"bloco de código circundante ou por qualquer bloco de código que invocou "
"direta ou indiretamente o bloco de código onde ocorreu o erro."

#: ../../reference/executionmodel.rst:204
msgid ""
"The Python interpreter raises an exception when it detects a run-time error "
"(such as division by zero).  A Python program can also explicitly raise an "
"exception with the :keyword:`raise` statement. Exception handlers are "
"specified with the :keyword:`try` ... :keyword:`except` statement.  The :"
"keyword:`finally` clause of such a statement can be used to specify cleanup "
"code which does not handle the exception, but is executed whether an "
"exception occurred or not in the preceding code."
msgstr ""
"O interpretador Python levanta uma exceção quando detecta um erro em tempo "
"de execução (como divisão por zero). Um programa Python também pode levantar "
"explicitamente uma exceção com a instrução :keyword:`raise`. Os tratadores "
"de exceção são especificados com a instrução :keyword:`try` ... :keyword:"
"`except`. A cláusula :keyword:`finally` de tal declaração pode ser usada "
"para especificar o código de limpeza que não trata a exceção, mas é "
"executado se uma exceção ocorreu ou não no código anterior."

#: ../../reference/executionmodel.rst:214
msgid ""
"Python uses the \"termination\" model of error handling: an exception "
"handler can find out what happened and continue execution at an outer level, "
"but it cannot repair the cause of the error and retry the failing operation "
"(except by re-entering the offending piece of code from the top)."
msgstr ""
"Python usa o modelo de \"terminação\" da manipulação de erros: um "
"manipulador de exceção pode descobrir o que aconteceu e continuar a execução "
"em um nível externo, mas não pode reparar a causa do erro e tentar novamente "
"a operação com falha (exceto reinserindo a parte incorreta de código de "
"cima)."

#: ../../reference/executionmodel.rst:221
msgid ""
"When an exception is not handled at all, the interpreter terminates "
"execution of the program, or returns to its interactive main loop.  In "
"either case, it prints a stack backtrace, except when the exception is  :exc:"
"`SystemExit`."
msgstr ""

#: ../../reference/executionmodel.rst:225
msgid ""
"Exceptions are identified by class instances.  The :keyword:`except` clause "
"is selected depending on the class of the instance: it must reference the "
"class of the instance or a base class thereof.  The instance can be received "
"by the handler and can carry additional information about the exceptional "
"condition."
msgstr ""

#: ../../reference/executionmodel.rst:230
msgid ""
"Exceptions can also be identified by strings, in which case the :keyword:"
"`except` clause is selected by object identity.  An arbitrary value can be "
"raised along with the identifying string which can be passed to the handler."
msgstr ""

#: ../../reference/executionmodel.rst:236
msgid ""
"Messages to exceptions are not part of the Python API.  Their contents may "
"change from one version of Python to the next without warning and should not "
"be relied on by code which will run under multiple versions of the "
"interpreter."
msgstr ""

#: ../../reference/executionmodel.rst:240
msgid ""
"See also the description of the :keyword:`try` statement in section :ref:"
"`try` and :keyword:`raise` statement in section :ref:`raise`."
msgstr ""
"Veja também a descrição da declaração :keyword:`try` na seção :ref:`try` e a "
"instrução :keyword:`raise` na seção :ref:`raise`."

#: ../../reference/executionmodel.rst:244
msgid "Footnotes"
msgstr "Notas de Rodapé"

#: ../../reference/executionmodel.rst:245
msgid ""
"This limitation occurs because the code that is executed by these operations "
"is not available at the time the module is compiled."
msgstr ""
"Essa limitação ocorre porque o código executado por essas operações não está "
"disponível no momento em que o módulo é compilado."
