# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Adorilson Bezerra <adorilson@gmail.com>, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-12-13 14:18+0000\n"
"PO-Revision-Date: 2021-06-29 13:04+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../whatsnew/3.0.rst:3
msgid "What's New In Python 3.0"
msgstr "O que há de novo no Python 3.0"

#: ../../whatsnew/3.0.rst:0
msgid "Author"
msgstr "Autor"

#: ../../whatsnew/3.0.rst:7
msgid "Guido van Rossum"
msgstr "Guido van Rossum"

#: ../../whatsnew/3.0.rst:54
msgid ""
"This article explains the new features in Python 3.0, compared to 2.6. "
"Python 3.0, also known as \"Python 3000\" or \"Py3K\", is the first ever "
"*intentionally backwards incompatible* Python release. Python 3.0 was "
"released on December 3, 2008. There are more changes than in a typical "
"release, and more that are important for all Python users. Nevertheless, "
"after digesting the changes, you'll find that Python really hasn't changed "
"all that much -- by and large, we're mostly fixing well-known annoyances and "
"warts, and removing a lot of old cruft."
msgstr ""
"Este artigo explica os novos recursos do Python 3.0, em comparação com o "
"2.6. O Python 3.0, também conhecido como \"Python 3000\" ou \"Py3K\", é o "
"primeiro lançamento do Python *intencionalmente incompatível com versões "
"anteriores*. O Python 3.0 foi lançado em 3 de dezembro de 2008. Há mais "
"mudanças do que em um lançamento típico, e mais que são importantes para "
"todos os usuários do Python. No entanto, depois de digerir as mudanças, você "
"verá que o Python realmente não mudou tanto assim -- em geral, estamos "
"principalmente corrigindo aborrecimentos bem conhecidos, e removendo muita "
"sujeira antiga."

#: ../../whatsnew/3.0.rst:63
msgid ""
"This article doesn't attempt to provide a complete specification of all new "
"features, but instead tries to give a convenient overview. For full details, "
"you should refer to the documentation for Python 3.0, and/or the many PEPs "
"referenced in the text. If you want to understand the complete "
"implementation and design rationale for a particular feature, PEPs usually "
"have more details than the regular documentation; but note that PEPs usually "
"are not kept up-to-date once a feature has been fully implemented."
msgstr ""
"Este artigo não tenta fornecer uma especificação completa de todos os novos "
"recursos, mas tenta dar uma visão geral conveniente. Para detalhes "
"completos, você deve consultar a documentação do Python 3.0 e/ou as muitas "
"PEPs referenciadas no texto. Se você quiser entender a implementação "
"completa e a lógica de design para um recurso específico, as PEPs geralmente "
"têm mais detalhes do que a documentação regular; mas observe que as PEPs "
"geralmente não são mantidas atualizadas depois que um recurso foi totalmente "
"implementado."

#: ../../whatsnew/3.0.rst:72
msgid ""
"Due to time constraints this document is not as complete as it should have "
"been.  As always for a new release, the ``Misc/NEWS`` file in the source "
"distribution contains a wealth of detailed information about every small "
"thing that was changed."
msgstr ""
"Devido a restrições de tempo, este documento não está tão completo quanto "
"deveria ser. Como sempre para um novo lançamento, o arquivo ``Misc/NEWS`` na "
"distribuição fonte contém uma riqueza de informações detalhadas sobre cada "
"pequena coisa que foi alterada."

#: ../../whatsnew/3.0.rst:89
msgid "Common Stumbling Blocks"
msgstr "Obstáculos comuns"

#: ../../whatsnew/3.0.rst:91
msgid ""
"This section lists those few changes that are most likely to trip you up if "
"you're used to Python 2.5."
msgstr ""
"Esta seção lista as poucas mudanças que provavelmente irão lhe atrapalhar se "
"você estiver acostumado com o Python 2.5."

#: ../../whatsnew/3.0.rst:95
msgid "Print Is A Function"
msgstr "print é uma função"

#: ../../whatsnew/3.0.rst:97
msgid ""
"The ``print`` statement has been replaced with a :func:`print` function, "
"with keyword arguments to replace most of the special syntax of the old "
"``print`` statement (:pep:`3105`).  Examples::"
msgstr ""
"A instrução ``print`` foi substituída por uma função :func:`print`, com "
"argumentos nomeados para substituir a maior parte da sintaxe especial da "
"antiga instrução ``print`` (:pep:`3105`). Exemplos::"

#: ../../whatsnew/3.0.rst:101
msgid ""
"Old: print \"The answer is\", 2*2\n"
"New: print(\"The answer is\", 2*2)\n"
"\n"
"Old: print x,           # Trailing comma suppresses newline\n"
"New: print(x, end=\" \")  # Appends a space instead of a newline\n"
"\n"
"Old: print              # Prints a newline\n"
"New: print()            # You must call the function!\n"
"\n"
"Old: print >>sys.stderr, \"fatal error\"\n"
"New: print(\"fatal error\", file=sys.stderr)\n"
"\n"
"Old: print (x, y)       # prints repr((x, y))\n"
"New: print((x, y))      # Not the same as print(x, y)!"
msgstr ""
"Antigo: print \"The answer is\", 2*2\n"
"Novo: print(\"The answer is\", 2*2)\n"
"\n"
"Antigo: print x,           # Vírgula no final suprime nova linha\n"
"Novo: print(x, end=\" \")  # Anexa um espaço em vez de uma nova linha\n"
"\n"
"Antigo: print              # Exibe uma nova linha\n"
"Novo: print()            # Você precisa chamar a função!\n"
"\n"
"Antigo: print >>sys.stderr, \"fatal error\"\n"
"Novo: print(\"fatal error\", file=sys.stderr)\n"
"\n"
"Antigo: print (x, y)       # Exibe repr((x, y))\n"
"Novo: print((x, y))      # Não é o mesmo que print(x, y)!"

#: ../../whatsnew/3.0.rst:116
msgid "You can also customize the separator between items, e.g.::"
msgstr "Você também pode personalizar o separador entre itens, por exemplo::"

#: ../../whatsnew/3.0.rst:118
msgid "print(\"There are <\", 2**32, \"> possibilities!\", sep=\"\")"
msgstr "print(\"Há <\", 2**32, \"> possibilidades!\", sep=\"\")"

#: ../../whatsnew/3.0.rst:120
msgid "which produces:"
msgstr "que produz:"

#: ../../whatsnew/3.0.rst:122
msgid "There are <4294967296> possibilities!"
msgstr "Há <4294967296> possibilidades!"

#: ../../whatsnew/3.0.rst:126
msgid "Note:"
msgstr "Nota:"

#: ../../whatsnew/3.0.rst:128
msgid ""
"The :func:`print` function doesn't support the \"softspace\" feature of the "
"old ``print`` statement.  For example, in Python 2.x, ``print \"A\\n\", "
"\"B\"`` would write ``\"A\\nB\\n\"``; but in Python 3.0, ``print(\"A\\n\", "
"\"B\")`` writes ``\"A\\n B\\n\"``."
msgstr ""
"A função :func:`print` não tem suporte ao recurso \"softspace\" da antiga "
"instrução ``print``. Por exemplo, no Python 2.x, ``print \"A\\n\", \"B\"`` "
"escreveria ``\"A\\nB\\n\"``; mas no Python 3.0, ``print(\"A\\n\", \"B\")`` "
"escreve ``\"A\\n B\\n\"``."

#: ../../whatsnew/3.0.rst:133
msgid ""
"Initially, you'll be finding yourself typing the old ``print x`` a lot in "
"interactive mode.  Time to retrain your fingers to type ``print(x)`` instead!"
msgstr ""
"Inicialmente, você vai se pegar digitando o antigo ``print x`` bastante no "
"modo interativo. É hora de treinar seus dedos para digitar ``print(x)`` em "
"vez disso!"

#: ../../whatsnew/3.0.rst:137
msgid ""
"When using the ``2to3`` source-to-source conversion tool, all ``print`` "
"statements are automatically converted to :func:`print` function calls, so "
"this is mostly a non-issue for larger projects."
msgstr ""
"Ao usar a ferramenta de conversão de fonte para fonte ``2to3``, todas as "
"instruções ``print`` são automaticamente convertidas em chamadas de função :"
"func:`print`, então isso geralmente não é um problema para projetos maiores."

#: ../../whatsnew/3.0.rst:143
msgid "Views And Iterators Instead Of Lists"
msgstr "Visualizações e iteradores em vez de listas"

#: ../../whatsnew/3.0.rst:145
msgid "Some well-known APIs no longer return lists:"
msgstr "Algumas APIs conhecidas não retornam mais listas:"

#: ../../whatsnew/3.0.rst:147
msgid ""
":class:`dict` methods :meth:`dict.keys`, :meth:`dict.items` and :meth:`dict."
"values` return \"views\" instead of lists.  For example, this no longer "
"works: ``k = d.keys(); k.sort()``.  Use ``k = sorted(d)`` instead (this "
"works in Python 2.5 too and is just as efficient)."
msgstr ""
"Os métodos :meth:`dict.keys`, :meth:`dict.items` e :meth:`dict.values` de :"
"class:`dict` retornam visualizações, ou \"views\", em vez de listas. Por "
"exemplo, isso não funciona mais: ``k = d.keys(); k.sort()``. Use ``k = "
"sorted(d)`` em vez disso (isso funciona no Python 2.5 também e é igualmente "
"eficiente)."

#: ../../whatsnew/3.0.rst:153
msgid ""
"Also, the :meth:`!dict.iterkeys`, :meth:`!dict.iteritems` and :meth:`!dict."
"itervalues` methods are no longer supported."
msgstr ""

#: ../../whatsnew/3.0.rst:156
msgid ""
":func:`map` and :func:`filter` return iterators.  If you really need a list "
"and the input sequences are all of equal length, a quick fix is to wrap :"
"func:`map` in :func:`list`, e.g. ``list(map(...))``, but a better fix is "
"often to use a list comprehension (especially when the original code uses :"
"keyword:`lambda`), or rewriting the code so it doesn't need a list at all.  "
"Particularly tricky is :func:`map` invoked for the side effects of the "
"function; the correct transformation is to use a regular :keyword:`for` loop "
"(since creating a list would just be wasteful)."
msgstr ""
":func:`map` e :func:`filter` retornam iteradores. Se você realmente precisa "
"de uma lista e as sequências de entrada são todas de comprimento igual, uma "
"solução rápida é envolver :func:`map` em :func:`list`, por exemplo, "
"``list(map(...))``, mas uma solução melhor é frequentemente usar uma "
"compreensão de lista (especialmente quando o código original usa :keyword:"
"`lambda`), ou reescrever o código para que ele não precise de uma lista. "
"Particularmente complicado é :func:`map` invocado para os efeitos colaterais "
"da função; a transformação correta é usar um laço :keyword:`for` regular (já "
"que criar uma lista seria apenas desperdício)."

#: ../../whatsnew/3.0.rst:167
msgid ""
"If the input sequences are not of equal length, :func:`map` will stop at the "
"termination of the shortest of the sequences. For full compatibility with :"
"func:`map` from Python 2.x, also wrap the sequences in :func:`itertools."
"zip_longest`, e.g. ``map(func, *sequences)`` becomes ``list(map(func, "
"itertools.zip_longest(*sequences)))``."
msgstr ""
"Se as sequências de entrada não tiverem o mesmo comprimento, :func:`map` irá "
"parar no término da mais curta das sequências. Para compatibilidade total "
"com :func:`map` do Python 2.x, também envolva as sequências em :func:"
"`itertools.zip_longest`, por exemplo, ``map(func, *sequences)`` se torna "
"``list(map(func, itertools.zip_longest(*sequences)))``."

#: ../../whatsnew/3.0.rst:173
msgid ""
":func:`range` now behaves like :func:`!xrange` used to behave, except it "
"works with values of arbitrary size.  The latter no longer exists."
msgstr ""

#: ../../whatsnew/3.0.rst:177
msgid ":func:`zip` now returns an iterator."
msgstr ":func:`zip` agora retorna um iterador."

#: ../../whatsnew/3.0.rst:180
msgid "Ordering Comparisons"
msgstr "Comparações de ordenação"

#: ../../whatsnew/3.0.rst:182
msgid "Python 3.0 has simplified the rules for ordering comparisons:"
msgstr "O Python 3.0 simplificou as regras para ordenar comparações:"

#: ../../whatsnew/3.0.rst:184
msgid ""
"The ordering comparison operators (``<``, ``<=``, ``>=``, ``>``) raise a "
"TypeError exception when the operands don't have a meaningful natural "
"ordering.  Thus, expressions like ``1 < ''``, ``0 > None`` or ``len <= len`` "
"are no longer valid, and e.g. ``None < None`` raises :exc:`TypeError` "
"instead of returning ``False``.  A corollary is that sorting a heterogeneous "
"list no longer makes sense -- all the elements must be comparable to each "
"other.  Note that this does not apply to the ``==`` and ``!=`` operators: "
"objects of different incomparable types always compare unequal to each other."
msgstr ""
"Os operadores de comparação de ordenação (``<``, ``<=``, ``>=``, ``>``) "
"levantam uma exceção TypeError quando os operandos não têm uma ordenação "
"natural significativa. Assim, expressões como ``1 < ''``, ``0 > None`` ou "
"``len <= len`` não são mais válidas e, por exemplo, ``None < None`` levanta :"
"exc:`TypeError` em vez de retornar ``False``. Um corolário é que classificar "
"uma lista heterogênea não faz mais sentido -- todos os elementos devem ser "
"comparáveis ​entre si. Observe que isso não se aplica aos operadores ``==`` e "
"``!=``: objetos de diferentes tipos incomparáveis ​sempre são comparados de "
"forma diferente entre si."

#: ../../whatsnew/3.0.rst:195
msgid ""
":meth:`sorted` and :meth:`list.sort` no longer accept the *cmp* argument "
"providing a comparison function.  Use the *key* argument instead. N.B. the "
"*key* and *reverse* arguments are now \"keyword-only\"."
msgstr ""

#: ../../whatsnew/3.0.rst:200
msgid ""
"The :func:`!cmp` function should be treated as gone, and the :meth:`!"
"__cmp__` special method is no longer supported.  Use :meth:`~object.__lt__` "
"for sorting, :meth:`~object.__eq__` with :meth:`~object.__hash__`, and other "
"rich comparisons as needed. (If you really need the :func:`!cmp` "
"functionality, you could use the expression ``(a > b) - (a < b)`` as the "
"equivalent for ``cmp(a, b)``.)"
msgstr ""

#: ../../whatsnew/3.0.rst:207
msgid "Integers"
msgstr "Inteiros"

#: ../../whatsnew/3.0.rst:209
msgid ""
":pep:`237`: Essentially, :class:`!long` renamed to :class:`int`. That is, "
"there is only one built-in integral type, named :class:`int`; but it behaves "
"mostly like the old :class:`!long` type."
msgstr ""

#: ../../whatsnew/3.0.rst:213
msgid ""
":pep:`238`: An expression like ``1/2`` returns a float.  Use ``1//2`` to get "
"the truncating behavior.  (The latter syntax has existed for years, at least "
"since Python 2.2.)"
msgstr ""
":pep:`238`: Uma expressão como ``1/2`` retorna um float. Use ``1//2`` para "
"obter o comportamento de truncamento. (A última sintaxe existe há anos, pelo "
"menos desde o Python 2.2.)"

#: ../../whatsnew/3.0.rst:217
msgid ""
"The :data:`!sys.maxint` constant was removed, since there is no longer a "
"limit to the value of integers.  However, :data:`sys.maxsize` can be used as "
"an integer larger than any practical list or string index.  It conforms to "
"the implementation's \"natural\" integer size and is typically the same as :"
"data:`!sys.maxint` in previous releases on the same platform (assuming the "
"same build options)."
msgstr ""

#: ../../whatsnew/3.0.rst:224
msgid ""
"The :func:`repr` of a long integer doesn't include the trailing ``L`` "
"anymore, so code that unconditionally strips that character will chop off "
"the last digit instead.  (Use :func:`str` instead.)"
msgstr ""
"O :func:`repr` de um inteiro longo não inclui mais o ``L`` final, então o "
"código que remove esse caractere incondicionalmente cortará o último dígito. "
"(Use :func:`str` em vez disso.)"

#: ../../whatsnew/3.0.rst:228
msgid ""
"Octal literals are no longer of the form ``0720``; use ``0o720`` instead."
msgstr ""
"Literais octais não estão mais no formato ``0720``; em vez disso, use "
"``0o720``."

#: ../../whatsnew/3.0.rst:232
msgid "Text Vs. Data Instead Of Unicode Vs. 8-bit"
msgstr "Texto vs. Dados em vez de Unicode vs. 8 bits"

#: ../../whatsnew/3.0.rst:234
msgid ""
"Everything you thought you knew about binary data and Unicode has changed."
msgstr "Tudo o que você achava que sabia sobre dados binários e Unicode mudou."

#: ../../whatsnew/3.0.rst:237
msgid ""
"Python 3.0 uses the concepts of *text* and (binary) *data* instead of "
"Unicode strings and 8-bit strings.  All text is Unicode; however *encoded* "
"Unicode is represented as binary data.  The type used to hold text is :class:"
"`str`, the type used to hold data is :class:`bytes`.  The biggest difference "
"with the 2.x situation is that any attempt to mix text and data in Python "
"3.0 raises :exc:`TypeError`, whereas if you were to mix Unicode and 8-bit "
"strings in Python 2.x, it would work if the 8-bit string happened to contain "
"only 7-bit (ASCII) bytes, but you would get :exc:`UnicodeDecodeError` if it "
"contained non-ASCII values.  This value-specific behavior has caused "
"numerous sad faces over the years."
msgstr ""
"O Python 3.0 usa os conceitos de *texto* e *dados* (binários) em vez de "
"strings Unicode e strings de 8 bits. Todo texto é Unicode; no entanto, o "
"Unicode *codificado* é representado como dados binários. O tipo usado para "
"armazenar texto é :class:`str`, o tipo usado para armazenar dados é :class:"
"`bytes`. A maior diferença com a situação 2.x é que qualquer tentativa de "
"misturar texto e dados no Python 3.0 levanta :exc:`TypeError`, enquanto que "
"se você misturasse strings Unicode e de 8 bits no Python 2.x, funcionaria se "
"a string de 8 bits contivesse apenas bytes de 7 bits (ASCII), mas você "
"obteria :exc:`UnicodeDecodeError` se contivesse valores não ASCII. Esse "
"comportamento específico de valor causou inúmeras caras tristes ao longo dos "
"anos."

#: ../../whatsnew/3.0.rst:250
msgid ""
"As a consequence of this change in philosophy, pretty much all code that "
"uses Unicode, encodings or binary data most likely has to change.  The "
"change is for the better, as in the 2.x world there were numerous bugs "
"having to do with mixing encoded and unencoded text.  To be prepared in "
"Python 2.x, start using :class:`!unicode` for all unencoded text, and :class:"
"`str` for binary or encoded data only.  Then the ``2to3`` tool will do most "
"of the work for you."
msgstr ""

#: ../../whatsnew/3.0.rst:258
msgid ""
"You can no longer use ``u\"...\"`` literals for Unicode text. However, you "
"must use ``b\"...\"`` literals for binary data."
msgstr ""
"Você não pode mais usar literais ``u\"...\"`` para texto Unicode. No "
"entanto, você deve usar literais ``b\"...\"`` para dados binários."

#: ../../whatsnew/3.0.rst:261
msgid ""
"As the :class:`str` and :class:`bytes` types cannot be mixed, you must "
"always explicitly convert between them.  Use :meth:`str.encode` to go from :"
"class:`str` to :class:`bytes`, and :meth:`bytes.decode` to go from :class:"
"`bytes` to :class:`str`.  You can also use ``bytes(s, encoding=...)`` and "
"``str(b, encoding=...)``, respectively."
msgstr ""
"Como os tipos :class:`str` e :class:`bytes` não podem ser misturados, você "
"deve sempre converter explicitamente entre eles. Use :meth:`str.encode` para "
"ir de :class:`str` para :class:`bytes`, e :meth:`bytes.decode` para ir de :"
"class:`bytes` para :class:`str`. Você também pode usar ``bytes(s, "
"encoding=...)`` e ``str(b, encoding=...)``, respectivamente."

#: ../../whatsnew/3.0.rst:268
msgid ""
"Like :class:`str`, the :class:`bytes` type is immutable.  There is a "
"separate *mutable* type to hold buffered binary data, :class:`bytearray`.  "
"Nearly all APIs that accept :class:`bytes` also accept :class:`bytearray`.  "
"The mutable API is based on :class:`collections.MutableSequence <collections."
"abc.MutableSequence>`."
msgstr ""

#: ../../whatsnew/3.0.rst:274
msgid ""
"All backslashes in raw string literals are interpreted literally. This means "
"that ``'\\U'`` and ``'\\u'`` escapes in raw strings are not treated "
"specially.  For example, ``r'\\u20ac'`` is a string of 6 characters in "
"Python 3.0, whereas in 2.6, ``ur'\\u20ac'`` was the single \"euro\" "
"character.  (Of course, this change only affects raw string literals; the "
"euro character is ``'\\u20ac'`` in Python 3.0.)"
msgstr ""
"Todas as contrabarras em literais de strings brutas são interpretadas "
"literalmente. Isso significa que os escapes ``'\\U'`` e ``'\\u'`` em strings "
"brutas não são tratados de forma especial. Por exemplo, ``r'\\u20ac'`` é uma "
"string de 6 caracteres no Python 3.0, enquanto no 2.6, ``ur'\\u20ac'`` era o "
"único caractere \"euro\". (É claro que essa mudança afeta apenas literais de "
"strings brutas; o caractere euro é ``'\\u20ac'`` no Python 3.0.)"

#: ../../whatsnew/3.0.rst:281
msgid ""
"The built-in :class:`!basestring` abstract type was removed.  Use :class:"
"`str` instead.  The :class:`str` and :class:`bytes` types don't have "
"functionality enough in common to warrant a shared base class.  The ``2to3`` "
"tool (see below) replaces every occurrence of :class:`!basestring` with :"
"class:`str`."
msgstr ""

#: ../../whatsnew/3.0.rst:287
msgid ""
"Files opened as text files (still the default mode for :func:`open`) always "
"use an encoding to map between strings (in memory) and bytes (on disk).  "
"Binary files (opened with a ``b`` in the mode argument) always use bytes in "
"memory.  This means that if a file is opened using an incorrect mode or "
"encoding, I/O will likely fail loudly, instead of silently producing "
"incorrect data.  It also means that even Unix users will have to specify the "
"correct mode (text or binary) when opening a file.  There is a platform-"
"dependent default encoding, which on Unixy platforms can be set with the "
"``LANG`` environment variable (and sometimes also with some other platform-"
"specific locale-related environment variables).  In many cases, but not all, "
"the system default is UTF-8; you should never count on this default.  Any "
"application reading or writing more than pure ASCII text should probably "
"have a way to override the encoding. There is no longer any need for using "
"the encoding-aware streams in the :mod:`codecs` module."
msgstr ""
"Arquivos abertos como arquivos texto (ainda o modo padrão para :func:`open`) "
"sempre usam uma codificação para mapear entre strings (na memória) e bytes "
"(no disco). Arquivos binários (abertos com um ``b`` no argumento mode) "
"sempre usam bytes na memória. Isso significa que se um arquivo for aberto "
"usando um modo ou codificação incorretos, a E/S provavelmente falhará "
"ruidosamente, em vez de produzir dados incorretos silenciosamente. Isso "
"também significa que até mesmo usuários Unix terão que especificar o modo "
"correto (texto ou binário) ao abrir um arquivo. Há uma codificação padrão "
"dependente da plataforma, que em plataformas Unixy pode ser definida com a "
"variável de ambiente ``LANG`` (e às vezes também com algumas outras "
"variáveis ​de ambiente relacionadas à localidade específicas da plataforma). "
"Em muitos casos, mas não em todos, o padrão do sistema é UTF-8; você nunca "
"deve contar com esse padrão. Qualquer aplicação que leia ou escreva mais do "
"que texto ASCII puro provavelmente deve ter uma maneira de substituir a "
"codificação. Não há mais necessidade de usar os fluxos com reconhecimento de "
"codificação no módulo :mod:`codecs`."

#: ../../whatsnew/3.0.rst:304
msgid ""
"The initial values of :data:`sys.stdin`, :data:`sys.stdout` and :data:`sys."
"stderr` are now unicode-only text files (i.e., they are instances of :class:"
"`io.TextIOBase`).  To read and write bytes data with these streams, you need "
"to use their :data:`io.TextIOBase.buffer` attribute."
msgstr ""
"Os valores iniciais de :data:`sys.stdin`, :data:`sys.stdout` e :data:`sys."
"stderr` agora são arquivos texto somente unicode (ou seja, são instâncias "
"de :class:`io.TextIOBase`). Para ler e gravar dados de bytes com esses "
"fluxos, você precisa usar o atributo :data:`io.TextIOBase.buffer` deles."

#: ../../whatsnew/3.0.rst:310
msgid ""
"Filenames are passed to and returned from APIs as (Unicode) strings. This "
"can present platform-specific problems because on some platforms filenames "
"are arbitrary byte strings.  (On the other hand, on Windows filenames are "
"natively stored as Unicode.)  As a work-around, most APIs (e.g. :func:`open` "
"and many functions in the :mod:`os` module) that take filenames accept :"
"class:`bytes` objects as well as strings, and a few APIs have a way to ask "
"for a :class:`bytes` return value.  Thus, :func:`os.listdir` returns a list "
"of :class:`bytes` instances if the argument is a :class:`bytes` instance, "
"and :func:`os.getcwdb` returns the current working directory as a :class:"
"`bytes` instance.  Note that when :func:`os.listdir` returns a list of "
"strings, filenames that cannot be decoded properly are omitted rather than "
"raising :exc:`UnicodeError`."
msgstr ""
"Nomes de arquivo são passados ​e retornados de APIs como strings (Unicode). "
"Isso pode apresentar problemas específicos de plataforma porque em algumas "
"plataformas nomes de arquivo são strings de bytes arbitrárias. (Por outro "
"lado, no Windows nomes de arquivo são armazenados nativamente como Unicode.) "
"Como solução alternativa, a maioria das APIs (por exemplo, :func:`open` e "
"muitas funções no módulo :mod:`os`) que aceitam nomes de arquivo aceitam "
"objetos :class:`bytes` assim como strings, e algumas APIs têm uma maneira de "
"pedir um valor de retorno :class:`bytes`. Assim, :func:`os.listdir` retorna "
"uma lista de instâncias :class:`bytes` se o argumento for uma instância :"
"class:`bytes`, e :func:`os.getcwdb` retorna o diretório de trabalho atual "
"como uma instância :class:`bytes`. Observe que quando :func:`os.listdir` "
"retorna uma lista de strings, os nomes de arquivos que não podem ser "
"decodificados corretamente são omitidos em vez de levantar :exc:"
"`UnicodeError`."

#: ../../whatsnew/3.0.rst:325
msgid ""
"Some system APIs like :data:`os.environ` and :data:`sys.argv` can also "
"present problems when the bytes made available by the system is not "
"interpretable using the default encoding.  Setting the ``LANG`` variable and "
"rerunning the program is probably the best approach."
msgstr ""
"Algumas APIs de sistema como :data:`os.environ` e :data:`sys.argv` também "
"podem apresentar problemas quando os bytes disponibilizados pelo sistema não "
"são interpretáveis ​usando a codificação padrão. Definir a variável ``LANG`` "
"e executar o programa novamente é provavelmente a melhor abordagem."

#: ../../whatsnew/3.0.rst:330
msgid ""
":pep:`3138`: The :func:`repr` of a string no longer escapes non-ASCII "
"characters.  It still escapes control characters and code points with non-"
"printable status in the Unicode standard, however."
msgstr ""
":pep:`3138`: A :func:`repr` de uma string não escapa mais caracteres não-"
"ASCII. No entanto, ele ainda escapa caracteres de controle e pontos de "
"código com status não imprimível no padrão Unicode."

#: ../../whatsnew/3.0.rst:334
msgid ":pep:`3120`: The default source encoding is now UTF-8."
msgstr ":pep:`3120`: A codificação de fontes padrão agora é UTF-8."

#: ../../whatsnew/3.0.rst:336
msgid ""
":pep:`3131`: Non-ASCII letters are now allowed in identifiers. (However, the "
"standard library remains ASCII-only with the exception of contributor names "
"in comments.)"
msgstr ""
":pep:`3131`: Letras não ASCII agora são permitidas em identificadores. (No "
"entanto, a biblioteca padrão permanece somente ASCII, com exceção dos nomes "
"dos colaboradores nos comentários.)"

#: ../../whatsnew/3.0.rst:340
msgid ""
"The :mod:`!StringIO` and :mod:`!cStringIO` modules are gone.  Instead, "
"import the :mod:`io` module and use :class:`io.StringIO` or :class:`io."
"BytesIO` for text and data respectively."
msgstr ""
"Os módulos :mod:`!StringIO` e :mod:`!cStringIO` se foram. Em vez disso, "
"importe o módulo :mod:`io` e use :class:`io.StringIO` ou :class:`io.BytesIO` "
"para texto e dados, respectivamente."

#: ../../whatsnew/3.0.rst:344
msgid "See also the :ref:`unicode-howto`, which was updated for Python 3.0."
msgstr ""
"Veja também o guia :ref:`unicode-howto`, que foi atualizado para o Python "
"3.0."

#: ../../whatsnew/3.0.rst:348
msgid "Overview Of Syntax Changes"
msgstr "Visão geral das alterações da sintaxe"

#: ../../whatsnew/3.0.rst:350
msgid ""
"This section gives a brief overview of every *syntactic* change in Python "
"3.0."
msgstr ""
"Esta seção fornece uma breve visão geral de cada mudança *sintática* no "
"Python 3.0."

#: ../../whatsnew/3.0.rst:354
msgid "New Syntax"
msgstr "Nova sintaxe"

#: ../../whatsnew/3.0.rst:356
msgid ""
":pep:`3107`: Function argument and return value annotations.  This provides "
"a standardized way of annotating a function's parameters and return value.  "
"There are no semantics attached to such annotations except that they can be "
"introspected at runtime using the :attr:`!__annotations__` attribute.  The "
"intent is to encourage experimentation through metaclasses, decorators or "
"frameworks."
msgstr ""

#: ../../whatsnew/3.0.rst:363
msgid ""
":pep:`3102`: Keyword-only arguments.  Named parameters occurring after "
"``*args`` in the parameter list *must* be specified using keyword syntax in "
"the call.  You can also use a bare ``*`` in the parameter list to indicate "
"that you don't accept a variable-length argument list, but you do have "
"keyword-only arguments."
msgstr ""
":pep:`3102`: Argumentos somente-nomeados. Parâmetros nomeados que ocorrem "
"após ``*args`` na lista de parâmetros *devem* ser especificados usando a "
"sintaxe dos nomes na chamada. Você também pode usar um ``*`` simples na "
"lista de parâmetros para indicar que não aceita uma lista de argumentos de "
"comprimento variável, mas tem argumentos somente-nomeados."

#: ../../whatsnew/3.0.rst:369
msgid ""
"Keyword arguments are allowed after the list of base classes in a class "
"definition.  This is used by the new convention for specifying a metaclass "
"(see next section), but can be used for other purposes as well, as long as "
"the metaclass supports it."
msgstr ""
"Argumentos nomeados são permitidos após a lista de classes base em uma "
"definição de classe. Isso é usado pela nova convenção para especificar uma "
"metaclasse (veja a próxima seção), mas pode ser usado para outros propósitos "
"também, desde que a metaclasse dê suporte."

#: ../../whatsnew/3.0.rst:374
msgid ""
":pep:`3104`: :keyword:`nonlocal` statement.  Using ``nonlocal x`` you can "
"now assign directly to a variable in an outer (but non-global) scope.  :"
"keyword:`!nonlocal` is a new reserved word."
msgstr ""
":pep:`3104`: instrução :keyword:`nonlocal`. Usando ``nonlocal x``, agora "
"você pode atribuir diretamente a uma variável em um escopo externo (mas não "
"global). :keyword:`!nonlocal` é uma nova palavra reservada."

#: ../../whatsnew/3.0.rst:378
msgid ""
":pep:`3132`: Extended Iterable Unpacking.  You can now write things like "
"``a, b, *rest = some_sequence``.  And even ``*rest, a = stuff``.  The "
"``rest`` object is always a (possibly empty) list; the right-hand side may "
"be any iterable.  Example::"
msgstr ""
":pep:`3132`: Desempacotamento iterável estendido. Agora você pode escrever "
"coisas como ``a, b, *rest = some_sequence``. E até mesmo ``*rest, a = "
"stuff``. O objeto ``rest`` é sempre uma lista (possivelmente vazia); o lado "
"direito pode ser qualquer iterável. Exemplo::"

#: ../../whatsnew/3.0.rst:383
msgid "(a, *rest, b) = range(5)"
msgstr "(a, *rest, b) = range(5)"

#: ../../whatsnew/3.0.rst:385
msgid "This sets *a* to ``0``, *b* to ``4``, and *rest* to ``[1, 2, 3]``."
msgstr ""
"Isso define *a* como ``0``, *b* como ``4`` e *rest* como ``[1, 2, 3]``."

#: ../../whatsnew/3.0.rst:387
msgid ""
"Dictionary comprehensions: ``{k: v for k, v in stuff}`` means the same thing "
"as ``dict(stuff)`` but is more flexible.  (This is :pep:`274` vindicated. :-)"
msgstr ""
"Compreensões de dicionário: ``{k: v for k, v in stuff}`` significa a mesma "
"coisa que ``dict(stuff)``, mas é mais flexível. (Isto é :pep:`274` "
"justificada. :-)"

#: ../../whatsnew/3.0.rst:391
msgid ""
"Set literals, e.g. ``{1, 2}``.  Note that ``{}`` is an empty dictionary; use "
"``set()`` for an empty set.  Set comprehensions are also supported; e.g., "
"``{x for x in stuff}`` means the same thing as ``set(stuff)`` but is more "
"flexible."
msgstr ""
"Definir literais, por exemplo, ``{1, 2}``. Note que ``{}`` é um dicionário "
"vazio; use ``set()`` para um conjunto vazio. Compreensões de conjuntos "
"também são suportadas; por exemplo, ``{x for x in stuff}`` significa a mesma "
"coisa que ``set(stuff)``, mas é mais flexível."

#: ../../whatsnew/3.0.rst:396
msgid ""
"New octal literals, e.g. ``0o720`` (already in 2.6).  The old octal literals "
"(``0720``) are gone."
msgstr ""
"Novos literais octais, por exemplo, ``0o720`` (já em 2.6). Os antigos "
"literais octais (``0720``) se foram."

#: ../../whatsnew/3.0.rst:399
msgid ""
"New binary literals, e.g. ``0b1010`` (already in 2.6), and there is a new "
"corresponding built-in function, :func:`bin`."
msgstr ""
"Novos literais binários, por exemplo, ``0b1010`` (já em 2.6), e há uma nova "
"função embutida correspondente, :func:`bin`."

#: ../../whatsnew/3.0.rst:402
msgid ""
"Bytes literals are introduced with a leading ``b`` or ``B``, and there is a "
"new corresponding built-in function, :func:`bytes`."
msgstr ""
"Literais de bytes são introduzidos com um ``b`` ou ``B`` no início, e há uma "
"nova função embutida correspondente, :func:`bytes`."

#: ../../whatsnew/3.0.rst:406
msgid "Changed Syntax"
msgstr "Sintaxe alterada"

#: ../../whatsnew/3.0.rst:408
msgid ""
":pep:`3109` and :pep:`3134`: new :keyword:`raise` statement syntax: :samp:"
"`raise [{expr} [from {expr}]]`.  See below."
msgstr ""
":pep:`3109` e :pep:`3134`: nova sintaxe da instrução :keyword:`raise`: :samp:"
"`raise [{expr} [from {expr}]]`. Veja abaixo."

#: ../../whatsnew/3.0.rst:411
msgid ""
":keyword:`!as` and :keyword:`with` are now reserved words.  (Since 2.6, "
"actually.)"
msgstr ""
":keyword:`!as` e :keyword:`with` agora são palavras reservadas. (Desde a "
"versão 2.6, na verdade.)"

#: ../../whatsnew/3.0.rst:414
msgid ""
"``True``, ``False``, and ``None`` are reserved words.  (2.6 partially "
"enforced the restrictions on ``None`` already.)"
msgstr ""
"``True``, ``False`` e ``None`` são palavras reservadas. (A versão 2.6 já "
"aplicava parcialmente as restrições em ``None``.)"

#: ../../whatsnew/3.0.rst:417
msgid ""
"Change from :keyword:`except` *exc*, *var* to :keyword:`!except` *exc* :"
"keyword:`!as` *var*.  See :pep:`3110`."
msgstr ""
"Alteração de :keyword:`except` *exc*, *var* para :keyword:`!except` *exc* :"
"keyword:`!as` *var*. Veja a :pep:`3110`."

#: ../../whatsnew/3.0.rst:420
msgid ":pep:`3115`: New Metaclass Syntax.  Instead of::"
msgstr ":pep:`3115`: Nova sintaxe de metaclasse. Em vez de::"

#: ../../whatsnew/3.0.rst:422
msgid ""
"class C:\n"
"    __metaclass__ = M\n"
"    ..."
msgstr ""
"class C:\n"
"    __metaclass__ = M\n"
"    ..."

#: ../../whatsnew/3.0.rst:426
msgid "you must now use::"
msgstr "agora você deve usar::"

#: ../../whatsnew/3.0.rst:428
msgid ""
"class C(metaclass=M):\n"
"    ..."
msgstr ""
"class C(metaclass=M):\n"
"    ..."

#: ../../whatsnew/3.0.rst:431
msgid ""
"The module-global :data:`!__metaclass__` variable is no longer supported.  "
"(It was a crutch to make it easier to default to new-style classes without "
"deriving every class from :class:`object`.)"
msgstr ""

#: ../../whatsnew/3.0.rst:436
msgid ""
"List comprehensions no longer support the syntactic form :samp:`[... for "
"{var} in {item1}, {item2}, ...]`.  Use :samp:`[... for {var} in ({item1}, "
"{item2}, ...)]` instead. Also note that list comprehensions have different "
"semantics: they are closer to syntactic sugar for a generator expression "
"inside a :func:`list` constructor, and in particular the loop control "
"variables are no longer leaked into the surrounding scope."
msgstr ""
"As compreensões de lista não têm mais suporte a mais a forma sintática :samp:"
"`[... for {var} in {item1}, {item2}, ...]`. Use :samp:`[... for {var} in "
"({item1}, {item2}, ...)]` em vez disso. Observe também que as compreensões "
"de lista têm semântica diferente: elas estão mais próximas do açúcar "
"sintático para uma expressão geradora dentro de um construtor :func:`list` "
"e, em particular, as variáveis ​de controle de laço não são mais vazadas para "
"o escopo circundante."

#: ../../whatsnew/3.0.rst:444
msgid ""
"The *ellipsis* (``...``) can be used as an atomic expression anywhere.  "
"(Previously it was only allowed in slices.)  Also, it *must* now be spelled "
"as ``...``.  (Previously it could also be spelled as ``. . .``, by a mere "
"accident of the grammar.)"
msgstr ""
"As *reticências* (``...``) podem ser usadas como uma expressão atômica em "
"qualquer lugar. (Anteriormente, eram permitidas apenas em fatias.) Além "
"disso, agora *devem* ser escritas como ``...``. (Anteriormente, também "
"poderiam ser escritas como ``. . .``, por um mero acidente da gramática.)"

#: ../../whatsnew/3.0.rst:450
msgid "Removed Syntax"
msgstr "Sintaxe removida"

#: ../../whatsnew/3.0.rst:452
msgid ""
":pep:`3113`: Tuple parameter unpacking removed.  You can no longer write "
"``def foo(a, (b, c)): ...``. Use ``def foo(a, b_c): b, c = b_c`` instead."
msgstr ""
":pep:`3113`: Desempacotamento de parâmetro de tupla removido. Você não pode "
"mais escrever ``def foo(a, (b, c)): ...``. Em vez disso, use ``def foo(a, "
"b_c): b, c = b_c``."

#: ../../whatsnew/3.0.rst:456
msgid "Removed backticks (use :func:`repr` instead)."
msgstr "Removidos backticks (use :func:`repr`)."

#: ../../whatsnew/3.0.rst:458
msgid "Removed ``<>`` (use ``!=`` instead)."
msgstr "Removido ``<>`` (use ``!=``)."

#: ../../whatsnew/3.0.rst:460
msgid ""
"Removed keyword: :func:`exec` is no longer a keyword; it remains as a "
"function.  (Fortunately the function syntax was also accepted in 2.x.)  Also "
"note that :func:`exec` no longer takes a stream argument; instead of "
"``exec(f)`` you can use ``exec(f.read())``."
msgstr ""
"Removida palavra reservada: :func:`exec` não é mais uma palavra reservada; "
"ela permanece como uma função. (Felizmente a sintaxe da função também era "
"aceita nas versões 2.x.) Observe também que :func:`exec` não aceita mais um "
"argumento de fluxo; em vez de ``exec(f)`` você pode usar ``exec(f.read())``."

#: ../../whatsnew/3.0.rst:465
msgid "Integer literals no longer support a trailing ``l`` or ``L``."
msgstr "Literais de inteiro não mais têm suporte a um ``l`` ou ``L`` final."

#: ../../whatsnew/3.0.rst:467
msgid "String literals no longer support a leading ``u`` or ``U``."
msgstr "Literais de string não mais têm suporte a um ``u`` ou ``U`` no início."

#: ../../whatsnew/3.0.rst:469
msgid ""
"The :keyword:`from` *module* :keyword:`import` ``*`` syntax is only allowed "
"at the module level, no longer inside functions."
msgstr ""
"A sintaxe :keyword:`from` *módulo* :keyword:`import` ``*`` é permitida "
"somente no nível do módulo, não mais dentro de funções."

#: ../../whatsnew/3.0.rst:472
msgid ""
"The only acceptable syntax for relative imports is :samp:`from .[{module}] "
"import {name}`.  All :keyword:`import` forms not starting with ``.`` are "
"interpreted as absolute imports.  (:pep:`328`)"
msgstr ""
"A única sintaxe aceitável para importações relativas é :samp:`from ."
"[{module}] import {name}`. Todos as formas de :keyword:`import` que não "
"começam com ``.`` são interpretadas como importações absolutas. (:pep:`328`)"

#: ../../whatsnew/3.0.rst:476
msgid "Classic classes are gone."
msgstr "As classes clássicas se foram."

#: ../../whatsnew/3.0.rst:480
msgid "Changes Already Present In Python 2.6"
msgstr "Mudanças já presentes no Python 2.6"

#: ../../whatsnew/3.0.rst:482
msgid ""
"Since many users presumably make the jump straight from Python 2.5 to Python "
"3.0, this section reminds the reader of new features that were originally "
"designed for Python 3.0 but that were back-ported to Python 2.6.  The "
"corresponding sections in :ref:`whats-new-in-2.6` should be consulted for "
"longer descriptions."
msgstr ""
"Como muitos usuários provavelmente fazem o salto direto do Python 2.5 para o "
"Python 3.0, esta seção lembra o leitor dos novos recursos que foram "
"originalmente projetados para o Python 3.0, mas que foram portados de volta "
"para o Python 2.6. As seções correspondentes em :ref:`whats-new-in-2.6` "
"devem ser consultadas para descrições mais longas."

#: ../../whatsnew/3.0.rst:488
msgid ""
":ref:`pep-0343`.  The :keyword:`with` statement is now a standard feature "
"and no longer needs to be imported from the :mod:`__future__`. Also check "
"out :ref:`new-26-context-managers` and :ref:`new-module-contextlib`."
msgstr ""
":ref:`pep-0343`. A instrução :keyword:`with` agora é um recurso padrão e não "
"precisa mais ser importada de :mod:`__future__`. Confira também :ref:`new-26-"
"context-managers` e :ref:`new-module-contextlib`."

#: ../../whatsnew/3.0.rst:493
msgid ""
":ref:`pep-0366`.  This enhances the usefulness of the :option:`-m` option "
"when the referenced module lives in a package."
msgstr ""
":ref:`pep-0366`. Isso aumenta a utilidade da opção :option:`-m` quando o "
"módulo referenciado reside em um pacote."

#: ../../whatsnew/3.0.rst:496
msgid ":ref:`pep-0370`."
msgstr ":ref:`pep-0370`."

#: ../../whatsnew/3.0.rst:498
msgid ":ref:`pep-0371`."
msgstr ":ref:`pep-0371`."

#: ../../whatsnew/3.0.rst:500
msgid ""
":ref:`pep-3101`.  Note: the 2.6 description mentions the :meth:`format` "
"method for both 8-bit and Unicode strings.  In 3.0, only the :class:`str` "
"type (text strings with Unicode support) supports this method; the :class:"
"`bytes` type does not.  The plan is to eventually make this the only API for "
"string formatting, and to start deprecating the ``%`` operator in Python 3.1."
msgstr ""
":ref:`pep-3101`. Nota: a descrição da versão 2.6 menciona o método :meth:"
"`format` para strings de 8 bits e Unicode. No 3.0, apenas o tipo :class:"
"`str` (strings de texto com suporte a Unicode) tem suporte a esse método; o "
"tipo :class:`bytes` não. O plano é eventualmente tornar esta a única API "
"para formatação de strings e começar a descontinuar o operador ``%`` no "
"Python 3.1."

#: ../../whatsnew/3.0.rst:507
msgid ""
":ref:`pep-3105`.  This is now a standard feature and no longer needs to be "
"imported from :mod:`__future__`.  More details were given above."
msgstr ""
":ref:`pep-3105`. Este é agora um recurso padrão e não precisa mais ser "
"importado de :mod:`__future__`. Mais detalhes foram fornecidos acima."

#: ../../whatsnew/3.0.rst:510
msgid ""
":ref:`pep-3110`.  The :keyword:`except` *exc* :keyword:`!as` *var* syntax is "
"now standard and :keyword:`!except` *exc*, *var* is no longer supported.  "
"(Of course, the :keyword:`!as` *var* part is still optional.)"
msgstr ""
":ref:`pep-3110`. A sintaxe :keyword:`except` *exc* :keyword:`!as` *var* "
"agora é padrão e :keyword:`!except` *exc*, *var* não é mais suportado. "
"(Claro, a parte :keyword:`!as` *var* ainda é opcional.)"

#: ../../whatsnew/3.0.rst:515
msgid ""
":ref:`pep-3112`.  The ``b\"...\"`` string literal notation (and its variants "
"like ``b'...'``, ``b\"\"\"...\"\"\"``, and ``br\"...\"``) now produces a "
"literal of type :class:`bytes`."
msgstr ""
":ref:`pep-3112`. A notação de literal de string ``b\"...\"`` (e suas "
"variantes como ``b'...'``, ``b\"\"\"...\"\"\"`` e ``br\"...\"``) agora "
"produz um literal do tipo :class:`bytes`."

#: ../../whatsnew/3.0.rst:519
msgid ""
":ref:`pep-3116`.  The :mod:`io` module is now the standard way of doing file "
"I/O.  The built-in :func:`open` function is now an alias for :func:`io.open` "
"and has additional keyword arguments *encoding*, *errors*, *newline* and "
"*closefd*.  Also note that an invalid *mode* argument now raises :exc:"
"`ValueError`, not :exc:`IOError`.  The binary file object underlying a text "
"file object can be accessed as :attr:`!f.buffer` (but beware that the text "
"object maintains a buffer of itself in order to speed up the encoding and "
"decoding operations)."
msgstr ""

#: ../../whatsnew/3.0.rst:529
msgid ""
":ref:`pep-3118`.  The old builtin :func:`!buffer` is now really gone; the "
"new builtin :func:`memoryview` provides (mostly) similar functionality."
msgstr ""

#: ../../whatsnew/3.0.rst:533
msgid ""
":ref:`pep-3119`.  The :mod:`abc` module and the ABCs defined in the :mod:"
"`collections` module plays a somewhat more prominent role in the language "
"now, and built-in collection types like :class:`dict` and :class:`list` "
"conform to the :class:`collections.MutableMapping <collections.abc."
"MutableMapping>` and :class:`collections.MutableSequence <collections.abc."
"MutableSequence>` ABCs, respectively."
msgstr ""

#: ../../whatsnew/3.0.rst:539
msgid ""
":ref:`pep-3127`.  As mentioned above, the new octal literal notation is the "
"only one supported, and binary literals have been added."
msgstr ""
":ref:`pep-3127`. Conforme mencionado acima, a nova notação de literal octal "
"é a única suportada, e literais binários foram adicionados."

#: ../../whatsnew/3.0.rst:543
msgid ":ref:`pep-3129`."
msgstr ":ref:`pep-3129`."

#: ../../whatsnew/3.0.rst:545
msgid ""
":ref:`pep-3141`.  The :mod:`numbers` module is another new use of ABCs, "
"defining Python's \"numeric tower\".  Also note the new :mod:`fractions` "
"module which implements :class:`numbers.Rational`."
msgstr ""
":ref:`pep-3141`. O módulo :mod:`numbers` é outro novo uso de ABCs, definindo "
"a \"torre numérica\" do Python. Observe também o novo módulo :mod:"
"`fractions` que implementa :class:`numbers.Rational`."

#: ../../whatsnew/3.0.rst:551
msgid "Library Changes"
msgstr "Mudanças na biblioteca"

#: ../../whatsnew/3.0.rst:553
msgid ""
"Due to time constraints, this document does not exhaustively cover the very "
"extensive changes to the standard library.  :pep:`3108` is the reference for "
"the major changes to the library.  Here's a capsule review:"
msgstr ""
"Devido a restrições de tempo, este documento não cobre exaustivamente as "
"mudanças muito extensas na biblioteca padrão. :pep:`3108` é a referência "
"para as principais mudanças na biblioteca. Aqui está uma revisão resumida:"

#: ../../whatsnew/3.0.rst:558
msgid ""
"Many old modules were removed.  Some, like :mod:`!gopherlib` (no longer "
"used) and :mod:`!md5` (replaced by :mod:`hashlib`), were already deprecated "
"by :pep:`4`.  Others were removed as a result of the removal of support for "
"various platforms such as Irix, BeOS and Mac OS 9 (see :pep:`11`).  Some "
"modules were also selected for removal in Python 3.0 due to lack of use or "
"because a better replacement exists.  See :pep:`3108` for an exhaustive list."
msgstr ""
"Muitos módulos antigos foram removidos. Alguns, como :mod:`!gopherlib` (não "
"mais usado) e :mod:`!md5` (substituído por :mod:`hashlib`), já tinham sido "
"descontinuados pela :pep:`4`. Outros foram removidos como resultado da "
"remoção do suporte para várias plataformas, como Irix, BeOS e Mac OS 9 "
"(veja :pep:`11`). Alguns módulos também foram selecionados para remoção no "
"Python 3.0 devido à falta de uso ou porque existe uma substituição melhor. "
"Veja :pep:`3108` para uma lista exaustiva."

#: ../../whatsnew/3.0.rst:566
msgid ""
"The :mod:`!bsddb3` package was removed because its presence in the core "
"standard library has proved over time to be a particular burden for the core "
"developers due to testing instability and Berkeley DB's release schedule.  "
"However, the package is alive and well, externally maintained at https://www."
"jcea.es/programacion/pybsddb.htm."
msgstr ""
"O pacote :mod:`!bsddb3` foi removido porque sua presença na biblioteca "
"padrão principal provou ao longo do tempo ser um fardo particular para os "
"desenvolvedores principais devido à instabilidade dos testes e ao cronograma "
"de lançamento do Berkeley DB. No entanto, o pacote está vivo e bem, mantido "
"externamente em https://www.jcea.es/programacion/pybsddb.htm."

#: ../../whatsnew/3.0.rst:572
msgid ""
"Some modules were renamed because their old name disobeyed :pep:`8`, or for "
"various other reasons.  Here's the list:"
msgstr ""
"Alguns módulos foram renomeados porque seu nome antigo desobedecia a :pep:"
"`8`, ou por vários outros motivos. Aqui está a lista:"

#: ../../whatsnew/3.0.rst:576
msgid "Old Name"
msgstr "Antigo nome"

#: ../../whatsnew/3.0.rst:576
msgid "New Name"
msgstr "Novo nome"

#: ../../whatsnew/3.0.rst:578
msgid "_winreg"
msgstr "_winreg"

#: ../../whatsnew/3.0.rst:578
msgid "winreg"
msgstr "winreg"

#: ../../whatsnew/3.0.rst:579
msgid "ConfigParser"
msgstr "ConfigParser"

#: ../../whatsnew/3.0.rst:579
msgid "configparser"
msgstr "configparser"

#: ../../whatsnew/3.0.rst:580
msgid "copy_reg"
msgstr "copy_reg"

#: ../../whatsnew/3.0.rst:580
msgid "copyreg"
msgstr "copyreg"

#: ../../whatsnew/3.0.rst:581
msgid "Queue"
msgstr "Queue"

#: ../../whatsnew/3.0.rst:581
msgid "queue"
msgstr "queue"

#: ../../whatsnew/3.0.rst:582
msgid "SocketServer"
msgstr "SocketServer"

#: ../../whatsnew/3.0.rst:582
msgid "socketserver"
msgstr "socketserver"

#: ../../whatsnew/3.0.rst:583
msgid "markupbase"
msgstr "markupbase"

#: ../../whatsnew/3.0.rst:583
msgid "_markupbase"
msgstr "_markupbase"

#: ../../whatsnew/3.0.rst:584
msgid "repr"
msgstr "repr"

#: ../../whatsnew/3.0.rst:584
msgid "reprlib"
msgstr "reprlib"

#: ../../whatsnew/3.0.rst:585
msgid "test.test_support"
msgstr "test.test_support"

#: ../../whatsnew/3.0.rst:585
msgid "test.support"
msgstr "test.support"

#: ../../whatsnew/3.0.rst:588
msgid ""
"A common pattern in Python 2.x is to have one version of a module "
"implemented in pure Python, with an optional accelerated version implemented "
"as a C extension; for example, :mod:`pickle` and :mod:`!cPickle`.  This "
"places the burden of importing the accelerated version and falling back on "
"the pure Python version on each user of these modules.  In Python 3.0, the "
"accelerated versions are considered implementation details of the pure "
"Python versions. Users should always import the standard version, which "
"attempts to import the accelerated version and falls back to the pure Python "
"version.  The :mod:`pickle` / :mod:`!cPickle` pair received this treatment.  "
"The :mod:`profile` module is on the list for 3.1.  The :mod:`!StringIO` "
"module has been turned into a class in the :mod:`io` module."
msgstr ""
"Um padrão comum no Python 2.x é ter uma versão de um módulo implementada em "
"Python puro, com uma versão acelerada opcional implementada como uma "
"extensão C; por exemplo, :mod:`pickle` e :mod:`!cPickle`. Isso coloca o "
"fardo de importar a versão acelerada e recorrer à versão Python pura em cada "
"usuário desses módulos. No Python 3.0, as versões aceleradas são "
"consideradas detalhes de implementação das versões Python puras. Os usuários "
"devem sempre importar a versão padrão, que tenta importar a versão acelerada "
"e recorrer à versão Python pura. O par :mod:`pickle` / :mod:`!cPickle` "
"recebeu esse tratamento. O módulo :mod:`profile` está na lista para 3.1. O "
"módulo :mod:`!StringIO` foi transformado em uma classe no módulo :mod:`io`."

#: ../../whatsnew/3.0.rst:602
msgid ""
"Some related modules have been grouped into packages, and usually the "
"submodule names have been simplified.  The resulting new packages are:"
msgstr ""
"Alguns módulos relacionados foram agrupados em pacotes e, geralmente, os "
"nomes dos submódulos foram simplificados. Os novos pacotes resultantes são:"

#: ../../whatsnew/3.0.rst:606
msgid ""
":mod:`dbm` (:mod:`!anydbm`, :mod:`!dbhash`, :mod:`!dbm`, :mod:`!dumbdbm`, :"
"mod:`!gdbm`, :mod:`!whichdb`)."
msgstr ""
":mod:`dbm` (:mod:`!anydbm`, :mod:`!dbhash`, :mod:`!dbm`, :mod:`!dumbdbm`, :"
"mod:`!gdbm`, :mod:`!whichdb`)."

#: ../../whatsnew/3.0.rst:609
msgid ":mod:`html` (:mod:`!HTMLParser`, :mod:`!htmlentitydefs`)."
msgstr ":mod:`html` (:mod:`!HTMLParser`, :mod:`!htmlentitydefs`)."

#: ../../whatsnew/3.0.rst:611
msgid ""
":mod:`http` (:mod:`!httplib`, :mod:`!BaseHTTPServer`, :mod:`!"
"CGIHTTPServer`, :mod:`!SimpleHTTPServer`, :mod:`!Cookie`, :mod:`!cookielib`)."
msgstr ""
":mod:`http` (:mod:`!httplib`, :mod:`!BaseHTTPServer`, :mod:`!"
"CGIHTTPServer`, :mod:`!SimpleHTTPServer`, :mod:`!Cookie`, :mod:`!cookielib`)."

#: ../../whatsnew/3.0.rst:615
msgid ""
":mod:`tkinter` (all ``Tkinter``-related modules except :mod:`turtle`).  The "
"target audience of :mod:`turtle` doesn't really care about :mod:`tkinter`.  "
"Also note that as of Python 2.6, the functionality of :mod:`turtle` has been "
"greatly enhanced."
msgstr ""

#: ../../whatsnew/3.0.rst:620
msgid ""
":mod:`urllib` (:mod:`!urllib`, :mod:`!urllib2`, :mod:`!urlparse`, :mod:`!"
"robotparse`)."
msgstr ""
":mod:`urllib` (:mod:`!urllib`, :mod:`!urllib2`, :mod:`!urlparse`, :mod:`!"
"robotparse`)."

#: ../../whatsnew/3.0.rst:623
msgid ""
":mod:`xmlrpc` (:mod:`!xmlrpclib`, :mod:`!DocXMLRPCServer`, :mod:`!"
"SimpleXMLRPCServer`)."
msgstr ""
":mod:`xmlrpc` (:mod:`!xmlrpclib`, :mod:`!DocXMLRPCServer`, :mod:`!"
"SimpleXMLRPCServer`)."

#: ../../whatsnew/3.0.rst:626
msgid ""
"Some other changes to standard library modules, not covered by :pep:`3108`:"
msgstr ""
"Algumas outras mudanças nos módulos da biblioteca padrão, não cobertas pela :"
"pep:`3108`:"

#: ../../whatsnew/3.0.rst:629
msgid "Killed :mod:`!sets`.  Use the built-in :func:`set` class."
msgstr ":mod:`!sets` eliminado. Use a classe embutida :func:`set`."

#: ../../whatsnew/3.0.rst:631
msgid ""
"Cleanup of the :mod:`sys` module: removed :func:`!sys.exitfunc`, :func:`!sys."
"exc_clear`, :data:`!sys.exc_type`, :data:`!sys.exc_value`, :data:`!sys."
"exc_traceback`.  (Note that :data:`sys.last_type` etc. remain.)"
msgstr ""

#: ../../whatsnew/3.0.rst:636
msgid ""
"Cleanup of the :class:`array.array` type: the :meth:`!read` and :meth:`!"
"write` methods are gone; use :meth:`~array.array.fromfile` and :meth:`~array."
"array.tofile` instead.  Also, the ``'c'`` typecode for array is gone -- use "
"either ``'b'`` for bytes or ``'u'`` for Unicode characters."
msgstr ""

#: ../../whatsnew/3.0.rst:642
msgid ""
"Cleanup of the :mod:`operator` module: removed :func:`!sequenceIncludes` "
"and :func:`!isCallable`."
msgstr ""

#: ../../whatsnew/3.0.rst:645
msgid ""
"Cleanup of the :mod:`!thread` module: :func:`!acquire_lock` and :func:`!"
"release_lock` are gone; use :meth:`~threading.Lock.acquire` and :meth:"
"`~threading.Lock.release` instead."
msgstr ""
"Limpeza do módulo :mod:`!thread`: :func:`!acquire_lock` e :func:`!"
"release_lock` foram removidos; use :meth:`~threading.Lock.acquire` e :meth:"
"`~threading.Lock.release` em vez disso."

#: ../../whatsnew/3.0.rst:649
msgid ""
"Cleanup of the :mod:`random` module: removed the :func:`!jumpahead` API."
msgstr ""

#: ../../whatsnew/3.0.rst:651
msgid "The :mod:`!new` module is gone."
msgstr "O módulo :mod:`!new` foi removido."

#: ../../whatsnew/3.0.rst:653
msgid ""
"The functions :func:`!os.tmpnam`, :func:`!os.tempnam` and :func:`!os."
"tmpfile` have been removed in favor of the :mod:`tempfile` module."
msgstr ""

#: ../../whatsnew/3.0.rst:657
msgid ""
"The :mod:`tokenize` module has been changed to work with bytes.  The main "
"entry point is now :func:`tokenize.tokenize`, instead of generate_tokens."
msgstr ""
"O módulo :mod:`tokenize` foi alterado para funcionar com bytes. O ponto de "
"entrada principal agora é :func:`tokenize.tokenize`, em vez de "
"generate_tokens."

#: ../../whatsnew/3.0.rst:661
msgid ""
":data:`!string.letters` and its friends (:data:`!string.lowercase` and :data:"
"`!string.uppercase`) are gone.  Use :data:`string.ascii_letters` etc. "
"instead.  (The reason for the removal is that :data:`!string.letters` and "
"friends had locale-specific behavior, which is a bad idea for such "
"attractively named global \"constants\".)"
msgstr ""

#: ../../whatsnew/3.0.rst:668
msgid ""
"Renamed module :mod:`!__builtin__` to :mod:`builtins` (removing the "
"underscores, adding an 's').  The :data:`!__builtins__` variable found in "
"most global namespaces is unchanged.  To modify a builtin, you should use :"
"mod:`builtins`, not :data:`!__builtins__`!"
msgstr ""

#: ../../whatsnew/3.0.rst:675
msgid ":pep:`3101`: A New Approach To String Formatting"
msgstr ":pep:`3101`: Uma nova abordagem para formatação de strings"

#: ../../whatsnew/3.0.rst:677
msgid ""
"A new system for  built-in string formatting operations replaces the ``%`` "
"string  formatting operator.   (However, the ``%``  operator is still "
"supported;  it will  be deprecated in  Python 3.1  and removed from the "
"language at some later time.)  Read :pep:`3101` for the full scoop."
msgstr ""
"Um novo sistema para operações de formatação de strings embutidas substitui "
"o operador de formatação de strings ``%``. (No entanto, o operador ``%`` "
"ainda é suportado; ele será descontinuado no Python 3.1 e removido da "
"linguagem em algum momento posterior.) Leia a :pep:`3101` para obter "
"informações completas."

#: ../../whatsnew/3.0.rst:685
msgid "Changes To Exceptions"
msgstr "Mudanças para exceções"

#: ../../whatsnew/3.0.rst:687
msgid ""
"The APIs for raising and catching exception have been cleaned up and new "
"powerful features added:"
msgstr ""
"As APIs para levantar e capturar exceções foram limpas e novos recursos "
"poderosos foram adicionados:"

#: ../../whatsnew/3.0.rst:690
msgid ""
":pep:`352`: All exceptions must be derived (directly or indirectly) from :"
"exc:`BaseException`.  This is the root of the exception hierarchy.  This is "
"not new as a recommendation, but the *requirement* to inherit from :exc:"
"`BaseException` is new.  (Python 2.6 still allowed classic classes to be "
"raised, and placed no restriction on what you can catch.)  As a consequence, "
"string exceptions are finally truly and utterly dead."
msgstr ""
":pep:`352`: Todas as exceções devem ser derivadas (direta ou indiretamente) "
"de :exc:`BaseException`. Esta é a raiz da hierarquia de exceções. Isso não é "
"novo como recomendação, mas o *requisito* para herdar de :exc:"
"`BaseException` é novo. (O Python 2.6 ainda permitia que classes clássicas "
"fossem levantadas e não colocava nenhuma restrição sobre o que você pode "
"capturar.) Como consequência, exceções de string estão finalmente verdadeira "
"e completamente mortas."

#: ../../whatsnew/3.0.rst:698
msgid ""
"Almost all exceptions should actually derive from :exc:`Exception`; :exc:"
"`BaseException` should only be used as a base class for exceptions that "
"should only be handled at the top level, such as :exc:`SystemExit` or :exc:"
"`KeyboardInterrupt`.  The recommended idiom for handling all exceptions "
"except for this latter category is to use :keyword:`except` :exc:`Exception`."
msgstr ""
"Quase todas as exceções devem derivar de :exc:`Exception`; :exc:"
"`BaseException` deve ser usado apenas como uma classe base para exceções que "
"devem ser manipuladas apenas no nível superior, como :exc:`SystemExit` ou :"
"exc:`KeyboardInterrupt`. O idioma recomendado para manipular todas as "
"exceções, exceto para esta última categoria, é usar :keyword:`except` :exc:"
"`Exception`."

#: ../../whatsnew/3.0.rst:705
msgid ":exc:`!StandardError` was removed."
msgstr ""

#: ../../whatsnew/3.0.rst:707
msgid ""
"Exceptions no longer behave as sequences.  Use the :attr:`~BaseException."
"args` attribute instead."
msgstr ""

#: ../../whatsnew/3.0.rst:710
msgid ""
":pep:`3109`: Raising exceptions.  You must now use :samp:`raise {Exception}"
"({args})` instead of :samp:`raise {Exception}, {args}`. Additionally, you "
"can no longer explicitly specify a traceback; instead, if you *have* to do "
"this, you can assign directly to the :attr:`~BaseException.__traceback__` "
"attribute (see below)."
msgstr ""
":pep:`3109`: levantando exceções. Agora você deve usar :samp:`raise "
"{Exception}({args})` em vez de :samp:`raise {Exception}, {args}`. Além "
"disso, você não pode mais especificar explicitamente um traceback (situação "
"da pilha de execução); em vez disso, se você *precisar* fazer isso, você "
"pode atribuir diretamente ao atributo :attr:`~BaseException.__traceback__` "
"(veja abaixo)."

#: ../../whatsnew/3.0.rst:716
msgid ""
":pep:`3110`: Catching exceptions.  You must now use :samp:`except "
"{SomeException} as {variable}` instead of :samp:`except {SomeException}, "
"{variable}`.  Moreover, the *variable* is explicitly deleted when the :"
"keyword:`except` block is left."
msgstr ""
":pep:`3110`: Capturando exceções. Agora você deve usar :samp:`except "
"{SomeException} as {variable}` em vez de :samp:`except {SomeException}, "
"{variable}`. Além disso, a variável *variable* é explicitamente excluída "
"quando o bloco :keyword:`except` é deixado."

#: ../../whatsnew/3.0.rst:722
msgid ""
":pep:`3134`: Exception chaining.  There are two cases: implicit chaining and "
"explicit chaining.  Implicit chaining happens when an exception is raised in "
"an :keyword:`except` or :keyword:`finally` handler block.  This usually "
"happens due to a bug in the handler block; we call this a *secondary* "
"exception.  In this case, the original exception (that was being handled) is "
"saved as the :attr:`~BaseException.__context__` attribute of the secondary "
"exception. Explicit chaining is invoked with this syntax::"
msgstr ""
":pep:`3134`: Encadeamento de exceções. Existem dois casos: encadeamento "
"implícito e encadeamento explícito. O encadeamento implícito acontece quando "
"uma exceção é levantada em um bloco manipulador :keyword:`except` ou :"
"keyword:`finally`. Isso geralmente acontece devido a um bug no bloco do "
"manipulador; chamamos isso de exceção *secundária*. Nesse caso, a exceção "
"original (que estava sendo manipulada) é salva como o atributo :attr:"
"`~BaseException.__context__` da exceção secundária. O encadeamento explícito "
"é invocado com esta sintaxe::"

#: ../../whatsnew/3.0.rst:731
msgid "raise SecondaryException() from primary_exception"
msgstr "raise SecondaryException() from primary_exception"

#: ../../whatsnew/3.0.rst:733
msgid ""
"(where *primary_exception* is any expression that produces an exception "
"object, probably an exception that was previously caught). In this case, the "
"primary exception is stored on the :attr:`~BaseException.__cause__` "
"attribute of the secondary exception.  The traceback printed when an "
"unhandled exception occurs walks the chain of :attr:`!__cause__` and :attr:"
"`~BaseException.__context__` attributes and prints a separate traceback for "
"each component of the chain, with the primary exception at the top.  (Java "
"users may recognize this behavior.)"
msgstr ""
"(onde *primary_exception* é qualquer expressão que produz um objeto de "
"exceção, provavelmente uma exceção que foi capturada anteriormente). Neste "
"caso, a exceção primária é armazenada no atributo :attr:`~BaseException."
"__cause__` da exceção secundária. O traceback impresso quando uma exceção "
"não tratada ocorre percorre a cadeia de atributos :attr:`!__cause__` e :attr:"
"`~BaseException.__context__` e imprime um traceback separado para cada "
"componente da cadeia, com a exceção primária no topo. (Usuários Java podem "
"reconhecer este comportamento.)"

#: ../../whatsnew/3.0.rst:743
msgid ""
":pep:`3134`: Exception objects now store their traceback as the :attr:"
"`~BaseException.__traceback__` attribute.  This means that an exception "
"object now contains all the information pertaining to an exception, and "
"there are fewer reasons to use :func:`sys.exc_info` (though the latter is "
"not removed)."
msgstr ""
":pep:`3134`: Objetos exceção agora armazenam seu traceback como o atributo :"
"attr:`~BaseException.__traceback__`. Isso significa que um objeto de exceção "
"agora contém todas as informações pertencentes a uma exceção, e há menos "
"motivos para usar :func:`sys.exc_info` (embora o último não seja removido)."

#: ../../whatsnew/3.0.rst:749
msgid ""
"A few exception messages are improved when Windows fails to load an "
"extension module.  For example, ``error code 193`` is now ``%1 is not a "
"valid Win32 application``.  Strings now deal with non-English locales."
msgstr ""
"Algumas mensagens de exceção estão melhores quando o Windows falha ao "
"carregar um módulo de extensão. Por exemplo, ``error code 193`` agora é ``%1 "
"is not a valid Win32 application``. As strings agora lidam com localidades "
"que não sejam em inglês."

#: ../../whatsnew/3.0.rst:756
msgid "Miscellaneous Other Changes"
msgstr "Outras mudanças diversas"

#: ../../whatsnew/3.0.rst:759
msgid "Operators And Special Methods"
msgstr "Operadores e métodos especiais"

#: ../../whatsnew/3.0.rst:761
msgid ""
"``!=`` now returns the opposite of ``==``, unless ``==`` returns :data:"
"`NotImplemented`."
msgstr ""
"``!=`` agora retorna o oposto de ``==``, a menos que ``==`` retorne :data:"
"`NotImplemented`."

#: ../../whatsnew/3.0.rst:764
msgid ""
"The concept of \"unbound methods\" has been removed from the language. When "
"referencing a method as a class attribute, you now get a plain function "
"object."
msgstr ""
"O conceito de \"métodos não vinculados\" foi removido da linguagem. Ao "
"referenciar um método como um atributo de classe, agora você obtém um objeto "
"função simples."

#: ../../whatsnew/3.0.rst:768
msgid ""
":meth:`!__getslice__`, :meth:`!__setslice__` and :meth:`!__delslice__` were "
"killed.  The syntax ``a[i:j]`` now translates to ``a.__getitem__(slice(i, "
"j))`` (or :meth:`~object.__setitem__` or :meth:`~object.__delitem__`, when "
"used as an assignment or deletion target, respectively)."
msgstr ""

#: ../../whatsnew/3.0.rst:774
msgid ""
":pep:`3114`: the standard :meth:`next` method has been renamed to :meth:"
"`~iterator.__next__`."
msgstr ""
":pep:`3114`: o método padrão :meth:`next` foi renomeado para :meth:"
"`~iterator.__next__`."

#: ../../whatsnew/3.0.rst:777
msgid ""
"The :meth:`!__oct__` and :meth:`!__hex__` special methods are removed -- :"
"func:`oct` and :func:`hex` use :meth:`~object.__index__` now to convert the "
"argument to an integer."
msgstr ""

#: ../../whatsnew/3.0.rst:781
msgid "Removed support for :attr:`!__members__` and :attr:`!__methods__`."
msgstr ""

#: ../../whatsnew/3.0.rst:783
msgid ""
"The function attributes named :attr:`!func_X` have been renamed to use the :"
"attr:`!__X__` form, freeing up these names in the function attribute "
"namespace for user-defined attributes.  To wit, :attr:`!func_closure`, :attr:"
"`!func_code`, :attr:`!func_defaults`, :attr:`!func_dict`, :attr:`!"
"func_doc`, :attr:`!func_globals`, :attr:`!func_name` were renamed to :attr:"
"`~function.__closure__`, :attr:`~function.__code__`, :attr:`~function."
"__defaults__`, :attr:`~function.__dict__`, :attr:`~function.__doc__`, :attr:"
"`~function.__globals__`, :attr:`~function.__name__`, respectively."
msgstr ""
"Os atributos de função chamados :attr:`!func_X` foram renomeados para usar o "
"formato :attr:`!__X__`, liberando esses nomes no espaço de nomes de "
"atributos de função para atributos definidos pelo usuário. A saber, :attr:`!"
"func_closure`, :attr:`!func_code`, :attr:`!func_defaults`, :attr:`!"
"func_dict`, :attr:`!func_doc`, :attr:`!func_globals`, :attr:`!func_name` "
"foram renomeados para :attr:`~function.__closure__`, :attr:`~function."
"__code__`, :attr:`~function.__defaults__`, :attr:`~function.__dict__`, :attr:"
"`~function.__doc__`, :attr:`~function.__globals__`, :attr:`~function."
"__name__`, respectivamente."

#: ../../whatsnew/3.0.rst:794
msgid ":meth:`!__nonzero__` is now :meth:`~object.__bool__`."
msgstr ":meth:`!__nonzero__` agora é :meth:`~object.__bool__`."

#: ../../whatsnew/3.0.rst:797
msgid "Builtins"
msgstr "Funções embutidas"

#: ../../whatsnew/3.0.rst:799
msgid ""
":pep:`3135`: New :func:`super`.  You can now invoke :func:`super` without "
"arguments and (assuming this is in a regular instance method defined inside "
"a :keyword:`class` statement) the right class and instance will "
"automatically be chosen.  With arguments, the behavior of :func:`super` is "
"unchanged."
msgstr ""
":pep:`3135`: Nova função :func:`super`. Agora você pode invocar :func:"
"`super` sem argumentos e (presumindo que isso esteja em um método de "
"instância regular definido dentro de uma instrução :keyword:`class`) a "
"classe e instância corretas serão automaticamente escolhidas. Com "
"argumentos, o comportamento de :func:`super` não é alterado."

#: ../../whatsnew/3.0.rst:805
msgid ""
":pep:`3111`: :func:`!raw_input` was renamed to :func:`input`.  That is, the "
"new :func:`input` function reads a line from :data:`sys.stdin` and returns "
"it with the trailing newline stripped. It raises :exc:`EOFError` if the "
"input is terminated prematurely. To get the old behavior of :func:`input`, "
"use ``eval(input())``."
msgstr ""

#: ../../whatsnew/3.0.rst:811
msgid ""
"A new built-in function :func:`next` was added to call the :meth:`~iterator."
"__next__` method on an object."
msgstr ""
"Uma nova função embutido :func:`next` foi adicionada para chamar o método :"
"meth:`~iterator.__next__` em um objeto."

#: ../../whatsnew/3.0.rst:814
msgid ""
"The :func:`round` function rounding strategy and return type have changed.  "
"Exact halfway cases are now rounded to the nearest even result instead of "
"away from zero.  (For example, ``round(2.5)`` now returns ``2`` rather than "
"``3``.)  ``round(x[, n])`` now delegates to ``x.__round__([n])`` instead of "
"always returning a float.  It generally returns an integer when called with "
"a single argument and a value of the same type as ``x`` when called with two "
"arguments."
msgstr ""
"A estratégia de arredondamento da função :func:`round` e o tipo de retorno "
"foram alterados. Casos exatos de meio caminho agora são arredondados para o "
"resultado par mais próximo em vez de para longe de zero. (Por exemplo, "
"``round(2.5)`` agora retorna ``2`` em vez de ``3``.) ``round(x[, n])`` agora "
"delega para ``x.__round__([n])`` em vez de sempre retornar um float. "
"Geralmente retorna um inteiro quando chamado com um único argumento e um "
"valor do mesmo tipo que ``x`` quando chamado com dois argumentos."

#: ../../whatsnew/3.0.rst:823
msgid "Moved :func:`!intern` to :func:`sys.intern`."
msgstr ""

#: ../../whatsnew/3.0.rst:825
msgid ""
"Removed: :func:`!apply`.  Instead of ``apply(f, args)`` use ``f(*args)``."
msgstr ""

#: ../../whatsnew/3.0.rst:828
msgid ""
"Removed :func:`callable`.  Instead of ``callable(f)`` you can use "
"``isinstance(f, collections.Callable)``.  The :func:`!operator.isCallable` "
"function is also gone."
msgstr ""

#: ../../whatsnew/3.0.rst:832
msgid ""
"Removed :func:`!coerce`.  This function no longer serves a purpose now that "
"classic classes are gone."
msgstr ""

#: ../../whatsnew/3.0.rst:835
msgid ""
"Removed :func:`!execfile`.  Instead of ``execfile(fn)`` use ``exec(open(fn)."
"read())``."
msgstr ""

#: ../../whatsnew/3.0.rst:838
msgid ""
"Removed the :class:`!file` type.  Use :func:`open`.  There are now several "
"different kinds of streams that open can return in the :mod:`io` module."
msgstr ""

#: ../../whatsnew/3.0.rst:841
msgid ""
"Removed :func:`!reduce`.  Use :func:`functools.reduce` if you really need "
"it; however, 99 percent of the time an explicit :keyword:`for` loop is more "
"readable."
msgstr ""

#: ../../whatsnew/3.0.rst:845
msgid "Removed :func:`!reload`.  Use :func:`!imp.reload`."
msgstr ""

#: ../../whatsnew/3.0.rst:847
msgid ""
"Removed. :meth:`!dict.has_key` -- use the :keyword:`in` operator instead."
msgstr ""

#: ../../whatsnew/3.0.rst:854
msgid "Build and C API Changes"
msgstr "Mudanças a construções e API C"

#: ../../whatsnew/3.0.rst:856
msgid ""
"Due to time constraints, here is a *very* incomplete list of changes to the "
"C API."
msgstr ""
"Devido a restrições de tempo, aqui está uma lista *muito* incompleta de "
"alterações na API C."

#: ../../whatsnew/3.0.rst:859
msgid ""
"Support for several platforms was dropped, including but not limited to Mac "
"OS 9, BeOS, RISCOS, Irix, and Tru64."
msgstr ""
"O suporte para várias plataformas foi descartado, incluindo, mas não se "
"limitando a Mac OS 9, BeOS, RISCOS, Irix e Tru64."

#: ../../whatsnew/3.0.rst:862
msgid ":pep:`3118`: New Buffer API."
msgstr ":pep:`3118`: Nova API de Buffer."

#: ../../whatsnew/3.0.rst:864
msgid ":pep:`3121`: Extension Module Initialization & Finalization."
msgstr ":pep:`3121`: Inicialização e finalização do módulo de extensão."

#: ../../whatsnew/3.0.rst:866
msgid ":pep:`3123`: Making :c:macro:`PyObject_HEAD` conform to standard C."
msgstr ":pep:`3123`: Tornando :c:macro:`PyObject_HEAD` conforme o padrão C."

#: ../../whatsnew/3.0.rst:868
msgid "No more C API support for restricted execution."
msgstr "Não há mais suporte à API C para execução restrita."

#: ../../whatsnew/3.0.rst:870
msgid ""
":c:func:`!PyNumber_Coerce`, :c:func:`!PyNumber_CoerceEx`, :c:func:`!"
"PyMember_Get`, and :c:func:`!PyMember_Set` C APIs are removed."
msgstr ""
"As APIs C :c:func:`!PyNumber_Coerce`, :c:func:`!PyNumber_CoerceEx`, :c:func:"
"`!PyMember_Get` e :c:func:`!PyMember_Set` foram removidas."

#: ../../whatsnew/3.0.rst:873
msgid ""
"New C API :c:func:`PyImport_ImportModuleNoBlock`, works like :c:func:"
"`PyImport_ImportModule` but won't block on the import lock (returning an "
"error instead)."
msgstr ""
"Nova API C :c:func:`PyImport_ImportModuleNoBlock`, funciona como :c:func:"
"`PyImport_ImportModule`, mas não bloqueia na trava de importação (retornando "
"um erro)."

#: ../../whatsnew/3.0.rst:877
msgid ""
"Renamed the boolean conversion C-level slot and method: ``nb_nonzero`` is "
"now ``nb_bool``."
msgstr ""
"Renomeado o slot e o método de nível C de conversão booleana: ``nb_nonzero`` "
"agora é ``nb_bool``."

#: ../../whatsnew/3.0.rst:880
msgid ""
"Removed :c:macro:`!METH_OLDARGS` and :c:macro:`!WITH_CYCLE_GC` from the C "
"API."
msgstr ""
"Removidas :c:macro:`!METH_OLDARGS` e :c:macro:`!WITH_CYCLE_GC` da API C."

#: ../../whatsnew/3.0.rst:886
msgid "Performance"
msgstr "Desempenho"

#: ../../whatsnew/3.0.rst:888
msgid ""
"The net result of the 3.0 generalizations is that Python 3.0 runs the "
"pystone benchmark around 10% slower than Python 2.5.  Most likely the "
"biggest cause is the removal of special-casing for small integers. There's "
"room for improvement, but it will happen after 3.0 is released!"
msgstr ""
"O resultado líquido das generalizações do 3.0 é que o Python 3.0 executa o "
"benchmark pystone cerca de 10% mais lento que o Python 2.5. Provavelmente a "
"maior causa é a remoção do uso de maiúsculas e minúsculas especiais para "
"números inteiros pequenos. Há espaço para melhorias, mas isso acontecerá "
"após o lançamento do 3.0!"

#: ../../whatsnew/3.0.rst:898
msgid "Porting To Python 3.0"
msgstr "Portando para o Python 3.0"

#: ../../whatsnew/3.0.rst:900
msgid ""
"For porting existing Python 2.5 or 2.6 source code to Python 3.0, the best "
"strategy is the following:"
msgstr ""
"Para portar o código-fonte existente do Python 2.5 ou 2.6 para o Python 3.0, "
"a melhor estratégia é a seguinte:"

#: ../../whatsnew/3.0.rst:903
msgid "(Prerequisite:) Start with excellent test coverage."
msgstr "(Pré-requisito:) Comece com uma excelente cobertura de teste."

#: ../../whatsnew/3.0.rst:905
msgid ""
"Port to Python 2.6.  This should be no more work than the average port from "
"Python 2.x to Python 2.(x+1).  Make sure all your tests pass."
msgstr ""
"Portar para o Python 2.6. Isso não deve dar mais trabalho do que o port "
"médio do Python 2.x para o Python 2.(x+1). Certifique-se de que todos os "
"seus testes passem."

#: ../../whatsnew/3.0.rst:909
msgid ""
"(Still using 2.6:) Turn on the :option:`!-3` command line switch. This "
"enables warnings about features that will be removed (or change) in 3.0.  "
"Run your test suite again, and fix code that you get warnings about until "
"there are no warnings left, and all your tests still pass."
msgstr ""
"(Ainda usando 2.6:) Ative a opção de linha de comando :option:`!-3`. Isso "
"habilita avisos sobre recursos que serão removidos (ou alterados) no 3.0. "
"Execute seu conjunto de testes novamente e corrija o código sobre o qual "
"você recebe avisos até que não haja mais avisos e todos os seus testes ainda "
"passem."

#: ../../whatsnew/3.0.rst:915
msgid ""
"Run the ``2to3`` source-to-source translator over your source code tree.  "
"Run the result of the translation under Python 3.0.  Manually fix up any "
"remaining issues, fixing problems until all tests pass again."
msgstr ""
"Execute o tradutor de fonte para fonte ``2to3`` em sua árvore de código-"
"fonte. Execute o resultado da tradução no Python 3.0. Corrija manualmente "
"quaisquer problemas restantes, corrigindo problemas até que todos os testes "
"passem novamente."

#: ../../whatsnew/3.0.rst:920
msgid ""
"It is not recommended to try to write source code that runs unchanged under "
"both Python 2.6 and 3.0; you'd have to use a very contorted coding style, e."
"g. avoiding ``print`` statements, metaclasses, and much more.  If you are "
"maintaining a library that needs to support both Python 2.6 and Python 3.0, "
"the best approach is to modify step 3 above by editing the 2.6 version of "
"the source code and running the ``2to3`` translator again, rather than "
"editing the 3.0 version of the source code."
msgstr ""
"Não é recomendado tentar escrever código-fonte que seja executado inalterado "
"no Python 2.6 e 3.0; você teria que usar um estilo de codificação muito "
"distorcido, por exemplo, evitando instruções ``print``, metaclasses e muito "
"mais. Se você estiver mantendo uma biblioteca que precisa ter suporte ao "
"Python 2.6 e Python 3.0, a melhor abordagem é modificar a etapa 3 acima "
"editando a versão 2.6 do código-fonte e executando o tradutor ``2to3`` "
"novamente, em vez de editar a versão 3.0 do código-fonte."

#: ../../whatsnew/3.0.rst:929
msgid ""
"For porting C extensions to Python 3.0, please see :ref:`cporting-howto`."
msgstr ""
"Para portar extensões C para Python 3.0, consulte :ref:`cporting-howto`."
