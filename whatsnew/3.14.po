# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# André Filipe de Assunção e Brito <decko@birosca.mobi>, 2025
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2025
# Adorilson Bezerra <adorilson@gmail.com>, 2025
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-13 14:21+0000\n"
"PO-Revision-Date: 2025-05-08 06:05+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../whatsnew/3.14.rst:3
msgid "What's new in Python 3.14"
msgstr "O que há de novo no Python 3.14"

#: ../../whatsnew/3.14.rst:0
msgid "Editor"
msgstr "Editor"

#: ../../whatsnew/3.14.rst:5
msgid "Hugo van Kemenade"
msgstr "Hugo van Kemenade"

#: ../../whatsnew/3.14.rst:47
msgid ""
"This article explains the new features in Python 3.14, compared to 3.13."
msgstr ""
"Esse artigo explica os novos recursos no Python 3.14. comparado ao 3.13."

#: ../../whatsnew/3.14.rst:49
msgid "For full details, see the :ref:`changelog <changelog>`."
msgstr "Para detalhes completos, veja o :ref:`changelog <changelog>`."

#: ../../whatsnew/3.14.rst:53
msgid ":pep:`745` -- Python 3.14 release schedule"
msgstr ":pep:`745` -- Cronograma de lançamento do Python 3.14"

#: ../../whatsnew/3.14.rst:57
msgid ""
"Prerelease users should be aware that this document is currently in draft "
"form. It will be updated substantially as Python 3.14 moves towards release, "
"so it's worth checking back even after reading earlier versions."
msgstr ""
"Os usuários de pré-lançamento devem estar cientes de que este documento está "
"atualmente em forma de rascunho. Ele será atualizado substancialmente à "
"medida que o Python 3.14 caminha para seu lançamento estável, portanto vale "
"a pena conferir mesmo depois de ler as versões anteriores."

#: ../../whatsnew/3.14.rst:63
msgid "Summary -- release highlights"
msgstr "Resumo -- destaques da versão"

#: ../../whatsnew/3.14.rst:68
msgid ""
"Python 3.14 beta is the pre-release of the next version of the Python "
"programming language, with a mix of changes to the language, the "
"implementation and the standard library."
msgstr ""
"O Python 3.14 beta é o pré-lançamento da próxima versão da linguagem de "
"programação Python, com uma mistura de alterações na linguagem, na "
"implementação e na biblioteca padrão."

#: ../../whatsnew/3.14.rst:72
msgid ""
"The biggest changes to the implementation include template strings (:pep:"
"`750`), deferred evaluation of annotations (:pep:`649`), and a new type of "
"interpreter that uses tail calls."
msgstr ""
"As maiores mudanças no implementação incluem as strings template (:pep:"
"`750`), a avaliação adiada de anotações (:pep:`649`) e um novo tipo de "
"interpretador que usa a chamada de cauda."

#: ../../whatsnew/3.14.rst:76
msgid ""
"The library changes include the addition of a new :mod:`!annotationlib` "
"module for introspecting and wrapping annotations (:pep:`749`), a new :mod:`!"
"compression.zstd` module for Zstandard support (:pep:`784`), plus syntax "
"highlighting in the REPL, as well as the usual deprecations and removals, "
"and improvements in user-friendliness and correctness."
msgstr ""
"As alterações na biblioteca incluem o acréscimo de um novo  módulo, :mod:`!"
"annotationlib` (:pep:`749`), para introspecção e empacotamento de anotações "
"(:pep:`649`), um novo módulo, :mod:`!compression.zstd`, para suporte ao "
"Zstandard (:pep:`784`), além de destaque de sintaxe no REPL, bem como "
"descontinuações e remoções habituais e melhorias na facilidade de uso e "
"correções."

#: ../../whatsnew/3.14.rst:85
msgid ""
":ref:`PEP 649 and 749: deferred evaluation of annotations <whatsnew314-"
"pep649>`"
msgstr ""
":ref:`PEP 649 e 749: avaliação adiada de anotações <whatsnew314-pep649>`"

#: ../../whatsnew/3.14.rst:86
msgid ""
":ref:`PEP 734: Multiple Interpreters in the Stdlib <whatsnew314-pep734>`"
msgstr ""

#: ../../whatsnew/3.14.rst:87
msgid ":ref:`PEP 741: Python Configuration C API <whatsnew314-pep741>`"
msgstr ""

#: ../../whatsnew/3.14.rst:88
msgid ":ref:`PEP 750: Template strings <whatsnew314-pep750>`"
msgstr ""

#: ../../whatsnew/3.14.rst:89
msgid ""
":ref:`PEP 758: Allow except and except* expressions without parentheses "
"<whatsnew314-pep758>`"
msgstr ""

#: ../../whatsnew/3.14.rst:90
msgid ":ref:`PEP 761: Discontinuation of PGP signatures <whatsnew314-pep761>`"
msgstr ""

#: ../../whatsnew/3.14.rst:91
msgid ""
":ref:`PEP 765: Disallow return/break/continue that exit a finally block "
"<whatsnew314-pep765>`"
msgstr ""

#: ../../whatsnew/3.14.rst:92
msgid ""
":ref:`Free-threaded mode improvements <whatsnew314-free-threaded-cpython>`"
msgstr ""

#: ../../whatsnew/3.14.rst:93
msgid ""
":ref:`PEP 768: Safe external debugger interface for CPython <whatsnew314-"
"pep768>`"
msgstr ""

#: ../../whatsnew/3.14.rst:94
msgid ""
":ref:`PEP 784: Adding Zstandard to the standard library <whatsnew314-pep784>`"
msgstr ""

#: ../../whatsnew/3.14.rst:95
msgid ":ref:`A new type of interpreter <whatsnew314-tail-call>`"
msgstr ""

#: ../../whatsnew/3.14.rst:96
msgid ""
":ref:`Syntax highlighting in PyREPL <whatsnew314-pyrepl-highlighting>`, and "
"color output in :ref:`unittest <whatsnew314-color-unittest>`, :ref:`argparse "
"<whatsnew314-color-argparse>`, :ref:`json <whatsnew314-color-json>` and :ref:"
"`calendar <whatsnew314-color-calendar>` CLIs"
msgstr ""

#: ../../whatsnew/3.14.rst:101
msgid ""
":ref:`Binary releases for the experimental just-in-time compiler "
"<whatsnew314-jit-compiler>`"
msgstr ""

#: ../../whatsnew/3.14.rst:105
msgid "Incompatible changes"
msgstr ""

#: ../../whatsnew/3.14.rst:107
msgid ""
"On platforms other than macOS and Windows, the default :ref:`start method "
"<multiprocessing-start-methods>` for :mod:`multiprocessing` and :class:"
"`~concurrent.futures.ProcessPoolExecutor` switches from *fork* to "
"*forkserver*."
msgstr ""

#: ../../whatsnew/3.14.rst:112
msgid ""
"See :ref:`(1) <whatsnew314-concurrent-futures-start-method>` and :ref:`(2) "
"<whatsnew314-multiprocessing-start-method>` for details."
msgstr ""

#: ../../whatsnew/3.14.rst:115
msgid ""
"If you encounter :exc:`NameError`\\s or pickling errors coming out of :mod:"
"`multiprocessing` or :mod:`concurrent.futures`, see the :ref:`forkserver "
"restrictions <multiprocessing-programming-forkserver>`."
msgstr ""

#: ../../whatsnew/3.14.rst:119
msgid ""
"The interpreter avoids some reference count modifications internally when "
"it's safe to do so. This can lead to different values returned from :func:"
"`sys.getrefcount` and :c:func:`Py_REFCNT` compared to previous versions of "
"Python.  See :ref:`below <whatsnew314-refcount>` for details."
msgstr ""

#: ../../whatsnew/3.14.rst:125 ../../whatsnew/3.14.rst:2672
msgid "New features"
msgstr ""

#: ../../whatsnew/3.14.rst:130
msgid "PEP 734: Multiple Interpreters in the Stdlib"
msgstr ""

#: ../../whatsnew/3.14.rst:132
msgid ""
"The CPython runtime supports running multiple copies of Python in the same "
"process simultaneously and has done so for over 20 years. Each of these "
"separate copies is called an \"interpreter\". However, the feature had been "
"available only through the C-API."
msgstr ""

#: ../../whatsnew/3.14.rst:137
msgid ""
"That limitation is removed in the 3.14 release, with the new :mod:"
"`concurrent.interpreters` module."
msgstr ""

#: ../../whatsnew/3.14.rst:140
msgid ""
"There are at least two notable reasons why using multiple interpreters is "
"worth considering:"
msgstr ""

#: ../../whatsnew/3.14.rst:143
msgid "they support a new (to Python), human-friendly concurrency model"
msgstr ""

#: ../../whatsnew/3.14.rst:144
msgid "true multi-core parallelism"
msgstr ""

#: ../../whatsnew/3.14.rst:146
msgid ""
"For some use cases, concurrency in software enables efficiency and can "
"simplify software, at a high level.  At the same time, implementing and "
"maintaining all but the simplest concurrency is often a struggle for the "
"human brain.  That especially applies to plain threads (for example, :mod:"
"`threading`), where all memory is shared between all threads."
msgstr ""

#: ../../whatsnew/3.14.rst:152
msgid ""
"With multiple isolated interpreters, you can take advantage of a class of "
"concurrency models, like CSP or the actor model, that have found success in "
"other programming languages, like Smalltalk, Erlang, Haskell, and Go.  Think "
"of multiple interpreters like threads but with opt-in sharing."
msgstr ""

#: ../../whatsnew/3.14.rst:158
msgid ""
"Regarding multi-core parallelism: as of the 3.12 release, interpreters are "
"now sufficiently isolated from one another to be used in parallel. (See :pep:"
"`684`.)  This unlocks a variety of CPU-intensive use cases for Python that "
"were limited by the :term:`GIL`."
msgstr ""

#: ../../whatsnew/3.14.rst:163
msgid ""
"Using multiple interpreters is similar in many ways to :mod:"
"`multiprocessing`, in that they both provide isolated logical \"processes\" "
"that can run in parallel, with no sharing by default. However, when using "
"multiple interpreters, an application will use fewer system resources and "
"will operate more efficiently (since it stays within the same process).  "
"Think of multiple interpreters as having the isolation of processes with the "
"efficiency of threads."
msgstr ""

#: ../../whatsnew/3.14.rst:174
msgid ""
"While the feature has been around for decades, multiple interpreters have "
"not been used widely, due to low awareness and the lack of a stdlib module.  "
"Consequently, they currently have several notable limitations, which will "
"improve significantly now that the feature is finally going mainstream."
msgstr ""

#: ../../whatsnew/3.14.rst:180
msgid "Current limitations:"
msgstr ""

#: ../../whatsnew/3.14.rst:182
msgid "starting each interpreter has not been optimized yet"
msgstr ""

#: ../../whatsnew/3.14.rst:183
msgid ""
"each interpreter uses more memory than necessary (we will be working next on "
"extensive internal sharing between interpreters)"
msgstr ""

#: ../../whatsnew/3.14.rst:186
msgid ""
"there aren't many options *yet* for truly sharing objects or other data "
"between interpreters (other than :type:`memoryview`)"
msgstr ""

#: ../../whatsnew/3.14.rst:188
msgid ""
"many extension modules on PyPI are not compatible with multiple interpreters "
"yet (stdlib extension modules *are* compatible)"
msgstr ""

#: ../../whatsnew/3.14.rst:190
msgid ""
"the approach to writing applications that use multiple isolated interpreters "
"is mostly unfamiliar to Python users, for now"
msgstr ""

#: ../../whatsnew/3.14.rst:193
msgid ""
"The impact of these limitations will depend on future CPython improvements, "
"how interpreters are used, and what the community solves through PyPI "
"packages.  Depending on the use case, the limitations may not have much "
"impact, so try it out!"
msgstr ""

#: ../../whatsnew/3.14.rst:198
msgid ""
"Furthermore, future CPython releases will reduce or eliminate overhead and "
"provide utilities that are less appropriate on PyPI.  In the meantime, most "
"of the limitations can also be addressed through extension modules, meaning "
"PyPI packages can fill any gap for 3.14, and even back to 3.12 where "
"interpreters were finally properly isolated and stopped sharing the :term:"
"`GIL`.  Likewise, we expect to slowly see libraries on PyPI for high-level "
"abstractions on top of interpreters."
msgstr ""

#: ../../whatsnew/3.14.rst:206
msgid ""
"Regarding extension modules, work is in progress to update some PyPI "
"projects, as well as tools like Cython, pybind11, nanobind, and PyO3. The "
"steps for isolating an extension module are found at :ref:`isolating-"
"extensions-howto`.  Isolating a module has a lot of overlap with what is "
"required to support :ref:`free-threading <whatsnew314-free-threaded-"
"cpython>`, so the ongoing work in the community in that area will help "
"accelerate support for multiple interpreters."
msgstr ""

#: ../../whatsnew/3.14.rst:215
msgid ""
"Also added in 3.14: :ref:`concurrent.futures.InterpreterPoolExecutor "
"<whatsnew314-concurrent-futures-interp-pool>`."
msgstr ""

#: ../../whatsnew/3.14.rst:219
msgid ":pep:`734`."
msgstr ""

#: ../../whatsnew/3.14.rst:225
msgid "PEP 750: Template strings"
msgstr ""

#: ../../whatsnew/3.14.rst:227
msgid ""
"Template string literals (t-strings) are a generalization of f-strings, "
"using a ``t`` in place of the ``f`` prefix. Instead of evaluating to :class:"
"`str`, t-strings evaluate to a new :class:`!string.templatelib.Template` "
"type:"
msgstr ""

#: ../../whatsnew/3.14.rst:231
msgid ""
"from string.templatelib import Template\n"
"\n"
"name = \"World\"\n"
"template: Template = t\"Hello {name}\""
msgstr ""

#: ../../whatsnew/3.14.rst:238
msgid ""
"The template can then be combined with functions that operate on the "
"template's structure to produce a :class:`str` or a string-like result. For "
"example, sanitizing input:"
msgstr ""

#: ../../whatsnew/3.14.rst:242
msgid ""
"evil = \"<script>alert('evil')</script>\"\n"
"template = t\"<p>{evil}</p>\"\n"
"assert html(template) == \"<p>&lt;script&gt;alert('evil')&lt;/script&gt;</"
"p>\""
msgstr ""

#: ../../whatsnew/3.14.rst:248
msgid "As another example, generating HTML attributes from data:"
msgstr ""

#: ../../whatsnew/3.14.rst:250
msgid ""
"attributes = {\"src\": \"shrubbery.jpg\", \"alt\": \"looks nice\"}\n"
"template = t\"<img {attributes}>\"\n"
"assert html(template) == '<img src=\"shrubbery.jpg\" alt=\"looks nice\" "
"class=\"looks-nice\">'"
msgstr ""

#: ../../whatsnew/3.14.rst:256
msgid ""
"Compared to using an f-string, the ``html`` function has access to template "
"attributes containing the original information: static strings, "
"interpolations, and values from the original scope. Unlike existing "
"templating approaches, t-strings build from the well-known f-string syntax "
"and rules. Template systems thus benefit from Python tooling as they are "
"much closer to the Python language, syntax, scoping, and more."
msgstr ""

#: ../../whatsnew/3.14.rst:263
msgid "Writing template handlers is straightforward:"
msgstr ""

#: ../../whatsnew/3.14.rst:265
msgid ""
"from string.templatelib import Template, Interpolation\n"
"\n"
"def lower_upper(template: Template) -> str:\n"
"    \"\"\"Render static parts lowercased and interpolations uppercased."
"\"\"\"\n"
"    parts: list[str] = []\n"
"    for item in template:\n"
"        if isinstance(item, Interpolation):\n"
"            parts.append(str(item.value).upper())\n"
"        else:\n"
"            parts.append(item.lower())\n"
"    return \"\".join(parts)\n"
"\n"
"name = \"world\"\n"
"assert lower_upper(t\"HELLO {name}\") == \"hello WORLD\""
msgstr ""

#: ../../whatsnew/3.14.rst:282
msgid ""
"With this in place, developers can write template systems to sanitize SQL, "
"make safe shell operations, improve logging, tackle modern ideas in web "
"development (HTML, CSS, and so on), and implement lightweight, custom "
"business DSLs."
msgstr ""

#: ../../whatsnew/3.14.rst:286
msgid ""
"(Contributed by Jim Baker, Guido van Rossum, Paul Everitt, Koudai Aono, "
"Lysandros Nikolaou, Dave Peck, Adam Turner, Jelle Zijlstra, Bénédikt Tran, "
"and Pablo Galindo Salgado in :gh:`132661`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:291
msgid ":pep:`750`."
msgstr ""

#: ../../whatsnew/3.14.rst:297
msgid "PEP 768: Safe external debugger interface for CPython"
msgstr ""

#: ../../whatsnew/3.14.rst:299
msgid ""
":pep:`768` introduces a zero-overhead debugging interface that allows "
"debuggers and profilers to safely attach to running Python processes. This "
"is a significant enhancement to Python's debugging capabilities allowing "
"debuggers to forego unsafe alternatives. See :ref:`below <whatsnew314-remote-"
"pdb>` for how this feature is leveraged to implement the new :mod:`pdb` "
"module's remote attaching capabilities."
msgstr ""

#: ../../whatsnew/3.14.rst:305
msgid ""
"The new interface provides safe execution points for attaching debugger code "
"without modifying the interpreter's normal execution path or adding runtime "
"overhead. This enables tools to inspect and interact with Python "
"applications in real-time without stopping or restarting them — a crucial "
"capability for high-availability systems and production environments."
msgstr ""

#: ../../whatsnew/3.14.rst:310
msgid ""
"For convenience, CPython implements this interface through the :mod:`sys` "
"module with a :func:`sys.remote_exec` function::"
msgstr ""

#: ../../whatsnew/3.14.rst:313
msgid "sys.remote_exec(pid, script_path)"
msgstr ""

#: ../../whatsnew/3.14.rst:315
msgid ""
"This function allows sending Python code to be executed in a target process "
"at the next safe execution point. However, tool authors can also implement "
"the protocol directly as described in the PEP, which details the underlying "
"mechanisms used to safely attach to running processes."
msgstr ""

#: ../../whatsnew/3.14.rst:319
msgid ""
"Here's a simple example that inspects object types in a running Python "
"process:"
msgstr ""

#: ../../whatsnew/3.14.rst:321
msgid ""
"import os\n"
"import sys\n"
"import tempfile\n"
"\n"
"# Create a temporary script\n"
"with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as "
"f:\n"
"    script_path = f.name\n"
"    f.write(f\"import my_debugger; my_debugger.connect({os.getpid()})\")\n"
"try:\n"
"    # Execute in process with PID 1234\n"
"    print(\"Behold! An offering:\")\n"
"    sys.remote_exec(1234, script_path)\n"
"finally:\n"
"    os.unlink(script_path)"
msgstr ""

#: ../../whatsnew/3.14.rst:338
msgid ""
"The debugging interface has been carefully designed with security in mind "
"and includes several mechanisms to control access:"
msgstr ""

#: ../../whatsnew/3.14.rst:341
msgid "A :envvar:`PYTHON_DISABLE_REMOTE_DEBUG` environment variable."
msgstr ""

#: ../../whatsnew/3.14.rst:342
msgid "A :option:`-X disable-remote-debug` command-line option."
msgstr ""

#: ../../whatsnew/3.14.rst:343
msgid ""
"A :option:`--without-remote-debug` configure flag to completely disable the "
"feature at build time."
msgstr ""

#: ../../whatsnew/3.14.rst:345
msgid ""
"A key implementation detail is that the interface piggybacks on the "
"interpreter's existing evaluation loop and safe points, ensuring zero "
"overhead during normal execution while providing a reliable way for external "
"processes to coordinate debugging operations."
msgstr ""

#: ../../whatsnew/3.14.rst:349
msgid ""
"(Contributed by Pablo Galindo Salgado, Matt Wozniski, and Ivona Stojanovic "
"in :gh:`131591`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:352 ../../whatsnew/3.14.rst:426
msgid ":pep:`768`."
msgstr ""

#: ../../whatsnew/3.14.rst:358
msgid "PEP 784: Adding Zstandard to the standard library"
msgstr ""

#: ../../whatsnew/3.14.rst:360
msgid ""
"The new ``compression`` package contains modules :mod:`!compression.lzma`, :"
"mod:`!compression.bz2`, :mod:`!compression.gzip` and :mod:`!compression."
"zlib` which re-export the :mod:`lzma`, :mod:`bz2`, :mod:`gzip` and :mod:"
"`zlib` modules respectively. The new import names under ``compression`` are "
"the canonical names for importing these compression modules going forward. "
"However, the existing modules names have not been deprecated. Any "
"deprecation or removal of the existing compression modules will occur no "
"sooner than five years after the release of 3.14."
msgstr ""

#: ../../whatsnew/3.14.rst:369
msgid ""
"The new :mod:`!compression.zstd` module provides compression and "
"decompression APIs for the Zstandard format via bindings to `Meta's zstd "
"library <https://facebook.github.io/zstd/>`__. Zstandard is a widely "
"adopted, highly efficient, and fast compression format. In addition to the "
"APIs introduced in :mod:`!compression.zstd`, support for reading and writing "
"Zstandard compressed archives has been added to the :mod:`tarfile`, :mod:"
"`zipfile`, and :mod:`shutil` modules."
msgstr ""

#: ../../whatsnew/3.14.rst:377
msgid "Here's an example of using the new module to compress some data:"
msgstr ""

#: ../../whatsnew/3.14.rst:379
msgid ""
"from compression import zstd\n"
"import math\n"
"\n"
"data = str(math.pi).encode() * 20\n"
"\n"
"compressed = zstd.compress(data)\n"
"\n"
"ratio = len(compressed) / len(data)\n"
"print(f\"Achieved compression ratio of {ratio}\")"
msgstr ""

#: ../../whatsnew/3.14.rst:391
msgid ""
"As can be seen, the API is similar to the APIs of the :mod:`!lzma` and :mod:"
"`!bz2` modules."
msgstr ""

#: ../../whatsnew/3.14.rst:394
msgid ""
"(Contributed by Emma Harper Smith, Adam Turner, Gregory P. Smith, Tomas "
"Roun, Victor Stinner, and Rogdham in :gh:`132983`)"
msgstr ""

#: ../../whatsnew/3.14.rst:398
msgid ":pep:`784`."
msgstr ""

#: ../../whatsnew/3.14.rst:404
msgid "Remote attaching to a running Python process with PDB"
msgstr ""

#: ../../whatsnew/3.14.rst:406
msgid ""
"The :mod:`pdb` module now supports remote attaching to a running Python "
"process using a new ``-p PID`` command-line option:"
msgstr ""

#: ../../whatsnew/3.14.rst:409
msgid "python -m pdb -p 1234"
msgstr ""

#: ../../whatsnew/3.14.rst:413
msgid ""
"This will connect to the Python process with the given PID and allow you to "
"debug it interactively. Notice that due to how the Python interpreter works "
"attaching to a remote process that is blocked in a system call or waiting "
"for I/O will only work once the next bytecode instruction is executed or "
"when the process receives a signal."
msgstr ""

#: ../../whatsnew/3.14.rst:419
msgid ""
"This feature uses :pep:`768` and the :func:`sys.remote_exec` function to "
"attach to the remote process and send the PDB commands to it."
msgstr ""

#: ../../whatsnew/3.14.rst:423
msgid "(Contributed by Matt Wozniski and Pablo Galindo in :gh:`131591`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:432
msgid "PEP 758 – Allow except and except* expressions without parentheses"
msgstr ""

#: ../../whatsnew/3.14.rst:434
msgid ""
"The :keyword:`except` and :keyword:`except* <except_star>` expressions now "
"allow parentheses to be omitted when there are multiple exception types and "
"the ``as`` clause is not used. For example the following expressions are now "
"valid:"
msgstr ""

#: ../../whatsnew/3.14.rst:438
msgid ""
"try:\n"
"    connect_to_server()\n"
"except TimeoutError, ConnectionRefusedError:\n"
"    print(\"Network issue encountered.\")\n"
"\n"
" # The same applies to except* (for exception groups):\n"
"\n"
"try:\n"
"    connect_to_server()\n"
"except* TimeoutError, ConnectionRefusedError:\n"
"    print(\"Network issue encountered.\")"
msgstr ""

#: ../../whatsnew/3.14.rst:452
msgid "Check :pep:`758` for more details."
msgstr ""

#: ../../whatsnew/3.14.rst:454
msgid "(Contributed by Pablo Galindo and Brett Cannon in :gh:`131831`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:457
msgid ":pep:`758`."
msgstr ""

#: ../../whatsnew/3.14.rst:463
msgid "PEP 649 and 749: deferred evaluation of annotations"
msgstr "PEP 649 e 749: avaliação adiada de anotações"

#: ../../whatsnew/3.14.rst:465
msgid ""
"The :term:`annotations <annotation>` on functions, classes, and modules are "
"no longer evaluated eagerly. Instead, annotations are stored in special-"
"purpose :term:`annotate functions <annotate function>` and evaluated only "
"when necessary (except if ``from __future__ import annotations`` is used). "
"This is specified in :pep:`649` and :pep:`749`."
msgstr ""
"As :term:`anotações <annotation>` em função, classes e módulos não são mais "
"avaliados de forma ansiosa. Em vez disso, as anotações são armazenadas em "
"uma :term:`função de anotação <annotate function>` com propósito especial e "
"avaliadas somente quando necessário (exceto se ``from __future__ import "
"annotations`` for usado). Isso está especificado nas :pep:`649` e :pep:`749`."

#: ../../whatsnew/3.14.rst:471
msgid ""
"This change is designed to make annotations in Python more performant and "
"more usable in most circumstances. The runtime cost for defining annotations "
"is minimized, but it remains possible to introspect annotations at runtime. "
"It is no longer necessary to enclose annotations in strings if they contain "
"forward references."
msgstr ""
"Essa alteração foi projetada para tornar anotações em Python mais eficientes "
"e mais utilizáveis na maioria das circunstâncias. O custo em tempo de "
"execução para definir anotação é minimizado, mas continua sendo possível "
"introspectar anotação em tempo de execução. Não é mais necessário incluir "
"anotação em string se eles contiverem referência futura."

#: ../../whatsnew/3.14.rst:477
msgid ""
"The new :mod:`annotationlib` module provides tools for inspecting deferred "
"annotations. Annotations may be evaluated in the :attr:`~annotationlib."
"Format.VALUE` format (which evaluates annotations to runtime values, similar "
"to the behavior in earlier Python versions), the :attr:`~annotationlib."
"Format.FORWARDREF` format (which replaces undefined names with special "
"markers), and the :attr:`~annotationlib.Format.STRING` format (which returns "
"annotations as strings)."
msgstr ""
"O novo módulo :mod:`annotationlib` fornece ferramentas para inspecionar "
"anotação adiada. A anotação pode ser avaliada nos formatos :attr:"
"`~annotationlib.Format.VALUE` (que avalia anotações para valores em tempo de "
"execução, semelhante ao comportamento nas versões anteriores do Python), :"
"attr:`~annotationlib.Format.FORWARDREF` (que substitui nomes indefinidos por "
"marcadores especiais) e :attr:`~annotationlib.Format.STRING` (que retorna "
"anotações como strings)."

#: ../../whatsnew/3.14.rst:484
msgid "This example shows how these formats behave:"
msgstr "Este exemplo mostra como esses formatos se comportam:"

#: ../../whatsnew/3.14.rst:486
msgid ""
">>> from annotationlib import get_annotations, Format\n"
">>> def func(arg: Undefined):\n"
"...     pass\n"
">>> get_annotations(func, format=Format.VALUE)\n"
"Traceback (most recent call last):\n"
"  ...\n"
"NameError: name 'Undefined' is not defined\n"
">>> get_annotations(func, format=Format.FORWARDREF)\n"
"{'arg': ForwardRef('Undefined', owner=<function func at 0x...>)}\n"
">>> get_annotations(func, format=Format.STRING)\n"
"{'arg': 'Undefined'}"
msgstr ""
">>> from annotationlib import get_annotations, Format\n"
">>> def func(arg: Undefined):\n"
"...     pass\n"
">>> get_annotations(func, format=Format.VALUE)\n"
"Traceback (most recent call last):\n"
"  ...\n"
"NameError: name 'Undefined' is not defined\n"
">>> get_annotations(func, format=Format.FORWARDREF)\n"
"{'arg': ForwardRef('Undefined', owner=<function func at 0x...>)}\n"
">>> get_annotations(func, format=Format.STRING)\n"
"{'arg': 'Undefined'}"

#: ../../whatsnew/3.14.rst:501
msgid "Implications for annotated code"
msgstr "Implicações para o código anotado"

#: ../../whatsnew/3.14.rst:503
msgid ""
"If you define annotations in your code (for example, for use with a static "
"type checker), then this change probably does not affect you: you can keep "
"writing annotations the same way you did with previous versions of Python."
msgstr ""
"Se você definir anotação em seu código (por exemplo, para uso com um "
"verificador de tipo estático), essa alteração provavelmente não o afetará: "
"você pode continuar escrevendo anotação da mesma forma que fazia com as "
"versões anteriores de Python."

#: ../../whatsnew/3.14.rst:507
msgid ""
"You will likely be able to remove quoted strings in annotations, which are "
"frequently used for forward references. Similarly, if you use ``from "
"__future__ import annotations`` to avoid having to write strings in "
"annotations, you may well be able to remove that import once you support "
"only Python 3.14 and newer. However, if you rely on third-party libraries "
"that read annotations, those libraries may need changes to support unquoted "
"annotations before they work as expected."
msgstr ""
"É provável que você consiga remover as strings entre aspas em anotações, que "
"são frequentemente usadas para referência futura. Da mesma forma, se você "
"usar ``from __future__ import annotations`` para evitar ter que escrever "
"string em anotação, poderá remover essa importação se você for manter seu "
"código apenas para Python 3.14 e mais recentes. No entanto, se você depende "
"de bibliotecas de terceiros que leem anotações, essas bibliotecas podem "
"precisar de alterações no suporte a anotações sem aspas para funcionaram "
"como esperado."

#: ../../whatsnew/3.14.rst:516
msgid "Implications for readers of ``__annotations__``"
msgstr "Implicações para leitores de ``__annotations__``"

#: ../../whatsnew/3.14.rst:518
msgid ""
"If your code reads the ``__annotations__`` attribute on objects, you may "
"want to make changes in order to support code that relies on deferred "
"evaluation of annotations. For example, you may want to use :func:"
"`annotationlib.get_annotations` with the :attr:`~annotationlib.Format."
"FORWARDREF` format, as the :mod:`dataclasses` module now does."
msgstr ""
"Se o seu código lê o atributo ``__annotations__`` dos objetos, talvez você "
"queira fazer alterações para prover suporte a código que depende da "
"avaliação adiada de anotações. Por exemplo, talvez você queira usar :func:"
"`annotationlib.get_annotations` com o formato :attr:`~annotationlib.Format."
"FORWARDREF`, como o módulo :mod:`dataclasses` faz agora."

#: ../../whatsnew/3.14.rst:524
msgid ""
"The external :pypi:`typing_extensions` package provides partial backports of "
"some of the functionality of the :mod:`annotationlib` module, such as the :"
"class:`~annotationlib.Format` enum and the :func:`~annotationlib."
"get_annotations` function. These can be used to write cross-version code "
"that takes advantage of the new behavior in Python 3.14."
msgstr ""
"O pacote externo :pypi:`typing_extensions` pacote fornece compatibilidade "
"retroativa parcial de algumas das funcionalidades do módulo :mod:"
"`annotationlib`, como a enumeração :class:`~annotationlib.Format` e a "
"função :func:`~annotationlib.get_annotations`. Eles podem ser usados para "
"escrever código com versão-cruzada que aproveite as vantagens do novo "
"comportamento em Python 3.14."

#: ../../whatsnew/3.14.rst:530
msgid "Related changes"
msgstr ""

#: ../../whatsnew/3.14.rst:532
msgid ""
"The changes in Python 3.14 are designed to rework how ``__annotations__`` "
"works at runtime while minimizing breakage to code that contains annotations "
"in source code and to code that reads ``__annotations__``. However, if you "
"rely on undocumented details of the annotation behavior or on private "
"functions in the standard library, there are many ways in which your code "
"may not work in Python 3.14. To safeguard your code against future changes, "
"use only the documented functionality of the :mod:`annotationlib` module."
msgstr ""

#: ../../whatsnew/3.14.rst:540
msgid ""
"In particular, do not read annotations directly from the namespace "
"dictionary attribute of type objects. Use :func:`annotationlib."
"get_annotate_from_class_namespace` during class construction and :func:"
"`annotationlib.get_annotations` afterwards."
msgstr ""

#: ../../whatsnew/3.14.rst:544
msgid ""
"In previous releases, it was sometimes possible to access class annotations "
"from an instance of an annotated class. This behavior was undocumented and "
"accidental, and will no longer work in Python 3.14."
msgstr ""

#: ../../whatsnew/3.14.rst:549
msgid "``from __future__ import annotations``"
msgstr ""

#: ../../whatsnew/3.14.rst:551
msgid ""
"In Python 3.7, :pep:`563` introduced the ``from __future__ import "
"annotations`` directive, which turns all annotations into strings. This "
"directive is now considered deprecated and it is expected to be removed in a "
"future version of Python. However, this removal will not happen until after "
"Python 3.13, the last version of Python without deferred evaluation of "
"annotations, reaches its end of life in 2029. In Python 3.14, the behavior "
"of code using ``from __future__ import annotations`` is unchanged."
msgstr ""

#: ../../whatsnew/3.14.rst:559
msgid ""
"(Contributed by Jelle Zijlstra in :gh:`119180`; :pep:`649` was written by "
"Larry Hastings.)"
msgstr ""

#: ../../whatsnew/3.14.rst:562
msgid ":pep:`649` and :pep:`749`."
msgstr ""

#: ../../whatsnew/3.14.rst:566
msgid "Improved error messages"
msgstr "Mensagens de erro melhoradas"

#: ../../whatsnew/3.14.rst:568
msgid ""
"The interpreter now provides helpful suggestions when it detects typos in "
"Python keywords. When a word that closely resembles a Python keyword is "
"encountered, the interpreter will suggest the correct keyword in the error "
"message. This feature helps programmers quickly identify and fix common "
"typing mistakes. For example:"
msgstr ""

#: ../../whatsnew/3.14.rst:574
msgid ""
">>> whille True:\n"
"...     pass\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    whille True:\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'while'?\n"
"\n"
">>> asynch def fetch_data():\n"
"...     pass\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    asynch def fetch_data():\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'async'?\n"
"\n"
">>> async def foo():\n"
"...     awaid fetch_data()\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 2\n"
"    awaid fetch_data()\n"
"    ^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'await'?\n"
"\n"
">>> raisee ValueError(\"Error\")\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    raisee ValueError(\"Error\")\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'raise'?"
msgstr ""

#: ../../whatsnew/3.14.rst:607
msgid ""
"While the feature focuses on the most common cases, some variations of "
"misspellings may still result in regular syntax errors. (Contributed by "
"Pablo Galindo in :gh:`132449`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:611
msgid ""
"When unpacking assignment fails due to incorrect number of variables, the "
"error message prints the received number of values in more cases than "
"before. (Contributed by Tushar Sadhwani in :gh:`122239`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:615
msgid ""
">>> x, y, z = 1, 2, 3, 4\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"    x, y, z = 1, 2, 3, 4\n"
"    ^^^^^^^\n"
"ValueError: too many values to unpack (expected 3, got 4)"
msgstr ""

#: ../../whatsnew/3.14.rst:624
msgid ""
":keyword:`elif` statements that follow an :keyword:`else` block now have a "
"specific error message. (Contributed by Steele Farnsworth in :gh:`129902`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:627
msgid ""
">>> if who == \"me\":\n"
"...     print(\"It's me!\")\n"
"... else:\n"
"...     print(\"It's not me!\")\n"
"... elif who is None:\n"
"...     print(\"Who is it?\")\n"
"File \"<stdin>\", line 5\n"
"  elif who is None:\n"
"  ^^^^\n"
"SyntaxError: 'elif' block follows an 'else' block"
msgstr ""

#: ../../whatsnew/3.14.rst:640
msgid ""
"If a statement (:keyword:`pass`, :keyword:`del`, :keyword:`return`, :keyword:"
"`yield`, :keyword:`raise`, :keyword:`break`, :keyword:`continue`, :keyword:"
"`assert`, :keyword:`import`, :keyword:`from`) is passed to the :ref:"
"`if_expr` after :keyword:`else`, or one of :keyword:`pass`, :keyword:"
"`break`, or :keyword:`continue` is passed before :keyword:`if`, then the "
"error message highlights where the :token:`~python-grammar:expression` is "
"required. (Contributed by Sergey Miryanov in :gh:`129515`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:648
msgid ""
">>> x = 1 if True else pass\n"
"Traceback (most recent call last):\n"
"  File \"<string>\", line 1\n"
"    x = 1 if True else pass\n"
"                       ^^^^\n"
"SyntaxError: expected expression after 'else', but statement is given\n"
"\n"
">>> x = continue if True else break\n"
"Traceback (most recent call last):\n"
"  File \"<string>\", line 1\n"
"    x = continue if True else break\n"
"        ^^^^^^^^\n"
"SyntaxError: expected expression before 'if', but statement is given"
msgstr ""

#: ../../whatsnew/3.14.rst:665
msgid ""
"When incorrectly closed strings are detected, the error message suggests "
"that the string may be intended to be part of the string. (Contributed by "
"Pablo Galindo in :gh:`88535`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:669
msgid ""
">>> \"The interesting object \"The important object\" is very important\"\n"
"Traceback (most recent call last):\n"
"SyntaxError: invalid syntax. Is this intended to be part of the string?"
msgstr ""

#: ../../whatsnew/3.14.rst:675
msgid ""
"When strings have incompatible prefixes, the error now shows which prefixes "
"are incompatible. (Contributed by Nikita Sobolev in :gh:`133197`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:679
msgid ""
">>> ub'abc'\n"
"  File \"<python-input-0>\", line 1\n"
"    ub'abc'\n"
"    ^^\n"
"SyntaxError: 'u' and 'b' prefixes are incompatible"
msgstr ""

#: ../../whatsnew/3.14.rst:687
msgid "Improved error messages when using ``as`` with incompatible targets in:"
msgstr ""

#: ../../whatsnew/3.14.rst:689
msgid "Imports: ``import ... as ...``"
msgstr ""

#: ../../whatsnew/3.14.rst:690
msgid "From imports: ``from ... import ... as ...``"
msgstr ""

#: ../../whatsnew/3.14.rst:691
msgid "Except handlers: ``except ... as ...``"
msgstr ""

#: ../../whatsnew/3.14.rst:692
msgid "Pattern-match cases: ``case ... as ...``"
msgstr ""

#: ../../whatsnew/3.14.rst:694
msgid ""
"(Contributed by Nikita Sobolev in :gh:`123539`, :gh:`123562`, and :gh:"
"`123440`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:697
msgid ""
">>> import ast as arr[0]\n"
"  File \"<python-input-1>\", line 1\n"
"    import ast as arr[0]\n"
"                  ^^^^^^\n"
"SyntaxError: cannot use subscript as import target"
msgstr ""

#: ../../whatsnew/3.14.rst:705
msgid ""
"Improved error message when trying to add an instance of an unhashable type "
"to a :class:`dict` or :class:`set`. (Contributed by CF Bolz-Tereick and "
"Victor Stinner in :gh:`132828`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:709
msgid ""
">>> s = set()\n"
">>> s.add({'pages': 12, 'grade': 'A'})\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-1>\", line 1, in <module>\n"
"    s.add({'pages': 12, 'grade': 'A'})\n"
"    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
"TypeError: cannot use 'dict' as a set element (unhashable type: 'dict')\n"
">>> d = {}\n"
">>> l = [1, 2, 3]\n"
">>> d[l] = 12\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-4>\", line 1, in <module>\n"
"    d[l] = 12\n"
"    ~^^^\n"
"TypeError: cannot use 'list' as a dict key (unhashable type: 'list')"
msgstr ""

#: ../../whatsnew/3.14.rst:731
msgid "PEP 741: Python Configuration C API"
msgstr ""

#: ../../whatsnew/3.14.rst:733
msgid ""
"Add a :ref:`PyInitConfig C API <pyinitconfig_api>` to configure the Python "
"initialization without relying on C structures and the ability to make ABI-"
"compatible changes in the future."
msgstr ""

#: ../../whatsnew/3.14.rst:737
msgid ""
"Complete the :pep:`587` :ref:`PyConfig C API <pyconfig_api>` by adding :c:"
"func:`PyInitConfig_AddModule` which can be used to add a built-in extension "
"module; feature previously referred to as the “inittab”."
msgstr ""

#: ../../whatsnew/3.14.rst:741
msgid ""
"Add :c:func:`PyConfig_Get` and :c:func:`PyConfig_Set` functions to get and "
"set the current runtime configuration."
msgstr ""

#: ../../whatsnew/3.14.rst:744
msgid ""
"PEP 587 “Python Initialization Configuration” unified all the ways to "
"configure the Python initialization. This PEP unifies also the configuration "
"of the Python preinitialization and the Python initialization in a single "
"API. Moreover, this PEP only provides a single choice to embed Python, "
"instead of having two “Python” and “Isolated” choices (PEP 587), to simplify "
"the API further."
msgstr ""

#: ../../whatsnew/3.14.rst:751
msgid ""
"The lower level PEP 587 PyConfig API remains available for use cases with an "
"intentionally higher level of coupling to CPython implementation details "
"(such as emulating the full functionality of CPython’s CLI, including its "
"configuration mechanisms)."
msgstr ""

#: ../../whatsnew/3.14.rst:756 ../../whatsnew/3.14.rst:2734
#: ../../whatsnew/3.14.rst:2753
msgid "(Contributed by Victor Stinner in :gh:`107954`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:759
msgid ":pep:`741`."
msgstr ""

#: ../../whatsnew/3.14.rst:764
msgid "Asyncio introspection capabilities"
msgstr ""

#: ../../whatsnew/3.14.rst:766
msgid ""
"Added a new command-line interface to inspect running Python processes using "
"asynchronous tasks, available via:"
msgstr ""

#: ../../whatsnew/3.14.rst:769
msgid "python -m asyncio ps PID"
msgstr ""

#: ../../whatsnew/3.14.rst:773
msgid ""
"This tool inspects the given process ID (PID) and displays information about "
"currently running asyncio tasks.  It outputs a task table: a flat listing of "
"all tasks, their names, their coroutine stacks, and which tasks are awaiting "
"them."
msgstr ""

#: ../../whatsnew/3.14.rst:778
msgid "python -m asyncio pstree PID"
msgstr ""

#: ../../whatsnew/3.14.rst:782
msgid ""
"This tool fetches the same information, but renders a visual async call "
"tree, showing coroutine relationships in a hierarchical format.  This "
"command is particularly useful for debugging long-running or stuck "
"asynchronous programs. It can help developers quickly identify where a "
"program is blocked, what tasks are pending, and how coroutines are chained "
"together."
msgstr ""

#: ../../whatsnew/3.14.rst:788
msgid "For example given this code:"
msgstr ""

#: ../../whatsnew/3.14.rst:790
msgid ""
"import asyncio\n"
"\n"
"async def play(track):\n"
"    await asyncio.sleep(5)\n"
"    print(f\"🎵 Finished: {track}\")\n"
"\n"
"async def album(name, tracks):\n"
"    async with asyncio.TaskGroup() as tg:\n"
"        for track in tracks:\n"
"            tg.create_task(play(track), name=track)\n"
"\n"
"async def main():\n"
"    async with asyncio.TaskGroup() as tg:\n"
"        tg.create_task(\n"
"          album(\"Sundowning\", [\"TNDNBTG\", \"Levitate\"]), "
"name=\"Sundowning\")\n"
"        tg.create_task(\n"
"          album(\"TMBTE\", [\"DYWTYLM\", \"Aqua Regia\"]), name=\"TMBTE\")\n"
"\n"
"if __name__ == \"__main__\":\n"
"    asyncio.run(main())"
msgstr ""

#: ../../whatsnew/3.14.rst:813
msgid ""
"Executing the new tool on the running process will yield a table like this:"
msgstr ""

#: ../../whatsnew/3.14.rst:815
msgid ""
"python -m asyncio ps 12345\n"
"\n"
"tid        task id              task name            coroutine "
"chain                                    awaiter name         awaiter id\n"
"---------------------------------------------------------------------------------------------------------------------------------------\n"
"8138752    0x564bd3d0210        "
"Task-1                                                                                       "
"0x0\n"
"8138752    0x564bd3d0410        Sundowning           _aexit -> __aexit__ -> "
"main                        Task-1               0x564bd3d0210\n"
"8138752    0x564bd3d0610        TMBTE                _aexit -> __aexit__ -> "
"main                        Task-1               0x564bd3d0210\n"
"8138752    0x564bd3d0810        TNDNBTG              _aexit -> __aexit__ -> "
"album                       Sundowning           0x564bd3d0410\n"
"8138752    0x564bd3d0a10        Levitate             _aexit -> __aexit__ -> "
"album                       Sundowning           0x564bd3d0410\n"
"8138752    0x564bd3e0550        DYWTYLM              _aexit -> __aexit__ -> "
"album                       TMBTE                 0x564bd3d0610\n"
"8138752    0x564bd3e0710        Aqua Regia           _aexit -> __aexit__ -> "
"album                       TMBTE                 0x564bd3d0610"
msgstr ""

#: ../../whatsnew/3.14.rst:830
msgid "or:"
msgstr ""

#: ../../whatsnew/3.14.rst:832
msgid ""
"python -m asyncio pstree 12345\n"
"\n"
"└── (T) Task-1\n"
"    └──  main\n"
"        └──  __aexit__\n"
"            └──  _aexit\n"
"                ├── (T) Sundowning\n"
"                │   └──  album\n"
"                │       └──  __aexit__\n"
"                │           └──  _aexit\n"
"                │               ├── (T) TNDNBTG\n"
"                │               └── (T) Levitate\n"
"                └── (T) TMBTE\n"
"                    └──  album\n"
"                        └──  __aexit__\n"
"                            └──  _aexit\n"
"                                ├── (T) DYWTYLM\n"
"                                └── (T) Aqua Regia"
msgstr ""

#: ../../whatsnew/3.14.rst:853
msgid ""
"If a cycle is detected in the async await graph (which could indicate a "
"programming issue), the tool raises an error and lists the cycle paths that "
"prevent tree construction."
msgstr ""

#: ../../whatsnew/3.14.rst:857
msgid ""
"(Contributed by Pablo Galindo, Łukasz Langa, Yury Selivanov, and Marta Gomez "
"Macias in :gh:`91048`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:863
msgid "A new type of interpreter"
msgstr ""

#: ../../whatsnew/3.14.rst:865
msgid ""
"A new type of interpreter has been added to CPython. It uses tail calls "
"between small C functions that implement individual Python opcodes, rather "
"than one large C case statement. For certain newer compilers, this "
"interpreter provides significantly better performance. Preliminary numbers "
"on our machines suggest anywhere up to 30% faster Python code, and a "
"geometric mean of 3-5% faster on ``pyperformance`` depending on platform and "
"architecture. The baseline is Python 3.14 built with Clang 19 without this "
"new interpreter."
msgstr ""

#: ../../whatsnew/3.14.rst:874
msgid ""
"This interpreter currently only works with Clang 19 and newer on x86-64 and "
"AArch64 architectures. However, we expect that a future release of GCC will "
"support this as well."
msgstr ""

#: ../../whatsnew/3.14.rst:878
msgid ""
"This feature is opt-in for now. We highly recommend enabling profile-guided "
"optimization with the new interpreter as it is the only configuration we "
"have tested and can validate its improved performance. For further "
"information on how to build Python, see :option:`--with-tail-call-interp`."
msgstr ""

#: ../../whatsnew/3.14.rst:886
msgid ""
"This is not to be confused with `tail call optimization`__ of Python "
"functions, which is currently not implemented in CPython."
msgstr ""

#: ../../whatsnew/3.14.rst:889
msgid ""
"This new interpreter type is an internal implementation detail of the "
"CPython interpreter.  It doesn't change the visible behavior of Python "
"programs at all.  It can improve their performance, but doesn't change "
"anything else."
msgstr ""

#: ../../whatsnew/3.14.rst:897
msgid ""
"This section previously reported a 9-15% geometric mean speedup. This number "
"has since been cautiously revised down to 3-5%. While we expect performance "
"results to be better than what we report, our estimates are more "
"conservative due to a `compiler bug <https://github.com/llvm/llvm-project/"
"issues/106846>`_ found in Clang/LLVM 19, which causes the normal interpreter "
"to be slower. We were unaware of this bug, resulting in inaccurate results. "
"We sincerely apologize for communicating results that were only accurate for "
"LLVM v19.1.x and v20.1.0. In the meantime, the bug has been fixed in LLVM "
"v20.1.1 and for the upcoming v21.1, but it will remain unfixed for LLVM "
"v19.1.x and v20.1.0. Thus any benchmarks with those versions of LLVM may "
"produce inaccurate numbers. (Thanks to Nelson Elhage for bringing this to "
"light.)"
msgstr ""

#: ../../whatsnew/3.14.rst:909
msgid ""
"(Contributed by Ken Jin in :gh:`128563`, with ideas on how to implement this "
"in CPython by Mark Shannon, Garrett Gu, Haoran Xu, and Josh Haberman.)"
msgstr ""

#: ../../whatsnew/3.14.rst:915
msgid "Free-threaded mode"
msgstr ""

#: ../../whatsnew/3.14.rst:917
msgid ""
"Free-threaded mode (:pep:`703`), initially added in 3.13, has been "
"significantly improved. The implementation described in PEP 703 was "
"finished, including C API changes, and temporary workarounds in the "
"interpreter were replaced with more permanent solutions. The specializing "
"adaptive interpreter (:pep:`659`) is now enabled in free-threaded mode, "
"which along with many other optimizations greatly improves its performance. "
"The performance penalty on single-threaded code in free-threaded mode is now "
"roughly 5-10%, depending on platform and C compiler used."
msgstr ""

#: ../../whatsnew/3.14.rst:925
msgid ""
"This work was done by many contributors: Sam Gross, Matt Page, Neil "
"Schemenauer, Thomas Wouters, Donghee Na, Kirill Podoprigora, Ken Jin, Itamar "
"Oren, Brett Simmers, Dino Viehland, Nathan Goldbaum, Ralf Gommers, Lysandros "
"Nikolaou, Kumar Aditya, Edgar Margffoy, and many others."
msgstr ""

#: ../../whatsnew/3.14.rst:930
msgid ""
"Some of these contributors are employed by Meta, which has continued to "
"provide significant engineering resources to support this project."
msgstr ""

#: ../../whatsnew/3.14.rst:933
msgid ""
"From 3.14, when compiling extension modules for the free-threaded build of "
"CPython on Windows, the preprocessor variable ``Py_GIL_DISABLED`` now needs "
"to be specified by the build backend, as it will no longer be determined "
"automatically by the C compiler. For a running interpreter, the setting that "
"was used at compile time can be found using :func:`sysconfig.get_config_var`."
msgstr ""

#: ../../whatsnew/3.14.rst:943
msgid "Syntax highlighting in PyREPL"
msgstr ""

#: ../../whatsnew/3.14.rst:945
msgid ""
"The default :term:`interactive` shell now highlights Python syntax as you "
"type.  The feature is enabled by default unless the :envvar:"
"`PYTHON_BASIC_REPL` environment is set or any color-disabling environment "
"variables are used. See :ref:`using-on-controlling-color` for details."
msgstr ""

#: ../../whatsnew/3.14.rst:951
msgid ""
"The default color theme for syntax highlighting strives for good contrast "
"and uses exclusively the 4-bit VGA standard ANSI color codes for maximum "
"compatibility. The theme can be customized using an experimental API "
"``_colorize.set_theme()``.  This can be called interactively, as well as in "
"the :envvar:`PYTHONSTARTUP` script."
msgstr ""

#: ../../whatsnew/3.14.rst:957
msgid "(Contributed by Łukasz Langa in :gh:`131507`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:963
msgid "Binary releases for the experimental just-in-time compiler"
msgstr ""

#: ../../whatsnew/3.14.rst:965
msgid ""
"The official macOS and Windows release binaries now include an "
"*experimental* just-in-time (JIT) compiler. Although it is **not** "
"recommended for production use, it can be tested by setting :envvar:"
"`PYTHON_JIT=1 <PYTHON_JIT>` as an environment variable. Downstream source "
"builds and redistributors can use the :option:`--enable-experimental-jit=yes-"
"off` configuration option for similar behavior."
msgstr ""

#: ../../whatsnew/3.14.rst:972
msgid ""
"The JIT is at an early stage and still in active development. As such, the "
"typical performance impact of enabling it can range from 10% slower to 20% "
"faster, depending on workload. To aid in testing and evaluation, a set of "
"introspection functions has been provided in the :data:`sys._jit` "
"namespace. :func:`sys._jit.is_available` can be used to determine if the "
"current executable supports JIT compilation, while :func:`sys._jit."
"is_enabled` can be used to tell if JIT compilation has been enabled for the "
"current process."
msgstr ""

#: ../../whatsnew/3.14.rst:980
msgid ""
"Currently, the most significant missing functionality is that native "
"debuggers and profilers like ``gdb`` and ``perf`` are unable to unwind "
"through JIT frames (Python debuggers and profilers, like :mod:`pdb` or :mod:"
"`profile`, continue to work without modification). Free-threaded builds do "
"not support JIT compilation."
msgstr ""

#: ../../whatsnew/3.14.rst:985
msgid ""
"Please report any bugs or major performance regressions that you encounter!"
msgstr ""

#: ../../whatsnew/3.14.rst:987
msgid ":pep:`744`"
msgstr ":pep:`744`"

#: ../../whatsnew/3.14.rst:991
msgid "Other language changes"
msgstr ""

#: ../../whatsnew/3.14.rst:993
msgid ""
"The default :term:`interactive` shell now supports import autocompletion. "
"This means that typing ``import foo`` and pressing ``<tab>`` will suggest "
"modules starting with ``foo``. Similarly, typing ``from foo import b`` will "
"suggest submodules of ``foo`` starting with ``b``. Note that autocompletion "
"of module attributes is not currently supported. (Contributed by Tomas Roun "
"in :gh:`69605`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1000
msgid ""
"The :func:`map` built-in now has an optional keyword-only *strict* flag "
"like :func:`zip` to check that all the iterables are of equal length. "
"(Contributed by Wannes Boeykens in :gh:`119793`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1004
msgid ""
"Incorrect usage of :keyword:`await` and asynchronous comprehensions is now "
"detected even if the code is optimized away by the :option:`-O` command-line "
"option. For example, ``python -O -c 'assert await 1'`` now produces a :exc:"
"`SyntaxError`. (Contributed by Jelle Zijlstra in :gh:`121637`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1009
msgid ""
"Writes to ``__debug__`` are now detected even if the code is optimized away "
"by the :option:`-O` command-line option. For example, ``python -O -c 'assert "
"(__debug__ := 1)'`` now produces a :exc:`SyntaxError`. (Contributed by Irit "
"Katriel in :gh:`122245`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1014
msgid ""
"Add class methods :meth:`float.from_number` and :meth:`complex.from_number` "
"to convert a number to :class:`float` or :class:`complex` type "
"correspondingly. They raise an error if the argument is a string. "
"(Contributed by Serhiy Storchaka in :gh:`84978`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1019
msgid ""
"Implement mixed-mode arithmetic rules combining real and complex numbers as "
"specified by C standards since C99. (Contributed by Sergey B Kirpichev in :"
"gh:`69639`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1023
msgid ""
"All Windows code pages are now supported as \"cpXXX\" codecs on Windows. "
"(Contributed by Serhiy Storchaka in :gh:`123803`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1026
msgid ""
":class:`super` objects are now :mod:`pickleable <pickle>` and :mod:`copyable "
"<copy>`. (Contributed by Serhiy Storchaka in :gh:`125767`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1030
msgid ""
"The :class:`memoryview` type now supports subscription, making it a :term:"
"`generic type`. (Contributed by Brian Schubert in :gh:`126012`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1034
msgid ""
"Support underscore and comma as thousands separators in the fractional part "
"for floating-point presentation types of the new-style string formatting "
"(with :func:`format` or :ref:`f-strings`). (Contributed by Sergey B "
"Kirpichev in :gh:`87790`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1039
msgid ""
"The :func:`bytes.fromhex` and :func:`bytearray.fromhex` methods now accept "
"ASCII :class:`bytes` and :term:`bytes-like objects <bytes-like object>`. "
"(Contributed by Daniel Pope in :gh:`129349`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1043
msgid ""
"Support ``\\z`` as a synonym for ``\\Z`` in :mod:`regular expressions <re>`. "
"It is interpreted unambiguously in many other regular expression engines, "
"unlike ``\\Z``, which has subtly different behavior. (Contributed by Serhiy "
"Storchaka in :gh:`133306`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1048
msgid ""
"``\\B`` in :mod:`regular expression <re>` now matches empty input string. "
"Now it is always the opposite of ``\\b``. (Contributed by Serhiy Storchaka "
"in :gh:`124130`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1052
msgid ""
"iOS and macOS apps can now be configured to redirect ``stdout`` and "
"``stderr`` content to the system log. (Contributed by Russell Keith-Magee "
"in :gh:`127592`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1056
msgid ""
"The iOS testbed is now able to stream test output while the test is running. "
"The testbed can also be used to run the test suite of projects other than "
"CPython itself. (Contributed by Russell Keith-Magee in :gh:`127592`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1060
msgid ""
"Three-argument :func:`pow` now tries calling :meth:`~object.__rpow__` if "
"necessary. Previously it was only called in two-argument :func:`!pow` and "
"the binary power operator. (Contributed by Serhiy Storchaka in :gh:`130104`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1065
msgid ""
"Add a built-in implementation for HMAC (:rfc:`2104`) using formally verified "
"code from the `HACL* <https://github.com/hacl-star/hacl-star/>`__ project. "
"This implementation is used as a fallback when the OpenSSL implementation of "
"HMAC is not available. (Contributed by Bénédikt Tran in :gh:`99108`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1071
msgid ""
"The import time flag can now track modules that are already loaded "
"('cached'), via the new :option:`-X importtime=2 <-X>`. When such a module "
"is imported, the ``self`` and ``cumulative`` times are replaced by the "
"string ``cached``. Values above ``2`` for ``-X importtime`` are now reserved "
"for future use. (Contributed by Noah Kim and Adam Turner in :gh:`118655`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1078
msgid ""
"When subclassing from a pure C type, the C slots for the new type are no "
"longer replaced with a wrapped version on class creation if they are not "
"explicitly overridden in the subclass. (Contributed by Tomasz Pytel in :gh:"
"`132329`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1083
msgid ""
"The command-line option :option:`-c` now automatically dedents its code "
"argument before execution. The auto-dedentation behavior mirrors :func:"
"`textwrap.dedent`. (Contributed by Jon Crall and Steven Sun in :gh:`103998`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1088
msgid ""
"Improve error message when an object supporting the synchronous context "
"manager protocol is entered using :keyword:`async with` instead of :keyword:"
"`with`. And vice versa with the asynchronous context manager protocol. "
"(Contributed by Bénédikt Tran in :gh:`128398`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1094
msgid ""
":option:`!-J` is no longer a reserved flag for Jython_, and now has no "
"special meaning. (Contributed by Adam Turner in :gh:`133336`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1103
msgid ""
"PEP 765: Disallow ``return``/``break``/``continue`` that exit a ``finally`` "
"block"
msgstr ""

#: ../../whatsnew/3.14.rst:1105
msgid ""
"The compiler emits a :exc:`SyntaxWarning` when a :keyword:`return`, :keyword:"
"`break` or :keyword:`continue` statements appears where it exits a :keyword:"
"`finally` block. This change is specified in :pep:`765`."
msgstr ""

#: ../../whatsnew/3.14.rst:1111
msgid "New modules"
msgstr "Novos módulos"

#: ../../whatsnew/3.14.rst:1113
msgid ""
":mod:`annotationlib`: For introspecting :term:`annotations <annotation>`. "
"See :pep:`749` for more details. (Contributed by Jelle Zijlstra in :gh:"
"`119180`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1119
msgid "Improved modules"
msgstr ""

#: ../../whatsnew/3.14.rst:1122 ../../whatsnew/3.14.rst:2345
msgid "argparse"
msgstr "argparse"

#: ../../whatsnew/3.14.rst:1124
msgid ""
"The default value of the :ref:`program name <prog>` for :class:`argparse."
"ArgumentParser` now reflects the way the Python interpreter was instructed "
"to find the ``__main__`` module code. (Contributed by Serhiy Storchaka and "
"Alyssa Coghlan in :gh:`66436`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1129
msgid ""
"Introduced the optional *suggest_on_error* parameter to :class:`argparse."
"ArgumentParser`, enabling suggestions for argument choices and subparser "
"names if mistyped by the user. (Contributed by Savannah Ostrowski in :gh:"
"`124456`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1136
msgid ""
"Introduced the optional *color* parameter to :class:`argparse."
"ArgumentParser`, enabling color for help text. This can be controlled by :"
"ref:`environment variables <using-on-controlling-color>`. Color has also "
"been enabled for help in the :ref:`stdlib CLIs <library-cmdline>` which use :"
"mod:`!argparse`. (Contributed by Hugo van Kemenade in :gh:`130645`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1145 ../../whatsnew/3.14.rst:2360
msgid "ast"
msgstr "ast"

#: ../../whatsnew/3.14.rst:1147
msgid ""
"Add :func:`ast.compare` for comparing two ASTs. (Contributed by Batuhan "
"Taskaya and Jeremy Hylton in :gh:`60191`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1150
msgid ""
"Add support for :func:`copy.replace` for AST nodes. (Contributed by Bénédikt "
"Tran in :gh:`121141`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1153
msgid ""
"Docstrings are now removed from an optimized AST in optimization level 2. "
"(Contributed by Irit Katriel in :gh:`123958`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1156
msgid ""
"The ``repr()`` output for AST nodes now includes more information. "
"(Contributed by Tomas Roun in :gh:`116022`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1159
msgid ""
":func:`ast.parse`, when called with an AST as input, now always verifies "
"that the root node type is appropriate. (Contributed by Irit Katriel in :gh:"
"`130139`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1163
msgid ""
"Add new ``--feature-version``, ``--optimize``, ``--show-empty`` options to "
"command-line interface. (Contributed by Semyon Moroz in :gh:`133367`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1169 ../../whatsnew/3.14.rst:2136
#: ../../whatsnew/3.14.rst:2388
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.14.rst:1171
msgid ""
"The function and methods named :func:`!create_task` now take an arbitrary "
"list of keyword arguments. All keyword arguments are passed to the :class:"
"`~asyncio.Task` constructor or the custom task factory. (See :meth:`~asyncio."
"loop.set_task_factory` for details.) The ``name`` and ``context`` keyword "
"arguments are no longer special; the name should now be set using the "
"``name`` keyword argument of the factory, and ``context`` may be ``None``."
msgstr ""

#: ../../whatsnew/3.14.rst:1179
msgid ""
"This affects the following function and methods: :meth:`asyncio."
"create_task`, :meth:`asyncio.loop.create_task`, :meth:`asyncio.TaskGroup."
"create_task`. (Contributed by Thomas Grainger in :gh:`128307`.)"
msgstr ""
"Isso afeta as seguintes funções e métodos: :meth:`asyncio.create_task`, :"
"meth:`asyncio.loop.create_task`, :meth:`asyncio.TaskGroup.create_task`. "
"(Contribuição de Thomas Grainger em :gh:`128307`.)"

#: ../../whatsnew/3.14.rst:1187
msgid "bdb"
msgstr "bdb"

#: ../../whatsnew/3.14.rst:1189
msgid ""
"The :mod:`bdb` module now supports the :mod:`sys.monitoring` backend. "
"(Contributed by Tian Gao in :gh:`124533`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1196
msgid "calendar"
msgstr "calendar"

#: ../../whatsnew/3.14.rst:1198
msgid ""
"By default, today's date is highlighted in color in :mod:`calendar`'s :ref:"
"`command-line <calendar-cli>` text output. This can be controlled by :ref:"
"`environment variables <using-on-controlling-color>`. (Contributed by Hugo "
"van Kemenade in :gh:`128317`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1206
msgid "concurrent.futures"
msgstr "concurrent.futures"

#: ../../whatsnew/3.14.rst:1210
msgid ""
"Add :class:`~concurrent.futures.InterpreterPoolExecutor`, which exposes "
"\"subinterpreters\" (multiple Python interpreters in the same process) to "
"Python code.  This is separate from the proposed API in :pep:`734`. "
"(Contributed by Eric Snow in :gh:`124548`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1218
msgid ""
"The default :class:`~concurrent.futures.ProcessPoolExecutor` :ref:`start "
"method <multiprocessing-start-methods>` changed from :ref:`fork "
"<multiprocessing-start-method-fork>` to :ref:`forkserver <multiprocessing-"
"start-method-forkserver>` on platforms other than macOS and Windows where it "
"was already :ref:`spawn <multiprocessing-start-method-spawn>`."
msgstr ""

#: ../../whatsnew/3.14.rst:1224
msgid ""
"If the threading incompatible *fork* method is required, you must explicitly "
"request it by supplying a multiprocessing context *mp_context* to :class:"
"`~concurrent.futures.ProcessPoolExecutor`."
msgstr ""

#: ../../whatsnew/3.14.rst:1228 ../../whatsnew/3.14.rst:1650
msgid ""
"See :ref:`forkserver restrictions <multiprocessing-programming-forkserver>` "
"for information and differences with the *fork* method and how this change "
"may affect existing code with mutable global shared variables and/or shared "
"objects that can not be automatically :mod:`pickled <pickle>`."
msgstr ""

#: ../../whatsnew/3.14.rst:1233 ../../whatsnew/3.14.rst:1655
msgid "(Contributed by Gregory P. Smith in :gh:`84559`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1235
msgid ""
"Add :meth:`concurrent.futures.ProcessPoolExecutor.terminate_workers` and :"
"meth:`concurrent.futures.ProcessPoolExecutor.kill_workers` as ways to "
"terminate or kill all living worker processes in the given pool. "
"(Contributed by Charles Machalow in :gh:`130849`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1240
msgid ""
"Add the optional ``buffersize`` parameter to :meth:`concurrent.futures."
"Executor.map` to limit the number of submitted tasks whose results have not "
"yet been yielded. If the buffer is full, iteration over the *iterables* "
"pauses until a result is yielded from the buffer. (Contributed by Enzo "
"Bonnal and Josh Rosenberg in :gh:`74028`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1249
msgid "contextvars"
msgstr "contextvars"

#: ../../whatsnew/3.14.rst:1251
msgid ""
"Support context manager protocol by :class:`contextvars.Token`. (Contributed "
"by Andrew Svetlov in :gh:`129889`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1256
msgid "ctypes"
msgstr "ctypes"

#: ../../whatsnew/3.14.rst:1258
msgid ""
"The layout of :ref:`bit fields <ctypes-bit-fields-in-structures-unions>` in :"
"class:`~ctypes.Structure` and :class:`~ctypes.Union` now matches platform "
"defaults (GCC/Clang or MSVC) more closely. In particular, fields no longer "
"overlap. (Contributed by Matthias Görgens in :gh:`97702`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1264
msgid ""
"The :attr:`.Structure._layout_` class attribute can now be set to help match "
"a non-default ABI. (Contributed by Petr Viktorin in :gh:`97702`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1268
msgid ""
"The class of :class:`~ctypes.Structure`/:class:`~ctypes.Union` field "
"descriptors is now available as :class:`~ctypes.CField`, and has new "
"attributes to aid debugging and introspection. (Contributed by Petr Viktorin "
"in :gh:`128715`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1273
msgid ""
"On Windows, the :exc:`~ctypes.COMError` exception is now public. "
"(Contributed by Jun Komoda in :gh:`126686`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1276
msgid ""
"On Windows, the :func:`~ctypes.CopyComPointer` function is now public. "
"(Contributed by Jun Komoda in :gh:`127275`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1279
msgid ""
":func:`ctypes.memoryview_at` now exists to create a :class:`memoryview` "
"object that refers to the supplied pointer and length. This works like :func:"
"`ctypes.string_at` except it avoids a buffer copy, and is typically useful "
"when implementing pure Python callback functions that are passed dynamically-"
"sized buffers. (Contributed by Rian Hunter in :gh:`112018`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1286
msgid ""
"Complex types, :class:`~ctypes.c_float_complex`, :class:`~ctypes."
"c_double_complex` and :class:`~ctypes.c_longdouble_complex`, are now "
"available if both the compiler and the ``libffi`` library support complex C "
"types. (Contributed by Sergey B Kirpichev in :gh:`61103`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1292
msgid ""
"Add :func:`ctypes.util.dllist` for listing the shared libraries loaded by "
"the current process. (Contributed by Brian Ward in :gh:`119349`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1296
msgid ""
"Move :func:`ctypes.POINTER` types cache from a global internal cache "
"(``_pointer_type_cache``) to the :attr:`ctypes._CData.__pointer_type__` "
"attribute of the corresponding :mod:`ctypes` types. This will stop the cache "
"from growing without limits in some situations. (Contributed by Sergey "
"Miryanov in :gh:`100926`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1302
msgid ""
"The :class:`ctypes.py_object` type now supports subscription, making it a :"
"term:`generic type`. (Contributed by Brian Schubert in :gh:`132168`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1306
msgid ""
":mod:`ctypes` now supports :term:`free-threading builds <free threading>`. "
"(Contributed by Kumar Aditya and Peter Bierma in :gh:`127945`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1310
msgid "curses"
msgstr "curses"

#: ../../whatsnew/3.14.rst:1312
msgid ""
"Add the :func:`~curses.assume_default_colors` function, a refinement of the :"
"func:`~curses.use_default_colors` function which allows to change the color "
"pair ``0``. (Contributed by Serhiy Storchaka in :gh:`133139`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1318
msgid "datetime"
msgstr "datetime"

#: ../../whatsnew/3.14.rst:1320
msgid ""
"Add :meth:`datetime.time.strptime` and :meth:`datetime.date.strptime`. "
"(Contributed by Wannes Boeykens in :gh:`41431`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1324
msgid "decimal"
msgstr "decimal"

#: ../../whatsnew/3.14.rst:1326
msgid ""
"Add alternative :class:`~decimal.Decimal` constructor :meth:`Decimal."
"from_number() <decimal.Decimal.from_number>`. (Contributed by Serhiy "
"Storchaka in :gh:`121798`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1330
msgid ""
"Expose :func:`decimal.IEEEContext` to support creation of contexts "
"corresponding to the IEEE 754 (2008) decimal interchange formats. "
"(Contributed by Sergey B Kirpichev in :gh:`53032`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1335
msgid "difflib"
msgstr ""

#: ../../whatsnew/3.14.rst:1337
msgid ""
"Comparison pages with highlighted changes generated by the :class:`difflib."
"HtmlDiff` class now support dark mode. (Contributed by Jiahao Li in :gh:"
"`129939`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1342
msgid "dis"
msgstr "dis"

#: ../../whatsnew/3.14.rst:1344
msgid ""
"Add support for rendering full source location information of :class:"
"`instructions <dis.Instruction>`, rather than only the line number. This "
"feature is added to the following interfaces via the *show_positions* "
"keyword argument:"
msgstr ""

#: ../../whatsnew/3.14.rst:1349
msgid ":class:`dis.Bytecode`"
msgstr ""

#: ../../whatsnew/3.14.rst:1350
msgid ":func:`dis.dis`"
msgstr ""

#: ../../whatsnew/3.14.rst:1351
msgid ":func:`dis.distb`"
msgstr ""

#: ../../whatsnew/3.14.rst:1352
msgid ":func:`dis.disassemble`"
msgstr ""

#: ../../whatsnew/3.14.rst:1354
msgid ""
"This feature is also exposed via :option:`dis --show-positions`. "
"(Contributed by Bénédikt Tran in :gh:`123165`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1357
msgid ""
"Add the :option:`dis --specialized` command-line option to show specialized "
"bytecode. (Contributed by Bénédikt Tran in :gh:`127413`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1363
msgid "errno"
msgstr "errno"

#: ../../whatsnew/3.14.rst:1365
msgid ""
"Add :data:`errno.EHWPOISON` error code. (Contributed by James Roy in :gh:"
"`126585`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1370
msgid "faulthandler"
msgstr "faulthandler"

#: ../../whatsnew/3.14.rst:1372
msgid ""
"Add support for printing the C stack trace on systems that :ref:`support it "
"<c-stack-compatibility>` via :func:`faulthandler.dump_c_stack` or via the "
"*c_stack* argument in :func:`faulthandler.enable`. (Contributed by Peter "
"Bierma in :gh:`127604`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1379
msgid "fnmatch"
msgstr ""

#: ../../whatsnew/3.14.rst:1381
msgid ""
"Added :func:`fnmatch.filterfalse` for excluding names matching a pattern. "
"(Contributed by Bénédikt Tran in :gh:`74598`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1386
msgid "fractions"
msgstr "fractions"

#: ../../whatsnew/3.14.rst:1388
msgid ""
"Add support for converting any objects that have the :meth:`!"
"as_integer_ratio` method to a :class:`~fractions.Fraction`. (Contributed by "
"Serhiy Storchaka in :gh:`82017`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1392
msgid ""
"Add alternative :class:`~fractions.Fraction` constructor :meth:`Fraction."
"from_number() <fractions.Fraction.from_number>`. (Contributed by Serhiy "
"Storchaka in :gh:`121797`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1398
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.14.rst:1400
msgid ""
"Add support to :func:`functools.partial` and :func:`functools.partialmethod` "
"for :data:`functools.Placeholder` sentinels to reserve a place for "
"positional arguments. (Contributed by Dominykas Grigonis in :gh:`119127`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1405
msgid ""
"Allow the *initial* parameter of :func:`functools.reduce` to be passed as a "
"keyword argument. (Contributed by Sayandip Dutta in :gh:`125916`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1411
msgid "getopt"
msgstr ""

#: ../../whatsnew/3.14.rst:1413
msgid ""
"Add support for options with optional arguments. (Contributed by Serhiy "
"Storchaka in :gh:`126374`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1416
msgid ""
"Add support for returning intermixed options and non-option arguments in "
"order. (Contributed by Serhiy Storchaka in :gh:`126390`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1421
msgid "getpass"
msgstr ""

#: ../../whatsnew/3.14.rst:1423
msgid ""
"Support keyboard feedback by :func:`getpass.getpass` via the keyword-only "
"optional argument ``echo_char``. Placeholder characters are rendered "
"whenever a character is entered, and removed when a character is deleted. "
"(Contributed by Semyon Moroz in :gh:`77065`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1430
msgid "graphlib"
msgstr "graphlib"

#: ../../whatsnew/3.14.rst:1432
msgid ""
"Allow :meth:`graphlib.TopologicalSorter.prepare` to be called more than once "
"as long as sorting has not started. (Contributed by Daniel Pope in :gh:"
"`130914`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1438
msgid "heapq"
msgstr ""

#: ../../whatsnew/3.14.rst:1440
msgid "Add functions for working with max-heaps:"
msgstr ""

#: ../../whatsnew/3.14.rst:1442
msgid ":func:`heapq.heapify_max`,"
msgstr ""

#: ../../whatsnew/3.14.rst:1443
msgid ":func:`heapq.heappush_max`,"
msgstr ""

#: ../../whatsnew/3.14.rst:1444
msgid ":func:`heapq.heappop_max`,"
msgstr ""

#: ../../whatsnew/3.14.rst:1445
msgid ":func:`heapq.heapreplace_max`"
msgstr ""

#: ../../whatsnew/3.14.rst:1446
msgid ":func:`heapq.heappushpop_max`"
msgstr ""

#: ../../whatsnew/3.14.rst:1450
msgid "hmac"
msgstr "hmac"

#: ../../whatsnew/3.14.rst:1452
msgid ""
"Add a built-in implementation for HMAC (:rfc:`2104`) using formally verified "
"code from the `HACL* <https://github.com/hacl-star/hacl-star/>`__ project. "
"(Contributed by Bénédikt Tran in :gh:`99108`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1458
msgid "http"
msgstr "http"

#: ../../whatsnew/3.14.rst:1460
msgid ""
"Directory lists and error pages generated by the :mod:`http.server` module "
"allow the browser to apply its default dark mode. (Contributed by Yorik "
"Hansen in :gh:`123430`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1464
msgid ""
"The :mod:`http.server` module now supports serving over HTTPS using the :"
"class:`http.server.HTTPSServer` class. This functionality is exposed by the "
"command-line interface (``python -m http.server``) through the following "
"options:"
msgstr ""

#: ../../whatsnew/3.14.rst:1469
msgid "``--tls-cert <path>``: Path to the TLS certificate file."
msgstr ""

#: ../../whatsnew/3.14.rst:1470
msgid "``--tls-key <path>``: Optional path to the private key file."
msgstr ""

#: ../../whatsnew/3.14.rst:1471
msgid ""
"``--tls-password-file <path>``: Optional path to the password file for the "
"private key."
msgstr ""

#: ../../whatsnew/3.14.rst:1473
msgid "(Contributed by Semyon Moroz in :gh:`85162`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1477
msgid "imaplib"
msgstr "imaplib"

#: ../../whatsnew/3.14.rst:1479
msgid ""
"Add :meth:`IMAP4.idle() <imaplib.IMAP4.idle>`, implementing the IMAP4 "
"``IDLE`` command as defined in :rfc:`2177`. (Contributed by Forest in :gh:"
"`55454`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1485
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.14.rst:1487
msgid ""
":func:`inspect.signature` takes a new argument *annotation_format* to "
"control the :class:`annotationlib.Format` used for representing annotations. "
"(Contributed by Jelle Zijlstra in :gh:`101552`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1491
msgid ""
":meth:`inspect.Signature.format` takes a new argument *unquote_annotations*. "
"If true, string :term:`annotations <annotation>` are displayed without "
"surrounding quotes. (Contributed by Jelle Zijlstra in :gh:`101552`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1495
msgid ""
"Add function :func:`inspect.ispackage` to determine whether an object is a :"
"term:`package` or not. (Contributed by Zhikang Yan in :gh:`125634`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1501 ../../whatsnew/3.14.rst:2166
msgid "io"
msgstr "io"

#: ../../whatsnew/3.14.rst:1503
msgid ""
"Reading text from a non-blocking stream with ``read`` may now raise a :exc:"
"`BlockingIOError` if the operation cannot immediately return bytes. "
"(Contributed by Giovanni Siragusa in :gh:`109523`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1507
msgid ""
"Add protocols :class:`io.Reader` and :class:`io.Writer` as a simpler "
"alternatives to the pseudo-protocols :class:`typing.IO`, :class:`typing."
"TextIO`, and :class:`typing.BinaryIO`. (Contributed by Sebastian Rittau in :"
"gh:`127648`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1514
msgid "json"
msgstr "json"

#: ../../whatsnew/3.14.rst:1516
msgid ""
"Add notes for JSON serialization errors that allow to identify the source of "
"the error. (Contributed by Serhiy Storchaka in :gh:`122163`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1520
msgid ""
"Enable the :mod:`json` module to work as a script using the :option:`-m` "
"switch: :program:`python -m json`. See the :ref:`JSON command-line interface "
"<json-commandline>` documentation. (Contributed by Trey Hunner in :gh:"
"`122873`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1527
msgid ""
"By default, the output of the :ref:`JSON command-line interface <json-"
"commandline>` is highlighted in color. This can be controlled by :ref:"
"`environment variables <using-on-controlling-color>`. (Contributed by Tomas "
"Roun in :gh:`131952`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1534
msgid "linecache"
msgstr "linecache"

#: ../../whatsnew/3.14.rst:1536
msgid ""
":func:`linecache.getline` can retrieve source code for frozen modules. "
"(Contributed by Tian Gao in :gh:`131638`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1541
msgid "logging.handlers"
msgstr ""

#: ../../whatsnew/3.14.rst:1543
msgid ""
":class:`logging.handlers.QueueListener` now implements the context manager "
"protocol, allowing it to be used in a :keyword:`with` statement. "
"(Contributed by Charles Machalow in :gh:`132106`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1547
msgid ""
":meth:`QueueListener.start <logging.handlers.QueueListener.start>` now "
"raises a :exc:`RuntimeError` if the listener is already started. "
"(Contributed by Charles Machalow in :gh:`132106`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1553
msgid "math"
msgstr "math"

#: ../../whatsnew/3.14.rst:1555
msgid ""
"Added more detailed error messages for domain errors in the module. "
"(Contributed by by Charlie Zhao and Sergey B Kirpichev in :gh:`101410`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1560
msgid "mimetypes"
msgstr "mimetypes"

#: ../../whatsnew/3.14.rst:1562
msgid ""
"Document the command-line for :mod:`mimetypes`. It now exits with ``1`` on "
"failure instead of ``0`` and ``2`` on incorrect command-line parameters "
"instead of ``1``. Also, errors are printed to stderr instead of stdout and "
"their text is made tighter. (Contributed by Oleg Iarygin and Hugo van "
"Kemenade in :gh:`93096`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1569
msgid "Add MS and :rfc:`8081` MIME types for fonts:"
msgstr ""

#: ../../whatsnew/3.14.rst:1571
msgid "Embedded OpenType: ``application/vnd.ms-fontobject``"
msgstr ""

#: ../../whatsnew/3.14.rst:1572
msgid "OpenType Layout (OTF) ``font/otf``"
msgstr ""

#: ../../whatsnew/3.14.rst:1573
msgid "TrueType: ``font/ttf``"
msgstr ""

#: ../../whatsnew/3.14.rst:1574
msgid "WOFF 1.0 ``font/woff``"
msgstr ""

#: ../../whatsnew/3.14.rst:1575
msgid "WOFF 2.0 ``font/woff2``"
msgstr ""

#: ../../whatsnew/3.14.rst:1577
msgid "(Contributed by Sahil Prajapati and Hugo van Kemenade in :gh:`84852`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1579
msgid ""
"Add :rfc:`9559` MIME types for Matroska audiovisual data container "
"structures, containing:"
msgstr ""

#: ../../whatsnew/3.14.rst:1582
msgid "audio with no video: ``audio/matroska`` (``.mka``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1583
msgid "video: ``video/matroska`` (``.mkv``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1584
msgid "stereoscopic video: ``video/matroska-3d`` (``.mk3d``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1586
msgid "(Contributed by Hugo van Kemenade in :gh:`89416`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1588
msgid "Add MIME types for images with RFCs:"
msgstr ""

#: ../../whatsnew/3.14.rst:1590
msgid ":rfc:`1494`: CCITT Group 3 (``.g3``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1591
msgid ":rfc:`3362`: Real-time Facsimile, T.38 (``.t38``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1592
msgid ""
":rfc:`3745`: JPEG 2000 (``.jp2``), extension (``.jpx``) and compound (``."
"jpm``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1593
msgid ":rfc:`3950`: Tag Image File Format Fax eXtended, TIFF-FX (``.tfx``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1594
msgid ":rfc:`4047`: Flexible Image Transport System (``.fits``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1595
msgid ""
":rfc:`7903`: Enhanced Metafile (``.emf``) and Windows Metafile (``.wmf``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1597
msgid "(Contributed by Hugo van Kemenade in :gh:`85957`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1599
msgid "More MIME type changes:"
msgstr ""

#: ../../whatsnew/3.14.rst:1601
msgid ""
":rfc:`2361`: Change type for ``.avi`` to ``video/vnd.avi`` and for ``.wav`` "
"to ``audio/vnd.wave``"
msgstr ""

#: ../../whatsnew/3.14.rst:1603
msgid ":rfc:`4337`: Add MPEG-4 ``audio/mp4`` (``.m4a``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1604
msgid ":rfc:`5334`: Add Ogg media (``.oga``, ``.ogg`` and ``.ogx``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1605
msgid ":rfc:`6713`: Add gzip ``application/gzip`` (``.gz``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1606
msgid ":rfc:`9639`: Add FLAC ``audio/flac`` (``.flac``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1607
msgid "Add 7z ``application/x-7z-compressed`` (``.7z``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1608
msgid ""
"Add Android Package ``application/vnd.android.package-archive`` (``.apk``) "
"when not strict"
msgstr ""

#: ../../whatsnew/3.14.rst:1610
msgid "Add deb ``application/x-debian-package`` (``.deb``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1611
msgid "Add glTF binary ``model/gltf-binary`` (``.glb``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1612
msgid "Add glTF JSON/ASCII ``model/gltf+json`` (``.gltf``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1613
msgid "Add M4V ``video/x-m4v`` (``.m4v``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1614
msgid "Add PHP ``application/x-httpd-php`` (``.php``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1615
msgid "Add RAR ``application/vnd.rar`` (``.rar``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1616
msgid "Add RPM ``application/x-rpm`` (``.rpm``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1617
msgid "Add STL ``model/stl`` (``.stl``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1618
msgid "Add Windows Media Video ``video/x-ms-wmv`` (``.wmv``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1619
msgid "De facto: Add WebM ``audio/webm`` (``.weba``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1620
msgid ""
"`ECMA-376 <https://ecma-international.org/publications-and-standards/"
"standards/ecma-376/>`__: Add ``.docx``, ``.pptx`` and ``.xlsx`` types"
msgstr ""

#: ../../whatsnew/3.14.rst:1623
msgid ""
"`OASIS <https://docs.oasis-open.org/office/v1.2/cs01/OpenDocument-v1.2-cs01-"
"part1.html#Appendix_C>`__: Add OpenDocument ``.odg``, ``.odp``, ``.ods`` and "
"``.odt`` types"
msgstr ""

#: ../../whatsnew/3.14.rst:1626
msgid ""
"`W3C <https://www.w3.org/TR/epub-33/#app-media-type>`__: Add EPUB "
"``application/epub+zip`` (``.epub``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1629
msgid "(Contributed by Hugo van Kemenade in :gh:`129965`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1631
msgid ""
"Add :rfc:`9512` ``application/yaml`` MIME type for YAML files (``.yaml`` and "
"``.yml``). (Contributed by Sasha \"Nelie\" Chernykh and Hugo van Kemenade "
"in :gh:`132056`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1637
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.14.rst:1641
msgid ""
"The default :ref:`start method <multiprocessing-start-methods>` changed "
"from :ref:`fork <multiprocessing-start-method-fork>` to :ref:`forkserver "
"<multiprocessing-start-method-forkserver>` on platforms other than macOS and "
"Windows where it was already :ref:`spawn <multiprocessing-start-method-"
"spawn>`."
msgstr ""

#: ../../whatsnew/3.14.rst:1646
msgid ""
"If the threading incompatible *fork* method is required, you must explicitly "
"request it via a context from :func:`multiprocessing.get_context` "
"(preferred) or change the default via :func:`multiprocessing."
"set_start_method`."
msgstr ""

#: ../../whatsnew/3.14.rst:1657
msgid ""
":mod:`multiprocessing`'s ``\"forkserver\"`` start method now authenticates "
"its control socket to avoid solely relying on filesystem permissions to "
"restrict what other processes could cause the forkserver to spawn workers "
"and run code. (Contributed by Gregory P. Smith for :gh:`97514`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1663
msgid ""
"The :ref:`multiprocessing proxy objects <multiprocessing-proxy_objects>` for "
"*list* and *dict* types gain previously overlooked missing methods:"
msgstr ""

#: ../../whatsnew/3.14.rst:1666
msgid ":meth:`!clear` and :meth:`!copy` for proxies of :class:`list`"
msgstr ""

#: ../../whatsnew/3.14.rst:1667
msgid ""
":meth:`~dict.fromkeys`, ``reversed(d)``, ``d | {}``, ``{} | d``, ``d |= "
"{'b': 2}`` for proxies of :class:`dict`"
msgstr ""

#: ../../whatsnew/3.14.rst:1670
msgid "(Contributed by Roy Hyunjin Han for :gh:`103134`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1672
msgid ""
"Add support for shared :class:`set` objects via :meth:`SyncManager.set() "
"<multiprocessing.managers.SyncManager.set>`. The :func:`set` in :func:"
"`multiprocessing.Manager` method is now available. (Contributed by Mingyu "
"Park in :gh:`129949`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1677
msgid ""
"Add :func:`multiprocessing.Process.interrupt` which terminates the child "
"process by sending :py:const:`~signal.SIGINT`. This enables :keyword:"
"`finally` clauses to print a stack trace for the terminated process. "
"(Contributed by Artem Pulkin in :gh:`131913`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1683
msgid "operator"
msgstr "operador"

#: ../../whatsnew/3.14.rst:1685
msgid ""
"Two new functions :func:`operator.is_none` and :func:`operator.is_not_none` "
"have been added, such that ``operator.is_none(obj)`` is equivalent to ``obj "
"is None`` and ``operator.is_not_none(obj)`` is equivalent to ``obj is not "
"None``. (Contributed by Raymond Hettinger and Nico Mexis in :gh:`115808`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1693
msgid "os"
msgstr "os"

#: ../../whatsnew/3.14.rst:1695
msgid ""
"Add the :func:`os.reload_environ` function to update :data:`os.environ` and :"
"data:`os.environb` with changes to the environment made by :func:`os."
"putenv`, by :func:`os.unsetenv`, or made outside Python in the same process. "
"(Contributed by Victor Stinner in :gh:`120057`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1701
msgid ""
"Add the :data:`~os.SCHED_DEADLINE` and :data:`~os.SCHED_NORMAL` constants to "
"the :mod:`os` module. (Contributed by James Roy in :gh:`127688`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1705
msgid ""
"Add the :func:`os.readinto` function to read into a :ref:`buffer object "
"<bufferobjects>` from a file descriptor. (Contributed by Cody Maloney in :gh:"
"`129205`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1711
msgid "os.path"
msgstr "os.path"

#: ../../whatsnew/3.14.rst:1713
msgid ""
"The *strict* parameter to :func:`os.path.realpath` accepts a new value, :"
"data:`os.path.ALLOW_MISSING`. If used, errors other than :exc:"
"`FileNotFoundError` will be re-raised; the resulting path can be missing but "
"it will be free of symlinks. (Contributed by Petr Viktorin for :cve:"
"`2025-4517`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1721 ../../whatsnew/3.14.rst:2537
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.14.rst:1723
msgid ""
"Add methods to :class:`pathlib.Path` to recursively copy or move files and "
"directories:"
msgstr ""

#: ../../whatsnew/3.14.rst:1726
msgid ""
":meth:`~pathlib.Path.copy` copies a file or directory tree to a destination."
msgstr ""

#: ../../whatsnew/3.14.rst:1727
msgid ":meth:`~pathlib.Path.copy_into` copies *into* a destination directory."
msgstr ""

#: ../../whatsnew/3.14.rst:1728
msgid ""
":meth:`~pathlib.Path.move` moves a file or directory tree to a destination."
msgstr ""

#: ../../whatsnew/3.14.rst:1729
msgid ":meth:`~pathlib.Path.move_into` moves *into* a destination directory."
msgstr ""

#: ../../whatsnew/3.14.rst:1731
msgid "(Contributed by Barney Gale in :gh:`73991`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1733
msgid ""
"Add :attr:`pathlib.Path.info` attribute, which stores an object implementing "
"the :class:`pathlib.types.PathInfo` protocol (also new). The object supports "
"querying the file type and internally caching :func:`~os.stat` results. Path "
"objects generated by :meth:`~pathlib.Path.iterdir` are initialized with file "
"type information gleaned from scanning the parent directory. (Contributed by "
"Barney Gale in :gh:`125413`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1743
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.14.rst:1745
msgid ""
"Hardcoded breakpoints (:func:`breakpoint` and :func:`pdb.set_trace`) now "
"reuse the most recent :class:`~pdb.Pdb` instance that calls :meth:`~pdb.Pdb."
"set_trace`, instead of creating a new one each time. As a result, all the "
"instance specific data like :pdbcmd:`display` and :pdbcmd:`commands` are "
"preserved across hardcoded breakpoints. (Contributed by Tian Gao in :gh:"
"`121450`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1752
msgid ""
"Add a new argument *mode* to :class:`pdb.Pdb`. Disable the ``restart`` "
"command when :mod:`pdb` is in ``inline`` mode. (Contributed by Tian Gao in :"
"gh:`123757`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1756
msgid ""
"A confirmation prompt will be shown when the user tries to quit :mod:`pdb` "
"in ``inline`` mode. ``y``, ``Y``, ``<Enter>`` or ``EOF`` will confirm the "
"quit and call :func:`sys.exit`, instead of raising :exc:`bdb.BdbQuit`. "
"(Contributed by Tian Gao in :gh:`124704`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1761
msgid ""
"Inline breakpoints like :func:`breakpoint` or :func:`pdb.set_trace` will "
"always stop the program at calling frame, ignoring the ``skip`` pattern (if "
"any). (Contributed by Tian Gao in :gh:`130493`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1766
msgid ""
"``<tab>`` at the beginning of the line in :mod:`pdb` multi-line input will "
"fill in a 4-space indentation now, instead of inserting a ``\\t`` character. "
"(Contributed by Tian Gao in :gh:`130471`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1770
msgid ""
"Auto-indent is introduced in :mod:`pdb` multi-line input. It will either "
"keep the indentation of the last line or insert a 4-space indentation when "
"it detects a new code block. (Contributed by Tian Gao in :gh:`133350`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1775
msgid ""
"``$_asynctask`` is added to access the current asyncio task if applicable. "
"(Contributed by Tian Gao in :gh:`124367`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1778
msgid ""
":mod:`pdb` now supports two backends: :func:`sys.settrace` and :mod:`sys."
"monitoring`. Using :mod:`pdb` CLI or :func:`breakpoint` will always use the :"
"mod:`sys.monitoring` backend. Explicitly instantiating :class:`pdb.Pdb` and "
"its derived classes will use the :func:`sys.settrace` backend by default, "
"which is configurable. (Contributed by Tian Gao in :gh:`124533`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1785
msgid ""
":func:`pdb.set_trace_async` is added to support debugging asyncio "
"coroutines. :keyword:`await` statements are supported with this function. "
"(Contributed by Tian Gao in :gh:`132576`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1790
msgid ""
"Source code displayed in :mod:`pdb` will be syntax-highlighted. This feature "
"can be controlled using the same methods as PyREPL, in addition to the newly "
"added ``colorize`` argument of :class:`pdb.Pdb`. (Contributed by Tian Gao "
"and Łukasz Langa in :gh:`133355`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1797
msgid "pickle"
msgstr "pickle"

#: ../../whatsnew/3.14.rst:1799
msgid ""
"Set the default protocol version on the :mod:`pickle` module to 5. For more "
"details, see :ref:`pickle protocols <pickle-protocols>`."
msgstr ""

#: ../../whatsnew/3.14.rst:1802
msgid ""
"Add notes for pickle serialization errors that allow to identify the source "
"of the error. (Contributed by Serhiy Storchaka in :gh:`122213`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1808
msgid "platform"
msgstr "platform"

#: ../../whatsnew/3.14.rst:1810
msgid ""
"Add :func:`platform.invalidate_caches` to invalidate the cached results. "
"(Contributed by Bénédikt Tran in :gh:`122549`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1815
msgid "pydoc"
msgstr "pydoc"

#: ../../whatsnew/3.14.rst:1817
msgid ""
":term:`Annotations <annotation>` in help output are now usually displayed in "
"a format closer to that in the original source. (Contributed by Jelle "
"Zijlstra in :gh:`101552`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1823
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.14.rst:1825
msgid "Improve and fix support for Bluetooth sockets."
msgstr ""

#: ../../whatsnew/3.14.rst:1827
msgid ""
"Fix support of Bluetooth sockets on NetBSD and DragonFly BSD. (Contributed "
"by Serhiy Storchaka in :gh:`132429`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1829
msgid ""
"Fix support for :const:`~socket.BTPROTO_HCI` on FreeBSD. (Contributed by "
"Victor Stinner in :gh:`111178`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1831
msgid ""
"Add support for :const:`~socket.BTPROTO_SCO` on FreeBSD. (Contributed by "
"Serhiy Storchaka in :gh:`85302`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1833
msgid ""
"Add support for *cid* and *bdaddr_type* in the address for :const:`~socket."
"BTPROTO_L2CAP` on FreeBSD. (Contributed by Serhiy Storchaka in :gh:`132429`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1836
msgid ""
"Add support for *channel* in the address for :const:`~socket.BTPROTO_HCI` on "
"Linux. (Contributed by Serhiy Storchaka in :gh:`70145`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1839
msgid ""
"Accept an integer as the address for :const:`~socket.BTPROTO_HCI` on Linux. "
"(Contributed by Serhiy Storchaka in :gh:`132099`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1842
msgid ""
"Return *cid* in :meth:`~socket.socket.getsockname` for :const:`~socket."
"BTPROTO_L2CAP`. (Contributed by Serhiy Storchaka in :gh:`132429`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1845
msgid ""
"Add many new constants. (Contributed by Serhiy Storchaka in :gh:`132734`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1849
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.14.rst:1851
msgid ""
"Indicate through :data:`ssl.HAS_PHA` whether the :mod:`ssl` module supports "
"TLSv1.3 post-handshake client authentication (PHA). (Contributed by Will "
"Childs-Klein in :gh:`128036`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1857
msgid "struct"
msgstr "struct"

#: ../../whatsnew/3.14.rst:1859
msgid ""
"Support the :c:expr:`float complex` and :c:expr:`double complex` C types in "
"the :mod:`struct` module (formatting characters ``'F'`` and ``'D'`` "
"respectively). (Contributed by Sergey B Kirpichev in :gh:`121249`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1866
msgid "symtable"
msgstr ""

#: ../../whatsnew/3.14.rst:1868
msgid "Expose the following :class:`symtable.Symbol` methods:"
msgstr ""

#: ../../whatsnew/3.14.rst:1870
msgid ":meth:`~symtable.Symbol.is_comp_cell`"
msgstr ""

#: ../../whatsnew/3.14.rst:1871
msgid ":meth:`~symtable.Symbol.is_comp_iter`"
msgstr ""

#: ../../whatsnew/3.14.rst:1872
msgid ":meth:`~symtable.Symbol.is_free_class`"
msgstr ""

#: ../../whatsnew/3.14.rst:1874
msgid "(Contributed by Bénédikt Tran in :gh:`120029`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1878
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.14.rst:1880
msgid ""
"The previously undocumented special function :func:`sys.getobjects`, which "
"only exists in specialized builds of Python, may now return objects from "
"other interpreters than the one it's called in."
msgstr ""
"A função especial :func:`sys.getobjects`, anteriormente não documentada, que "
"só existe em construções especializadas do Python, agora pode retornar "
"objetos de outros interpretadores além daquele em que foi chamada."

#: ../../whatsnew/3.14.rst:1884
msgid ""
"Add :func:`sys._is_immortal` for determining if an object is :term:"
"`immortal`. (Contributed by Peter Bierma in :gh:`128509`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1887
msgid ""
"On FreeBSD, :data:`sys.platform` doesn't contain the major version anymore. "
"It is always ``'freebsd'``, instead of ``'freebsd13'`` or ``'freebsd14'``."
msgstr ""

#: ../../whatsnew/3.14.rst:1890
msgid ""
"Raise :exc:`DeprecationWarning` for :func:`sys._clear_type_cache`. This "
"function was deprecated in Python 3.13 but it didn't raise a runtime warning."
msgstr ""

#: ../../whatsnew/3.14.rst:1895
msgid "sys.monitoring"
msgstr ""

#: ../../whatsnew/3.14.rst:1897
msgid ""
"Two new events are added: :monitoring-event:`BRANCH_LEFT` and :monitoring-"
"event:`BRANCH_RIGHT`. The ``BRANCH`` event is deprecated."
msgstr ""

#: ../../whatsnew/3.14.rst:1902
msgid "sysconfig"
msgstr "sysconfig"

#: ../../whatsnew/3.14.rst:1904
msgid ""
"Add ``ABIFLAGS`` key to :func:`sysconfig.get_config_vars` on Windows. "
"(Contributed by Xuehai Pan in :gh:`131799`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1909
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.14.rst:1911
msgid ""
":func:`~tarfile.data_filter` now normalizes symbolic link targets in order "
"to avoid path traversal attacks. (Contributed by Petr Viktorin in :gh:"
"`127987` and :cve:`2025-4138`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1914
msgid ""
":func:`~tarfile.TarFile.extractall` now skips fixing up directory attributes "
"when a directory was removed or replaced by another kind of file. "
"(Contributed by Petr Viktorin in :gh:`127987` and :cve:`2024-12718`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1917
msgid ""
":func:`~tarfile.TarFile.extract` and :func:`~tarfile.TarFile.extractall` now "
"(re-)apply the extraction filter when substituting a link (hard or symbolic) "
"with a copy of another archive member, and when fixing up directory "
"attributes. The former raises a new exception, :exc:`~tarfile."
"LinkFallbackError`. (Contributed by Petr Viktorin for :cve:`2025-4330` and :"
"cve:`2024-12718`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1923
msgid ""
":func:`~tarfile.TarFile.extract` and :func:`~tarfile.TarFile.extractall` no "
"longer extract rejected members when :func:`~tarfile.TarFile.errorlevel` is "
"zero. (Contributed by Matt Prodani and Petr Viktorin in :gh:`112887` and :"
"cve:`2025-4435`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1931
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.14.rst:1933
msgid ""
":meth:`threading.Thread.start` now sets the operating system thread name to :"
"attr:`threading.Thread.name`. (Contributed by Victor Stinner in :gh:`59705`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1939
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.14.rst:1941
msgid ""
"Make :mod:`tkinter` widget methods :meth:`!after` and :meth:`!after_idle` "
"accept arguments passed by keyword. (Contributed by Zhikang Yan in :gh:"
"`126899`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1945
msgid ""
"Add ability to specify name for :class:`!tkinter.OptionMenu` and :class:`!"
"tkinter.ttk.OptionMenu`. (Contributed by Zhikang Yan in :gh:`130482`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1950
msgid "turtle"
msgstr "turtle"

#: ../../whatsnew/3.14.rst:1952
msgid ""
"Add context managers for :func:`turtle.fill`, :func:`turtle.poly` and :func:"
"`turtle.no_animation`. (Contributed by Marie Roald and Yngve Mardal Moe in :"
"gh:`126350`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1958
msgid "types"
msgstr "tipos"

#: ../../whatsnew/3.14.rst:1960
msgid ""
":class:`types.UnionType` is now an alias for :class:`typing.Union`. See :ref:"
"`below <whatsnew314-typing-union>` for more details. (Contributed by Jelle "
"Zijlstra in :gh:`105499`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1966 ../../whatsnew/3.14.rst:2573
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.14.rst:1970
msgid ""
":class:`types.UnionType` and :class:`typing.Union` are now aliases for each "
"other, meaning that both old-style unions (created with ``Union[int, str]``) "
"and new-style unions (``int | str``) now create instances of the same "
"runtime type. This unifies the behavior between the two syntaxes, but leads "
"to some differences in behavior that may affect users who introspect types "
"at runtime:"
msgstr ""

#: ../../whatsnew/3.14.rst:1976
msgid ""
"Both syntaxes for creating a union now produce the same string "
"representation in ``repr()``. For example, ``repr(Union[int, str])`` is now "
"``\"int | str\"`` instead of ``\"typing.Union[int, str]\"``."
msgstr ""

#: ../../whatsnew/3.14.rst:1979
msgid ""
"Unions created using the old syntax are no longer cached. Previously, "
"running ``Union[int, str]`` multiple times would return the same object "
"(``Union[int, str] is Union[int, str]`` would be ``True``), but now it will "
"return two different objects. Users should use ``==`` to compare unions for "
"equality, not ``is``. New-style unions have never been cached this way. This "
"change could increase memory usage for some programs that use a large number "
"of unions created by subscripting ``typing.Union``. However, several factors "
"offset this cost: unions used in annotations are no longer evaluated by "
"default in Python 3.14 because of :pep:`649`; an instance of :class:`types."
"UnionType` is itself much smaller than the object returned by ``Union[]`` "
"was on prior Python versions; and removing the cache also saves some space. "
"It is therefore unlikely that this change will cause a significant increase "
"in memory usage for most users."
msgstr ""

#: ../../whatsnew/3.14.rst:1992
msgid ""
"Previously, old-style unions were implemented using the private class "
"``typing._UnionGenericAlias``. This class is no longer needed for the "
"implementation, but it has been retained for backward compatibility, with "
"removal scheduled for Python 3.17. Users should use documented introspection "
"helpers like :func:`typing.get_origin` and :func:`typing.get_args` instead "
"of relying on private implementation details."
msgstr ""

#: ../../whatsnew/3.14.rst:1997
msgid ""
"It is now possible to use :class:`typing.Union` itself in :func:`isinstance` "
"checks. For example, ``isinstance(int | str, typing.Union)`` will return "
"``True``; previously this raised :exc:`TypeError`."
msgstr ""

#: ../../whatsnew/3.14.rst:2000
msgid ""
"The ``__args__`` attribute of :class:`typing.Union` objects is no longer "
"writable."
msgstr ""

#: ../../whatsnew/3.14.rst:2001
msgid ""
"It is no longer possible to set any attributes on :class:`typing.Union` "
"objects. This only ever worked for dunder attributes on previous versions, "
"was never documented to work, and was subtly broken in many cases."
msgstr ""

#: ../../whatsnew/3.14.rst:2005
msgid "(Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2009
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.14.rst:2011
msgid "The Unicode database has been updated to Unicode 16.0.0."
msgstr ""

#: ../../whatsnew/3.14.rst:2017
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.14.rst:2019
msgid ""
":mod:`unittest` output is now colored by default. This can be controlled by :"
"ref:`environment variables <using-on-controlling-color>`. (Contributed by "
"Hugo van Kemenade in :gh:`127221`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2024
msgid ""
"unittest discovery supports :term:`namespace package` as start directory "
"again. It was removed in Python 3.11. (Contributed by Jacob Walls in :gh:"
"`80958`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2028
msgid ""
"A number of new methods were added in the :class:`~unittest.TestCase` class "
"that provide more specialized tests."
msgstr ""

#: ../../whatsnew/3.14.rst:2031
msgid ""
":meth:`~unittest.TestCase.assertHasAttr` and :meth:`~unittest.TestCase."
"assertNotHasAttr` check whether the object has a particular attribute."
msgstr ""

#: ../../whatsnew/3.14.rst:2034
msgid ""
":meth:`~unittest.TestCase.assertIsSubclass` and :meth:`~unittest.TestCase."
"assertNotIsSubclass` check whether the object is a subclass of a particular "
"class, or of one of a tuple of classes."
msgstr ""

#: ../../whatsnew/3.14.rst:2037
msgid ""
":meth:`~unittest.TestCase.assertStartsWith`, :meth:`~unittest.TestCase."
"assertNotStartsWith`, :meth:`~unittest.TestCase.assertEndsWith` and :meth:"
"`~unittest.TestCase.assertNotEndsWith` check whether the Unicode or byte "
"string starts or ends with particular string(s)."
msgstr ""

#: ../../whatsnew/3.14.rst:2043
msgid "(Contributed by Serhiy Storchaka in :gh:`71339`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2047 ../../whatsnew/3.14.rst:2581
msgid "urllib"
msgstr "urllib"

#: ../../whatsnew/3.14.rst:2049
msgid ""
"Upgrade HTTP digest authentication algorithm for :mod:`urllib.request` by "
"supporting SHA-256 digest authentication as specified in :rfc:`7616`. "
"(Contributed by Calvin Bui in :gh:`128193`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2053
msgid ""
"Improve ergonomics and standards compliance when parsing and emitting ``file:"
"`` URLs."
msgstr ""

#: ../../whatsnew/3.14.rst:2056
msgid "In :func:`urllib.request.url2pathname`:"
msgstr ""

#: ../../whatsnew/3.14.rst:2058
msgid ""
"Accept a complete URL when the new *require_scheme* argument is set to true."
msgstr ""

#: ../../whatsnew/3.14.rst:2060
msgid "Discard URL authority if it matches the local hostname."
msgstr ""

#: ../../whatsnew/3.14.rst:2061
msgid ""
"Discard URL authority if it resolves to a local IP address when the new "
"*resolve_host* argument is set to true."
msgstr ""

#: ../../whatsnew/3.14.rst:2063
msgid ""
"Raise :exc:`~urllib.error.URLError` if a URL authority isn't local, except "
"on Windows where we return a UNC path as before."
msgstr ""

#: ../../whatsnew/3.14.rst:2066
msgid "In :func:`urllib.request.pathname2url`:"
msgstr ""

#: ../../whatsnew/3.14.rst:2068
msgid ""
"Return a complete URL when the new *add_scheme* argument is set to true."
msgstr ""

#: ../../whatsnew/3.14.rst:2069
msgid ""
"Include an empty URL authority when a path begins with a slash. For example, "
"the path ``/etc/hosts`` is converted to the URL ``///etc/hosts``."
msgstr ""

#: ../../whatsnew/3.14.rst:2072
msgid ""
"On Windows, drive letters are no longer converted to uppercase, and ``:`` "
"characters not following a drive letter no longer cause an :exc:`OSError` "
"exception to be raised."
msgstr ""

#: ../../whatsnew/3.14.rst:2076
msgid "(Contributed by Barney Gale in :gh:`125866`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2080 ../../whatsnew/3.14.rst:2176
msgid "uuid"
msgstr "uuid"

#: ../../whatsnew/3.14.rst:2082
msgid ""
"Add support for UUID versions 6, 7, and 8 via :func:`uuid.uuid6`, :func:"
"`uuid.uuid7`, and :func:`uuid.uuid8` respectively, as specified in :rfc:"
"`9562`. (Contributed by Bénédikt Tran in :gh:`89083`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2087
msgid ""
":const:`uuid.NIL` and :const:`uuid.MAX` are now available to represent the "
"Nil and Max UUID formats as defined by :rfc:`9562`. (Contributed by Nick "
"Pope in :gh:`128427`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2091
msgid ""
"Allow to generate multiple UUIDs at once via :option:`python -m uuid --count "
"<uuid --count>`. (Contributed by Simon Legner in :gh:`131236`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2096
msgid "webbrowser"
msgstr "webbrowser"

#: ../../whatsnew/3.14.rst:2098
msgid ""
"Names in the :envvar:`BROWSER` environment variable can now refer to already "
"registered browsers for the :mod:`webbrowser` module, instead of always "
"generating a new browser command."
msgstr ""

#: ../../whatsnew/3.14.rst:2102
msgid ""
"This makes it possible to set :envvar:`BROWSER` to the value of one of the "
"supported browsers on macOS."
msgstr ""
"Isso torna possível definir :envvar:`BROWSER` como o valor de um dos "
"navegadores suportados no macOS."

#: ../../whatsnew/3.14.rst:2107
msgid "zipinfo"
msgstr ""

#: ../../whatsnew/3.14.rst:2109
msgid ""
"Added :func:`ZipInfo._for_archive <zipfile.ZipInfo._for_archive>` to resolve "
"suitable defaults for a :class:`~zipfile.ZipInfo` object as used by :func:"
"`ZipFile.writestr <zipfile.ZipFile.writestr>`. (Contributed by Bénédikt Tran "
"in :gh:`123424`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2114
msgid ""
":meth:`zipfile.ZipFile.writestr` now respect ``SOURCE_DATE_EPOCH`` that "
"distributions can set centrally and have build tools consume this in order "
"to produce reproducible output. (Contributed by Jiahao Li in :gh:`91279`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2123
msgid "Optimizations"
msgstr "Otimizações"

#: ../../whatsnew/3.14.rst:2125
msgid ""
"The import time for several standard library modules has been improved, "
"including :mod:`ast`, :mod:`asyncio`, :mod:`base64`, :mod:`cmd`, :mod:"
"`csv`, :mod:`gettext`, :mod:`importlib.util`, :mod:`locale`, :mod:"
"`mimetypes`, :mod:`optparse`, :mod:`pickle`, :mod:`pprint`, :mod:`pstats`, :"
"mod:`socket`, :mod:`subprocess`, :mod:`threading`, :mod:`tomllib`, and :mod:"
"`zipfile`."
msgstr ""

#: ../../whatsnew/3.14.rst:2131
msgid ""
"(Contributed by Adam Turner, Bénédikt Tran, Chris Markiewicz, Eli Schwartz, "
"Hugo van Kemenade, Jelle Zijlstra, and others in :gh:`118761`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2138
msgid ""
":mod:`asyncio` has a new per-thread double linked list implementation "
"internally for :class:`native tasks <asyncio.Task>` which speeds up "
"execution by 10-20% on standard pyperformance benchmarks and reduces memory "
"usage. This enables external introspection tools such as :ref:`python -m "
"asyncio pstree <whatsnew314-asyncio-introspection>` to introspect the call "
"graph of asyncio tasks running in all threads. (Contributed by Kumar Aditya "
"in :gh:`107803`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2146
msgid ""
":mod:`asyncio` has first class support for :term:`free-threading builds "
"<free threading>`. This enables parallel execution of multiple event loops "
"across different threads and scales linearly with the number of threads. "
"(Contributed by Kumar Aditya in :gh:`128002`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2151
msgid ""
":mod:`asyncio` has new utility functions for introspecting and printing the "
"program's call graph: :func:`asyncio.capture_call_graph` and :func:`asyncio."
"print_call_graph`. (Contributed by Yury Selivanov, Pablo Galindo Salgado, "
"and Łukasz Langa in :gh:`91048`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2158
msgid "base64"
msgstr "base64"

#: ../../whatsnew/3.14.rst:2160
msgid ""
"Improve the performance of :func:`base64.b16decode` by up to ten times, and "
"reduce the import time of :mod:`base64` by up to six times. (Contributed by "
"Bénédikt Tran, Chris Markiewicz, and Adam Turner in :gh:`118761`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2167
msgid ""
":mod:`io` which provides the built-in :func:`open` makes less system calls "
"when opening regular files as well as reading whole files. Reading a small "
"operating system cached file in full is up to 15% faster. :func:`pathlib."
"Path.read_bytes` has the most optimizations for reading a file's bytes in "
"full. (Contributed by Cody Maloney and Victor Stinner in :gh:`120754` and :"
"gh:`90102`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2178
msgid ""
"Improve generation of :class:`~uuid.UUID` objects via their dedicated "
"functions:"
msgstr ""

#: ../../whatsnew/3.14.rst:2181
msgid ""
":func:`~uuid.uuid3` and :func:`~uuid.uuid5` are both roughly 40% faster for "
"16-byte names and 20% faster for 1024-byte names. Performance for longer "
"names remains unchanged."
msgstr ""

#: ../../whatsnew/3.14.rst:2184
msgid ""
":func:`~uuid.uuid4` and :func:`~uuid.uuid8` are 30% and 40% faster "
"respectively."
msgstr ""

#: ../../whatsnew/3.14.rst:2187
msgid "(Contributed by Bénédikt Tran in :gh:`128150`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2191
msgid "zlib"
msgstr "zlib"

#: ../../whatsnew/3.14.rst:2193
msgid ""
"On Windows, ``zlib-ng`` is now used as the implementation of the :mod:`zlib` "
"module. This should produce compatible and comparable results with better "
"performance, though it is worth noting that ``zlib.Z_BEST_SPEED`` (1) may "
"result in significantly less compression than the previous implementation "
"(while also significantly reducing the time taken to compress). (Contributed "
"by Steve Dower in :gh:`91349`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2203 ../../whatsnew/3.14.rst:2902
msgid "Deprecated"
msgstr "Descontinuados"

#: ../../whatsnew/3.14.rst:2205
#: ../../deprecations/pending-removal-in-future.rst:7
msgid ":mod:`argparse`:"
msgstr ":mod:`argparse`:"

#: ../../whatsnew/3.14.rst:2207
msgid ""
"Passing the undocumented keyword argument *prefix_chars* to :meth:`~argparse."
"ArgumentParser.add_argument_group` is now deprecated. (Contributed by "
"Savannah Ostrowski in :gh:`125563`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2211
msgid ""
"Deprecated the :class:`argparse.FileType` type converter. Anything with "
"resource management should be done downstream after the arguments are "
"parsed. (Contributed by Serhiy Storchaka in :gh:`58032`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2216
#: ../../deprecations/pending-removal-in-3.16.rst:19
msgid ":mod:`asyncio`:"
msgstr ":mod:`asyncio`:"

#: ../../whatsnew/3.14.rst:2218
#: ../../deprecations/pending-removal-in-3.16.rst:21
msgid ""
":func:`!asyncio.iscoroutinefunction` is deprecated and will be removed in "
"Python 3.16; use :func:`inspect.iscoroutinefunction` instead. (Contributed "
"by Jiahao Li and Kumar Aditya in :gh:`122875`.)"
msgstr ""
":func:`!asyncio.iscoroutinefunction` foi descontinuado e será removido no "
"Python 3.16, use :func:`inspect.iscoroutinefunction` em vez disso. "
"(Contribuição de Jiahao Li e Kumar Aditya em :gh:`122875`.)"

#: ../../whatsnew/3.14.rst:2223
#: ../../deprecations/pending-removal-in-3.16.rst:26
msgid ""
":mod:`asyncio` policy system is deprecated and will be removed in Python "
"3.16. In particular, the following classes and functions are deprecated:"
msgstr ""
"O sistema de políticas :mod:`asyncio` está descontinuado e será removido no "
"Python 3.16. Em particular, as seguintes classes e funções estão "
"descontinuadas:"

#: ../../whatsnew/3.14.rst:2226
#: ../../deprecations/pending-removal-in-3.16.rst:29
msgid ":class:`asyncio.AbstractEventLoopPolicy`"
msgstr ":class:`asyncio.AbstractEventLoopPolicy`"

#: ../../whatsnew/3.14.rst:2227
#: ../../deprecations/pending-removal-in-3.16.rst:30
msgid ":class:`asyncio.DefaultEventLoopPolicy`"
msgstr ":class:`asyncio.DefaultEventLoopPolicy`"

#: ../../whatsnew/3.14.rst:2228
#: ../../deprecations/pending-removal-in-3.16.rst:31
msgid ":class:`asyncio.WindowsSelectorEventLoopPolicy`"
msgstr ":class:`asyncio.WindowsSelectorEventLoopPolicy`"

#: ../../whatsnew/3.14.rst:2229
#: ../../deprecations/pending-removal-in-3.16.rst:32
msgid ":class:`asyncio.WindowsProactorEventLoopPolicy`"
msgstr ":class:`asyncio.WindowsProactorEventLoopPolicy`"

#: ../../whatsnew/3.14.rst:2230
#: ../../deprecations/pending-removal-in-3.16.rst:33
msgid ":func:`asyncio.get_event_loop_policy`"
msgstr ":func:`asyncio.get_event_loop_policy`"

#: ../../whatsnew/3.14.rst:2231
#: ../../deprecations/pending-removal-in-3.16.rst:34
msgid ":func:`asyncio.set_event_loop_policy`"
msgstr ":func:`asyncio.set_event_loop_policy`"

#: ../../whatsnew/3.14.rst:2233
#: ../../deprecations/pending-removal-in-3.16.rst:36
msgid ""
"Users should use :func:`asyncio.run` or :class:`asyncio.Runner` with "
"*loop_factory* to use the desired event loop implementation."
msgstr ""
"Os usuários devem usar :func:`asyncio.run` ou :class:`asyncio.Runner` com "
"*loop_factory* para usar a implementação de loop de eventos desejada."

#: ../../whatsnew/3.14.rst:2236
#: ../../deprecations/pending-removal-in-3.16.rst:39
msgid "For example, to use :class:`asyncio.SelectorEventLoop` on Windows::"
msgstr "por exemplo, para usar :class:`asyncio.SelectorEventLoop` no Windows::"

#: ../../whatsnew/3.14.rst:2238
#: ../../deprecations/pending-removal-in-3.16.rst:41
msgid ""
"import asyncio\n"
"\n"
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)"
msgstr ""
"import asyncio\n"
"\n"
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)"

#: ../../whatsnew/3.14.rst:2245
#: ../../deprecations/pending-removal-in-3.16.rst:48
msgid "(Contributed by Kumar Aditya in :gh:`127949`.)"
msgstr "(Contribuição de Kumar Aditya em :gh:`127949`.)"

#: ../../whatsnew/3.14.rst:2247
msgid ""
":mod:`builtins`: Passing a complex number as the *real* or *imag* argument "
"in the :func:`complex` constructor is now deprecated; it should only be "
"passed as a single positional argument. (Contributed by Serhiy Storchaka in :"
"gh:`109218`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2253
msgid ""
":mod:`codecs`: :func:`codecs.open` is now deprecated. Use :func:`open` "
"instead. (Contributed by Inada Naoki in :gh:`133036`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2257
#: ../../deprecations/pending-removal-in-3.15.rst:16
#: ../../deprecations/pending-removal-in-3.19.rst:4
msgid ":mod:`ctypes`:"
msgstr ":mod:`ctypes`:"

#: ../../whatsnew/3.14.rst:2259
msgid ""
"On non-Windows platforms, setting :attr:`.Structure._pack_` to use a MSVC-"
"compatible default memory layout is deprecated in favor of setting :attr:`."
"Structure._layout_` to ``'ms'``. (Contributed by Petr Viktorin in :gh:"
"`131747`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2264
msgid ""
"Calling :func:`ctypes.POINTER` on a string is deprecated. Use :ref:`ctypes-"
"incomplete-types` for self-referential structures. Also, the internal "
"``ctypes._pointer_type_cache`` is deprecated. See :func:`ctypes.POINTER` for "
"updated implementation details. (Contributed by Sergey Myrianov in :gh:"
"`100926`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2270
msgid ""
":mod:`functools`: Calling the Python implementation of :func:`functools."
"reduce` with *function* or *sequence* as keyword arguments is now "
"deprecated. (Contributed by Kirill Podoprigora in :gh:`121676`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2275
msgid ""
":mod:`logging`: Support for custom logging handlers with the *strm* argument "
"is deprecated and scheduled for removal in Python 3.16. Define handlers with "
"the *stream* argument instead. (Contributed by Mariusz Felisiak in :gh:"
"`115032`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2280
msgid ""
":mod:`mimetypes`: Valid extensions start with a '.' or are empty for :meth:"
"`mimetypes.MimeTypes.add_type`. Undotted extensions are deprecated and will "
"raise a :exc:`ValueError` in Python 3.16. (Contributed by Hugo van Kemenade "
"in :gh:`75223`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2287
msgid ""
":mod:`!nturl2path`: This module is now deprecated. Call :func:`urllib."
"request.url2pathname` and :func:`~urllib.request.pathname2url` instead. "
"(Contributed by Barney Gale in :gh:`125866`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2292
msgid ""
":mod:`os`: :term:`Soft deprecate <soft deprecated>` :func:`os.popen` and :"
"func:`os.spawn* <os.spawnl>` functions. They should no longer be used to "
"write new code.  The :mod:`subprocess` module is recommended instead. "
"(Contributed by Victor Stinner in :gh:`120743`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2298
msgid ""
":mod:`pathlib`: :meth:`!pathlib.PurePath.as_uri` is deprecated and will be "
"removed in Python 3.19. Use :meth:`pathlib.Path.as_uri` instead. "
"(Contributed by Barney Gale in :gh:`123599`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2303
msgid ""
":mod:`pdb`: The undocumented ``pdb.Pdb.curframe_locals`` attribute is now a "
"deprecated read-only property. The low overhead dynamic frame locals access "
"added in Python 3.13 by PEP 667 means the frame locals cache reference "
"previously stored in this attribute is no longer needed. Derived debuggers "
"should access ``pdb.Pdb.curframe.f_locals`` directly in Python 3.13 and "
"later versions. (Contributed by Tian Gao in :gh:`124369` and :gh:`125951`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2311
msgid ""
":mod:`symtable`: Deprecate :meth:`symtable.Class.get_methods` due to the "
"lack of interest. (Contributed by Bénédikt Tran in :gh:`119698`.)"
msgstr ""
":mod:`symtable`: Descontinua :meth:`symtable.Class.get_methods` por falta de "
"interesse. (Contribuição de Bénédikt Tran em :gh:`119698`.)"

#: ../../whatsnew/3.14.rst:2315
msgid ""
":mod:`tkinter`: The :class:`!tkinter.Variable` methods :meth:`!"
"trace_variable`, :meth:`!trace_vdelete` and :meth:`!trace_vinfo` are now "
"deprecated. Use :meth:`!trace_add`, :meth:`!trace_remove` and :meth:`!"
"trace_info` instead. (Contributed by Serhiy Storchaka in :gh:`120220`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2322
msgid ""
":mod:`urllib.parse`: Accepting objects with false values (like ``0`` and "
"``[]``) except empty strings, byte-like objects and ``None`` in :mod:`urllib."
"parse` functions :func:`~urllib.parse.parse_qsl` and :func:`~urllib.parse."
"parse_qs` is now deprecated. (Contributed by Serhiy Storchaka in :gh:"
"`116897`.)"
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:2
#: ../../deprecations/pending-removal-in-3.15.rst:2
msgid "Pending removal in Python 3.15"
msgstr "Remoção pendente no Python 3.15"

#: ../../deprecations/pending-removal-in-3.15.rst:4
#: ../../deprecations/pending-removal-in-3.16.rst:4
msgid "The import system:"
msgstr "O sistema de importação:"

#: ../../deprecations/pending-removal-in-3.15.rst:6
msgid ""
"Setting :attr:`~module.__cached__` on a module while failing to set :attr:"
"`__spec__.cached <importlib.machinery.ModuleSpec.cached>` is deprecated. In "
"Python 3.15, :attr:`!__cached__` will cease to be set or take into "
"consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""
"A definição de :attr:`~module.__cached__` em um módulo enquanto falha na "
"definição de :attr:`__spec__.cached <importlib.machinery.ModuleSpec.cached>` "
"está descontinuado. No Python 3.15, :attr:`!__cached__` deixará de ser "
"definido ou levado em consideração pelo sistema de importação ou pela "
"biblioteca padrão. (:gh:`97879`)"

#: ../../deprecations/pending-removal-in-3.15.rst:11
msgid ""
"Setting :attr:`~module.__package__` on a module while failing to set :attr:"
"`__spec__.parent <importlib.machinery.ModuleSpec.parent>` is deprecated. In "
"Python 3.15, :attr:`!__package__` will cease to be set or take into "
"consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""
"A definição de :attr:`~module.__package__` em um módulo enquanto falha na "
"definição de :attr:`__spec__.parent <importlib.machinery.ModuleSpec.parent>` "
"está descontinuado. No Python 3.15, :attr:`!__package__` deixará de ser "
"definido ou levado em consideração pelo sistema de importação ou pela "
"biblioteca padrão. (:gh:`97879`)"

#: ../../deprecations/pending-removal-in-3.15.rst:18
msgid ""
"The undocumented :func:`!ctypes.SetPointerType` function has been deprecated "
"since Python 3.13."
msgstr ""
"A função não documentada :func:`!ctypes.SetPointerType` foi descontinuada "
"desde o Python 3.13."

#: ../../deprecations/pending-removal-in-3.15.rst:21
msgid ":mod:`http.server`:"
msgstr ":mod:`http.server`:"

#: ../../deprecations/pending-removal-in-3.15.rst:23
msgid ""
"The obsolete and rarely used :class:`~http.server.CGIHTTPRequestHandler` has "
"been deprecated since Python 3.13. No direct replacement exists. *Anything* "
"is better than CGI to interface a web server with a request handler."
msgstr ""
"A classe obsoleta e raramente usada :class:`~http.server."
"CGIHTTPRequestHandler` foi descontinuada desde o Python 3.13. Não existe "
"substituição direta. *Qualquer coisa* é melhor que CGI para fazer a "
"interface de um servidor web com um manipulador de requisição."

#: ../../deprecations/pending-removal-in-3.15.rst:29
msgid ""
"The :option:`!--cgi` flag to the :program:`python -m http.server` command-"
"line interface has been deprecated since Python 3.13."
msgstr ""
"O sinalizador :option:`!--cgi` para a interface de linha de comando :program:"
"`python -m http.server` foi descontinuado desde o Python 3.13."

#: ../../deprecations/pending-removal-in-3.15.rst:32
#: ../../deprecations/pending-removal-in-future.rst:64
msgid ":mod:`importlib`:"
msgstr ":mod:`importlib`:"

#: ../../deprecations/pending-removal-in-3.15.rst:34
msgid "``load_module()`` method: use ``exec_module()`` instead."
msgstr "Método ``load_module()``: use ``exec_module()``."

#: ../../deprecations/pending-removal-in-3.15.rst:36
msgid ":class:`locale`:"
msgstr ":class:`locale`:"

#: ../../deprecations/pending-removal-in-3.15.rst:38
msgid ""
"The :func:`~locale.getdefaultlocale` function has been deprecated since "
"Python 3.11. Its removal was originally planned for Python 3.13 (:gh:"
"`90817`), but has been postponed to Python 3.15. Use :func:`~locale."
"getlocale`, :func:`~locale.setlocale`, and :func:`~locale.getencoding` "
"instead. (Contributed by Hugo van Kemenade in :gh:`111187`.)"
msgstr ""
"A função :func:`~locale.getdefaultlocale` foi descontinuada desde o Python "
"3.11. Sua remoção foi planejada originalmente para o Python 3.13 (:gh:"
"`90817`), mas foi adiada para o Python 3.15. Em vez disso, use :func:"
"`~locale.getlocale`, :func:`~locale.setlocale` e :func:`~locale."
"getencoding`. (Contribuição de Hugo van Kemenade em :gh:`111187`.)"

#: ../../deprecations/pending-removal-in-3.15.rst:46
msgid ":mod:`pathlib`:"
msgstr ":mod:`pathlib`:"

#: ../../deprecations/pending-removal-in-3.15.rst:48
msgid ""
":meth:`.PurePath.is_reserved` has been deprecated since Python 3.13. Use :"
"func:`os.path.isreserved` to detect reserved paths on Windows."
msgstr ""
":meth:`.PurePath.is_reserved` foi descontinuado desde o Python 3.13. Use :"
"func:`os.path.isreserved` para detectar caminhos reservados no Windows."

#: ../../deprecations/pending-removal-in-3.15.rst:52
msgid ":mod:`platform`:"
msgstr ":mod:`platform`:"

#: ../../deprecations/pending-removal-in-3.15.rst:54
msgid ""
":func:`~platform.java_ver` has been deprecated since Python 3.13. This "
"function is only useful for Jython support, has a confusing API, and is "
"largely untested."
msgstr ""
":func:`~platform.java_ver` foi descontinuada desde o Python 3.13. Esta "
"função é útil apenas para suporte Jython, tem uma API confusa e é amplamente "
"não testada."

#: ../../deprecations/pending-removal-in-3.15.rst:58
#: ../../deprecations/pending-removal-in-3.16.rst:96
msgid ":mod:`sysconfig`:"
msgstr ":mod:`sysconfig`:"

#: ../../deprecations/pending-removal-in-3.15.rst:60
msgid ""
"The *check_home* argument of :func:`sysconfig.is_python_build` has been "
"deprecated since Python 3.12."
msgstr ""
"O argumento *check_home* de :func:`sysconfig.is_python_build` foi "
"descontinuado desde o Python 3.12."

#: ../../deprecations/pending-removal-in-3.15.rst:63
msgid ":mod:`threading`:"
msgstr ":mod:`threading`:"

#: ../../deprecations/pending-removal-in-3.15.rst:65
msgid ""
":func:`~threading.RLock` will take no arguments in Python 3.15. Passing any "
"arguments has been deprecated since Python 3.14, as the  Python version does "
"not permit any arguments, but the C version allows any number of positional "
"or keyword arguments, ignoring every argument."
msgstr ""
":func:`~threading.RLock` não aceitará argumentos no Python 3.15. A passagem "
"quaisquer argumentos foi descontinuada desde o Python 3.14, pois a versão "
"Python não permite nenhum argumento, mas a versão C permite qualquer número "
"de argumentos posicionais ou nomeados, ignorando todos os argumentos."

#: ../../deprecations/pending-removal-in-3.15.rst:71
msgid ":mod:`types`:"
msgstr ":mod:`types`:"

#: ../../deprecations/pending-removal-in-3.15.rst:73
msgid ""
":class:`types.CodeType`: Accessing :attr:`~codeobject.co_lnotab` was "
"deprecated in :pep:`626` since 3.10 and was planned to be removed in 3.12, "
"but it only got a proper :exc:`DeprecationWarning` in 3.12. May be removed "
"in 3.15. (Contributed by Nikita Sobolev in :gh:`101866`.)"
msgstr ""
":class:`types.CodeType`: o acesso a :attr:`~codeobject.co_lnotab` foi "
"descontinuado na :pep:`626` desde 3.10 e foi planejado para ser removido em "
"3.12, mas só recebeu uma :exc:`DeprecationWarning` adequada em 3.12. Pode "
"ser removido em 3.15. (Contribuição de Nikita Sobolev em :gh:`101866`.)"

#: ../../deprecations/pending-removal-in-3.15.rst:80
#: ../../deprecations/pending-removal-in-3.17.rst:4
msgid ":mod:`typing`:"
msgstr ":mod:`typing`:"

#: ../../deprecations/pending-removal-in-3.15.rst:82
msgid ""
"The undocumented keyword argument syntax for creating :class:`~typing."
"NamedTuple` classes (for example, ``Point = NamedTuple(\"Point\", x=int, "
"y=int)``) has been deprecated since Python 3.13. Use the class-based syntax "
"or the functional syntax instead."
msgstr ""
"A não-documentada sintaxe de argumento nomeado para criar classes :class:"
"`~typing.NamedTuple` (por exemplo, ``Point = NamedTuple(\"Point\", x=int, "
"y=int)``) foi descontinuada desde o Python 3.13. Em vez disso, use as "
"sintaxes baseada em classe ou funcional."

#: ../../deprecations/pending-removal-in-3.15.rst:88
msgid ""
"When using the functional syntax of :class:`~typing.TypedDict`\\s, failing "
"to pass a value to the *fields* parameter (``TD = TypedDict(\"TD\")``) or "
"passing ``None`` (``TD = TypedDict(\"TD\", None)``) has been deprecated "
"since Python 3.13. Use ``class TD(TypedDict): pass`` or ``TD = "
"TypedDict(\"TD\", {})`` to create a TypedDict with zero field."
msgstr ""
"Ao usar a sintaxe funcional de :class:`~typing.TypedDict`\\s, não passar um "
"valor para o parâmetro *fields* (``TD = TypedDict(\"TD\")``) ou passar "
"``None`` (``TD = TypedDict(\"TD\", None)``) foi está descontinuado desde o "
"Python 3.13. Use ``class TD(TypedDict): pass`` ou ``TD = TypedDict(\"TD\", "
"{})`` para criar uma classe TypedDict com nenhum campo."

#: ../../deprecations/pending-removal-in-3.15.rst:95
msgid ""
"The :func:`typing.no_type_check_decorator` decorator function has been "
"deprecated since Python 3.13. After eight years in the :mod:`typing` module, "
"it has yet to be supported by any major type checker."
msgstr ""
"A função decoradora :func:`typing.no_type_check_decorator` foi descontinuada "
"desde o Python 3.13. Após oito anos no módulo :mod:`typing`, ela ainda não "
"foi suportada por nenhum verificador de tipo importante."

#: ../../deprecations/pending-removal-in-3.15.rst:100
msgid ":mod:`wave`:"
msgstr ":mod:`wave`:"

#: ../../deprecations/pending-removal-in-3.15.rst:102
msgid ""
"The :meth:`~wave.Wave_read.getmark`, :meth:`!setmark`, and :meth:`~wave."
"Wave_read.getmarkers` methods of the :class:`~wave.Wave_read` and :class:"
"`~wave.Wave_write` classes have been deprecated since Python 3.13."
msgstr ""
"Os métodos :meth:`~wave.Wave_read.getmark`, :meth:`!setmark` e :meth:`~wave."
"Wave_read.getmarkers` das classes :class:`~wave.Wave_read` e :class:`~wave."
"Wave_write` foram descontinuados desde o Python 3.13."

#: ../../deprecations/pending-removal-in-3.15.rst:107
msgid ":mod:`zipimport`:"
msgstr ":mod:`zipimport`:"

#: ../../deprecations/pending-removal-in-3.15.rst:109
msgid ""
":meth:`~zipimport.zipimporter.load_module` has been deprecated since Python "
"3.10. Use :meth:`~zipimport.zipimporter.exec_module` instead. (Contributed "
"by Jiahao Li in :gh:`125746`.)"
msgstr ""
":meth:`~zipimport.zipimporter.load_module` está descontinuado desde o Python "
"3.10. Em vez disso, use :meth:`~zipimport.zipimporter.exec_module`. "
"(Contribuição de Jiahao Li em :gh:`125746`.)"

#: ../../deprecations/pending-removal-in-3.16.rst:2
msgid "Pending removal in Python 3.16"
msgstr "Remoção pendente no Python 3.16"

#: ../../deprecations/pending-removal-in-3.16.rst:6
msgid ""
"Setting :attr:`~module.__loader__` on a module while failing to set :attr:"
"`__spec__.loader <importlib.machinery.ModuleSpec.loader>` is deprecated. In "
"Python 3.16, :attr:`!__loader__` will cease to be set or taken into "
"consideration by the import system or the standard library."
msgstr ""
"A definição de :attr:`~module.__loader__` em um módulo enquanto falha na "
"definição de :attr:`__spec__.loader <importlib.machinery.ModuleSpec.loader>` "
"está descontinuado. No Python 3.16, :attr:`!__loader__` deixará de ser "
"definido ou levado em consideração pelo sistema de importação ou pela "
"biblioteca padrão."

#: ../../deprecations/pending-removal-in-3.16.rst:11
msgid ":mod:`array`:"
msgstr ":mod:`array`:"

#: ../../deprecations/pending-removal-in-3.16.rst:13
msgid ""
"The ``'u'`` format code (:c:type:`wchar_t`) has been deprecated in "
"documentation since Python 3.3 and at runtime since Python 3.13. Use the "
"``'w'`` format code (:c:type:`Py_UCS4`) for Unicode characters instead."
msgstr ""
"O código de formato ``'u'`` (:c:type:`wchar_t`) foi descontinuado na "
"documentação desde o Python 3.3 e do ambiente de execução desde o Python "
"3.13. Em vez disso, use o código de formato ``'w'`` (:c:type:`Py_UCS4`) para "
"caracteres Unicode."

#: ../../deprecations/pending-removal-in-3.16.rst:50
#: ../../deprecations/pending-removal-in-future.rst:16
msgid ":mod:`builtins`:"
msgstr ":mod:`builtins`:"

#: ../../deprecations/pending-removal-in-3.16.rst:52
msgid ""
"Bitwise inversion on boolean types, ``~True`` or ``~False`` has been "
"deprecated since Python 3.12, as it produces surprising and unintuitive "
"results (``-2`` and ``-1``). Use ``not x`` instead for the logical negation "
"of a Boolean. In the rare case that you need the bitwise inversion of the "
"underlying integer, convert to ``int`` explicitly (``~int(x)``)."
msgstr ""
"A inversão bit a bit em tipos booleanos, ``~True`` ou ``~False`` foi "
"descontinuada desde o Python 3.12, pois produz resultados surpreendentes e "
"não intuitivos (``-2`` e ``-1``). Em vez disso, use ``not x`` para a negação "
"lógica de um booleano. No caso raro de você precisar da inversão bit a bit "
"do inteiro subjacente, converta para ``int`` explicitamente (``~int(x)``)."

#: ../../deprecations/pending-removal-in-3.16.rst:59
msgid ":mod:`functools`:"
msgstr ":mod:`functools`:"

#: ../../deprecations/pending-removal-in-3.16.rst:61
msgid ""
"Calling the Python implementation of :func:`functools.reduce` with "
"*function* or *sequence* as keyword arguments has been deprecated since "
"Python 3.14."
msgstr ""
"A chamada da implementação Python de :func:`functools.reduce` com *function* "
"ou *sequence* como argumentos nomeados foi descontinuada desde o Python 3.14."

#: ../../deprecations/pending-removal-in-3.16.rst:64
msgid ":mod:`logging`:"
msgstr ":mod:`logging`:"

#: ../../deprecations/pending-removal-in-3.16.rst:66
msgid ""
"Support for custom logging handlers with the *strm* argument is deprecated "
"and scheduled for removal in Python 3.16. Define handlers with the *stream* "
"argument instead. (Contributed by Mariusz Felisiak in :gh:`115032`.)"
msgstr ""
"O suporte para manipuladores de registro personalizados com o argumento "
"*strm* foi descontinuado e está programado para ser removido no Python 3.16. "
"Em vez disso, defina manipuladores com o argumento *stream*. (Contribuição "
"de Mariusz Felisiak em :gh:`115032`.)"

#: ../../deprecations/pending-removal-in-3.16.rst:70
msgid ":mod:`mimetypes`:"
msgstr ":mod:`mimetypes`:"

#: ../../deprecations/pending-removal-in-3.16.rst:72
msgid ""
"Valid extensions start with a '.' or are empty for :meth:`mimetypes."
"MimeTypes.add_type`. Undotted extensions are deprecated and will raise a :"
"exc:`ValueError` in Python 3.16. (Contributed by Hugo van Kemenade in :gh:"
"`75223`.)"
msgstr ""
"Extensões válidas começam com um '.' ou estão vazias para :meth:`mimetypes."
"MimeTypes.add_type`. Extensões sem ponto estão descontinuadas e levantarão "
"uma exceção :exc:`ValueError` no Python 3.16. (Contribuição de Hugo van "
"Kemenade em :gh:`75223`.)"

#: ../../deprecations/pending-removal-in-3.16.rst:78
msgid ":mod:`shutil`:"
msgstr ":mod:`shutil`:"

#: ../../deprecations/pending-removal-in-3.16.rst:80
msgid ""
"The :class:`!ExecError` exception has been deprecated since Python 3.14. It "
"has not been used by any function in :mod:`!shutil` since Python 3.4, and is "
"now an alias of :exc:`RuntimeError`."
msgstr ""
"A exceção :class:`!ExecError` foi descontinuada desde o Python 3.14. Ela não "
"foi usada por nenhuma função em :mod:`!shutil` desde o Python 3.4, e agora é "
"um alias de :exc:`RuntimeError`."

#: ../../deprecations/pending-removal-in-3.16.rst:85
msgid ":mod:`symtable`:"
msgstr ":mod:`symtable`:"

#: ../../deprecations/pending-removal-in-3.16.rst:87
msgid ""
"The :meth:`Class.get_methods <symtable.Class.get_methods>` method has been "
"deprecated since Python 3.14."
msgstr ""
"O método :meth:`Class.get_methods <symtable.Class.get_methods>` foi "
"descontinuado desde o Python 3.14."

#: ../../deprecations/pending-removal-in-3.16.rst:90
msgid ":mod:`sys`:"
msgstr ":mod:`sys`:"

#: ../../deprecations/pending-removal-in-3.16.rst:92
msgid ""
"The :func:`~sys._enablelegacywindowsfsencoding` function has been deprecated "
"since Python 3.13. Use the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable instead."
msgstr ""
"A função :func:`~sys._enablelegacywindowsfsencoding` foi descontinuada desde "
"o Python 3.13. Em vez disso, use a variável de ambiente :envvar:"
"`PYTHONLEGACYWINDOWSFSENCODING`."

#: ../../deprecations/pending-removal-in-3.16.rst:98
msgid ""
"The :func:`!sysconfig.expand_makefile_vars` function has been deprecated "
"since Python 3.14. Use the ``vars`` argument of :func:`sysconfig.get_paths` "
"instead."
msgstr ""
"A função :func:`!sysconfig.expand_makefile_vars` está descontinuada desde o "
"Python 3.14. Em vez disso, use o argumento ``vars`` de :func:`sysconfig."
"get_paths`."

#: ../../deprecations/pending-removal-in-3.16.rst:102
msgid ":mod:`tarfile`:"
msgstr ":mod:`tarfile`:"

#: ../../deprecations/pending-removal-in-3.16.rst:104
msgid ""
"The undocumented and unused :attr:`!TarFile.tarfile` attribute has been "
"deprecated since Python 3.13."
msgstr ""
"O atributo não documentado e não utilizado :attr:`!TarFile.tarfile` foi "
"descontinuado desde o Python 3.13."

#: ../../deprecations/pending-removal-in-3.17.rst:2
msgid "Pending removal in Python 3.17"
msgstr "Remoção pendente no Python 3.17"

#: ../../deprecations/pending-removal-in-3.17.rst:6
msgid ""
"Before Python 3.14, old-style unions were implemented using the private "
"class ``typing._UnionGenericAlias``. This class is no longer needed for the "
"implementation, but it has been retained for backward compatibility, with "
"removal scheduled for Python 3.17. Users should use documented introspection "
"helpers like :func:`typing.get_origin` and :func:`typing.get_args` instead "
"of relying on private implementation details."
msgstr ""
"Antes do Python 3.14, as uniões antigas eram implementadas usando a classe "
"privada ``typing._UnionGenericAlias``. Essa classe não é mais necessária "
"para a implementação, mas foi mantida para compatibilidade com versões "
"anteriores, com remoção prevista para o Python 3.17. Os usuários devem usar "
"auxiliares de introspecção documentados, como :func:`typing.get_origin` e :"
"func:`typing.get_args`, em vez de depender de detalhes de implementação "
"privada."

#: ../../deprecations/pending-removal-in-3.19.rst:2
msgid "Pending removal in Python 3.19"
msgstr "Remoção pendente no Python 3.19"

#: ../../deprecations/pending-removal-in-3.19.rst:6
msgid ""
"Implicitly switching to the MSVC-compatible struct layout by setting :attr:"
"`~ctypes.Structure._pack_` but not :attr:`~ctypes.Structure._layout_` on non-"
"Windows platforms."
msgstr ""
"Troca implícita para o layout de estrutura compatível com MSVC definindo :"
"attr:`~ctypes.Structure._pack_`, mas não :attr:`~ctypes.Structure._layout_` "
"em plataformas não Windows."

#: ../../deprecations/c-api-pending-removal-in-future.rst:2
#: ../../deprecations/pending-removal-in-future.rst:2
msgid "Pending removal in future versions"
msgstr "Remoção pendente em versões futuras"

#: ../../deprecations/pending-removal-in-future.rst:4
msgid ""
"The following APIs will be removed in the future, although there is "
"currently no date scheduled for their removal."
msgstr ""
"As APIs a seguir serão removidas no futuro, embora atualmente não haja uma "
"data agendada para sua remoção."

#: ../../deprecations/pending-removal-in-future.rst:9
msgid ""
"Nesting argument groups and nesting mutually exclusive groups are deprecated."
msgstr ""
"O aninhamento de grupos de argumentos e o aninhamento de grupos mutuamente "
"exclusivos estão descontinuado."

#: ../../deprecations/pending-removal-in-future.rst:11
msgid ""
"Passing the undocumented keyword argument *prefix_chars* to :meth:`~argparse."
"ArgumentParser.add_argument_group` is now deprecated."
msgstr ""
"A passagem do argumento nomeado não documentado *prefix_chars* para :meth:"
"`~argparse.ArgumentParser.add_argument_group` agora está descontinuado."

#: ../../deprecations/pending-removal-in-future.rst:14
msgid "The :class:`argparse.FileType` type converter is deprecated."
msgstr "O conversor de tipo :class:`argparse.FileType` está descontinuado."

#: ../../deprecations/pending-removal-in-future.rst:18
msgid "``bool(NotImplemented)``."
msgstr "``bool(NotImplemented)``."

#: ../../deprecations/pending-removal-in-future.rst:19
msgid ""
"Generators: ``throw(type, exc, tb)`` and ``athrow(type, exc, tb)`` signature "
"is deprecated: use ``throw(exc)`` and ``athrow(exc)`` instead, the single "
"argument signature."
msgstr ""
"Geradores: a assinatura ``throw(type, exc, tb)`` e ``athrow(type, exc, tb)`` "
"está descontinuada: use ``throw(exc)`` e ``athrow(exc)``, a assinatura do "
"argumento único."

#: ../../deprecations/pending-removal-in-future.rst:22
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  A syntax warning is raised "
"if the numeric literal is immediately followed by one of keywords :keyword:"
"`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:`in`, :"
"keyword:`is` and :keyword:`or`.  In a future release it will be changed to a "
"syntax error. (:gh:`87999`)"
msgstr ""
"Atualmente Python aceita literais numéricos imediatamente seguidos por "
"palavras reservadas como, por exemplo, ``0in x``, ``1or x``, ``0if 1else "
"2``. Ele permite expressões confusas e ambíguas como ``[0x1for x in y]`` "
"(que pode ser interpretada como ``[0x1 for x in y]`` ou ``[0x1f or x in "
"y]``). Um aviso de sintaxe é levantado se o literal numérico for "
"imediatamente seguido por uma das palavras reservadas :keyword:`and`, :"
"keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:`in` , :keyword:`is` "
"e :keyword:`or`. Em uma versão futura, será alterado para um erro de "
"sintaxe. (:gh:`87999`)"

#: ../../deprecations/pending-removal-in-future.rst:30
msgid ""
"Support for ``__index__()`` and ``__int__()`` method returning non-int type: "
"these methods will be required to return an instance of a strict subclass "
"of :class:`int`."
msgstr ""
"Suporte para métodos ``__index__()`` e ``__int__()`` retornando tipo não-"
"int: esses métodos serão necessários para retornar uma instância de uma "
"subclasse estrita de :class:`int`."

#: ../../deprecations/pending-removal-in-future.rst:33
msgid ""
"Support for ``__float__()`` method returning a strict subclass of :class:"
"`float`: these methods will be required to return an instance of :class:"
"`float`."
msgstr ""
"Suporte para o método ``__float__()`` retornando uma subclasse estrita de :"
"class:`float`: esses métodos serão necessários para retornar uma instância "
"de :class:`float`."

#: ../../deprecations/pending-removal-in-future.rst:36
msgid ""
"Support for ``__complex__()`` method returning a strict subclass of :class:"
"`complex`: these methods will be required to return an instance of :class:"
"`complex`."
msgstr ""
"Suporte para o método ``__complex__()`` retornando uma subclasse estrita de :"
"class:`complex`: esses métodos serão necessários para retornar uma instância "
"de :class:`complex`."

#: ../../deprecations/pending-removal-in-future.rst:39
msgid "Delegation of ``int()`` to ``__trunc__()`` method."
msgstr "Delegação do método ``int()`` para o ``__trunc__()``."

#: ../../deprecations/pending-removal-in-future.rst:40
msgid ""
"Passing a complex number as the *real* or *imag* argument in the :func:"
"`complex` constructor is now deprecated; it should only be passed as a "
"single positional argument. (Contributed by Serhiy Storchaka in :gh:"
"`109218`.)"
msgstr ""
"Passar um número complexo como argumento *real* ou *imag* no construtor :"
"func:`complex` agora está descontinuado; deve ser passado apenas como um "
"único argumento posicional. (Contribuição de Serhiy Storchaka em :gh:"
"`109218`.)"

#: ../../deprecations/pending-removal-in-future.rst:45
msgid ""
":mod:`calendar`: ``calendar.January`` and ``calendar.February`` constants "
"are deprecated and replaced by :data:`calendar.JANUARY` and :data:`calendar."
"FEBRUARY`. (Contributed by Prince Roshan in :gh:`103636`.)"
msgstr ""
":mod:`calendar`: as constantes ``calendar.January`` e ``calendar.February`` "
"foram descontinuadas e substituídas por :data:`calendar.JANUARY` e :data:"
"`calendar.FEBRUARY`. (Contribuição de Prince Roshan em :gh:`103636`.)"

#: ../../deprecations/pending-removal-in-future.rst:50
msgid ""
":mod:`codecs`: use :func:`open` instead of :func:`codecs.open`. (:gh:"
"`133038`)"
msgstr ""
":mod:`codecs`: use :func:`open` em vez de :func:`codecs.open`. (:gh:`133038`)"

#: ../../deprecations/pending-removal-in-future.rst:52
msgid ""
":attr:`codeobject.co_lnotab`: use the :meth:`codeobject.co_lines` method "
"instead."
msgstr ""
":attr:`codeobject.co_lnotab`: use o método :meth:`codeobject.co_lines`."

#: ../../deprecations/pending-removal-in-future.rst:55
msgid ":mod:`datetime`:"
msgstr ":mod:`datetime`:"

#: ../../deprecations/pending-removal-in-future.rst:57
msgid ""
":meth:`~datetime.datetime.utcnow`: use ``datetime.datetime.now(tz=datetime."
"UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcnow`: use ``datetime.datetime.now(tz=datetime."
"UTC)``."

#: ../../deprecations/pending-removal-in-future.rst:59
msgid ""
":meth:`~datetime.datetime.utcfromtimestamp`: use ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcfromtimestamp`: use ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``."

#: ../../deprecations/pending-removal-in-future.rst:62
msgid ":mod:`gettext`: Plural value must be an integer."
msgstr ":mod:`gettext`: o valor de plural deve ser um número inteiro."

#: ../../deprecations/pending-removal-in-future.rst:66
msgid ""
":func:`~importlib.util.cache_from_source` *debug_override* parameter is "
"deprecated: use the *optimization* parameter instead."
msgstr ""
"O parâmetro *debug_override* de :func:`~importlib.util.cache_from_source` "
"foi descontinuado: use o parâmetro *optimization*."

#: ../../deprecations/pending-removal-in-future.rst:69
msgid ":mod:`importlib.metadata`:"
msgstr ":mod:`importlib.metadata`:"

#: ../../deprecations/pending-removal-in-future.rst:71
msgid "``EntryPoints`` tuple interface."
msgstr "Interface de tupla ``EntryPoints``."

#: ../../deprecations/pending-removal-in-future.rst:72
msgid "Implicit ``None`` on return values."
msgstr "``None`` implícito nos valores de retorno."

#: ../../deprecations/pending-removal-in-future.rst:74
msgid ""
":mod:`logging`: the ``warn()`` method has been deprecated since Python 3.3, "
"use :meth:`~logging.warning` instead."
msgstr ""
":mod:`logging`: o método ``warn()`` foi descontinuado desde o Python 3.3, "
"use :meth:`~logging.warning`."

#: ../../deprecations/pending-removal-in-future.rst:77
msgid ""
":mod:`mailbox`: Use of StringIO input and text mode is deprecated, use "
"BytesIO and binary mode instead."
msgstr ""
":mod:`mailbox`: o uso da entrada StringIO e do modo de texto foi "
"descontinuado; em vez disso, use BytesIO e o modo binário."

#: ../../deprecations/pending-removal-in-future.rst:80
msgid ""
":mod:`os`: Calling :func:`os.register_at_fork` in multi-threaded process."
msgstr ":mod:`os`: chame :func:`os.register_at_fork` em processo multithread."

#: ../../deprecations/pending-removal-in-future.rst:82
msgid ""
":class:`!pydoc.ErrorDuringImport`: A tuple value for *exc_info* parameter is "
"deprecated, use an exception instance."
msgstr ""
":class:`!pydoc.ErrorDuringImport`: um valor de tupla para o parâmetro "
"*exc_info* foi descontinuado, use uma instância de exceção."

#: ../../deprecations/pending-removal-in-future.rst:85
msgid ""
":mod:`re`: More strict rules are now applied for numerical group references "
"and group names in regular expressions.  Only sequence of ASCII digits is "
"now accepted as a numerical reference.  The group name in bytes patterns and "
"replacement strings can now only contain ASCII letters and digits and "
"underscore. (Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""
":mod:`re`: regras mais rigorosas agora são aplicadas para referências "
"numéricas de grupos e nomes de grupos em expressões regulares. Apenas a "
"sequência de dígitos ASCII agora é aceita como referência numérica. O nome "
"do grupo em padrões de bytes e strings de substituição agora pode conter "
"apenas letras e dígitos ASCII e sublinhado. (Contribuição de Serhiy "
"Storchaka em :gh:`91760`.)"

#: ../../deprecations/pending-removal-in-future.rst:92
msgid ""
":mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!sre_parse` modules."
msgstr ""
"Módulos :mod:`!sre_compile`, :mod:`!sre_constants` e :mod:`!sre_parse`."

#: ../../deprecations/pending-removal-in-future.rst:94
msgid ""
":mod:`shutil`: :func:`~shutil.rmtree`'s *onerror* parameter is deprecated in "
"Python 3.12; use the *onexc* parameter instead."
msgstr ""
":mod:`shutil`: o parâmetro *onerror* de :func:`~shutil.rmtree` foi "
"descontinuado no Python 3.12; use o parâmetro *onexc*."

#: ../../deprecations/pending-removal-in-future.rst:97
msgid ":mod:`ssl` options and protocols:"
msgstr "Protocolos e opções de :mod:`ssl`"

#: ../../deprecations/pending-removal-in-future.rst:99
msgid ":class:`ssl.SSLContext` without protocol argument is deprecated."
msgstr ":class:`ssl.SSLContext` sem argumento de protocolo foi descontinuado."

#: ../../deprecations/pending-removal-in-future.rst:100
msgid ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and :meth:"
"`!selected_npn_protocol` are deprecated: use ALPN instead."
msgstr ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` e :meth:`!"
"selected_npn_protocol` foram descontinuados, use ALPN."

#: ../../deprecations/pending-removal-in-future.rst:103
msgid "``ssl.OP_NO_SSL*`` options"
msgstr "Opções de ``ssl.OP_NO_SSL*``"

#: ../../deprecations/pending-removal-in-future.rst:104
msgid "``ssl.OP_NO_TLS*`` options"
msgstr "Opções de ``ssl.OP_NO_TLS*``"

#: ../../deprecations/pending-removal-in-future.rst:105
msgid "``ssl.PROTOCOL_SSLv3``"
msgstr "``ssl.PROTOCOL_SSLv3``"

#: ../../deprecations/pending-removal-in-future.rst:106
msgid "``ssl.PROTOCOL_TLS``"
msgstr "``ssl.PROTOCOL_TLS``"

#: ../../deprecations/pending-removal-in-future.rst:107
msgid "``ssl.PROTOCOL_TLSv1``"
msgstr "``ssl.PROTOCOL_TLSv1``"

#: ../../deprecations/pending-removal-in-future.rst:108
msgid "``ssl.PROTOCOL_TLSv1_1``"
msgstr "``ssl.PROTOCOL_TLSv1_1``"

#: ../../deprecations/pending-removal-in-future.rst:109
msgid "``ssl.PROTOCOL_TLSv1_2``"
msgstr "``ssl.PROTOCOL_TLSv1_2``"

#: ../../deprecations/pending-removal-in-future.rst:110
msgid "``ssl.TLSVersion.SSLv3``"
msgstr "``ssl.TLSVersion.SSLv3``"

#: ../../deprecations/pending-removal-in-future.rst:111
msgid "``ssl.TLSVersion.TLSv1``"
msgstr "``ssl.TLSVersion.TLSv1``"

#: ../../deprecations/pending-removal-in-future.rst:112
msgid "``ssl.TLSVersion.TLSv1_1``"
msgstr "``ssl.TLSVersion.TLSv1_1``"

#: ../../deprecations/pending-removal-in-future.rst:114
msgid ":mod:`threading` methods:"
msgstr "Métodos de :mod:`threading`:"

#: ../../deprecations/pending-removal-in-future.rst:116
msgid ""
":meth:`!threading.Condition.notifyAll`: use :meth:`~threading.Condition."
"notify_all`."
msgstr ""
":meth:`!threading.Condition.notifyAll`: use :meth:`~threading.Condition."
"notify_all`."

#: ../../deprecations/pending-removal-in-future.rst:117
msgid ":meth:`!threading.Event.isSet`: use :meth:`~threading.Event.is_set`."
msgstr ":meth:`!threading.Event.isSet`: use :meth:`~threading.Event.is_set`."

#: ../../deprecations/pending-removal-in-future.rst:118
msgid ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use :"
"attr:`threading.Thread.daemon` attribute."
msgstr ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use "
"o atributo :attr:`threading.Thread.daemon`."

#: ../../deprecations/pending-removal-in-future.rst:120
msgid ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use :"
"attr:`threading.Thread.name` attribute."
msgstr ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use o "
"atributo :attr:`threading.Thread.name`."

#: ../../deprecations/pending-removal-in-future.rst:122
msgid ":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."
msgstr ""
":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."

#: ../../deprecations/pending-removal-in-future.rst:123
msgid ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."
msgstr ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."

#: ../../deprecations/pending-removal-in-future.rst:125
msgid ":class:`typing.Text` (:gh:`92332`)."
msgstr ":class:`typing.Text` (:gh:`92332`)."

#: ../../deprecations/pending-removal-in-future.rst:127
msgid ""
"The internal class ``typing._UnionGenericAlias`` is no longer used to "
"implement :class:`typing.Union`. To preserve compatibility with users using "
"this private class, a compatibility shim will be provided until at least "
"Python 3.17. (Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""
"A classe interna ``typing._UnionGenericAlias`` não é mais usada para "
"implementar :class:`typing.Union`. Para preservar a compatibilidade com "
"usuários que utilizam esta classe privada, uma correção de compatibilidade "
"será fornecida pelo menos até a versão 3.17 do Python. (Contribuição de "
"Jelle Zijlstra em :gh:`105499`.)"

#: ../../deprecations/pending-removal-in-future.rst:132
msgid ""
":class:`unittest.IsolatedAsyncioTestCase`: it is deprecated to return a "
"value that is not ``None`` from a test case."
msgstr ""
":class:`unittest.IsolatedAsyncioTestCase`: foi descontinuado retornar um "
"valor que não seja ``None`` de um caso de teste."

#: ../../deprecations/pending-removal-in-future.rst:135
msgid ""
":mod:`urllib.parse` deprecated functions: :func:`~urllib.parse.urlparse` "
"instead"
msgstr ""
"Funções descontinuadas de :mod:`urllib.parse`: use :func:`~urllib.parse."
"urlparse`"

#: ../../deprecations/pending-removal-in-future.rst:137
msgid "``splitattr()``"
msgstr "``splitattr()``"

#: ../../deprecations/pending-removal-in-future.rst:138
msgid "``splithost()``"
msgstr "``splithost()``"

#: ../../deprecations/pending-removal-in-future.rst:139
msgid "``splitnport()``"
msgstr "``splitnport()``"

#: ../../deprecations/pending-removal-in-future.rst:140
msgid "``splitpasswd()``"
msgstr "``splitpasswd()``"

#: ../../deprecations/pending-removal-in-future.rst:141
msgid "``splitport()``"
msgstr "``splitport()``"

#: ../../deprecations/pending-removal-in-future.rst:142
msgid "``splitquery()``"
msgstr "``splitquery()``"

#: ../../deprecations/pending-removal-in-future.rst:143
msgid "``splittag()``"
msgstr "``splittag()``"

#: ../../deprecations/pending-removal-in-future.rst:144
msgid "``splittype()``"
msgstr "``splittype()``"

#: ../../deprecations/pending-removal-in-future.rst:145
msgid "``splituser()``"
msgstr "``splituser()``"

#: ../../deprecations/pending-removal-in-future.rst:146
msgid "``splitvalue()``"
msgstr "``splitvalue()``"

#: ../../deprecations/pending-removal-in-future.rst:147
msgid "``to_bytes()``"
msgstr "``to_bytes()``"

#: ../../deprecations/pending-removal-in-future.rst:149
msgid ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` should not do partial "
"writes."
msgstr ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` não deve fazer gravações "
"parciais."

#: ../../deprecations/pending-removal-in-future.rst:152
msgid ""
":mod:`xml.etree.ElementTree`: Testing the truth value of an :class:`~xml."
"etree.ElementTree.Element` is deprecated. In a future release it will always "
"return ``True``. Prefer explicit ``len(elem)`` or ``elem is not None`` tests "
"instead."
msgstr ""
":mod:`xml.etree.ElementTree`: testar o valor verdade de um :class:`~xml."
"etree.ElementTree.Element` está descontinuado. Em um lançamento futuro isso "
"sempre retornará ``True``. Em vez disso, prefira os testes explícitos "
"``len(elem)`` ou ``elem is not None``."

#: ../../deprecations/pending-removal-in-future.rst:157
msgid ""
":func:`sys._clear_type_cache` is deprecated: use :func:`sys."
"_clear_internal_caches` instead."
msgstr ""
":func:`sys._clear_type_cache` está descontinuada: use :func:`sys."
"_clear_internal_caches`."

#: ../../whatsnew/3.14.rst:2342 ../../whatsnew/3.14.rst:2983
msgid "Removed"
msgstr "Removidos"

#: ../../whatsnew/3.14.rst:2347
msgid ""
"Remove the *type*, *choices*, and *metavar* parameters of :class:`!argparse."
"BooleanOptionalAction`. They were deprecated since 3.12."
msgstr ""

#: ../../whatsnew/3.14.rst:2351
msgid ""
"Calling :meth:`~argparse.ArgumentParser.add_argument_group` on an argument "
"group, and calling :meth:`~argparse.ArgumentParser.add_argument_group` or :"
"meth:`~argparse.ArgumentParser.add_mutually_exclusive_group` on a mutually "
"exclusive group now raise exceptions. This nesting was never supported, "
"often failed to work correctly, and was unintentionally exposed through "
"inheritance. This functionality has been deprecated since Python 3.11. "
"(Contributed by Savannah Ostrowski in :gh:`127186`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2362
msgid ""
"Remove the following classes. They were all deprecated since Python 3.8, and "
"have emitted deprecation warnings since Python 3.12:"
msgstr ""

#: ../../whatsnew/3.14.rst:2365
msgid ":class:`!ast.Bytes`"
msgstr ":class:`!ast.Bytes`"

#: ../../whatsnew/3.14.rst:2366
msgid ":class:`!ast.Ellipsis`"
msgstr ":class:`!ast.Ellipsis`"

#: ../../whatsnew/3.14.rst:2367
msgid ":class:`!ast.NameConstant`"
msgstr ":class:`!ast.NameConstant`"

#: ../../whatsnew/3.14.rst:2368
msgid ":class:`!ast.Num`"
msgstr ":class:`!ast.Num`"

#: ../../whatsnew/3.14.rst:2369
msgid ":class:`!ast.Str`"
msgstr ":class:`!ast.Str`"

#: ../../whatsnew/3.14.rst:2371
msgid ""
"Use :class:`ast.Constant` instead. As a consequence of these removals, user-"
"defined ``visit_Num``, ``visit_Str``, ``visit_Bytes``, "
"``visit_NameConstant`` and ``visit_Ellipsis`` methods on custom :class:`ast."
"NodeVisitor` subclasses will no longer be called when the :class:`!"
"NodeVisitor` subclass is visiting an AST. Define a ``visit_Constant`` method "
"instead."
msgstr ""

#: ../../whatsnew/3.14.rst:2378
msgid ""
"Also, remove the following deprecated properties on :class:`ast.Constant`, "
"which were present for compatibility with the now-removed AST classes:"
msgstr ""

#: ../../whatsnew/3.14.rst:2381
msgid ":attr:`!ast.Constant.n`"
msgstr ""

#: ../../whatsnew/3.14.rst:2382
msgid ":attr:`!ast.Constant.s`"
msgstr ""

#: ../../whatsnew/3.14.rst:2384
msgid ""
"Use :attr:`!ast.Constant.value` instead. (Contributed by Alex Waygood in :gh:"
"`119562`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2390
msgid ""
"Remove the following classes and functions. They were all deprecated and "
"emitted deprecation warnings since Python 3.12:"
msgstr ""

#: ../../whatsnew/3.14.rst:2393
msgid ":func:`!asyncio.get_child_watcher`"
msgstr ""

#: ../../whatsnew/3.14.rst:2394
msgid ":func:`!asyncio.set_child_watcher`"
msgstr ":func:`!asyncio.set_child_watcher`"

#: ../../whatsnew/3.14.rst:2395
msgid ":meth:`!asyncio.AbstractEventLoopPolicy.get_child_watcher`"
msgstr ":meth:`!asyncio.AbstractEventLoopPolicy.get_child_watcher`"

#: ../../whatsnew/3.14.rst:2396
msgid ":meth:`!asyncio.AbstractEventLoopPolicy.set_child_watcher`"
msgstr ":meth:`!asyncio.AbstractEventLoopPolicy.set_child_watcher`"

#: ../../whatsnew/3.14.rst:2397
msgid ":class:`!asyncio.AbstractChildWatcher`"
msgstr ":class:`!asyncio.AbstractChildWatcher`"

#: ../../whatsnew/3.14.rst:2398
msgid ":class:`!asyncio.FastChildWatcher`"
msgstr ":class:`!asyncio.FastChildWatcher`"

#: ../../whatsnew/3.14.rst:2399
msgid ":class:`!asyncio.MultiLoopChildWatcher`"
msgstr ":class:`!asyncio.MultiLoopChildWatcher`"

#: ../../whatsnew/3.14.rst:2400
msgid ":class:`!asyncio.PidfdChildWatcher`"
msgstr ""

#: ../../whatsnew/3.14.rst:2401
msgid ":class:`!asyncio.SafeChildWatcher`"
msgstr ":class:`!asyncio.SafeChildWatcher`"

#: ../../whatsnew/3.14.rst:2402
msgid ":class:`!asyncio.ThreadedChildWatcher`"
msgstr ""

#: ../../whatsnew/3.14.rst:2404
msgid "(Contributed by Kumar Aditya in :gh:`120804`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2406
msgid ""
"Removed implicit creation of event loop by :func:`asyncio.get_event_loop`. "
"It now raises a :exc:`RuntimeError` if there is no current event loop. "
"(Contributed by Kumar Aditya in :gh:`126353`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2410
msgid ""
"There's a few patterns that use :func:`asyncio.get_event_loop`, most of them "
"can be replaced with :func:`asyncio.run`."
msgstr ""

#: ../../whatsnew/3.14.rst:2413
msgid "If you're running an async function, simply use :func:`asyncio.run`."
msgstr ""

#: ../../whatsnew/3.14.rst:2415 ../../whatsnew/3.14.rst:2438
#: ../../whatsnew/3.14.rst:2464
msgid "Before::"
msgstr ""

#: ../../whatsnew/3.14.rst:2417
msgid ""
"async def main():\n"
"    ...\n"
"\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    loop.run_until_complete(main())\n"
"finally:\n"
"    loop.close()"
msgstr ""

#: ../../whatsnew/3.14.rst:2427 ../../whatsnew/3.14.rst:2450
#: ../../whatsnew/3.14.rst:2483
msgid "After::"
msgstr ""

#: ../../whatsnew/3.14.rst:2429
msgid ""
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main())"
msgstr ""

#: ../../whatsnew/3.14.rst:2434
msgid ""
"If you need to start something, for example, a server listening on a socket "
"and then run forever, use :func:`asyncio.run` and an :class:`asyncio.Event`."
msgstr ""

#: ../../whatsnew/3.14.rst:2440
msgid ""
"def start_server(loop):\n"
"    ...\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    start_server(loop)\n"
"    loop.run_forever()\n"
"finally:\n"
"    loop.close()"
msgstr ""

#: ../../whatsnew/3.14.rst:2452
msgid ""
"def start_server(loop):\n"
"    ...\n"
"\n"
"async def main():\n"
"    start_server(asyncio.get_running_loop())\n"
"    await asyncio.Event().wait()\n"
"\n"
"asyncio.run(main())"
msgstr ""

#: ../../whatsnew/3.14.rst:2461
msgid ""
"If you need to run something in an event loop, then run some blocking code "
"around it, use :class:`asyncio.Runner`."
msgstr ""

#: ../../whatsnew/3.14.rst:2466
msgid ""
"async def operation_one():\n"
"    ...\n"
"\n"
"def blocking_code():\n"
"    ...\n"
"\n"
"async def operation_two():\n"
"    ...\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    loop.run_until_complete(operation_one())\n"
"    blocking_code()\n"
"    loop.run_until_complete(operation_two())\n"
"finally:\n"
"    loop.close()"
msgstr ""

#: ../../whatsnew/3.14.rst:2485
msgid ""
"async def operation_one():\n"
"    ...\n"
"\n"
"def blocking_code():\n"
"    ...\n"
"\n"
"async def operation_two():\n"
"    ...\n"
"\n"
"with asyncio.Runner() as runner:\n"
"    runner.run(operation_one())\n"
"    blocking_code()\n"
"    runner.run(operation_two())"
msgstr ""

#: ../../whatsnew/3.14.rst:2502
msgid "collections.abc"
msgstr "collections.abc"

#: ../../whatsnew/3.14.rst:2504
msgid ""
"Remove :class:`!collections.abc.ByteString`. It had previously raised a :exc:"
"`DeprecationWarning` since Python 3.12."
msgstr ""

#: ../../whatsnew/3.14.rst:2508
msgid "email"
msgstr "email"

#: ../../whatsnew/3.14.rst:2510
msgid ""
"Remove the *isdst* parameter from :func:`email.utils.localtime`. "
"(Contributed by Hugo van Kemenade in :gh:`118798`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2514
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.14.rst:2516
msgid "Remove deprecated :mod:`importlib.abc` classes:"
msgstr ""

#: ../../whatsnew/3.14.rst:2518
msgid ":class:`!importlib.abc.ResourceReader`"
msgstr ":class:`!importlib.abc.ResourceReader`"

#: ../../whatsnew/3.14.rst:2519
msgid ":class:`!importlib.abc.Traversable`"
msgstr ":class:`!importlib.abc.Traversable`"

#: ../../whatsnew/3.14.rst:2520
msgid ":class:`!importlib.abc.TraversableResources`"
msgstr ":class:`!importlib.abc.TraversableResources`"

#: ../../whatsnew/3.14.rst:2522
msgid "Use :mod:`importlib.resources.abc` classes instead:"
msgstr "Em vez disso, use classes de :mod:`importlib.resources.abc`:"

#: ../../whatsnew/3.14.rst:2524
msgid ":class:`importlib.resources.abc.Traversable`"
msgstr ":class:`importlib.resources.abc.Traversable`"

#: ../../whatsnew/3.14.rst:2525
msgid ":class:`importlib.resources.abc.TraversableResources`"
msgstr ":class:`importlib.resources.abc.TraversableResources`"

#: ../../whatsnew/3.14.rst:2527
msgid "(Contributed by Jason R. Coombs and Hugo van Kemenade in :gh:`93963`.)"
msgstr "(Contribuição de Jason R. Coombs e Hugo van Kemenade em :gh:`93963`.)"

#: ../../whatsnew/3.14.rst:2530
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.14.rst:2532
msgid ""
"Remove :mod:`itertools` support for copy, deepcopy, and pickle operations. "
"These had previously raised a :exc:`DeprecationWarning` since Python 3.12. "
"(Contributed by Raymond Hettinger in :gh:`101588`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2539
msgid ""
"Remove support for passing additional keyword arguments to :class:`pathlib."
"Path`. In previous versions, any such arguments are ignored."
msgstr ""

#: ../../whatsnew/3.14.rst:2541
msgid ""
"Remove support for passing additional positional arguments to :meth:`pathlib."
"PurePath.relative_to` and :meth:`~pathlib.PurePath.is_relative_to`. In "
"previous versions, any such arguments are joined onto *other*."
msgstr ""

#: ../../whatsnew/3.14.rst:2547
msgid "pkgutil"
msgstr ""

#: ../../whatsnew/3.14.rst:2549
msgid ""
"Remove deprecated :func:`!pkgutil.get_loader` and :func:`!pkgutil."
"find_loader`. These had previously raised a :exc:`DeprecationWarning` since "
"Python 3.12. (Contributed by Bénédikt Tran in :gh:`97850`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2554
msgid "pty"
msgstr "pty"

#: ../../whatsnew/3.14.rst:2556
msgid ""
"Remove deprecated :func:`!pty.master_open` and :func:`!pty.slave_open`. They "
"had previously raised a :exc:`DeprecationWarning` since Python 3.12. Use :"
"func:`pty.openpty` instead. (Contributed by Nikita Sobolev in :gh:`118824`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2562
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.14.rst:2564
msgid ""
"Remove :data:`!version` and :data:`!version_info` from :mod:`sqlite3`. "
"(Contributed by Hugo van Kemenade in :gh:`118924`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2567
msgid ""
"Disallow using a sequence of parameters with named placeholders. This had "
"previously raised a :exc:`DeprecationWarning` since Python 3.12; it will now "
"raise a :exc:`sqlite3.ProgrammingError`. (Contributed by Erlend E. Aasland "
"in :gh:`118928` and :gh:`101693`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2575
msgid ""
"Remove :class:`!typing.ByteString`. It had previously raised a :exc:"
"`DeprecationWarning` since Python 3.12."
msgstr ""

#: ../../whatsnew/3.14.rst:2578
msgid ":class:`typing.TypeAliasType` now supports star unpacking."
msgstr ""

#: ../../whatsnew/3.14.rst:2583
msgid ""
"Remove deprecated :class:`!Quoter` class from :mod:`urllib.parse`. It had "
"previously raised a :exc:`DeprecationWarning` since Python 3.11. "
"(Contributed by Nikita Sobolev in :gh:`118827`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2586
msgid ""
"Remove deprecated :class:`!URLopener` and :class:`!FancyURLopener` classes "
"from :mod:`urllib.request`. They had previously raised a :exc:"
"`DeprecationWarning` since Python 3.3."
msgstr ""

#: ../../whatsnew/3.14.rst:2590
msgid ""
"``myopener.open()`` can be replaced with :func:`~urllib.request.urlopen`, "
"and ``myopener.retrieve()`` can be replaced with :func:`~urllib.request."
"urlretrieve`. Customizations to the opener classes can be replaced by "
"passing customized handlers to :func:`~urllib.request.build_opener`. "
"(Contributed by Barney Gale in :gh:`84850`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2598
msgid "Others"
msgstr "Outros"

#: ../../whatsnew/3.14.rst:2600
msgid ""
"Using :data:`NotImplemented` in a boolean context will now raise a :exc:"
"`TypeError`. It had previously raised a :exc:`DeprecationWarning` since "
"Python 3.9. (Contributed by Jelle Zijlstra in :gh:`118767`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2604
msgid ""
"The :func:`int` built-in no longer delegates to :meth:`~object.__trunc__`. "
"Classes that want to support conversion to integer must implement either :"
"meth:`~object.__int__` or :meth:`~object.__index__`. (Contributed by Mark "
"Dickinson in :gh:`119743`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2611
msgid "CPython bytecode changes"
msgstr "Alterações de bytecode do CPython"

#: ../../whatsnew/3.14.rst:2613
msgid ""
"Replaced the opcode ``BINARY_SUBSCR`` by :opcode:`BINARY_OP` with oparg "
"``NB_SUBSCR``. (Contributed by Irit Katriel in :gh:`100239`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2617 ../../whatsnew/3.14.rst:2844
msgid "Porting to Python 3.14"
msgstr ""

#: ../../whatsnew/3.14.rst:2619
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""
"Esta seção lista as alterações descritas anteriormente e outras correções "
"que podem exigir alterações no seu código."

#: ../../whatsnew/3.14.rst:2623
msgid "Changes in the Python API"
msgstr "Alterações na API Python"

#: ../../whatsnew/3.14.rst:2625
msgid ""
":class:`functools.partial` is now a method descriptor. Wrap it in :func:"
"`staticmethod` if you want to preserve the old behavior. (Contributed by "
"Serhiy Storchaka and Dominykas Grigonis in :gh:`121027`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2629
msgid ""
"The :func:`locale.nl_langinfo` function now sets temporarily the "
"``LC_CTYPE`` locale in some cases. This temporary change affects other "
"threads. (Contributed by Serhiy Storchaka in :gh:`69998`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2634
msgid ""
":class:`types.UnionType` is now an alias for :class:`typing.Union`, causing "
"changes in some behaviors. See :ref:`above <whatsnew314-typing-union>` for "
"more details. (Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2639
msgid ""
"The runtime behavior of annotations has changed in various ways; see :ref:"
"`above <whatsnew314-pep649>` for details. While most code that interacts "
"with annotations should continue to work, some undocumented details may "
"behave differently."
msgstr ""

#: ../../whatsnew/3.14.rst:2646
msgid "Build changes"
msgstr ""

#: ../../whatsnew/3.14.rst:2648
msgid ""
"GNU Autoconf 2.72 is now required to generate :file:`configure`. "
"(Contributed by Erlend Aasland in :gh:`115765`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2651
msgid ""
"``#pragma``-based linking with ``python3*.lib`` can now be switched off "
"with :c:expr:`Py_NO_LINK_LIB`. (Contributed by Jean-Christophe Fillion-Robin "
"in :gh:`82909`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2658
msgid "PEP 761: Discontinuation of PGP signatures"
msgstr ""

#: ../../whatsnew/3.14.rst:2660
msgid ""
"PGP signatures will not be available for CPython 3.14 and onwards. Users "
"verifying artifacts must use `Sigstore verification materials`_ for "
"verifying CPython artifacts. This change in release process is specified in :"
"pep:`761`."
msgstr ""

#: ../../whatsnew/3.14.rst:2669
msgid "C API changes"
msgstr ""

#: ../../whatsnew/3.14.rst:2674
msgid ""
"Add :c:func:`PyLong_GetSign` function to get the sign of :class:`int` "
"objects. (Contributed by Sergey B Kirpichev in :gh:`116560`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2677
msgid ""
"Add a new :c:type:`PyUnicodeWriter` API to create a Python :class:`str` "
"object:"
msgstr ""

#: ../../whatsnew/3.14.rst:2680
msgid ":c:func:`PyUnicodeWriter_Create`"
msgstr ""

#: ../../whatsnew/3.14.rst:2681
msgid ":c:func:`PyUnicodeWriter_DecodeUTF8Stateful`"
msgstr ""

#: ../../whatsnew/3.14.rst:2682
msgid ":c:func:`PyUnicodeWriter_Discard`"
msgstr ""

#: ../../whatsnew/3.14.rst:2683
msgid ":c:func:`PyUnicodeWriter_Finish`"
msgstr ""

#: ../../whatsnew/3.14.rst:2684
msgid ":c:func:`PyUnicodeWriter_Format`"
msgstr ""

#: ../../whatsnew/3.14.rst:2685
msgid ":c:func:`PyUnicodeWriter_WriteASCII`"
msgstr ""

#: ../../whatsnew/3.14.rst:2686
msgid ":c:func:`PyUnicodeWriter_WriteChar`"
msgstr ""

#: ../../whatsnew/3.14.rst:2687
msgid ":c:func:`PyUnicodeWriter_WriteRepr`"
msgstr ""

#: ../../whatsnew/3.14.rst:2688
msgid ":c:func:`PyUnicodeWriter_WriteStr`"
msgstr ""

#: ../../whatsnew/3.14.rst:2689
msgid ":c:func:`PyUnicodeWriter_WriteSubstring`"
msgstr ""

#: ../../whatsnew/3.14.rst:2690
msgid ":c:func:`PyUnicodeWriter_WriteUCS4`"
msgstr ""

#: ../../whatsnew/3.14.rst:2691
msgid ":c:func:`PyUnicodeWriter_WriteUTF8`"
msgstr ""

#: ../../whatsnew/3.14.rst:2692
msgid ":c:func:`PyUnicodeWriter_WriteWideChar`"
msgstr ""

#: ../../whatsnew/3.14.rst:2694
msgid "(Contributed by Victor Stinner in :gh:`119182`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2696
msgid ""
"Add :c:func:`PyIter_NextItem` to replace :c:func:`PyIter_Next`, which has an "
"ambiguous return value. (Contributed by Irit Katriel and Erlend Aasland in :"
"gh:`105201`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2700
msgid ""
"Add :c:func:`PyLong_IsPositive`, :c:func:`PyLong_IsNegative` and :c:func:"
"`PyLong_IsZero` for checking if :c:type:`PyLongObject` is positive, "
"negative, or zero, respectively. (Contributed by James Roy and Sergey B "
"Kirpichev in :gh:`126061`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2705
msgid ""
"Add new functions to convert C ``<stdint.h>`` numbers from/to Python :class:"
"`int`:"
msgstr ""

#: ../../whatsnew/3.14.rst:2708
msgid ":c:func:`PyLong_AsInt32`"
msgstr ""

#: ../../whatsnew/3.14.rst:2709
msgid ":c:func:`PyLong_AsInt64`"
msgstr ""

#: ../../whatsnew/3.14.rst:2710
msgid ":c:func:`PyLong_AsUInt32`"
msgstr ""

#: ../../whatsnew/3.14.rst:2711
msgid ":c:func:`PyLong_AsUInt64`"
msgstr ""

#: ../../whatsnew/3.14.rst:2712
msgid ":c:func:`PyLong_FromInt32`"
msgstr ""

#: ../../whatsnew/3.14.rst:2713
msgid ":c:func:`PyLong_FromInt64`"
msgstr ""

#: ../../whatsnew/3.14.rst:2714
msgid ":c:func:`PyLong_FromUInt32`"
msgstr ""

#: ../../whatsnew/3.14.rst:2715
msgid ":c:func:`PyLong_FromUInt64`"
msgstr ""

#: ../../whatsnew/3.14.rst:2717
msgid "(Contributed by Victor Stinner in :gh:`120389`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2719
msgid ""
"Add :c:func:`PyBytes_Join(sep, iterable) <PyBytes_Join>` function, similar "
"to ``sep.join(iterable)`` in Python. (Contributed by Victor Stinner in :gh:"
"`121645`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2723
msgid ""
"Add :c:func:`Py_HashBuffer` to compute and return the hash value of a "
"buffer. (Contributed by Antoine Pitrou and Victor Stinner in :gh:`122854`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2726
msgid ""
"Add functions to get and set the current runtime Python configuration (:pep:"
"`741`):"
msgstr ""

#: ../../whatsnew/3.14.rst:2729
msgid ":c:func:`PyConfig_Get`"
msgstr ""

#: ../../whatsnew/3.14.rst:2730
msgid ":c:func:`PyConfig_GetInt`"
msgstr ""

#: ../../whatsnew/3.14.rst:2731
msgid ":c:func:`PyConfig_Set`"
msgstr ""

#: ../../whatsnew/3.14.rst:2732
msgid ":c:func:`PyConfig_Names`"
msgstr ""

#: ../../whatsnew/3.14.rst:2736
msgid "Add functions to configure the Python initialization (:pep:`741`):"
msgstr ""

#: ../../whatsnew/3.14.rst:2738
msgid ":c:func:`Py_InitializeFromInitConfig`"
msgstr ""

#: ../../whatsnew/3.14.rst:2739
msgid ":c:func:`PyInitConfig_AddModule`"
msgstr ""

#: ../../whatsnew/3.14.rst:2740
msgid ":c:func:`PyInitConfig_Create`"
msgstr ""

#: ../../whatsnew/3.14.rst:2741
msgid ":c:func:`PyInitConfig_Free`"
msgstr ""

#: ../../whatsnew/3.14.rst:2742
msgid ":c:func:`PyInitConfig_FreeStrList`"
msgstr ""

#: ../../whatsnew/3.14.rst:2743
msgid ":c:func:`PyInitConfig_GetError`"
msgstr ""

#: ../../whatsnew/3.14.rst:2744
msgid ":c:func:`PyInitConfig_GetExitCode`"
msgstr ""

#: ../../whatsnew/3.14.rst:2745
msgid ":c:func:`PyInitConfig_GetInt`"
msgstr ""

#: ../../whatsnew/3.14.rst:2746
msgid ":c:func:`PyInitConfig_GetStr`"
msgstr ""

#: ../../whatsnew/3.14.rst:2747
msgid ":c:func:`PyInitConfig_GetStrList`"
msgstr ""

#: ../../whatsnew/3.14.rst:2748
msgid ":c:func:`PyInitConfig_HasOption`"
msgstr ""

#: ../../whatsnew/3.14.rst:2749
msgid ":c:func:`PyInitConfig_SetInt`"
msgstr ""

#: ../../whatsnew/3.14.rst:2750
msgid ":c:func:`PyInitConfig_SetStr`"
msgstr ""

#: ../../whatsnew/3.14.rst:2751
msgid ":c:func:`PyInitConfig_SetStrList`"
msgstr ""

#: ../../whatsnew/3.14.rst:2755
msgid ""
"Add a new import and export API for Python :class:`int` objects (:pep:`757`):"
msgstr ""

#: ../../whatsnew/3.14.rst:2757
msgid ":c:func:`PyLong_GetNativeLayout`"
msgstr ""

#: ../../whatsnew/3.14.rst:2758
msgid ":c:func:`PyLong_Export`"
msgstr ""

#: ../../whatsnew/3.14.rst:2759
msgid ":c:func:`PyLong_FreeExport`"
msgstr ""

#: ../../whatsnew/3.14.rst:2760
msgid ":c:func:`PyLongWriter_Create`"
msgstr ""

#: ../../whatsnew/3.14.rst:2761
msgid ":c:func:`PyLongWriter_Finish`"
msgstr ""

#: ../../whatsnew/3.14.rst:2762
msgid ":c:func:`PyLongWriter_Discard`"
msgstr ""

#: ../../whatsnew/3.14.rst:2764
msgid "(Contributed by Sergey B Kirpichev and Victor Stinner in :gh:`102471`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2766
msgid ""
"Add :c:func:`PyType_GetBaseByToken` and :c:data:`Py_tp_token` slot for "
"easier superclass identification, which attempts to resolve the `type "
"checking issue <https://peps.python.org/pep-0630/#type-checking>`__ "
"mentioned in :pep:`630` (:gh:`124153`)."
msgstr ""

#: ../../whatsnew/3.14.rst:2771
msgid ""
"Add :c:func:`PyUnicode_Equal` function to the limited C API: test if two "
"strings are equal. (Contributed by Victor Stinner in :gh:`124502`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2775
msgid ""
"Add :c:func:`PyType_Freeze` function to make a type immutable. (Contributed "
"by Victor Stinner in :gh:`121654`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2778
msgid ""
"Add :c:func:`PyUnstable_Object_EnableDeferredRefcount` for enabling deferred "
"reference counting, as outlined in :pep:`703`."
msgstr ""

#: ../../whatsnew/3.14.rst:2781
msgid ""
"Add :c:func:`PyMonitoring_FireBranchLeftEvent` and :c:func:"
"`PyMonitoring_FireBranchRightEvent` for generating :monitoring-event:"
"`BRANCH_LEFT` and :monitoring-event:`BRANCH_RIGHT` events, respectively."
msgstr ""

#: ../../whatsnew/3.14.rst:2786
msgid ""
"Add :c:func:`Py_fopen` function to open a file. Similar to the :c:func:`!"
"fopen` function, but the *path* parameter is a Python object and an "
"exception is set on error. Add also :c:func:`Py_fclose` function to close a "
"file. (Contributed by Victor Stinner in :gh:`127350`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2792
msgid ""
"Add support of nullable arguments in :c:func:`PyArg_ParseTuple` and similar "
"functions. Adding ``?`` after any format unit makes ``None`` be accepted as "
"a value. (Contributed by Serhiy Storchaka in :gh:`112068`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2797
msgid ""
"The ``k`` and ``K`` formats in :c:func:`PyArg_ParseTuple` and similar "
"functions now use :meth:`~object.__index__` if available, like all other "
"integer formats. (Contributed by Serhiy Storchaka in :gh:`112068`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2802
msgid ""
"Add macros :c:func:`Py_PACK_VERSION` and :c:func:`Py_PACK_FULL_VERSION` for "
"bit-packing Python version numbers. (Contributed by Petr Viktorin in :gh:"
"`128629`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2806
msgid ""
"Add :c:func:`PyUnstable_IsImmortal` for determining whether an object is :"
"term:`immortal`, for debugging purposes."
msgstr ""

#: ../../whatsnew/3.14.rst:2809
msgid ""
"Add :c:func:`PyImport_ImportModuleAttr` and :c:func:"
"`PyImport_ImportModuleAttrString` helper functions to import a module and "
"get an attribute of the module. (Contributed by Victor Stinner in :gh:"
"`128911`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2814
msgid ""
"Add support for a new ``p`` format unit in :c:func:`Py_BuildValue` that "
"allows to take a C integer and produce a Python :class:`bool` object. "
"(Contributed by Pablo Galindo in :issue:`45325`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2818
msgid ""
"Add :c:func:`PyUnstable_Object_IsUniqueReferencedTemporary` to determine if "
"an object is a unique temporary object on the interpreter's operand stack. "
"This can be used in some cases as a replacement for checking if :c:func:"
"`Py_REFCNT` is ``1`` for Python objects passed as arguments to C API "
"functions."
msgstr ""

#: ../../whatsnew/3.14.rst:2823
msgid ""
"Add :c:func:`PyUnstable_Object_IsUniquelyReferenced` as a replacement for "
"``Py_REFCNT(op) == 1`` on :term:`free threaded <free threading>` builds. "
"(Contributed by Peter Bierma in :gh:`133140`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2829
msgid "Limited C API changes"
msgstr ""

#: ../../whatsnew/3.14.rst:2831
msgid ""
"In the limited C API 3.14 and newer, :c:func:`Py_TYPE` and :c:func:"
"`Py_REFCNT` are now implemented as an opaque function call to hide "
"implementation details. (Contributed by Victor Stinner in :gh:`120600` and :"
"gh:`124127`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2836
msgid ""
"Remove the :c:macro:`PySequence_Fast_GET_SIZE`, :c:macro:"
"`PySequence_Fast_GET_ITEM` and :c:macro:`PySequence_Fast_ITEMS` macros from "
"the limited C API, since these macros never worked in the limited C API. "
"Keep :c:func:`PySequence_Fast` in the limited C API. (Contributed by Victor "
"Stinner in :gh:`91417`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2846
msgid ""
":c:func:`Py_Finalize` now deletes all interned strings. This is backwards "
"incompatible to any C-Extension that holds onto an interned string after a "
"call to :c:func:`Py_Finalize` and is then reused after a call to :c:func:"
"`Py_Initialize`.  Any issues arising from this behavior will normally result "
"in crashes during the execution of the subsequent call to :c:func:"
"`Py_Initialize` from accessing uninitialized memory. To fix, use an address "
"sanitizer to identify any use-after-free coming from an interned string and "
"deallocate it during module shutdown. (Contributed by Eddie Elizondo in :gh:"
"`113601`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2856
msgid ""
"The :ref:`Unicode Exception Objects <unicodeexceptions>` C API now raises a :"
"exc:`TypeError` if its exception argument is not a :exc:`UnicodeError` "
"object. (Contributed by Bénédikt Tran in :gh:`127691`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2863
msgid ""
"The interpreter internally avoids some reference count modifications when "
"loading objects onto the operands stack by :term:`borrowing <borrowed "
"reference>` references when possible. This can lead to smaller reference "
"count values compared to previous Python versions. C API extensions that "
"checked :c:func:`Py_REFCNT` of ``1`` to determine if an function argument is "
"not referenced by any other code should instead use :c:func:"
"`PyUnstable_Object_IsUniqueReferencedTemporary` as a safer replacement."
msgstr ""

#: ../../whatsnew/3.14.rst:2872
msgid "Private functions promoted to public C APIs:"
msgstr ""

#: ../../whatsnew/3.14.rst:2874
msgid "``_PyBytes_Join()``: :c:func:`PyBytes_Join`"
msgstr ""

#: ../../whatsnew/3.14.rst:2875
msgid "``_PyLong_IsNegative()``: :c:func:`PyLong_IsNegative`"
msgstr ""

#: ../../whatsnew/3.14.rst:2876
msgid "``_PyLong_IsPositive()``: :c:func:`PyLong_IsPositive`"
msgstr ""

#: ../../whatsnew/3.14.rst:2877
msgid "``_PyLong_IsZero()``: :c:func:`PyLong_IsZero`"
msgstr ""

#: ../../whatsnew/3.14.rst:2878
msgid "``_PyLong_Sign()``: :c:func:`PyLong_GetSign`"
msgstr ""

#: ../../whatsnew/3.14.rst:2879
msgid "``_PyUnicodeWriter_Dealloc()``: :c:func:`PyUnicodeWriter_Discard`"
msgstr ""

#: ../../whatsnew/3.14.rst:2880
msgid "``_PyUnicodeWriter_Finish()``: :c:func:`PyUnicodeWriter_Finish`"
msgstr ""

#: ../../whatsnew/3.14.rst:2881
msgid "``_PyUnicodeWriter_Init()``: use :c:func:`PyUnicodeWriter_Create`"
msgstr ""

#: ../../whatsnew/3.14.rst:2882
msgid "``_PyUnicodeWriter_Prepare()``: (no replacement)"
msgstr ""

#: ../../whatsnew/3.14.rst:2883
msgid "``_PyUnicodeWriter_PrepareKind()``: (no replacement)"
msgstr ""

#: ../../whatsnew/3.14.rst:2884
msgid "``_PyUnicodeWriter_WriteChar()``: :c:func:`PyUnicodeWriter_WriteChar`"
msgstr ""

#: ../../whatsnew/3.14.rst:2885
msgid "``_PyUnicodeWriter_WriteStr()``: :c:func:`PyUnicodeWriter_WriteStr`"
msgstr ""

#: ../../whatsnew/3.14.rst:2886
msgid ""
"``_PyUnicodeWriter_WriteSubstring()``: :c:func:"
"`PyUnicodeWriter_WriteSubstring`"
msgstr ""

#: ../../whatsnew/3.14.rst:2887
msgid "``_PyUnicode_EQ()``: :c:func:`PyUnicode_Equal`"
msgstr ""

#: ../../whatsnew/3.14.rst:2888
msgid "``_PyUnicode_Equal()``: :c:func:`PyUnicode_Equal`"
msgstr ""

#: ../../whatsnew/3.14.rst:2889
msgid ""
"``_Py_GetConfig()``: :c:func:`PyConfig_Get` and :c:func:`PyConfig_GetInt`"
msgstr ""

#: ../../whatsnew/3.14.rst:2890
msgid "``_Py_HashBytes()``: :c:func:`Py_HashBuffer`"
msgstr ""

#: ../../whatsnew/3.14.rst:2891
msgid "``_Py_fopen_obj()``: :c:func:`Py_fopen`"
msgstr ""

#: ../../whatsnew/3.14.rst:2893
msgid ""
"The `pythoncapi-compat project`_ can be used to get most of these new "
"functions on Python 3.13 and older."
msgstr ""

#: ../../whatsnew/3.14.rst:2904
msgid ""
"The :c:macro:`!Py_HUGE_VAL` macro is :term:`soft deprecated`, use :c:macro:`!"
"Py_INFINITY` instead. (Contributed by Sergey B Kirpichev in :gh:`120026`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2908
msgid ""
"Macros :c:macro:`!Py_IS_NAN`, :c:macro:`!Py_IS_INFINITY` and :c:macro:`!"
"Py_IS_FINITE` are :term:`soft deprecated`, use instead :c:macro:`!isnan`, :c:"
"macro:`!isinf` and :c:macro:`!isfinite` available from :file:`math.h` since "
"C99.  (Contributed by Sergey B Kirpichev in :gh:`119613`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2914
msgid ""
"Non-tuple sequences are deprecated as argument for the ``(items)`` format "
"unit in :c:func:`PyArg_ParseTuple` and other :ref:`argument parsing <arg-"
"parsing>` functions if *items* contains format units which store a :ref:"
"`borrowed buffer <c-arg-borrowed-buffer>` or a :term:`borrowed reference`. "
"(Contributed by Serhiy Storchaka in :gh:`50333`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2921
msgid ""
"The previously undocumented function :c:func:`PySequence_In` is :term:`soft "
"deprecated`. Use :c:func:`PySequence_Contains` instead. (Contributed by Yuki "
"Kobayashi in :gh:`127896`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2927
msgid ""
"The ``PyMonitoring_FireBranchEvent`` function is deprecated and should be "
"replaced with calls to :c:func:`PyMonitoring_FireBranchLeftEvent` and :c:"
"func:`PyMonitoring_FireBranchRightEvent`."
msgstr ""

#: ../../whatsnew/3.14.rst:2931
msgid ""
"The following private functions are deprecated and planned for removal in "
"Python 3.18:"
msgstr ""

#: ../../whatsnew/3.14.rst:2934
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:6
msgid ":c:func:`!_PyBytes_Join`: use :c:func:`PyBytes_Join`."
msgstr ":c:func:`!_PyBytes_Join`: use :c:func:`PyBytes_Join`."

#: ../../whatsnew/3.14.rst:2935
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:7
msgid ""
":c:func:`!_PyDict_GetItemStringWithError`: use :c:func:"
"`PyDict_GetItemStringRef`."
msgstr ""
":c:func:`!_PyDict_GetItemStringWithError`: use :c:func:"
"`PyDict_GetItemStringRef`."

#: ../../whatsnew/3.14.rst:2936
msgid ":c:func:`!_PyDict_Pop()`: use :c:func:`PyDict_Pop`."
msgstr ""

#: ../../whatsnew/3.14.rst:2937
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:9
msgid ":c:func:`!_PyLong_Sign()`: use :c:func:`PyLong_GetSign`."
msgstr ":c:func:`!_PyLong_Sign()`: use :c:func:`PyLong_GetSign`."

#: ../../whatsnew/3.14.rst:2938
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:10
msgid ""
":c:func:`!_PyLong_FromDigits` and :c:func:`!_PyLong_New`: use :c:func:"
"`PyLongWriter_Create`."
msgstr ""
":c:func:`!_PyLong_FromDigits` e :c:func:`!_PyLong_New`: use :c:func:"
"`PyLongWriter_Create`."

#: ../../whatsnew/3.14.rst:2940
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:12
msgid ""
":c:func:`!_PyThreadState_UncheckedGet`: use :c:func:"
"`PyThreadState_GetUnchecked`."
msgstr ""
":c:func:`!_PyThreadState_UncheckedGet`: use :c:func:"
"`PyThreadState_GetUnchecked`."

#: ../../whatsnew/3.14.rst:2941
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:13
msgid ":c:func:`!_PyUnicode_AsString`: use :c:func:`PyUnicode_AsUTF8`."
msgstr ":c:func:`!_PyUnicode_AsString`: use :c:func:`PyUnicode_AsUTF8`."

#: ../../whatsnew/3.14.rst:2942
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:14
msgid ""
":c:func:`!_PyUnicodeWriter_Init`: replace ``_PyUnicodeWriter_Init(&writer)`` "
"with :c:func:`writer = PyUnicodeWriter_Create(0) <PyUnicodeWriter_Create>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_Init`: substitua "
"``_PyUnicodeWriter_Init(&writer)`` com :c:func:`writer = "
"PyUnicodeWriter_Create(0) <PyUnicodeWriter_Create>`."

#: ../../whatsnew/3.14.rst:2945
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:17
msgid ""
":c:func:`!_PyUnicodeWriter_Finish`: replace "
"``_PyUnicodeWriter_Finish(&writer)`` with :c:func:"
"`PyUnicodeWriter_Finish(writer) <PyUnicodeWriter_Finish>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_Finish`: substitua "
"``_PyUnicodeWriter_Finish(&writer)`` por :c:func:"
"`PyUnicodeWriter_Finish(writer) <PyUnicodeWriter_Finish>`."

#: ../../whatsnew/3.14.rst:2948
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:20
msgid ""
":c:func:`!_PyUnicodeWriter_Dealloc`: replace "
"``_PyUnicodeWriter_Dealloc(&writer)`` with :c:func:"
"`PyUnicodeWriter_Discard(writer) <PyUnicodeWriter_Discard>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_Dealloc`: substitua "
"``_PyUnicodeWriter_Dealloc(&writer)`` por :c:func:"
"`PyUnicodeWriter_Discard(writer) <PyUnicodeWriter_Discard>`."

#: ../../whatsnew/3.14.rst:2951
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:23
msgid ""
":c:func:`!_PyUnicodeWriter_WriteChar`: replace "
"``_PyUnicodeWriter_WriteChar(&writer, ch)`` with :c:func:"
"`PyUnicodeWriter_WriteChar(writer, ch) <PyUnicodeWriter_WriteChar>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteChar`: substituta "
"``_PyUnicodeWriter_WriteChar(&writer, ch)`` com :c:func:"
"`PyUnicodeWriter_WriteChar(writer, ch) <PyUnicodeWriter_WriteChar>`."

#: ../../whatsnew/3.14.rst:2954
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:26
msgid ""
":c:func:`!_PyUnicodeWriter_WriteStr`: replace "
"``_PyUnicodeWriter_WriteStr(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteStr(writer, str) <PyUnicodeWriter_WriteStr>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteStr`: substitua "
"``_PyUnicodeWriter_WriteStr(&writer, str)`` por :c:func:"
"`PyUnicodeWriter_WriteStr(writer, str) <PyUnicodeWriter_WriteStr>`."

#: ../../whatsnew/3.14.rst:2957
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:29
msgid ""
":c:func:`!_PyUnicodeWriter_WriteSubstring`: replace "
"``_PyUnicodeWriter_WriteSubstring(&writer, str, start, end)`` with :c:func:"
"`PyUnicodeWriter_WriteSubstring(writer, str, start, end) "
"<PyUnicodeWriter_WriteSubstring>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteSubstring`: substitua "
"``_PyUnicodeWriter_WriteSubstring(&writer, str, start, end)`` por :c:func:"
"`PyUnicodeWriter_WriteSubstring(writer, str, start, end) "
"<PyUnicodeWriter_WriteSubstring>`."

#: ../../whatsnew/3.14.rst:2960
msgid ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: replace "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteASCII(writer, str) <PyUnicodeWriter_WriteASCII>`."
msgstr ""

#: ../../whatsnew/3.14.rst:2963
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:35
msgid ""
":c:func:`!_PyUnicodeWriter_WriteLatin1String`: replace "
"``_PyUnicodeWriter_WriteLatin1String(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteUTF8(writer, str) <PyUnicodeWriter_WriteUTF8>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteLatin1String`: substitua "
"``_PyUnicodeWriter_WriteLatin1String(&writer, str)`` por :c:func:"
"`PyUnicodeWriter_WriteUTF8(writer, str) <PyUnicodeWriter_WriteUTF8>`."

#: ../../whatsnew/3.14.rst:2966
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:40
msgid ":c:func:`!_Py_HashPointer`: use :c:func:`Py_HashPointer`."
msgstr ":c:func:`!_Py_HashPointer`: use :c:func:`Py_HashPointer`."

#: ../../whatsnew/3.14.rst:2967
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:41
msgid ":c:func:`!_Py_fopen_obj`: use :c:func:`Py_fopen`."
msgstr ":c:func:`!_Py_fopen_obj`: use :c:func:`Py_fopen`."

#: ../../whatsnew/3.14.rst:2969
msgid ""
"The `pythoncapi-compat project`_ can be used to get these new public "
"functions on Python 3.13 and older. (Contributed by Victor Stinner in :gh:"
"`128863`.)"
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:4
msgid "The bundled copy of ``libmpdecimal``."
msgstr "A cópia empacotada do ``libmpdecimal``."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:5
msgid ""
"The :c:func:`PyImport_ImportModuleNoBlock`: Use :c:func:"
"`PyImport_ImportModule` instead."
msgstr ""
"The :c:func:`PyImport_ImportModuleNoBlock`: use :c:func:"
"`PyImport_ImportModule`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:7
msgid ""
":c:func:`PyWeakref_GetObject` and :c:func:`PyWeakref_GET_OBJECT`: Use :c:"
"func:`PyWeakref_GetRef` instead. The `pythoncapi-compat project <https://"
"github.com/python/pythoncapi-compat/>`__ can be used to get :c:func:"
"`PyWeakref_GetRef` on Python 3.12 and older."
msgstr ""
":c:func:`PyWeakref_GetObject` e :c:func:`PyWeakref_GET_OBJECT`: Use :c:func:"
"`PyWeakref_GetRef`. O `projeto pythoncapi-compat <https://github.com/python/"
"pythoncapi-compat/>`__ pode ser usado para usar :c:func:`PyWeakref_GetRef` "
"no Python 3.12 e versões anteriores."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:11
msgid ""
":c:type:`Py_UNICODE` type and the :c:macro:`!Py_UNICODE_WIDE` macro: Use :c:"
"type:`wchar_t` instead."
msgstr ""
"O tipo :c:type:`Py_UNICODE` e a macro :c:macro:`!Py_UNICODE_WIDE`: use :c:"
"type:`wchar_t`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:13
msgid ""
":c:func:`!PyUnicode_AsDecodedObject`: Use :c:func:`PyCodec_Decode` instead."
msgstr ":c:func:`!PyUnicode_AsDecodedObject`: use :c:func:`PyCodec_Decode`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:15
msgid ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Use :c:func:`PyCodec_Decode` instead; "
"Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`str`, such as :class:`bytes`."
msgstr ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Use :c:func:`PyCodec_Decode`; Note "
"que alguns codecs (por exemplo, \"base64\") podem retornar um tipo diferente "
"de :class:`str`, tal como :class:`bytes`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:18
msgid ""
":c:func:`!PyUnicode_AsEncodedObject`: Use :c:func:`PyCodec_Encode` instead."
msgstr ":c:func:`!PyUnicode_AsEncodedObject`: use :c:func:`PyCodec_Encode`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:20
msgid ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Use :c:func:`PyCodec_Encode` instead; "
"Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`bytes`, such as :class:`str`."
msgstr ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Use :c:func:`PyCodec_Encode`; Note "
"que alguns codecs (por exemplo, \"base64\") podem retornar um tipo diferente "
"de :class:`bytes`, tal com :class:`str`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:23
msgid "Python initialization functions, deprecated in Python 3.13:"
msgstr "Funções de inicialização do Python, descontinuadas no Python 3.9:"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:25
msgid ""
":c:func:`Py_GetPath`: Use :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>` (:data:`sys.path`) instead."
msgstr ""
":c:func:`Py_GetPath`: Use :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>` (:data:`sys.path`)."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:28
msgid ""
":c:func:`Py_GetPrefix`: Use :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) instead. Use :c:func:"
"`PyConfig_Get(\"prefix\") <PyConfig_Get>` (:data:`sys.prefix`) if :ref:"
"`virtual environments <venv-def>` need to be handled."
msgstr ""
":c:func:`Py_GetPrefix`: Use :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`). Use :c:func:"
"`PyConfig_Get(\"prefix\") <PyConfig_Get>` (:data:`sys.prefix`) se :ref:"
"`ambientes virtuais <venv-def>` precisam ser tratados."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:33
msgid ""
":c:func:`Py_GetExecPrefix`: Use :c:func:`PyConfig_Get(\"base_exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_exec_prefix`) instead. Use :c:func:"
"`PyConfig_Get(\"exec_prefix\") <PyConfig_Get>` (:data:`sys.exec_prefix`) if :"
"ref:`virtual environments <venv-def>` need to be handled."
msgstr ""
":c:func:`Py_GetExecPrefix`: Use :c:func:`PyConfig_Get(\"base_exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_exec_prefix`). Use :c:func:"
"`PyConfig_Get(\"exec_prefix\") <PyConfig_Get>` (:data:`sys.exec_prefix`) se :"
"ref:`ambientes virtuais <venv-def>` precisam ser tratados."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:39
msgid ""
":c:func:`Py_GetProgramFullPath`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""
":c:func:`Py_GetProgramFullPath`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`)."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:42
msgid ""
":c:func:`Py_GetProgramName`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""
":c:func:`Py_GetProgramName`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`)."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:45
msgid ""
":c:func:`Py_GetPythonHome`: Use :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` or the :envvar:`PYTHONHOME` environment variable instead."
msgstr ""
":c:func:`Py_GetPythonHome`: Use :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` ou a variável de ambiente :envvar:`PYTHONHOME`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:49
msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-compat/"
">`__ can be used to get :c:func:`PyConfig_Get` on Python 3.13 and older."
msgstr ""
"O projeto `pythoncapi-compat <https://github.com/python/pythoncapi-compat/"
">`__ pode ser usado para obter :c:func:`PyConfig_Get` no Python 3.13 e "
"versões anteriores."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:53
msgid ""
"Functions to configure Python's initialization, deprecated in Python 3.11:"
msgstr ""
"Funções para configurar a inicialização do Python, descontinuadas no Python "
"3.11:"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:55
msgid ":c:func:`!PySys_SetArgvEx()`: Set :c:member:`PyConfig.argv` instead."
msgstr ":c:func:`!PySys_SetArgvEx()`: defina :c:member:`PyConfig.argv`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:57
msgid ":c:func:`!PySys_SetArgv()`: Set :c:member:`PyConfig.argv` instead."
msgstr ":c:func:`!PySys_SetArgv()`: defina :c:member:`PyConfig.argv`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:59
msgid ""
":c:func:`!Py_SetProgramName()`: Set :c:member:`PyConfig.program_name` "
"instead."
msgstr ""
":c:func:`!Py_SetProgramName()`: defina :c:member:`PyConfig.program_name`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:61
msgid ":c:func:`!Py_SetPythonHome()`: Set :c:member:`PyConfig.home` instead."
msgstr ":c:func:`!Py_SetPythonHome()`: defina :c:member:`PyConfig.home`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:63
msgid ""
":c:func:`PySys_ResetWarnOptions`: Clear :data:`sys.warnoptions` and :data:`!"
"warnings.filters` instead."
msgstr ""
":c:func:`PySys_ResetWarnOptions`: apague :data:`sys.warnoptions` e :data:`!"
"warnings.filters`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:66
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` instead."
msgstr ""
"Em vez disso, a API :c:func:`Py_InitializeFromConfig` deve ser usada com :c:"
"type:`PyConfig`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:69
msgid "Global configuration variables:"
msgstr "Variáveis de configuração globais"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:71
msgid ""
":c:var:`Py_DebugFlag`: Use :c:member:`PyConfig.parser_debug` or :c:func:"
"`PyConfig_Get(\"parser_debug\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_DebugFlag`: Use :c:member:`PyConfig.parser_debug` ou :c:func:"
"`PyConfig_Get(\"parser_debug\") <PyConfig_Get>`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:74
msgid ""
":c:var:`Py_VerboseFlag`: Use :c:member:`PyConfig.verbose` or :c:func:"
"`PyConfig_Get(\"verbose\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_VerboseFlag`: Use :c:member:`PyConfig.verbose` ou :c:func:"
"`PyConfig_Get(\"verbose\") <PyConfig_Get>`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:77
msgid ""
":c:var:`Py_QuietFlag`: Use :c:member:`PyConfig.quiet` or :c:func:"
"`PyConfig_Get(\"quiet\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_QuietFlag`: Use :c:member:`PyConfig.quiet` ou :c:func:"
"`PyConfig_Get(\"quiet\") <PyConfig_Get>`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:80
msgid ""
":c:var:`Py_InteractiveFlag`: Use :c:member:`PyConfig.interactive` or :c:func:"
"`PyConfig_Get(\"interactive\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_InteractiveFlag`: Use :c:member:`PyConfig.interactive` ou :c:func:"
"`PyConfig_Get(\"interactive\") <PyConfig_Get>`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:83
msgid ""
":c:var:`Py_InspectFlag`: Use :c:member:`PyConfig.inspect` or :c:func:"
"`PyConfig_Get(\"inspect\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_InspectFlag`: Use :c:member:`PyConfig.inspect` ou :c:func:"
"`PyConfig_Get(\"inspect\") <PyConfig_Get>`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:86
msgid ""
":c:var:`Py_OptimizeFlag`: Use :c:member:`PyConfig.optimization_level` or :c:"
"func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_OptimizeFlag`: Use :c:member:`PyConfig.optimization_level` ou :c:"
"func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:89
msgid ""
":c:var:`Py_NoSiteFlag`: Use :c:member:`PyConfig.site_import` or :c:func:"
"`PyConfig_Get(\"site_import\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_NoSiteFlag`: Use :c:member:`PyConfig.site_import` ou :c:func:"
"`PyConfig_Get(\"site_import\") <PyConfig_Get>`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:92
msgid ""
":c:var:`Py_BytesWarningFlag`: Use :c:member:`PyConfig.bytes_warning` or :c:"
"func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_BytesWarningFlag`: Use :c:member:`PyConfig.bytes_warning` ou :c:"
"func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:95
msgid ""
":c:var:`Py_FrozenFlag`: Use :c:member:`PyConfig.pathconfig_warnings` or :c:"
"func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_FrozenFlag`: Use :c:member:`PyConfig.pathconfig_warnings` ou :c:"
"func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:98
msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: Use :c:member:`PyConfig.use_environment` "
"or :c:func:`PyConfig_Get(\"use_environment\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_IgnoreEnvironmentFlag`: Use :c:member:`PyConfig.use_environment` "
"ou :c:func:`PyConfig_Get(\"use_environment\") <PyConfig_Get>`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:101
msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: Use :c:member:`PyConfig.write_bytecode` "
"or :c:func:`PyConfig_Get(\"write_bytecode\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_DontWriteBytecodeFlag`: Use :c:member:`PyConfig.write_bytecode` "
"ou :c:func:`PyConfig_Get(\"write_bytecode\") <PyConfig_Get>`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:104
msgid ""
":c:var:`Py_NoUserSiteDirectory`: Use :c:member:`PyConfig."
"user_site_directory` or :c:func:`PyConfig_Get(\"user_site_directory\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_NoUserSiteDirectory`: Use :c:member:`PyConfig."
"user_site_directory` ou :c:func:`PyConfig_Get(\"user_site_directory\") "
"<PyConfig_Get>`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:107
msgid ""
":c:var:`Py_UnbufferedStdioFlag`: Use :c:member:`PyConfig.buffered_stdio` or :"
"c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_UnbufferedStdioFlag`: Use :c:member:`PyConfig.buffered_stdio` ou :"
"c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:110
msgid ""
":c:var:`Py_HashRandomizationFlag`: Use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed` or :c:func:`PyConfig_Get(\"hash_seed\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_HashRandomizationFlag`: Use :c:member:`PyConfig.use_hash_seed` e :"
"c:member:`PyConfig.hash_seed` ou :c:func:`PyConfig_Get(\"hash_seed\") "
"<PyConfig_Get>`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:114
msgid ""
":c:var:`Py_IsolatedFlag`: Use :c:member:`PyConfig.isolated` or :c:func:"
"`PyConfig_Get(\"isolated\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_IsolatedFlag`: Use :c:member:`PyConfig.isolated` ou :c:func:"
"`PyConfig_Get(\"isolated\") <PyConfig_Get>`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:117
msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: Use :c:member:`PyPreConfig."
"legacy_windows_fs_encoding` or :c:func:"
"`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: Use :c:member:`PyPreConfig."
"legacy_windows_fs_encoding` ou :c:func:"
"`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:120
msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: Use :c:member:`PyConfig."
"legacy_windows_stdio` or :c:func:`PyConfig_Get(\"legacy_windows_stdio\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_LegacyWindowsStdioFlag`: Use :c:member:`PyConfig."
"legacy_windows_stdio` ou :c:func:`PyConfig_Get(\"legacy_windows_stdio\") "
"<PyConfig_Get>`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:123
msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`, :c:var:`!"
"Py_HasFileSystemDefaultEncoding`: Use :c:member:`PyConfig."
"filesystem_encoding` or :c:func:`PyConfig_Get(\"filesystem_encoding\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncoding`, :c:var:`!"
"Py_HasFileSystemDefaultEncoding`: Use :c:member:`PyConfig."
"filesystem_encoding` ou :c:func:`PyConfig_Get(\"filesystem_encoding\") "
"<PyConfig_Get>`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:126
msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: Use :c:member:`PyConfig."
"filesystem_errors` or :c:func:`PyConfig_Get(\"filesystem_errors\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: Use :c:member:`PyConfig."
"filesystem_errors` ou :c:func:`PyConfig_Get(\"filesystem_errors\") "
"<PyConfig_Get>`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:129
msgid ""
":c:var:`!Py_UTF8Mode`: Use :c:member:`PyPreConfig.utf8_mode` or :c:func:"
"`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>` instead. (see :c:func:"
"`Py_PreInitialize`)"
msgstr ""
":c:var:`!Py_UTF8Mode`: Use :c:member:`PyPreConfig.utf8_mode` ou :c:func:"
"`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>`. (veja :c:func:"
"`Py_PreInitialize`)"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:134
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` to set these options. Or :c:func:`PyConfig_Get` can be used to "
"get these options at runtime."
msgstr ""
"A API :c:func:`Py_InitializeFromConfig` deve ser usada com :c:type:"
"`PyConfig` para definir essas opções. Ou :c:func:`PyConfig_Get` pode ser "
"usado para obter essas opções em tempo de execução."

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:2
msgid "Pending removal in Python 3.18"
msgstr "Remoção pendente no Python 3.18"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:4
msgid "Deprecated private functions (:gh:`128863`):"
msgstr "Funções privadas descontinuadas (:gh:`128863`):"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:8
msgid ":c:func:`!_PyDict_Pop()`: :c:func:`PyDict_Pop`."
msgstr ":c:func:`!_PyDict_Pop()`: :c:func:`PyDict_Pop`."

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:32
msgid ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: replace "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteUTF8(writer, str) <PyUnicodeWriter_WriteUTF8>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: substitua "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` por :c:func:"
"`PyUnicodeWriter_WriteUTF8(writer, str) <PyUnicodeWriter_WriteUTF8>`."

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:38
msgid ":c:func:`!_PyUnicodeWriter_Prepare`: (no replacement)."
msgstr ":c:func:`!_PyUnicodeWriter_Prepare`: (sem substituto)."

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:39
msgid ":c:func:`!_PyUnicodeWriter_PrepareKind`: (no replacement)."
msgstr ":c:func:`!_PyUnicodeWriter_PrepareKind`: (sem substituto)."

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:43
msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-compat/"
">`__ can be used to get these new public functions on Python 3.13 and older."
msgstr ""
"O projeto `pythoncapi-compat <https://github.com/python/pythoncapi-compat/"
">`__ pode ser usado para obter essas novas funções públicas no Python 3.13 e "
"versões anteriores."

#: ../../deprecations/c-api-pending-removal-in-future.rst:4
msgid ""
"The following APIs are deprecated and will be removed, although there is "
"currently no date scheduled for their removal."
msgstr ""
"As APIs a seguir foram descontinuadas e serão removidas, embora atualmente "
"não haja uma data agendada para sua remoção."

#: ../../deprecations/c-api-pending-removal-in-future.rst:7
msgid ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: Unneeded since Python 3.8."
msgstr ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: desnecessária desde o Python 3.8."

#: ../../deprecations/c-api-pending-removal-in-future.rst:9
msgid ":c:func:`PyErr_Fetch`: Use :c:func:`PyErr_GetRaisedException` instead."
msgstr ":c:func:`PyErr_Fetch`: use :c:func:`PyErr_GetRaisedException`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:11
msgid ""
":c:func:`PyErr_NormalizeException`: Use :c:func:`PyErr_GetRaisedException` "
"instead."
msgstr ""
":c:func:`PyErr_NormalizeException`: use :c:func:`PyErr_GetRaisedException`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:13
msgid ""
":c:func:`PyErr_Restore`: Use :c:func:`PyErr_SetRaisedException` instead."
msgstr ":c:func:`PyErr_Restore`: use :c:func:`PyErr_SetRaisedException`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:15
msgid ""
":c:func:`PyModule_GetFilename`: Use :c:func:`PyModule_GetFilenameObject` "
"instead."
msgstr ""
":c:func:`PyModule_GetFilename`: use :c:func:`PyModule_GetFilenameObject`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:17
msgid ":c:func:`PyOS_AfterFork`: Use :c:func:`PyOS_AfterFork_Child` instead."
msgstr ":c:func:`PyOS_AfterFork`: use :c:func:`PyOS_AfterFork_Child`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:19
msgid ""
":c:func:`PySlice_GetIndicesEx`: Use :c:func:`PySlice_Unpack` and :c:func:"
"`PySlice_AdjustIndices` instead."
msgstr ""
":c:func:`PySlice_GetIndicesEx`: use :c:func:`PySlice_Unpack` e :c:func:"
"`PySlice_AdjustIndices`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:21
msgid ":c:func:`PyUnicode_READY`: Unneeded since Python 3.12"
msgstr ":c:func:`PyUnicode_READY`: desnecessário desde o Python 3.12"

#: ../../deprecations/c-api-pending-removal-in-future.rst:23
msgid ":c:func:`!PyErr_Display`: Use :c:func:`PyErr_DisplayException` instead."
msgstr ":c:func:`!PyErr_Display`: use :c:func:`PyErr_DisplayException`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:25
msgid ""
":c:func:`!_PyErr_ChainExceptions`: Use :c:func:`!_PyErr_ChainExceptions1` "
"instead."
msgstr ""
":c:func:`!_PyErr_ChainExceptions`: use :c:func:`!_PyErr_ChainExceptions1`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:27
msgid ""
":c:member:`!PyBytesObject.ob_shash` member: call :c:func:`PyObject_Hash` "
"instead."
msgstr ""
"O membro :c:member:`!PyBytesObject.ob_shash`: chame :c:func:`PyObject_Hash`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:29
msgid "Thread Local Storage (TLS) API:"
msgstr "API do Thread Local Storage (TLS):"

#: ../../deprecations/c-api-pending-removal-in-future.rst:31
msgid ""
":c:func:`PyThread_create_key`: Use :c:func:`PyThread_tss_alloc` instead."
msgstr ":c:func:`PyThread_create_key`: use :c:func:`PyThread_tss_alloc`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:33
msgid ":c:func:`PyThread_delete_key`: Use :c:func:`PyThread_tss_free` instead."
msgstr ":c:func:`PyThread_delete_key`: use :c:func:`PyThread_tss_free`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:35
msgid ""
":c:func:`PyThread_set_key_value`: Use :c:func:`PyThread_tss_set` instead."
msgstr ":c:func:`PyThread_set_key_value`: use :c:func:`PyThread_tss_set`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:37
msgid ""
":c:func:`PyThread_get_key_value`: Use :c:func:`PyThread_tss_get` instead."
msgstr ":c:func:`PyThread_get_key_value`: use :c:func:`PyThread_tss_get`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:39
msgid ""
":c:func:`PyThread_delete_key_value`: Use :c:func:`PyThread_tss_delete` "
"instead."
msgstr ""
":c:func:`PyThread_delete_key_value`: use :c:func:`PyThread_tss_delete`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:41
msgid ":c:func:`PyThread_ReInitTLS`: Unneeded since Python 3.7."
msgstr ":c:func:`PyThread_ReInitTLS`: desnecessário desde o Python 3.7."

#: ../../whatsnew/3.14.rst:2985
msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with mutable "
"bases was deprecated since 3.12 and now raises a :exc:`TypeError`."
msgstr ""

#: ../../whatsnew/3.14.rst:2988
msgid ""
"Remove ``PyDictObject.ma_version_tag`` member which was deprecated since "
"Python 3.12. Use the :c:func:`PyDict_AddWatcher` API instead. (Contributed "
"by Sam Gross in :gh:`124296`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2992
msgid ""
"Remove the private ``_Py_InitializeMain()`` function. It was a :term:"
"`provisional API` added to Python 3.8 by :pep:`587`. (Contributed by Victor "
"Stinner in :gh:`129033`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2996
msgid ""
"The undocumented APIs :c:macro:`!Py_C_RECURSION_LIMIT` and :c:member:`!"
"PyThreadState.c_recursion_remaining`, added in 3.13, are removed without a "
"deprecation period. Please use :c:func:`Py_EnterRecursiveCall` to guard "
"against runaway recursion in C code. (Removed in :gh:`133079`, see also :gh:"
"`130396`.)"
msgstr ""
