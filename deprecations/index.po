# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-04 14:20+0000\n"
"PO-Revision-Date: 2025-07-18 18:48+0000\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../deprecations/index.rst:2
msgid "Deprecations"
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:2
#: ../../deprecations/pending-removal-in-3.15.rst:2
msgid "Pending removal in Python 3.15"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:4
#: ../../deprecations/pending-removal-in-3.16.rst:4
msgid "The import system:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:6
msgid ""
"Setting :attr:`~module.__cached__` on a module while failing to set :attr:"
"`__spec__.cached <importlib.machinery.ModuleSpec.cached>` is deprecated. In "
"Python 3.15, :attr:`!__cached__` will cease to be set or take into "
"consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:11
msgid ""
"Setting :attr:`~module.__package__` on a module while failing to set :attr:"
"`__spec__.parent <importlib.machinery.ModuleSpec.parent>` is deprecated. In "
"Python 3.15, :attr:`!__package__` will cease to be set or take into "
"consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:16
#: ../../deprecations/pending-removal-in-3.19.rst:4
msgid ":mod:`ctypes`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:18
msgid ""
"The undocumented :func:`!ctypes.SetPointerType` function has been deprecated "
"since Python 3.13."
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:21
msgid ":mod:`http.server`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:23
msgid ""
"The obsolete and rarely used :class:`~http.server.CGIHTTPRequestHandler` has "
"been deprecated since Python 3.13. No direct replacement exists. *Anything* "
"is better than CGI to interface a web server with a request handler."
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:29
msgid ""
"The :option:`!--cgi` flag to the :program:`python -m http.server` command-"
"line interface has been deprecated since Python 3.13."
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:32
#: ../../deprecations/pending-removal-in-future.rst:64
msgid ":mod:`importlib`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:34
msgid "``load_module()`` method: use ``exec_module()`` instead."
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:36
msgid ":class:`locale`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:38
msgid ""
"The :func:`~locale.getdefaultlocale` function has been deprecated since "
"Python 3.11. Its removal was originally planned for Python 3.13 (:gh:"
"`90817`), but has been postponed to Python 3.15. Use :func:`~locale."
"getlocale`, :func:`~locale.setlocale`, and :func:`~locale.getencoding` "
"instead. (Contributed by Hugo van Kemenade in :gh:`111187`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:46
msgid ":mod:`pathlib`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:48
msgid ""
":meth:`.PurePath.is_reserved` has been deprecated since Python 3.13. Use :"
"func:`os.path.isreserved` to detect reserved paths on Windows."
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:52
msgid ":mod:`platform`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:54
msgid ""
":func:`~platform.java_ver` has been deprecated since Python 3.13. This "
"function is only useful for Jython support, has a confusing API, and is "
"largely untested."
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:58
#: ../../deprecations/pending-removal-in-3.16.rst:96
msgid ":mod:`sysconfig`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:60
msgid ""
"The *check_home* argument of :func:`sysconfig.is_python_build` has been "
"deprecated since Python 3.12."
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:63
msgid ":mod:`threading`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:65
msgid ""
":func:`~threading.RLock` will take no arguments in Python 3.15. Passing any "
"arguments has been deprecated since Python 3.14, as the  Python version does "
"not permit any arguments, but the C version allows any number of positional "
"or keyword arguments, ignoring every argument."
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:71
msgid ":mod:`types`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:73
msgid ""
":class:`types.CodeType`: Accessing :attr:`~codeobject.co_lnotab` was "
"deprecated in :pep:`626` since 3.10 and was planned to be removed in 3.12, "
"but it only got a proper :exc:`DeprecationWarning` in 3.12. May be removed "
"in 3.15. (Contributed by Nikita Sobolev in :gh:`101866`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:80
#: ../../deprecations/pending-removal-in-3.17.rst:4
msgid ":mod:`typing`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:82
msgid ""
"The undocumented keyword argument syntax for creating :class:`~typing."
"NamedTuple` classes (for example, ``Point = NamedTuple(\"Point\", x=int, "
"y=int)``) has been deprecated since Python 3.13. Use the class-based syntax "
"or the functional syntax instead."
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:88
msgid ""
"When using the functional syntax of :class:`~typing.TypedDict`\\s, failing "
"to pass a value to the *fields* parameter (``TD = TypedDict(\"TD\")``) or "
"passing ``None`` (``TD = TypedDict(\"TD\", None)``) has been deprecated "
"since Python 3.13. Use ``class TD(TypedDict): pass`` or ``TD = "
"TypedDict(\"TD\", {})`` to create a TypedDict with zero field."
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:95
msgid ""
"The :func:`typing.no_type_check_decorator` decorator function has been "
"deprecated since Python 3.13. After eight years in the :mod:`typing` module, "
"it has yet to be supported by any major type checker."
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:100
msgid ":mod:`wave`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:102
msgid ""
"The :meth:`~wave.Wave_read.getmark`, :meth:`!setmark`, and :meth:`~wave."
"Wave_read.getmarkers` methods of the :class:`~wave.Wave_read` and :class:"
"`~wave.Wave_write` classes have been deprecated since Python 3.13."
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:107
msgid ":mod:`zipimport`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:109
msgid ""
":meth:`~zipimport.zipimporter.load_module` has been deprecated since Python "
"3.10. Use :meth:`~zipimport.zipimporter.exec_module` instead. (Contributed "
"by Jiahao Li in :gh:`125746`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:2
msgid "Pending removal in Python 3.16"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:6
msgid ""
"Setting :attr:`~module.__loader__` on a module while failing to set :attr:"
"`__spec__.loader <importlib.machinery.ModuleSpec.loader>` is deprecated. In "
"Python 3.16, :attr:`!__loader__` will cease to be set or taken into "
"consideration by the import system or the standard library."
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:11
msgid ":mod:`array`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:13
msgid ""
"The ``'u'`` format code (:c:type:`wchar_t`) has been deprecated in "
"documentation since Python 3.3 and at runtime since Python 3.13. Use the "
"``'w'`` format code (:c:type:`Py_UCS4`) for Unicode characters instead."
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:19
msgid ":mod:`asyncio`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:21
msgid ""
":func:`!asyncio.iscoroutinefunction` is deprecated and will be removed in "
"Python 3.16; use :func:`inspect.iscoroutinefunction` instead. (Contributed "
"by Jiahao Li and Kumar Aditya in :gh:`122875`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:26
msgid ""
":mod:`asyncio` policy system is deprecated and will be removed in Python "
"3.16. In particular, the following classes and functions are deprecated:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:29
msgid ":class:`asyncio.AbstractEventLoopPolicy`"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:30
msgid ":class:`asyncio.DefaultEventLoopPolicy`"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:31
msgid ":class:`asyncio.WindowsSelectorEventLoopPolicy`"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:32
msgid ":class:`asyncio.WindowsProactorEventLoopPolicy`"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:33
msgid ":func:`asyncio.get_event_loop_policy`"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:34
msgid ":func:`asyncio.set_event_loop_policy`"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:36
msgid ""
"Users should use :func:`asyncio.run` or :class:`asyncio.Runner` with "
"*loop_factory* to use the desired event loop implementation."
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:39
msgid "For example, to use :class:`asyncio.SelectorEventLoop` on Windows::"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:41
msgid ""
"import asyncio\n"
"\n"
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:48
msgid "(Contributed by Kumar Aditya in :gh:`127949`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:50
#: ../../deprecations/pending-removal-in-future.rst:16
msgid ":mod:`builtins`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:52
msgid ""
"Bitwise inversion on boolean types, ``~True`` or ``~False`` has been "
"deprecated since Python 3.12, as it produces surprising and unintuitive "
"results (``-2`` and ``-1``). Use ``not x`` instead for the logical negation "
"of a Boolean. In the rare case that you need the bitwise inversion of the "
"underlying integer, convert to ``int`` explicitly (``~int(x)``)."
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:59
msgid ":mod:`functools`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:61
msgid ""
"Calling the Python implementation of :func:`functools.reduce` with "
"*function* or *sequence* as keyword arguments has been deprecated since "
"Python 3.14."
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:64
msgid ":mod:`logging`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:66
msgid ""
"Support for custom logging handlers with the *strm* argument is deprecated "
"and scheduled for removal in Python 3.16. Define handlers with the *stream* "
"argument instead. (Contributed by Mariusz Felisiak in :gh:`115032`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:70
msgid ":mod:`mimetypes`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:72
msgid ""
"Valid extensions start with a '.' or are empty for :meth:`mimetypes."
"MimeTypes.add_type`. Undotted extensions are deprecated and will raise a :"
"exc:`ValueError` in Python 3.16. (Contributed by Hugo van Kemenade in :gh:"
"`75223`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:78
msgid ":mod:`shutil`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:80
msgid ""
"The :class:`!ExecError` exception has been deprecated since Python 3.14. It "
"has not been used by any function in :mod:`!shutil` since Python 3.4, and is "
"now an alias of :exc:`RuntimeError`."
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:85
msgid ":mod:`symtable`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:87
msgid ""
"The :meth:`Class.get_methods <symtable.Class.get_methods>` method has been "
"deprecated since Python 3.14."
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:90
msgid ":mod:`sys`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:92
msgid ""
"The :func:`~sys._enablelegacywindowsfsencoding` function has been deprecated "
"since Python 3.13. Use the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable instead."
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:98
msgid ""
"The :func:`!sysconfig.expand_makefile_vars` function has been deprecated "
"since Python 3.14. Use the ``vars`` argument of :func:`sysconfig.get_paths` "
"instead."
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:102
msgid ":mod:`tarfile`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:104
msgid ""
"The undocumented and unused :attr:`!TarFile.tarfile` attribute has been "
"deprecated since Python 3.13."
msgstr ""

#: ../../deprecations/pending-removal-in-3.17.rst:2
msgid "Pending removal in Python 3.17"
msgstr ""

#: ../../deprecations/pending-removal-in-3.17.rst:6
msgid ""
"Before Python 3.14, old-style unions were implemented using the private "
"class ``typing._UnionGenericAlias``. This class is no longer needed for the "
"implementation, but it has been retained for backward compatibility, with "
"removal scheduled for Python 3.17. Users should use documented introspection "
"helpers like :func:`typing.get_origin` and :func:`typing.get_args` instead "
"of relying on private implementation details."
msgstr ""

#: ../../deprecations/pending-removal-in-3.19.rst:2
msgid "Pending removal in Python 3.19"
msgstr ""

#: ../../deprecations/pending-removal-in-3.19.rst:6
msgid ""
"Implicitly switching to the MSVC-compatible struct layout by setting :attr:"
"`~ctypes.Structure._pack_` but not :attr:`~ctypes.Structure._layout_` on non-"
"Windows platforms."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:2
#: ../../deprecations/pending-removal-in-future.rst:2
msgid "Pending removal in future versions"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:4
msgid ""
"The following APIs will be removed in the future, although there is "
"currently no date scheduled for their removal."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:7
msgid ":mod:`argparse`:"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:9
msgid ""
"Nesting argument groups and nesting mutually exclusive groups are deprecated."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:11
msgid ""
"Passing the undocumented keyword argument *prefix_chars* to :meth:`~argparse."
"ArgumentParser.add_argument_group` is now deprecated."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:14
msgid "The :class:`argparse.FileType` type converter is deprecated."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:18
msgid "``bool(NotImplemented)``."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:19
msgid ""
"Generators: ``throw(type, exc, tb)`` and ``athrow(type, exc, tb)`` signature "
"is deprecated: use ``throw(exc)`` and ``athrow(exc)`` instead, the single "
"argument signature."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:22
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  A syntax warning is raised "
"if the numeric literal is immediately followed by one of keywords :keyword:"
"`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:`in`, :"
"keyword:`is` and :keyword:`or`.  In a future release it will be changed to a "
"syntax error. (:gh:`87999`)"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:30
msgid ""
"Support for ``__index__()`` and ``__int__()`` method returning non-int type: "
"these methods will be required to return an instance of a strict subclass "
"of :class:`int`."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:33
msgid ""
"Support for ``__float__()`` method returning a strict subclass of :class:"
"`float`: these methods will be required to return an instance of :class:"
"`float`."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:36
msgid ""
"Support for ``__complex__()`` method returning a strict subclass of :class:"
"`complex`: these methods will be required to return an instance of :class:"
"`complex`."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:39
msgid "Delegation of ``int()`` to ``__trunc__()`` method."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:40
msgid ""
"Passing a complex number as the *real* or *imag* argument in the :func:"
"`complex` constructor is now deprecated; it should only be passed as a "
"single positional argument. (Contributed by Serhiy Storchaka in :gh:"
"`109218`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:45
msgid ""
":mod:`calendar`: ``calendar.January`` and ``calendar.February`` constants "
"are deprecated and replaced by :data:`calendar.JANUARY` and :data:`calendar."
"FEBRUARY`. (Contributed by Prince Roshan in :gh:`103636`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:50
msgid ""
":mod:`codecs`: use :func:`open` instead of :func:`codecs.open`. (:gh:"
"`133038`)"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:52
msgid ""
":attr:`codeobject.co_lnotab`: use the :meth:`codeobject.co_lines` method "
"instead."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:55
msgid ":mod:`datetime`:"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:57
msgid ""
":meth:`~datetime.datetime.utcnow`: use ``datetime.datetime.now(tz=datetime."
"UTC)``."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:59
msgid ""
":meth:`~datetime.datetime.utcfromtimestamp`: use ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:62
msgid ":mod:`gettext`: Plural value must be an integer."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:66
msgid ""
":func:`~importlib.util.cache_from_source` *debug_override* parameter is "
"deprecated: use the *optimization* parameter instead."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:69
msgid ":mod:`importlib.metadata`:"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:71
msgid "``EntryPoints`` tuple interface."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:72
msgid "Implicit ``None`` on return values."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:74
msgid ""
":mod:`logging`: the ``warn()`` method has been deprecated since Python 3.3, "
"use :meth:`~logging.warning` instead."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:77
msgid ""
":mod:`mailbox`: Use of StringIO input and text mode is deprecated, use "
"BytesIO and binary mode instead."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:80
msgid ""
":mod:`os`: Calling :func:`os.register_at_fork` in multi-threaded process."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:82
msgid ""
":class:`!pydoc.ErrorDuringImport`: A tuple value for *exc_info* parameter is "
"deprecated, use an exception instance."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:85
msgid ""
":mod:`re`: More strict rules are now applied for numerical group references "
"and group names in regular expressions.  Only sequence of ASCII digits is "
"now accepted as a numerical reference.  The group name in bytes patterns and "
"replacement strings can now only contain ASCII letters and digits and "
"underscore. (Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:92
msgid ""
":mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!sre_parse` modules."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:94
msgid ""
":mod:`shutil`: :func:`~shutil.rmtree`'s *onerror* parameter is deprecated in "
"Python 3.12; use the *onexc* parameter instead."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:97
msgid ":mod:`ssl` options and protocols:"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:99
msgid ":class:`ssl.SSLContext` without protocol argument is deprecated."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:100
msgid ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and :meth:"
"`!selected_npn_protocol` are deprecated: use ALPN instead."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:103
msgid "``ssl.OP_NO_SSL*`` options"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:104
msgid "``ssl.OP_NO_TLS*`` options"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:105
msgid "``ssl.PROTOCOL_SSLv3``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:106
msgid "``ssl.PROTOCOL_TLS``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:107
msgid "``ssl.PROTOCOL_TLSv1``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:108
msgid "``ssl.PROTOCOL_TLSv1_1``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:109
msgid "``ssl.PROTOCOL_TLSv1_2``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:110
msgid "``ssl.TLSVersion.SSLv3``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:111
msgid "``ssl.TLSVersion.TLSv1``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:112
msgid "``ssl.TLSVersion.TLSv1_1``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:114
msgid ":mod:`threading` methods:"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:116
msgid ""
":meth:`!threading.Condition.notifyAll`: use :meth:`~threading.Condition."
"notify_all`."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:117
msgid ":meth:`!threading.Event.isSet`: use :meth:`~threading.Event.is_set`."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:118
msgid ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use :"
"attr:`threading.Thread.daemon` attribute."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:120
msgid ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use :"
"attr:`threading.Thread.name` attribute."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:122
msgid ":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:123
msgid ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:125
msgid ":class:`typing.Text` (:gh:`92332`)."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:127
msgid ""
"The internal class ``typing._UnionGenericAlias`` is no longer used to "
"implement :class:`typing.Union`. To preserve compatibility with users using "
"this private class, a compatibility shim will be provided until at least "
"Python 3.17. (Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:132
msgid ""
":class:`unittest.IsolatedAsyncioTestCase`: it is deprecated to return a "
"value that is not ``None`` from a test case."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:135
msgid ""
":mod:`urllib.parse` deprecated functions: :func:`~urllib.parse.urlparse` "
"instead"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:137
msgid "``splitattr()``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:138
msgid "``splithost()``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:139
msgid "``splitnport()``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:140
msgid "``splitpasswd()``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:141
msgid "``splitport()``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:142
msgid "``splitquery()``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:143
msgid "``splittag()``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:144
msgid "``splittype()``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:145
msgid "``splituser()``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:146
msgid "``splitvalue()``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:147
msgid "``to_bytes()``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:149
msgid ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` should not do partial "
"writes."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:152
msgid ""
":mod:`xml.etree.ElementTree`: Testing the truth value of an :class:`~xml."
"etree.ElementTree.Element` is deprecated. In a future release it will always "
"return ``True``. Prefer explicit ``len(elem)`` or ``elem is not None`` tests "
"instead."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:157
msgid ""
":func:`sys._clear_type_cache` is deprecated: use :func:`sys."
"_clear_internal_caches` instead."
msgstr ""

#: ../../deprecations/index.rst:15
msgid "C API deprecations"
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:4
msgid ""
"The :c:func:`PyImport_ImportModuleNoBlock`: Use :c:func:"
"`PyImport_ImportModule` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:6
msgid ""
":c:func:`PyWeakref_GetObject` and :c:func:`PyWeakref_GET_OBJECT`: Use :c:"
"func:`PyWeakref_GetRef` instead. The `pythoncapi-compat project <https://"
"github.com/python/pythoncapi-compat/>`__ can be used to get :c:func:"
"`PyWeakref_GetRef` on Python 3.12 and older."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:10
msgid ""
":c:type:`Py_UNICODE` type and the :c:macro:`!Py_UNICODE_WIDE` macro: Use :c:"
"type:`wchar_t` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:12
msgid ""
":c:func:`!PyUnicode_AsDecodedObject`: Use :c:func:`PyCodec_Decode` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:14
msgid ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Use :c:func:`PyCodec_Decode` instead; "
"Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`str`, such as :class:`bytes`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:17
msgid ""
":c:func:`!PyUnicode_AsEncodedObject`: Use :c:func:`PyCodec_Encode` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:19
msgid ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Use :c:func:`PyCodec_Encode` instead; "
"Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`bytes`, such as :class:`str`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:22
msgid "Python initialization functions, deprecated in Python 3.13:"
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:24
msgid ""
":c:func:`Py_GetPath`: Use :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>` (:data:`sys.path`) instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:27
msgid ""
":c:func:`Py_GetPrefix`: Use :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) instead. Use :c:func:"
"`PyConfig_Get(\"prefix\") <PyConfig_Get>` (:data:`sys.prefix`) if :ref:"
"`virtual environments <venv-def>` need to be handled."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:32
msgid ""
":c:func:`Py_GetExecPrefix`: Use :c:func:`PyConfig_Get(\"base_exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_exec_prefix`) instead. Use :c:func:"
"`PyConfig_Get(\"exec_prefix\") <PyConfig_Get>` (:data:`sys.exec_prefix`) if :"
"ref:`virtual environments <venv-def>` need to be handled."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:38
msgid ""
":c:func:`Py_GetProgramFullPath`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:41
msgid ""
":c:func:`Py_GetProgramName`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:44
msgid ""
":c:func:`Py_GetPythonHome`: Use :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` or the :envvar:`PYTHONHOME` environment variable instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:48
msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-compat/"
">`__ can be used to get :c:func:`PyConfig_Get` on Python 3.13 and older."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:52
msgid ""
"Functions to configure Python's initialization, deprecated in Python 3.11:"
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:54
msgid ":c:func:`!PySys_SetArgvEx()`: Set :c:member:`PyConfig.argv` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:56
msgid ":c:func:`!PySys_SetArgv()`: Set :c:member:`PyConfig.argv` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:58
msgid ""
":c:func:`!Py_SetProgramName()`: Set :c:member:`PyConfig.program_name` "
"instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:60
msgid ":c:func:`!Py_SetPythonHome()`: Set :c:member:`PyConfig.home` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:62
msgid ""
":c:func:`PySys_ResetWarnOptions`: Clear :data:`sys.warnoptions` and :data:`!"
"warnings.filters` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:65
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:68
msgid "Global configuration variables:"
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:70
msgid ""
":c:var:`Py_DebugFlag`: Use :c:member:`PyConfig.parser_debug` or :c:func:"
"`PyConfig_Get(\"parser_debug\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:73
msgid ""
":c:var:`Py_VerboseFlag`: Use :c:member:`PyConfig.verbose` or :c:func:"
"`PyConfig_Get(\"verbose\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:76
msgid ""
":c:var:`Py_QuietFlag`: Use :c:member:`PyConfig.quiet` or :c:func:"
"`PyConfig_Get(\"quiet\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:79
msgid ""
":c:var:`Py_InteractiveFlag`: Use :c:member:`PyConfig.interactive` or :c:func:"
"`PyConfig_Get(\"interactive\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:82
msgid ""
":c:var:`Py_InspectFlag`: Use :c:member:`PyConfig.inspect` or :c:func:"
"`PyConfig_Get(\"inspect\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:85
msgid ""
":c:var:`Py_OptimizeFlag`: Use :c:member:`PyConfig.optimization_level` or :c:"
"func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:88
msgid ""
":c:var:`Py_NoSiteFlag`: Use :c:member:`PyConfig.site_import` or :c:func:"
"`PyConfig_Get(\"site_import\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:91
msgid ""
":c:var:`Py_BytesWarningFlag`: Use :c:member:`PyConfig.bytes_warning` or :c:"
"func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:94
msgid ""
":c:var:`Py_FrozenFlag`: Use :c:member:`PyConfig.pathconfig_warnings` or :c:"
"func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:97
msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: Use :c:member:`PyConfig.use_environment` "
"or :c:func:`PyConfig_Get(\"use_environment\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:100
msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: Use :c:member:`PyConfig.write_bytecode` "
"or :c:func:`PyConfig_Get(\"write_bytecode\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:103
msgid ""
":c:var:`Py_NoUserSiteDirectory`: Use :c:member:`PyConfig."
"user_site_directory` or :c:func:`PyConfig_Get(\"user_site_directory\") "
"<PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:106
msgid ""
":c:var:`Py_UnbufferedStdioFlag`: Use :c:member:`PyConfig.buffered_stdio` or :"
"c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:109
msgid ""
":c:var:`Py_HashRandomizationFlag`: Use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed` or :c:func:`PyConfig_Get(\"hash_seed\") "
"<PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:113
msgid ""
":c:var:`Py_IsolatedFlag`: Use :c:member:`PyConfig.isolated` or :c:func:"
"`PyConfig_Get(\"isolated\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:116
msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: Use :c:member:`PyPreConfig."
"legacy_windows_fs_encoding` or :c:func:"
"`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:119
msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: Use :c:member:`PyConfig."
"legacy_windows_stdio` or :c:func:`PyConfig_Get(\"legacy_windows_stdio\") "
"<PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:122
msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`, :c:var:`!"
"Py_HasFileSystemDefaultEncoding`: Use :c:member:`PyConfig."
"filesystem_encoding` or :c:func:`PyConfig_Get(\"filesystem_encoding\") "
"<PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:125
msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: Use :c:member:`PyConfig."
"filesystem_errors` or :c:func:`PyConfig_Get(\"filesystem_errors\") "
"<PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:128
msgid ""
":c:var:`!Py_UTF8Mode`: Use :c:member:`PyPreConfig.utf8_mode` or :c:func:"
"`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>` instead. (see :c:func:"
"`Py_PreInitialize`)"
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:133
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` to set these options. Or :c:func:`PyConfig_Get` can be used to "
"get these options at runtime."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:2
msgid "Pending removal in Python 3.18"
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:4
msgid "Deprecated private functions (:gh:`128863`):"
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:6
msgid ":c:func:`!_PyBytes_Join`: use :c:func:`PyBytes_Join`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:7
msgid ""
":c:func:`!_PyDict_GetItemStringWithError`: use :c:func:"
"`PyDict_GetItemStringRef`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:8
msgid ":c:func:`!_PyDict_Pop()`: :c:func:`PyDict_Pop`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:9
msgid ":c:func:`!_PyLong_Sign()`: use :c:func:`PyLong_GetSign`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:10
msgid ""
":c:func:`!_PyLong_FromDigits` and :c:func:`!_PyLong_New`: use :c:func:"
"`PyLongWriter_Create`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:12
msgid ""
":c:func:`!_PyThreadState_UncheckedGet`: use :c:func:"
"`PyThreadState_GetUnchecked`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:13
msgid ":c:func:`!_PyUnicode_AsString`: use :c:func:`PyUnicode_AsUTF8`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:14
msgid ""
":c:func:`!_PyUnicodeWriter_Init`: replace ``_PyUnicodeWriter_Init(&writer)`` "
"with :c:func:`writer = PyUnicodeWriter_Create(0) <PyUnicodeWriter_Create>`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:17
msgid ""
":c:func:`!_PyUnicodeWriter_Finish`: replace "
"``_PyUnicodeWriter_Finish(&writer)`` with :c:func:"
"`PyUnicodeWriter_Finish(writer) <PyUnicodeWriter_Finish>`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:20
msgid ""
":c:func:`!_PyUnicodeWriter_Dealloc`: replace "
"``_PyUnicodeWriter_Dealloc(&writer)`` with :c:func:"
"`PyUnicodeWriter_Discard(writer) <PyUnicodeWriter_Discard>`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:23
msgid ""
":c:func:`!_PyUnicodeWriter_WriteChar`: replace "
"``_PyUnicodeWriter_WriteChar(&writer, ch)`` with :c:func:"
"`PyUnicodeWriter_WriteChar(writer, ch) <PyUnicodeWriter_WriteChar>`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:26
msgid ""
":c:func:`!_PyUnicodeWriter_WriteStr`: replace "
"``_PyUnicodeWriter_WriteStr(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteStr(writer, str) <PyUnicodeWriter_WriteStr>`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:29
msgid ""
":c:func:`!_PyUnicodeWriter_WriteSubstring`: replace "
"``_PyUnicodeWriter_WriteSubstring(&writer, str, start, end)`` with :c:func:"
"`PyUnicodeWriter_WriteSubstring(writer, str, start, end) "
"<PyUnicodeWriter_WriteSubstring>`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:32
msgid ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: replace "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteUTF8(writer, str) <PyUnicodeWriter_WriteUTF8>`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:35
msgid ""
":c:func:`!_PyUnicodeWriter_WriteLatin1String`: replace "
"``_PyUnicodeWriter_WriteLatin1String(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteUTF8(writer, str) <PyUnicodeWriter_WriteUTF8>`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:38
msgid ":c:func:`!_PyUnicodeWriter_Prepare`: (no replacement)."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:39
msgid ":c:func:`!_PyUnicodeWriter_PrepareKind`: (no replacement)."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:40
msgid ":c:func:`!_Py_HashPointer`: use :c:func:`Py_HashPointer`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:41
msgid ":c:func:`!_Py_fopen_obj`: use :c:func:`Py_fopen`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:43
msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-compat/"
">`__ can be used to get these new public functions on Python 3.13 and older."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:4
msgid ""
"The following APIs are deprecated and will be removed, although there is "
"currently no date scheduled for their removal."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:7
msgid ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: Unneeded since Python 3.8."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:9
msgid ":c:func:`PyErr_Fetch`: Use :c:func:`PyErr_GetRaisedException` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:11
msgid ""
":c:func:`PyErr_NormalizeException`: Use :c:func:`PyErr_GetRaisedException` "
"instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:13
msgid ""
":c:func:`PyErr_Restore`: Use :c:func:`PyErr_SetRaisedException` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:15
msgid ""
":c:func:`PyModule_GetFilename`: Use :c:func:`PyModule_GetFilenameObject` "
"instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:17
msgid ":c:func:`PyOS_AfterFork`: Use :c:func:`PyOS_AfterFork_Child` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:19
msgid ""
":c:func:`PySlice_GetIndicesEx`: Use :c:func:`PySlice_Unpack` and :c:func:"
"`PySlice_AdjustIndices` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:21
msgid ":c:func:`PyUnicode_READY`: Unneeded since Python 3.12"
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:23
msgid ":c:func:`!PyErr_Display`: Use :c:func:`PyErr_DisplayException` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:25
msgid ""
":c:func:`!_PyErr_ChainExceptions`: Use :c:func:`!_PyErr_ChainExceptions1` "
"instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:27
msgid ""
":c:member:`!PyBytesObject.ob_shash` member: call :c:func:`PyObject_Hash` "
"instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:29
msgid "Thread Local Storage (TLS) API:"
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:31
msgid ""
":c:func:`PyThread_create_key`: Use :c:func:`PyThread_tss_alloc` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:33
msgid ":c:func:`PyThread_delete_key`: Use :c:func:`PyThread_tss_free` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:35
msgid ""
":c:func:`PyThread_set_key_value`: Use :c:func:`PyThread_tss_set` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:37
msgid ""
":c:func:`PyThread_get_key_value`: Use :c:func:`PyThread_tss_get` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:39
msgid ""
":c:func:`PyThread_delete_key_value`: Use :c:func:`PyThread_tss_delete` "
"instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:41
msgid ":c:func:`PyThread_ReInitTLS`: Unneeded since Python 3.7."
msgstr ""
