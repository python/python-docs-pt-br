# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2020-01-09 16:38+0000\n"
"Last-Translator: Aline Balogh <linecrist@hotmail.com>\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/"
"python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../faq/design.rst:3
msgid "Design and History FAQ"
msgstr "Design e Histórico FAQ"

#: ../../faq/design.rst:6
msgid "Contents"
msgstr "Conteúdo"

#: ../../faq/design.rst:11
msgid "Why does Python use indentation for grouping of statements?"
msgstr "Por que o Python usa indentação para agrupamento de declarações?"

#: ../../faq/design.rst:13
msgid ""
"Guido van Rossum believes that using indentation for grouping is extremely "
"elegant and contributes a lot to the clarity of the average Python program. "
"Most people learn to love this feature after a while."
msgstr ""
"Guido van Rossum acredita que usar indentação para agrupamento é "
"extremamente elegante e contribui muito para a clareza do programa Python. "
"Muitas pessoas aprendem a amar esta ferramente depois de um tempo."

#: ../../faq/design.rst:17
msgid ""
"Since there are no begin/end brackets there cannot be a disagreement between "
"grouping perceived by the parser and the human reader.  Occasionally C "
"programmers will encounter a fragment of code like this::"
msgstr ""
"Uma vez que não há colchetes de início / fim, não pode haver um desacordo "
"entre o agrupamento percebido pelo analisador e pelo leitor humano. "
"Ocasionalmente, programadores C irão encontrar um fragmento de código como "
"este::"

#: ../../faq/design.rst:26
msgid ""
"Only the ``x++`` statement is executed if the condition is true, but the "
"indentation leads you to believe otherwise.  Even experienced C programmers "
"will sometimes stare at it a long time wondering why ``y`` is being "
"decremented even for ``x > y``."
msgstr ""

#: ../../faq/design.rst:31
msgid ""
"Because there are no begin/end brackets, Python is much less prone to coding-"
"style conflicts.  In C there are many different ways to place the braces. If "
"you're used to reading and writing code that uses one style, you will feel "
"at least slightly uneasy when reading (or being required to write) another "
"style."
msgstr ""

#: ../../faq/design.rst:36
msgid ""
"Many coding styles place begin/end brackets on a line by themselves.  This "
"makes programs considerably longer and wastes valuable screen space, making "
"it harder to get a good overview of a program.  Ideally, a function should "
"fit on one screen (say, 20--30 lines).  20 lines of Python can do a lot more "
"work than 20 lines of C.  This is not solely due to the lack of begin/end "
"brackets -- the lack of declarations and the high-level data types are also "
"responsible -- but the indentation-based syntax certainly helps."
msgstr ""
"Muitos estilos de codificação colocam chaves de início / fim em uma linha "
"sozinhos. Isto torna os programas consideravelmente mais longos e desperdiça "
"espaço valioso na tela, dificultando a obtenção de uma boa visão geral de um "
"programa. Idealmente, uma função deve caber em uma tela (digamos, 20 a 30 "
"linhas). 20 linhas de Python podem fazer muito mais trabalho do que 20 "
"linhas de C. Isso não se deve apenas à falta de colchetes de início/fim -- a "
"falta de declarações e os tipos de dados de alto nível também são "
"responsáveis -- mas a sintaxe baseada em indentação certamente ajuda."

#: ../../faq/design.rst:46
msgid "Why am I getting strange results with simple arithmetic operations?"
msgstr ""
"Por que eu estou recebendo resultados estranhos com simples operações "
"aritméticas?"

#: ../../faq/design.rst:48
msgid "See the next question."
msgstr "Veja a próxima questão."

#: ../../faq/design.rst:52
msgid "Why are floating point calculations so inaccurate?"
msgstr ""

#: ../../faq/design.rst:54
msgid "People are often very surprised by results like this::"
msgstr ""

#: ../../faq/design.rst:59
msgid ""
"and think it is a bug in Python. It's not.  This has nothing to do with "
"Python, but with how the underlying C platform handles floating point "
"numbers, and ultimately with the inaccuracies introduced when writing down "
"numbers as a string of a fixed number of digits."
msgstr ""

#: ../../faq/design.rst:64
msgid ""
"The internal representation of floating point numbers uses a fixed number of "
"binary digits to represent a decimal number.  Some decimal numbers can't be "
"represented exactly in binary, resulting in small roundoff errors."
msgstr ""

#: ../../faq/design.rst:68
msgid ""
"In decimal math, there are many numbers that can't be represented with a "
"fixed number of decimal digits, e.g.  1/3 = 0.3333333333......."
msgstr ""

#: ../../faq/design.rst:71
msgid ""
"In base 2, 1/2 = 0.1, 1/4 = 0.01, 1/8 = 0.001, etc.  .2 equals 2/10 equals "
"1/5, resulting in the binary fractional number 0.001100110011001..."
msgstr ""

#: ../../faq/design.rst:74
msgid ""
"Floating point numbers only have 32 or 64 bits of precision, so the digits "
"are cut off at some point, and the resulting number is 0.199999999999999996 "
"in decimal, not 0.2."
msgstr ""

#: ../../faq/design.rst:78
msgid ""
"A floating point number's ``repr()`` function prints as many digits are "
"necessary to make ``eval(repr(f)) == f`` true for any float f.  The "
"``str()`` function prints fewer digits and this often results in the more "
"sensible number that was probably intended::"
msgstr ""

#: ../../faq/design.rst:88
msgid ""
"One of the consequences of this is that it is error-prone to compare the "
"result of some computation to a float with ``==``. Tiny inaccuracies may "
"mean that ``==`` fails.  Instead, you have to check that the difference "
"between the two numbers is less than a certain threshold::"
msgstr ""

#: ../../faq/design.rst:99
msgid ""
"Please see the chapter on :ref:`floating point arithmetic <tut-fp-issues>` "
"in the Python tutorial for more information."
msgstr ""

#: ../../faq/design.rst:104
msgid "Why are Python strings immutable?"
msgstr "Por que strings do Python são imutáveis?"

#: ../../faq/design.rst:106
msgid "There are several advantages."
msgstr "Existem várias vantagens."

#: ../../faq/design.rst:108
msgid ""
"One is performance: knowing that a string is immutable means we can allocate "
"space for it at creation time, and the storage requirements are fixed and "
"unchanging.  This is also one of the reasons for the distinction between "
"tuples and lists."
msgstr ""
"Uma delas é o desempenho: saber que uma string é imutável significa que "
"podemos alocar espaço para ela no momento da criação, e os requisitos de "
"armazenamento são fixos e imutáveis. Esta é também uma das razões para a "
"distinção entre tuplas e listas."

#: ../../faq/design.rst:113
msgid ""
"Another advantage is that strings in Python are considered as \"elemental\" "
"as numbers.  No amount of activity will change the value 8 to anything else, "
"and in Python, no amount of activity will change the string \"eight\" to "
"anything else."
msgstr ""
"Outra vantagem é que strings em Python são consideradas tão “elementares” "
"quanto números. Nenhuma atividade alterará o valor 8 para qualquer outra "
"coisa e, em Python, nenhuma atividade alterará a string “oito” para qualquer "
"outra coisa."

#: ../../faq/design.rst:121
msgid "Why must 'self' be used explicitly in method definitions and calls?"
msgstr ""
"Por que o 'self' deve ser usado explicitamente em definições de método e "
"chamadas?"

#: ../../faq/design.rst:123
msgid ""
"The idea was borrowed from Modula-3.  It turns out to be very useful, for a "
"variety of reasons."
msgstr ""
"A ideia foi emprestada do Modula-2. Acontece dela ser muito útil, por vários "
"motivos."

#: ../../faq/design.rst:126
msgid ""
"First, it's more obvious that you are using a method or instance attribute "
"instead of a local variable.  Reading ``self.x`` or ``self.meth()`` makes it "
"absolutely clear that an instance variable or method is used even if you "
"don't know the class definition by heart.  In C++, you can sort of tell by "
"the lack of a local variable declaration (assuming globals are rare or "
"easily recognizable) -- but in Python, there are no local variable "
"declarations, so you'd have to look up the class definition to be sure.  "
"Some C++ and Java coding standards call for instance attributes to have an "
"``m_`` prefix, so this explicitness is still useful in those languages, too."
msgstr ""
"Primeiro, é mais óbvio que você está usando um método ou atributo de "
"instância em vez de uma variável local. Ler ``self.x`` ou ``self.meth()`` "
"deixa absolutamente claro que uma variável de instância ou método é usado "
"mesmo se você não souber a definição da classe de cor. Em C++, você pode "
"perceber pela falta de uma declaração de variável local (presumindo que "
"globais são raras ou facilmente reconhecíveis) -- mas no Python não há "
"declarações de variáveis locais, então você teria que procurar a definição "
"de classe para tenha certeza. Alguns padrões de codificação C++ e Java "
"exigem que atributos de instância tenham um prefixo ``m_``, portanto, essa "
"explicitação ainda é útil nessas linguagens também."

#: ../../faq/design.rst:136
msgid ""
"Second, it means that no special syntax is necessary if you want to "
"explicitly reference or call the method from a particular class.  In C++, if "
"you want to use a method from a base class which is overridden in a derived "
"class, you have to use the ``::`` operator -- in Python you can write "
"``baseclass.methodname(self, <argument list>)``.  This is particularly "
"useful for :meth:`__init__` methods, and in general in cases where a derived "
"class method wants to extend the base class method of the same name and thus "
"has to call the base class method somehow."
msgstr ""

#: ../../faq/design.rst:145
msgid ""
"Finally, for instance variables it solves a syntactic problem with "
"assignment: since local variables in Python are (by definition!) those "
"variables to which a value is assigned in a function body (and that aren't "
"explicitly declared global), there has to be some way to tell the "
"interpreter that an assignment was meant to assign to an instance variable "
"instead of to a local variable, and it should preferably be syntactic (for "
"efficiency reasons).  C++ does this through declarations, but Python doesn't "
"have declarations and it would be a pity having to introduce them just for "
"this purpose.  Using the explicit ``self.var`` solves this nicely.  "
"Similarly, for using instance variables, having to write ``self.var`` means "
"that references to unqualified names inside a method don't have to search "
"the instance's directories.  To put it another way, local variables and "
"instance variables live in two different namespaces, and you need to tell "
"Python which namespace to use."
msgstr ""
"Finalmente, por exemplo, variáveis, ele resolve um problema sintático com "
"atribuição: uma vez que variáveis locais em Python são (por definição!) "
"aquelas variáveis às quais um valor é atribuído em um corpo de função (e que "
"não são explicitamente declaradas globais), é necessário deve haver alguma "
"forma de dizer ao interpretador que uma atribuição deveria ser atribuída a "
"uma variável de instância em vez de a uma variável local, e deve ser "
"preferencialmente sintática (por razões de eficiência). C++ faz isso através "
"de declarações, mas Python não possui declarações e seria uma pena ter que "
"introduzi-las apenas para esse fim. Usar o ``self.var`` explícito resolve "
"isso muito bem. Da mesma forma, para usar variáveis de instância, ter que "
"escrever ``self.var`` significa que referências a nomes não qualificados "
"dentro de um método não precisam pesquisar nos diretórios da instância. Em "
"outras palavras, variáveis locais e variáveis de instância residem em dois "
"espaço de nomes diferentes, e você precisa informar ao Python qual espaço de "
"nomes usar."

#: ../../faq/design.rst:161
msgid "Why can't I use an assignment in an expression?"
msgstr "Por que não posso usar uma atribuição em uma expressão?"

#: ../../faq/design.rst:163
msgid ""
"Many people used to C or Perl complain that they want to use this C idiom:"
msgstr ""

#: ../../faq/design.rst:171
msgid "where in Python you're forced to write this::"
msgstr ""

#: ../../faq/design.rst:179
msgid ""
"The reason for not allowing assignment in Python expressions is a common, "
"hard-to-find bug in those other languages, caused by this construct:"
msgstr ""

#: ../../faq/design.rst:191
msgid ""
"The error is a simple typo: ``x = 0``, which assigns 0 to the variable "
"``x``, was written while the comparison ``x == 0`` is certainly what was "
"intended."
msgstr ""

#: ../../faq/design.rst:194
msgid ""
"Many alternatives have been proposed.  Most are hacks that save some typing "
"but use arbitrary or cryptic syntax or keywords, and fail the simple "
"criterion for language change proposals: it should intuitively suggest the "
"proper meaning to a human reader who has not yet been introduced to the "
"construct."
msgstr ""

#: ../../faq/design.rst:199
msgid ""
"An interesting phenomenon is that most experienced Python programmers "
"recognize the ``while True`` idiom and don't seem to be missing the "
"assignment in expression construct much; it's only newcomers who express a "
"strong desire to add this to the language."
msgstr ""

#: ../../faq/design.rst:204
msgid ""
"There's an alternative way of spelling this that seems attractive but is "
"generally less robust than the \"while True\" solution::"
msgstr ""

#: ../../faq/design.rst:212
msgid ""
"The problem with this is that if you change your mind about exactly how you "
"get the next line (e.g. you want to change it into ``sys.stdin.readline()``) "
"you have to remember to change two places in your program -- the second "
"occurrence is hidden at the bottom of the loop."
msgstr ""

#: ../../faq/design.rst:217
msgid ""
"The best approach is to use iterators, making it possible to loop through "
"objects using the ``for`` statement.  For example, in the current version of "
"Python file objects support the iterator protocol, so you can now write "
"simply::"
msgstr ""

#: ../../faq/design.rst:227
msgid ""
"Why does Python use methods for some functionality (e.g. list.index()) but "
"functions for other (e.g. len(list))?"
msgstr ""
"Por que o Python usa métodos para algumas funcionalidades (ex: list.index()) "
"mas funções para outras (ex: len(list))?"

#: ../../faq/design.rst:229
msgid "As Guido said:"
msgstr "Como Guido disse:"

#: ../../faq/design.rst:231
msgid ""
"(a) For some operations, prefix notation just reads better than postfix -- "
"prefix (and infix!) operations have a long tradition in mathematics which "
"likes notations where the visuals help the mathematician thinking about a "
"problem. Compare the easy with which we rewrite a formula like x*(a+b) into "
"x*a + x*b to the clumsiness of doing the same thing using a raw OO notation."
msgstr ""
"(a) Para algumas operações, a notação de prefixo é melhor lida do que as "
"operações de prefixo (e infixo!) têm uma longa tradição em matemática que "
"gosta de notações onde os recursos visuais ajudam o matemático a pensar "
"sobre um problema. Compare a facilidade com que reescrevemos uma fórmula "
"como x*(a+b) em x*a + x*b com a falta de jeito de fazer a mesma coisa usando "
"uma notação OO bruta."

#: ../../faq/design.rst:238
msgid ""
"(b) When I read code that says len(x) I *know* that it is asking for the "
"length of something. This tells me two things: the result is an integer, and "
"the argument is some kind of container. To the contrary, when I read x."
"len(), I have to already know that x is some kind of container implementing "
"an interface or inheriting from a class that has a standard len(). Witness "
"the confusion we occasionally have when a class that is not implementing a "
"mapping has a get() or keys() method, or something that isn't a file has a "
"write() method."
msgstr ""
"(b) Quando leio o código que diz len(x) eu *sei* que ele está perguntando o "
"comprimento de alguma coisa. Isso me diz duas coisas: o resultado é um "
"número inteiro e o argumento é algum tipo de contêiner. Pelo contrário, "
"quando leio x.len(), já devo saber que x é algum tipo de contêiner "
"implementando uma interface ou herdando de uma classe que possui um len() "
"padrão. Veja a confusão que ocasionalmente temos quando uma classe que não "
"está implementando um mapeamento tem um método get() ou keys(), ou algo que "
"não é um arquivo tem um método write()."

#: ../../faq/design.rst:265
msgid "https://mail.python.org/pipermail/python-3000/2006-November/004643.html"
msgstr ""
"https://mail.python.org/pipermail/python-3000/2006-November/004643.html"

#: ../../faq/design.rst:251
msgid "Why is join() a string method instead of a list or tuple method?"
msgstr ""
"Por que o join() é um método de string em vez de ser um método de lista ou "
"tupla?"

#: ../../faq/design.rst:253
msgid ""
"Strings became much more like other standard types starting in Python 1.6, "
"when methods were added which give the same functionality that has always "
"been available using the functions of the string module.  Most of these new "
"methods have been widely accepted, but the one which appears to make some "
"programmers feel uncomfortable is::"
msgstr ""
"Strings se tornaram muito parecidas com outros tipos padrão a partir do "
"Python 1.6, quando métodos que dão a mesma funcionalidade que sempre esteve "
"disponível utilizando as funções do módulo de string foram adicionados. A "
"maior parte desses novos métodos foram amplamente aceitos, mas o que parece "
"deixar alguns programadores desconfortáveis é::"

#: ../../faq/design.rst:261
msgid "which gives the result::"
msgstr "que dá o resultado::"

#: ../../faq/design.rst:265
msgid "There are two common arguments against this usage."
msgstr "Existem dois argumentos comuns contra esse uso."

#: ../../faq/design.rst:267
msgid ""
"The first runs along the lines of: \"It looks really ugly using a method of "
"a string literal (string constant)\", to which the answer is that it might, "
"but a string literal is just a fixed value. If the methods are to be allowed "
"on names bound to strings there is no logical reason to make them "
"unavailable on literals."
msgstr ""
"O primeiro segue as linhas de: \"Parece muito feio usar um método de uma "
"string literal (constante de string)\", para o qual a resposta é que pode, "
"mas uma string literal é apenas um valor fixo. Se os métodos devem ser "
"permitidos em nomes vinculados a strings, não há razão lógica para torná-los "
"indisponíveis em literais."

#: ../../faq/design.rst:273
msgid ""
"The second objection is typically cast as: \"I am really telling a sequence "
"to join its members together with a string constant\".  Sadly, you aren't.  "
"For some reason there seems to be much less difficulty with having :meth:"
"`~str.split` as a string method, since in that case it is easy to see that ::"
msgstr ""
"A segunda objeção é normalmente formulada como: \"Na verdade, estou dizendo "
"a uma sequência para unir seus membros com uma constante de string\". "
"Infelizmente, você não está. Por alguma razão parece haver muito menos "
"dificuldade em ter :meth:`~str.split` como um método string, já que nesse "
"caso é fácil ver que ::"

#: ../../faq/design.rst:280
msgid ""
"is an instruction to a string literal to return the substrings delimited by "
"the given separator (or, by default, arbitrary runs of white space).  In "
"this case a Unicode string returns a list of Unicode strings, an ASCII "
"string returns a list of ASCII strings, and everyone is happy."
msgstr ""

#: ../../faq/design.rst:285
msgid ""
":meth:`~str.join` is a string method because in using it you are telling the "
"separator string to iterate over a sequence of strings and insert itself "
"between adjacent elements.  This method can be used with any argument which "
"obeys the rules for sequence objects, including any new classes you might "
"define yourself."
msgstr ""

#: ../../faq/design.rst:290
msgid ""
"Because this is a string method it can work for Unicode strings as well as "
"plain ASCII strings.  If ``join()`` were a method of the sequence types then "
"the sequence types would have to decide which type of string to return "
"depending on the type of the separator."
msgstr ""

#: ../../faq/design.rst:297
msgid ""
"If none of these arguments persuade you, then for the moment you can "
"continue to use the ``join()`` function from the string module, which allows "
"you to write ::"
msgstr ""

#: ../../faq/design.rst:304
msgid "How fast are exceptions?"
msgstr "O quão rápidas são as exceções?"

#: ../../faq/design.rst:306
msgid ""
"A try/except block is extremely efficient if no exceptions are raised.  "
"Actually catching an exception is expensive.  In versions of Python prior to "
"2.0 it was common to use this idiom::"
msgstr ""
"Um bloco de try/except é extremamente eficiente se nenhuma exceção for "
"levantada. Na verdade, capturar uma exceção custa caro. Em versões do Python "
"anteriores a 2.0 era como utilizar esse idioma::"

#: ../../faq/design.rst:316
msgid ""
"This only made sense when you expected the dict to have the key almost all "
"the time.  If that wasn't the case, you coded it like this::"
msgstr ""
"Isso somente fazia sentido quando você esperava que o dicionário tivesse uma "
"chave quase que toda vez. Se esse não fosse o caso, você escrevia desta "
"maneira::"

#: ../../faq/design.rst:326
msgid ""
"In Python 2.0 and higher, you can code this as ``value = mydict."
"setdefault(key, getvalue(key))``."
msgstr ""

#: ../../faq/design.rst:331
msgid "Why isn't there a switch or case statement in Python?"
msgstr "Por que não existe uma instrução de switch ou case no Python?"

#: ../../faq/design.rst:333
msgid ""
"You can do this easily enough with a sequence of ``if... elif... elif... "
"else``. There have been some proposals for switch statement syntax, but "
"there is no consensus (yet) on whether and how to do range tests.  See :pep:"
"`275` for complete details and the current status."
msgstr ""

#: ../../faq/design.rst:338
msgid ""
"For cases where you need to choose from a very large number of "
"possibilities, you can create a dictionary mapping case values to functions "
"to call.  For example::"
msgstr ""
"Para casos em que você precisa escolher entre um grande número de "
"possibilidades, você pode criar um dicionário mapeando valores de caso para "
"funções a serem chamadas. Por exemplo::"

#: ../../faq/design.rst:352
msgid ""
"For calling methods on objects, you can simplify yet further by using the :"
"func:`getattr` built-in to retrieve methods with a particular name::"
msgstr ""
"Para chamar métodos em objetos, você pode simplificar ainda mais usando olá "
"função embutida :func:`getattr` para recuperar métodos com um nome "
"específico::"

#: ../../faq/design.rst:364
msgid ""
"It's suggested that you use a prefix for the method names, such as "
"``visit_`` in this example.  Without such a prefix, if values are coming "
"from an untrusted source, an attacker would be able to call any method on "
"your object."
msgstr ""
"É sugerido que você use um prefixo para os nomes dos métodos, como "
"``visit_`` neste exemplo. Sem esse prefixo, se os valores vierem de uma "
"fonte não confiável, um invasor poderá chamar qualquer método no seu objeto."

#: ../../faq/design.rst:370
msgid ""
"Can't you emulate threads in the interpreter instead of relying on an OS-"
"specific thread implementation?"
msgstr ""
"Você não pode emular threads no interpretador em vez de confiar em uma "
"implementação de thread específica do sistema operacional?"

#: ../../faq/design.rst:372
msgid ""
"Answer 1: Unfortunately, the interpreter pushes at least one C stack frame "
"for each Python stack frame.  Also, extensions can call back into Python at "
"almost random moments.  Therefore, a complete threads implementation "
"requires thread support for C."
msgstr ""
"Resposta 1: Infelizmente, o interpretador envia pelo menos um quadro de "
"pilha C para cada quadro de pilha Python. Além disso, as extensões podem "
"retornar ao Python em momentos quase aleatórios. Portanto, uma implementação "
"completa de threads requer suporte de thread para C."

#: ../../faq/design.rst:377
msgid ""
"Answer 2: Fortunately, there is `Stackless Python <http://www.stackless."
"com>`_, which has a completely redesigned interpreter loop that avoids the C "
"stack."
msgstr ""

#: ../../faq/design.rst:382
msgid "Why can't lambda expressions contain statements?"
msgstr "Por que expressões lambda não podem conter instruções?"

#: ../../faq/design.rst:384
msgid ""
"Python lambda expressions cannot contain statements because Python's "
"syntactic framework can't handle statements nested inside expressions.  "
"However, in Python, this is not a serious problem.  Unlike lambda forms in "
"other languages, where they add functionality, Python lambdas are only a "
"shorthand notation if you're too lazy to define a function."
msgstr ""
"Expressões lambda no Python não podem conter instruções porque o framework "
"sintático do Python não consegue lidar com instruções aninhadas dentro de "
"expressões. No entanto, no Python, isso não é um problema sério. "
"Diferentemente das formas de lambda em outras linguagens, onde elas "
"adicionam funcionalidade, lambdas de Python são apenas notações "
"simplificadas se você tiver muita preguiça de definir uma função."

#: ../../faq/design.rst:390
msgid ""
"Functions are already first class objects in Python, and can be declared in "
"a local scope.  Therefore the only advantage of using a lambda instead of a "
"locally-defined function is that you don't need to invent a name for the "
"function -- but that's just a local variable to which the function object "
"(which is exactly the same type of object that a lambda expression yields) "
"is assigned!"
msgstr ""
"Funções já são objetos de primeira classe em Python, e podem ser declaradas "
"em um escopo local. Portanto a única vantagem de usar um lambda em vez de "
"uma função definida localmente é que você não precisa inventar um nome para "
"a função -- mas esta só é uma variável local para a qual o objeto da função "
"(que é exatamente do mesmo tipo de um objeto que uma expressão lambda "
"carrega) é atribuído."

#: ../../faq/design.rst:398
msgid "Can Python be compiled to machine code, C or some other language?"
msgstr ""
"O Python pode ser compilado para linguagem de máquina, C ou alguma outra "
"linguagem?"

#: ../../faq/design.rst:400
msgid ""
"`Cython <http://cython.org/>`_ compiles a modified version of Python with "
"optional annotations into C extensions.  `Nuitka <http://www.nuitka.net/>`_ "
"is an up-and-coming compiler of Python into C++ code, aiming to support the "
"full Python language. For compiling to Java you can consider `VOC <https://"
"voc.readthedocs.io>`_."
msgstr ""

#: ../../faq/design.rst:408
msgid "How does Python manage memory?"
msgstr "Como o Python gerencia memória?"

#: ../../faq/design.rst:410
msgid ""
"The details of Python memory management depend on the implementation.  The "
"standard C implementation of Python uses reference counting to detect "
"inaccessible objects, and another mechanism to collect reference cycles, "
"periodically executing a cycle detection algorithm which looks for "
"inaccessible cycles and deletes the objects involved. The :mod:`gc` module "
"provides functions to perform a garbage collection, obtain debugging "
"statistics, and tune the collector's parameters."
msgstr ""

#: ../../faq/design.rst:418
msgid ""
"Jython relies on the Java runtime so the JVM's garbage collector is used.  "
"This difference can cause some subtle porting problems if your Python code "
"depends on the behavior of the reference counting implementation."
msgstr ""

#: ../../faq/design.rst:424
msgid ""
"Sometimes objects get stuck in tracebacks temporarily and hence are not "
"deallocated when you might expect.  Clear the tracebacks with::"
msgstr ""

#: ../../faq/design.rst:431
msgid ""
"Tracebacks are used for reporting errors, implementing debuggers and related "
"things.  They contain a portion of the program state extracted during the "
"handling of an exception (usually the most recent exception)."
msgstr ""

#: ../../faq/design.rst:435
msgid ""
"In the absence of circularities and tracebacks, Python programs do not need "
"to manage memory explicitly."
msgstr ""

#: ../../faq/design.rst:438
msgid ""
"Why doesn't Python use a more traditional garbage collection scheme?  For "
"one thing, this is not a C standard feature and hence it's not portable.  "
"(Yes, we know about the Boehm GC library.  It has bits of assembler code for "
"*most* common platforms, not for all of them, and although it is mostly "
"transparent, it isn't completely transparent; patches are required to get "
"Python to work with it.)"
msgstr ""

#: ../../faq/design.rst:445
msgid ""
"Traditional GC also becomes a problem when Python is embedded into other "
"applications.  While in a standalone Python it's fine to replace the "
"standard malloc() and free() with versions provided by the GC library, an "
"application embedding Python may want to have its *own* substitute for "
"malloc() and free(), and may not want Python's.  Right now, Python works "
"with anything that implements malloc() and free() properly."
msgstr ""

#: ../../faq/design.rst:452
msgid ""
"In Jython, the following code (which is fine in CPython) will probably run "
"out of file descriptors long before it runs out of memory::"
msgstr ""

#: ../../faq/design.rst:459
msgid ""
"Using the current reference counting and destructor scheme, each new "
"assignment to f closes the previous file.  Using GC, this is not "
"guaranteed.  If you want to write code that will work with any Python "
"implementation, you should explicitly close the file or use the :keyword:"
"`with` statement; this will work regardless of GC::"
msgstr ""

#: ../../faq/design.rst:471
msgid "Why isn't all memory freed when Python exits?"
msgstr ""

#: ../../faq/design.rst:473
msgid ""
"Objects referenced from the global namespaces of Python modules are not "
"always deallocated when Python exits.  This may happen if there are circular "
"references.  There are also certain bits of memory that are allocated by the "
"C library that are impossible to free (e.g. a tool like Purify will complain "
"about these).  Python is, however, aggressive about cleaning up memory on "
"exit and does try to destroy every single object."
msgstr ""
"Os objetos referenciados nos espaço de nomes globais dos módulos Python nem "
"sempre são desalocados quando o Python é encerrado. Isso pode acontecer se "
"houver referências circulares. Existem também certos bits de memória "
"alocados pela biblioteca C que são impossíveis de liberar (por exemplo, uma "
"ferramenta como o Purify reclamará disso). Python é, no entanto, agressivo "
"quanto à limpeza de memória na saída e tenta destruir todos os objetos."

#: ../../faq/design.rst:480
msgid ""
"If you want to force Python to delete certain things on deallocation use "
"the :mod:`atexit` module to run a function that will force those deletions."
msgstr ""
"Se você quiser forçar o Python a excluir certas coisas na desalocação, use o "
"módulo :mod:`atexit` para executar uma função que forçará essas exclusões."

#: ../../faq/design.rst:485
msgid "Why are there separate tuple and list data types?"
msgstr "Por que existem tipos de dados separados para tuplas e listas?"

#: ../../faq/design.rst:487
msgid ""
"Lists and tuples, while similar in many respects, are generally used in "
"fundamentally different ways.  Tuples can be thought of as being similar to "
"Pascal records or C structs; they're small collections of related data which "
"may be of different types which are operated on as a group.  For example, a "
"Cartesian coordinate is appropriately represented as a tuple of two or three "
"numbers."
msgstr ""

#: ../../faq/design.rst:494
msgid ""
"Lists, on the other hand, are more like arrays in other languages.  They "
"tend to hold a varying number of objects all of which have the same type and "
"which are operated on one-by-one.  For example, ``os.listdir('.')`` returns "
"a list of strings representing the files in the current directory.  "
"Functions which operate on this output would generally not break if you "
"added another file or two to the directory."
msgstr ""

#: ../../faq/design.rst:501
msgid ""
"Tuples are immutable, meaning that once a tuple has been created, you can't "
"replace any of its elements with a new value.  Lists are mutable, meaning "
"that you can always change a list's elements.  Only immutable elements can "
"be used as dictionary keys, and hence only tuples and not lists can be used "
"as keys."
msgstr ""
"As tuplas são imutáveis, o que significa que, uma vez criada uma tupla, você "
"não pode substituir nenhum de seus elementos por um novo valor. As listas "
"são mutáveis, o que significa que você sempre pode alterar os elementos de "
"uma lista. Somente elementos imutáveis podem ser usados como chaves de "
"dicionário e, portanto, apenas tuplas e não listas podem ser usadas como "
"chaves."

#: ../../faq/design.rst:508
msgid "How are lists implemented in CPython?"
msgstr "Como as listas são implementadas no CPython?"

#: ../../faq/design.rst:510
msgid ""
"CPython's lists are really variable-length arrays, not Lisp-style linked "
"lists. The implementation uses a contiguous array of references to other "
"objects, and keeps a pointer to this array and the array's length in a list "
"head structure."
msgstr ""
"As listas do CPython são, na verdade, vetores de comprimento variável, "
"listas vinculadas não no estilo Lisp. A implementação usa um vetor contíguo "
"de referências a outros objetos e mantém um ponteiro para esse vetor e o "
"comprimento de vetor em uma estrutura de cabeçalho de lista."

#: ../../faq/design.rst:514
msgid ""
"This makes indexing a list ``a[i]`` an operation whose cost is independent "
"of the size of the list or the value of the index."
msgstr ""
"Isso torna a indexação de uma lista ``a[i]`` uma operação cujo custo é "
"independente do tamanho da lista ou do valor do índice."

#: ../../faq/design.rst:517
msgid ""
"When items are appended or inserted, the array of references is resized.  "
"Some cleverness is applied to improve the performance of appending items "
"repeatedly; when the array must be grown, some extra space is allocated so "
"the next few times don't require an actual resize."
msgstr ""
"Quando itens são anexados ou inseridos, o vetor de referências é "
"redimensionado. Alguma inteligência é aplicada para melhorar o desempenho de "
"anexar itens repetidamente; quando o vetor precisa ser aumentado, algum "
"espaço extra é alocado para que as próximas vezes não exijam um "
"redimensionamento real."

#: ../../faq/design.rst:524
msgid "How are dictionaries implemented in CPython?"
msgstr "Como são os dicionários implementados no CPython?"

#: ../../faq/design.rst:526
msgid ""
"CPython's dictionaries are implemented as resizable hash tables.  Compared "
"to B-trees, this gives better performance for lookup (the most common "
"operation by far) under most circumstances, and the implementation is "
"simpler."
msgstr ""
"Os dicionários do CPython são implementados como tabelas hash "
"redimensionáveis. Em comparação com árvores B, isso oferece melhor "
"desempenho para pesquisa (de longe a operação mais comum) na maioria das "
"circunstâncias, e a implementação é mais simples."

#: ../../faq/design.rst:530
msgid ""
"Dictionaries work by computing a hash code for each key stored in the "
"dictionary using the :func:`hash` built-in function.  The hash code varies "
"widely depending on the key; for example, \"Python\" hashes to -539294296 "
"while \"python\", a string that differs by a single bit, hashes to "
"1142331976.  The hash code is then used to calculate a location in an "
"internal array where the value will be stored. Assuming that you're storing "
"keys that all have different hash values, this means that dictionaries take "
"constant time -- O(1), in computer science notation -- to retrieve a key.  "
"It also means that no sorted order of the keys is maintained, and traversing "
"the array as the ``.keys()`` and ``.items()`` do will output the "
"dictionary's content in some arbitrary jumbled order."
msgstr ""

#: ../../faq/design.rst:543
msgid "Why must dictionary keys be immutable?"
msgstr "Por que chaves de dicionário devem ser imutáveis?"

#: ../../faq/design.rst:545
msgid ""
"The hash table implementation of dictionaries uses a hash value calculated "
"from the key value to find the key.  If the key were a mutable object, its "
"value could change, and thus its hash could also change.  But since whoever "
"changes the key object can't tell that it was being used as a dictionary "
"key, it can't move the entry around in the dictionary.  Then, when you try "
"to look up the same object in the dictionary it won't be found because its "
"hash value is different. If you tried to look up the old value it wouldn't "
"be found either, because the value of the object found in that hash bin "
"would be different."
msgstr ""
"A implementação da tabela hash de dicionários usa um valor hash calculado a "
"partir do valor da chave para encontrar a chave. Se a chave fosse um objeto "
"mutável, seu valor poderia mudar e, portanto, seu hash também poderia mudar. "
"Mas como quem altera o objeto-chave não pode saber que ele estava sendo "
"usado como chave de dicionário, ele não pode mover a entrada no dicionário. "
"Então, quando você tentar procurar o mesmo objeto no dicionário, ele não "
"será encontrado porque seu valor de hash é diferente. Se você tentasse "
"procurar o valor antigo, ele também não seria encontrado, porque o valor do "
"objeto encontrado naquele hash seria diferente."

#: ../../faq/design.rst:554
msgid ""
"If you want a dictionary indexed with a list, simply convert the list to a "
"tuple first; the function ``tuple(L)`` creates a tuple with the same entries "
"as the list ``L``.  Tuples are immutable and can therefore be used as "
"dictionary keys."
msgstr ""
"Se você deseja que um dicionário seja indexado com uma lista, simplesmente "
"converta primeiro a lista em uma tupla; a função ``tuple(L)`` cria uma tupla "
"com as mesmas entradas da lista ``L``. As tuplas são imutáveis e, portanto, "
"podem ser usadas como chaves de dicionário."

#: ../../faq/design.rst:558
msgid "Some unacceptable solutions that have been proposed:"
msgstr "Algumas soluções inaceitáveis que foram propostas:"

#: ../../faq/design.rst:560
msgid ""
"Hash lists by their address (object ID).  This doesn't work because if you "
"construct a new list with the same value it won't be found; e.g.::"
msgstr ""
"Listas de hash por endereço (ID do objeto). Isto não funciona porque se você "
"construir uma nova lista com o mesmo valor ela não será encontrada; por "
"exemplo.::"

#: ../../faq/design.rst:566
msgid ""
"would raise a KeyError exception because the id of the ``[1, 2]`` used in "
"the second line differs from that in the first line.  In other words, "
"dictionary keys should be compared using ``==``, not using :keyword:`is`."
msgstr ""

#: ../../faq/design.rst:570
msgid ""
"Make a copy when using a list as a key.  This doesn't work because the list, "
"being a mutable object, could contain a reference to itself, and then the "
"copying code would run into an infinite loop."
msgstr ""
"Fazer uma cópia ao usar uma lista como chave. Isso não funciona porque a "
"lista, sendo um objeto mutável, poderia conter uma referência a si mesma e "
"então o código copiado entraria em um laço infinito."

#: ../../faq/design.rst:574
msgid ""
"Allow lists as keys but tell the user not to modify them.  This would allow "
"a class of hard-to-track bugs in programs when you forgot or modified a list "
"by accident. It also invalidates an important invariant of dictionaries: "
"every value in ``d.keys()`` is usable as a key of the dictionary."
msgstr ""
"Permitir listas como chaves, mas dizer ao usuário para não modificá-las. "
"Isso permitiria uma classe de bugs difíceis de rastrear em programas quando "
"você esquecesse ou modificasse uma lista por acidente. Também invalida uma "
"importante invariante dos dicionários: todo valor em ``d.keys()`` pode ser "
"usado como chave do dicionário."

#: ../../faq/design.rst:579
msgid ""
"Mark lists as read-only once they are used as a dictionary key.  The problem "
"is that it's not just the top-level object that could change its value; you "
"could use a tuple containing a list as a key.  Entering anything as a key "
"into a dictionary would require marking all objects reachable from there as "
"read-only -- and again, self-referential objects could cause an infinite "
"loop."
msgstr ""
"Marcar listas como somente leitura quando forem usadas como chave de "
"dicionário. O problema é que não é apenas o objeto de nível superior que "
"pode alterar seu valor; você poderia usar uma tupla contendo uma lista como "
"chave. Inserir qualquer coisa como chave em um dicionário exigiria marcar "
"todos os objetos acessíveis a partir daí como somente leitura -- e, "
"novamente, objetos autorreferenciais poderiam causar um laço infinito."

#: ../../faq/design.rst:585
msgid ""
"There is a trick to get around this if you need to, but use it at your own "
"risk: You can wrap a mutable structure inside a class instance which has "
"both a :meth:`__eq__` and a :meth:`__hash__` method.  You must then make "
"sure that the hash value for all such wrapper objects that reside in a "
"dictionary (or other hash based structure), remain fixed while the object is "
"in the dictionary (or other structure). ::"
msgstr ""

#: ../../faq/design.rst:609
msgid ""
"Note that the hash computation is complicated by the possibility that some "
"members of the list may be unhashable and also by the possibility of "
"arithmetic overflow."
msgstr ""
"Observe que o cálculo do hash é complicado pela possibilidade de que alguns "
"membros da lista possam ser não não-hasheável e também pela possibilidade de "
"estouro aritmético."

#: ../../faq/design.rst:613
msgid ""
"Furthermore it must always be the case that if ``o1 == o2`` (ie ``o1."
"__eq__(o2) is True``) then ``hash(o1) == hash(o2)`` (ie, ``o1.__hash__() == "
"o2.__hash__()``), regardless of whether the object is in a dictionary or "
"not.  If you fail to meet these restrictions dictionaries and other hash "
"based structures will misbehave."
msgstr ""
"Além disso, deve ser sempre o caso que se ``o1 == o2`` (ou seja, ``o1."
"__eq__(o2) is True``) então ``hash(o1) == hash(o2)`` (ou seja, ``o1."
"__hash__() == o2.__hash__()``), independentemente de o objeto estar em um "
"dicionário ou não. Se você não cumprir essas restrições, os dicionários e "
"outras estruturas baseadas em hash se comportarão mal."

#: ../../faq/design.rst:618
msgid ""
"In the case of ListWrapper, whenever the wrapper object is in a dictionary "
"the wrapped list must not change to avoid anomalies.  Don't do this unless "
"you are prepared to think hard about the requirements and the consequences "
"of not meeting them correctly.  Consider yourself warned."
msgstr ""

#: ../../faq/design.rst:625
msgid "Why doesn't list.sort() return the sorted list?"
msgstr "Por que lista.sort() não retorna a lista ordenada?"

#: ../../faq/design.rst:627
msgid ""
"In situations where performance matters, making a copy of the list just to "
"sort it would be wasteful. Therefore, :meth:`list.sort` sorts the list in "
"place. In order to remind you of that fact, it does not return the sorted "
"list.  This way, you won't be fooled into accidentally overwriting a list "
"when you need a sorted copy but also need to keep the unsorted version "
"around."
msgstr ""
"Em situações nas quais performance importa, fazer uma cópia da lista só para "
"ordenar seria desperdício. Portanto, :meth:`list.sort` ordena a lista. De "
"forma a lembrá-lo desse fato, isso não retorna a lista ordenada. Desta "
"forma, você não vai ser confundido a acidentalmente sobrescrever uma lista "
"quando você precisar de uma cópia ordenada mas também precisar manter a "
"versão não ordenada."

#: ../../faq/design.rst:633
msgid ""
"In Python 2.4 a new built-in function -- :func:`sorted` -- has been added. "
"This function creates a new list from a provided iterable, sorts it and "
"returns it.  For example, here's how to iterate over the keys of a "
"dictionary in sorted order::"
msgstr ""

#: ../../faq/design.rst:643
msgid "How do you specify and enforce an interface spec in Python?"
msgstr ""
"Como você especifica e aplica uma especificação de interface no Python?"

#: ../../faq/design.rst:645
msgid ""
"An interface specification for a module as provided by languages such as C++ "
"and Java describes the prototypes for the methods and functions of the "
"module.  Many feel that compile-time enforcement of interface specifications "
"helps in the construction of large programs."
msgstr ""
"Uma especificação de interface para um módulo fornecida por linguagens como "
"C++ e Java descreve os protótipos para os métodos e funções do módulo. "
"Muitos acham que a aplicação de especificações de interface em tempo de "
"compilação ajuda na construção de programas grandes."

#: ../../faq/design.rst:650
msgid ""
"Python 2.6 adds an :mod:`abc` module that lets you define Abstract Base "
"Classes (ABCs).  You can then use :func:`isinstance` and :func:`issubclass` "
"to check whether an instance or a class implements a particular ABC.  The :"
"mod:`collections` module defines a set of useful ABCs such as :class:"
"`~collections.Iterable`, :class:`~collections.Container`, and :class:"
"`~collections.MutableMapping`."
msgstr ""

#: ../../faq/design.rst:657
msgid ""
"For Python, many of the advantages of interface specifications can be "
"obtained by an appropriate test discipline for components.  There is also a "
"tool, PyChecker, which can be used to find problems due to subclassing."
msgstr ""

#: ../../faq/design.rst:661
msgid ""
"A good test suite for a module can both provide a regression test and serve "
"as a module interface specification and a set of examples.  Many Python "
"modules can be run as a script to provide a simple \"self test.\"  Even "
"modules which use complex external interfaces can often be tested in "
"isolation using trivial \"stub\" emulations of the external interface.  The :"
"mod:`doctest` and :mod:`unittest` modules or third-party test frameworks can "
"be used to construct exhaustive test suites that exercise every line of code "
"in a module."
msgstr ""
"Um bom conjunto de testes para um módulo pode fornecer um teste de regressão "
"e servir como uma especificação de interface do módulo e um conjunto de "
"exemplos. Muitos módulos Python podem ser executados como um script para "
"fornecer um simples \"autoteste\". Mesmo módulos que usam interfaces "
"externas complexas muitas vezes podem ser testados isoladamente usando "
"emulações triviais da interface externa. Os módulos :mod:`doctest` e :mod:"
"`unittest` ou estruturas de teste de terceiros podem ser usados para "
"construir conjuntos de testes exaustivos que exercitam cada linha de código "
"em um módulo."

#: ../../faq/design.rst:669
msgid ""
"An appropriate testing discipline can help build large complex applications "
"in Python as well as having interface specifications would.  In fact, it can "
"be better because an interface specification cannot test certain properties "
"of a program.  For example, the :meth:`append` method is expected to add new "
"elements to the end of some internal list; an interface specification cannot "
"test that your :meth:`append` implementation will actually do this "
"correctly, but it's trivial to check this property in a test suite."
msgstr ""

#: ../../faq/design.rst:677
msgid ""
"Writing test suites is very helpful, and you might want to design your code "
"with an eye to making it easily tested.  One increasingly popular technique, "
"test-directed development, calls for writing parts of the test suite first, "
"before you write any of the actual code.  Of course Python allows you to be "
"sloppy and not write test cases at all."
msgstr ""

#: ../../faq/design.rst:685
msgid "Why is there no goto?"
msgstr "Por que não há goto?"

#: ../../faq/design.rst:687
msgid ""
"You can use exceptions to provide a \"structured goto\" that even works "
"across function calls.  Many feel that exceptions can conveniently emulate "
"all reasonable uses of the \"go\" or \"goto\" constructs of C, Fortran, and "
"other languages.  For example::"
msgstr ""

#: ../../faq/design.rst:702
msgid ""
"This doesn't allow you to jump into the middle of a loop, but that's usually "
"considered an abuse of goto anyway.  Use sparingly."
msgstr ""

#: ../../faq/design.rst:707
msgid "Why can't raw strings (r-strings) end with a backslash?"
msgstr ""
"Por que strings brutas (r-strings) não podem terminar com uma barra "
"invertida?"

#: ../../faq/design.rst:709
msgid ""
"More precisely, they can't end with an odd number of backslashes: the "
"unpaired backslash at the end escapes the closing quote character, leaving "
"an unterminated string."
msgstr ""
"Mais precisamente, eles não podem terminar com um número ímpar de "
"contrabarras: a contrabarra não pareada no final escapa do caractere de aspa "
"de fechamento, deixando uma string não terminada."

#: ../../faq/design.rst:713
msgid ""
"Raw strings were designed to ease creating input for processors (chiefly "
"regular expression engines) that want to do their own backslash escape "
"processing. Such processors consider an unmatched trailing backslash to be "
"an error anyway, so raw strings disallow that.  In return, they allow you to "
"pass on the string quote character by escaping it with a backslash.  These "
"rules work well when r-strings are used for their intended purpose."
msgstr ""
"Strings brutas foram projetadas para facilitar a criação de entrada para "
"processadores (principalmente mecanismos de expressão regular) que desejam "
"fazer seu próprio processamento de escape de contrabarra. De qualquer forma, "
"esses processadores consideram uma contrabarra incomparável como um erro, "
"portanto, as strings brutas não permitem isso. Em troca, eles permitem que "
"você transmita o caractere de aspas da string escapando dele com uma "
"contrabarra. Essas regras funcionam bem quando r-strings são usadas para a "
"finalidade pretendida."

#: ../../faq/design.rst:720
msgid ""
"If you're trying to build Windows pathnames, note that all Windows system "
"calls accept forward slashes too::"
msgstr ""
"Se você estiver tentando criar nomes de caminho do Windows, observe que "
"todas as chamadas do sistema do Windows também aceitam barras::"

#: ../../faq/design.rst:725
msgid ""
"If you're trying to build a pathname for a DOS command, try e.g. one of ::"
msgstr ""
"Se você estiver tentando criar um nome de caminho para um comando DOS, "
"tente, por exemplo. um de ::"

#: ../../faq/design.rst:733
msgid "Why doesn't Python have a \"with\" statement for attribute assignments?"
msgstr ""
"Por que o Python não tem uma instrução \"with\" para atribuição de atributos?"

#: ../../faq/design.rst:735
msgid ""
"Python has a 'with' statement that wraps the execution of a block, calling "
"code on the entrance and exit from the block.  Some language have a "
"construct that looks like this::"
msgstr ""

#: ../../faq/design.rst:743
msgid "In Python, such a construct would be ambiguous."
msgstr "Em Python, tal construção seria ambígua."

#: ../../faq/design.rst:745
msgid ""
"Other languages, such as Object Pascal, Delphi, and C++, use static types, "
"so it's possible to know, in an unambiguous way, what member is being "
"assigned to. This is the main point of static typing -- the compiler "
"*always* knows the scope of every variable at compile time."
msgstr ""
"Outras linguagens, como Object Pascal, Delphi, e C++, usam tipos estáticos, "
"então é possível saber, de maneira não ambígua, que membro está sendo "
"atribuído. Esse é o principal ponto da tipagem estática -- o compilador "
"*sempre* sabe o escopo de toda variável em tempo de compilação."

#: ../../faq/design.rst:750
msgid ""
"Python uses dynamic types. It is impossible to know in advance which "
"attribute will be referenced at runtime. Member attributes may be added or "
"removed from objects on the fly. This makes it impossible to know, from a "
"simple reading, what attribute is being referenced: a local one, a global "
"one, or a member attribute?"
msgstr ""
"O Python usa tipos dinâmicos. É impossível saber com antecedência que "
"atributo vai ser referenciado em tempo de execução. Atributos membro podem "
"ser adicionados ou removidos de objetos dinamicamente. Isso torna impossível "
"saber, de uma leitura simples, que atributo está sendo referenciado: um "
"atributo local, um atributo global ou um atributo membro?"

#: ../../faq/design.rst:756
msgid "For instance, take the following incomplete snippet::"
msgstr "Por exemplo, pegue o seguinte trecho incompleto::"

#: ../../faq/design.rst:762
msgid ""
"The snippet assumes that \"a\" must have a member attribute called \"x\".  "
"However, there is nothing in Python that tells the interpreter this. What "
"should happen if \"a\" is, let us say, an integer?  If there is a global "
"variable named \"x\", will it be used inside the with block?  As you see, "
"the dynamic nature of Python makes such choices much harder."
msgstr ""

#: ../../faq/design.rst:768
msgid ""
"The primary benefit of \"with\" and similar language features (reduction of "
"code volume) can, however, easily be achieved in Python by assignment.  "
"Instead of::"
msgstr ""
"O benefício primário do \"with\" e funcionalidades similares da linguagem "
"(redução de volume de código) pode, entretanto, ser facilmente alcançado no "
"Python por atribuição. Em vez de::"

#: ../../faq/design.rst:775
msgid "write this::"
msgstr "escreva isso::"

#: ../../faq/design.rst:782
msgid ""
"This also has the side-effect of increasing execution speed because name "
"bindings are resolved at run-time in Python, and the second version only "
"needs to perform the resolution once."
msgstr ""
"Isso também tem o efeito colateral de aumentar a velocidade de execução por "
"que ligações de nome são resolvidas a tempo de execução em Python, e a "
"segunda versão só precisa performar a resolução uma vez."

#: ../../faq/design.rst:788
msgid "Why are colons required for the if/while/def/class statements?"
msgstr ""
"Por que dois pontos são necessários para as instruções de if/while/def/class?"

#: ../../faq/design.rst:790
msgid ""
"The colon is required primarily to enhance readability (one of the results "
"of the experimental ABC language).  Consider this::"
msgstr ""
"Os dois pontos são obrigatórios primeiramente para melhorar a leitura (um "
"dos resultados da linguagem experimental ABC). Considere isso::"

#: ../../faq/design.rst:796
msgid "versus ::"
msgstr "versus ::"

#: ../../faq/design.rst:801
msgid ""
"Notice how the second one is slightly easier to read.  Notice further how a "
"colon sets off the example in this FAQ answer; it's a standard usage in "
"English."
msgstr ""
"Note como a segunda é ligeiramente mais fácil de ler. Note com mais atenção "
"como os dois pontos iniciam o exemplo nessa resposta de perguntas "
"frequentes; é um uso padrão em Português."

#: ../../faq/design.rst:804
msgid ""
"Another minor reason is that the colon makes it easier for editors with "
"syntax highlighting; they can look for colons to decide when indentation "
"needs to be increased instead of having to do a more elaborate parsing of "
"the program text."
msgstr ""
"Outro motivo menor é que os dois pontos deixam mais fácil para os editores "
"com realce de sintaxe; eles podem procurar por dois pontos para decidir "
"quando indentação precisa ser aumentada em vez de precisarem fazer uma "
"análise mais elaborada do texto do programa."

#: ../../faq/design.rst:810
msgid "Why does Python allow commas at the end of lists and tuples?"
msgstr "Por que o Python permite vírgulas ao final de listas e tuplas?"

#: ../../faq/design.rst:812
msgid ""
"Python lets you add a trailing comma at the end of lists, tuples, and "
"dictionaries::"
msgstr ""
"O Python deixa você adicionar uma vírgula ao final de listas, tuplas e "
"dicionários::"

#: ../../faq/design.rst:823
msgid "There are several reasons to allow this."
msgstr "Existem várias razões para permitir isso."

#: ../../faq/design.rst:825
msgid ""
"When you have a literal value for a list, tuple, or dictionary spread across "
"multiple lines, it's easier to add more elements because you don't have to "
"remember to add a comma to the previous line.  The lines can also be "
"reordered without creating a syntax error."
msgstr ""
"Quando você possui um valor literal para uma lista, tupla, ou dicionário "
"disposta através de múltiplas linhas, é mais fácil adicionar mais elementos "
"porque você não precisa lembrar de adicionar uma vírgula na linha anterior. "
"As linhas também podem ser reordenadas sem criar um erro de sintaxe."

#: ../../faq/design.rst:830
msgid ""
"Accidentally omitting the comma can lead to errors that are hard to "
"diagnose. For example::"
msgstr ""
"Acidentalmente omitir a vírgula pode levar a erros que são difíceis de "
"diagnosticar. Por exemplo::"

#: ../../faq/design.rst:840
msgid ""
"This list looks like it has four elements, but it actually contains three: "
"\"fee\", \"fiefoo\" and \"fum\".  Always adding the comma avoids this source "
"of error."
msgstr ""
"Essa lista parece ter quatro elementos, mas na verdade contém três: \"fee\", "
"\"fiefoo\" e \"fum\". Sempre adicionar a vírgula evita essa fonte de erro."

#: ../../faq/design.rst:843
msgid ""
"Allowing the trailing comma may also make programmatic code generation "
"easier."
msgstr ""
"Permitir a vírgula no final também pode deixar a geração de código "
"programático mais fácil."
