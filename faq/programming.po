# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Tiago Henrique <tiagohrm@gmail.com>, 2017
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2018
# Marco Rougeth <marco@rougeth.com>, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-21 11:30+0000\n"
"PO-Revision-Date: 2017-02-16 17:43+0000\n"
"Last-Translator: Marco Rougeth <marco@rougeth.com>, 2019\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../faq/programming.rst:5
msgid "Programming FAQ"
msgstr "FAQ referente a Programação"

#: ../../faq/programming.rst:8
msgid "Contents"
msgstr "Conteúdo"

#: ../../faq/programming.rst:12
msgid "General Questions"
msgstr "Questões Gerais"

#: ../../faq/programming.rst:15
msgid ""
"Is there a source code level debugger with breakpoints, single-stepping, "
"etc.?"
msgstr ""
"Existe um depurador a  nível de código-fonte que possui breakpoints, single-"
"stepping e etc.?"

#: ../../faq/programming.rst:17 ../../faq/programming.rst:63
msgid "Yes."
msgstr "Sim."

#: ../../faq/programming.rst:19
msgid ""
"Several debuggers for Python are described below, and the built-in function :"
"func:`breakpoint` allows you to drop into any of them."
msgstr ""

#: ../../faq/programming.rst:22
msgid ""
"The pdb module is a simple but adequate console-mode debugger for Python. It "
"is part of the standard Python library, and is :mod:`documented in the "
"Library Reference Manual <pdb>`. You can also write your own debugger by "
"using the code for pdb as an example."
msgstr ""
"O módulo pdb é um depurador cujo funcionamento ocorre em modo Console "
"simples mas, adequado para o Python. Faz parte da biblioteca padrão do "
"Python e está documentado em :mod:`documented in the Library Reference "
"Manual 1`. Caso necessário, também é possível a construção do seu próprio "
"depurador usando o código do pdb como um exemplo."

#: ../../faq/programming.rst:27
msgid ""
"The IDLE interactive development environment, which is part of the standard "
"Python distribution (normally available as Tools/scripts/idle), includes a "
"graphical debugger."
msgstr ""
"O Ambiente de Desenvolvimento Interativo IDLE, que faz parte da distribuição "
"padrão do Python (normalmente disponível em Tools/scripts/idle), inclui um "
"depurador gráfico."

#: ../../faq/programming.rst:31
msgid ""
"PythonWin is a Python IDE that includes a GUI debugger based on pdb.  The "
"Pythonwin debugger colors breakpoints and has quite a few cool features such "
"as debugging non-Pythonwin programs.  Pythonwin is available as part of the "
"`Python for Windows Extensions <https://sourceforge.net/projects/pywin32/"
">`__ project and as a part of the ActivePython distribution (see https://www."
"activestate.com/activepython\\ )."
msgstr ""
"O PythonWin é uma IDE feita para o Python que inclui um depurador de GUI "
"baseado no pdb. O depurador Pythonwin colora os pontos de interrupção e tem "
"alguns recursos legais, como a depuração de programas que não são Pythonwin. "
"O Pythonwin está disponível como parte do projeto  `Python for Windows "
"Extensions <https://sourceforge.net/projects/pywin32/>`__ e como parte da "
"distribuição ActivePython (veja https://www.activestate.com/activepython\\ )."

#: ../../faq/programming.rst:38
msgid ""
"`Boa Constructor <http://boa-constructor.sourceforge.net/>`_ is an IDE and "
"GUI builder that uses wxWidgets.  It offers visual frame creation and "
"manipulation, an object inspector, many views on the source like object "
"browsers, inheritance hierarchies, doc string generated html documentation, "
"an advanced debugger, integrated help, and Zope support."
msgstr ""
"O `Boa Constructor <http://boa-constructor.sourceforge.net/>`_  é uma IDE e "
"GUI que usa wxWidgets. Oferece criação e manipulação de frames visualmente, "
"um inspetor de objetos, muitas visualizações do fonte, como navegadores de "
"objetos, hierarquias de herança, documentação HTML gerada por uma seqüência "
"de documentos, um depurador avançado, ajuda integrada e suporte ao Zope."

#: ../../faq/programming.rst:44
msgid ""
"`Eric <http://eric-ide.python-projects.org/>`_ is an IDE built on PyQt and "
"the Scintilla editing component."
msgstr ""
"O `Eric <http://eric-ide.python-projects.org/>`_ é uma IDE construída com o "
"PyQt e fazendo uso do componente de edição Scintilla."

#: ../../faq/programming.rst:47
msgid ""
"Pydb is a version of the standard Python debugger pdb, modified for use with "
"DDD (Data Display Debugger), a popular graphical debugger front end.  Pydb "
"can be found at http://bashdb.sourceforge.net/pydb/ and DDD can be found at "
"https://www.gnu.org/software/ddd."
msgstr ""
"Pydb é uma versão do pdb padrão do depurador Python, modificado para uso com "
"o DDD (depurador de exibição de dados), um front-end popular do depurador "
"gráfico. Pydb pode ser encontrado em http://bashdb.sourceforge.net/pydb/ e "
"DDD pode ser encontrado em https://www.gnu.org/software/ddd."

#: ../../faq/programming.rst:52
msgid ""
"There are a number of commercial Python IDEs that include graphical "
"debuggers. They include:"
msgstr ""
"Há uma série de IDE comerciais para desenvolvimento com o Python que incluem "
"depuradores gráficos. Dentre tantas temos:"

#: ../../faq/programming.rst:55
msgid "Wing IDE (https://wingware.com/)"
msgstr "Wing IDE (https://wingware.com/)"

#: ../../faq/programming.rst:56
msgid "Komodo IDE (https://komodoide.com/)"
msgstr "Komodo IDE (https://komodoide.com/)"

#: ../../faq/programming.rst:57
msgid "PyCharm (https://www.jetbrains.com/pycharm/)"
msgstr "PyCharm (https://www.jetbrains.com/pycharm/)"

#: ../../faq/programming.rst:61
msgid "Is there a tool to help find bugs or perform static analysis?"
msgstr ""
"Existe uma ferramenta que ajuda na detecção de bugs ou a realizar análises "
"estáticas?"

#: ../../faq/programming.rst:65
msgid ""
"PyChecker is a static analysis tool that finds bugs in Python source code "
"and warns about code complexity and style.  You can get PyChecker from "
"http://pychecker.sourceforge.net/."
msgstr ""
"O PyChecker é uma ferramenta de análise estática que encontra erros no "
"código-fonte do Python e exibe avisos sobre a complexidade e a estilização "
"do código. Você pode obter PyChecker em http://pychecker.sourceforge.net/."

#: ../../faq/programming.rst:69
msgid ""
"`Pylint <https://www.pylint.org/>`_ is another tool that checks if a module "
"satisfies a coding standard, and also makes it possible to write plug-ins to "
"add a custom feature.  In addition to the bug checking that PyChecker "
"performs, Pylint offers some additional features such as checking line "
"length, whether variable names are well-formed according to your coding "
"standard, whether declared interfaces are fully implemented, and more. "
"https://docs.pylint.org/ provides a full list of Pylint's features."
msgstr ""
"O `Pylint <https://www.pylint.org/>`_ é outra ferramenta que verifica se um "
"módulo satisfaz um padrão de codificação e também permite escrever plug-ins "
"para adicionar um recurso personalizado. Além da verificação de erros que o "
"PyChecker executa, o Pylint oferece alguns recursos adicionais, como a "
"verificação do comprimento da linha, se os nomes das variáveis estão bem "
"formados e de acordo com padrão internacional de codificação, se as "
"interfaces declaradas foram totalmente implementadas e muito mais. O https://"
"docs.pylint.org/ fornece uma lista completa dos recursos do Pylint."

#: ../../faq/programming.rst:77
msgid ""
"Static type checkers such as `Mypy <http://mypy-lang.org/>`_, `Pyre <https://"
"pyre-check.org/>`_, and `Pytype <https://github.com/google/pytype>`_ can "
"check type hints in Python source code."
msgstr ""

#: ../../faq/programming.rst:84
msgid "How can I create a stand-alone binary from a Python script?"
msgstr "Como posso criar um binário independente a partir de um script Python?"

#: ../../faq/programming.rst:86
msgid ""
"You don't need the ability to compile Python to C code if all you want is a "
"stand-alone program that users can download and run without having to "
"install the Python distribution first.  There are a number of tools that "
"determine the set of modules required by a program and bind these modules "
"together with a Python binary to produce a single executable."
msgstr ""
"Não precisas possui a capacidade de compilar o código Python para C se o que "
"desejas é um programa autônomo que os usuários possam baixar e executar sem "
"ter que instalar a distribuição Python primeiro. Existem várias ferramentas "
"que determinam o conjunto de módulos exigidos por um programa e vinculam "
"esses módulos junto com o binário do Python para produzir um único "
"executável."

#: ../../faq/programming.rst:92
msgid ""
"One is to use the freeze tool, which is included in the Python source tree "
"as ``Tools/freeze``. It converts Python byte code to C arrays; a C compiler "
"you can embed all your modules into a new program, which is then linked with "
"the standard Python modules."
msgstr ""
"Um deles é usar a ferramenta de freeze, que está inclusa na árvore de origem "
"do Python como ``Tools/freeze``. A mesma converte o código bytecode do "
"Python em matrizes C; com um compilador C  poderás incorporar todos os "
"módulos em um novo programa, que será então vinculado aos módulos padrão do "
"Python."

#: ../../faq/programming.rst:97
msgid ""
"It works by scanning your source recursively for import statements (in both "
"forms) and looking for the modules in the standard Python path as well as in "
"the source directory (for built-in modules).  It then turns the bytecode for "
"modules written in Python into C code (array initializers that can be turned "
"into code objects using the marshal module) and creates a custom-made config "
"file that only contains those built-in modules which are actually used in "
"the program.  It then compiles the generated C code and links it with the "
"rest of the Python interpreter to form a self-contained binary which acts "
"exactly like your script."
msgstr ""

#: ../../faq/programming.rst:106
msgid ""
"Obviously, freeze requires a C compiler.  There are several other utilities "
"which don't. One is Thomas Heller's py2exe (Windows only) at"
msgstr ""

#: ../../faq/programming.rst:109
msgid "http://www.py2exe.org/"
msgstr "http://www.py2exe.org/"

#: ../../faq/programming.rst:111
msgid ""
"Another tool is Anthony Tuininga's `cx_Freeze <https://anthony-tuininga."
"github.io/cx_Freeze/>`_."
msgstr ""

#: ../../faq/programming.rst:115
msgid "Are there coding standards or a style guide for Python programs?"
msgstr ""
"Existem padrões para a codificação ou um guia de estilo utilizado pela "
"comunidade Python?"

#: ../../faq/programming.rst:117
msgid ""
"Yes.  The coding style required for standard library modules is documented "
"as :pep:`8`."
msgstr ""
"Sim. O guia de estilo esperado para módulos e biblioteca padrão possui o "
"nome de PEP8 e podes acessar a sua documentação em :pep:`8`."

#: ../../faq/programming.rst:122
msgid "Core Language"
msgstr "Núcleo da Linguagem"

#: ../../faq/programming.rst:125
msgid "Why am I getting an UnboundLocalError when the variable has a value?"
msgstr ""
"Porque estou recebo o erro UnboundLocalError quando a variável possui um "
"valor associado?"

#: ../../faq/programming.rst:127
msgid ""
"It can be a surprise to get the UnboundLocalError in previously working code "
"when it is modified by adding an assignment statement somewhere in the body "
"of a function."
msgstr ""
"Talvez você se surpreenda ao receber UnboundLocalError num código que "
"anteriormente funcionava quando este for modificado e adicionando uma "
"declaração de atribuição em algum lugar no corpo de uma função."

#: ../../faq/programming.rst:131
msgid "This code:"
msgstr "Este código:"

#: ../../faq/programming.rst:139
msgid "works, but this code:"
msgstr "funciona, mas este código:"

#: ../../faq/programming.rst:146
msgid "results in an UnboundLocalError:"
msgstr "resultará em um UnboundLocalError:"

#: ../../faq/programming.rst:153
msgid ""
"This is because when you make an assignment to a variable in a scope, that "
"variable becomes local to that scope and shadows any similarly named "
"variable in the outer scope.  Since the last statement in foo assigns a new "
"value to ``x``, the compiler recognizes it as a local variable.  "
"Consequently when the earlier ``print(x)`` attempts to print the "
"uninitialized local variable and an error results."
msgstr ""
"Isso acontece devido ao fato de que quando realizamos uma tarefa numa "
"variável de um determinado escopo, essa variável torna-se-á local desse "
"escopo acabando por esconder qualquer variável similar que foi mencionada no "
"escopo externo. Uma vez que a última declaração de foo atribuir um novo "
"valor a ``x``, o compilador o reconhecera como uma variável local. "
"Conseqüentemente, quando o ``print (x)`` anterior tentar imprimir a variável "
"local não inicializada acabará resultando num."

#: ../../faq/programming.rst:160
msgid ""
"In the example above you can access the outer scope variable by declaring it "
"global:"
msgstr ""
"No exemplo acima, podemos acessar a variável do escopo externo declarando-o "
"globalmente:"

#: ../../faq/programming.rst:171
msgid ""
"This explicit declaration is required in order to remind you that (unlike "
"the superficially analogous situation with class and instance variables) you "
"are actually modifying the value of the variable in the outer scope:"
msgstr ""
"Esta declaração explícita é necessária para lembrá-lo de que (ao contrário "
"da situação superficialmente análoga com variáveis de classe e instância), "
"você realmente está modificando o valor da variável no escopo externo:"

#: ../../faq/programming.rst:178
msgid ""
"You can do a similar thing in a nested scope using the :keyword:`nonlocal` "
"keyword:"
msgstr ""
"Poderás fazer uma coisa semelhante num escopo aninhado usando a palavra-"
"chave :keyword: `nonlocal`:"

#: ../../faq/programming.rst:195
msgid "What are the rules for local and global variables in Python?"
msgstr "Quais são as regras para variáveis locais e globais em Python?"

#: ../../faq/programming.rst:197
msgid ""
"In Python, variables that are only referenced inside a function are "
"implicitly global.  If a variable is assigned a value anywhere within the "
"function's body, it's assumed to be a local unless explicitly declared as "
"global."
msgstr ""
"Em Python, as variáveis que são apenas utilizadas (referenciadas) dentro de "
"uma função são implicitamente globais. Se uma variável for associada a um "
"valor em qualquer lugar dentro do corpo da função, assume-se que a mesma "
"será local, a menos que seja explicitamente declarado como global."

#: ../../faq/programming.rst:201
msgid ""
"Though a bit surprising at first, a moment's consideration explains this.  "
"On one hand, requiring :keyword:`global` for assigned variables provides a "
"bar against unintended side-effects.  On the other hand, if ``global`` was "
"required for all global references, you'd be using ``global`` all the time.  "
"You'd have to declare as global every reference to a built-in function or to "
"a component of an imported module.  This clutter would defeat the usefulness "
"of the ``global`` declaration for identifying side-effects."
msgstr ""

#: ../../faq/programming.rst:211
msgid ""
"Why do lambdas defined in a loop with different values all return the same "
"result?"
msgstr ""
"Por que os lambdas definidos em um loop com valores diferentes retornam o "
"mesmo resultado?"

#: ../../faq/programming.rst:213
msgid ""
"Assume you use a for loop to define a few different lambdas (or even plain "
"functions), e.g.::"
msgstr ""
"Suponha que utilizes um loop for para definir algumas funções lambdas (ou "
"mesmo funções simples), por exemplo.::"

#: ../../faq/programming.rst:220
msgid ""
"This gives you a list that contains 5 lambdas that calculate ``x**2``.  You "
"might expect that, when called, they would return, respectively, ``0``, "
"``1``, ``4``, ``9``, and ``16``.  However, when you actually try you will "
"see that they all return ``16``::"
msgstr ""
"Isso oferece uma lista que contém 5 lambdas que calculam ``x**2``. Poderás "
"esperar que, quando invocado, os mesmo retornem, respectivamente,  ``0``, "
"``1``, ``4``, ``9``, e ``16``. No entanto, quando realmente tentares, verás "
"que todos retornam ``16``::"

#: ../../faq/programming.rst:230
msgid ""
"This happens because ``x`` is not local to the lambdas, but is defined in "
"the outer scope, and it is accessed when the lambda is called --- not when "
"it is defined.  At the end of the loop, the value of ``x`` is ``4``, so all "
"the functions now return ``4**2``, i.e. ``16``.  You can also verify this by "
"changing the value of ``x`` and see how the results of the lambdas change::"
msgstr ""
"Isso acontece porque ``x`` não é local para o lambdas, mas é definido no "
"escopo externo, e é acessado quando o lambda for chamado --- não quando é "
"definido. No final do loop, o valor de ``x`` será ``4``, e então, todas as "
"funções agora retornarão ``4**2``, ou seja, ``16``. Também poderás verificar "
"isso alterando o valor de ``x`` e vendo como os resultados dos lambdas "
"mudam::"

#: ../../faq/programming.rst:240
msgid ""
"In order to avoid this, you need to save the values in variables local to "
"the lambdas, so that they don't rely on the value of the global ``x``::"
msgstr ""
"Para evitar isso, precisarás salvar os valores nas variáveis locais para os "
"lambdas, para que eles não dependam do valor de ``x`` global::"

#: ../../faq/programming.rst:247
msgid ""
"Here, ``n=x`` creates a new variable ``n`` local to the lambda and computed "
"when the lambda is defined so that it has the same value that ``x`` had at "
"that point in the loop.  This means that the value of ``n`` will be ``0`` in "
"the first lambda, ``1`` in the second, ``2`` in the third, and so on. "
"Therefore each lambda will now return the correct result::"
msgstr ""
"Aqui, ``n=x`` cria uma nova variável ``n`` local para o lambda e calculada "
"quando o lambda será definido para que ele tenha o mesmo valor que ``x`` "
"tenha nesse ponto no loop. Isso significa que o valor de ``n`` será ``0`` no "
"primeiro \"ciclo\" do lambda, ``1`` no segundo \"ciclo\", ``2`` no terceiro, "
"e assim por diante. Portanto, cada lambda agora retornará o resultado "
"correto::"

#: ../../faq/programming.rst:258
msgid ""
"Note that this behaviour is not peculiar to lambdas, but applies to regular "
"functions too."
msgstr ""
"Observe que esse comportamento não é peculiar dos lambdas, o mesmo também "
"ocorre com as funções regulares."

#: ../../faq/programming.rst:263
msgid "How do I share global variables across modules?"
msgstr "Como definir variáveis globais dentro de módulos?"

#: ../../faq/programming.rst:265
msgid ""
"The canonical way to share information across modules within a single "
"program is to create a special module (often called config or cfg).  Just "
"import the config module in all modules of your application; the module then "
"becomes available as a global name.  Because there is only one instance of "
"each module, any changes made to the module object get reflected "
"everywhere.  For example:"
msgstr ""
"A maneira canônica de compartilhar informações entre módulos dentro de um "
"único programa é criando um módulo especial (geralmente chamado de config ou "
"cfg). Basta importar o módulo de configuração em todos os módulos da sua "
"aplicação; O módulo ficará disponível como um nome global. Como há apenas "
"uma instância de cada módulo, todas as alterações feitas no objeto do módulo "
"se refletem em todos os lugares. Por exemplo:"

#: ../../faq/programming.rst:271
msgid "config.py::"
msgstr "config.py::"

#: ../../faq/programming.rst:275
msgid "mod.py::"
msgstr "mod.py::"

#: ../../faq/programming.rst:280
msgid "main.py::"
msgstr "main.py::"

#: ../../faq/programming.rst:286
msgid ""
"Note that using a module is also the basis for implementing the Singleton "
"design pattern, for the same reason."
msgstr ""
"Observe o uso de um único módulo também é, por definição, a implementação do "
"Design Patterns Singleton!"

#: ../../faq/programming.rst:291
msgid "What are the \"best practices\" for using import in a module?"
msgstr ""
"Quais são as \"melhores práticas\" quando fazemos uso da importação de "
"módulos?"

#: ../../faq/programming.rst:293
msgid ""
"In general, don't use ``from modulename import *``.  Doing so clutters the "
"importer's namespace, and makes it much harder for linters to detect "
"undefined names."
msgstr ""
"Em geral, não use ``from modulename import *``. Ao fazê-lo, o namespace do "
"importador é mais difícil e torna muito mais difícil para as ferramentas "
"linters detectar nomes indefinidos."

#: ../../faq/programming.rst:297
msgid ""
"Import modules at the top of a file.  Doing so makes it clear what other "
"modules your code requires and avoids questions of whether the module name "
"is in scope. Using one import per line makes it easy to add and delete "
"module imports, but using multiple imports per line uses less screen space."
msgstr ""
"Faça a importação de módulos na parte superior do arquivo. Isso deixa claro "
"quais outros módulos nosso código necessita e evita dúvidas sobre por "
"exemplo, se o nome do módulo está no escopo. Usar uma importação por linha "
"facilita a adição e exclusão de importações de módulos, porém, usar várias "
"importações num única linha, ocupa menos espaço da tela."

#: ../../faq/programming.rst:302
msgid "It's good practice if you import modules in the following order:"
msgstr "É uma boa prática importar os módulos na seguinte ordem:"

#: ../../faq/programming.rst:304
msgid "standard library modules -- e.g. ``sys``, ``os``, ``getopt``, ``re``"
msgstr ""
"módulos de biblioteca padrão, por exemplo: ``sys``, ``os``, ``getopt``, "
"``re``"

#: ../../faq/programming.rst:305
msgid ""
"third-party library modules (anything installed in Python's site-packages "
"directory) -- e.g. mx.DateTime, ZODB, PIL.Image, etc."
msgstr ""
"módulos e biblioteca de terceiros (qualquer instalação feita contida no "
"repositório de códigos na pasta site-packages) - por exemplo mx.DateTime, "
"ZODB, PIL.Image, etc."

#: ../../faq/programming.rst:307
msgid "locally-developed modules"
msgstr "módulos desenvolvidos localmente"

#: ../../faq/programming.rst:309
msgid ""
"It is sometimes necessary to move imports to a function or class to avoid "
"problems with circular imports.  Gordon McMillan says:"
msgstr ""
"Às vezes, é necessário transferir as importações para uma função ou classe "
"para evitar problemas com importação circular. Gordon McMillan diz:"

#: ../../faq/programming.rst:312
msgid ""
"Circular imports are fine where both modules use the \"import <module>\" "
"form of import.  They fail when the 2nd module wants to grab a name out of "
"the first (\"from module import name\") and the import is at the top level.  "
"That's because names in the 1st are not yet available, because the first "
"module is busy importing the 2nd."
msgstr ""
"As importações circulares estão bem onde ambos os módulos utilizam a forma "
"de importação \"import 1\". Eles falham quando o 2º módulo quer pegar um "
"nome do primeiro  (\"from module import name\") e a importação está no nível "
"superior. Isso porque os nomes no primeiro ainda não estão disponíveis, "
"porque o primeiro módulo está ocupado importando o 2º."

#: ../../faq/programming.rst:318
msgid ""
"In this case, if the second module is only used in one function, then the "
"import can easily be moved into that function.  By the time the import is "
"called, the first module will have finished initializing, and the second "
"module can do its import."
msgstr ""
"Nesse caso, se o segundo módulo for usado apenas numa função, a importação "
"pode ser facilmente movida para dentro do escopo dessa função. No momento em "
"que a importação for chamada, o primeiro módulo terá finalizado a "
"inicialização e o segundo módulo poderá ser importado sem maiores "
"complicações."

#: ../../faq/programming.rst:323
msgid ""
"It may also be necessary to move imports out of the top level of code if "
"some of the modules are platform-specific.  In that case, it may not even be "
"possible to import all of the modules at the top of the file.  In this case, "
"importing the correct modules in the corresponding platform-specific code is "
"a good option."
msgstr ""
"Também poderá ser necessário mover as importações para fora do nível "
"superior do código se alguns dos módulos forem específicos de uma "
"determinada plataforma (SO). Nesse caso, talvez nem seja possível importar "
"todos os módulos na parte superior do arquivo. Nessas situações devemos "
"importar os módulos que são especificos de cada plataforma antes de "
"necessitar utilizar os mesmos."

#: ../../faq/programming.rst:328
msgid ""
"Only move imports into a local scope, such as inside a function definition, "
"if it's necessary to solve a problem such as avoiding a circular import or "
"are trying to reduce the initialization time of a module.  This technique is "
"especially helpful if many of the imports are unnecessary depending on how "
"the program executes.  You may also want to move imports into a function if "
"the modules are only ever used in that function.  Note that loading a module "
"the first time may be expensive because of the one time initialization of "
"the module, but loading a module multiple times is virtually free, costing "
"only a couple of dictionary lookups.  Even if the module name has gone out "
"of scope, the module is probably available in :data:`sys.modules`."
msgstr ""
"Apenas mova as importações para um escopo local, como dentro da definição de "
"função, se for necessário resolver algum tipo de problema, como exemplo, "
"evitar importações circulares ou tentar reduzir o tempo de inicialização do "
"módulo. Esta técnica é especialmente útil se muitas das importações forem "
"desnecessárias, dependendo de como o programa é executado. Também podemos "
"desejar mover as importações para uma função se os módulos forem usados "
"somente nessa função. Note que carregar um módulo pela primeira vez pode ser "
"demorado devido ao tempo de inicialização de cada módulo, no entanto, "
"carregar um módulo várias vezes é praticamente imperceptível, tendo somente "
"o custo de processamento de pesquisas no dicionário de nomes. Mesmo que o "
"nome do módulo tenha saído do escopo, o módulo provavelmente estará "
"disponível em :data:`sys.modules`."

#: ../../faq/programming.rst:341
msgid "Why are default values shared between objects?"
msgstr "Por que os valores padrão são compartilhados entre objetos?"

#: ../../faq/programming.rst:343
msgid ""
"This type of bug commonly bites neophyte programmers.  Consider this "
"function::"
msgstr ""
"Este tipo de erro geralmente pega programadores neófitos. Considere esta "
"função::"

#: ../../faq/programming.rst:350
msgid ""
"The first time you call this function, ``mydict`` contains a single item.  "
"The second time, ``mydict`` contains two items because when ``foo()`` begins "
"executing, ``mydict`` starts out with an item already in it."
msgstr ""
"A primeira vez que chamares essa função, ``mydict`` irá conter um único "
"item. A segunda vez, ``mydict`` irá conter dois itens, porque quando "
"``foo()`` começar a ser executado, ``mydict`` começará com um item já "
"existente."

#: ../../faq/programming.rst:354
msgid ""
"It is often expected that a function call creates new objects for default "
"values. This is not what happens. Default values are created exactly once, "
"when the function is defined.  If that object is changed, like the "
"dictionary in this example, subsequent calls to the function will refer to "
"this changed object."
msgstr ""
"Muitas vezes, espera-se que ao invocar uma função seja criado novos objetos "
"referente aos valores padrão. Isso não é o que acontecerá. Os valores padrão "
"são criados exatamente uma vez, quando a função está sendo definida. Se esse "
"objeto for alterado, como o dicionário neste exemplo, as chamadas "
"subsequentes para a essa função se referirão a este objeto alterado."

#: ../../faq/programming.rst:359
msgid ""
"By definition, immutable objects such as numbers, strings, tuples, and "
"``None``, are safe from change. Changes to mutable objects such as "
"dictionaries, lists, and class instances can lead to confusion."
msgstr ""
"Por definição, objetos imutáveis, como números, strings, tuplas e o "
"``None``, estão protegidos de sofrerem alteração. Alterações em objetos "
"mutáveis, como dicionários, listas e instâncias de classe, podem levar à "
"confusão."

#: ../../faq/programming.rst:363
msgid ""
"Because of this feature, it is good programming practice to not use mutable "
"objects as default values.  Instead, use ``None`` as the default value and "
"inside the function, check if the parameter is ``None`` and create a new "
"list/dictionary/whatever if it is.  For example, don't write::"
msgstr ""
"Por causa desse recurso, é uma boa prática de programação para evitar o uso "
"de objetos mutáveis contendo valores padrão. Em vez disso, utilize ``None`` "
"como o valor padrão e dentro da função, verifique se o parâmetro é ``None`` "
"e crie uma nova lista /dicionário/ o que quer que seja. Por exemplo, escreva "
"o seguinte código::"

#: ../../faq/programming.rst:371
msgid "but::"
msgstr "mas::"

#: ../../faq/programming.rst:377
msgid ""
"This feature can be useful.  When you have a function that's time-consuming "
"to compute, a common technique is to cache the parameters and the resulting "
"value of each call to the function, and return the cached value if the same "
"value is requested again.  This is called \"memoizing\", and can be "
"implemented like this::"
msgstr ""
"Esse recurso pode ser útil. Quando tiveres uma função que consome muito "
"tempo para calcular, uma técnica comum é armazenar em cache os parâmetros e "
"o valor resultante de cada chamada para a função e retornar o valor em cache "
"se o mesmo valor for solicitado novamente. Isso se chama \"memoizing\", e "
"pode ser implementado da seguinte forma::"

#: ../../faq/programming.rst:392
msgid ""
"You could use a global variable containing a dictionary instead of the "
"default value; it's a matter of taste."
msgstr ""
"Poderias usar uma variável global contendo um dicionário ao invés do valor "
"padrão; isso é uma questão de gosto."

#: ../../faq/programming.rst:397
msgid ""
"How can I pass optional or keyword parameters from one function to another?"
msgstr ""
"Como passar parâmetros opcionais ou parâmetros na forma de keyword de uma "
"função a outra?"

#: ../../faq/programming.rst:399
msgid ""
"Collect the arguments using the ``*`` and ``**`` specifiers in the "
"function's parameter list; this gives you the positional arguments as a "
"tuple and the keyword arguments as a dictionary.  You can then pass these "
"arguments when calling another function by using ``*`` and ``**``::"
msgstr ""
"Preceda os argumentos com o uso de especificadores (asteriscos) ``* `` ou "
"``** `` na lista de parâmetros da função; Isso faz com que os argumentos "
"posicionais como uma tupla e os keyword arguments sejam passados como um "
"dicionário. Poderás, também, passar esses argumentos ao invocar outra função "
"usando ``* `` e `` **``::"

#: ../../faq/programming.rst:418
msgid "What is the difference between arguments and parameters?"
msgstr "Qual a diferença entre argumentos e parâmetros?"

#: ../../faq/programming.rst:420
msgid ""
":term:`Parameters <parameter>` are defined by the names that appear in a "
"function definition, whereas :term:`arguments <argument>` are the values "
"actually passed to a function when calling it.  Parameters define what types "
"of arguments a function can accept.  For example, given the function "
"definition::"
msgstr ""
":term:`Parameters 1` são definidos pelos nomes que aparecem na definição da "
"função, enquanto que :term:`arguments 2` são os valores que serão passados "
"para a função no momento em que esta estiver sendo invocada. Os parâmetros "
"irão definir quais os tipos de argumentos que uma função pode receber. Por "
"exemplo, dada a definição da função::"

#: ../../faq/programming.rst:428
msgid ""
"*foo*, *bar* and *kwargs* are parameters of ``func``.  However, when calling "
"``func``, for example::"
msgstr ""
"*foo*, *bar* e *kwargs* são parâmetros de ``func``.  Dessa forma, ao invocar "
"``func``, por exemplo::"

#: ../../faq/programming.rst:433
msgid "the values ``42``, ``314``, and ``somevar`` are arguments."
msgstr "os valores ``42``, ``314``, e ``somevar`` são os argumentos."

#: ../../faq/programming.rst:437
msgid "Why did changing list 'y' also change list 'x'?"
msgstr "Por que ao alterar a lista 'y' também altera a lista 'x'?"

#: ../../faq/programming.rst:439
msgid "If you wrote code like::"
msgstr "Se escreveres um código como::"

#: ../../faq/programming.rst:449
msgid ""
"you might be wondering why appending an element to ``y`` changed ``x`` too."
msgstr ""
"Poderás estar se perguntando por que acrescentar um elemento a ``y`` também "
"mudou ``x``."

#: ../../faq/programming.rst:451
msgid "There are two factors that produce this result:"
msgstr "Há 2 fatores que produzem esse resultado, são eles:"

#: ../../faq/programming.rst:453
msgid ""
"Variables are simply names that refer to objects.  Doing ``y = x`` doesn't "
"create a copy of the list -- it creates a new variable ``y`` that refers to "
"the same object ``x`` refers to.  This means that there is only one object "
"(the list), and both ``x`` and ``y`` refer to it."
msgstr ""
"As variáveis são simplesmente nomes que referem-se a objetos. Ao escrevermos "
"``y=x`` não criará uma cópia da lista - criará uma nova variável ``y`` que "
"irá se referir ao mesmo objeto que ``x`` está se referindo. Isso significa "
"que existe apenas um objeto (lista), e ambos nomes (variáveis) ``x`` e ``y`` "
"estão associados ao mesmo."

#: ../../faq/programming.rst:457
msgid ""
"Lists are :term:`mutable`, which means that you can change their content."
msgstr ""
"Listas são objetos mutáveis :term:`mutable`, o que significa que você pode "
"alterar o seu conteúdo."

#: ../../faq/programming.rst:459
msgid ""
"After the call to :meth:`~list.append`, the content of the mutable object "
"has changed from ``[]`` to ``[10]``.  Since both the variables refer to the "
"same object, using either name accesses the modified value ``[10]``."
msgstr ""
"Após invocar para :meth:`~list.append`, o conteúdo do objeto mutável mudou "
"de ``[]`` para ``[10]``. Uma vez que ambas as variáveis referem-se ao mesmo "
"objeto, usar qualquer um dos nomes acessará o valor modificado ``[10]``."

#: ../../faq/programming.rst:463
msgid "If we instead assign an immutable object to ``x``::"
msgstr "Se por acaso, atribuímos um objeto imutável a ``x``::"

#: ../../faq/programming.rst:473
msgid ""
"we can see that in this case ``x`` and ``y`` are not equal anymore.  This is "
"because integers are :term:`immutable`, and when we do ``x = x + 1`` we are "
"not mutating the int ``5`` by incrementing its value; instead, we are "
"creating a new object (the int ``6``) and assigning it to ``x`` (that is, "
"changing which object ``x`` refers to).  After this assignment we have two "
"objects (the ints ``6`` and ``5``) and two variables that refer to them "
"(``x`` now refers to ``6`` but ``y`` still refers to ``5``)."
msgstr ""
"veremos que nesse caso ``x`` e ``y`` não são mais iguais. Isso ocorre porque "
"os números inteiros são :term:`immutable`, e quando fizermos ``x=x+1`` não "
"estaremos mudando o int ``5`` e incrementando o seu valor; em vez disso, "
"estamos criando um novo objeto (o int ``6``) e associando ``x`` (isto é, "
"mudando para o objeto no qual ``x`` se refere). Após esta tarefa, temos dois "
"objetos (os ints ``6`` e ``5``) e duas variáveis que referem-se a elas "
"(``x`` agora se refere a ``6`` mas ``y`` ainda refere-se a ``5``)."

#: ../../faq/programming.rst:481
msgid ""
"Some operations (for example ``y.append(10)`` and ``y.sort()``) mutate the "
"object, whereas superficially similar operations (for example ``y = y + "
"[10]`` and ``sorted(y)``) create a new object.  In general in Python (and in "
"all cases in the standard library) a method that mutates an object will "
"return ``None`` to help avoid getting the two types of operations confused.  "
"So if you mistakenly write ``y.sort()`` thinking it will give you a sorted "
"copy of ``y``, you'll instead end up with ``None``, which will likely cause "
"your program to generate an easily diagnosed error."
msgstr ""

#: ../../faq/programming.rst:490
msgid ""
"However, there is one class of operations where the same operation sometimes "
"has different behaviors with different types:  the augmented assignment "
"operators.  For example, ``+=`` mutates lists but not tuples or ints "
"(``a_list += [1, 2, 3]`` is equivalent to ``a_list.extend([1, 2, 3])`` and "
"mutates ``a_list``, whereas ``some_tuple += (1, 2, 3)`` and ``some_int += "
"1`` create new objects)."
msgstr ""

#: ../../faq/programming.rst:497
msgid "In other words:"
msgstr "Em outras palavras:"

#: ../../faq/programming.rst:499
msgid ""
"If we have a mutable object (:class:`list`, :class:`dict`, :class:`set`, "
"etc.), we can use some specific operations to mutate it and all the "
"variables that refer to it will see the change."
msgstr ""
"Se tivermos objetos mutáveis (:class:`list`, :class:`dict`, :class:`set`, "
"etc.), podemos usar algumas operações específicas para altera-lo e todas as "
"variáveis que se referem a ela sofreram também a mudança."

#: ../../faq/programming.rst:502
msgid ""
"If we have an immutable object (:class:`str`, :class:`int`, :class:`tuple`, "
"etc.), all the variables that refer to it will always see the same value, "
"but operations that transform that value into a new value always return a "
"new object."
msgstr ""
"Caso tenhamos um objeto imutável (:class:`str`, :class:`int`, :class:"
"`tuple`, etc.), todas as variáveis que se referem as mesmas sempre verão o "
"mesmo valor, mas as operações que transformam-se nesses valores sempre "
"retornarão novos objetos."

#: ../../faq/programming.rst:507
msgid ""
"If you want to know if two variables refer to the same object or not, you "
"can use the :keyword:`is` operator, or the built-in function :func:`id`."
msgstr ""
"Se quiseres saber se duas variáveis se referem ao mesmo objeto ou não, podes "
"usar a palavra-chave :keyword:`is`, ou a função builtin :func:`id`."

#: ../../faq/programming.rst:512
msgid "How do I write a function with output parameters (call by reference)?"
msgstr ""
"Como escrever uma função com parâmetros de saída (invocada por referência)?"

#: ../../faq/programming.rst:514
msgid ""
"Remember that arguments are passed by assignment in Python.  Since "
"assignment just creates references to objects, there's no alias between an "
"argument name in the caller and callee, and so no call-by-reference per se.  "
"You can achieve the desired effect in a number of ways."
msgstr ""
"Lembre-se de que os argumentos são passados por atribuição em Python. Uma "
"vez que a tarefa apenas cria referências a objetos, não existe \"alias\" "
"entre um nome de argumento naquele que invocado e o destinatário, portanto, "
"não há referência de chamada por si. Podes alcançar o efeito desejado de "
"várias maneiras."

#: ../../faq/programming.rst:519
msgid "By returning a tuple of the results::"
msgstr "Retornando um Tupla com os resultados::"

#: ../../faq/programming.rst:530
msgid "This is almost always the clearest solution."
msgstr "Esta quase sempre é a solução mais clara."

#: ../../faq/programming.rst:532
msgid ""
"By using global variables.  This isn't thread-safe, and is not recommended."
msgstr ""
"Utilizando variáveis globais. Essa forma de trabalho não é segura para uso "
"com thread e portanto, a mesma não é recomendada."

#: ../../faq/programming.rst:534
msgid "By passing a mutable (changeable in-place) object::"
msgstr ""
"Pela passagem de um objeto mutável (que possa ser alterado no local) ::"

#: ../../faq/programming.rst:544
msgid "By passing in a dictionary that gets mutated::"
msgstr "Pela passagem de um dicionário que seja mutável::"

#: ../../faq/programming.rst:554
msgid "Or bundle up values in a class instance::"
msgstr "Ou agrupando valores numa instância de classe::"

#: ../../faq/programming.rst:570
msgid "There's almost never a good reason to get this complicated."
msgstr "Quase nunca existe uma boa razão para complicar isso."

#: ../../faq/programming.rst:572
msgid "Your best choice is to return a tuple containing the multiple results."
msgstr ""
"A sua melhor escolha será retornar uma Tupla contendo os múltiplos "
"resultados."

#: ../../faq/programming.rst:576
msgid "How do you make a higher order function in Python?"
msgstr "Como fazer uma função de ordem superior em Python?"

#: ../../faq/programming.rst:578
msgid ""
"You have two choices: you can use nested scopes or you can use callable "
"objects. For example, suppose you wanted to define ``linear(a,b)`` which "
"returns a function ``f(x)`` that computes the value ``a*x+b``.  Using nested "
"scopes::"
msgstr ""
"Existem duas opções: podes usar escopos aninhados ou poderás usar objetos "
"invocáveis. Por exemplo, suponha que desejasses definir que ``linear(a,b)`` "
"retorne uma função ``f(x)`` que calcule o valor ``a*x+b``. Usando escopos "
"aninhados, temos::"

#: ../../faq/programming.rst:587
msgid "Or using a callable object::"
msgstr "Ou utilizando objetos invocáveis::"

#: ../../faq/programming.rst:597
msgid "In both cases, ::"
msgstr "Em ambos os casos::"

#: ../../faq/programming.rst:601
msgid "gives a callable object where ``taxes(10e6) == 0.3 * 10e6 + 2``."
msgstr "dado um objeto invocável, onde ``taxes(10e6) == 0.3 * 10e6 + 2``."

#: ../../faq/programming.rst:603
msgid ""
"The callable object approach has the disadvantage that it is a bit slower "
"and results in slightly longer code.  However, note that a collection of "
"callables can share their signature via inheritance::"
msgstr ""
"A abordagem do objeto invocável tem a desvantagem de que é um pouco mais "
"lento e resulta num código ligeiramente mais longo. No entanto, note que uma "
"coleção de callables pode compartilhar sua assinatura via herança::"

#: ../../faq/programming.rst:612
msgid "Object can encapsulate state for several methods::"
msgstr "Objetos podem encapsular o estado para vários métodos::"

#: ../../faq/programming.rst:630
msgid ""
"Here ``inc()``, ``dec()`` and ``reset()`` act like functions which share the "
"same counting variable."
msgstr ""
"Aqui ``inc()``, ``dec()`` e ``reset()`` funcionam como funções que "
"compartilham a mesma variável contadora."

#: ../../faq/programming.rst:635
msgid "How do I copy an object in Python?"
msgstr "Como faço para copiar um objeto no Python?"

#: ../../faq/programming.rst:637
msgid ""
"In general, try :func:`copy.copy` or :func:`copy.deepcopy` for the general "
"case. Not all objects can be copied, but most can."
msgstr ""
"Basicamente, tente utilizar a função :func:`copy.copy` ou a função :func:"
"`copy.deepcopy` para casos gerais. Nem todos os objetos podem ser copiados, "
"mas a maioria poderá."

#: ../../faq/programming.rst:640
msgid ""
"Some objects can be copied more easily.  Dictionaries have a :meth:`~dict."
"copy` method::"
msgstr ""
"Alguns objetos podem ser copiados com mais facilidade. Os dicionários têm um "
"método :meth:`~dict.copy`::"

#: ../../faq/programming.rst:645
msgid "Sequences can be copied by slicing::"
msgstr "As sequências podem ser copiadas através do uso do slicing::"

#: ../../faq/programming.rst:651
msgid "How can I find the methods or attributes of an object?"
msgstr "Como posso encontrar os métodos ou atributos de um objeto?"

#: ../../faq/programming.rst:653
msgid ""
"For an instance x of a user-defined class, ``dir(x)`` returns an "
"alphabetized list of the names containing the instance attributes and "
"methods and attributes defined by its class."
msgstr ""
"Para uma instância X de uma classe definida pelo usuário, ``dir(x)`` retorna "
"uma lista organizada alfabeticamente dos nomes contidos, os atributos da "
"instância e os métodos e atributos definidos por sua classe."

#: ../../faq/programming.rst:659
msgid "How can my code discover the name of an object?"
msgstr "Como que o meu código pode descobrir o nome de um objeto?"

#: ../../faq/programming.rst:661
msgid ""
"Generally speaking, it can't, because objects don't really have names. "
"Essentially, assignment always binds a name to a value; the same is true of "
"``def`` and ``class`` statements, but in that case the value is a callable. "
"Consider the following code::"
msgstr ""

#: ../../faq/programming.rst:677
msgid ""
"Arguably the class has a name: even though it is bound to two names and "
"invoked through the name B the created instance is still reported as an "
"instance of class A.  However, it is impossible to say whether the "
"instance's name is a or b, since both names are bound to the same value."
msgstr ""
"Provavelmente, a classe tem um nome: mesmo que seja vinculada a dois nomes e "
"invocada através do nome B, a instância criada ainda é relatada como uma "
"instância da classe A. No entanto, é impossível dizer se o nome da instância "
"é A ou B, uma vez que ambos os nomes estão vinculados ao mesmo valor."

#: ../../faq/programming.rst:682
msgid ""
"Generally speaking it should not be necessary for your code to \"know the "
"names\" of particular values. Unless you are deliberately writing "
"introspective programs, this is usually an indication that a change of "
"approach might be beneficial."
msgstr ""
"De um modo geral, não deveria ser necessário que o seu código \"conheça os "
"nomes\" de valores específicos. A menos que escrevas deliberadamente "
"programas introspectivos, isso geralmente é uma indicação de que uma mudança "
"de abordagem pode ser benéfica."

#: ../../faq/programming.rst:687
msgid ""
"In comp.lang.python, Fredrik Lundh once gave an excellent analogy in answer "
"to this question:"
msgstr ""
"Em comp.lang.python, Fredrik Lundh deu uma excelente analogia em resposta a "
"esta pergunta:"

#: ../../faq/programming.rst:690
msgid ""
"The same way as you get the name of that cat you found on your porch: the "
"cat (object) itself cannot tell you its name, and it doesn't really care -- "
"so the only way to find out what it's called is to ask all your neighbours "
"(namespaces) if it's their cat (object)..."
msgstr ""

#: ../../faq/programming.rst:695
msgid ""
"....and don't be surprised if you'll find that it's known by many names, or "
"no name at all!"
msgstr ""

#: ../../faq/programming.rst:700
msgid "What's up with the comma operator's precedence?"
msgstr "O que há com a precedência do operador vírgula?"

#: ../../faq/programming.rst:702
msgid "Comma is not an operator in Python.  Consider this session::"
msgstr "A vírgula não é um operador em Python. Considere este código::"

#: ../../faq/programming.rst:707
msgid ""
"Since the comma is not an operator, but a separator between expressions the "
"above is evaluated as if you had entered::"
msgstr ""
"Uma vez que a vírgula não seja um operador, mas um separador entre as "
"expressões acima, o código será avaliado como se tivéssemos entrado::"

#: ../../faq/programming.rst:712
msgid "not::"
msgstr "não::"

#: ../../faq/programming.rst:716
msgid ""
"The same is true of the various assignment operators (``=``, ``+=`` etc).  "
"They are not truly operators but syntactic delimiters in assignment "
"statements."
msgstr ""

#: ../../faq/programming.rst:721
msgid "Is there an equivalent of C's \"?:\" ternary operator?"
msgstr "Existe um equivalente ao operador \"?:\" ternário do C?"

#: ../../faq/programming.rst:723
msgid "Yes, there is. The syntax is as follows::"
msgstr "Sim existe. A sintaxe é a seguinte::"

#: ../../faq/programming.rst:730
msgid ""
"Before this syntax was introduced in Python 2.5, a common idiom was to use "
"logical operators::"
msgstr ""
"Antes que essa sintaxe fosse introduzida no Python 2.5, um idioma comum era "
"usar operadores lógicos::"

#: ../../faq/programming.rst:735
msgid ""
"However, this idiom is unsafe, as it can give wrong results when *on_true* "
"has a false boolean value.  Therefore, it is always better to use the ``... "
"if ... else ...`` form."
msgstr ""
"No entanto, essa forma não é segura, pois pode dar resultados inesperados "
"quando *on_true* possuir um valor booleano Falso. Portanto, é sempre melhor "
"usar a forma  ``... if ... else ...`."

#: ../../faq/programming.rst:741
msgid "Is it possible to write obfuscated one-liners in Python?"
msgstr ""

#: ../../faq/programming.rst:743
msgid ""
"Yes.  Usually this is done by nesting :keyword:`lambda` within :keyword:`!"
"lambda`.  See the following three examples, due to Ulf Bartelt::"
msgstr ""

#: ../../faq/programming.rst:770
msgid "Don't try this at home, kids!"
msgstr "Não tente isso em casa, crianças!"

#: ../../faq/programming.rst:776
msgid "What does the slash(/) in the parameter list of a function mean?"
msgstr ""

#: ../../faq/programming.rst:778
msgid ""
"A slash in the argument list of a function denotes that the parameters prior "
"to it are positional-only.  Positional-only parameters are the ones without "
"an externally-usable name.  Upon calling a function that accepts positional-"
"only parameters, arguments are mapped to parameters based solely on their "
"position. For example, :func:`divmod` is a function that accepts positional-"
"only parameters. Its documentation looks like this::"
msgstr ""

#: ../../faq/programming.rst:791
msgid ""
"The slash at the end of the parameter list means that both parameters are "
"positional-only. Thus, calling :func:`divmod` with keyword arguments would "
"lead to an error::"
msgstr ""

#: ../../faq/programming.rst:802
msgid "Numbers and strings"
msgstr "Números e Strings"

#: ../../faq/programming.rst:805
msgid "How do I specify hexadecimal and octal integers?"
msgstr "Como faço para especificar números inteiros hexadecimais e octal?"

#: ../../faq/programming.rst:807
msgid ""
"To specify an octal digit, precede the octal value with a zero, and then a "
"lower or uppercase \"o\".  For example, to set the variable \"a\" to the "
"octal value \"10\" (8 in decimal), type::"
msgstr ""
"Para especificar um dígito no formato octal, preceda o valor octal com um "
"zero e, em seguida, um \"o\" minúsculo ou maiúsculo. Por exemplo, para "
"definir a variável \"a\" para o valor octal \"10\" (8 em decimal), digite::"

#: ../../faq/programming.rst:815
msgid ""
"Hexadecimal is just as easy.  Simply precede the hexadecimal number with a "
"zero, and then a lower or uppercase \"x\".  Hexadecimal digits can be "
"specified in lower or uppercase.  For example, in the Python interpreter::"
msgstr ""
"Hexadecimal é bem fácil. Basta preceder o número hexadecimal com um zero e, "
"em seguida, um \"x\" minúsculo ou maiúsculo. Os dígitos hexadecimais podem "
"ser especificados em letras maiúsculas e minúsculas. Por exemplo, no "
"interpretador Python::"

#: ../../faq/programming.rst:828
msgid "Why does -22 // 10 return -3?"
msgstr "Por que -22 // 10 retorna -3?"

#: ../../faq/programming.rst:830
msgid ""
"It's primarily driven by the desire that ``i % j`` have the same sign as "
"``j``. If you want that, and also want::"
msgstr ""
"É principalmente direcionado pelo desejo de que ``i % j`` possui o mesmo "
"sinal que ``j``. Se quiseres isso, e também se desejares::"

#: ../../faq/programming.rst:835
msgid ""
"then integer division has to return the floor.  C also requires that "
"identity to hold, and then compilers that truncate ``i // j`` need to make "
"``i % j`` have the same sign as ``i``."
msgstr ""

#: ../../faq/programming.rst:839
msgid ""
"There are few real use cases for ``i % j`` when ``j`` is negative.  When "
"``j`` is positive, there are many, and in virtually all of them it's more "
"useful for ``i % j`` to be ``>= 0``.  If the clock says 10 now, what did it "
"say 200 hours ago?  ``-190 % 12 == 2`` is useful; ``-190 % 12 == -10`` is a "
"bug waiting to bite."
msgstr ""

#: ../../faq/programming.rst:847
msgid "How do I convert a string to a number?"
msgstr "Como faço para converter uma String em um número?"

#: ../../faq/programming.rst:849
msgid ""
"For integers, use the built-in :func:`int` type constructor, e.g. "
"``int('144') == 144``.  Similarly, :func:`float` converts to floating-point, "
"e.g. ``float('144') == 144.0``."
msgstr ""
"Para inteiros, use o tipo built-in :func:`int`, por exemplo, ``int('144') == "
"144``. Da mesma forma, :func:`float` converterá para um valor do tipo ponto "
"flutuante, por exemplo  ``float('144') == 144.0``."

#: ../../faq/programming.rst:853
msgid ""
"By default, these interpret the number as decimal, so that ``int('0144') == "
"144`` and ``int('0x144')`` raises :exc:`ValueError`. ``int(string, base)`` "
"takes the base to convert from as a second optional argument, so "
"``int('0x144', 16) == 324``.  If the base is specified as 0, the number is "
"interpreted using Python's rules: a leading '0o' indicates octal, and '0x' "
"indicates a hex number."
msgstr ""

#: ../../faq/programming.rst:859
msgid ""
"Do not use the built-in function :func:`eval` if all you need is to convert "
"strings to numbers.  :func:`eval` will be significantly slower and it "
"presents a security risk: someone could pass you a Python expression that "
"might have unwanted side effects.  For example, someone could pass "
"``__import__('os').system(\"rm -rf $HOME\")`` which would erase your home "
"directory."
msgstr ""

#: ../../faq/programming.rst:866
msgid ""
":func:`eval` also has the effect of interpreting numbers as Python "
"expressions, so that e.g. ``eval('09')`` gives a syntax error because Python "
"does not allow leading '0' in a decimal number (except '0')."
msgstr ""

#: ../../faq/programming.rst:872
msgid "How do I convert a number to a string?"
msgstr "Como faço para converter um número numa string?"

#: ../../faq/programming.rst:874
msgid ""
"To convert, e.g., the number 144 to the string '144', use the built-in type "
"constructor :func:`str`.  If you want a hexadecimal or octal representation, "
"use the built-in functions :func:`hex` or :func:`oct`.  For fancy "
"formatting, see the :ref:`f-strings` and :ref:`formatstrings` sections, e.g. "
"``\"{:04d}\".format(144)`` yields ``'0144'`` and ``\"{:.3f}\"."
"format(1.0/3.0)`` yields ``'0.333'``."
msgstr ""
"Para converter, por exemplo, o número 144 para a string '144', use o tipo "
"builtin :func:`str`. Caso queiras uma representação hexadecimal ou octal, "
"use as funções internas :func:`hex` ou :func:`oct`. Para a formatação "
"extravagante, veja as seções :ref:`f-strings` e :ref:`formatstrings`, e. "
"{:04d}\".format(144)`` yields ``'0144'`` e ``\"{:.3f}\".format(1.0/3.0)`` "
"yields ``'0.333'``."

#: ../../faq/programming.rst:883
msgid "How do I modify a string in place?"
msgstr "Como faço para modificar uma string no lugar?"

#: ../../faq/programming.rst:885
msgid ""
"You can't, because strings are immutable.  In most situations, you should "
"simply construct a new string from the various parts you want to assemble it "
"from.  However, if you need an object with the ability to modify in-place "
"unicode data, try using an :class:`io.StringIO` object or the :mod:`array` "
"module::"
msgstr ""
"Você não poder fazer isso as Strings são objetos imutáveis. Na maioria das "
"situações, você simplesmente deve construir uma nova string a partir das "
"várias partes das quais desejas que a sua nova String tenha. No entanto, se "
"precisares de um objeto com a capacidade de modificar dados Unicode "
"localmente, tente usar a classe :class:`io.StringIO` ou o módulo :mod:"
"`array`::"

#: ../../faq/programming.rst:915
msgid "How do I use strings to call functions/methods?"
msgstr "Como faço para invocar funções/métodos através de uma String?"

#: ../../faq/programming.rst:917
msgid "There are various techniques."
msgstr "Existem várias técnicas."

#: ../../faq/programming.rst:919
msgid ""
"The best is to use a dictionary that maps strings to functions.  The primary "
"advantage of this technique is that the strings do not need to match the "
"names of the functions.  This is also the primary technique used to emulate "
"a case construct::"
msgstr ""
"A melhor forma é usar um dicionário que mapeie a Strings para funções. A "
"principal vantagem desta técnica é que as Strings não precisam combinar os "
"nomes das funções. Esta é também a principal técnica utilizada para emular "
"uma construção de maiúsculas e minúsculas ::"

#: ../../faq/programming.rst:934
msgid "Use the built-in function :func:`getattr`::"
msgstr "Utilize a função built-in :func:`getattr`::"

#: ../../faq/programming.rst:939
msgid ""
"Note that :func:`getattr` works on any object, including classes, class "
"instances, modules, and so on."
msgstr ""
"Observe que a fução :func:`getattr` funciona com qualquer objeto, incluindo "
"classes, instâncias de classe, módulos e assim por diante."

#: ../../faq/programming.rst:942
msgid "This is used in several places in the standard library, like this::"
msgstr "A mesma é usado em vários lugares na biblioteca padrão, como este::"

#: ../../faq/programming.rst:955
msgid "Use :func:`locals` or :func:`eval` to resolve the function name::"
msgstr ""
"Utilize a função :func:`locals` ou a função :func:`eval` para resolver o "
"nome da função ::"

#: ../../faq/programming.rst:968
msgid ""
"Note: Using :func:`eval` is slow and dangerous.  If you don't have absolute "
"control over the contents of the string, someone could pass a string that "
"resulted in an arbitrary function being executed."
msgstr ""
"Note: Usar a função :func:`eval` é lento e perigoso.  Se você não tiver "
"controle absoluto sobre o conteúdo da String, alguém pode passar uma String "
"que resulte numa função arbitrária sendo executada dentro da sua aplicação"

#: ../../faq/programming.rst:973
msgid ""
"Is there an equivalent to Perl's chomp() for removing trailing newlines from "
"strings?"
msgstr ""
"Existe um equivalente em Perl ``chomp()`` para remover linhas novas de uma "
"String?"

#: ../../faq/programming.rst:975
msgid ""
"You can use ``S.rstrip(\"\\r\\n\")`` to remove all occurrences of any line "
"terminator from the end of the string ``S`` without removing other trailing "
"whitespace.  If the string ``S`` represents more than one line, with several "
"empty lines at the end, the line terminators for all the blank lines will be "
"removed::"
msgstr ""
"Podes utilizar ``S.rstrip(\"\\r\\n\")`` para remover todas as ocorrência de "
"qualquer terminador de linha que esteja no final da String``S`` sem remover "
"os espaços em branco.  Se a string ``S`` representar mais de uma linha, "
"contendo várias linhas vazias no final, os terminadores de linha de todas "
"linhas em branco serão removidos::"

#: ../../faq/programming.rst:987
msgid ""
"Since this is typically only desired when reading text one line at a time, "
"using ``S.rstrip()`` this way works well."
msgstr ""
"Geralmente isso só é desejado ao ler um texto linha por linha, usando ``S."
"rstrip()`` dessa maneira funciona bem."

#: ../../faq/programming.rst:992
msgid "Is there a scanf() or sscanf() equivalent?"
msgstr "Existe uma função scanf() ou sscanf() ou algo equivalente?"

#: ../../faq/programming.rst:994
msgid "Not as such."
msgstr "Não como tal."

#: ../../faq/programming.rst:996
msgid ""
"For simple input parsing, the easiest approach is usually to split the line "
"into whitespace-delimited words using the :meth:`~str.split` method of "
"string objects and then convert decimal strings to numeric values using :"
"func:`int` or :func:`float`.  ``split()`` supports an optional \"sep\" "
"parameter which is useful if the line uses something other than whitespace "
"as a separator."
msgstr ""
"Para a análise de entrada simples, a abordagem mais fácil geralmente é "
"dividir a linha em palavras delimitadas por espaços em branco usando o "
"método :meth:`str.split` de objetos Strings e, em seguida, converter as "
"Strings decimais para valores numéricos usando a função :func:`int` ou a "
"função :func:`float`. A função ``split()`` suporta um parâmetro \"sep\" "
"opcional que é útil se a linha utilizar algo diferente de espaço em branco "
"como separador."

#: ../../faq/programming.rst:1002
msgid ""
"For more complicated input parsing, regular expressions are more powerful "
"than C's :c:func:`sscanf` and better suited for the task."
msgstr ""
"Para entradas de textos mais complicadas, as expressões regulares são mais "
"poderosas do que as funções C's :c:func:`sscanf` e mais adequadas para essa "
"tarefa."

#: ../../faq/programming.rst:1007
msgid "What does 'UnicodeDecodeError' or 'UnicodeEncodeError' error  mean?"
msgstr "O que significa o erro 'UnicodeDecodeError' ou 'UnicodeEncodeError'?"

#: ../../faq/programming.rst:1009
msgid "See the :ref:`unicode-howto`."
msgstr "Veja o HowTo :ref:`unicode-howto`."

#: ../../faq/programming.rst:1013
msgid "Performance"
msgstr "Performance"

#: ../../faq/programming.rst:1016
msgid "My program is too slow. How do I speed it up?"
msgstr "Meu programa está muito lento. Como faço para melhorar a performance?"

#: ../../faq/programming.rst:1018
msgid ""
"That's a tough one, in general.  First, here are a list of things to "
"remember before diving further:"
msgstr ""
"Isso geralmente é algo difícil de conseguir. Primeiro, aqui está uma lista "
"de situações que devemos lembrar para melhorar a performance da nossa "
"aplicação antes de buscarmos outras soluções:"

#: ../../faq/programming.rst:1021
msgid ""
"Performance characteristics vary across Python implementations.  This FAQ "
"focusses on :term:`CPython`."
msgstr ""
"As características relacionadas ao desempenho variam em todas as "
"implementações do Python. Esta FAQ foca somente nisso :term:`CPython`."

#: ../../faq/programming.rst:1023
msgid ""
"Behaviour can vary across operating systems, especially when talking about I/"
"O or multi-threading."
msgstr ""
"O comportamento pode variar em cada Sistemas Operacionais, especialmente "
"quando estivermos tratando de I/o ou multi-threading."

#: ../../faq/programming.rst:1025
msgid ""
"You should always find the hot spots in your program *before* attempting to "
"optimize any code (see the :mod:`profile` module)."
msgstr ""
"Sempre devemos encontrar os hot spots em nosso programa *antes de* tentar "
"otimizar qualquer código (veja o módulo :mod:`profile`)."

#: ../../faq/programming.rst:1027
msgid ""
"Writing benchmark scripts will allow you to iterate quickly when searching "
"for improvements (see the :mod:`timeit` module)."
msgstr ""
"Escrever Scripts de benchmark permitirá iterar rapidamente buscando "
"melhorias (veja o módulo :mod:`timeit`)."

#: ../../faq/programming.rst:1029
msgid ""
"It is highly recommended to have good code coverage (through unit testing or "
"any other technique) before potentially introducing regressions hidden in "
"sophisticated optimizations."
msgstr ""
"É altamente recomendável ter boa cobertura de código (através de testes de "
"unidade ou qualquer outra técnica) antes de potencialmente apresentar "
"regressões escondidas em otimizações sofisticadas."

#: ../../faq/programming.rst:1033
msgid ""
"That being said, there are many tricks to speed up Python code.  Here are "
"some general principles which go a long way towards reaching acceptable "
"performance levels:"
msgstr ""
"Dito isto, existem muitos truques para acelerar nossos códigos Python. Aqui "
"estão alguns dos principais tópicos e que geralmente ajudam a atingir níveis "
"de desempenho aceitáveis:"

#: ../../faq/programming.rst:1037
msgid ""
"Making your algorithms faster (or changing to faster ones) can yield much "
"larger benefits than trying to sprinkle micro-optimization tricks all over "
"your code."
msgstr ""

#: ../../faq/programming.rst:1041
msgid ""
"Use the right data structures.  Study documentation for the :ref:`bltin-"
"types` and the :mod:`collections` module."
msgstr ""
"Use as estruturas de dados corretas. Documentação de estudo para :ref:`bltin-"
"types` e o módulo :mod:`collections`."

#: ../../faq/programming.rst:1044
msgid ""
"When the standard library provides a primitive for doing something, it is "
"likely (although not guaranteed) to be faster than any alternative you may "
"come up with.  This is doubly true for primitives written in C, such as "
"builtins and some extension types.  For example, be sure to use either the :"
"meth:`list.sort` built-in method or the related :func:`sorted` function to "
"do sorting (and see the :ref:`sortinghowto` for examples of moderately "
"advanced usage)."
msgstr ""
"Quando a biblioteca padrão fornecer um tipo primitivo para fazer algo, é "
"provável (embora não garantido) que este seja mais rápido do que qualquer "
"alternativa que possa surgir. Isso  geralmente é verdade para os tipos "
"primitivos escritos em C, como os builtins e alguns tipos de extensão. Por "
"exemplo, certifique-se de usar o método interno :meth:`list.sort` ou a "
"função relacionada :func:`sorted` para fazer a ordenação (e veja :ref:"
"`sortinghowto` para exemplos de uso moderadamente avançado)."

#: ../../faq/programming.rst:1052
msgid ""
"Abstractions tend to create indirections and force the interpreter to work "
"more.  If the levels of indirection outweigh the amount of useful work done, "
"your program will be slower.  You should avoid excessive abstraction, "
"especially under the form of tiny functions or methods (which are also often "
"detrimental to readability)."
msgstr ""
"As abstrações tendem a criar indireções e forçar o intérprete a trabalhar "
"mais. Se os níveis de indireção superarem a quantidade de trabalho útil "
"feito, seu programa ficará mais lento. Você deve evitar a abstração "
"excessiva, especialmente sob a forma de pequenas funções ou métodos (que "
"também são muitas vezes prejudiciais à legibilidade)."

#: ../../faq/programming.rst:1058
msgid ""
"If you have reached the limit of what pure Python can allow, there are tools "
"to take you further away.  For example, `Cython <http://cython.org>`_ can "
"compile a slightly modified version of Python code into a C extension, and "
"can be used on many different platforms.  Cython can take advantage of "
"compilation (and optional type annotations) to make your code significantly "
"faster than when interpreted.  If you are confident in your C programming "
"skills, you can also :ref:`write a C extension module <extending-index>` "
"yourself."
msgstr ""
"Se você atingiu o limite do que Python puro pode permitir, existem "
"ferramentas para levá-lo mais longe. Por exemplo, o `Cython <http://cython."
"org>`_ pode compilar uma versão ligeiramente modificada do código Python "
"numa extensão C e pode ser usado em muitas plataformas diferentes. O Cython "
"pode tirar proveito da compilação (e anotações tipo opcional) para tornar o "
"seu código significativamente mais rápido do que quando interpretado. Se "
"você está confiante em suas habilidades de programação C, também podes "
"escrever seus módulos em C :ref:`write a C extension module <extending-"
"index>`."

#: ../../faq/programming.rst:1068
msgid ""
"The wiki page devoted to `performance tips <https://wiki.python.org/moin/"
"PythonSpeed/PerformanceTips>`_."
msgstr ""
"A página wiki dedicada a dicas de performance `performance tips <https://"
"wiki.python.org/moin/PythonSpeed/PerformanceTips>`_."

#: ../../faq/programming.rst:1074
msgid "What is the most efficient way to concatenate many strings together?"
msgstr "Qual é a maneira mais eficiente de concatenar muitas Strings?"

#: ../../faq/programming.rst:1076
msgid ""
":class:`str` and :class:`bytes` objects are immutable, therefore "
"concatenating many strings together is inefficient as each concatenation "
"creates a new object.  In the general case, the total runtime cost is "
"quadratic in the total string length."
msgstr ""
"A classe :class:`str` e a classe :class:`bytes` são objetos imutáveis, "
"portanto, concatenar muitas Strings em é ineficiente, pois cada concatenação "
"criará um novo objeto String. No caso geral, o custo total do tempo de "
"execução é quadrático no comprimento total da String."

#: ../../faq/programming.rst:1081
msgid ""
"To accumulate many :class:`str` objects, the recommended idiom is to place "
"them into a list and call :meth:`str.join` at the end::"
msgstr ""
"Para juntar vários objetos :class:`str`, a linguagem recomendada colocá-los "
"numa lista e invocar o método :meth:`str.join`::"

#: ../../faq/programming.rst:1089
msgid "(another reasonably efficient idiom is to use :class:`io.StringIO`)"
msgstr ""
"(outra forma razoavelmente eficiente é usar a classe :class:`io.StringIO`)"

#: ../../faq/programming.rst:1091
msgid ""
"To accumulate many :class:`bytes` objects, the recommended idiom is to "
"extend a :class:`bytearray` object using in-place concatenation (the ``+=`` "
"operator)::"
msgstr ""
"Para juntar vários objetos  :class:`bytes`, a linguagem recomendada estender "
"uma classe :class:`bytearray` usando a concatenação in-place (com o operador "
"``+=``)::"

#: ../../faq/programming.rst:1100
msgid "Sequences (Tuples/Lists)"
msgstr "Sequencias (Tuples/Lists)"

#: ../../faq/programming.rst:1103
msgid "How do I convert between tuples and lists?"
msgstr "Como faço para converter tuplas em listas?"

#: ../../faq/programming.rst:1105
msgid ""
"The type constructor ``tuple(seq)`` converts any sequence (actually, any "
"iterable) into a tuple with the same items in the same order."
msgstr ""
"O construtor de tipo ``tuple(seq)`` converte qualquer sequência (na verdade, "
"qualquer iterável) numa tupla com os mesmos itens na mesma ordem."

#: ../../faq/programming.rst:1108
msgid ""
"For example, ``tuple([1, 2, 3])`` yields ``(1, 2, 3)`` and ``tuple('abc')`` "
"yields ``('a', 'b', 'c')``.  If the argument is a tuple, it does not make a "
"copy but returns the same object, so it is cheap to call :func:`tuple` when "
"you aren't sure that an object is already a tuple."
msgstr ""
"Por exemplo, ``tuple([1, 2, 3])`` yields ``(1, 2, 3)`` e ``tuple('abc')`` "
"yields ``('a', 'b', 'c')``.  Se o argumento for uma tupla, a mesma não faz "
"uma cópia, mas retorna o mesmo objeto, por isso é barato invocar a função :"
"func:`tuple` quando você não tiver certeza que determinado objeto já é uma "
"tupla."

#: ../../faq/programming.rst:1113
msgid ""
"The type constructor ``list(seq)`` converts any sequence or iterable into a "
"list with the same items in the same order.  For example, ``list((1, 2, "
"3))`` yields ``[1, 2, 3]`` and ``list('abc')`` yields ``['a', 'b', 'c']``.  "
"If the argument is a list, it makes a copy just like ``seq[:]`` would."
msgstr ""
" construtor de tipos ``list(seq)`` converte qualquer seqüência ou iterável "
"em uma lista com os mesmos itens na mesma ordem. Por exemplo, ``list((1, 2, "
"3))`` yields ``[1, 2, 3]`` e ``list('abc')`` yields ``['a', 'b', 'c']``.   "
"Se o argumento for uma lista, o meso fará uma cópia como em ``seq[:]``."

#: ../../faq/programming.rst:1120
msgid "What's a negative index?"
msgstr "O que é um índice negativo?"

#: ../../faq/programming.rst:1122
msgid ""
"Python sequences are indexed with positive numbers and negative numbers.  "
"For positive numbers 0 is the first index 1 is the second index and so "
"forth.  For negative indices -1 is the last index and -2 is the penultimate "
"(next to last) index and so forth.  Think of ``seq[-n]`` as the same as "
"``seq[len(seq)-n]``."
msgstr ""

#: ../../faq/programming.rst:1127
msgid ""
"Using negative indices can be very convenient.  For example ``S[:-1]`` is "
"all of the string except for its last character, which is useful for "
"removing the trailing newline from a string."
msgstr ""

#: ../../faq/programming.rst:1133
msgid "How do I iterate over a sequence in reverse order?"
msgstr ""

#: ../../faq/programming.rst:1135
msgid ""
"Use the :func:`reversed` built-in function, which is new in Python 2.4::"
msgstr ""

#: ../../faq/programming.rst:1140
msgid ""
"This won't touch your original sequence, but build a new copy with reversed "
"order to iterate over."
msgstr ""

#: ../../faq/programming.rst:1143
msgid "With Python 2.3, you can use an extended slice syntax::"
msgstr ""

#: ../../faq/programming.rst:1150
msgid "How do you remove duplicates from a list?"
msgstr ""

#: ../../faq/programming.rst:1152
msgid "See the Python Cookbook for a long discussion of many ways to do this:"
msgstr ""

#: ../../faq/programming.rst:1154
msgid "https://code.activestate.com/recipes/52560/"
msgstr "https://code.activestate.com/recipes/52560/"

#: ../../faq/programming.rst:1156
msgid ""
"If you don't mind reordering the list, sort it and then scan from the end of "
"the list, deleting duplicates as you go::"
msgstr ""

#: ../../faq/programming.rst:1168
msgid ""
"If all elements of the list may be used as set keys (i.e. they are all :term:"
"`hashable`) this is often faster ::"
msgstr ""

#: ../../faq/programming.rst:1173
msgid ""
"This converts the list into a set, thereby removing duplicates, and then "
"back into a list."
msgstr ""

#: ../../faq/programming.rst:1178
msgid "How do you make an array in Python?"
msgstr ""

#: ../../faq/programming.rst:1180
msgid "Use a list::"
msgstr "Utilize uma lista::"

#: ../../faq/programming.rst:1184
msgid ""
"Lists are equivalent to C or Pascal arrays in their time complexity; the "
"primary difference is that a Python list can contain objects of many "
"different types."
msgstr ""

#: ../../faq/programming.rst:1187
msgid ""
"The ``array`` module also provides methods for creating arrays of fixed "
"types with compact representations, but they are slower to index than "
"lists.  Also note that the Numeric extensions and others define array-like "
"structures with various characteristics as well."
msgstr ""

#: ../../faq/programming.rst:1192
msgid ""
"To get Lisp-style linked lists, you can emulate cons cells using tuples::"
msgstr ""

#: ../../faq/programming.rst:1196
msgid ""
"If mutability is desired, you could use lists instead of tuples.  Here the "
"analogue of lisp car is ``lisp_list[0]`` and the analogue of cdr is "
"``lisp_list[1]``.  Only do this if you're sure you really need to, because "
"it's usually a lot slower than using Python lists."
msgstr ""

#: ../../faq/programming.rst:1205
msgid "How do I create a multidimensional list?"
msgstr "Como faço para criar uma lista multidimensional?"

#: ../../faq/programming.rst:1207
msgid "You probably tried to make a multidimensional array like this::"
msgstr "Você provavelmente tentou fazer um Array multidimensional como isso::"

#: ../../faq/programming.rst:1211
msgid "This looks correct if you print it:"
msgstr "Isso parece correto se você imprimir:"

#: ../../faq/programming.rst:1222
msgid "But when you assign a value, it shows up in multiple places:"
msgstr "Mas quando atribuires um valor, o mesmo aparecerá em vários lugares:"

#: ../../faq/programming.rst:1234
msgid ""
"The reason is that replicating a list with ``*`` doesn't create copies, it "
"only creates references to the existing objects.  The ``*3`` creates a list "
"containing 3 references to the same list of length two.  Changes to one row "
"will show in all rows, which is almost certainly not what you want."
msgstr ""
"A razão é que replicar uma lista com ``*`` não cria cópias, ela apenas cria "
"referências aos objetos existentes. O ``*3`` cria uma lista contendo 3 "
"referências para a mesma lista que contém 2 itens cada. Mudanças numa linha "
"serão mostradas em todas as linhas, o que certamente não é o que você deseja."

#: ../../faq/programming.rst:1239
msgid ""
"The suggested approach is to create a list of the desired length first and "
"then fill in each element with a newly created list::"
msgstr ""
"A abordagem sugerida é criar uma lista de comprimento desejado primeiro e, "
"em seguida, preencher cada elemento com uma lista recém-criada::"

#: ../../faq/programming.rst:1246
msgid ""
"This generates a list containing 3 different lists of length two.  You can "
"also use a list comprehension::"
msgstr ""
"Isso gera uma lista contendo 3 listas diferentes contendo 2 itens cadas. "
"Você também pode usar uma list comprehension::"

#: ../../faq/programming.rst:1252
msgid ""
"Or, you can use an extension that provides a matrix datatype; `NumPy <http://"
"www.numpy.org/>`_ is the best known."
msgstr ""
"Ou, você pode usar uma extensão que forneça um tipo de dados de Array; "
"`NumPy <http://www.numpy.org/>`_ is the best known."

#: ../../faq/programming.rst:1257
msgid "How do I apply a method to a sequence of objects?"
msgstr ""

#: ../../faq/programming.rst:1259
msgid "Use a list comprehension::"
msgstr "Usando list comprehension::"

#: ../../faq/programming.rst:1266
msgid ""
"Why does a_tuple[i] += ['item'] raise an exception when the addition works?"
msgstr ""
"Porque a_tuple[i] += ['item'] levanta uma exceção quando a adição funciona?"

#: ../../faq/programming.rst:1268
msgid ""
"This is because of a combination of the fact that augmented assignment "
"operators are *assignment* operators, and the difference between mutable and "
"immutable objects in Python."
msgstr ""

#: ../../faq/programming.rst:1272
msgid ""
"This discussion applies in general when augmented assignment operators are "
"applied to elements of a tuple that point to mutable objects, but we'll use "
"a ``list`` and ``+=`` as our exemplar."
msgstr ""

#: ../../faq/programming.rst:1276
msgid "If you wrote::"
msgstr "Se você escrever::"

#: ../../faq/programming.rst:1284
msgid ""
"The reason for the exception should be immediately clear: ``1`` is added to "
"the object ``a_tuple[0]`` points to (``1``), producing the result object, "
"``2``, but when we attempt to assign the result of the computation, ``2``, "
"to element ``0`` of the tuple, we get an error because we can't change what "
"an element of a tuple points to."
msgstr ""

#: ../../faq/programming.rst:1290
msgid ""
"Under the covers, what this augmented assignment statement is doing is "
"approximately this::"
msgstr ""

#: ../../faq/programming.rst:1299
msgid ""
"It is the assignment part of the operation that produces the error, since a "
"tuple is immutable."
msgstr ""

#: ../../faq/programming.rst:1302
msgid "When you write something like::"
msgstr ""

#: ../../faq/programming.rst:1310
msgid ""
"The exception is a bit more surprising, and even more surprising is the fact "
"that even though there was an error, the append worked::"
msgstr ""

#: ../../faq/programming.rst:1316
msgid ""
"To see why this happens, you need to know that (a) if an object implements "
"an ``__iadd__`` magic method, it gets called when the ``+=`` augmented "
"assignment is executed, and its return value is what gets used in the "
"assignment statement; and (b) for lists, ``__iadd__`` is equivalent to "
"calling ``extend`` on the list and returning the list.  That's why we say "
"that for lists, ``+=`` is a \"shorthand\" for ``list.extend``::"
msgstr ""

#: ../../faq/programming.rst:1328
msgid "This is equivalent to::"
msgstr "This is equivalent to::"

#: ../../faq/programming.rst:1333
msgid ""
"The object pointed to by a_list has been mutated, and the pointer to the "
"mutated object is assigned back to ``a_list``.  The end result of the "
"assignment is a no-op, since it is a pointer to the same object that "
"``a_list`` was previously pointing to, but the assignment still happens."
msgstr ""

#: ../../faq/programming.rst:1338
msgid "Thus, in our tuple example what is happening is equivalent to::"
msgstr ""

#: ../../faq/programming.rst:1346
msgid ""
"The ``__iadd__`` succeeds, and thus the list is extended, but even though "
"``result`` points to the same object that ``a_tuple[0]`` already points to, "
"that final assignment still results in an error, because tuples are "
"immutable."
msgstr ""

#: ../../faq/programming.rst:1352
msgid ""
"I want to do a complicated sort: can you do a Schwartzian Transform in "
"Python?"
msgstr ""

#: ../../faq/programming.rst:1354
msgid ""
"The technique, attributed to Randal Schwartz of the Perl community, sorts "
"the elements of a list by a metric which maps each element to its \"sort "
"value\". In Python, use the ``key`` argument for the :meth:`list.sort` "
"method::"
msgstr ""

#: ../../faq/programming.rst:1363
msgid "How can I sort one list by values from another list?"
msgstr ""

#: ../../faq/programming.rst:1365
msgid ""
"Merge them into an iterator of tuples, sort the resulting list, and then "
"pick out the element you want. ::"
msgstr ""

#: ../../faq/programming.rst:1379
msgid "An alternative for the last step is::"
msgstr "Uma alternativa para o último passo é::"

#: ../../faq/programming.rst:1384
msgid ""
"If you find this more legible, you might prefer to use this instead of the "
"final list comprehension.  However, it is almost twice as slow for long "
"lists.  Why? First, the ``append()`` operation has to reallocate memory, and "
"while it uses some tricks to avoid doing that each time, it still has to do "
"it occasionally, and that costs quite a bit.  Second, the expression "
"\"result.append\" requires an extra attribute lookup, and third, there's a "
"speed reduction from having to make all those function calls."
msgstr ""

#: ../../faq/programming.rst:1394
msgid "Objects"
msgstr "Objetos"

#: ../../faq/programming.rst:1397
msgid "What is a class?"
msgstr "O que é uma classe?"

#: ../../faq/programming.rst:1399
msgid ""
"A class is the particular object type created by executing a class "
"statement. Class objects are used as templates to create instance objects, "
"which embody both the data (attributes) and code (methods) specific to a "
"datatype."
msgstr ""

#: ../../faq/programming.rst:1403
msgid ""
"A class can be based on one or more other classes, called its base "
"class(es). It then inherits the attributes and methods of its base classes. "
"This allows an object model to be successively refined by inheritance.  You "
"might have a generic ``Mailbox`` class that provides basic accessor methods "
"for a mailbox, and subclasses such as ``MboxMailbox``, ``MaildirMailbox``, "
"``OutlookMailbox`` that handle various specific mailbox formats."
msgstr ""

#: ../../faq/programming.rst:1412
msgid "What is a method?"
msgstr "O que é um método?"

#: ../../faq/programming.rst:1414
msgid ""
"A method is a function on some object ``x`` that you normally call as ``x."
"name(arguments...)``.  Methods are defined as functions inside the class "
"definition::"
msgstr ""

#: ../../faq/programming.rst:1424
msgid "What is self?"
msgstr "O que é o self?"

#: ../../faq/programming.rst:1426
msgid ""
"Self is merely a conventional name for the first argument of a method.  A "
"method defined as ``meth(self, a, b, c)`` should be called as ``x.meth(a, b, "
"c)`` for some instance ``x`` of the class in which the definition occurs; "
"the called method will think it is called as ``meth(x, a, b, c)``."
msgstr ""

#: ../../faq/programming.rst:1431
msgid "See also :ref:`why-self`."
msgstr "Veja também :ref:`why-self`."

#: ../../faq/programming.rst:1435
msgid ""
"How do I check if an object is an instance of a given class or of a subclass "
"of it?"
msgstr ""

#: ../../faq/programming.rst:1437
msgid ""
"Use the built-in function ``isinstance(obj, cls)``.  You can check if an "
"object is an instance of any of a number of classes by providing a tuple "
"instead of a single class, e.g. ``isinstance(obj, (class1, class2, ...))``, "
"and can also check whether an object is one of Python's built-in types, e.g. "
"``isinstance(obj, str)`` or ``isinstance(obj, (int, float, complex))``."
msgstr ""

#: ../../faq/programming.rst:1443
msgid ""
"Note that most programs do not use :func:`isinstance` on user-defined "
"classes very often.  If you are developing the classes yourself, a more "
"proper object-oriented style is to define methods on the classes that "
"encapsulate a particular behaviour, instead of checking the object's class "
"and doing a different thing based on what class it is.  For example, if you "
"have a function that does something::"
msgstr ""

#: ../../faq/programming.rst:1457
msgid ""
"A better approach is to define a ``search()`` method on all the classes and "
"just call it::"
msgstr ""

#: ../../faq/programming.rst:1472
msgid "What is delegation?"
msgstr "O que é delegation?"

#: ../../faq/programming.rst:1474
msgid ""
"Delegation is an object oriented technique (also called a design pattern). "
"Let's say you have an object ``x`` and want to change the behaviour of just "
"one of its methods.  You can create a new class that provides a new "
"implementation of the method you're interested in changing and delegates all "
"other methods to the corresponding method of ``x``."
msgstr ""

#: ../../faq/programming.rst:1480
msgid ""
"Python programmers can easily implement delegation.  For example, the "
"following class implements a class that behaves like a file but converts all "
"written data to uppercase::"
msgstr ""

#: ../../faq/programming.rst:1495
msgid ""
"Here the ``UpperOut`` class redefines the ``write()`` method to convert the "
"argument string to uppercase before calling the underlying ``self.__outfile."
"write()`` method.  All other methods are delegated to the underlying ``self."
"__outfile`` object.  The delegation is accomplished via the ``__getattr__`` "
"method; consult :ref:`the language reference <attribute-access>` for more "
"information about controlling attribute access."
msgstr ""

#: ../../faq/programming.rst:1502
msgid ""
"Note that for more general cases delegation can get trickier. When "
"attributes must be set as well as retrieved, the class must define a :meth:"
"`__setattr__` method too, and it must do so carefully.  The basic "
"implementation of :meth:`__setattr__` is roughly equivalent to the "
"following::"
msgstr ""

#: ../../faq/programming.rst:1513
msgid ""
"Most :meth:`__setattr__` implementations must modify ``self.__dict__`` to "
"store local state for self without causing an infinite recursion."
msgstr ""

#: ../../faq/programming.rst:1518
msgid ""
"How do I call a method defined in a base class from a derived class that "
"overrides it?"
msgstr ""

#: ../../faq/programming.rst:1520
msgid "Use the built-in :func:`super` function::"
msgstr ""

#: ../../faq/programming.rst:1526
msgid ""
"For version prior to 3.0, you may be using classic classes: For a class "
"definition such as ``class Derived(Base): ...`` you can call method "
"``meth()`` defined in ``Base`` (or one of ``Base``'s base classes) as ``Base."
"meth(self, arguments...)``.  Here, ``Base.meth`` is an unbound method, so "
"you need to provide the ``self`` argument."
msgstr ""

#: ../../faq/programming.rst:1534
msgid "How can I organize my code to make it easier to change the base class?"
msgstr ""

#: ../../faq/programming.rst:1536
msgid ""
"You could define an alias for the base class, assign the real base class to "
"it before your class definition, and use the alias throughout your class.  "
"Then all you have to change is the value assigned to the alias.  "
"Incidentally, this trick is also handy if you want to decide dynamically (e."
"g. depending on availability of resources) which base class to use.  "
"Example::"
msgstr ""

#: ../../faq/programming.rst:1551
msgid "How do I create static class data and static class methods?"
msgstr ""

#: ../../faq/programming.rst:1553
msgid ""
"Both static data and static methods (in the sense of C++ or Java) are "
"supported in Python."
msgstr ""

#: ../../faq/programming.rst:1556
msgid ""
"For static data, simply define a class attribute.  To assign a new value to "
"the attribute, you have to explicitly use the class name in the assignment::"
msgstr ""

#: ../../faq/programming.rst:1568
msgid ""
"``c.count`` also refers to ``C.count`` for any ``c`` such that "
"``isinstance(c, C)`` holds, unless overridden by ``c`` itself or by some "
"class on the base-class search path from ``c.__class__`` back to ``C``."
msgstr ""

#: ../../faq/programming.rst:1572
msgid ""
"Caution: within a method of C, an assignment like ``self.count = 42`` "
"creates a new and unrelated instance named \"count\" in ``self``'s own "
"dict.  Rebinding of a class-static data name must always specify the class "
"whether inside a method or not::"
msgstr ""

#: ../../faq/programming.rst:1579
msgid "Static methods are possible::"
msgstr "Métodos estáticos são possíveis::"

#: ../../faq/programming.rst:1587
msgid ""
"However, a far more straightforward way to get the effect of a static method "
"is via a simple module-level function::"
msgstr ""

#: ../../faq/programming.rst:1593
msgid ""
"If your code is structured so as to define one class (or tightly related "
"class hierarchy) per module, this supplies the desired encapsulation."
msgstr ""

#: ../../faq/programming.rst:1598
msgid "How can I overload constructors (or methods) in Python?"
msgstr ""

#: ../../faq/programming.rst:1600
msgid ""
"This answer actually applies to all methods, but the question usually comes "
"up first in the context of constructors."
msgstr ""

#: ../../faq/programming.rst:1603
msgid "In C++ you'd write"
msgstr "Em C++ escreveríamos "

#: ../../faq/programming.rst:1612
msgid ""
"In Python you have to write a single constructor that catches all cases "
"using default arguments.  For example::"
msgstr ""

#: ../../faq/programming.rst:1622
msgid "This is not entirely equivalent, but close enough in practice."
msgstr "Isso não é inteiramente equivalente, mas já está bem próximo."

#: ../../faq/programming.rst:1624
msgid "You could also try a variable-length argument list, e.g. ::"
msgstr ""
"Você também pode tentar uma lista de argumentos de comprimento variável, por "
"exemplo::"

#: ../../faq/programming.rst:1629
msgid "The same approach works for all method definitions."
msgstr "A mesma abordagem funciona para todas as definições de métodos."

#: ../../faq/programming.rst:1633
msgid "I try to use __spam and I get an error about _SomeClassName__spam."
msgstr "Eu tentei usar __spam e recebi um erro sobre _SomeClassName__spam."

#: ../../faq/programming.rst:1635
msgid ""
"Variable names with double leading underscores are \"mangled\" to provide a "
"simple but effective way to define class private variables.  Any identifier "
"of the form ``__spam`` (at least two leading underscores, at most one "
"trailing underscore) is textually replaced with ``_classname__spam``, where "
"``classname`` is the current class name with any leading underscores "
"stripped."
msgstr ""

#: ../../faq/programming.rst:1641
msgid ""
"This doesn't guarantee privacy: an outside user can still deliberately "
"access the \"_classname__spam\" attribute, and private values are visible in "
"the object's ``__dict__``.  Many Python programmers never bother to use "
"private variable names at all."
msgstr ""

#: ../../faq/programming.rst:1648
msgid "My class defines __del__ but it is not called when I delete the object."
msgstr ""

#: ../../faq/programming.rst:1650
msgid "There are several possible reasons for this."
msgstr "Há várias razões possíveis para isto."

#: ../../faq/programming.rst:1652
msgid ""
"The del statement does not necessarily call :meth:`__del__` -- it simply "
"decrements the object's reference count, and if this reaches zero :meth:"
"`__del__` is called."
msgstr ""

#: ../../faq/programming.rst:1656
msgid ""
"If your data structures contain circular links (e.g. a tree where each child "
"has a parent reference and each parent has a list of children) the reference "
"counts will never go back to zero.  Once in a while Python runs an algorithm "
"to detect such cycles, but the garbage collector might run some time after "
"the last reference to your data structure vanishes, so your :meth:`__del__` "
"method may be called at an inconvenient and random time. This is "
"inconvenient if you're trying to reproduce a problem. Worse, the order in "
"which object's :meth:`__del__` methods are executed is arbitrary.  You can "
"run :func:`gc.collect` to force a collection, but there *are* pathological "
"cases where objects will never be collected."
msgstr ""

#: ../../faq/programming.rst:1667
msgid ""
"Despite the cycle collector, it's still a good idea to define an explicit "
"``close()`` method on objects to be called whenever you're done with them.  "
"The ``close()`` method can then remove attributes that refer to subobjects.  "
"Don't call :meth:`__del__` directly -- :meth:`__del__` should call "
"``close()`` and ``close()`` should make sure that it can be called more than "
"once for the same object."
msgstr ""

#: ../../faq/programming.rst:1674
msgid ""
"Another way to avoid cyclical references is to use the :mod:`weakref` "
"module, which allows you to point to objects without incrementing their "
"reference count. Tree data structures, for instance, should use weak "
"references for their parent and sibling references (if they need them!)."
msgstr ""

#: ../../faq/programming.rst:1687
msgid ""
"Finally, if your :meth:`__del__` method raises an exception, a warning "
"message is printed to :data:`sys.stderr`."
msgstr ""

#: ../../faq/programming.rst:1692
msgid "How do I get a list of all instances of a given class?"
msgstr ""

#: ../../faq/programming.rst:1694
msgid ""
"Python does not keep track of all instances of a class (or of a built-in "
"type). You can program the class's constructor to keep track of all "
"instances by keeping a list of weak references to each instance."
msgstr ""

#: ../../faq/programming.rst:1700
msgid "Why does the result of ``id()`` appear to be not unique?"
msgstr ""

#: ../../faq/programming.rst:1702
msgid ""
"The :func:`id` builtin returns an integer that is guaranteed to be unique "
"during the lifetime of the object.  Since in CPython, this is the object's "
"memory address, it happens frequently that after an object is deleted from "
"memory, the next freshly created object is allocated at the same position in "
"memory.  This is illustrated by this example:"
msgstr ""

#: ../../faq/programming.rst:1713
msgid ""
"The two ids belong to different integer objects that are created before, and "
"deleted immediately after execution of the ``id()`` call.  To be sure that "
"objects whose id you want to examine are still alive, create another "
"reference to the object:"
msgstr ""

#: ../../faq/programming.rst:1726
msgid "Modules"
msgstr "Módulos"

#: ../../faq/programming.rst:1729
msgid "How do I create a .pyc file?"
msgstr "Como faço para criar um arquivo .pyc?"

#: ../../faq/programming.rst:1731
msgid ""
"When a module is imported for the first time (or when the source file has "
"changed since the current compiled file was created) a ``.pyc`` file "
"containing the compiled code should be created in a ``__pycache__`` "
"subdirectory of the directory containing the ``.py`` file.  The ``.pyc`` "
"file will have a filename that starts with the same name as the ``.py`` "
"file, and ends with ``.pyc``, with a middle component that depends on the "
"particular ``python`` binary that created it.  (See :pep:`3147` for details.)"
msgstr ""

#: ../../faq/programming.rst:1739
msgid ""
"One reason that a ``.pyc`` file may not be created is a permissions problem "
"with the directory containing the source file, meaning that the "
"``__pycache__`` subdirectory cannot be created. This can happen, for "
"example, if you develop as one user but run as another, such as if you are "
"testing with a web server."
msgstr ""

#: ../../faq/programming.rst:1744
msgid ""
"Unless the :envvar:`PYTHONDONTWRITEBYTECODE` environment variable is set, "
"creation of a .pyc file is automatic if you're importing a module and Python "
"has the ability (permissions, free space, etc...) to create a "
"``__pycache__`` subdirectory and write the compiled module to that "
"subdirectory."
msgstr ""

#: ../../faq/programming.rst:1749
msgid ""
"Running Python on a top level script is not considered an import and no ``."
"pyc`` will be created.  For example, if you have a top-level module ``foo."
"py`` that imports another module ``xyz.py``, when you run ``foo`` (by typing "
"``python foo.py`` as a shell command), a ``.pyc`` will be created for "
"``xyz`` because ``xyz`` is imported, but no ``.pyc`` file will be created "
"for ``foo`` since ``foo.py`` isn't being imported."
msgstr ""

#: ../../faq/programming.rst:1756
msgid ""
"If you need to create a ``.pyc`` file for ``foo`` -- that is, to create a ``."
"pyc`` file for a module that is not imported -- you can, using the :mod:"
"`py_compile` and :mod:`compileall` modules."
msgstr ""

#: ../../faq/programming.rst:1760
msgid ""
"The :mod:`py_compile` module can manually compile any module.  One way is to "
"use the ``compile()`` function in that module interactively::"
msgstr ""

#: ../../faq/programming.rst:1766
msgid ""
"This will write the ``.pyc`` to a ``__pycache__`` subdirectory in the same "
"location as ``foo.py`` (or you can override that with the optional parameter "
"``cfile``)."
msgstr ""

#: ../../faq/programming.rst:1770
msgid ""
"You can also automatically compile all files in a directory or directories "
"using the :mod:`compileall` module.  You can do it from the shell prompt by "
"running ``compileall.py`` and providing the path of a directory containing "
"Python files to compile::"
msgstr ""

#: ../../faq/programming.rst:1779
msgid "How do I find the current module name?"
msgstr "Como encontro o nome do módulo atual?"

#: ../../faq/programming.rst:1781
msgid ""
"A module can find out its own module name by looking at the predefined "
"global variable ``__name__``.  If this has the value ``'__main__'``, the "
"program is running as a script.  Many modules that are usually used by "
"importing them also provide a command-line interface or a self-test, and "
"only execute this code after checking ``__name__``::"
msgstr ""

#: ../../faq/programming.rst:1796
msgid "How can I have modules that mutually import each other?"
msgstr ""

#: ../../faq/programming.rst:1798
msgid "Suppose you have the following modules:"
msgstr "Suponha que tenhas os seguintes módulos:"

#: ../../faq/programming.rst:1800
msgid "foo.py::"
msgstr "foo.py::"

#: ../../faq/programming.rst:1805
msgid "bar.py::"
msgstr "bar.py::"

#: ../../faq/programming.rst:1810
msgid "The problem is that the interpreter will perform the following steps:"
msgstr ""

#: ../../faq/programming.rst:1812
msgid "main imports foo"
msgstr "main imports foo"

#: ../../faq/programming.rst:1813
msgid "Empty globals for foo are created"
msgstr "Os globais vazios para foo são criados"

#: ../../faq/programming.rst:1814
msgid "foo is compiled and starts executing"
msgstr "foo é compilado e começa a executar"

#: ../../faq/programming.rst:1815
msgid "foo imports bar"
msgstr "foo imports bar"

#: ../../faq/programming.rst:1816
msgid "Empty globals for bar are created"
msgstr ""

#: ../../faq/programming.rst:1817
msgid "bar is compiled and starts executing"
msgstr ""

#: ../../faq/programming.rst:1818
msgid ""
"bar imports foo (which is a no-op since there already is a module named foo)"
msgstr ""

#: ../../faq/programming.rst:1819
msgid "bar.foo_var = foo.foo_var"
msgstr "bar.foo_var = foo.foo_var"

#: ../../faq/programming.rst:1821
msgid ""
"The last step fails, because Python isn't done with interpreting ``foo`` yet "
"and the global symbol dictionary for ``foo`` is still empty."
msgstr ""

#: ../../faq/programming.rst:1824
msgid ""
"The same thing happens when you use ``import foo``, and then try to access "
"``foo.foo_var`` in global code."
msgstr ""

#: ../../faq/programming.rst:1827
msgid "There are (at least) three possible workarounds for this problem."
msgstr ""

#: ../../faq/programming.rst:1829
msgid ""
"Guido van Rossum recommends avoiding all uses of ``from <module> import ..."
"``, and placing all code inside functions.  Initializations of global "
"variables and class variables should use constants or built-in functions "
"only.  This means everything from an imported module is referenced as "
"``<module>.<name>``."
msgstr ""

#: ../../faq/programming.rst:1834
msgid ""
"Jim Roskind suggests performing steps in the following order in each module:"
msgstr ""

#: ../../faq/programming.rst:1836
msgid ""
"exports (globals, functions, and classes that don't need imported base "
"classes)"
msgstr ""

#: ../../faq/programming.rst:1838
msgid "``import`` statements"
msgstr "Declaração ``import``"

#: ../../faq/programming.rst:1839
msgid ""
"active code (including globals that are initialized from imported values)."
msgstr ""

#: ../../faq/programming.rst:1841
msgid ""
"van Rossum doesn't like this approach much because the imports appear in a "
"strange place, but it does work."
msgstr ""

#: ../../faq/programming.rst:1844
msgid ""
"Matthias Urlichs recommends restructuring your code so that the recursive "
"import is not necessary in the first place."
msgstr ""

#: ../../faq/programming.rst:1847
msgid "These solutions are not mutually exclusive."
msgstr ""

#: ../../faq/programming.rst:1851
msgid "__import__('x.y.z') returns <module 'x'>; how do I get z?"
msgstr "__import__('x.y.z') returns <module 'x'>; how do I get z?"

#: ../../faq/programming.rst:1853
msgid ""
"Consider using the convenience function :func:`~importlib.import_module` "
"from :mod:`importlib` instead::"
msgstr ""

#: ../../faq/programming.rst:1860
msgid ""
"When I edit an imported module and reimport it, the changes don't show up.  "
"Why does this happen?"
msgstr ""

#: ../../faq/programming.rst:1862
msgid ""
"For reasons of efficiency as well as consistency, Python only reads the "
"module file on the first time a module is imported.  If it didn't, in a "
"program consisting of many modules where each one imports the same basic "
"module, the basic module would be parsed and re-parsed many times.  To force "
"re-reading of a changed module, do this::"
msgstr ""

#: ../../faq/programming.rst:1872
msgid ""
"Warning: this technique is not 100% fool-proof.  In particular, modules "
"containing statements like ::"
msgstr ""

#: ../../faq/programming.rst:1877
msgid ""
"will continue to work with the old version of the imported objects.  If the "
"module contains class definitions, existing class instances will *not* be "
"updated to use the new class definition.  This can result in the following "
"paradoxical behaviour::"
msgstr ""

#: ../../faq/programming.rst:1890
msgid ""
"The nature of the problem is made clear if you print out the \"identity\" of "
"the class objects::"
msgstr ""
