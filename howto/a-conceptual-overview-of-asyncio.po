# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Jessica Patricio <jessicacacau@gmail.com>, 2025
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-15 14:16+0000\n"
"PO-Revision-Date: 2025-09-16 00:00+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:5
msgid "A Conceptual Overview of :mod:`!asyncio`"
msgstr "Uma visão geral conceitual de :mod:`!asyncio`"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:7
msgid ""
"This :ref:`HOWTO <how-tos>` article seeks to help you build a sturdy mental "
"model of how :mod:`asyncio` fundamentally works, helping you understand the "
"how and why behind the recommended patterns."
msgstr ""
"Este artigo :ref:`COMOFAZER <how-tos>` tem como objetivo ajudá-lo a "
"construir um modelo mental sólido de como :mod:`asyncio` funciona "
"fundamentalmente, ajudando-lhe a compreender o como e o porquê por trás dos "
"padrões recomendados."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:11
msgid ""
"You might be curious about some key :mod:`!asyncio` concepts. By the end of "
"this article, you'll be able to comfortably answer these questions:"
msgstr ""
"Você pode estar curioso sobre alguns conceitos-chave de :mod:`!asyncio`. Ao "
"final deste artigo, você será capaz de responder confortavelmente a estas "
"perguntas:"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:14
msgid "What's happening behind the scenes when an object is awaited?"
msgstr "O que acontece nos bastidores quando um objeto é aguardado?"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:15
msgid ""
"How does :mod:`!asyncio` differentiate between a task which doesn't need CPU "
"time (such as a network request or file read) as opposed to a task that does "
"(such as computing n-factorial)?"
msgstr ""
"Como o :mod:`!asyncio` diferencia uma tarefa que não precisa de tempo de CPU "
"(como uma solicitação de rede ou leitura de arquivo) de uma tarefa que "
"precisa (como calcular n-fatorial)?"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:18
msgid ""
"How to write an asynchronous variant of an operation, such as an async sleep "
"or database request."
msgstr ""
"Como escrever uma variante assíncrona de uma operação, como uma suspensão "
"assíncrona ou uma solicitação de banco de dados."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:23
msgid ""
"The `guide <https://github.com/anordin95/a-conceptual-overview-of-asyncio/ "
"tree/main>`_ that inspired this HOWTO article, by Alexander Nordin."
msgstr ""
"O `guia <https://github.com/anordin95/a-conceptual-overview-of-asyncio/ tree/"
"main>`_ que inspirou este artigo COMOFAZER, por Alexander Nordin."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:25
msgid ""
"This in-depth `YouTube tutorial series <https://www.youtube.com/ watch?"
"v=Xbl7XjFYsN4&list=PLhNSoGM2ik6SIkVGXWBwerucXjgP1rHmB>`_ on ``asyncio`` "
"created by Python core team member, Łukasz Langa."
msgstr ""
"Esta `série de tutoriais detalhados do YouTube <https://www.youtube.com/ "
"watch?v=Xbl7XjFYsN4&list=PLhNSoGM2ik6SIkVGXWBwerucXjgP1rHmB>`_ sobre "
"``asyncio`` foi criada pelo membro da equipe principal do Python, Łukasz "
"Langa."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:28
msgid ""
"`500 Lines or Less: A Web Crawler With asyncio Coroutines <https:// aosabook."
"org/en/500L/a-web-crawler-with-asyncio-coroutines.html>`_ by A. Jesse Jiryu "
"Davis and Guido van Rossum."
msgstr ""
"`500 linhas ou menos: um rastreador da Web com corrotinas asyncio <https:// "
"aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html>`_ (em "
"inglês) por A. Jesse Jiryu Davis e Guido van Rossum."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:34
msgid "A conceptual overview part 1: the high-level"
msgstr "Uma visão geral conceitual parte 1: o alto nível"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:36
msgid ""
"In part 1, we'll cover the main, high-level building blocks of :mod:`!"
"asyncio`: the event loop, coroutine functions, coroutine objects, tasks, and "
"``await``."
msgstr ""
"Na parte 1, abordaremos os principais blocos de construção de alto nível de :"
"mod:`!asyncio`: o laço de eventos, funções de corrotina, objetos de "
"corrotina, tarefas e ``await``."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:41
msgid "Event Loop"
msgstr "Laço de eventos"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:43
msgid ""
"Everything in :mod:`!asyncio` happens relative to the event loop. It's the "
"star of the show. It's like an orchestra conductor. It's behind the scenes "
"managing resources. Some power is explicitly granted to it, but a lot of its "
"ability to get things done comes from the respect and cooperation of its "
"worker bees."
msgstr ""
"Tudo em :mod:`!asyncio` acontece em relação ao laço de eventos. Ele é a "
"estrela do show. É como um maestro de orquestra. Está nos bastidores, "
"gerenciando recursos. Algum poder lhe é explicitamente concedido, mas grande "
"parte de sua capacidade de realizar tarefas advém do respeito e da "
"cooperação de seus operários."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:50
msgid ""
"In more technical terms, the event loop contains a collection of jobs to be "
"run. Some jobs are added directly by you, and some indirectly by :mod:`!"
"asyncio`. The event loop takes a job from its backlog of work and invokes it "
"(or \"gives it control\"), similar to calling a function, and then that job "
"runs. Once it pauses or completes, it returns control to the event loop. The "
"event loop will then select another job from its pool and invoke it. You can "
"*roughly* think of the collection of jobs as a queue: jobs are added and "
"then processed one at a time, generally (but not always) in order. This "
"process repeats indefinitely, with the event loop cycling endlessly onwards. "
"If there are no more jobs pending execution, the event loop is smart enough "
"to rest and avoid needlessly wasting CPU cycles, and will come back when "
"there's more work to be done."
msgstr ""
"Em termos mais técnicos, o laço de eventos contém uma coleção de tarefas a "
"serem executadas. Algumas tarefas são adicionadas diretamente por você e "
"outras indiretamente por :mod:`!asyncio`. O laço de eventos pega uma tarefa "
"do seu backlog de tarefas e a invoca (ou \"dá a ela o controle\"), "
"semelhante a chamar uma função, e então essa tarefa é executada. Uma vez "
"pausada ou concluída, ela retorna o controle para o laço de eventos. O laço "
"de eventos então seleciona outra tarefa do seu pool e a invoca. Você pode "
"*aproximadamente* pensar na coleção de tarefas como uma fila: as tarefas são "
"adicionadas e processadas uma de cada vez, geralmente (mas nem sempre) em "
"ordem. Esse processo se repete indefinidamente, com o laço de eventos em "
"ciclos infinitos. Se não houver mais tarefas pendentes de execução, o laço "
"de eventos é inteligente o suficiente para descansar e evitar o desperdício "
"desnecessário de ciclos de CPU, e retornará quando houver mais trabalho a "
"ser feito."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:64
msgid ""
"Effective execution relies on jobs sharing well and cooperating; a greedy "
"job could hog control and leave the other jobs to starve, rendering the "
"overall event loop approach rather useless."
msgstr ""
"A execução eficaz depende do bom compartilhamento e da cooperação entre as "
"tarefas; uma tarefa gananciosa pode monopolizar o controle e deixar as "
"outras tarefas na miséria, tornando a abordagem geral do laço de eventos "
"inútil."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:70
msgid ""
"import asyncio\n"
"\n"
"# This creates an event loop and indefinitely cycles through\n"
"# its collection of jobs.\n"
"event_loop = asyncio.new_event_loop()\n"
"event_loop.run_forever()"
msgstr ""
"import asyncio\n"
"\n"
"# Isso cria um laço de eventos e percorre indefinidamente\n"
"# sua coleção de trabalhos\n"
"event_loop = asyncio.new_event_loop()\n"
"event_loop.run_forever()"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:79
msgid "Asynchronous functions and coroutines"
msgstr "Funções assíncronas e corrotinas"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:81
msgid "This is a basic, boring Python function::"
msgstr "Esta é uma função básica e chata do Python::"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:83
msgid ""
"def hello_printer():\n"
"    print(\n"
"        \"Hi, I am a lowly, simple printer, though I have all I \"\n"
"        \"need in life -- \\nfresh paper and my dearly beloved octopus \"\n"
"        \"partner in crime.\"\n"
"    )"
msgstr ""
"def hello_printer():\n"
"    print(\n"
"        \"Olá, sou uma impressora humilde e simples, embora tenha tudo \"\n"
"        \"que preciso na vida: -- \\npapel novo e meu querido e amado \"\n"
"        \"parceiro no crime, o polvo.\"\n"
"    )"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:90
msgid "Calling a regular function invokes its logic or body::"
msgstr "Chamar uma função regular invoca sua lógica ou corpo::"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:92
msgid ""
">>> hello_printer()\n"
"Hi, I am a lowly, simple printer, though I have all I need in life --\n"
"fresh paper and my dearly beloved octopus partner in crime."
msgstr ""
">>> hello_printer()\n"
"Olá, sou uma impressora humilde e simples, embora tenha tudo o que preciso "
"na vida:\n"
"papel novo e meu querido e amado parceiro no crime, o polvo."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:96
msgid ""
"The :ref:`async def <async def>`, as opposed to just a plain ``def``, makes "
"this an asynchronous function (or \"coroutine function\"). Calling it "
"creates and returns a :ref:`coroutine <coroutine>` object."
msgstr ""
"O :ref:`async def <async def>`, em oposição a um simples ``def``, torna esta "
"uma função assíncrona (ou \"função de corrotina\"). Chamá-la cria e retorna "
"um objeto :ref:`corrotina <coroutine>`."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:102
msgid ""
"async def loudmouth_penguin(magic_number: int):\n"
"    print(\n"
"     \"I am a super special talking penguin. Far cooler than that printer. "
"\"\n"
"     f\"By the way, my lucky number is: {magic_number}.\"\n"
"    )"
msgstr ""
"async def loudmouth_penguin(magic_number: int):\n"
"    print(\n"
"     \"Eu sou um pinguim falante superespecial. Muito mais legal que aquela "
"impressora. \"\n"
"     f\"Aliás, meu número da sorte é: {magic_number}.\"\n"
"    )"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:108
msgid ""
"Calling the async function, ``loudmouth_penguin``, does not execute the "
"print statement; instead, it creates a coroutine object::"
msgstr ""
"Chamar a função assíncrona, ``loudmouth_penguin``, não executa a instrução "
"de impressão; em vez disso, cria um objeto corrotina::"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:111
msgid ""
">>> loudmouth_penguin(magic_number=3)\n"
"<coroutine object loudmouth_penguin at 0x104ed2740>"
msgstr ""
">>> loudmouth_penguin(magic_number=3)\n"
"<coroutine object loudmouth_penguin at 0x104ed2740>"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:114
msgid ""
"The terms \"coroutine function\" and \"coroutine object\" are often "
"conflated as coroutine. That can be confusing! In this article, coroutine "
"specifically refers to a coroutine object, or more precisely, an instance "
"of :data:`types.CoroutineType` (native coroutine). Note that coroutines can "
"also exist as instances of :class:`collections.abc.Coroutine` -- a "
"distinction that matters for type checking."
msgstr ""
"Os termos \"função de corrotina\" e \"objeto corrotina\" são frequentemente "
"confundidos com corrotina. Isso pode ser confuso! Neste artigo, corrotina se "
"refere especificamente a um objeto corrotina, ou mais precisamente, a uma "
"instância de :data:`types.CoroutineType` (corrotina nativa). Observe que "
"corrotinas também podem existir como instâncias de :class:`collections.abc."
"Coroutine` — uma distinção importante para a verificação de tipos."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:123
msgid ""
"A coroutine represents the function's body or logic. A coroutine has to be "
"explicitly started; again, merely creating the coroutine does not start it. "
"Notably, the coroutine can be paused and resumed at various points within "
"the function's body. That pausing and resuming ability is what allows for "
"asynchronous behavior!"
msgstr ""
"Uma corrotina representa o corpo ou a lógica da função. Uma corrotina "
"precisa ser iniciada explicitamente; novamente, a mera criação da corrotina "
"não a inicia. Notavelmente, a corrotina pode ser pausada e retomada em "
"vários pontos do corpo da função. Essa capacidade de pausar e retomar é o "
"que permite o comportamento assíncrono!"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:130
msgid ""
"Coroutines and coroutine functions were built by leveraging the "
"functionality of :term:`generators <generator iterator>` and :term:"
"`generator functions <generator>`. Recall, a generator function is a "
"function that :keyword:`yield`\\s, like this one::"
msgstr ""
"Corrotinas e funções de corrotina foram criadas aproveitando a "
"funcionalidade de :term:`geradores <generator iterator>` e :term:`funções "
"geradoras <generator>`. Lembre-se: uma função geradora é uma função que "
"executa :keyword:`yield`, como esta::"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:136
msgid ""
"def get_random_number():\n"
"    # This would be a bad random number generator!\n"
"    print(\"Hi\")\n"
"    yield 1\n"
"    print(\"Hello\")\n"
"    yield 7\n"
"    print(\"Howdy\")\n"
"    yield 4\n"
"    ..."
msgstr ""
"def get_random_number():\n"
"    # Este seria um gerador de número aleatório ruim!\n"
"    print(\"Oi\")\n"
"    yield 1\n"
"    print(\"Olá\")\n"
"    yield 7\n"
"    print(\"E aí\")\n"
"    yield 4\n"
"    ..."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:146
msgid ""
"Similar to a coroutine function, calling a generator function does not run "
"it. Instead, it creates a generator object::"
msgstr ""
"Semelhante a uma função de corrotina, chamar uma função geradora não a "
"executa. Em vez disso, ela cria um objeto gerador:"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:149
msgid ""
">>> get_random_number()\n"
"<generator object get_random_number at 0x1048671c0>"
msgstr ""
">>> get_random_number()\n"
"<generator object get_random_number at 0x1048671c0>"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:152
msgid ""
"You can proceed to the next ``yield`` of a generator by using the built-in "
"function :func:`next`. In other words, the generator runs, then pauses. For "
"example::"
msgstr ""
"Você pode prosseguir para o próximo ``yield`` de um gerador usando a função "
"embutida :func:`next`. Em outras palavras, o gerador é executado e, em "
"seguida, pausado. Por exemplo:"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:157
msgid ""
">>> generator = get_random_number()\n"
">>> next(generator)\n"
"Hi\n"
"1\n"
">>> next(generator)\n"
"Hello\n"
"7"
msgstr ""
">>> generator = get_random_number()\n"
">>> next(generator)\n"
"Oi\n"
"1\n"
">>> next(generator)\n"
"Olá\n"
"7"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:167
msgid "Tasks"
msgstr "Tarefas"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:169
msgid ""
"Roughly speaking, :ref:`tasks <asyncio-task-obj>` are coroutines (not "
"coroutine functions) tied to an event loop. A task also maintains a list of "
"callback functions whose importance will become clear in a moment when we "
"discuss :keyword:`await`. The recommended way to create tasks is via :func:"
"`asyncio.create_task`."
msgstr ""
"Em termos gerais, :ref:`tarefas <asyncio-task-obj>` são corrotinas (não "
"funções de corrotina) vinculadas a um laço de eventos. Uma tarefa também "
"mantém uma lista de funções de retorno de chamada cuja importância ficará "
"clara em breve, quando discutirmos :keyword:`await`. A maneira recomendada "
"de criar tarefas é via :func:`asyncio.create_task`."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:175
msgid ""
"Creating a task automatically schedules it for execution (by adding a "
"callback to run it in the event loop's to-do list, that is, collection of "
"jobs)."
msgstr ""
"A criação de uma tarefa a agenda automaticamente para execução (adicionando "
"um retorno de chamada para executá-la na lista de tarefas do laço de "
"eventos, ou seja, coleção de tarefas)."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:178
msgid ""
"Since there's only one event loop (in each thread), :mod:`!asyncio` takes "
"care of associating the task with the event loop for you. As such, there's "
"no need to specify the event loop."
msgstr ""
"Como há apenas um laço de eventos (em cada thread), :mod:`!asyncio` se "
"encarrega de associar a tarefa ao laço de eventos para você. Portanto, não "
"há necessidade de especificar o laço de eventos."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:184
msgid ""
"coroutine = loudmouth_penguin(magic_number=5)\n"
"# This creates a Task object and schedules its execution via the event "
"loop.\n"
"task = asyncio.create_task(coroutine)"
msgstr ""
"coroutine = loudmouth_penguin(magic_number=5)\n"
"# Isso cria um objeto Task e agenda sua execução por meio do laço de "
"eventos.\n"
"task = asyncio.create_task(coroutine)"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:188
msgid ""
"Earlier, we manually created the event loop and set it to run forever. In "
"practice, it's recommended to use (and common to see) :func:`asyncio.run`, "
"which takes care of managing the event loop and ensuring the provided "
"coroutine finishes before advancing. For example, many async programs follow "
"this setup::"
msgstr ""
"Anteriormente, criamos manualmente o laço de eventos e o configuramos para "
"ser executado indefinidamente. Na prática, é recomendado (e comum) usar :"
"func:`asyncio.run`, que gerencia o laço de eventos e garante que a corrotina "
"fornecida termine antes de avançar. Por exemplo, muitos programas "
"assíncronos seguem esta configuração:"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:194
msgid ""
"import asyncio\n"
"\n"
"async def main():\n"
"    # Perform all sorts of wacky, wild asynchronous things...\n"
"    ...\n"
"\n"
"if __name__ == \"__main__\":\n"
"    asyncio.run(main())\n"
"    # The program will not reach the following print statement until the\n"
"    # coroutine main() finishes.\n"
"    print(\"coroutine main() is done!\")"
msgstr ""
"import asyncio\n"
"\n"
"async def main():\n"
"    # Faz todo tipo de coisas malucas, selvagens e assíncronas...\n"
"    ...\n"
"\n"
"if __name__ == \"__main__\":\n"
"    asyncio.run(main())\n"
"    # O programa não alcançará a seguinte instrução de exibição\n"
"    # até que o main() da corrotina seja finalizado.\n"
"    print(\"main() da corrotina concluiu!\")"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:206
msgid ""
"It's important to be aware that the task itself is not added to the event "
"loop, only a callback to the task is. This matters if the task object you "
"created is garbage collected before it's called by the event loop. For "
"example, consider this program:"
msgstr ""
"É importante estar ciente de que a tarefa em si não é adicionada ao laço de "
"eventos, apenas um retorno de chamada para a tarefa. Isso é importante se o "
"objeto de tarefa que você criou for coletado como lixo antes de ser chamado "
"pelo laço de eventos. Por exemplo, considere este programa:"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:212
msgid ""
"async def hello():\n"
"    print(\"hello!\")\n"
"\n"
"async def main():\n"
"    asyncio.create_task(hello())\n"
"    # Other asynchronous instructions which run for a while\n"
"    # and cede control to the event loop...\n"
"    ...\n"
"\n"
"asyncio.run(main())"
msgstr ""
"async def hello():\n"
"    print(\"hello!\")\n"
"\n"
"async def main():\n"
"    asyncio.create_task(hello())\n"
"    # Outras instruções assíncronas que são executadas por\n"
"    # um tempo e cedem o controle ao laço de eventos...\n"
"    ...\n"
"\n"
"asyncio.run(main())"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:226
msgid ""
"Because there's no reference to the task object created on line 5, it "
"*might* be garbage collected before the event loop invokes it. Later "
"instructions in the coroutine ``main()`` hand control back to the event loop "
"so it can invoke other jobs. When the event loop eventually tries to run the "
"task, it might fail and discover the task object does not exist! This can "
"also happen even if a coroutine keeps a reference to a task but completes "
"before that task finishes. When the coroutine exits, local variables go out "
"of scope and may be subject to garbage collection. In practice, ``asyncio`` "
"and Python's garbage collector work pretty hard to ensure this sort of thing "
"doesn't happen. But that's no reason to be reckless!"
msgstr ""
"Como não há referência ao objeto tarefa criado na linha 5, ele *pode* ser "
"coletado como lixo antes que o laço de eventos o invoque. Instruções "
"posteriores na corrotina ``main()`` transferem o controle de volta para o "
"laço de eventos para que ele possa invocar outras tarefas. Quando o laço de "
"eventos eventualmente tenta executar a tarefa, pode falhar e descobrir que o "
"objeto task não existe! Isso também pode acontecer mesmo que uma corrotina "
"mantenha uma referência a uma tarefa, mas seja concluída antes que ela "
"termine. Quando a corrotina termina, as variáveis locais saem do escopo e "
"podem estar sujeitas à coleta de lixo. Na prática, ``asyncio`` e o coletor "
"de lixo do Python trabalham arduamente para garantir que esse tipo de coisa "
"não aconteça. Mas isso não é motivo para ser imprudente!"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:242
msgid "await"
msgstr "await"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:244
msgid ""
":keyword:`await` is a Python keyword that's commonly used in one of two "
"different ways::"
msgstr ""
":keyword:`await` é uma palavra reservada do Python comumente usada de duas "
"maneiras diferentes::"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:247
msgid ""
"await task\n"
"await coroutine"
msgstr ""
"await task\n"
"await coroutine"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:250
msgid ""
"In a crucial way, the behavior of ``await`` depends on the type of object "
"being awaited."
msgstr ""
"De maneira crucial, o comportamento de ``await`` depende do tipo de objeto "
"que está sendo aguardado."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:253
msgid ""
"Awaiting a task will cede control from the current task or coroutine to the "
"event loop. In the process of relinquishing control, a few important things "
"happen. We'll use the following code example to illustrate::"
msgstr ""
"Aguardar uma tarefa cederá o controle da tarefa ou corrotina atual para o "
"laço de eventos. No processo de cessão de controle, algumas coisas "
"importantes acontecem. Usaremos o seguinte exemplo de código para ilustrar:"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:258
msgid ""
"async def plant_a_tree():\n"
"    dig_the_hole_task = asyncio.create_task(dig_the_hole())\n"
"    await dig_the_hole_task\n"
"\n"
"    # Other instructions associated with planting a tree.\n"
"    ..."
msgstr ""
"async def plant_a_tree():\n"
"    dig_the_hole_task = asyncio.create_task(dig_the_hole())\n"
"    await dig_the_hole_task\n"
"\n"
"    # Outras instruções associadas com plantar uma árvore.\n"
"    ..."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:265
msgid ""
"In this example, imagine the event loop has passed control to the start of "
"the coroutine ``plant_a_tree()``. As seen above, the coroutine creates a "
"task and then awaits it. The ``await dig_the_hole_task`` instruction adds a "
"callback (which will resume ``plant_a_tree()``) to the ``dig_the_hole_task`` "
"object's list of callbacks. And then, the instruction cedes control to the "
"event loop. Some time later, the event loop will pass control to "
"``dig_the_hole_task`` and the task will finish whatever it needs to do. Once "
"the task finishes, it will add its various callbacks to the event loop, in "
"this case, a call to resume ``plant_a_tree()``."
msgstr ""
"Neste exemplo, imagine que o laço de eventos passou o controle para o início "
"da corrotina ``plant_a_tree()``. Como visto acima, a corrotina cria uma "
"tarefa e a aguarda. A instrução ``await dig_the_hole_task`` adiciona um "
"retorno de chamada (que retomará ``plant_a_tree()``) à lista de retornos de "
"chamada do objeto ``dig_the_hole_task``. E então, a instrução cede o "
"controle para o laço de eventos. Algum tempo depois, o laço de eventos "
"passará o controle para ``dig_the_hole_task`` e a tarefa concluirá o que for "
"necessário. Assim que a tarefa for concluída, ela adicionará seus vários "
"retornos de chamada ao laço de eventos, neste caso, uma chamada para retomar "
"``plant_a_tree()``."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:276
msgid ""
"Generally speaking, when the awaited task finishes (``dig_the_hole_task``), "
"the original task or coroutine (``plant_a_tree()``) is added back to the "
"event loop's to-do list to be resumed."
msgstr ""
"De modo geral, quando a tarefa aguardada termina (``dig_the_hole_task``), a "
"tarefa original ou corrotina (``plant_a_tree()``) é adicionada novamente à "
"lista de tarefas do laço de eventos para ser retomada."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:280
msgid ""
"This is a basic, yet reliable mental model. In practice, the control "
"handoffs are slightly more complex, but not by much. In part 2, we'll walk "
"through the details that make this possible."
msgstr ""
"Este é um modelo mental básico, porém confiável. Na prática, as "
"transferências de controle são um pouco mais complexas, mas não muito. Na "
"parte 2, abordaremos os detalhes que tornam isso possível."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:284
msgid ""
"**Unlike tasks, awaiting a coroutine does not hand control back to the event "
"loop!** Wrapping a coroutine in a task first, then awaiting that would cede "
"control. The behavior of ``await coroutine`` is effectively the same as "
"invoking a regular, synchronous Python function. Consider this program::"
msgstr ""
"**Ao contrário de tarefas, aguardar uma corrotina não devolve o controle ao "
"laço de eventos!** Envolver uma corrotina em uma tarefa primeiro e depois "
"aguardar isso cederia o controle. O comportamento de ``await coroutine`` é "
"efetivamente o mesmo que invocar uma função Python síncrona comum. Considere "
"este programa:"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:292
msgid ""
"import asyncio\n"
"\n"
"async def coro_a():\n"
"   print(\"I am coro_a(). Hi!\")\n"
"\n"
"async def coro_b():\n"
"   print(\"I am coro_b(). I sure hope no one hogs the event loop...\")\n"
"\n"
"async def main():\n"
"   task_b = asyncio.create_task(coro_b())\n"
"   num_repeats = 3\n"
"   for _ in range(num_repeats):\n"
"      await coro_a()\n"
"   await task_b\n"
"\n"
"asyncio.run(main())"
msgstr ""
"import asyncio\n"
"\n"
"async def coro_a():\n"
"   print(\"Sou coro_a(). Oi!\")\n"
"\n"
"async def coro_b():\n"
"   print(\"Sou coro_b(). Espero que ninguém monopolize o laço de eventos..."
"\")\n"
"\n"
"async def main():\n"
"   task_b = asyncio.create_task(coro_b())\n"
"   num_repeats = 3\n"
"   for _ in range(num_repeats):\n"
"      await coro_a()\n"
"   await task_b\n"
"\n"
"asyncio.run(main())"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:309
msgid ""
"The first statement in the coroutine ``main()`` creates ``task_b`` and "
"schedules it for execution via the event loop. Then, ``coro_a()`` is "
"repeatedly awaited. Control never cedes to the event loop, which is why we "
"see the output of all three ``coro_a()`` invocations before ``coro_b()``'s "
"output:"
msgstr ""
"A primeira instrução na corrotina ``main()`` cria ``task_b`` e a agenda para "
"execução via laço de eventos. Em seguida, ``coro_a()`` é aguardado "
"repetidamente. O controle nunca cede ao laço de eventos, e é por isso que "
"vemos a saída de todas as três invocações de ``coro_a()`` antes da saída de "
"``coro_b()``:"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:315
msgid ""
"I am coro_a(). Hi!\n"
"I am coro_a(). Hi!\n"
"I am coro_a(). Hi!\n"
"I am coro_b(). I sure hope no one hogs the event loop..."
msgstr ""
"Sou coro_a(). Oi!\n"
"Sou coro_a(). Oi!\n"
"Sou coro_a(). Oi!\n"
"Sou coro_b(). Espero que ninguém monopolize o laço de eventos..."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:322
msgid ""
"If we change ``await coro_a()`` to ``await asyncio.create_task(coro_a())``, "
"the behavior changes. The coroutine ``main()`` cedes control to the event "
"loop with that statement. The event loop then proceeds through its backlog "
"of work, calling ``task_b`` and then the task which wraps ``coro_a()`` "
"before resuming the coroutine ``main()``."
msgstr ""
"Se alterarmos ``await coro_a()`` para ``await asyncio."
"create_task(coro_a())``, o comportamento muda. A corrotina ``main()`` cede o "
"controle ao laço de eventos com essa instrução. O laço de eventos então "
"prossegue com seu backlog de trabalho, chamando ``task_b`` e, em seguida, a "
"tarefa que encerra ``coro_a()`` antes de retomar a corrotina ``main()``."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:329
msgid ""
"I am coro_b(). I sure hope no one hogs the event loop...\n"
"I am coro_a(). Hi!\n"
"I am coro_a(). Hi!\n"
"I am coro_a(). Hi!"
msgstr ""
"Sou coro_b(). Espero que ninguém monopolize o laço de eventos...\n"
"Sou coro_a(). Oi!\n"
"Sou coro_a(). Oi!\n"
"Sou coro_a(). Oi!"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:336
msgid ""
"This behavior of ``await coroutine`` can trip a lot of people up! That "
"example highlights how using only ``await coroutine`` could unintentionally "
"hog control from other tasks and effectively stall the event loop. :func:"
"`asyncio.run` can help you detect such occurrences via the ``debug=True`` "
"flag, which enables :ref:`debug mode <asyncio-debug-mode>`. Among other "
"things, it will log any coroutines that monopolize execution for 100ms or "
"longer."
msgstr ""
"Esse comportamento de ``await coroutine`` pode confundir muita gente! Este "
"exemplo destaca como usar apenas ``await coroutine`` pode, "
"involuntariamente, monopolizar o controle de outras tarefas e efetivamente "
"paralisar o laço de eventos. :func:`asyncio.run` pode ajudar a detectar tais "
"ocorrências por meio do sinalizador ``debug=True``, que habilita o :ref:"
"`modo de depuração <asyncio-debug-mode>`. Entre outras coisas, ele "
"registrará quaisquer corrotinas que monopolizem a execução por 100 ms ou "
"mais."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:346
msgid ""
"The design intentionally trades off some conceptual clarity around usage of "
"``await`` for improved performance. Each time a task is awaited, control "
"needs to be passed all the way up the call stack to the event loop. That "
"might sound minor, but in a large program with many ``await`` statements and "
"a deep call stack, that overhead can add up to a meaningful performance drag."
msgstr ""
"O design intencionalmente troca alguma clareza conceitual em torno do uso de "
"``await`` por melhor desempenho. Cada vez que uma tarefa é aguardada, o "
"controle precisa ser passado por toda a pilha de chamadas até o laço de "
"eventos. Isso pode parecer insignificante, mas em um programa grande com "
"muitas instruções ``await`` e uma pilha de chamadas extensa, essa sobrecarga "
"pode representar um significativo prejuízo ao desempenho."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:355
msgid "A conceptual overview part 2: the nuts and bolts"
msgstr "Uma visão geral conceitual, parte 2: os detalhes"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:357
msgid ""
"Part 2 goes into detail on the mechanisms :mod:`!asyncio` uses to manage "
"control flow. This is where the magic happens. You'll come away from this "
"section knowing what ``await`` does behind the scenes and how to make your "
"own asynchronous operators."
msgstr ""
"A parte 2 detalha os mecanismos que :mod:`!asyncio` usa para gerenciar o "
"fluxo de controle. É aqui que a mágica acontece. Você sairá desta seção "
"sabendo o que ``await`` faz nos bastidores e como criar seus próprios "
"operadores assíncronos."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:365
msgid "The inner workings of coroutines"
msgstr "O funcionamento interno das corrotinas"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:367
msgid ":mod:`!asyncio` leverages four components to pass around control."
msgstr ":mod:`!asyncio` utiliza quatro componentes para passar o controle."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:369
msgid ""
":meth:`coroutine.send(arg) <generator.send>` is the method used to start or "
"resume a coroutine. If the coroutine was paused and is now being resumed, "
"the argument ``arg`` will be sent in as the return value of the ``yield`` "
"statement which originally paused it. If the coroutine is being used for the "
"first time (as opposed to being resumed), ``arg`` must be ``None``."
msgstr ""
":meth:`coroutine.send(arg) <generator.send>` é o método usado para iniciar "
"ou retomar uma corrotina. Se a corrotina foi pausada e agora está sendo "
"retomada, o argumento ``arg`` será enviado como valor de retorno da "
"instrução ``yield`` que a pausou originalmente. Se a corrotina estiver sendo "
"usada pela primeira vez (em vez de ser retomada), ``arg`` deve ser ``None``."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:377
msgid ""
"class Rock:\n"
"    def __await__(self):\n"
"        value_sent_in = yield 7\n"
"        print(f\"Rock.__await__ resuming with value: {value_sent_in}.\")\n"
"        return value_sent_in\n"
"\n"
"async def main():\n"
"    print(\"Beginning coroutine main().\")\n"
"    rock = Rock()\n"
"    print(\"Awaiting rock...\")\n"
"    value_from_rock = await rock\n"
"    print(f\"Coroutine received value: {value_from_rock} from rock.\")\n"
"    return 23\n"
"\n"
"coroutine = main()\n"
"intermediate_result = coroutine.send(None)\n"
"print(f\"Coroutine paused and returned intermediate value: "
"{intermediate_result}.\")\n"
"\n"
"print(f\"Resuming coroutine and sending in value: 42.\")\n"
"try:\n"
"    coroutine.send(42)\n"
"except StopIteration as e:\n"
"    returned_value = e.value\n"
"print(f\"Coroutine main() finished and provided value: {returned_value}.\")"
msgstr ""
"class Rock:\n"
"    def __await__(self):\n"
"        value_sent_in = yield 7\n"
"        print(f\"Rock.__await__ resumindo com o valor: {value_sent_in}.\")\n"
"        return value_sent_in\n"
"\n"
"async def main():\n"
"    print(\"Iniciando main() da corrotina.\")\n"
"    rock = Rock()\n"
"    print(\"Aguardando rock...\")\n"
"    value_from_rock = await rock\n"
"    print(f\"Corrotina recebeu valor: {value_from_rock} de rock.\")\n"
"    return 23\n"
"\n"
"coroutine = main()\n"
"intermediate_result = coroutine.send(None)\n"
"print(f\"Corrotina pausou e retornou o valor intermediário: "
"{intermediate_result}.\")\n"
"\n"
"print(f\"Resumindo corrotina e enviando o valor: 42.\")\n"
"try:\n"
"    coroutine.send(42)\n"
"except StopIteration as e:\n"
"    returned_value = e.value\n"
"print(f\"O main() da corrotina finalizou e forneceu o valor: "
"{returned_value}.\")"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:405
msgid ""
":ref:`yield <yieldexpr>`, as usual, pauses execution and returns control to "
"the caller. In the example above, the ``yield``, on line 3, is called by "
"``... = await rock`` on line 11. More broadly speaking, ``await`` calls the :"
"meth:`~object.__await__` method of the given object. ``await`` also does one "
"more very special thing: it propagates (or \"passes along\") any ``yield``\\ "
"s it receives up the call chain. In this case, that's back to ``... = "
"coroutine.send(None)`` on line 16."
msgstr ""
":ref:`yield <yieldexpr>`, como de costume, pausa a execução e retorna o "
"controle ao chamador. No exemplo acima, ``yield``, na linha 3, é chamado por "
"``... = await rock`` na linha 11. Em termos mais gerais, ``await`` chama o "
"método :meth:`~object.__await__` do objeto fornecido. ``await`` também faz "
"algo muito especial: ele propaga (ou \"repassa\") quaisquer ``yield``\\ s "
"que recebe na cadeia de chamadas. Neste caso, voltamos a ``... = coroutine."
"send(None)`` na linha 16."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:415
msgid ""
"The coroutine is resumed via the ``coroutine.send(42)`` call on line 21. The "
"coroutine picks back up from where it ``yield``\\ ed (or paused) on line 3 "
"and executes the remaining statements in its body. When a coroutine "
"finishes, it raises a :exc:`StopIteration` exception with the return value "
"attached in the :attr:`~StopIteration.value` attribute."
msgstr ""
"A corrotina é retomada por meio da chamada ``coroutine.send(42)`` na linha "
"21. A corrotina continua de onde foi executada (ou pausada) com ``yield`` na "
"linha 3 e executa as instruções restantes em seu corpo. Quando uma corrotina "
"termina, ela levanta uma exceção :exc:`StopIteration` com o valor de retorno "
"anexado ao atributo :attr:`~StopIteration.value`."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:421
msgid "That snippet produces this output:"
msgstr "Esse trecho de código produz esta saída:"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:423
msgid ""
"Beginning coroutine main().\n"
"Awaiting rock...\n"
"Coroutine paused and returned intermediate value: 7.\n"
"Resuming coroutine and sending in value: 42.\n"
"Rock.__await__ resuming with value: 42.\n"
"Coroutine received value: 42 from rock.\n"
"Coroutine main() finished and provided value: 23."
msgstr ""
"Iniciando main() da corrotina.\n"
"Aguardando rock...\n"
"Corrotina pausou e retornou o valor intermediário: 7.\n"
"Resumindo coroutine e enviando o valor: 42.\n"
"Rock.__await__ resumindo com o valor: 42.\n"
"Corrotina recebeu valor: 42 de rock.\n"
"O main() da corrotina finalizou e forneceu o valor: 23."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:433
msgid ""
"It's worth pausing for a moment here and making sure you followed the "
"various ways that control flow and values were passed. A lot of important "
"ideas were covered and it's worth ensuring your understanding is firm."
msgstr ""
"Vale a pena parar um momento aqui e certificar-se de que você seguiu as "
"diversas maneiras pelas quais o fluxo de controle e os valores foram "
"passados. Muitas ideias importantes foram abordadas e vale a pena garantir "
"que seu entendimento esteja firme."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:437
msgid ""
"The only way to yield (or effectively cede control) from a coroutine is to "
"``await`` an object that ``yield``\\ s in its ``__await__`` method. That "
"might sound odd to you. You might be thinking:"
msgstr ""
"A única maneira de ceder (ou efetivamente ceder o controle) de uma corrotina "
"é ``await`` um objeto que ``yield`` está em seu método ``__await__``. Isso "
"pode parecer estranho para você. Você pode estar pensando:"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:441
msgid ""
"1. What about a ``yield`` directly within the coroutine function? The "
"coroutine function becomes an :ref:`async generator function <asynchronous-"
"generator-functions>`, a different beast entirely."
msgstr ""
"1. Que tal um ``yield`` diretamente dentro da função de corrotina? A função "
"de corrotina se torna uma :ref:`função geradora assíncrona <asynchronous-"
"generator-functions>`, algo completamente diferente."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:446
msgid ""
"2. What about a :ref:`yield from <yieldexpr>` within the coroutine function "
"to a (plain) generator? That causes the error: ``SyntaxError: yield from not "
"allowed in a coroutine.`` This was intentionally designed for the sake of "
"simplicity -- mandating only one way of using coroutines. Initially "
"``yield`` was barred as well, but was re-accepted to allow for async "
"generators. Despite that, ``yield from`` and ``await`` effectively do the "
"same thing."
msgstr ""
"2. E quanto a um :ref:`yield from <yieldexpr>` dentro da função de corrotina "
"para um gerador (simples)? Isso causa o erro: ``SyntaxError: yield from not "
"allowed in a coroutine.``. Isso foi intencionalmente projetado por uma "
"questão de simplicidade — exigindo apenas uma maneira de usar corrotinas. "
"Inicialmente, ``yield`` também foi proibido, mas foi reativado para permitir "
"geradores assíncronos. Apesar disso, ``yield from`` e ``await`` efetivamente "
"fazem a mesma coisa."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:457
msgid "Futures"
msgstr "Futuros"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:459
msgid ""
"A :ref:`future <asyncio-future-obj>` is an object meant to represent a "
"computation's status and result. The term is a nod to the idea of something "
"still to come or not yet happened, and the object is a way to keep an eye on "
"that something."
msgstr ""
"Um :ref:`future <asyncio-future-obj>` é um objeto que representa o status e "
"o resultado de uma computação. O termo é uma referência à ideia de algo que "
"ainda está por vir ou que ainda não aconteceu, e o objeto é uma forma de "
"ficar de olho nesse algo."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:464
msgid ""
"A future has a few important attributes. One is its state, which can be "
"either \"pending\", \"cancelled\", or \"done\". Another is its result, which "
"is set when the state transitions to done. Unlike a coroutine, a future does "
"not represent the actual computation to be done; instead, it represents the "
"status and result of that computation, kind of like a status light (red, "
"yellow, or green) or indicator."
msgstr ""
"Um future possui alguns atributos importantes. Um deles é o seu estado, que "
"pode ser \"pending\", \"cancelled\", or \"done\" (\"pendente\", "
"\"cancelado\" ou \"concluído\", respectivamente). Outro é o seu resultado, "
"que é definido quando o estado transita para concluído. Ao contrário de uma "
"corrotina, um future não representa a computação real a ser realizada; em "
"vez disso, representa o status e o resultado dessa computação, como uma "
"espécie de luz de status (vermelha, amarela ou verde) ou indicador."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:471
msgid ""
":class:`asyncio.Task` subclasses :class:`asyncio.Future` in order to gain "
"these various capabilities. The prior section said tasks store a list of "
"callbacks, which wasn't entirely accurate. It's actually the ``Future`` "
"class that implements this logic, which ``Task`` inherits."
msgstr ""
":class:`asyncio.Task` estende :class:`asyncio.Future` para obter esses "
"vários recursos. A seção anterior dizia que as tarefas armazenam uma lista "
"de retornos de chamada, o que não era totalmente preciso. Na verdade, é a "
"classe ``Future`` que implementa essa lógica, que ``Task`` herda."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:478
msgid ""
"Futures may also be used directly (not via tasks). Tasks mark themselves as "
"done when their coroutine is complete. Futures are much more versatile and "
"will be marked as done when you say so. In this way, they're the flexible "
"interface for you to make your own conditions for waiting and resuming."
msgstr ""
"Instruções future também podem ser usados diretamente (não por meio de "
"tarefas). As tarefas se marcam como concluídas quando sua corrotina é "
"concluída. Instruções future são muito mais versáteis e serão marcados como "
"concluídos quando você informar. Dessa forma, eles são a interface flexível "
"para você definir suas próprias condições de espera e retomada."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:486
msgid "A homemade asyncio.sleep"
msgstr "Um asyncio.sleep caseiro"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:488
msgid ""
"We'll go through an example of how you could leverage a future to create "
"your own variant of asynchronous sleep (``async_sleep``) which mimics :func:"
"`asyncio.sleep`."
msgstr ""
"Veremos um exemplo de como você pode aproveitar um future para criar sua "
"própria variante de suspensão assíncrona (``async_sleep``) que imita :func:"
"`asyncio.sleep`."

#: ../../howto/a-conceptual-overview-of-asyncio.rst:492
msgid ""
"This snippet registers a few tasks with the event loop and then awaits the "
"task created by ``asyncio.create_task``, which wraps the ``async_sleep(3)`` "
"coroutine. We want that task to finish only after three seconds have "
"elapsed, but without preventing other tasks from running."
msgstr ""

#: ../../howto/a-conceptual-overview-of-asyncio.rst:499
msgid ""
"async def other_work():\n"
"    print(\"I like work. Work work.\")\n"
"\n"
"async def main():\n"
"    # Add a few other tasks to the event loop, so there's something\n"
"    # to do while asynchronously sleeping.\n"
"    work_tasks = [\n"
"        asyncio.create_task(other_work()),\n"
"        asyncio.create_task(other_work()),\n"
"        asyncio.create_task(other_work())\n"
"    ]\n"
"    print(\n"
"        \"Beginning asynchronous sleep at time: \"\n"
"        f\"{datetime.datetime.now().strftime(\"%H:%M:%S\")}.\"\n"
"    )\n"
"    await asyncio.create_task(async_sleep(3))\n"
"    print(\n"
"        \"Done asynchronous sleep at time: \"\n"
"        f\"{datetime.datetime.now().strftime(\"%H:%M:%S\")}.\"\n"
"    )\n"
"    # asyncio.gather effectively awaits each task in the collection.\n"
"    await asyncio.gather(*work_tasks)"
msgstr ""

#: ../../howto/a-conceptual-overview-of-asyncio.rst:523
msgid ""
"Below, we use a future to enable custom control over when that task will be "
"marked as done. If :meth:`future.set_result() <asyncio.Future.set_result>` "
"(the method responsible for marking that future as done) is never called, "
"then this task will never finish. We've also enlisted the help of another "
"task, which we'll see in a moment, that will monitor how much time has "
"elapsed and, accordingly, call ``future.set_result()``."
msgstr ""

#: ../../howto/a-conceptual-overview-of-asyncio.rst:534
msgid ""
"async def async_sleep(seconds: float):\n"
"    future = asyncio.Future()\n"
"    time_to_wake = time.time() + seconds\n"
"    # Add the watcher-task to the event loop.\n"
"    watcher_task = asyncio.create_task(_sleep_watcher(future, "
"time_to_wake))\n"
"    # Block until the future is marked as done.\n"
"    await future"
msgstr ""

#: ../../howto/a-conceptual-overview-of-asyncio.rst:542
msgid ""
"Below, we use a rather bare ``YieldToEventLoop()`` object to ``yield`` from "
"its ``__await__`` method, ceding control to the event loop. This is "
"effectively the same as calling ``asyncio.sleep(0)``, but this approach "
"offers more clarity, not to mention it's somewhat cheating to use ``asyncio."
"sleep`` when showcasing how to implement it!"
msgstr ""

#: ../../howto/a-conceptual-overview-of-asyncio.rst:548
msgid ""
"As usual, the event loop cycles through its tasks, giving them control and "
"receiving control back when they pause or finish. The ``watcher_task``, "
"which runs the coroutine ``_sleep_watcher(...)``, will be invoked once per "
"full cycle of the event loop. On each resumption, it'll check the time and "
"if not enough has elapsed, then it'll pause once again and hand control back "
"to the event loop. Once enough time has elapsed, ``_sleep_watcher(...)`` "
"marks the future as done and completes by exiting its infinite ``while`` "
"loop. Given this helper task is only invoked once per cycle of the event "
"loop, you'd be correct to note that this asynchronous sleep will sleep *at "
"least* three seconds, rather than exactly three seconds. Note this is also "
"true of ``asyncio.sleep``."
msgstr ""

#: ../../howto/a-conceptual-overview-of-asyncio.rst:564
msgid ""
"class YieldToEventLoop:\n"
"    def __await__(self):\n"
"        yield\n"
"\n"
"async def _sleep_watcher(future, time_to_wake):\n"
"    while True:\n"
"        if time.time() >= time_to_wake:\n"
"            # This marks the future as done.\n"
"            future.set_result(None)\n"
"            break\n"
"        else:\n"
"            await YieldToEventLoop()"
msgstr ""

#: ../../howto/a-conceptual-overview-of-asyncio.rst:577
msgid "Here is the full program's output:"
msgstr "Aqui está a saída completa do programa:"

#: ../../howto/a-conceptual-overview-of-asyncio.rst:579
msgid ""
"$ python custom-async-sleep.py\n"
"Beginning asynchronous sleep at time: 14:52:22.\n"
"I like work. Work work.\n"
"I like work. Work work.\n"
"I like work. Work work.\n"
"Done asynchronous sleep at time: 14:52:25."
msgstr ""

#: ../../howto/a-conceptual-overview-of-asyncio.rst:588
msgid ""
"You might feel this implementation of asynchronous sleep was unnecessarily "
"convoluted. And, well, it was. The example was meant to showcase the "
"versatility of futures with a simple example that could be mimicked for more "
"complex needs. For reference, you could implement it without futures, like "
"so::"
msgstr ""

#: ../../howto/a-conceptual-overview-of-asyncio.rst:595
msgid ""
"async def simpler_async_sleep(seconds):\n"
"    time_to_wake = time.time() + seconds\n"
"    while True:\n"
"        if time.time() >= time_to_wake:\n"
"            return\n"
"        else:\n"
"            await YieldToEventLoop()"
msgstr ""

#: ../../howto/a-conceptual-overview-of-asyncio.rst:603
msgid ""
"But that's all for now. Hopefully you're ready to more confidently dive into "
"some async programming or check out advanced topics in the :mod:`rest of the "
"documentation <asyncio>`."
msgstr ""
