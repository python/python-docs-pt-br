# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2020
# Lucas Sanches <sanches.lz@hotmail.com>, 2020
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-20 17:26+0000\n"
"PO-Revision-Date: 2020-05-30 11:55+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../howto/sorting.rst:4
msgid "Sorting HOW TO"
msgstr "HowTo - Ordenação"

#: ../../howto/sorting.rst:0
msgid "Author"
msgstr "Autor"

#: ../../howto/sorting.rst:6
msgid "Andrew Dalke and Raymond Hettinger"
msgstr "Andrew Dalke e Raymond Hettinger"

#: ../../howto/sorting.rst:0
msgid "Release"
msgstr "Versão"

#: ../../howto/sorting.rst:7
msgid "0.1"
msgstr "0.1"

#: ../../howto/sorting.rst:10
msgid ""
"Python lists have a built-in :meth:`list.sort` method that modifies the list "
"in-place.  There is also a :func:`sorted` built-in function that builds a "
"new sorted list from an iterable."
msgstr ""
"As listas em Python possuem um método embutido :meth:`list.sort` que "
"modifica a lista em si. Há também a função embutida :func:`sorted` que "
"constrói uma nova lista ordenada à partir de um iterável."

#: ../../howto/sorting.rst:14
msgid ""
"In this document, we explore the various techniques for sorting data using "
"Python."
msgstr ""
"Neste documento, exploramos várias técnicas para ordenar dados utilizando "
"Python."

#: ../../howto/sorting.rst:18
msgid "Sorting Basics"
msgstr "Básico de Ordenação"

#: ../../howto/sorting.rst:20
msgid ""
"A simple ascending sort is very easy: just call the :func:`sorted` function. "
"It returns a new sorted list::"
msgstr ""
"Uma simples ordenação ascendente é muito fácil: apenas chame a função :func:"
"`sorted`. Isso retornará uma nova lista ordenada::"

#: ../../howto/sorting.rst:26
msgid ""
"You can also use the :meth:`list.sort` method. It modifies the list in-place "
"(and returns ``None`` to avoid confusion). Usually it's less convenient "
"than :func:`sorted` - but if you don't need the original list, it's slightly "
"more efficient."
msgstr ""
"Você também pode utilizar o método :meth:`list.sort`. Isso modifica a lista "
"em si (e retorna ``None`` para evitar confusão). Usualmente este método é "
"menos conveniente que a função :func:`sorted` - mas se você não precisará da "
"lista original, esta maneira é levemente mais eficiente."

#: ../../howto/sorting.rst:36
msgid ""
"Another difference is that the :meth:`list.sort` method is only defined for "
"lists. In contrast, the :func:`sorted` function accepts any iterable."
msgstr ""
"Outra diferença é que o método :meth:`list.sort` é aplicável apenas às "
"listas. Em contrapartida, a função :func:`sorted` aceita qualquer iterável."

#: ../../howto/sorting.rst:43
msgid "Key Functions"
msgstr "Funções Chave"

#: ../../howto/sorting.rst:45
msgid ""
"Both :meth:`list.sort` and :func:`sorted` have a *key* parameter to specify "
"a function to be called on each list element prior to making comparisons."
msgstr ""
"Tanto o método :meth:`list.sort` quanto a função :func:`sorted` possuem um "
"parâmetro *key* que especifica uma função a ser chamada para cada elemento "
"da lista antes de ser realizada a comparação."

#: ../../howto/sorting.rst:48
msgid "For example, here's a case-insensitive string comparison:"
msgstr "Por exemplo, aqui há uma comparação case-insensitive de strings."

#: ../../howto/sorting.rst:53
msgid ""
"The value of the *key* parameter should be a function that takes a single "
"argument and returns a key to use for sorting purposes. This technique is "
"fast because the key function is called exactly once for each input record."
msgstr ""
"O valor do parâmetro *key* deve ser uma função que recebe um único argumento "
"e retorna uma chave à ser utilizada com o propósito de ordenação. Esta "
"técnica é rápida porque a função chave é chamada exatamente uma vez para "
"cada entrada de registro."

#: ../../howto/sorting.rst:57
msgid ""
"A common pattern is to sort complex objects using some of the object's "
"indices as keys. For example:"
msgstr ""
"Uma padrão comum é ordenar objetos complexos utilizando algum índice do "
"objeto como chave. Por exemplo:"

#: ../../howto/sorting.rst:68
msgid ""
"The same technique works for objects with named attributes. For example:"
msgstr ""
"A mesma técnica funciona com objetos que possuem atributos nomeados. Por "
"exemplo:"

#: ../../howto/sorting.rst:87
msgid "Operator Module Functions"
msgstr "Funções do Módulo Operator"

#: ../../howto/sorting.rst:89
msgid ""
"The key-function patterns shown above are very common, so Python provides "
"convenience functions to make accessor functions easier and faster. The :mod:"
"`operator` module has :func:`~operator.itemgetter`, :func:`~operator."
"attrgetter`, and a :func:`~operator.methodcaller` function."
msgstr ""
"O padrão de chave-função mostrado acima é muito comum, por isso, Python "
"provê funções convenientes para tornar as funções de acesso mais fáceis e "
"rápidas. O módulo :mod:`operator` tem as funções :func:`~operator."
"itemgetter`, :func:`~operator.attrgetter`, e :func:`~operator.methodcaller`"

#: ../../howto/sorting.rst:94
msgid "Using those functions, the above examples become simpler and faster:"
msgstr ""
"Usando estas funções, os exemplos acima se tornam mais simples e mais "
"rápidos:"

#: ../../howto/sorting.rst:104
msgid ""
"The operator module functions allow multiple levels of sorting. For example, "
"to sort by *grade* then by *age*:"
msgstr ""
"As funções do módulo operator permite múltiplos níveis de ordenação. Por "
"exemplo, ordenar por *grade* e então por *age*:"

#: ../../howto/sorting.rst:114
msgid "Ascending and Descending"
msgstr "Ascendente e descendente"

#: ../../howto/sorting.rst:116
msgid ""
"Both :meth:`list.sort` and :func:`sorted` accept a *reverse* parameter with "
"a boolean value. This is used to flag descending sorts. For example, to get "
"the student data in reverse *age* order:"
msgstr ""
"Tanto o método :meth:`list.sort` quanto a função :func:`sorted` aceitam um "
"valor booleano para o parâmetro *reverse*. Essa flag é utilizada para "
"ordenações descendentes. Por exemplo, para retornar os dados de estudantes "
"pela ordem inversa de *age*:"

#: ../../howto/sorting.rst:127
msgid "Sort Stability and Complex Sorts"
msgstr "Estabilidade de Ordenação e Ordenações Complexas"

#: ../../howto/sorting.rst:129
msgid ""
"Sorts are guaranteed to be `stable <https://en.wikipedia.org/wiki/"
"Sorting_algorithm#Stability>`_\\. That means that when multiple records have "
"the same key, their original order is preserved."
msgstr ""
"Ordenações são garantidas de serem `estáveis <https://en.wikipedia.org/wiki/"
"Sorting_algorithm#Stability>`_\\. Isso significa que quando múltiplos "
"registros possuem a mesma chave, eles terão sua ordem original preservada."

#: ../../howto/sorting.rst:137
msgid ""
"Notice how the two records for *blue* retain their original order so that "
"``('blue', 1)`` is guaranteed to precede ``('blue', 2)``."
msgstr ""
"Observe como os dois registros de *blue* permanecem em sua ordem original de "
"forma que ``('blue',1)`` é garantido de preceder ``('blue',2)``."

#: ../../howto/sorting.rst:140
msgid ""
"This wonderful property lets you build complex sorts in a series of sorting "
"steps. For example, to sort the student data by descending *grade* and then "
"ascending *age*, do the *age* sort first and then sort again using *grade*:"
msgstr ""
"Esta maravilhosa propriedade permite que você construa ordenações complexas "
"em uma série de passos de ordenação. Por exemplo, para ordenar os registros "
"de estudante por ordem descendente de *grade* e então ascendente de *age*, "
"primeiro ordene *age* e depois ordene novamente utilizando *grade*:"

#: ../../howto/sorting.rst:148
msgid ""
"This can be abstracted out into a wrapper function that can take a list and "
"tuples of field and order to sort them on multiple passes."
msgstr ""
"Isso pode ser abstrato no caso das funções invólucros que podem receber uma "
"lista e uma tupla com o campos e então ordená-los em múltiplos passos."

#: ../../howto/sorting.rst:159
msgid ""
"The `Timsort <https://en.wikipedia.org/wiki/Timsort>`_ algorithm used in "
"Python does multiple sorts efficiently because it can take advantage of any "
"ordering already present in a dataset."
msgstr ""
"O algoritmo `Timsort <https://en.wikipedia.org/wiki/Timsort>`_ utilizado no "
"Python realiza múltiplas ordenações de maneira eficiente, pois se aproveita "
"de qualquer ordenação já presente no conjunto de dados."

#: ../../howto/sorting.rst:164
msgid "The Old Way Using Decorate-Sort-Undecorate"
msgstr "A velha maneira utilizando Decorate-Sort-Undecorate"

#: ../../howto/sorting.rst:166
msgid "This idiom is called Decorate-Sort-Undecorate after its three steps:"
msgstr ""
"Esse item idiomático, chamado de Decorate-Sort-Undecorate, é realizado em "
"três passos:"

#: ../../howto/sorting.rst:168
msgid ""
"First, the initial list is decorated with new values that control the sort "
"order."
msgstr ""
"Primeiro, a lista inicial é decorada com novos valores que controlarão a "
"ordem em que ocorrerá a ordenação"

#: ../../howto/sorting.rst:170
msgid "Second, the decorated list is sorted."
msgstr "Segundo, a lista decorada é ordenada."

#: ../../howto/sorting.rst:172
msgid ""
"Finally, the decorations are removed, creating a list that contains only the "
"initial values in the new order."
msgstr ""
"Finalmente, os valores decorados são removidos, criando uma lista que contém "
"apenas os valores iniciais na nova ordenação."

#: ../../howto/sorting.rst:175
msgid ""
"For example, to sort the student data by *grade* using the DSU approach:"
msgstr ""
"Por exemplo, para ordenar os dados dos estudantes por *grade* usando a "
"abordagem DSU:"

#: ../../howto/sorting.rst:182
msgid ""
"This idiom works because tuples are compared lexicographically; the first "
"items are compared; if they are the same then the second items are compared, "
"and so on."
msgstr ""
"Esse padrão idiomático funciona porque tuplas são comparadas "
"lexicograficamente; os primeiros itens são comparados; se eles são "
"semelhantes, então os segundos itens são comparados e assim sucessivamente."

#: ../../howto/sorting.rst:186
msgid ""
"It is not strictly necessary in all cases to include the index *i* in the "
"decorated list, but including it gives two benefits:"
msgstr ""
"Não é estritamente necessário incluir o índice *i* em todos os casos de "
"listas decoradas, mas fazer assim traz dois benefícios:"

#: ../../howto/sorting.rst:189
msgid ""
"The sort is stable -- if two items have the same key, their order will be "
"preserved in the sorted list."
msgstr ""
"A ordenação é estável - se dois itens tem a mesma chave, suas ordens serão "
"preservadas na lista ordenada"

#: ../../howto/sorting.rst:192
msgid ""
"The original items do not have to be comparable because the ordering of the "
"decorated tuples will be determined by at most the first two items. So for "
"example the original list could contain complex numbers which cannot be "
"sorted directly."
msgstr ""
"Os itens originais não precisarão ser comparados porque a ordenação de "
"tuplas decoradas será determinada por no máximo os primeiros dois itens. "
"Então, por exemplo, a lista original poderia conter números complexos que "
"não poderão ser ordenados diretamente."

#: ../../howto/sorting.rst:197
msgid ""
"Another name for this idiom is `Schwartzian transform <https://en.wikipedia."
"org/wiki/Schwartzian_transform>`_\\, after Randal L. Schwartz, who "
"popularized it among Perl programmers."
msgstr ""
"Outro nome para este padrão idiomático é `Schwartzian transform <https://en."
"wikipedia.org/wiki/Schwartzian_transform>`_ de Randal L. Schwartz, que "
"popularizou isto entre os programadores Perl."

#: ../../howto/sorting.rst:201
msgid ""
"Now that Python sorting provides key-functions, this technique is not often "
"needed."
msgstr ""
"Agora que a ordenação do Python prevê funções-chave, essa técnica não se faz "
"mais necessária."

#: ../../howto/sorting.rst:205
msgid "The Old Way Using the *cmp* Parameter"
msgstr "O método antigo utilizando o parâmetro *cmp*"

#: ../../howto/sorting.rst:207
msgid ""
"Many constructs given in this HOWTO assume Python 2.4 or later. Before that, "
"there was no :func:`sorted` builtin and :meth:`list.sort` took no keyword "
"arguments. Instead, all of the Py2.x versions supported a *cmp* parameter to "
"handle user specified comparison functions."
msgstr ""
"Muitos construtores apresentados neste HOWTO assumem o uso do Python 2.4 ou "
"superior. Antes disso, não havia a função embutida :func:`sorted` e o "
"método :meth:`list.sort` não recebia os argumentos nomeados. Apesar disso, "
"todas as versões do Py2.x suportam o parâmetro *cmp* para lidar com a função "
"de comparação especificada pelo usuário. "

#: ../../howto/sorting.rst:212
msgid ""
"In Py3.0, the *cmp* parameter was removed entirely (as part of a larger "
"effort to simplify and unify the language, eliminating the conflict between "
"rich comparisons and the :meth:`__cmp__` magic method)."
msgstr ""
"No Py3.0, o parâmetro *cmp* foi removido totalmente (como parte de um grande "
"esforço para simplificar e unificar a linguagem, eliminando o conflito entre "
"comparações enriquecidas e o método mágico :meth:`__cmp__`)"

#: ../../howto/sorting.rst:216
msgid ""
"In Py2.x, sort allowed an optional function which can be called for doing "
"the comparisons. That function should take two arguments to be compared and "
"then return a negative value for less-than, return zero if they are equal, "
"or return a positive value for greater-than. For example, we can do:"
msgstr ""
"No Py2.x, ordenação permite uma função opcional que pode ser invocada para "
"fazer comparações. Esta função pode receber dois argumentos para serem "
"comparados e retorna um valor negativo para o menor-que, retorna zero se "
"eles são iguais, ou retorna um valor positivo para o maior-que. Por exemplo, "
"podemos fazer:"

#: ../../howto/sorting.rst:226
msgid "Or you can reverse the order of comparison with:"
msgstr "Ou podemos inverter a ordem de comparação com:"

#: ../../howto/sorting.rst:233
msgid ""
"When porting code from Python 2.x to 3.x, the situation can arise when you "
"have the user supplying a comparison function and you need to convert that "
"to a key function. The following wrapper makes that easy to do::"
msgstr ""
"Quando migrando o código do Python 2.x para o 3.x, pode surgir a situação em "
"que há o usuário suprindo a função de comparação e é necessário converter "
"isso em uma função chave. O seguinte empacotamento torna isso fácil de "
"fazer::"

#: ../../howto/sorting.rst:256
msgid "To convert to a key function, just wrap the old comparison function:"
msgstr ""
"Para converter a função chave, apenas empacote a velha função de comparação:"

#: ../../howto/sorting.rst:267
msgid ""
"In Python 3.2, the :func:`functools.cmp_to_key` function was added to the :"
"mod:`functools` module in the standard library."
msgstr ""
"No Python 3.2, a função :func:`functools.cmp_to_key` foi adicionada ao "
"módulo :mod:`functools` na biblioteca padrão."

#: ../../howto/sorting.rst:271
msgid "Odd and Ends"
msgstr "Ímpares e extremidades"

#: ../../howto/sorting.rst:273
msgid ""
"For locale aware sorting, use :func:`locale.strxfrm` for a key function or :"
"func:`locale.strcoll` for a comparison function."
msgstr ""
"Para ordenação com reconhecimento de localidade, use :func:`locale.strxfrm` "
"para uma função chave ou :func:`locale.strcoll` para uma função de "
"comparação."

#: ../../howto/sorting.rst:276
msgid ""
"The *reverse* parameter still maintains sort stability (so that records with "
"equal keys retain the original order). Interestingly, that effect can be "
"simulated without the parameter by using the builtin :func:`reversed` "
"function twice:"
msgstr ""
"O parâmetro *reverse* ainda mantém a estabilidade da ordenação (para que os "
"registros com chaves iguais mantenham a ordem original). Curiosamente, esse "
"efeito pode ser simulado sem o parâmetro usando a função embutida :func:"
"`reversed` duas vezes:"

#: ../../howto/sorting.rst:288
msgid ""
"The sort routines are guaranteed to use :meth:`__lt__` when making "
"comparisons between two objects. So, it is easy to add a standard sort order "
"to a class by defining an :meth:`__lt__` method::"
msgstr ""
"As rotinas de ordenação são garantidas para usar :meth:`__lt__` ao fazer "
"comparações entre dois objetos. Portanto, é fácil adicionar uma ordem de "
"ordenação padrão a uma classe, definindo um método :meth:`__lt__`::"

#: ../../howto/sorting.rst:296
msgid ""
"Key functions need not depend directly on the objects being sorted. A key "
"function can also access external resources. For instance, if the student "
"grades are stored in a dictionary, they can be used to sort a separate list "
"of student names:"
msgstr ""
"As funções principais não precisam depender diretamente dos objetos que "
"estão sendo ordenados. Uma função chave também pode acessar recursos "
"externos. Por exemplo, se as notas dos alunos estiverem armazenadas em um "
"dicionário, elas poderão ser usadas para ordenar uma lista separada de nomes "
"de alunos:"
