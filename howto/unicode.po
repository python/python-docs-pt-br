# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-11 16:41+0000\n"
"PO-Revision-Date: 2023-05-24 02:11+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../howto/unicode.rst:5
msgid "Unicode HOWTO"
msgstr "Unicode"

#: ../../howto/unicode.rst:0
msgid "Release"
msgstr "Versão"

#: ../../howto/unicode.rst:7
msgid "1.12"
msgstr "1.12"

#: ../../howto/unicode.rst:9
msgid ""
"This HOWTO discusses Python's support for the Unicode specification for "
"representing textual data, and explains various problems that people "
"commonly encounter when trying to work with Unicode."
msgstr ""
"Este documento fala sobre o suporte do Python para a especificação Unicode "
"de representação de dados textuais e explica diversos problemas que as "
"pessoas costumam encontrar quando tentam trabalhar com Unicode."

#: ../../howto/unicode.rst:15
msgid "Introduction to Unicode"
msgstr "Introdução ao Unicode"

#: ../../howto/unicode.rst:18
msgid "Definitions"
msgstr "Definições"

#: ../../howto/unicode.rst:20
msgid ""
"Today's programs need to be able to handle a wide variety of characters.  "
"Applications are often internationalized to display messages and output in a "
"variety of user-selectable languages; the same program might need to output "
"an error message in English, French, Japanese, Hebrew, or Russian.  Web "
"content can be written in any of these languages and can also include a "
"variety of emoji symbols. Python's string type uses the Unicode Standard for "
"representing characters, which lets Python programs work with all these "
"different possible characters."
msgstr ""
"Os programas de hoje precisam lidar com uma grande variedade de caracteres. "
"Aplicações são frequentemente internacionalizadas para mostrar mensagens e "
"gerar saídas em uma variedade de idiomas selecionáveis por usuários; o mesmo "
"programa precisar apresentar mensagens de erro em inglês, francês, japonês, "
"hebraico ou russo. Conteúdo da web pode ser escrito em qualquer um desses "
"idiomas e ainda incluir uma variedade de emojis. O tipo string do Python usa "
"o padrão Unicode para representação de caracteres, o que permite aos "
"programas em Python funcionar com todos estes diferentes caracteres."

#: ../../howto/unicode.rst:30
msgid ""
"Unicode (https://www.unicode.org/) is a specification that aims to list "
"every character used by human languages and give each character its own "
"unique code.  The Unicode specifications are continually revised and updated "
"to add new languages and symbols."
msgstr ""
"Unicode (https://www.unicode.org/) é a especificação que visa listar cada "
"caractere utilizado pelos idiomas humanos e dar a cada caractere um código "
"único. As especificações Unicode são continuamente revisadas e atualizadas "
"para adicionar novos idiomas e símbolos."

#: ../../howto/unicode.rst:35
msgid ""
"A **character** is the smallest possible component of a text.  'A', 'B', "
"'C', etc., are all different characters.  So are 'È' and 'Í'.  Characters "
"vary depending on the language or context you're talking about.  For "
"example, there's a character for \"Roman Numeral One\", 'Ⅰ', that's separate "
"from the uppercase letter 'I'.  They'll usually look the same, but these are "
"two different characters that have different meanings."
msgstr ""
"**Символ** - це найменша можлива складова тексту. \"A\", \"B\", \"C\" тощо — "
"це різні символи. Так само \"È\" і \"Í\". Символи відрізняються залежно від "
"мови чи контексту, про який ви говорите. Наприклад, для \"римської цифри "
"один\" є символ \"Ⅰ\", який стоїть окремо від великої літери \"I\". Зазвичай "
"вони виглядають однаково, але це два різні символи, які мають різні значення."

#: ../../howto/unicode.rst:42
msgid ""
"The Unicode standard describes how characters are represented by **code "
"points**.  A code point value is an integer in the range 0 to 0x10FFFF "
"(about 1.1 million values, the `actual number assigned <https://www.unicode."
"org/versions/latest/#Summary>`_ is less than that). In the standard and in "
"this document, a code point is written using the notation ``U+265E`` to mean "
"the character with value ``0x265e`` (9,822 in decimal)."
msgstr ""
"Стандарт Unicode описує, як символи представлені **кодовими точками**. "
"Значення кодової точки є цілим числом у діапазоні від 0 до 0x10FFFF "
"(приблизно 1,1 мільйона значень, `фактичний номер, призначений <https://www."
"unicode.org/versions/latest/#Summary>`_ менше цього). У стандарті та в цьому "
"документі кодова точка записується з використанням позначення ``U+265E``, "
"щоб означати символ зі значенням ``0x265e`` (9822 у десятковому)."

#: ../../howto/unicode.rst:50
msgid ""
"The Unicode standard contains a lot of tables listing characters and their "
"corresponding code points:"
msgstr ""
"O padrão Unicode contém várias tabelas listando caracteres e seus pontos de "
"código:"

#: ../../howto/unicode.rst:71
msgid ""
"Strictly, these definitions imply that it's meaningless to say 'this is "
"character ``U+265E``'.  ``U+265E`` is a code point, which represents some "
"particular character; in this case, it represents the character 'BLACK CHESS "
"KNIGHT', '♞'.  In informal contexts, this distinction between code points "
"and characters will sometimes be forgotten."
msgstr ""
"Власне, ці визначення означають, що немає сенсу говорити \"це символ "
"``U+265E``\". ``U+265E`` - це кодова точка, яка представляє певний символ; у "
"цьому випадку він представляє персонаж \"ЧОРНИЙ ШАХОВИЙ ЛИКАР\", \"♞\". У "
"неофіційному контексті ця відмінність між кодовими точками та символами "
"іноді забувається."

#: ../../howto/unicode.rst:78
msgid ""
"A character is represented on a screen or on paper by a set of graphical "
"elements that's called a **glyph**.  The glyph for an uppercase A, for "
"example, is two diagonal strokes and a horizontal stroke, though the exact "
"details will depend on the font being used.  Most Python code doesn't need "
"to worry about glyphs; figuring out the correct glyph to display is "
"generally the job of a GUI toolkit or a terminal's font renderer."
msgstr ""
"Um caractere é representado na tela ou no papel como um conjunto de "
"elementos gráficos que é chamado de **glifo**. O glifo para o A maiúsculo, "
"por exemplo, são dois traços diagonais e um traço horizontal, embora os "
"detalhes exatos dependem da fonte utilizada. Na maior parte do código Python "
"não é preciso se preocupar com glifos; descobrir qual o glifo correto a ser "
"mostrado é normalmente parte do trabalho da ferramenta GUI ou do responsável "
"pela renderização de fontes no terminal."

#: ../../howto/unicode.rst:87
msgid "Encodings"
msgstr "Codificações"

#: ../../howto/unicode.rst:89
msgid ""
"To summarize the previous section: a Unicode string is a sequence of code "
"points, which are numbers from 0 through ``0x10FFFF`` (1,114,111 decimal).  "
"This sequence of code points needs to be represented in memory as a set of "
"**code units**, and **code units** are then mapped to 8-bit bytes.  The "
"rules for translating a Unicode string into a sequence of bytes are called a "
"**character encoding**, or just an **encoding**."
msgstr ""
"Підсумовуючи попередній розділ: рядок Unicode – це послідовність кодових "
"точок, які є числами від 0 до ``0x10FFFF`` (1 114 111 десяткових). Цю "
"послідовність кодових точок потрібно представити в пам’яті як набір "
"**кодових одиниць**, а **кодові одиниці** потім відображаються на 8-бітні "
"байти. Правила перетворення рядка Unicode у послідовність байтів називаються "
"**кодуванням символів** або просто **кодуванням**."

#: ../../howto/unicode.rst:97
msgid ""
"The first encoding you might think of is using 32-bit integers as the code "
"unit, and then using the CPU's representation of 32-bit integers. In this "
"representation, the string \"Python\" might look like this:"
msgstr ""
"Перше кодування, про яке ви можете подумати, це використання 32-розрядних "
"цілих чисел як одиниці коду, а потім використання представлення ЦП 32-"
"розрядних цілих чисел. У цьому представленні рядок \"Python\" може виглядати "
"так:"

#: ../../howto/unicode.rst:107
msgid ""
"This representation is straightforward but using it presents a number of "
"problems."
msgstr "Esta representação é direta, mas usá-la gera uma série de problemas."

#: ../../howto/unicode.rst:110
msgid "It's not portable; different processors order the bytes differently."
msgstr ""
"Ela não é portátil; diferentes processadores ordenam os bytes de forma "
"diferente."

#: ../../howto/unicode.rst:112
msgid ""
"It's very wasteful of space.  In most texts, the majority of the code points "
"are less than 127, or less than 255, so a lot of space is occupied by "
"``0x00`` bytes.  The above string takes 24 bytes compared to the 6 bytes "
"needed for an ASCII representation.  Increased RAM usage doesn't matter too "
"much (desktop computers have gigabytes of RAM, and strings aren't usually "
"that large), but expanding our usage of disk and network bandwidth by a "
"factor of 4 is intolerable."
msgstr ""
"Ela gera desperdício de espaço. Na maior parte dos textos, a maioria dos "
"pontos de código são menores que 127 ou menores que 255, então muito do "
"espaço é ocupado por bytes ``0x00`` . A string acima necessita 24 bytes "
"comparado com os 6 bytes necessários em uma representação ASCII. O aumento "
"de uso da memória RAM normalmente não importa tanto (computadores desktop "
"possuem gigabytes de RAM e strings normalmente não são tão grandes), mas "
"expandir o uso de disco ou de banda por um fator de 4 é inaceitável."

#: ../../howto/unicode.rst:120
msgid ""
"It's not compatible with existing C functions such as ``strlen()``, so a new "
"family of wide string functions would need to be used."
msgstr ""
"Ela não é compatível com as funções de C existentes, como ``strlen()``, "
"então uma série de novas funções de string serão necessárias."

#: ../../howto/unicode.rst:123
msgid ""
"Therefore this encoding isn't used very much, and people instead choose "
"other encodings that are more efficient and convenient, such as UTF-8."
msgstr ""
"Тому це кодування використовується не дуже часто, і люди натомість обирають "
"інші кодування, які є більш ефективними та зручними, наприклад UTF-8."

#: ../../howto/unicode.rst:126
msgid ""
"UTF-8 is one of the most commonly used encodings, and Python often defaults "
"to using it.  UTF stands for \"Unicode Transformation Format\", and the '8' "
"means that 8-bit values are used in the encoding.  (There are also UTF-16 "
"and UTF-32 encodings, but they are less frequently used than UTF-8.)  UTF-8 "
"uses the following rules:"
msgstr ""
"UTF-8 є одним із найпоширеніших кодувань, і Python часто використовує його "
"за замовчуванням. UTF означає \"формат перетворення Юнікоду\", а \"8\" "
"означає, що в кодуванні використовуються 8-бітні значення. (Існують також "
"кодування UTF-16 і UTF-32, але вони використовуються рідше, ніж UTF-8.) "
"UTF-8 використовує такі правила:"

#: ../../howto/unicode.rst:132
msgid ""
"If the code point is < 128, it's represented by the corresponding byte value."
msgstr ""
"Якщо кодова точка < 128, вона представлена відповідним значенням байта."

#: ../../howto/unicode.rst:133
msgid ""
"If the code point is >= 128, it's turned into a sequence of two, three, or "
"four bytes, where each byte of the sequence is between 128 and 255."
msgstr ""
"Якщо кодова точка >= 128, вона перетворюється на послідовність з двох, трьох "
"або чотирьох байтів, де кожен байт послідовності знаходиться між 128 і 255."

#: ../../howto/unicode.rst:136
msgid "UTF-8 has several convenient properties:"
msgstr "UTF-8 tem muitas propriedades convenientes:"

#: ../../howto/unicode.rst:138
msgid "It can handle any Unicode code point."
msgstr "Ela pode lidar com qualquer ponto de código Unicode."

#: ../../howto/unicode.rst:139
msgid ""
"A Unicode string is turned into a sequence of bytes that contains embedded "
"zero bytes only where they represent the null character (U+0000). This means "
"that UTF-8 strings can be processed by C functions such as ``strcpy()`` and "
"sent through protocols that can't handle zero bytes for anything other than "
"end-of-string markers."
msgstr ""
"Рядок Unicode перетворюється на послідовність байтів, яка містить вбудовані "
"нульові байти лише там, де вони представляють нульовий символ (U+0000). Це "
"означає, що рядки UTF-8 можуть оброблятися такими функціями C, як "
"``strcpy()`` і надсилатися через протоколи, які не можуть обробляти нульові "
"байти для будь-чого, крім маркерів кінця рядка."

#: ../../howto/unicode.rst:144
msgid "A string of ASCII text is also valid UTF-8 text."
msgstr "Uma string de texto ASCII é também um texto UTF-8 válido."

#: ../../howto/unicode.rst:145
msgid ""
"UTF-8 is fairly compact; the majority of commonly used characters can be "
"represented with one or two bytes."
msgstr ""
"UTF-8 є досить компактним; більшість часто використовуваних символів можуть "
"бути представлені одним або двома байтами."

#: ../../howto/unicode.rst:147
msgid ""
"If bytes are corrupted or lost, it's possible to determine the start of the "
"next UTF-8-encoded code point and resynchronize.  It's also unlikely that "
"random 8-bit data will look like valid UTF-8."
msgstr ""
"Якщо байти пошкоджені або втрачені, можна визначити початок наступної "
"кодової точки кодування UTF-8 і повторно синхронізувати. Також малоймовірно, "
"що випадкові 8-бітні дані виглядатимуть як дійсний UTF-8."

#: ../../howto/unicode.rst:150
msgid ""
"UTF-8 is a byte oriented encoding. The encoding specifies that each "
"character is represented by a specific sequence of one or more bytes. This "
"avoids the byte-ordering issues that can occur with integer and word "
"oriented encodings, like UTF-16 and UTF-32, where the sequence of bytes "
"varies depending on the hardware on which the string was encoded."
msgstr ""
"UTF-8 — це байтове кодування. Кодування вказує, що кожен символ "
"представляється певною послідовністю з одного або кількох байтів. Це "
"дозволяє уникнути проблем із упорядкуванням байтів, які можуть виникнути з "
"кодуваннями, орієнтованими на ціле чи слово, наприклад UTF-16 і UTF-32, де "
"послідовність байтів змінюється залежно від апаратного забезпечення, на "
"якому було закодовано рядок."

#: ../../howto/unicode.rst:158 ../../howto/unicode.rst:514
#: ../../howto/unicode.rst:735
msgid "References"
msgstr "Referências"

#: ../../howto/unicode.rst:160
msgid ""
"The `Unicode Consortium site <https://www.unicode.org>`_ has character "
"charts, a glossary, and PDF versions of the Unicode specification.  Be "
"prepared for some difficult reading.  `A chronology <https://www.unicode.org/"
"history/>`_ of the origin and development of Unicode is also available on "
"the site."
msgstr ""
"На сайті `Unicode Consortium <https://www.unicode.org>`_ є таблиці символів, "
"глосарій і PDF-версії специфікації Unicode. Будьте готові до важкого "
"читання. `Хронологія <https://www.unicode.org/history/>`_ походження та "
"розвитку Unicode також доступна на сайті."

#: ../../howto/unicode.rst:165
msgid ""
"On the Computerphile Youtube channel, Tom Scott briefly `discusses the "
"history of Unicode and UTF-8 <https://www.youtube.com/watch?v=MijmeoH9LT4>`_ "
"(9 minutes 36 seconds)."
msgstr ""
"На Youtube-каналі Computerphile Том Скотт коротко `обговорює історію Unicode "
"та UTF-8 <https://www.youtube.com/watch?v=MijmeoH9LT4>`_ (9 хвилин 36 "
"секунд)."

#: ../../howto/unicode.rst:169
msgid ""
"To help understand the standard, Jukka Korpela has written `an introductory "
"guide <https://jkorpela.fi/unicode/guide.html>`_ to reading the Unicode "
"character tables."
msgstr ""
"Чтобы помочь понять стандарт, Юкка Корпела написал `вводное руководство "
"<https://jkorpela.fi/unicode/guide.html>`_ по чтению таблиц символов Юникода."

#: ../../howto/unicode.rst:173
msgid ""
"Another `good introductory article <https://www.joelonsoftware."
"com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-"
"positively-must-know-about-unicode-and-character-sets-no-excuses/>`_ was "
"written by Joel Spolsky. If this introduction didn't make things clear to "
"you, you should try reading this alternate article before continuing."
msgstr ""
"Ще одну `хорошу вступну статтю <https://www.joelonsoftware.com/2003/10/08/"
"the-absolute-minimum-every-software-developer-absolutely-positively-must-"
"know-about-unicode-and-character-sets-no-excuses/>`_ написав Джоел Спольскі. "
"Якщо цей вступ не прояснив вам щось, спробуйте прочитати цю альтернативну "
"статтю, перш ніж продовжити."

#: ../../howto/unicode.rst:178
msgid ""
"Wikipedia entries are often helpful; see the entries for \"`character "
"encoding <https://en.wikipedia.org/wiki/Character_encoding>`_\" and `UTF-8 "
"<https://en.wikipedia.org/wiki/UTF-8>`_, for example."
msgstr ""
"Записи у Вікіпедії часто є корисними; дивіться, наприклад, записи для "
"\"`кодування символів <https://en.wikipedia.org/wiki/Character_encoding>`_\" "
"і `UTF-8 <https://en.wikipedia.org/wiki/UTF-8>`_."

#: ../../howto/unicode.rst:184
msgid "Python's Unicode Support"
msgstr "Suporte a Unicode no Python"

#: ../../howto/unicode.rst:186
msgid ""
"Now that you've learned the rudiments of Unicode, we can look at Python's "
"Unicode features."
msgstr ""
"Тепер, коли ви вивчили основи Юнікоду, ми можемо розглянути особливості "
"Юнікоду Python."

#: ../../howto/unicode.rst:190
msgid "The String Type"
msgstr "O Tipo String"

#: ../../howto/unicode.rst:192
msgid ""
"Since Python 3.0, the language's :class:`str` type contains Unicode "
"characters, meaning any string created using ``\"unicode rocks!\"``, "
"``'unicode rocks!'``, or the triple-quoted string syntax is stored as "
"Unicode."
msgstr ""
"Починаючи з Python 3.0, тип :class:`str` мови містить символи Unicode, тобто "
"будь-який рядок, створений за допомогою ``\"unicode rocks!\"``, ``'unicode "
"rocks!'`` або синтаксис рядка в потрійних лапках зберігається як Unicode."

#: ../../howto/unicode.rst:196
msgid ""
"The default encoding for Python source code is UTF-8, so you can simply "
"include a Unicode character in a string literal::"
msgstr ""
"Кодуванням за замовчуванням для вихідного коду Python є UTF-8, тому ви "
"можете просто включити символ Юнікоду в рядковий літерал::"

#: ../../howto/unicode.rst:206
msgid ""
"Side note: Python 3 also supports using Unicode characters in identifiers::"
msgstr ""
"Примітка: Python 3 також підтримує використання символів Unicode в "
"ідентифікаторах:"

#: ../../howto/unicode.rst:212
msgid ""
"If you can't enter a particular character in your editor or want to keep the "
"source code ASCII-only for some reason, you can also use escape sequences in "
"string literals. (Depending on your system, you may see the actual capital-"
"delta glyph instead of a \\u escape.) ::"
msgstr ""
"Якщо ви не можете ввести певний символ у своєму редакторі або з якоїсь "
"причини хочете зберегти вихідний код лише ASCII, ви також можете використати "
"керуючі послідовності в рядкових літералах. (Залежно від вашої системи, ви "
"можете побачити справжній гліф великої дельти замість символу \\u.) ::"

#: ../../howto/unicode.rst:224
msgid ""
"In addition, one can create a string using the :func:`~bytes.decode` method "
"of :class:`bytes`.  This method takes an *encoding* argument, such as "
"``UTF-8``, and optionally an *errors* argument."
msgstr ""
"Крім того, можна створити рядок за допомогою методу :func:`~bytes.decode` :"
"class:`bytes`. Цей метод приймає аргумент *кодування*, такий як ``UTF-8``, і "
"необов’язково аргумент *помилки*."

#: ../../howto/unicode.rst:228
msgid ""
"The *errors* argument specifies the response when the input string can't be "
"converted according to the encoding's rules.  Legal values for this argument "
"are ``'strict'`` (raise a :exc:`UnicodeDecodeError` exception), "
"``'replace'`` (use ``U+FFFD``, ``REPLACEMENT CHARACTER``), ``'ignore'`` "
"(just leave the character out of the Unicode result), or "
"``'backslashreplace'`` (inserts a ``\\xNN`` escape sequence). The following "
"examples show the differences::"
msgstr ""
"Аргумент *errors* визначає відповідь, коли вхідний рядок не можна "
"перетворити відповідно до правил кодування. Допустимі значення для цього "
"аргументу: ``'strict'`` (викликає виняток :exc:`UnicodeDecodeError`), "
"``'replace`` (використовуйте ``U+FFFD``, ``REPLACEMENT CHARACTER``), "
"``'ignore'`` (просто залиште символ поза результатом Юнікоду) або "
"``'backslashreplace'`` (вставляє керуючу послідовність ``\\xNN``). Наступні "
"приклади показують відмінності:"

#: ../../howto/unicode.rst:248
msgid ""
"Encodings are specified as strings containing the encoding's name.  Python "
"comes with roughly 100 different encodings; see the Python Library Reference "
"at :ref:`standard-encodings` for a list.  Some encodings have multiple "
"names; for example, ``'latin-1'``, ``'iso_8859_1'`` and ``'8859``' are all "
"synonyms for the same encoding."
msgstr ""
"Кодування вказуються як рядки, що містять назву кодування. Python "
"поставляється з приблизно 100 різними кодуваннями; перегляньте список у "
"Довіднику з бібліотеки Python за адресою :ref:`standard-encodings`. Деякі "
"кодування мають кілька імен; наприклад, \"latin-1\", \"iso_8859_1\" і "
"\"8859\" є синонімами одного кодування."

#: ../../howto/unicode.rst:254
msgid ""
"One-character Unicode strings can also be created with the :func:`chr` built-"
"in function, which takes integers and returns a Unicode string of length 1 "
"that contains the corresponding code point.  The reverse operation is the "
"built-in :func:`ord` function that takes a one-character Unicode string and "
"returns the code point value::"
msgstr ""
"Односимвольні рядки Unicode також можна створити за допомогою вбудованої "
"функції :func:`chr`, яка приймає цілі числа та повертає рядок Unicode "
"довжиною 1, який містить відповідну кодову точку. Зворотною операцією є "
"вбудована функція :func:`ord`, яка приймає односимвольний рядок Юнікод і "
"повертає значення кодової точки::"

#: ../../howto/unicode.rst:266
msgid "Converting to Bytes"
msgstr "Convertendo para Bytes"

#: ../../howto/unicode.rst:268
msgid ""
"The opposite method of :meth:`bytes.decode` is :meth:`str.encode`, which "
"returns a :class:`bytes` representation of the Unicode string, encoded in "
"the requested *encoding*."
msgstr ""
"Протилежним методом :meth:`bytes.decode` є :meth:`str.encode`, який "
"повертає :class:`bytes` представлення рядка Юнікод, закодованого в "
"потрібному *кодуванні*."

#: ../../howto/unicode.rst:272
msgid ""
"The *errors* parameter is the same as the parameter of the :meth:`~bytes."
"decode` method but supports a few more possible handlers. As well as "
"``'strict'``, ``'ignore'``, and ``'replace'`` (which in this case inserts a "
"question mark instead of the unencodable character), there is also "
"``'xmlcharrefreplace'`` (inserts an XML character reference), "
"``backslashreplace`` (inserts a ``\\uNNNN`` escape sequence) and "
"``namereplace`` (inserts a ``\\N{...}`` escape sequence)."
msgstr ""
"Параметр *errors* такий самий, як і параметр методу :meth:`~bytes.decode`, "
"але підтримує кілька інших можливих обробників. Крім ``'strict'``, "
"``'ignore'`` і ``'replace'`` (який у цьому випадку вставляє знак питання "
"замість некодованого символу), є також ``'xmlcharrefreplace \"`` (вставляє "
"посилання на символ XML), ``backslashreplace`` (вставляє керуючу "
"послідовність ``\\uNNNN``) і ``namereplace`` (вставляє керуючу послідовність "
"``\\N{...}`` )."

#: ../../howto/unicode.rst:280
msgid "The following example shows the different results::"
msgstr "У наступному прикладі показано різні результати:"

#: ../../howto/unicode.rst:301
msgid ""
"The low-level routines for registering and accessing the available encodings "
"are found in the :mod:`codecs` module.  Implementing new encodings also "
"requires understanding the :mod:`codecs` module. However, the encoding and "
"decoding functions returned by this module are usually more low-level than "
"is comfortable, and writing new encodings is a specialized task, so the "
"module won't be covered in this HOWTO."
msgstr ""
"Процедури низького рівня для реєстрації та доступу до доступних кодувань "
"можна знайти в модулі :mod:`codecs`. Реалізація нових кодувань також вимагає "
"розуміння модуля :mod:`codecs`. Однак функції кодування та декодування, які "
"повертає цей модуль, зазвичай нижчі, ніж зручно, а написання нових кодувань "
"є спеціальним завданням, тому цей модуль не розглядатиметься в цьому HOWTO."

#: ../../howto/unicode.rst:310
msgid "Unicode Literals in Python Source Code"
msgstr "Літерали Unicode у вихідному коді Python"

#: ../../howto/unicode.rst:312
msgid ""
"In Python source code, specific Unicode code points can be written using the "
"``\\u`` escape sequence, which is followed by four hex digits giving the "
"code point.  The ``\\U`` escape sequence is similar, but expects eight hex "
"digits, not four::"
msgstr ""
"У вихідному коді Python певні кодові точки Unicode можна записати за "
"допомогою escape-послідовності ``\\u``, за якою йдуть чотири шістнадцяткові "
"цифри, що вказують кодову точку. Екран-послідовність ``\\U`` схожа, але "
"передбачає вісім шістнадцяткових цифр, а не чотири:"

#: ../../howto/unicode.rst:324
msgid ""
"Using escape sequences for code points greater than 127 is fine in small "
"doses, but becomes an annoyance if you're using many accented characters, as "
"you would in a program with messages in French or some other accent-using "
"language.  You can also assemble strings using the :func:`chr` built-in "
"function, but this is even more tedious."
msgstr ""
"Використання керуючих послідовностей для кодових точок більше 127 добре в "
"невеликих дозах, але стає неприємним, якщо ви використовуєте багато символів "
"з акцентами, як це було б у програмі з повідомленнями французькою або іншою "
"мовою, що використовує акценти. Ви також можете збирати рядки за допомогою "
"вбудованої функції :func:`chr`, але це ще більше стомлює."

#: ../../howto/unicode.rst:330
msgid ""
"Ideally, you'd want to be able to write literals in your language's natural "
"encoding.  You could then edit Python source code with your favorite editor "
"which would display the accented characters naturally, and have the right "
"characters used at runtime."
msgstr ""
"В ідеалі ви хотіли б мати можливість писати літерали в природному кодуванні "
"вашої мови. Потім ви можете відредагувати вихідний код Python за допомогою "
"свого улюбленого редактора, який природним чином відображатиме символи з "
"акцентами та використовуватиме правильні символи під час виконання."

#: ../../howto/unicode.rst:335
msgid ""
"Python supports writing source code in UTF-8 by default, but you can use "
"almost any encoding if you declare the encoding being used.  This is done by "
"including a special comment as either the first or second line of the source "
"file::"
msgstr ""
"Python за замовчуванням підтримує написання вихідного коду в UTF-8, але ви "
"можете використовувати майже будь-яке кодування, якщо ви оголосите "
"кодування, яке використовується. Це робиться шляхом додавання спеціального "
"коментаря як першого або другого рядка вихідного файлу::"

#: ../../howto/unicode.rst:345
msgid ""
"The syntax is inspired by Emacs's notation for specifying variables local to "
"a file.  Emacs supports many different variables, but Python only supports "
"'coding'.  The ``-*-`` symbols indicate to Emacs that the comment is "
"special; they have no significance to Python but are a convention.  Python "
"looks for ``coding: name`` or ``coding=name`` in the comment."
msgstr ""
"Синтаксис натхненний нотацією Emacs для визначення змінних, локальних для "
"файлу. Emacs підтримує багато різних змінних, але Python підтримує лише "
"\"кодування\". Символи ``-*-`` вказують Emacs, що коментар є особливим; вони "
"не мають значення для Python, але є умовністю. Python шукає ``coding: name`` "
"або ``coding=name`` у коментарі."

#: ../../howto/unicode.rst:351
msgid ""
"If you don't include such a comment, the default encoding used will be UTF-8 "
"as already mentioned.  See also :pep:`263` for more information."
msgstr ""
"Якщо ви не включите такий коментар, використовуваним кодуванням за "
"умовчанням буде UTF-8, як уже згадувалося. Дивіться також :pep:`263` для "
"отримання додаткової інформації."

#: ../../howto/unicode.rst:356
msgid "Unicode Properties"
msgstr "Propriedades Unicode"

#: ../../howto/unicode.rst:358
msgid ""
"The Unicode specification includes a database of information about code "
"points.  For each defined code point, the information includes the "
"character's name, its category, the numeric value if applicable (for "
"characters representing numeric concepts such as the Roman numerals, "
"fractions such as one-third and four-fifths, etc.).  There are also display-"
"related properties, such as how to use the code point in bidirectional text."
msgstr ""
"Специфікація Unicode включає базу даних інформації про кодові точки. Для "
"кожної визначеної кодової точки інформація включає ім’я символу, його "
"категорію, числове значення, якщо це застосовно (для символів, що "
"представляють числові поняття, такі як римські цифри, дроби, такі як одна "
"третина та чотири п’ятих тощо). Існують також властивості, пов’язані з "
"відображенням, наприклад, як використовувати кодову точку в двонаправленому "
"тексті."

#: ../../howto/unicode.rst:366
msgid ""
"The following program displays some information about several characters, "
"and prints the numeric value of one particular character::"
msgstr ""
"O programa a seguir exibe alguma informação sobre diversos caracteres e "
"imprime o valor numérico de um caractere em particular::"

#: ../../howto/unicode.rst:380
msgid "When run, this prints:"
msgstr "Quando executado, isso imprime:"

#: ../../howto/unicode.rst:391
msgid ""
"The category codes are abbreviations describing the nature of the character. "
"These are grouped into categories such as \"Letter\", \"Number\", "
"\"Punctuation\", or \"Symbol\", which in turn are broken up into "
"subcategories.  To take the codes from the above output, ``'Ll'`` means "
"'Letter, lowercase', ``'No'`` means \"Number, other\", ``'Mn'`` is \"Mark, "
"nonspacing\", and ``'So'`` is \"Symbol, other\".  See `the General Category "
"Values section of the Unicode Character Database documentation <https://www."
"unicode.org/reports/tr44/#General_Category_Values>`_ for a list of category "
"codes."
msgstr ""
"Коди категорій — це абревіатури, що описують характер персонажа. Вони "
"згруповані в такі категорії, як \"Літера\", \"Цифра\", \"Пунктуація\" або "
"\"Символ\", які, у свою чергу, розбиті на підкатегорії. Щоб взяти коди з "
"наведеного вище виводу, ``'Ll'`` означає 'Літера, нижній регістр', ``'Ні'`` "
"означає \"Число, інше\", ``'Mn'`` це \"Позначка, без пробілів\" , а ``'So'`` "
"це \"Символ, інше\". Перегляньте `розділ Загальні значення категорій "
"документації бази даних символів Unicode <https://www.unicode.org/reports/"
"tr44/#General_Category_Values>`_, щоб отримати список кодів категорій."

#: ../../howto/unicode.rst:402
msgid "Comparing Strings"
msgstr "Comparando Strings"

#: ../../howto/unicode.rst:404
msgid ""
"Unicode adds some complication to comparing strings, because the same set of "
"characters can be represented by different sequences of code points.  For "
"example, a letter like 'ê' can be represented as a single code point U+00EA, "
"or as U+0065 U+0302, which is the code point for 'e' followed by a code "
"point for 'COMBINING CIRCUMFLEX ACCENT'.  These will produce the same output "
"when printed, but one is a string of length 1 and the other is of length 2."
msgstr ""
"Юнікод ускладнює порівняння рядків, тому що той самий набір символів може "
"бути представлений різними послідовностями кодових точок. Наприклад, така "
"літера, як \"ê\", може бути представлена як одна кодова точка U+00EA або як "
"U+0065 U+0302, яка є кодовою точкою для \"e\", за якою йде кодова точка для "
"\"COMBINING CIRCUMFLEX ACCENT\". . Вони створюватимуть той самий результат "
"під час друку, але один буде рядком довжини 1, а інший – довжиною 2."

#: ../../howto/unicode.rst:412
msgid ""
"One tool for a case-insensitive comparison is the :meth:`~str.casefold` "
"string method that converts a string to a case-insensitive form following an "
"algorithm described by the Unicode Standard.  This algorithm has special "
"handling for characters such as the German letter 'ß' (code point U+00DF), "
"which becomes the pair of lowercase letters 'ss'."
msgstr ""
"Одним із інструментів для порівняння без урахування регістру є метод рядка :"
"meth:`~str.casefold`, який перетворює рядок у форму без урахування регістру "
"відповідно до алгоритму, описаного стандартом Unicode. Цей алгоритм має "
"особливу обробку таких символів, як німецька літера \"ß\" (кодовий знак "
"U+00DF), яка стає парою малих літер \"ss\"."

#: ../../howto/unicode.rst:425
msgid ""
"A second tool is the :mod:`unicodedata` module's :func:`~unicodedata."
"normalize` function that converts strings to one of several normal forms, "
"where letters followed by a combining character are replaced with single "
"characters.  :func:`~unicodedata.normalize` can be used to perform string "
"comparisons that won't falsely report inequality if two strings use "
"combining characters differently:"
msgstr ""
"Второй инструмент — это функция :func:`~unicodedata.normalize` модуля :mod:"
"`unicodedata`, которая преобразует строки в одну из нескольких нормальных "
"форм, где буквы, за которыми следует объединяющий символ, заменяются "
"одиночными символами. :func:`~unicodedata.normalize` можно использовать для "
"сравнения строк, которое не будет выдавать ложное сообщение о неравенстве, "
"если две строки по-разному используют объединение символов:"

#: ../../howto/unicode.rst:448
msgid "When run, this outputs:"
msgstr "Під час запуску це виводить:"

#: ../../howto/unicode.rst:457
msgid ""
"The first argument to the :func:`~unicodedata.normalize` function is a "
"string giving the desired normalization form, which can be one of 'NFC', "
"'NFKC', 'NFD', and 'NFKD'."
msgstr ""
"Першим аргументом функції :func:`~unicodedata.normalize` є рядок, що надає "
"бажану форму нормалізації, яка може бути однією з \"NFC\", \"NFKC\", \"NFD\" "
"і \"NFKD\"."

#: ../../howto/unicode.rst:461
msgid "The Unicode Standard also specifies how to do caseless comparisons::"
msgstr "Стандарт Unicode також визначає, як робити порівняння без регістру:"

#: ../../howto/unicode.rst:477
msgid ""
"This will print ``True``.  (Why is :func:`!NFD` invoked twice?  Because "
"there are a few characters that make :meth:`~str.casefold` return a non-"
"normalized string, so the result needs to be normalized again. See section "
"3.13 of the Unicode Standard for a discussion and an example.)"
msgstr ""
"Это напечатает ``True``. (Почему :func:`!NFD` вызывается дважды? Потому что "
"есть несколько символов, которые заставляют :meth:`~str.casefold` возвращать "
"ненормализованную строку, поэтому результат необходимо нормализовать снова. "
"См. раздел 3.13 стандарт Unicode для обсуждения и примера.)"

#: ../../howto/unicode.rst:484
msgid "Unicode Regular Expressions"
msgstr "Expressões Regulares Unicode"

#: ../../howto/unicode.rst:486
msgid ""
"The regular expressions supported by the :mod:`re` module can be provided "
"either as bytes or strings.  Some of the special character sequences such as "
"``\\d`` and ``\\w`` have different meanings depending on whether the pattern "
"is supplied as bytes or a string.  For example, ``\\d`` will match the "
"characters ``[0-9]`` in bytes but in strings will match any character that's "
"in the ``'Nd'`` category."
msgstr ""
"Регулярні вирази, які підтримує модуль :mod:`re`, можуть бути надані у "
"вигляді байтів або рядків. Деякі послідовності спеціальних символів, "
"наприклад ``\\d`` і ``\\w``, мають різні значення залежно від того, чи "
"надається шаблон у вигляді байтів чи рядка. Наприклад, ``\\d`` відповідатиме "
"символам ``[0-9]`` у байтах, але в рядках відповідатиме будь-якому символу "
"категорії ``'Nd'``."

#: ../../howto/unicode.rst:493
msgid ""
"The string in this example has the number 57 written in both Thai and Arabic "
"numerals::"
msgstr ""
"Рядок у цьому прикладі містить число 57, написане тайськими та арабськими "
"цифрами:"

#: ../../howto/unicode.rst:503
msgid ""
"When executed, ``\\d+`` will match the Thai numerals and print them out.  If "
"you supply the :const:`re.ASCII` flag to :func:`~re.compile`, ``\\d+`` will "
"match the substring \"57\" instead."
msgstr ""
"Після виконання ``\\d+`` відповідатиме тайським цифрам і виводитиме їх. Якщо "
"ви додасте прапорець :const:`re.ASCII` до :func:`~re.compile`, ``\\d+`` "
"натомість відповідатиме підрядку \"57\"."

#: ../../howto/unicode.rst:507
msgid ""
"Similarly, ``\\w`` matches a wide variety of Unicode characters but only "
"``[a-zA-Z0-9_]`` in bytes or if :const:`re.ASCII` is supplied, and ``\\s`` "
"will match either Unicode whitespace characters or ``[ \\t\\n\\r\\f\\v]``."
msgstr ""
"Аналогічно, ``\\w`` відповідає широкому спектру символів Юнікоду, але лише "
"``[a-zA-Z0-9_]`` в байтах або якщо надано :const:`re.ASCII`, і ``\\s`` "
"відповідатиме або пробілам Unicode, або ``[ \\t\\n\\r\\f\\v]``."

#: ../../howto/unicode.rst:518
msgid "Some good alternative discussions of Python's Unicode support are:"
msgstr "Деякі хороші альтернативні обговорення підтримки Unicode в Python:"

#: ../../howto/unicode.rst:520
msgid ""
"`Processing Text Files in Python 3 <https://python-notes.curiousefficiency."
"org/en/latest/python3/text_file_processing.html>`_, by Nick Coghlan."
msgstr ""
"`Обработка текстовых файлов в Python 3 <https://python-notes."
"curiousefficiency.org/en/latest/python3/text_file_processing.html>`_, Ник "
"Коглан."

#: ../../howto/unicode.rst:521
msgid ""
"`Pragmatic Unicode <https://nedbatchelder.com/text/unipain.html>`_, a PyCon "
"2012 presentation by Ned Batchelder."
msgstr ""
"`Pragmatic Unicode <https://nedbatchelder.com/text/unipain.html>`_, "
"презентація PyCon 2012 Неда Батчелдера."

#: ../../howto/unicode.rst:523
msgid ""
"The :class:`str` type is described in the Python library reference at :ref:"
"`textseq`."
msgstr ""
"Тип :class:`str` описано в довідці про бібліотеку Python за адресою :ref:"
"`textseq`."

#: ../../howto/unicode.rst:526
msgid "The documentation for the :mod:`unicodedata` module."
msgstr "Документація для модуля :mod:`unicodedata`."

#: ../../howto/unicode.rst:528
msgid "The documentation for the :mod:`codecs` module."
msgstr "Документація для модуля :mod:`codecs`."

#: ../../howto/unicode.rst:530
msgid ""
"Marc-André Lemburg gave `a presentation titled \"Python and Unicode\" (PDF "
"slides) <https://downloads.egenix.com/python/Unicode-EPC2002-Talk.pdf>`_ at "
"EuroPython 2002.  The slides are an excellent overview of the design of "
"Python 2's Unicode features (where the Unicode string type is called "
"``unicode`` and literals start with ``u``)."
msgstr ""
"Марк-Андре Лембург провів `презентацію під назвою \"Python і Юнікод\" (PDF-"
"слайди) <https://downloads.egenix.com/python/Unicode-EPC2002-Talk.pdf>`_ на "
"EuroPython 2002. Слайди є чудовим оглядом дизайну функцій Юнікоду Python 2 "
"(де тип рядка Юнікод називається ``unicode`` і літерали починаються з ``u``)."

#: ../../howto/unicode.rst:538
msgid "Reading and Writing Unicode Data"
msgstr "Читання та запис даних Unicode"

#: ../../howto/unicode.rst:540
msgid ""
"Once you've written some code that works with Unicode data, the next problem "
"is input/output.  How do you get Unicode strings into your program, and how "
"do you convert Unicode into a form suitable for storage or transmission?"
msgstr ""
"Після того, як ви написали код, який працює з даними Unicode, наступною "
"проблемою є введення/виведення. Як отримати рядки Unicode у вашій програмі "
"та як перетворити Unicode у форму, придатну для зберігання чи передачі?"

#: ../../howto/unicode.rst:544
msgid ""
"It's possible that you may not need to do anything depending on your input "
"sources and output destinations; you should check whether the libraries used "
"in your application support Unicode natively.  XML parsers often return "
"Unicode data, for example.  Many relational databases also support Unicode-"
"valued columns and can return Unicode values from an SQL query."
msgstr ""
"Цілком можливо, що вам може не знадобитися нічого робити залежно від ваших "
"джерел введення та призначення виводу; вам слід перевірити, чи бібліотеки, "
"які використовуються у вашій програмі, підтримують Unicode. Синтаксичні "
"аналізатори XML часто повертають, наприклад, дані Unicode. Багато реляційних "
"баз даних також підтримують стовпці зі значеннями Юнікод і можуть повертати "
"значення Юнікод із запиту SQL."

#: ../../howto/unicode.rst:550
msgid ""
"Unicode data is usually converted to a particular encoding before it gets "
"written to disk or sent over a socket.  It's possible to do all the work "
"yourself: open a file, read an 8-bit bytes object from it, and convert the "
"bytes with ``bytes.decode(encoding)``.  However, the manual approach is not "
"recommended."
msgstr ""
"Дані Unicode зазвичай перетворюються в певне кодування перед записом на диск "
"або надсиланням через сокет. Можна виконати всю роботу самостійно: відкрити "
"файл, прочитати з нього 8-бітний об’єкт bytes і перетворити байти за "
"допомогою ``bytes.decode(encoding)``. Однак ручний підхід не рекомендується."

#: ../../howto/unicode.rst:555
msgid ""
"One problem is the multi-byte nature of encodings; one Unicode character can "
"be represented by several bytes.  If you want to read the file in arbitrary-"
"sized chunks (say, 1024 or 4096 bytes), you need to write error-handling "
"code to catch the case where only part of the bytes encoding a single "
"Unicode character are read at the end of a chunk.  One solution would be to "
"read the entire file into memory and then perform the decoding, but that "
"prevents you from working with files that are extremely large; if you need "
"to read a 2 GiB file, you need 2 GiB of RAM. (More, really, since for at "
"least a moment you'd need to have both the encoded string and its Unicode "
"version in memory.)"
msgstr ""
"Однією з проблем є багатобайтова природа кодувань; один символ Unicode може "
"бути представлений кількома байтами. Якщо ви хочете прочитати файл "
"фрагментами довільного розміру (скажімо, 1024 або 4096 байтів), вам потрібно "
"написати код обробки помилок, щоб уловити випадок, коли лише частина байтів, "
"що кодують один символ Unicode, читається в кінці шматок. Одним із рішень "
"було б прочитати весь файл у пам’ять, а потім виконати декодування, але це "
"заважає вам працювати з файлами, які є надзвичайно великими; якщо вам "
"потрібно прочитати файл розміром 2 ГБ, вам знадобиться 2 ГБ оперативної "
"пам’яті. (Насправді більше, оскільки принаймні на мить вам знадобиться мати "
"в пам’яті як закодований рядок, так і його версію Unicode.)"

#: ../../howto/unicode.rst:565
msgid ""
"The solution would be to use the low-level decoding interface to catch the "
"case of partial coding sequences.  The work of implementing this has already "
"been done for you: the built-in :func:`open` function can return a file-like "
"object that assumes the file's contents are in a specified encoding and "
"accepts Unicode parameters for methods such as :meth:`~io.TextIOBase.read` "
"and :meth:`~io.TextIOBase.write`.  This works through :func:`open`\\'s "
"*encoding* and *errors* parameters which are interpreted just like those in :"
"meth:`str.encode` and :meth:`bytes.decode`."
msgstr ""
"Рішення полягало б у використанні інтерфейсу декодування низького рівня для "
"виявлення випадків часткових послідовностей кодування. Роботу над "
"реалізацією цього вже виконано за вас: вбудована функція :func:`open` може "
"повертати файлоподібний об’єкт, який припускає, що вміст файлу знаходиться у "
"вказаному кодуванні та приймає параметри Unicode для таких методів, як :meth:"
"`~io.TextIOBase.read` і :meth:`~io.TextIOBase.write`. Це працює через "
"параметри *encoding* і *errors* :func:`open`\\, які інтерпретуються так "
"само, як ті, що в :meth:`str.encode` і :meth:`bytes.decode`."

#: ../../howto/unicode.rst:574
msgid "Reading Unicode from a file is therefore simple::"
msgstr "Тому читання Unicode з файлу просте:"

#: ../../howto/unicode.rst:580
msgid ""
"It's also possible to open files in update mode, allowing both reading and "
"writing::"
msgstr ""
"Також можна відкривати файли в режимі оновлення, дозволяючи як читання, так "
"і запис:"

#: ../../howto/unicode.rst:588
msgid ""
"The Unicode character ``U+FEFF`` is used as a byte-order mark (BOM), and is "
"often written as the first character of a file in order to assist with "
"autodetection of the file's byte ordering.  Some encodings, such as UTF-16, "
"expect a BOM to be present at the start of a file; when such an encoding is "
"used, the BOM will be automatically written as the first character and will "
"be silently dropped when the file is read.  There are variants of these "
"encodings, such as 'utf-16-le' and 'utf-16-be' for little-endian and big-"
"endian encodings, that specify one particular byte ordering and don't skip "
"the BOM."
msgstr ""
"Символ Unicode ``U+FEFF`` використовується як позначка порядку байтів (BOM) "
"і часто записується як перший символ файлу, щоб допомогти автоматично "
"визначити порядок байтів у файлі. Деякі кодування, такі як UTF-16, очікують "
"наявності BOM на початку файлу; коли використовується таке кодування, "
"специфікація буде автоматично записана як перший символ і буде мовчки "
"відкинута під час читання файлу. Існують варіанти цих кодувань, наприклад "
"\"utf-16-le\" і \"utf-16-be\" для кодувань little-endian і big-endian, які "
"вказують один конкретний порядок байтів і не пропускають BOM."

#: ../../howto/unicode.rst:597
msgid ""
"In some areas, it is also convention to use a \"BOM\" at the start of UTF-8 "
"encoded files; the name is misleading since UTF-8 is not byte-order "
"dependent. The mark simply announces that the file is encoded in UTF-8.  For "
"reading such files, use the 'utf-8-sig' codec to automatically skip the mark "
"if present."
msgstr ""
"У деяких регіонах також прийнято використовувати \"BOM\" на початку файлів у "
"кодуванні UTF-8; назва вводить в оману, оскільки UTF-8 не залежить від "
"порядку байтів. Позначка просто повідомляє, що файл закодовано в UTF-8. Для "
"читання таких файлів використовуйте кодек \"utf-8-sig\", щоб автоматично "
"пропускати позначку, якщо вона є."

#: ../../howto/unicode.rst:604
msgid "Unicode filenames"
msgstr "Nomes de arquivos Unicode"

#: ../../howto/unicode.rst:606
msgid ""
"Most of the operating systems in common use today support filenames that "
"contain arbitrary Unicode characters.  Usually this is implemented by "
"converting the Unicode string into some encoding that varies depending on "
"the system.  Today Python is converging on using UTF-8: Python on MacOS has "
"used UTF-8 for several versions, and Python 3.6 switched to using UTF-8 on "
"Windows as well.  On Unix systems, there will only be a :term:`filesystem "
"encoding <filesystem encoding and error handler>`. if you've set the "
"``LANG`` or ``LC_CTYPE`` environment variables; if you haven't, the default "
"encoding is again UTF-8."
msgstr ""
"Більшість операційних систем, які сьогодні широко використовуються, "
"підтримують імена файлів, які містять довільні символи Unicode. Зазвичай це "
"реалізується шляхом перетворення рядка Unicode у кодування, яке змінюється "
"залежно від системи. Сьогодні Python наближається до використання UTF-8: "
"Python на MacOS використовував UTF-8 для кількох версій, а Python 3.6 також "
"перейшов на використання UTF-8 у Windows. У системах Unix буде лише :term:"
"`кодування файлової системи <filesystem encoding and error handler>`. якщо "
"ви встановили змінні середовища ``LANG`` або ``LC_CTYPE``; якщо ви цього не "
"зробили, стандартним кодуванням знову є UTF-8."

#: ../../howto/unicode.rst:616
msgid ""
"The :func:`sys.getfilesystemencoding` function returns the encoding to use "
"on your current system, in case you want to do the encoding manually, but "
"there's not much reason to bother.  When opening a file for reading or "
"writing, you can usually just provide the Unicode string as the filename, "
"and it will be automatically converted to the right encoding for you::"
msgstr ""
"Функція :func:`sys.getfilesystemencoding` повертає кодування для "
"використання у вашій поточній системі, якщо ви хочете зробити кодування "
"вручну, але немає особливих причин турбуватися. Відкриваючи файл для читання "
"або запису, ви зазвичай можете просто вказати рядок Юнікод як ім’я файлу, і "
"він буде автоматично перетворений у правильне для вас кодування::"

#: ../../howto/unicode.rst:626
msgid ""
"Functions in the :mod:`os` module such as :func:`os.stat` will also accept "
"Unicode filenames."
msgstr ""
"Функції в модулі :mod:`os`, такі як :func:`os.stat`, також прийматимуть "
"імена файлів у кодуванні Unicode."

#: ../../howto/unicode.rst:629
msgid ""
"The :func:`os.listdir` function returns filenames, which raises an issue: "
"should it return the Unicode version of filenames, or should it return bytes "
"containing the encoded versions?  :func:`os.listdir` can do both, depending "
"on whether you provided the directory path as bytes or a Unicode string.  If "
"you pass a Unicode string as the path, filenames will be decoded using the "
"filesystem's encoding and a list of Unicode strings will be returned, while "
"passing a byte path will return the filenames as bytes.  For example, "
"assuming the default :term:`filesystem encoding <filesystem encoding and "
"error handler>` is UTF-8, running the following program::"
msgstr ""
"Функція :func:`os.listdir` повертає імена файлів, що викликає проблему: чи "
"має вона повертати версію імен файлів у кодуванні Unicode, чи має повертати "
"байти, що містять закодовані версії? :func:`os.listdir` може робити і те, і "
"інше, залежно від того, чи вказали ви шлях до каталогу у байтах чи рядку "
"Unicode. Якщо ви передасте рядок Unicode як шлях, назви файлів буде "
"розшифровано з використанням кодування файлової системи, і буде повернено "
"список рядків Unicode, тоді як передача байтового шляху поверне назви файлів "
"як байти. Наприклад, припустивши, що типовим :term:`кодуванням файлової "
"системи <filesystem encoding and error handler>` є UTF-8, запустіть таку "
"програму::"

#: ../../howto/unicode.rst:647
msgid "will produce the following output:"
msgstr "виведе наступний результат:"

#: ../../howto/unicode.rst:655
msgid ""
"The first list contains UTF-8-encoded filenames, and the second list "
"contains the Unicode versions."
msgstr ""
"Перший список містить імена файлів у кодуванні UTF-8, а другий список "
"містить версії Unicode."

#: ../../howto/unicode.rst:658
msgid ""
"Note that on most occasions, you should can just stick with using Unicode "
"with these APIs.  The bytes APIs should only be used on systems where "
"undecodable file names can be present; that's pretty much only Unix systems "
"now."
msgstr ""
"Зверніть увагу, що в більшості випадків ви можете просто використовувати "
"Unicode з цими API. API байтів слід використовувати лише в системах, де "
"можуть бути присутні імена файлів, що не розшифровуються; зараз це майже "
"лише системи Unix."

#: ../../howto/unicode.rst:665
msgid "Tips for Writing Unicode-aware Programs"
msgstr "Поради щодо написання програм, що підтримують Unicode"

#: ../../howto/unicode.rst:667
msgid ""
"This section provides some suggestions on writing software that deals with "
"Unicode."
msgstr ""
"У цьому розділі надано деякі поради щодо написання програмного забезпечення, "
"яке працює з Unicode."

#: ../../howto/unicode.rst:670
msgid "The most important tip is:"
msgstr "A dica mais importante é:"

#: ../../howto/unicode.rst:672
msgid ""
"Software should only work with Unicode strings internally, decoding the "
"input data as soon as possible and encoding the output only at the end."
msgstr ""
"Програмне забезпечення повинно працювати лише з внутрішніми рядками Unicode, "
"декодуючи вхідні дані якнайшвидше та кодуючи вихід лише в кінці."

#: ../../howto/unicode.rst:675
msgid ""
"If you attempt to write processing functions that accept both Unicode and "
"byte strings, you will find your program vulnerable to bugs wherever you "
"combine the two different kinds of strings.  There is no automatic encoding "
"or decoding: if you do e.g. ``str + bytes``, a :exc:`TypeError` will be "
"raised."
msgstr ""
"Якщо ви спробуєте написати функції обробки, які приймають як Юнікод, так і "
"байтові рядки, ви побачите, що ваша програма вразлива до помилок, коли б ви "
"не поєднували два різних типи рядків. Немає автоматичного кодування або "
"декодування: якщо ви робите, напр. ``str + bytes``, буде викликано :exc:"
"`TypeError`."

#: ../../howto/unicode.rst:680
msgid ""
"When using data coming from a web browser or some other untrusted source, a "
"common technique is to check for illegal characters in a string before using "
"the string in a generated command line or storing it in a database.  If "
"you're doing this, be careful to check the decoded string, not the encoded "
"bytes data; some encodings may have interesting properties, such as not "
"being bijective or not being fully ASCII-compatible.  This is especially "
"true if the input data also specifies the encoding, since the attacker can "
"then choose a clever way to hide malicious text in the encoded bytestream."
msgstr ""
"Під час використання даних, що надходять із веб-браузера чи іншого "
"ненадійного джерела, поширеною технікою є перевірка рядка на недозволені "
"символи перед використанням рядка в створеному командному рядку або "
"збереженням його в базі даних. Якщо ви робите це, будьте обережні, щоб "
"перевірити декодований рядок, а не закодовані дані байтів; деякі кодування "
"можуть мати цікаві властивості, такі як небіективність або неповна ASCII-"
"сумісність. Це особливо вірно, якщо вхідні дані також визначають кодування, "
"оскільки зловмисник може вибрати розумний спосіб приховати шкідливий текст у "
"закодованому байтовому потоці."

#: ../../howto/unicode.rst:691
msgid "Converting Between File Encodings"
msgstr "Перетворення між кодуваннями файлів"

#: ../../howto/unicode.rst:693
msgid ""
"The :class:`~codecs.StreamRecoder` class can transparently convert between "
"encodings, taking a stream that returns data in encoding #1 and behaving "
"like a stream returning data in encoding #2."
msgstr ""
"Клас :class:`~codecs.StreamRecoder` може прозоро конвертувати між "
"кодуваннями, приймаючи потік, який повертає дані в кодуванні №1, і "
"поводитися як потік, який повертає дані в кодуванні №2."

#: ../../howto/unicode.rst:697
msgid ""
"For example, if you have an input file *f* that's in Latin-1, you can wrap "
"it with a :class:`~codecs.StreamRecoder` to return bytes encoded in UTF-8::"
msgstr ""
"Наприклад, якщо у вас є вхідний файл *f*, написаний мовою Latin-1, ви можете "
"обернути його :class:`~codecs.StreamRecoder`, щоб повернути байти, "
"закодовані в UTF-8::"

#: ../../howto/unicode.rst:711
msgid "Files in an Unknown Encoding"
msgstr "Файли в невідомому кодуванні"

#: ../../howto/unicode.rst:713
msgid ""
"What can you do if you need to make a change to a file, but don't know the "
"file's encoding?  If you know the encoding is ASCII-compatible and only want "
"to examine or modify the ASCII parts, you can open the file with the "
"``surrogateescape`` error handler::"
msgstr ""
"Що робити, якщо вам потрібно внести зміни у файл, але ви не знаєте кодування "
"файлу? Якщо ви знаєте, що кодування сумісне з ASCII, і хочете перевірити або "
"змінити лише частини ASCII, ви можете відкрити файл за допомогою обробника "
"помилок ``surrogateescape``::"

#: ../../howto/unicode.rst:727
msgid ""
"The ``surrogateescape`` error handler will decode any non-ASCII bytes as "
"code points in a special range running from U+DC80 to U+DCFF.  These code "
"points will then turn back into the same bytes when the ``surrogateescape`` "
"error handler is used to encode the data and write it back out."
msgstr ""
"Обробник помилок ``surrogateescape`` декодує будь-які байти, відмінні від "
"ASCII, як кодові точки в спеціальному діапазоні від U+DC80 до U+DCFF. Потім "
"ці кодові точки знову перетворюються на ті самі байти, коли обробник помилок "
"``surrogateescape`` використовується для кодування даних і їх зворотного "
"запису."

#: ../../howto/unicode.rst:737
msgid ""
"One section of `Mastering Python 3 Input/Output <https://pyvideo.org/"
"video/289/pycon-2010--mastering-python-3-i-o>`_, a PyCon 2010 talk by David "
"Beazley, discusses text processing and binary data handling."
msgstr ""
"В одном разделе «Освоение ввода/вывода Python 3 <https://pyvideo.org/"
"video/289/pycon-2010--mastering-python-3-io>», доклада Дэвида Бизли на PyCon "
"2010, обсуждается обработка текста. и обработка двоичных данных."

#: ../../howto/unicode.rst:741
msgid ""
"The `PDF slides for Marc-André Lemburg's presentation \"Writing Unicode-"
"aware Applications in Python\" <https://downloads.egenix.com/python/LSM2005-"
"Developing-Unicode-aware-applications-in-Python.pdf>`_ discuss questions of "
"character encodings as well as how to internationalize and localize an "
"application.  These slides cover Python 2.x only."
msgstr ""
"У `PDF-слайдах для презентації Марка-Андре Лембурга \"Написання програм, що "
"підтримують Unicode на Python\" <https://downloads.egenix.com/python/LSM2005-"
"Developing-Unicode-aware-applications-in-Python.pdf>`_ обговорюються питання "
"кодування символів, а також те, як інтернаціоналізувати та локалізувати "
"програму. Ці слайди стосуються лише Python 2.x."

#: ../../howto/unicode.rst:747
msgid ""
"`The Guts of Unicode in Python <https://pyvideo.org/video/1768/the-guts-of-"
"unicode-in-python>`_ is a PyCon 2013 talk by Benjamin Peterson that "
"discusses the internal Unicode representation in Python 3.3."
msgstr ""
"`The Guts of Unicode в Python <https://pyvideo.org/video/1768/the-guts-of-"
"unicode-in-python>`_ — это доклад Бенджамина Петерсона на PyCon 2013, в "
"котором обсуждается внутреннее представление Unicode в Python. 3.3."

#: ../../howto/unicode.rst:754
msgid "Acknowledgements"
msgstr "Reconhecimentos"

#: ../../howto/unicode.rst:756
msgid ""
"The initial draft of this document was written by Andrew Kuchling. It has "
"since been revised further by Alexander Belopolsky, Georg Brandl, Andrew "
"Kuchling, and Ezio Melotti."
msgstr ""
"Початковий проект цього документа був написаний Ендрю Кухлінгом. Відтоді він "
"був додатково переглянут Олександром Бєлопольським, Георгом Брандлом, Ендрю "
"Кухлінгом та Еціо Мелотті."

#: ../../howto/unicode.rst:760
msgid ""
"Thanks to the following people who have noted errors or offered suggestions "
"on this article: Éric Araujo, Nicholas Bastin, Nick Coghlan, Marius "
"Gedminas, Kent Johnson, Ken Krugler, Marc-André Lemburg, Martin von Löwis, "
"Terry J. Reedy, Serhiy Storchaka, Eryk Sun, Chad Whitacre, Graham Wideman."
msgstr ""
"Дякуємо таким людям, які помітили помилки або надали пропозиції щодо цієї "
"статті: Ерік Араухо, Ніколас Бастін, Нік Коглан, Маріус Гедмінас, Кент "
"Джонсон, Кен Круглер, Марк-Андре Лембург, Мартін фон Льовіс, Террі Дж. Ріді, "
"Сергій Сторчака , Ерік Сан, Чад Вітакр, Грем Уайдмен."
