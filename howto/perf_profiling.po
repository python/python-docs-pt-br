# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Hemílio Lauro <hemilioaraujo@gmail.com>, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:16+0000\n"
"PO-Revision-Date: 2023-05-24 13:07+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../howto/perf_profiling.rst:7
msgid "Python support for the Linux ``perf`` profiler"
msgstr "Suporte do Python ao perfilador ``perf`` do Linux"

#: ../../howto/perf_profiling.rst:0
msgid "author"
msgstr "autor"

#: ../../howto/perf_profiling.rst:9
msgid "Pablo Galindo"
msgstr "Pablo Galindo"

#: ../../howto/perf_profiling.rst:11
msgid ""
"`The Linux perf profiler <https://perf.wiki.kernel.org>`_ is a very powerful "
"tool that allows you to profile and obtain information about the performance "
"of your application. ``perf`` also has a very vibrant ecosystem of tools "
"that aid with the analysis of the data that it produces."
msgstr ""
"`O perfilador perf do Linux <https://perf.wiki.kernel.org>`_ é uma "
"ferramenta muito poderosa que permite criar perfis e obter informações sobre "
"o desempenho da sua aplicação. ``perf`` também possui um ecossistema muito "
"vibrante de ferramentas que auxiliam na análise dos dados que produz."

#: ../../howto/perf_profiling.rst:17
msgid ""
"The main problem with using the ``perf`` profiler with Python applications "
"is that ``perf`` only gets information about native symbols, that is, the "
"names of functions and procedures written in C. This means that the names "
"and file names of Python functions in your code will not appear in the "
"output of ``perf``."
msgstr ""
"O principal problema de usar o perfilador ``perf`` com aplicações Python é "
"que ``perf`` apenas obtém informações sobre símbolos nativos, ou seja, os "
"nomes de funções e procedimentos escritos em C. Isso significa que os nomes "
"de funções Python e seus nomes de arquivos em seu código não aparecerão na "
"saída de ``perf``."

#: ../../howto/perf_profiling.rst:22
msgid ""
"Since Python 3.12, the interpreter can run in a special mode that allows "
"Python functions to appear in the output of the ``perf`` profiler. When this "
"mode is enabled, the interpreter will interpose a small piece of code "
"compiled on the fly before the execution of every Python function and it "
"will teach ``perf`` the relationship between this piece of code and the "
"associated Python function using :doc:`perf map files <../c-api/perfmaps>`."
msgstr ""
"Desde o Python 3.12, o interpretador pode ser executado em um modo especial "
"que permite que funções do Python apareçam na saída do criador de perfilador "
"``perf``. Quando este modo está habilitado, o interpretador interporá um "
"pequeno pedaço de código compilado instantaneamente antes da execução de "
"cada função Python e ensinará ``perf`` a relação entre este pedaço de código "
"e a função Python associada usando :doc:`arquivos de mapa perf <../c-api/"
"perfmaps>`."

#: ../../howto/perf_profiling.rst:31
msgid ""
"Support for the ``perf`` profiler is currently only available for Linux on "
"select architectures. Check the output of the ``configure`` build step or "
"check the output of ``python -m sysconfig | grep HAVE_PERF_TRAMPOLINE`` to "
"see if your system is supported."
msgstr ""
"O suporte para o perfilador ``perf`` está atualmente disponível apenas para "
"Linux em arquiteturas selecionadas. Verifique a saída da etapa de construção "
"``configure`` ou verifique a saída de ``python -m sysconfig | grep "
"HAVE_PERF_TRAMPOLINE`` para ver se o seu sistema é compatível."

#: ../../howto/perf_profiling.rst:36
msgid "For example, consider the following script:"
msgstr "Por exemplo, considere o seguinte script:"

#: ../../howto/perf_profiling.rst:38
msgid ""
"def foo(n):\n"
"    result = 0\n"
"    for _ in range(n):\n"
"        result += 1\n"
"    return result\n"
"\n"
"def bar(n):\n"
"    foo(n)\n"
"\n"
"def baz(n):\n"
"    bar(n)\n"
"\n"
"if __name__ == \"__main__\":\n"
"    baz(1000000)"
msgstr ""
"def foo(n):\n"
"    result = 0\n"
"    for _ in range(n):\n"
"        result += 1\n"
"    return result\n"
"\n"
"def bar(n):\n"
"    foo(n)\n"
"\n"
"def baz(n):\n"
"    bar(n)\n"
"\n"
"if __name__ == \"__main__\":\n"
"    baz(1000000)"

#: ../../howto/perf_profiling.rst:55
msgid "We can run ``perf`` to sample CPU stack traces at 9999 hertz::"
msgstr ""
"Podemos executar ``perf`` para obter amostras de rastreamentos de pilha da "
"CPU em 9999 hertz::"

#: ../../howto/perf_profiling.rst:57
msgid "$ perf record -F 9999 -g -o perf.data python my_script.py"
msgstr "$ perf record -F 9999 -g -o perf.data python my_script.py"

#: ../../howto/perf_profiling.rst:59
msgid "Then we can use ``perf report`` to analyze the data:"
msgstr "Então podemos usar ``perf report`` para analisar os dados:"

#: ../../howto/perf_profiling.rst:61
msgid ""
"$ perf report --stdio -n -g\n"
"\n"
"# Children      Self       Samples  Command     Shared Object       Symbol\n"
"# ........  ........  ............  ..........  ..................  ..........................................\n"
"#\n"
"    91.08%     0.00%             0  python.exe  python.exe          [.] "
"_start\n"
"            |\n"
"            ---_start\n"
"            |\n"
"                --90.71%--__libc_start_main\n"
"                        Py_BytesMain\n"
"                        |\n"
"                        |--56.88%--pymain_run_python.constprop.0\n"
"                        |          |\n"
"                        |          |--56.13%--_PyRun_AnyFileObject\n"
"                        |          |          _PyRun_SimpleFileObject\n"
"                        |          |          |\n"
"                        |          |          |--55.02%--run_mod\n"
"                        |          |          |          |\n"
"                        |          |          |           --54.65%--"
"PyEval_EvalCode\n"
"                        |          |          |                     "
"_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"PyObject_Vectorcall\n"
"                        |          |          |                     "
"_PyEval_Vector\n"
"                        |          |          |                     "
"_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"PyObject_Vectorcall\n"
"                        |          |          |                     "
"_PyEval_Vector\n"
"                        |          |          |                     "
"_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"PyObject_Vectorcall\n"
"                        |          |          |                     "
"_PyEval_Vector\n"
"                        |          |          |                     |\n"
"                        |          |          |                     "
"|--51.67%--_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"|          |\n"
"                        |          |          |                     "
"|          |--11.52%--_PyLong_Add\n"
"                        |          |          |                     "
"|          |          |\n"
"                        |          |          |                     "
"|          |          |--2.97%--_PyObject_Malloc\n"
"..."
msgstr ""
"$ perf report --stdio -n -g\n"
"\n"
"# Children      Self       Samples  Command     Shared Object       Symbol\n"
"# ........  ........  ............  ..........  ..................  ..........................................\n"
"#\n"
"    91.08%     0.00%             0  python.exe  python.exe          [.] "
"_start\n"
"            |\n"
"            ---_start\n"
"            |\n"
"                --90.71%--__libc_start_main\n"
"                        Py_BytesMain\n"
"                        |\n"
"                        |--56.88%--pymain_run_python.constprop.0\n"
"                        |          |\n"
"                        |          |--56.13%--_PyRun_AnyFileObject\n"
"                        |          |          _PyRun_SimpleFileObject\n"
"                        |          |          |\n"
"                        |          |          |--55.02%--run_mod\n"
"                        |          |          |          |\n"
"                        |          |          |           --54.65%--"
"PyEval_EvalCode\n"
"                        |          |          |                     "
"_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"PyObject_Vectorcall\n"
"                        |          |          |                     "
"_PyEval_Vector\n"
"                        |          |          |                     "
"_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"PyObject_Vectorcall\n"
"                        |          |          |                     "
"_PyEval_Vector\n"
"                        |          |          |                     "
"_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"PyObject_Vectorcall\n"
"                        |          |          |                     "
"_PyEval_Vector\n"
"                        |          |          |                     |\n"
"                        |          |          |                     "
"|--51.67%--_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"|          |\n"
"                        |          |          |                     "
"|          |--11.52%--_PyLong_Add\n"
"                        |          |          |                     "
"|          |          |\n"
"                        |          |          |                     "
"|          |          |--2.97%--_PyObject_Malloc\n"
"..."

#: ../../howto/perf_profiling.rst:100
msgid ""
"As you can see, the Python functions are not shown in the output, only "
"``_PyEval_EvalFrameDefault`` (the function that evaluates the Python "
"bytecode) shows up. Unfortunately that's not very useful because all Python "
"functions use the same C function to evaluate bytecode so we cannot know "
"which Python function corresponds to which bytecode-evaluating function."
msgstr ""
"Como você pode ver, as funções Python não são mostradas na saída, apenas "
"``_PyEval_EvalFrameDefault`` (a função que avalia o bytecode Python) "
"aparece. Infelizmente isso não é muito útil porque todas as funções Python "
"usam a mesma função C para avaliar bytecode, portanto não podemos saber qual "
"função Python corresponde a qual função de avaliação de bytecode."

#: ../../howto/perf_profiling.rst:105
msgid ""
"Instead, if we run the same experiment with ``perf`` support enabled we get:"
msgstr ""
"Em vez disso, se executarmos o mesmo experimento com o suporte ``perf`` "
"ativado, obteremos:"

#: ../../howto/perf_profiling.rst:107
msgid ""
"$ perf report --stdio -n -g\n"
"\n"
"# Children      Self       Samples  Command     Shared Object       Symbol\n"
"# ........  ........  ............  ..........  ..................  .....................................................................\n"
"#\n"
"    90.58%     0.36%             1  python.exe  python.exe          [.] "
"_start\n"
"            |\n"
"            ---_start\n"
"            |\n"
"                --89.86%--__libc_start_main\n"
"                        Py_BytesMain\n"
"                        |\n"
"                        |--55.43%--pymain_run_python.constprop.0\n"
"                        |          |\n"
"                        |          |--54.71%--_PyRun_AnyFileObject\n"
"                        |          |          _PyRun_SimpleFileObject\n"
"                        |          |          |\n"
"                        |          |          |--53.62%--run_mod\n"
"                        |          |          |          |\n"
"                        |          |          |           --53.26%--"
"PyEval_EvalCode\n"
"                        |          |          |                     py::"
"<module>:/src/script.py\n"
"                        |          |          |                     "
"_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"PyObject_Vectorcall\n"
"                        |          |          |                     "
"_PyEval_Vector\n"
"                        |          |          |                     py::baz:/"
"src/script.py\n"
"                        |          |          |                     "
"_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"PyObject_Vectorcall\n"
"                        |          |          |                     "
"_PyEval_Vector\n"
"                        |          |          |                     py::bar:/"
"src/script.py\n"
"                        |          |          |                     "
"_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"PyObject_Vectorcall\n"
"                        |          |          |                     "
"_PyEval_Vector\n"
"                        |          |          |                     py::foo:/"
"src/script.py\n"
"                        |          |          |                     |\n"
"                        |          |          |                     "
"|--51.81%--_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"|          |\n"
"                        |          |          |                     "
"|          |--13.77%--_PyLong_Add\n"
"                        |          |          |                     "
"|          |          |\n"
"                        |          |          |                     "
"|          |          |--3.26%--_PyObject_Malloc"
msgstr ""
"$ perf report --stdio -n -g\n"
"\n"
"# Children      Self       Samples  Command     Shared Object       Symbol\n"
"# ........  ........  ............  ..........  ..................  .....................................................................\n"
"#\n"
"    90.58%     0.36%             1  python.exe  python.exe          [.] "
"_start\n"
"            |\n"
"            ---_start\n"
"            |\n"
"                --89.86%--__libc_start_main\n"
"                        Py_BytesMain\n"
"                        |\n"
"                        |--55.43%--pymain_run_python.constprop.0\n"
"                        |          |\n"
"                        |          |--54.71%--_PyRun_AnyFileObject\n"
"                        |          |          _PyRun_SimpleFileObject\n"
"                        |          |          |\n"
"                        |          |          |--53.62%--run_mod\n"
"                        |          |          |          |\n"
"                        |          |          |           --53.26%--"
"PyEval_EvalCode\n"
"                        |          |          |                     py::"
"<module>:/src/script.py\n"
"                        |          |          |                     "
"_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"PyObject_Vectorcall\n"
"                        |          |          |                     "
"_PyEval_Vector\n"
"                        |          |          |                     py::baz:/"
"src/script.py\n"
"                        |          |          |                     "
"_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"PyObject_Vectorcall\n"
"                        |          |          |                     "
"_PyEval_Vector\n"
"                        |          |          |                     py::bar:/"
"src/script.py\n"
"                        |          |          |                     "
"_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"PyObject_Vectorcall\n"
"                        |          |          |                     "
"_PyEval_Vector\n"
"                        |          |          |                     py::foo:/"
"src/script.py\n"
"                        |          |          |                     |\n"
"                        |          |          |                     "
"|--51.81%--_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"|          |\n"
"                        |          |          |                     "
"|          |--13.77%--_PyLong_Add\n"
"                        |          |          |                     "
"|          |          |\n"
"                        |          |          |                     "
"|          |          |--3.26%--_PyObject_Malloc"

#: ../../howto/perf_profiling.rst:152
msgid "How to enable ``perf`` profiling support"
msgstr "Como habilitar o suporte a perfilação com ``perf``"

#: ../../howto/perf_profiling.rst:154
msgid ""
"``perf`` profiling support can be enabled either from the start using the "
"environment variable :envvar:`PYTHONPERFSUPPORT` or the :option:`-X perf <-"
"X>` option, or dynamically using :func:`sys.activate_stack_trampoline` and :"
"func:`sys.deactivate_stack_trampoline`."
msgstr ""
"O suporte à perfilação com ``perf`` pode ser habilitado desde o início "
"usando a variável de ambiente :envvar:`PYTHONPERFSUPPORT` ou a opção :option:"
"`-X perf <-X>`, ou dinamicamente usando :func:`sys."
"activate_stack_trampoline` e :func:`sys.deactivate_stack_trampoline`."

#: ../../howto/perf_profiling.rst:160
msgid ""
"The :mod:`!sys` functions take precedence over the :option:`!-X` option, "
"the :option:`!-X` option takes precedence over the environment variable."
msgstr ""
"As funções :mod:`!sys` têm precedência sobre a opção :option:`!-X`, a opção :"
"option:`!-X` tem precedência sobre a variável de ambiente."

#: ../../howto/perf_profiling.rst:163
msgid "Example, using the environment variable::"
msgstr "Exemplo usando a variável de ambiente::"

#: ../../howto/perf_profiling.rst:165
msgid ""
"$ PYTHONPERFSUPPORT=1 perf record -F 9999 -g -o perf.data python script.py\n"
"$ perf report -g -i perf.data"
msgstr ""
"$ PYTHONPERFSUPPORT=1 perf record -F 9999 -g -o perf.data python script.py\n"
"$ perf report -g -i perf.data"

#: ../../howto/perf_profiling.rst:168
msgid "Example, using the :option:`!-X` option::"
msgstr "Exemplo usando a opção :option:`!-X`::"

#: ../../howto/perf_profiling.rst:170
msgid ""
"$ perf record -F 9999 -g -o perf.data python -X perf script.py\n"
"$ perf report -g -i perf.data"
msgstr ""
"$ perf record -F 9999 -g -o perf.data python -X perf script.py\n"
"$ perf report -g -i perf.data"

#: ../../howto/perf_profiling.rst:173
msgid "Example, using the :mod:`sys` APIs in file :file:`example.py`:"
msgstr "Exemplo usando as APIs de :mod:`sys` em :file:`example.py`:"

#: ../../howto/perf_profiling.rst:175
msgid ""
"import sys\n"
"\n"
"sys.activate_stack_trampoline(\"perf\")\n"
"do_profiled_stuff()\n"
"sys.deactivate_stack_trampoline()\n"
"\n"
"non_profiled_stuff()"
msgstr ""
"import sys\n"
"\n"
"sys.activate_stack_trampoline(\"perf\")\n"
"do_profiled_stuff()\n"
"sys.deactivate_stack_trampoline()\n"
"\n"
"non_profiled_stuff()"

#: ../../howto/perf_profiling.rst:185
msgid "...then::"
msgstr "... então::"

#: ../../howto/perf_profiling.rst:187
msgid ""
"$ perf record -F 9999 -g -o perf.data python ./example.py\n"
"$ perf report -g -i perf.data"
msgstr ""
"$ perf record -F 9999 -g -o perf.data python ./example.py\n"
"$ perf report -g -i perf.data"

#: ../../howto/perf_profiling.rst:192
msgid "How to obtain the best results"
msgstr "Como obter os melhores resultados"

#: ../../howto/perf_profiling.rst:194
msgid ""
"For best results, Python should be compiled with ``CFLAGS=\"-fno-omit-frame-"
"pointer -mno-omit-leaf-frame-pointer\"`` as this allows profilers to unwind "
"using only the frame pointer and not on DWARF debug information. This is "
"because as the code that is interposed to allow ``perf`` support is "
"dynamically generated it doesn't have any DWARF debugging information "
"available."
msgstr ""
"Para melhores resultados, Python deve ser compilado com ``CFLAGS=\"-fno-omit-"
"frame-pointer -mno-omit-leaf-frame-pointer\"``, pois isso permite que os "
"perfiladores façam o desenrolamento de pilha (ou *stack unwinding*) usando "
"apenas o ponteiro de quadro e não no DWARF informações de depuração. Isso "
"ocorre porque como o código interposto para permitir o suporte ``perf`` é "
"gerado dinamicamente, ele não possui nenhuma informação de depuração DWARF "
"disponível."

#: ../../howto/perf_profiling.rst:201
msgid ""
"You can check if your system has been compiled with this flag by running::"
msgstr ""
"Você pode verificar se o seu sistema foi compilado com este sinalizador "
"executando::"

#: ../../howto/perf_profiling.rst:203
msgid "$ python -m sysconfig | grep 'no-omit-frame-pointer'"
msgstr "$ python -m sysconfig | grep 'no-omit-frame-pointer'"

#: ../../howto/perf_profiling.rst:205
msgid ""
"If you don't see any output it means that your interpreter has not been "
"compiled with frame pointers and therefore it may not be able to show Python "
"functions in the output of ``perf``."
msgstr ""
"Se você não vir nenhuma saída, significa que seu interpretador não foi "
"compilado com ponteiros de quadro e, portanto, pode não ser capaz de mostrar "
"funções Python na saída de ``perf``."

#: ../../howto/perf_profiling.rst:211
msgid "How to work without frame pointers"
msgstr "Como trabalhar sem ponteiros de quadro"

#: ../../howto/perf_profiling.rst:213
msgid ""
"If you are working with a Python interpreter that has been compiled without "
"frame pointers, you can still use the ``perf`` profiler, but the overhead "
"will be a bit higher because Python needs to generate unwinding information "
"for every Python function call on the fly. Additionally, ``perf`` will take "
"more time to process the data because it will need to use the DWARF "
"debugging information to unwind the stack and this is a slow process."
msgstr ""
"Se você estiver trabalhando com um interpretador Python que foi compilado "
"sem ponteiros de quadro, você ainda pode usar o perfilador ``perf``, mas a "
"sobrecarga será um pouco maior porque o Python precisa gerar informações de "
"desenrolamento para cada chamada de função Python em tempo real. Além disso, "
"``perf`` levará mais tempo para processar os dados porque precisará usar as "
"informações de depuração DWARF para desenrolar a pilha e este é um processo "
"lento."

#: ../../howto/perf_profiling.rst:220
msgid ""
"To enable this mode, you can use the environment variable :envvar:"
"`PYTHON_PERF_JIT_SUPPORT` or the :option:`-X perf_jit <-X>` option, which "
"will enable the JIT mode for the ``perf`` profiler."
msgstr ""
"Para habilitar esse modo, você pode usar a variável de ambiente :envvar:"
"`PYTHON_PERF_JIT_SUPPORT` ou a opção :option:`-X perf_jit <-X>`, que "
"habilitará o modo JIT para o perfilador ``perf``."

#: ../../howto/perf_profiling.rst:226
msgid ""
"Due to a bug in the ``perf`` tool, only ``perf`` versions higher than v6.8 "
"will work with the JIT mode.  The fix was also backported to the v6.7.2 "
"version of the tool."
msgstr ""
"Devido a um bug na ferramenta ``perf``, apenas versões ``perf`` superiores à "
"v6.8 funcionarão com o modo JIT. A correção também foi portada para a versão "
"v6.7.2 da ferramenta."

#: ../../howto/perf_profiling.rst:230
msgid ""
"Note that when checking the version of the ``perf`` tool (which can be done "
"by running ``perf version``) you must take into account that some distros "
"add some custom version numbers including a ``-`` character.  This means "
"that ``perf 6.7-3`` is not necessarily ``perf 6.7.3``."
msgstr ""
"Note que ao verificar a versão da ferramenta ``perf`` (o que pode ser feito "
"executando ``perf version``) você deve levar em conta que algumas distros "
"adicionam alguns números de versão personalizados, incluindo um caractere ``-"
"``. Isso significa que ``perf 6.7-3`` não é necessariamente ``perf 6.7.3``."

#: ../../howto/perf_profiling.rst:235
msgid ""
"When using the perf JIT mode, you need an extra step before you can run "
"``perf report``. You need to call the ``perf inject`` command to inject the "
"JIT information into the ``perf.data`` file.::"
msgstr ""
"Ao usar o modo JIT do perf, você precisa de uma etapa extra antes de poder "
"executar ``perf report``. Você precisa chamar o comando ``perf inject`` para "
"injetar as informações JIT no arquivo ``perf.data``.::"

#: ../../howto/perf_profiling.rst:239
msgid ""
"$ perf record -F 9999 -g --call-graph dwarf -o perf.data python -Xperf_jit "
"my_script.py\n"
"$ perf inject -i perf.data --jit --output perf.jit.data\n"
"$ perf report -g -i perf.jit.data"
msgstr ""
"$ perf record -F 9999 -g --call-graph dwarf -o perf.data python -Xperf_jit "
"my_script.py\n"
"$ perf inject -i perf.data --jit --output perf.jit.data\n"
"$ perf report -g -i perf.jit.data"

#: ../../howto/perf_profiling.rst:243
msgid "or using the environment variable::"
msgstr "ou usando a variável de ambiente::"

#: ../../howto/perf_profiling.rst:245
msgid ""
"$ PYTHON_PERF_JIT_SUPPORT=1 perf record -F 9999 -g --call-graph dwarf -o "
"perf.data python my_script.py\n"
"$ perf inject -i perf.data --jit --output perf.jit.data\n"
"$ perf report -g -i perf.jit.data"
msgstr ""
"$ PYTHON_PERF_JIT_SUPPORT=1 perf record -F 9999 -g --call-graph dwarf -o "
"perf.data python my_script.py\n"
"$ perf inject -i perf.data --jit --output perf.jit.data\n"
"$ perf report -g -i perf.jit.data"

#: ../../howto/perf_profiling.rst:249
msgid ""
"``perf inject --jit`` command will read ``perf.data``, automatically pick up "
"the perf dump file that Python creates (in ``/tmp/perf-$PID.dump``), and "
"then create ``perf.jit.data`` which merges all the JIT information together. "
"It should also create a lot of ``jitted-XXXX-N.so`` files in the current "
"directory which are ELF images for all the JIT trampolines that were created "
"by Python."
msgstr ""
"O comando ``perf inject --jit`` lerá ``perf.data``, pegará automaticamente o "
"arquivo de dump perf que o Python cria (em ``/tmp/perf-$PID.dump``) e, em "
"seguida, criará ``perf.jit.data`` que mescla todas as informações JIT. Ele "
"também deve criar muitos arquivos ``jitted-XXXX-N.so`` no diretório atual, "
"que são imagens ELF para todos os trampolins JIT que foram criados pelo "
"Python."

#: ../../howto/perf_profiling.rst:257
msgid ""
"Notice that when using ``--call-graph dwarf`` the ``perf`` tool will take "
"snapshots of the stack of the process being profiled and save the "
"information in the ``perf.data`` file. By default the size of the stack dump "
"is 8192 bytes but the user can change the size by passing the size after "
"comma like ``--call-graph dwarf,4096``. The size of the stack dump is "
"important because if the size is too small ``perf`` will not be able to "
"unwind the stack and the output will be incomplete. On the other hand, if "
"the size is too big, then ``perf`` won't be able to sample the process as "
"frequently as it would like as the overhead will be higher."
msgstr ""
"Observe que ao usar ``--call-graph dwarf``, a ferramenta ``perf`` fará "
"snapshots da pilha do processo que está sendo perfilado e salvará as "
"informações no arquivo ``perf.data``. Por padrão, o tamanho do dump da pilha "
"é 8192 bytes, mas o usuário pode alterar o tamanho passando o tamanho após a "
"vírgula como ``--call-graph dwarf,4096``. O tamanho do dump da pilha é "
"importante porque se o tamanho for muito pequeno, ``perf`` não conseguirá "
"desenrolar a pilha e a saída ficará incompleta. Por outro lado, se o tamanho "
"for muito grande, então ``perf`` não conseguirá amostrar o processo com a "
"frequência que gostaria, pois a sobrecarga será maior."
